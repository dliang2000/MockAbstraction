public class org.apache.flink.configuration.description.DescriptionHtmlTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDescriptionWithLink()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r6;
        org.apache.flink.configuration.description.InlineElement[] $r4;
        org.apache.flink.configuration.description.LinkElement $r5;
        org.apache.flink.configuration.description.HtmlFormatter $r7;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r5 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("https://somepage", "to here");

        $r4[0] = $r5;

        $r6 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("This is a text with a link %s", $r4);

        r1 = virtualinvoke $r6.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r7 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r7.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r7.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is a text with a link <a href=\"https://somepage\">to here</a>", r2);

        return;
    }

    public void testDescriptionWithPercents()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4;
        org.apache.flink.configuration.description.HtmlFormatter $r5;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This is a text that has some percentage value of 20%.");

        r1 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r5 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r5.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r5.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is a text that has some percentage value of 20%.", r2);

        return;
    }

    public void testDescriptionWithMultipleLinks()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r7;
        org.apache.flink.configuration.description.InlineElement[] $r4;
        org.apache.flink.configuration.description.LinkElement $r5, $r6;
        org.apache.flink.configuration.description.HtmlFormatter $r8;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r5 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("https://somepage", "to here");

        $r4[0] = $r5;

        $r6 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String)>("https://link");

        $r4[1] = $r6;

        $r7 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("This is a text with a link %s and another %s", $r4);

        r1 = virtualinvoke $r7.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r8 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r8.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r8.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is a text with a link <a href=\"https://somepage\">to here</a> and another <a href=\"https://link\">https://link</a>", r2);

        return;
    }

    public void testDescriptionWithList()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4, $r10;
        org.apache.flink.configuration.description.InlineElement[] $r5, $r7;
        org.apache.flink.configuration.description.LinkElement $r6, $r8;
        org.apache.flink.configuration.description.TextElement $r9;
        org.apache.flink.configuration.description.HtmlFormatter $r11;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This is some list: ");

        $r5 = newarray (org.apache.flink.configuration.description.InlineElement)[2];

        $r6 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String)>("http://first_link");

        $r5[0] = $r6;

        $r7 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r8 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String)>("https://link");

        $r7[0] = $r8;

        $r9 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("this is second element of list with a %s", $r7);

        $r5[1] = $r9;

        $r10 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r5);

        r1 = virtualinvoke $r10.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r11 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r11.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r11.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is some list: <ul><li><a href=\"http://first_link\">http://first_link</a></li><li>this is second element of list with a <a href=\"https://link\">https://link</a></li></ul>", r2);

        return;
    }

    public void testDescriptionWithLineBreak()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4, $r5, $r6;
        org.apache.flink.configuration.description.HtmlFormatter $r7;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This is first line.");

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder linebreak()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This is second line.");

        r1 = virtualinvoke $r6.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r7 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r7.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r7.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is first line.<br />This is second line.", r2);

        return;
    }

    public void testDescriptionWithListAndEscaping()
    {
        org.apache.flink.configuration.description.DescriptionHtmlTest r0;
        org.apache.flink.configuration.description.Description r1;
        java.lang.String r2;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r3, $r4, $r7;
        org.apache.flink.configuration.description.InlineElement[] $r5;
        org.apache.flink.configuration.description.TextElement $r6;
        org.apache.flink.configuration.description.HtmlFormatter $r8;

        r0 := @this: org.apache.flink.configuration.description.DescriptionHtmlTest;

        $r3 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("This is some list: ");

        $r5 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r6 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement text(java.lang.String)>("this is first element with illegal character \'>\' and \'<\'");

        $r5[0] = $r6;

        $r7 = virtualinvoke $r4.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder list(org.apache.flink.configuration.description.InlineElement[])>($r5);

        r1 = virtualinvoke $r7.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r8 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r8.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        r2 = virtualinvoke $r8.<org.apache.flink.configuration.description.HtmlFormatter: java.lang.String format(org.apache.flink.configuration.description.Description)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is some list: <ul><li>this is first element with illegal character \'&gt;\' and \'&lt;\'</li></ul>", r2);

        return;
    }
}
