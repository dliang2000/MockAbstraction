public class org.apache.flink.types.StringValueSerializationTest extends java.lang.Object
{
    private final java.util.Random rnd;

    public void <init>()
    {
        org.apache.flink.types.StringValueSerializationTest r0;
        java.util.Random $r1;

        r0 := @this: org.apache.flink.types.StringValueSerializationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(2093486528937460234L);

        r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd> = $r1;

        return;
    }

    public void testNonNullValues()
    {
        org.apache.flink.types.StringValueSerializationTest r0;
        java.lang.String[] $r1;
        java.lang.Exception $r2;
        java.io.PrintStream $r3;
        java.lang.String $r4, $r7, $r9;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.apache.flink.types.StringValueSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "a";

        $r1[1] = "";

        $r1[2] = "bcd";

        $r1[3] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r1[4] = "";

        $r1[5] = "non-empty";

        staticinvoke <org.apache.flink.types.StringValueSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r7 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testLongValues()
    {
        org.apache.flink.types.StringValueSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringValueSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[4];

        $r2 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r4 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[1] = $r5;

        $r6 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[2] = $r7;

        $r8 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[3] = $r9;

        staticinvoke <org.apache.flink.types.StringValueSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testMixedValues()
    {
        org.apache.flink.types.StringValueSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringValueSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[7];

        $r2 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r1[1] = "";

        $r4 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[2] = $r5;

        $r6 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[3] = $r7;

        $r1[4] = "";

        $r8 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[5] = $r9;

        $r1[6] = "";

        staticinvoke <org.apache.flink.types.StringValueSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testBinaryCopyOfLongStrings()
    {
        org.apache.flink.types.StringValueSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringValueSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[7];

        $r2 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r1[1] = "";

        $r4 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[2] = $r5;

        $r6 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[3] = $r7;

        $r1[4] = "";

        $r8 = r0.<org.apache.flink.types.StringValueSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[5] = $r9;

        $r1[6] = "";

        staticinvoke <org.apache.flink.types.StringValueSerializationTest: void testCopy(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void testSerialization(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        java.io.ByteArrayOutputStream $r4;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r5;
        java.io.ByteArrayInputStream $r6;
        byte[] $r7;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r8;
        int $i0, $i1, i4, i5, i6;
        long $l2, $l3;
        org.apache.flink.types.StringValue $r9, $r12;
        java.lang.String $r10, $r11, r14;

        r0 := @parameter0: java.lang.String[];

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r5 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r4);

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r14 = r0[i5];

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>(r14);

        virtualinvoke $r12.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r5);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        virtualinvoke $r4.<java.io.ByteArrayOutputStream: void close()>();

        $r6 = new java.io.ByteArrayInputStream;

        $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r6.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        $r8 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r6);

        i6 = 0;

     label3:
        $i0 = virtualinvoke $r6.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label4;

        $r9 = new org.apache.flink.types.StringValue;

        specialinvoke $r9.<org.apache.flink.types.StringValue: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r8);

        $r10 = r0[i6];

        $r11 = virtualinvoke $r9.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DeserializedString differs from original string.", $r10, $r11);

        i6 = i6 + 1;

        goto label3;

     label4:
        $i1 = lengthof r0;

        $l3 = (long) $i1;

        $l2 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of deserialized values", $l3, $l2);

        return;
    }

    public static void testCopy(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        java.lang.String r4, $r16, $r17, r19;
        java.io.ByteArrayOutputStream $r5, $r11;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r6, $r12;
        org.apache.flink.types.StringValue $r7;
        java.io.ByteArrayInputStream $r8, $r13;
        byte[] $r9, $r14;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r10, $r15;
        int $i0, $i1, i4, i5, i6, i7, i8;
        long $l2, $l3;

        r0 := @parameter0: java.lang.String[];

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r6 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r5);

        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>()>();

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r19 = r0[i5];

        virtualinvoke $r7.<org.apache.flink.types.StringValue: void setValue(java.lang.CharSequence)>(r19);

        virtualinvoke $r7.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r6);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        $r10 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r10.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r8);

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r12 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r12.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r11);

        i6 = lengthof r0;

        i7 = 0;

     label3:
        if i7 >= i6 goto label4;

        r4 = r0[i7];

        virtualinvoke $r7.<org.apache.flink.types.StringValue: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>($r10, $r12);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r13 = new java.io.ByteArrayInputStream;

        $r14 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r13.<java.io.ByteArrayInputStream: void <init>(byte[])>($r14);

        $r15 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r15.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r13);

        i8 = 0;

     label5:
        $i0 = virtualinvoke $r13.<java.io.ByteArrayInputStream: int available()>();

        if $i0 <= 0 goto label6;

        virtualinvoke $r7.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r15);

        $r16 = r0[i8];

        $r17 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DeserializedString differs from original string.", $r16, $r17);

        i8 = i8 + 1;

        goto label5;

     label6:
        $i1 = lengthof r0;

        $l3 = (long) $i1;

        $l2 = (long) i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of deserialized values", $l3, $l2);

        return;
    }
}
