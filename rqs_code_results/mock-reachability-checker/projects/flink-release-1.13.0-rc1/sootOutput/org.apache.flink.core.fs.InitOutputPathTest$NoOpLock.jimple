final class org.apache.flink.core.fs.InitOutputPathTest$NoOpLock extends java.util.concurrent.locks.ReentrantLock
{

    private void <init>()
    {
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock r0;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        return;
    }

    public void lock()
    {
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock r0;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        return;
    }

    public void lockInterruptibly()
    {
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock r0;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        return;
    }

    public void unlock()
    {
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock r0;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        return;
    }

    void <init>(org.apache.flink.core.fs.InitOutputPathTest$1)
    {
        org.apache.flink.core.fs.InitOutputPathTest$NoOpLock r0;
        org.apache.flink.core.fs.InitOutputPathTest$1 r1;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$NoOpLock;

        r1 := @parameter0: org.apache.flink.core.fs.InitOutputPathTest$1;

        specialinvoke r0.<org.apache.flink.core.fs.InitOutputPathTest$NoOpLock: void <init>()>();

        return;
    }
}
