final class org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat extends org.apache.flink.api.common.io.FileInputFormat
{
    private static final long serialVersionUID;

    private void <init>()
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: void <init>()>();

        return;
    }

    public boolean reachedEnd() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        long $l0, $l1, $l2, $l3;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        $l0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: long getPos()>();

        $l2 = r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: long splitStart>;

        $l1 = r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: long splitLength>;

        $l3 = $l2 + $l1;

        $b4 = $l0 cmp $l3;

        if $b4 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public byte[] nextRecord(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;
        byte[] r1, $r3;
        int i0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        byte $b1;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: org.apache.flink.core.fs.FSDataInputStream stream>;

        i0 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

        if i0 != -1 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r3 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r3[0] = $b1;

        return $r3;
    }

    protected org.apache.flink.core.fs.FSDataInputStream decorateInputStream(org.apache.flink.core.fs.FSDataInputStream, org.apache.flink.core.fs.FileInputSplit) throws java.lang.Throwable
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.api.common.io.InputStreamFSInputWrapper $r2;
        org.apache.flink.api.common.io.FileInputFormatTest$InvertedInputStream $r3;
        org.apache.flink.core.fs.FSDataInputStream r4, r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        r4 := @parameter0: org.apache.flink.core.fs.FSDataInputStream;

        r1 := @parameter1: org.apache.flink.core.fs.FileInputSplit;

        r5 = specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FSDataInputStream decorateInputStream(org.apache.flink.core.fs.FSDataInputStream,org.apache.flink.core.fs.FileInputSplit)>(r4, r1);

        $r2 = new org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        $r3 = new org.apache.flink.api.common.io.FileInputFormatTest$InvertedInputStream;

        specialinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$InvertedInputStream: void <init>(java.io.InputStream,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r5, null);

        specialinvoke $r2.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: void <init>(java.io.InputStream)>($r3);

        return $r2;
    }

    public volatile java.lang.Object nextRecord(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;
        java.lang.Object r1;
        byte[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        r1 := @parameter0: java.lang.Object;

        $r2 = (byte[]) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: byte[] nextRecord(byte[])>($r2);

        return $r3;
    }

    void <init>(org.apache.flink.api.common.io.FileInputFormatTest$1)
    {
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat r0;
        org.apache.flink.api.common.io.FileInputFormatTest$1 r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.FileInputFormatTest$1;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: long serialVersionUID> = 1L;

        return;
    }
}
