public class org.apache.flink.util.ResourceGuardTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.ResourceGuardTest r0;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testClose()
    {
        org.apache.flink.util.ResourceGuardTest r0;
        org.apache.flink.util.ResourceGuard $r3;
        boolean $z0, $z1;
        java.io.IOException $r5;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        $r3 = new org.apache.flink.util.ResourceGuard;

        specialinvoke $r3.<org.apache.flink.util.ResourceGuard: void <init>()>();

        $z0 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: void close()>();

        $z1 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label1:
        virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testAcquireReleaseClose() throws java.io.IOException
    {
        org.apache.flink.util.ResourceGuardTest r0;
        org.apache.flink.util.ResourceGuard$Lease r2;
        org.apache.flink.util.ResourceGuard $r3;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        $r3 = new org.apache.flink.util.ResourceGuard;

        specialinvoke $r3.<org.apache.flink.util.ResourceGuard: void <init>()>();

        r2 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        $i0 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        virtualinvoke r2.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i2 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: void close()>();

        $z0 = virtualinvoke $r3.<org.apache.flink.util.ResourceGuard: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCloseBlockIfAcquired() throws java.lang.Exception
    {
        org.apache.flink.util.ResourceGuardTest r0;
        org.apache.flink.util.ResourceGuard$Lease r2;
        org.apache.flink.util.ResourceGuard $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;
        org.apache.flink.util.ResourceGuardTest$1 $r8;
        boolean $z0, $z1, $z2;
        java.io.IOException $r10;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        $r6 = new org.apache.flink.util.ResourceGuard;

        specialinvoke $r6.<org.apache.flink.util.ResourceGuard: void <init>()>();

        r2 = virtualinvoke $r6.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        $r7 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        $r8 = new org.apache.flink.util.ResourceGuardTest$1;

        specialinvoke $r8.<org.apache.flink.util.ResourceGuardTest$1: void <init>(org.apache.flink.util.ResourceGuardTest,org.apache.flink.util.ResourceGuard,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r6, $r7);

        virtualinvoke $r8.<java.lang.Thread: void start()>();

     label1:
        $z0 = virtualinvoke $r6.<org.apache.flink.util.ResourceGuard: boolean isClosed()>();

        if $z0 != 0 goto label2;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;

     label2:
        $z1 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label3:
        virtualinvoke $r6.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Resource guard is expected to be already closed.");

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        virtualinvoke r2.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        virtualinvoke $r8.<java.lang.Thread: void join(long)>(60000L);

        $z2 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void testInterruptHandledCorrectly() throws java.lang.Exception
    {
        org.apache.flink.util.ResourceGuardTest r0;
        org.apache.flink.util.ResourceGuard$Lease r2;
        org.apache.flink.util.ResourceGuard $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        org.apache.flink.util.ResourceGuardTest$2 $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        $r5 = new org.apache.flink.util.ResourceGuard;

        specialinvoke $r5.<org.apache.flink.util.ResourceGuard: void <init>()>();

        r2 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        $r7 = new org.apache.flink.util.ResourceGuardTest$2;

        specialinvoke $r7.<org.apache.flink.util.ResourceGuardTest$2: void <init>(org.apache.flink.util.ResourceGuardTest,org.apache.flink.util.ResourceGuard,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r5, $r6);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

     label1:
        $z0 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: boolean isClosed()>();

        if $z0 != 0 goto label2;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label1;

     label2:
        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        virtualinvoke $r7.<java.lang.Thread: void join(long)>(100L);

        $z1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        virtualinvoke r2.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        virtualinvoke $r7.<java.lang.Thread: void join(long)>(60000L);

        $z2 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testLeaseCloseIsIdempotent() throws java.lang.Exception
    {
        org.apache.flink.util.ResourceGuardTest r0;
        org.apache.flink.util.ResourceGuard$Lease r2, r3, r4;
        org.apache.flink.util.ResourceGuard $r5;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;

        r0 := @this: org.apache.flink.util.ResourceGuardTest;

        $r5 = new org.apache.flink.util.ResourceGuard;

        specialinvoke $r5.<org.apache.flink.util.ResourceGuard: void <init>()>();

        r2 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        r3 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        $i0 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        virtualinvoke r2.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i2 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        virtualinvoke r2.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i4 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        virtualinvoke r3.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i6 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        r4 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: org.apache.flink.util.ResourceGuard$Lease acquireResource()>();

        $i8 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l9);

        virtualinvoke r3.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i10 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l11);

        virtualinvoke r4.<org.apache.flink.util.ResourceGuard$Lease: void close()>();

        $i12 = virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: int getLeaseCount()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        virtualinvoke $r5.<org.apache.flink.util.ResourceGuard: void close()>();

        return;
    }
}
