public class org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest extends java.lang.Object
{
    public org.junit.rules.ExpectedException thrown;
    private final byte[] data;
    private final org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream;

    public void <init>()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1;
        byte[] $r2, $r4;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown> = $r1;

        $r2 = newarray (byte)[10];

        $r2[0] = 48;

        $r2[1] = 49;

        $r2[2] = 50;

        $r2[3] = 51;

        $r2[4] = 52;

        $r2[5] = 53;

        $r2[6] = 54;

        $r2[7] = 55;

        $r2[8] = 56;

        $r2[9] = 57;

        r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data> = $r2;

        $r3 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        $r4 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        specialinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>($r4);

        r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream> = $r3;

        return;
    }

    public void testGetWithNullArray()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r2;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r1.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/NullPointerException;");

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read(byte[],int,int)>(null, 0, 1);

        return;
    }

    public void testGetWithNegativeLength()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        int i0;
        byte[] $r1;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r2;
        long $l1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r1 = newarray (byte)[0];

        i0 = virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read(byte[],int,int)>($r1, 0, -1);

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testGetWithTargetArrayOverflow()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1;
        byte[] $r2;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r1.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IndexOutOfBoundsException;");

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r2 = newarray (byte)[0];

        virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read(byte[],int,int)>($r2, 0, 2);

        return;
    }

    public void testGetWithEOF()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        int i0;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r1, $r3;
        byte[] $r2;
        long $l2;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        staticinvoke <org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: int drainStream(org.apache.flink.core.memory.ByteArrayInputStreamWithPos)>($r1);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r2 = newarray (byte)[1];

        i0 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read(byte[],int,int)>($r2, 0, 1);

        $l2 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l2);

        return;
    }

    public void testGetMoreThanAvailable()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        int i0, $i2;
        byte[] $r1;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r2, $r3;
        long $l1, $l3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r1 = newarray (byte)[20];

        i0 = virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read(byte[],int,int)>($r1, 0, 20);

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i2 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

        return;
    }

    public void testSetPosition() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        byte[] $r1, $r5, $r9, $r12;
        int $i0, $i2, $i4, $i6, $i7, $i9, $i11, $i13, $i14, $i16, $i18, $i20, $i21, $i23;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r2, $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15;
        long $l1, $l3, $l5, $l8, $l10, $l12, $l15, $l17, $l19, $l22, $l24;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i2 = virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int available()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i4 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(48L, $l5);

        $r4 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        virtualinvoke $r4.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>(1);

        $r5 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        $i6 = lengthof $r5;

        $i7 = $i6 - 1;

        $l8 = (long) $i7;

        $r6 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i9 = virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int available()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, $l10);

        $r7 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i11 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(49L, $l12);

        $r8 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>(3);

        $r9 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        $i13 = lengthof $r9;

        $i14 = $i13 - 3;

        $l15 = (long) $i14;

        $r10 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i16 = virtualinvoke $r10.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int available()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, $l17);

        $r11 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i18 = virtualinvoke $r11.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(51L, $l19);

        $r13 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r12 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        $i20 = lengthof $r12;

        virtualinvoke $r13.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i20);

        $r14 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i21 = virtualinvoke $r14.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int available()>();

        $l22 = (long) $i21;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l22);

        $r15 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $i23 = virtualinvoke $r15.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l24);

        return;
    }

    public void testSetTooLargePosition() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1, $r2;
        byte[] $r3;
        int $i0, $i1;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r4;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r1.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r2.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>("Position out of bounds.");

        $r4 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: byte[] data>;

        $i0 = lengthof $r3;

        $i1 = $i0 + 1;

        virtualinvoke $r4.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i1);

        return;
    }

    public void testSetNegativePosition() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1, $r2;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r3;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r1 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r1.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r2.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>("Position out of bounds.");

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayInputStreamWithPos stream>;

        virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>(-1);

        return;
    }

    public void testSetBuffer()
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest r0;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r3;
        int $i2, $i4, $i6, $i9, i11;
        long $l3, $l5, $l8, $l10;
        byte[] $r4;
        byte $b7;

        r0 := @this: org.apache.flink.core.memory.ByteArrayInputStreamWithPosTest;

        $r3 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>()>();

        $i2 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l3);

        $r4 = newarray (byte)[4];

        $r4[0] = 66;

        $r4[1] = 67;

        $r4[2] = 68;

        $r4[3] = 69;

        virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setBuffer(byte[],int,int)>($r4, 1, 2);

        i11 = 0;

     label1:
        if i11 >= 2 goto label2;

        $i6 = i11 + 1;

        $b7 = $r4[$i6];

        $l8 = (long) $b7;

        $i9 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, $l10);

        i11 = i11 + 1;

        goto label1;

     label2:
        $i4 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l5);

        return;
    }

    private static int drainStream(org.apache.flink.core.memory.ByteArrayInputStreamWithPos)
    {
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos r0;
        int $i0, i1;

        r0 := @parameter0: org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: int read()>();

        if $i0 == -1 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return i1;
    }
}
