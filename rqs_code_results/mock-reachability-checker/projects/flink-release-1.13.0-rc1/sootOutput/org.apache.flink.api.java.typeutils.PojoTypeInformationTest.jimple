public class org.apache.flink.api.java.typeutils.PojoTypeInformationTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSimplePojoTypeExtraction()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeInformationTest$SimplePojo;");

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Extracted type is not a composite/pojo type but should be.", $z0);

        return;
    }

    public void testNestedPojoTypeExtraction()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeInformationTest$NestedPojoOuter;");

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Extracted type is not a Pojo type but should be.", $z0);

        return;
    }

    public void testRecursivePojoTypeExtraction()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeInformationTest$Recursive1Pojo;");

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Extracted type is not a Pojo type but should be.", $z0);

        return;
    }

    public void testRecursivePojoObjectTypeExtraction()
    {
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.PojoTypeInformationTest$Recursive1Pojo $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeInformationTest;

        $r2 = new org.apache.flink.api.java.typeutils.PojoTypeInformationTest$Recursive1Pojo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.PojoTypeInformationTest$Recursive1Pojo: void <init>()>();

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r2);

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Extracted type is not a Pojo type but should be.", $z0);

        return;
    }
}
