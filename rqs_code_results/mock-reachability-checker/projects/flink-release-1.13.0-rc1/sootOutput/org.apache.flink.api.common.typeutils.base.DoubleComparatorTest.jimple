public class org.apache.flink.api.common.typeutils.base.DoubleComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.DoubleComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.DoubleComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.DoubleComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.DoubleComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.DoubleComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.DoubleComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.DoubleSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.DoubleSerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Double[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleComparatorTest r0;
        java.util.Random $r2;
        byte $b0, $b1, $b2;
        java.lang.Double[] $r3;
        double $d0, d1;
        java.lang.Double $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleComparatorTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412338L);

        d1 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $b0 = d1 cmpg 0.0;

        if $b0 >= 0 goto label1;

        d1 = neg d1;

     label1:
        $b1 = d1 cmpl 1.7976931348623157E308;

        if $b1 != 0 goto label2;

        d1 = d1 - 3.0;

     label2:
        $b2 = d1 cmpg 2.0;

        if $b2 > 0 goto label3;

        d1 = d1 + 3.0;

     label3:
        $r3 = newarray (java.lang.Double)[6];

        $d0 = neg d1;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-1.0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.0);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r3[4] = $r8;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $r3[5] = $r9;

        return $r3;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleComparatorTest r0;
        java.lang.Double[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.DoubleComparatorTest: java.lang.Double[] getSortedTestData()>();

        return $r1;
    }
}
