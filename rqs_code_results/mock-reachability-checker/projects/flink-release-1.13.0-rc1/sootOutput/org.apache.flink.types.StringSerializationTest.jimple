public class org.apache.flink.types.StringSerializationTest extends java.lang.Object
{
    private final java.util.Random rnd;
    private static final int HIGH_BIT;

    public void <init>()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.util.Random $r1;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(2093486528937460234L);

        r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd> = $r1;

        return;
    }

    public void testNonNullValues()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.lang.Exception $r2;
        java.io.PrintStream $r3;
        java.lang.String $r4, $r7, $r9;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "a";

        $r1[1] = "";

        $r1[2] = "bcd";

        $r1[3] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r1[4] = "";

        $r1[5] = "non-empty";

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r7 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testUnicodeValues()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8, $r10, $r12;
        java.lang.String $r3, $r5, $r7, $r9, $r11, $r13, $r16, $r19, $r21;
        java.lang.Exception $r14;
        java.io.PrintStream $r15;
        java.lang.StringBuilder $r17, $r18, $r20;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[6];

        $r2 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r2, 10000, 2097152, 1, 127);

        $r1[0] = $r3;

        $r4 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r4, 10000, 2097152, 128, 16383);

        $r1[1] = $r5;

        $r6 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r6, 10000, 2097152, 16384, 65535);

        $r1[2] = $r7;

        $r8 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r8, 10000, 2097152, 1, 16383);

        $r1[3] = $r9;

        $r10 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r11 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r10, 10000, 2097152, 1, 65535);

        $r1[4] = $r11;

        $r12 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r13 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r12, 10000, 2097152, 128, 65535);

        $r1[5] = $r13;

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r19 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testUnicodeSurrogatePairs()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] r1, $r4;
        java.util.Random $r5;
        java.lang.StringBuilder $r6, $r13, $r14, $r16;
        java.lang.String $r7, $r8, $r12, $r15, $r17;
        int $i0, $i1, i2, i3;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r4 = newarray (java.lang.String)[15];

        $r4[0] = "\ud800\udf30";

        $r4[1] = "\ud800\udf31";

        $r4[2] = "\ud800\udf32";

        $r4[3] = "\ud834\udf08";

        $r4[4] = "\ud834\udf56";

        $r4[5] = "\ud834\udd20";

        $r4[6] = "\ud802\udc01";

        $r4[7] = "\ud800\udc09";

        $r4[8] = "\ud87e\udc9e";

        $r4[9] = "\ud864\uddf8";

        $r4[10] = "\ud840\udc0e";

        $r4[11] = "\ud801\udc80";

        $r4[12] = "\ud801\udc56";

        $r4[13] = "\ud801\udc05";

        $r4[14] = "\ud800\udf01";

        r1 = newarray (java.lang.String)[100];

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        i2 = 0;

     label2:
        if i2 >= 100 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label3:
        if i3 >= 100 goto label4;

        $i0 = lengthof $r4;

        $i1 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i0);

        $r8 = $r4[$i1];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label2;

     label5:
        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>(r1);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testStringBinaryCompatibility()
    {
        org.apache.flink.types.StringSerializationTest r0;
        int i0, i1;
        java.lang.String r2, r5, r6, r7, $r10, $r12, $r14, $r16, $r18, $r20, $r28, $r31, $r33;
        byte[] r3, r4;
        java.lang.String[] $r8;
        java.util.Random $r9, $r11, $r13, $r15, $r17, $r19;
        java.util.function.BiConsumer $r21, $r22;
        java.util.function.Function $r23, $r24, $r25;
        java.lang.Exception $r26;
        java.io.PrintStream $r27;
        java.lang.StringBuilder $r29, $r30, $r32;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r8 = newarray (java.lang.String)[6];

        $r9 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r10 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r9, 10000, 2097152, 1, 127);

        $r8[0] = $r10;

        $r11 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r12 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r11, 10000, 2097152, 128, 16383);

        $r8[1] = $r12;

        $r13 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r14 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r13, 10000, 2097152, 16384, 65535);

        $r8[2] = $r14;

        $r15 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r16 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r15, 10000, 2097152, 1, 16383);

        $r8[3] = $r16;

        $r17 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r18 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r17, 10000, 2097152, 1, 65535);

        $r8[4] = $r18;

        $r19 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r20 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r19, 10000, 2097152, 128, 65535);

        $r8[5] = $r20;

        i0 = lengthof $r8;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r2 = $r8[i1];

        $r21 = staticinvoke <org.apache.flink.types.StringSerializationTest$oldWriteString__467: java.util.function.BiConsumer bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.types.StringSerializationTest: byte[] serializeBytes(java.lang.String,java.util.function.BiConsumer)>(r2, $r21);

        $r22 = staticinvoke <org.apache.flink.types.StringSerializationTest$newWriteString__468: java.util.function.BiConsumer bootstrap$()>();

        r4 = staticinvoke <org.apache.flink.types.StringSerializationTest: byte[] serializeBytes(java.lang.String,java.util.function.BiConsumer)>(r2, $r22);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r3, r4);

        $r23 = staticinvoke <org.apache.flink.types.StringSerializationTest$oldReadString__469: java.util.function.Function bootstrap$()>();

        r5 = staticinvoke <org.apache.flink.types.StringSerializationTest: java.lang.String deserializeBytes(byte[],java.util.function.Function)>(r4, $r23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, r2);

        $r24 = staticinvoke <org.apache.flink.types.StringSerializationTest$newReadString__470: java.util.function.Function bootstrap$()>();

        r6 = staticinvoke <org.apache.flink.types.StringSerializationTest: java.lang.String deserializeBytes(byte[],java.util.function.Function)>(r3, $r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r6, r2);

        $r25 = staticinvoke <org.apache.flink.types.StringSerializationTest$newReadString__471: java.util.function.Function bootstrap$()>();

        r7 = staticinvoke <org.apache.flink.types.StringSerializationTest: java.lang.String deserializeBytes(byte[],java.util.function.Function)>(r4, $r25);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r7, r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r26 := @caughtexception;

        $r27 = <java.lang.System: java.io.PrintStream err>;

        $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.Exception: void printStackTrace()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r31 = virtualinvoke $r26.<java.lang.Exception: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r33);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testNullValues()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.lang.Exception $r2;
        java.io.PrintStream $r3;
        java.lang.String $r4, $r7, $r9;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[11];

        $r1[0] = "a";

        $r1[1] = null;

        $r1[2] = "";

        $r1[3] = null;

        $r1[4] = "bcd";

        $r1[5] = null;

        $r1[6] = "jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5";

        $r1[7] = null;

        $r1[8] = "";

        $r1[9] = null;

        $r1[10] = "non-empty";

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.Exception: void printStackTrace()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r7 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testLongValues()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[4];

        $r2 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r4 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[1] = $r5;

        $r6 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[2] = $r7;

        $r8 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[3] = $r9;

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testMixedValues()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[10];

        $r2 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r1[1] = "";

        $r4 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[2] = $r5;

        $r1[3] = null;

        $r6 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[4] = $r7;

        $r1[5] = null;

        $r1[6] = "";

        $r8 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[7] = $r9;

        $r1[8] = "";

        $r1[9] = null;

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testSerialization(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testBinaryCopyOfLongStrings()
    {
        org.apache.flink.types.StringSerializationTest r0;
        java.lang.String[] $r1;
        java.util.Random $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, $r12, $r15, $r17;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.types.StringSerializationTest;

     label1:
        $r1 = newarray (java.lang.String)[10];

        $r2 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r2, 10000, 2097152);

        $r1[0] = $r3;

        $r1[1] = "";

        $r4 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r4, 10000, 2097152);

        $r1[2] = $r5;

        $r1[3] = null;

        $r6 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r6, 10000, 2097152);

        $r1[4] = $r7;

        $r1[5] = null;

        $r1[6] = "";

        $r8 = r0.<org.apache.flink.types.StringSerializationTest: java.util.Random rnd>;

        $r9 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int)>($r8, 10000, 2097152);

        $r1[7] = $r9;

        $r1[8] = "";

        $r1[9] = null;

        staticinvoke <org.apache.flink.types.StringSerializationTest: void testCopy(java.lang.String[])>($r1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static final byte[] serializeBytes(java.lang.String, java.util.function.BiConsumer) throws java.io.IOException
    {
        java.lang.String r0;
        java.util.function.BiConsumer r1;
        java.io.ByteArrayOutputStream $r4;
        java.io.DataOutputStream $r5;
        byte[] $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.function.BiConsumer;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        interfaceinvoke r1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r0, $r5);

        virtualinvoke $r5.<java.io.DataOutputStream: void close()>();

        $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;
    }

    public static final java.lang.String deserializeBytes(byte[], java.util.function.Function) throws java.io.IOException
    {
        byte[] r0;
        java.util.function.Function r1;
        java.lang.String r4;
        java.io.ByteArrayInputStream $r5;
        java.io.DataInputStream $r6;
        java.lang.Object $r7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.util.function.Function;

        $r5 = new java.io.ByteArrayInputStream;

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r6 = new java.io.DataInputStream;

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r5);

        $r7 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r6);

        r4 = (java.lang.String) $r7;

        virtualinvoke $r6.<java.io.DataInputStream: void close()>();

        return r4;
    }

    public static final void testSerialization(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        java.io.ByteArrayOutputStream $r3;
        java.io.DataOutputStream $r4;
        java.io.ByteArrayInputStream $r5;
        byte[] $r6;
        java.io.DataInputStream $r7;
        int $i0, $i1, i4, i5, i6;
        long $l2, $l3;
        java.lang.String $r8, r10, r13;

        r0 := @parameter0: java.lang.String[];

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r4 = new java.io.DataOutputStream;

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3);

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r10 = r0[i5];

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>(r10, $r4);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke $r4.<java.io.DataOutputStream: void close()>();

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

        $r5 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        $r7 = new java.io.DataInputStream;

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r5);

        i6 = 0;

     label3:
        $i0 = virtualinvoke $r7.<java.io.DataInputStream: int available()>();

        if $i0 <= 0 goto label4;

        r13 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>($r7);

        $r8 = r0[i6];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DeserializedString differs from original string.", $r8, r13);

        i6 = i6 + 1;

        goto label3;

     label4:
        $i1 = lengthof r0;

        $l3 = (long) $i1;

        $l2 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of deserialized values", $l3, $l2);

        return;
    }

    public static final void testCopy(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        java.lang.String r4, $r15, r17;
        java.io.ByteArrayOutputStream $r5, $r10;
        java.io.DataOutputStream $r6, $r11;
        java.io.ByteArrayInputStream $r7, $r12;
        byte[] $r8, $r13;
        java.io.DataInputStream $r9, $r14;
        int $i0, $i1, $i2, i5, i6, i7, i8;
        long $l3, $l4;

        r0 := @parameter0: java.lang.String[];

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r6 = new java.io.DataOutputStream;

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        i5 = lengthof r0;

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        r17 = r0[i6];

        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>(r17, $r6);

        i6 = i6 + 1;

        goto label1;

     label2:
        virtualinvoke $r6.<java.io.DataOutputStream: void close()>();

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void close()>();

        $r7 = new java.io.ByteArrayInputStream;

        $r8 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        $r9 = new java.io.DataInputStream;

        specialinvoke $r9.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r11 = new java.io.DataOutputStream;

        specialinvoke $r11.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r10);

        i7 = 0;

     label3:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label4;

        staticinvoke <org.apache.flink.types.StringValue: void copyString(java.io.DataInput,java.io.DataOutput)>($r9, $r11);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r12 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        $r14 = new java.io.DataInputStream;

        specialinvoke $r14.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r12);

        i8 = 0;

     label5:
        $i1 = virtualinvoke $r14.<java.io.DataInputStream: int available()>();

        if $i1 <= 0 goto label6;

        r4 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>($r14);

        $r15 = r0[i8];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("DeserializedString differs from original string.", $r15, r4);

        i8 = i8 + 1;

        goto label5;

     label6:
        $i2 = lengthof r0;

        $l4 = (long) $i2;

        $l3 = (long) i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of deserialized values", $l4, $l3);

        return;
    }

    public static java.lang.String oldReadString(java.io.DataInput)
    {
        java.io.DataInput r0;
        java.lang.String $r1;
        int $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, i11, i12, i13, i15, i16, i17, i18, i19, i20;
        char $c3, $c6;
        java.lang.Exception $r2;
        java.lang.RuntimeException $r3;
        char[] r4;

        r0 := @parameter0: java.io.DataInput;

     label01:
        i11 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if i11 != 0 goto label03;

     label02:
        return null;

     label03:
        if i11 < 128 goto label06;

        i12 = 7;

        i13 = i11 & 127;

     label04:
        $i7 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i7 < 128 goto label05;

        $i9 = $i7 & 127;

        $i10 = $i9 << i12;

        i13 = i13 | $i10;

        i12 = i12 + 7;

        goto label04;

     label05:
        $i8 = $i7 << i12;

        i11 = i13 | $i8;

     label06:
        i15 = i11 + -1;

        r4 = newarray (char)[i15];

        i16 = 0;

     label07:
        if i16 >= i15 goto label12;

        i17 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if i17 >= 128 goto label08;

        $c6 = (char) i17;

        r4[i16] = $c6;

        goto label11;

     label08:
        i18 = 7;

        i19 = i17 & 127;

     label09:
        $i1 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i1 < 128 goto label10;

        $i4 = $i1 & 127;

        $i5 = $i4 << i18;

        i19 = i19 | $i5;

        i18 = i18 + 7;

        goto label09;

     label10:
        $i2 = $i1 << i18;

        i20 = i19 | $i2;

        $c3 = (char) i20;

        r4[i16] = $c3;

     label11:
        i16 = i16 + 1;

        goto label07;

     label12:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r4, 0, i15);

     label13:
        return $r1;

     label14:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Exception from label03 to label13 with label14;
    }

    public static final void oldWriteString(java.lang.CharSequence, java.io.DataOutput)
    {
        java.lang.CharSequence r0;
        java.io.DataOutput r1;
        int $i0, $i1, $i3, i4, i5;
        char $c2, c6;
        java.lang.IllegalArgumentException $r2;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.DataOutput;

     label01:
        if r0 == null goto label08;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i4 = $i0 + 1;

        if i4 >= 0 goto label02;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CharSequence is too long.");

        throw $r2;

     label02:
        if i4 < 128 goto label03;

        $i3 = i4 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i3);

        i4 = i4 >>> 7;

        goto label02;

     label03:
        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(i4);

        i5 = 0;

     label04:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 >= $i1 goto label07;

        c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

     label05:
        if c6 < 128 goto label06;

        $c2 = c6 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c2);

        c6 = c6 >>> 7;

        goto label05;

     label06:
        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(c6);

        i5 = i5 + 1;

        goto label04;

     label07:
        goto label09;

     label08:
        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(0);

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public static java.lang.String newReadString(java.io.DataInput)
    {
        java.io.DataInput r0;
        java.lang.String $r2;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.io.DataInput;

     label1:
        $r2 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void newWriteString(java.lang.CharSequence, java.io.DataOutput)
    {
        java.lang.CharSequence r0;
        java.io.DataOutput r1;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.DataOutput;

     label1:
        staticinvoke <org.apache.flink.types.StringValue: void writeString(java.lang.CharSequence,java.io.DataOutput)>(r0, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.StringSerializationTest: int HIGH_BIT> = 128;

        return;
    }
}
