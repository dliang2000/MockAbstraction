public class org.apache.flink.types.parser.VarLengthStringParserTest extends java.lang.Object
{
    public org.apache.flink.types.parser.StringValueParser parser;

    public void <init>()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        org.apache.flink.types.parser.StringValueParser $r1;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r1.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r1;

        return;
    }

    public void testGetValue()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        org.apache.flink.types.StringValue r1;
        org.apache.flink.types.parser.StringValueParser $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        $r2 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        r1 = virtualinvoke $r2.<org.apache.flink.types.parser.StringValueParser: org.apache.flink.types.StringValue createValue()>();

        $z0 = r1 instanceof org.apache.flink.types.StringValue;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testParseValidUnquotedStrings()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        org.apache.flink.types.parser.StringValueParser $r2, $r7, $r10, $r13, $r18, $r23, $r26;
        java.nio.charset.Charset $r3, $r15, $r20;
        java.lang.String $r4, $r8, $r11, $r14, $r16, $r19, $r21, $r24, $r27;
        org.apache.flink.types.StringValue $r5;
        byte[] $r6, $r9, $r12, $r17, $r22, $r25, r28, r29, r30;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9, i11, i13, i14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        $r2 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r2.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r2;

        $r4 = "abcdefgh|i|jklmno|";

        $r3 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r28 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $r5 = new org.apache.flink.types.StringValue;

        specialinvoke $r5.<org.apache.flink.types.StringValue: void <init>()>();

        $r7 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i0 = lengthof r28;

        $r6 = newarray (byte)[1];

        $r6[0] = 124;

        i7 = virtualinvoke $r7.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r28, 0, $i0, $r6, $r5);

        if i7 != 9 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r8 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("abcdefgh");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r10 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i1 = lengthof r28;

        $r9 = newarray (byte)[1];

        $r9[0] = 124;

        i8 = virtualinvoke $r10.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r28, i7, $i1, $r9, $r5);

        if i8 != 11 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r11 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("i");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i2 = lengthof r28;

        $r12 = newarray (byte)[1];

        $r12[0] = 124;

        i9 = virtualinvoke $r13.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r28, i8, $i2, $r12, $r5);

        if i9 != 18 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r14 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("jklmno");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r16 = "abcde";

        $r15 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r29 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        $r18 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i3 = lengthof r29;

        $r17 = newarray (byte)[1];

        $r17[0] = 124;

        i11 = virtualinvoke $r18.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r29, 0, $i3, $r17, $r5);

        if i11 != 5 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r19 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("abcde");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r21 = "abcde|fg";

        $r20 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r30 = virtualinvoke $r21.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r20);

        $r23 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i4 = lengthof r30;

        $r22 = newarray (byte)[1];

        $r22[0] = 124;

        i13 = virtualinvoke $r23.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r30, 0, $i4, $r22, $r5);

        if i13 != 6 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r24 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z4 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>("abcde");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r26 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i5 = lengthof r30;

        $r25 = newarray (byte)[1];

        $r25[0] = 124;

        i14 = virtualinvoke $r26.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r30, i13, $i5, $r25, $r5);

        if i14 != 8 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r27 = virtualinvoke $r5.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z5 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("fg");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testParseValidQuotedStrings()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        org.apache.flink.types.parser.StringValueParser $r2, $r3, $r8, $r11, $r14, $r19, $r24, $r27, $r32, $r35, $r40, $r43;
        java.nio.charset.Charset $r4, $r16, $r21, $r29, $r37;
        java.lang.String $r5, $r9, $r12, $r15, $r17, $r20, $r22, $r25, $r28, $r30, $r33, $r36, $r38, $r41, $r44;
        org.apache.flink.types.StringValue $r6;
        byte[] $r7, $r10, $r13, $r18, $r23, $r26, $r31, $r34, $r39, $r42, r45, r46, r47, r48, r49;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12, i13, i15, i17, i18, i20, i21, i23, i24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        $r2 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r2.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r2;

        $r3 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        virtualinvoke $r3.<org.apache.flink.types.parser.StringValueParser: void enableQuotedStringParsing(byte)>(34);

        $r5 = "\"abcdefgh\"|\"i\"|\"jklmno\"|";

        $r4 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r45 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>()>();

        $r8 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i0 = lengthof r45;

        $r7 = newarray (byte)[1];

        $r7[0] = 124;

        i11 = virtualinvoke $r8.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r45, 0, $i0, $r7, $r6);

        if i11 != 11 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r9 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("abcdefgh");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r11 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i1 = lengthof r45;

        $r10 = newarray (byte)[1];

        $r10[0] = 124;

        i12 = virtualinvoke $r11.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r45, i11, $i1, $r10, $r6);

        if i12 != 15 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r12 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("i");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r14 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i2 = lengthof r45;

        $r13 = newarray (byte)[1];

        $r13[0] = 124;

        i13 = virtualinvoke $r14.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r45, i12, $i2, $r13, $r6);

        if i13 != 24 goto label05;

        $z12 = 1;

        goto label06;

     label05:
        $z12 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r15 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("jklmno");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r17 = "\"abcde\"";

        $r16 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r46 = virtualinvoke $r17.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r16);

        $r19 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i3 = lengthof r46;

        $r18 = newarray (byte)[1];

        $r18[0] = 124;

        i15 = virtualinvoke $r19.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r46, 0, $i3, $r18, $r6);

        if i15 != 7 goto label07;

        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r20 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("abcde");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r22 = "\"abcde\"|\"fg\"";

        $r21 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r47 = virtualinvoke $r22.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r21);

        $r24 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i4 = lengthof r47;

        $r23 = newarray (byte)[1];

        $r23[0] = 124;

        i17 = virtualinvoke $r24.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r47, 0, $i4, $r23, $r6);

        if i17 != 8 goto label09;

        $z14 = 1;

        goto label10;

     label09:
        $z14 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r25 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z4 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("abcde");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r27 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i5 = lengthof r47;

        $r26 = newarray (byte)[1];

        $r26[0] = 124;

        i18 = virtualinvoke $r27.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r47, i17, $i5, $r26, $r6);

        if i18 != 12 goto label11;

        $z15 = 1;

        goto label12;

     label11:
        $z15 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r28 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z5 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>("fg");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r30 = "\"abcde|fg\"|\"hij|kl|mn|op\"|";

        $r29 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r48 = virtualinvoke $r30.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r29);

        $r32 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i6 = lengthof r48;

        $r31 = newarray (byte)[1];

        $r31[0] = 124;

        i20 = virtualinvoke $r32.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r48, 0, $i6, $r31, $r6);

        if i20 != 11 goto label13;

        $z16 = 1;

        goto label14;

     label13:
        $z16 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $r33 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z6 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("abcde|fg");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r35 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i7 = lengthof r48;

        $r34 = newarray (byte)[1];

        $r34[0] = 124;

        i21 = virtualinvoke $r35.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r48, i20, $i7, $r34, $r6);

        if i21 != 26 goto label15;

        $z17 = 1;

        goto label16;

     label15:
        $z17 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        $r36 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z7 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>("hij|kl|mn|op");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r38 = "\"abcde|fg\"|\"hij|kl|mn|op\"";

        $r37 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r49 = virtualinvoke $r38.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r37);

        $r40 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i8 = lengthof r49;

        $r39 = newarray (byte)[1];

        $r39[0] = 124;

        i23 = virtualinvoke $r40.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r49, 0, $i8, $r39, $r6);

        if i23 != 11 goto label17;

        $z18 = 1;

        goto label18;

     label17:
        $z18 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $r41 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z8 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>("abcde|fg");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r43 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i9 = lengthof r49;

        $r42 = newarray (byte)[1];

        $r42[0] = 124;

        i24 = virtualinvoke $r43.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r49, i23, $i9, $r42, $r6);

        if i24 != 25 goto label19;

        $z19 = 1;

        goto label20;

     label19:
        $z19 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $r44 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z9 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>("hij|kl|mn|op");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        return;
    }

    public void testParseValidMixedStrings()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        byte[] r1, $r8, $r11, $r14, $r17, $r20;
        org.apache.flink.types.parser.StringValueParser $r3, $r4, $r9, $r12, $r15, $r18, $r21;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r10, $r13, $r16, $r19, $r22;
        org.apache.flink.types.StringValue $r7;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9, i10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        $r3 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r3.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r3;

        $r4 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        virtualinvoke $r4.<org.apache.flink.types.parser.StringValueParser: void enableQuotedStringParsing(byte)>(64);

        $r6 = "@abcde|gh@|@i@|jklmnopq|@rs@|tuv";

        $r5 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r1 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>()>();

        $r9 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i0 = lengthof r1;

        $r8 = newarray (byte)[1];

        $r8[0] = 124;

        i6 = virtualinvoke $r9.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, 0, $i0, $r8, $r7);

        if i6 != 11 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r10 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("abcde|gh");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r12 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i1 = lengthof r1;

        $r11 = newarray (byte)[1];

        $r11[0] = 124;

        i7 = virtualinvoke $r12.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, i6, $i1, $r11, $r7);

        if i7 != 15 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r13 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("i");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r15 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i2 = lengthof r1;

        $r14 = newarray (byte)[1];

        $r14[0] = 124;

        i8 = virtualinvoke $r15.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, i7, $i2, $r14, $r7);

        if i8 != 24 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r16 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("jklmnopq");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r18 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i3 = lengthof r1;

        $r17 = newarray (byte)[1];

        $r17[0] = 124;

        i9 = virtualinvoke $r18.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, i8, $i3, $r17, $r7);

        if i9 != 29 goto label07;

        $z8 = 1;

        goto label08;

     label07:
        $z8 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r19 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("rs");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r21 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i4 = lengthof r1;

        $r20 = newarray (byte)[1];

        $r20[0] = 124;

        i10 = virtualinvoke $r21.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, i9, $i4, $r20, $r7);

        if i10 != 32 goto label09;

        $z9 = 1;

        goto label10;

     label09:
        $z9 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r22 = virtualinvoke $r7.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("tuv");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;
    }

    public void testParseInvalidQuotedStrings()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        byte[] r1, $r8, $r10;
        org.apache.flink.types.parser.StringValueParser $r3, $r4, $r9, $r11;
        java.nio.charset.Charset $r5;
        java.lang.String $r6;
        org.apache.flink.types.StringValue $r7;
        int $i0, $i1, i3, i5;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        $r3 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r3.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r3;

        $r4 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        virtualinvoke $r4.<org.apache.flink.types.parser.StringValueParser: void enableQuotedStringParsing(byte)>(34);

        $r6 = "\"abcdefgh\"-|\"jklmno  ";

        $r5 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r1 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>()>();

        $r9 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i0 = lengthof r1;

        $r8 = newarray (byte)[1];

        $r8[0] = 124;

        i3 = virtualinvoke $r9.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, 0, $i0, $r8, $r7);

        if i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r11 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i1 = lengthof r1;

        $r10 = newarray (byte)[1];

        $r10[0] = 124;

        i5 = virtualinvoke $r11.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r1, 12, $i1, $r10, $r7);

        if i5 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testParseValidMixedStringsWithCharset()
    {
        org.apache.flink.types.parser.VarLengthStringParserTest r0;
        java.nio.charset.Charset r1, $r6;
        byte[] r2, $r10;
        org.apache.flink.types.parser.StringValueParser $r4, $r5, $r9, $r11;
        java.lang.String $r7, $r12;
        org.apache.flink.types.StringValue $r8;
        int $i0, i3;
        long $l1;

        r0 := @this: org.apache.flink.types.parser.VarLengthStringParserTest;

        r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        $r4 = new org.apache.flink.types.parser.StringValueParser;

        specialinvoke $r4.<org.apache.flink.types.parser.StringValueParser: void <init>()>();

        r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser> = $r4;

        $r5 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        virtualinvoke $r5.<org.apache.flink.types.parser.StringValueParser: void enableQuotedStringParsing(byte)>(64);

        $r7 = "@abcde|gh@|@i@|jklmnopq|@rs@|tuv";

        $r6 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r2 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        $r8 = new org.apache.flink.types.StringValue;

        specialinvoke $r8.<org.apache.flink.types.StringValue: void <init>()>();

        $r9 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        virtualinvoke $r9.<org.apache.flink.types.parser.StringValueParser: void setCharset(java.nio.charset.Charset)>(r1);

        $r11 = r0.<org.apache.flink.types.parser.VarLengthStringParserTest: org.apache.flink.types.parser.StringValueParser parser>;

        $i0 = lengthof r2;

        $r10 = newarray (byte)[1];

        $r10[0] = 124;

        i3 = virtualinvoke $r11.<org.apache.flink.types.parser.StringValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.StringValue)>(r2, 0, $i0, $r10, $r8);

        $l1 = (long) i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l1);

        $r12 = virtualinvoke $r8.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abcde|gh", $r12);

        return;
    }
}
