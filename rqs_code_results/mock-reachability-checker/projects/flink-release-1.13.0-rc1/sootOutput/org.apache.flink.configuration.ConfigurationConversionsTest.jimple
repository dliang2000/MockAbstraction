public class org.apache.flink.configuration.ConfigurationConversionsTest extends java.lang.Object
{
    private static final byte[] EMPTY_BYTES;
    private static final long TOO_LONG;
    private static final double TOO_LONG_DOUBLE;
    private org.apache.flink.configuration.Configuration pc;
    public org.junit.rules.ExpectedException thrown;
    public org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec testSpec;

    public void <init>()
    {
        org.apache.flink.configuration.ConfigurationConversionsTest r0;
        org.junit.rules.ExpectedException $r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.junit.rules.ExpectedException thrown> = $r1;

        return;
    }

    public void init()
    {
        org.apache.flink.configuration.ConfigurationConversionsTest r0;
        org.apache.flink.configuration.Configuration $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest;

        $r1 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r1.<org.apache.flink.configuration.Configuration: void <init>()>();

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc> = $r1;

        $r2 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("int", 5);

        $r3 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r3.<org.apache.flink.configuration.Configuration: void setLong(java.lang.String,long)>("long", 15L);

        $r4 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setLong(java.lang.String,long)>("too_long", 2147483657L);

        $r5 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setFloat(java.lang.String,float)>("float", 2.1456776F);

        $r6 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setDouble(java.lang.String,double)>("double", 3.141592653589793);

        $r7 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r7.<org.apache.flink.configuration.Configuration: void setDouble(java.lang.String,double)>("negative_double", -1.0);

        $r8 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setDouble(java.lang.String,double)>("zero", 0.0);

        $r9 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r9.<org.apache.flink.configuration.Configuration: void setDouble(java.lang.String,double)>("too_long_double", 1.7976931348623157E308);

        $r10 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r10.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("string", "42");

        $r11 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r11.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("non_convertible_string", "bcdefg&&");

        $r12 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r12.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("boolean", 1);

        return;
    }

    public static java.util.Collection getSpecs()
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec[] $r0;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor $r1, $r5, $r9, $r13, $r17, $r20, $r23, $r26, $r29, $r33, $r37, $r41, $r45, $r48, $r51, $r54, $r57, $r60, $r64, $r68, $r72, $r75, $r79, $r82, $r85, $r88, $r91, $r95, $r99, $r102, $r106, $r109, $r112, $r115, $r118, $r122, $r126, $r129, $r133, $r136, $r139, $r142, $r145, $r149, $r153, $r156, $r160, $r163, $r166, $r169, $r172, $r176, $r180, $r183, $r187, $r190, $r193, $r196, $r199, $r202, $r206, $r209, $r213, $r216, $r219, $r223, $r227, $r231, $r235, $r238, $r241, $r244, $r247, $r250, $r253, $r256, $r259, $r262, $r265, $r268, $r271, $r274, $r277, $r280, $r283, $r287, $r290, $r293;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r19, $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r47, $r49, $r50, $r52, $r53, $r55, $r56, $r58, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r74, $r76, $r78, $r80, $r81, $r83, $r84, $r86, $r87, $r89, $r90, $r92, $r94, $r96, $r98, $r100, $r101, $r103, $r105, $r107, $r108, $r110, $r111, $r113, $r114, $r116, $r117, $r119, $r121, $r123, $r125, $r127, $r128, $r130, $r132, $r134, $r135, $r137, $r138, $r140, $r141, $r143, $r144, $r146, $r148, $r150, $r152, $r154, $r155, $r157, $r159, $r161, $r162, $r164, $r165, $r167, $r168, $r170, $r171, $r173, $r175, $r177, $r179, $r181, $r182, $r184, $r186, $r188, $r189, $r191, $r192, $r194, $r195, $r197, $r198, $r200, $r201, $r203, $r205, $r207, $r208, $r210, $r212, $r214, $r215, $r217, $r218, $r220, $r222, $r224, $r226, $r228, $r230, $r232, $r234, $r236, $r237, $r239, $r240, $r242, $r243, $r245, $r246, $r248, $r249, $r251, $r252, $r254, $r255, $r257, $r258, $r260, $r261, $r263, $r264, $r266, $r267, $r269, $r270, $r272, $r273, $r275, $r276, $r278, $r279, $r281, $r282, $r284, $r286, $r288, $r289, $r291, $r292, $r294, $r295;
        java.lang.Integer $r3, $r31, $r221;
        java.lang.Long $r7, $r35, $r62, $r225;
        java.lang.Float $r11, $r39, $r66, $r93, $r229;
        java.lang.Double $r15, $r43, $r70, $r124, $r151, $r178, $r204, $r233;
        java.lang.String $r77, $r211;
        org.hamcrest.Matcher $r97, $r104, $r131, $r158, $r185;
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo $r120, $r147, $r174;
        java.lang.Boolean $r285;
        java.util.List $r296;

        $r0 = newarray (org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec)[88];

        $r1 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_0__361: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r4 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r3);

        $r0[0] = $r4;

        $r5 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_1__366: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r5);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r7);

        $r0[1] = $r8;

        $r9 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_2__368: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r10 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r9);

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(5.0F);

        $r12 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r11);

        $r0[2] = $r12;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_3__369: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r13);

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(5.0);

        $r16 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r15);

        $r0[3] = $r16;

        $r17 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_4__370: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r18 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 5. Expected either true or false(case insensitive)");

        $r0[4] = $r19;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_5__371: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r21 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r20);

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>("5");

        $r0[5] = $r22;

        $r23 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_6__372: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r24 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r23);

        $r25 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 5 as a byte[] value");

        $r0[6] = $r25;

        $r26 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_7__373: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r27 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r26);

        $r28 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Integer as a class name");

        $r0[7] = $r28;

        $r29 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_8__374: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r30 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r29);

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        $r32 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r31);

        $r0[8] = $r32;

        $r33 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_9__375: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r34 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r33);

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(15L);

        $r36 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r35);

        $r0[9] = $r36;

        $r37 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_10__376: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r38 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r37);

        $r39 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(15.0F);

        $r40 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r39);

        $r0[10] = $r40;

        $r41 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_11__377: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r42 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r41);

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(15.0);

        $r44 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r43);

        $r0[11] = $r44;

        $r45 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_12__378: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r46 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r45);

        $r47 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 15. Expected either true or false(case insensitive)");

        $r0[12] = $r47;

        $r48 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_13__379: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r49 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r48);

        $r50 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>("15");

        $r0[13] = $r50;

        $r51 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_14__380: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r52 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r51);

        $r53 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 15 as a byte[] value");

        $r0[14] = $r53;

        $r54 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_15__381: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r55 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r54);

        $r56 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Long as a class name");

        $r0[15] = $r56;

        $r57 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_16__382: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r58 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r57);

        $r59 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration value 2147483657 overflows/underflows the integer type");

        $r0[16] = $r59;

        $r60 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_17__383: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r61 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r60);

        $r62 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2147483657L);

        $r63 = virtualinvoke $r61.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r62);

        $r0[17] = $r63;

        $r64 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_18__384: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r65 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r64);

        $r66 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(2.14748365E9F);

        $r67 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r66);

        $r0[18] = $r67;

        $r68 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_19__385: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r69 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r68);

        $r70 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(2.147483657E9);

        $r71 = virtualinvoke $r69.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r70);

        $r0[19] = $r71;

        $r72 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_20__386: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r73 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r72);

        $r74 = virtualinvoke $r73.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 2147483657. Expected either true or false(case insensitive)");

        $r0[20] = $r74;

        $r75 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_21__387: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r76 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r75);

        $r77 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(2147483657L);

        $r78 = virtualinvoke $r76.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r77);

        $r0[21] = $r78;

        $r79 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_22__388: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r80 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r79);

        $r81 = virtualinvoke $r80.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 2147483657 as a byte[] value");

        $r0[22] = $r81;

        $r82 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_23__389: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r83 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r82);

        $r84 = virtualinvoke $r83.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Long as a class name");

        $r0[23] = $r84;

        $r85 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_24__390: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r86 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r85);

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"2.1456776\"", class "Ljava/lang/NumberFormatException;");

        $r0[24] = $r87;

        $r88 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_25__391: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r89 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r88);

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"2.1456776\"", class "Ljava/lang/NumberFormatException;");

        $r0[25] = $r90;

        $r91 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_26__392: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r92 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r91);

        $r93 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(2.1456776F);

        $r94 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r93);

        $r0[26] = $r94;

        $r95 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_27__393: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r96 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r95);

        $r97 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher closeTo(double,double)>(2.1456775, 1.0E-7);

        $r98 = virtualinvoke $r96.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r97);

        $r0[27] = $r98;

        $r99 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_28__394: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r100 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r99);

        $r101 = virtualinvoke $r100.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 2.1456776. Expected either true or false(case insensitive)");

        $r0[28] = $r101;

        $r102 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_29__395: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r103 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r102);

        $r104 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher startsWith(java.lang.String)>("2.145677");

        $r105 = virtualinvoke $r103.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r104);

        $r0[29] = $r105;

        $r106 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_30__396: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r107 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r106);

        $r108 = virtualinvoke $r107.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 2.1456776 as a byte[] value");

        $r0[30] = $r108;

        $r109 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_31__397: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r110 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r109);

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("onfiguration cannot evaluate object of class class java.lang.Float as a class name");

        $r0[31] = $r111;

        $r112 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_32__398: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r113 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r112);

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"3.141592653589793\"", class "Ljava/lang/NumberFormatException;");

        $r0[32] = $r114;

        $r115 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_33__399: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r116 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r115);

        $r117 = virtualinvoke $r116.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"3.141592653589793\"", class "Ljava/lang/NumberFormatException;");

        $r0[33] = $r117;

        $r118 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_34__400: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r119 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r118);

        $r120 = new org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        specialinvoke $r120.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: void <init>(float,float)>(3.141592F, 1.0E-6F);

        $r121 = virtualinvoke $r119.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r120);

        $r0[34] = $r121;

        $r122 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_35__401: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r123 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r122);

        $r124 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.141592653589793);

        $r125 = virtualinvoke $r123.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r124);

        $r0[35] = $r125;

        $r126 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_36__402: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r127 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r126);

        $r128 = virtualinvoke $r127.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 3.141592653589793. Expected either true or false(case insensitive)");

        $r0[36] = $r128;

        $r129 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_37__403: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r130 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r129);

        $r131 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher startsWith(java.lang.String)>("3.1415926535");

        $r132 = virtualinvoke $r130.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r131);

        $r0[37] = $r132;

        $r133 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_38__404: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r134 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r133);

        $r135 = virtualinvoke $r134.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 3.141592653589793 as a byte[] value");

        $r0[38] = $r135;

        $r136 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_39__405: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r137 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r136);

        $r138 = virtualinvoke $r137.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("onfiguration cannot evaluate object of class class java.lang.Double as a class name");

        $r0[39] = $r138;

        $r139 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_40__406: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r140 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r139);

        $r141 = virtualinvoke $r140.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"-1.0\"", class "Ljava/lang/NumberFormatException;");

        $r0[40] = $r141;

        $r142 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_41__407: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r143 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r142);

        $r144 = virtualinvoke $r143.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"-1.0\"", class "Ljava/lang/NumberFormatException;");

        $r0[41] = $r144;

        $r145 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_42__408: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r146 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r145);

        $r147 = new org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        specialinvoke $r147.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: void <init>(float,float)>(-1.0F, 1.0E-6F);

        $r148 = virtualinvoke $r146.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r147);

        $r0[42] = $r148;

        $r149 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_43__409: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r150 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r149);

        $r151 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-1.0);

        $r152 = virtualinvoke $r150.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r151);

        $r0[43] = $r152;

        $r153 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_44__410: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r154 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r153);

        $r155 = virtualinvoke $r154.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: -1.0. Expected either true or false(case insensitive)");

        $r0[44] = $r155;

        $r156 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_45__411: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r157 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r156);

        $r158 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher startsWith(java.lang.String)>("-1");

        $r159 = virtualinvoke $r157.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r158);

        $r0[45] = $r159;

        $r160 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_46__412: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r161 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r160);

        $r162 = virtualinvoke $r161.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value -1.0 as a byte[] value");

        $r0[46] = $r162;

        $r163 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_47__413: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r164 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r163);

        $r165 = virtualinvoke $r164.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Double as a class name");

        $r0[47] = $r165;

        $r166 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_48__414: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r167 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r166);

        $r168 = virtualinvoke $r167.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"0.0\"", class "Ljava/lang/NumberFormatException;");

        $r0[48] = $r168;

        $r169 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_49__415: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r170 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r169);

        $r171 = virtualinvoke $r170.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"0.0\"", class "Ljava/lang/NumberFormatException;");

        $r0[49] = $r171;

        $r172 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_50__416: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r173 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r172);

        $r174 = new org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        specialinvoke $r174.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: void <init>(float,float)>(0.0F, 1.0E-6F);

        $r175 = virtualinvoke $r173.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r174);

        $r0[50] = $r175;

        $r176 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_51__417: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r177 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r176);

        $r178 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r179 = virtualinvoke $r177.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r178);

        $r0[51] = $r179;

        $r180 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_52__418: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r181 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r180);

        $r182 = virtualinvoke $r181.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 0.0. Expected either true or false(case insensitive)");

        $r0[52] = $r182;

        $r183 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_53__419: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r184 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r183);

        $r185 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher startsWith(java.lang.String)>("0");

        $r186 = virtualinvoke $r184.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)>($r185);

        $r0[53] = $r186;

        $r187 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_54__420: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r188 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r187);

        $r189 = virtualinvoke $r188.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 0.0 as a byte[] value");

        $r0[54] = $r189;

        $r190 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_55__421: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r191 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r190);

        $r192 = virtualinvoke $r191.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Double as a class name");

        $r0[55] = $r192;

        $r193 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_56__422: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r194 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r193);

        $r195 = virtualinvoke $r194.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"1.7976931348623157E308\"", class "Ljava/lang/NumberFormatException;");

        $r0[56] = $r195;

        $r196 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_57__423: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r197 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r196);

        $r198 = virtualinvoke $r197.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"1.7976931348623157E308\"", class "Ljava/lang/NumberFormatException;");

        $r0[57] = $r198;

        $r199 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_58__424: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r200 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r199);

        $r201 = virtualinvoke $r200.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration value 1.7976931348623157E308 overflows/underflows the float type.");

        $r0[58] = $r201;

        $r202 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_59__425: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r203 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r202);

        $r204 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $r205 = virtualinvoke $r203.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r204);

        $r0[59] = $r205;

        $r206 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_60__426: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r207 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r206);

        $r208 = virtualinvoke $r207.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 1.7976931348623157E308. Expected either true or false(case insensitive)");

        $r0[60] = $r208;

        $r209 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_61__427: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r210 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r209);

        $r211 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(1.7976931348623157E308);

        $r212 = virtualinvoke $r210.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r211);

        $r0[61] = $r212;

        $r213 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_62__428: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r214 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r213);

        $r215 = virtualinvoke $r214.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 1.7976931348623157E308 as a byte[] value");

        $r0[62] = $r215;

        $r216 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_63__429: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r217 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r216);

        $r218 = virtualinvoke $r217.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Double as a class name");

        $r0[63] = $r218;

        $r219 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_64__430: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r220 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r219);

        $r221 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $r222 = virtualinvoke $r220.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r221);

        $r0[64] = $r222;

        $r223 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_65__431: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r224 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r223);

        $r225 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r226 = virtualinvoke $r224.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r225);

        $r0[65] = $r226;

        $r227 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_66__432: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r228 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r227);

        $r229 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(42.0F);

        $r230 = virtualinvoke $r228.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r229);

        $r0[66] = $r230;

        $r231 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_67__433: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r232 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r231);

        $r233 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(42.0);

        $r234 = virtualinvoke $r232.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r233);

        $r0[67] = $r234;

        $r235 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_68__434: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r236 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r235);

        $r237 = virtualinvoke $r236.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: 42. Expected either true or false(case insensitive)");

        $r0[68] = $r237;

        $r238 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_69__435: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r239 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r238);

        $r240 = virtualinvoke $r239.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>("42");

        $r0[69] = $r240;

        $r241 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_70__436: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r242 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r241);

        $r243 = virtualinvoke $r242.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value 42 as a byte[] value");

        $r0[70] = $r243;

        $r244 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_71__437: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r245 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r244);

        $r246 = virtualinvoke $r245.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("42", class "Ljava/lang/ClassNotFoundException;");

        $r0[71] = $r246;

        $r247 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_72__438: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r248 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r247);

        $r249 = virtualinvoke $r248.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"bcdefg&&\"", class "Ljava/lang/NumberFormatException;");

        $r0[72] = $r249;

        $r250 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_73__439: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r251 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r250);

        $r252 = virtualinvoke $r251.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"bcdefg&&\"", class "Ljava/lang/NumberFormatException;");

        $r0[73] = $r252;

        $r253 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_74__440: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r254 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r253);

        $r255 = virtualinvoke $r254.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"bcdefg&&\"", class "Ljava/lang/NumberFormatException;");

        $r0[74] = $r255;

        $r256 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_75__441: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r257 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r256);

        $r258 = virtualinvoke $r257.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("For input string: \"bcdefg&&\"", class "Ljava/lang/NumberFormatException;");

        $r0[75] = $r258;

        $r259 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_76__442: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r260 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r259);

        $r261 = virtualinvoke $r260.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Unrecognized option for boolean: bcdefg&&. Expected either true or false(case insensitive)");

        $r0[76] = $r261;

        $r262 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_77__444: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r263 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r262);

        $r264 = virtualinvoke $r263.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>("bcdefg&&");

        $r0[77] = $r264;

        $r265 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_78__445: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r266 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r265);

        $r267 = virtualinvoke $r266.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value bcdefg&& as a byte[] value");

        $r0[78] = $r267;

        $r268 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_79__446: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r269 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r268);

        $r270 = virtualinvoke $r269.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String,java.lang.Class)>("bcdefg&&", class "Ljava/lang/ClassNotFoundException;");

        $r0[79] = $r270;

        $r271 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_80__447: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r272 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r271);

        $r273 = virtualinvoke $r272.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("For input string: \"true\"");

        $r0[80] = $r273;

        $r274 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_81__448: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r275 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r274);

        $r276 = virtualinvoke $r275.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("For input string: \"true\"");

        $r0[81] = $r276;

        $r277 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_82__449: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r278 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r277);

        $r279 = virtualinvoke $r278.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("For input string: \"true\"");

        $r0[82] = $r279;

        $r280 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_83__450: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r281 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r280);

        $r282 = virtualinvoke $r281.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("For input string: \"true\"");

        $r0[83] = $r282;

        $r283 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_84__451: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r284 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r283);

        $r285 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r286 = virtualinvoke $r284.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>($r285);

        $r0[84] = $r286;

        $r287 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_85__452: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r288 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r287);

        $r289 = virtualinvoke $r288.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)>("true");

        $r0[85] = $r289;

        $r290 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_86__453: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r291 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r290);

        $r292 = virtualinvoke $r291.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate value true as a byte[] value");

        $r0[86] = $r292;

        $r293 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_getSpecs_87__454: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor bootstrap$()>();

        $r294 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>($r293);

        $r295 = virtualinvoke $r294.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)>("Configuration cannot evaluate object of class class java.lang.Boolean as a class name");

        $r0[87] = $r295;

        $r296 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r296;
    }

    public void testConversions() throws java.lang.Exception
    {
        org.apache.flink.configuration.ConfigurationConversionsTest r0;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec $r1, $r5;
        java.util.Optional $r2;
        java.util.function.Consumer $r3;
        org.apache.flink.configuration.Configuration $r4;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest;

        $r1 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec testSpec>;

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.util.Optional getExpectedException()>();

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigurationConversionsTest$lambda_testConversions_88__362: java.util.function.Consumer bootstrap$(org.apache.flink.configuration.ConfigurationConversionsTest)>(r0);

        virtualinvoke $r2.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r3);

        $r5 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec testSpec>;

        $r4 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.Configuration pc>;

        virtualinvoke $r5.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: void assertConfiguration(org.apache.flink.configuration.Configuration)>($r4);

        return;
    }

    public void lambda$testConversions$88(java.lang.String)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest r0;
        java.lang.String r1;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec $r2;
        org.junit.rules.ExpectedException $r3, $r5;
        java.lang.Class $r4;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.junit.rules.ExpectedException thrown>;

        $r2 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec testSpec>;

        $r4 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.Class getExceptionClass()>();

        virtualinvoke $r3.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>($r4);

        $r5 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r5.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>(r1);

        return;
    }

    public static java.lang.Class lambda$getSpecs$87(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("boolean", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$86(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("boolean", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$85(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("boolean", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$84(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("boolean", 0);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$83(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("boolean", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$82(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("boolean", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$81(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("boolean", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$80(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("boolean", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$79(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("non_convertible_string", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$78(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("non_convertible_string", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$77(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("non_convertible_string", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$76(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("non_convertible_string", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$75(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("non_convertible_string", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$74(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("non_convertible_string", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$73(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("non_convertible_string", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$72(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("non_convertible_string", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$71(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("string", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$70(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("string", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$69(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("string", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$68(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("string", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$67(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("string", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$66(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("string", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$65(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("string", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$64(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("string", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$63(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("too_long_double", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$62(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("too_long_double", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$61(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("too_long_double", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$60(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("too_long_double", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$59(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("too_long_double", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$58(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("too_long_double", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$57(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("too_long_double", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$56(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("too_long_double", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$55(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("zero", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$54(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("zero", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$53(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("zero", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$52(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("zero", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$51(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("zero", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$50(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("zero", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$49(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("zero", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$48(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("zero", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$47(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("negative_double", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$46(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("negative_double", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$45(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("negative_double", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$44(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("negative_double", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$43(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("negative_double", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$42(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("negative_double", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$41(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("negative_double", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$40(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("negative_double", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$39(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("double", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$38(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("double", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$37(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("double", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$36(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("double", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$35(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("double", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$34(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("double", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$33(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("double", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$32(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("double", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$31(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("float", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$30(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("float", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$29(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("float", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$28(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("float", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$27(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("float", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$26(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("float", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$25(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("float", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$24(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("float", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$23(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("too_long", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$22(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("too_long", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$21(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("too_long", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$20(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("too_long", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$19(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("too_long", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$18(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("too_long", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$17(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("too_long", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$16(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("too_long", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$15(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("long", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$14(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("long", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$13(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("long", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$12(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("long", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$11(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("long", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$10(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("long", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$9(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("long", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$8(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("long", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Class lambda$getSpecs$7(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.Class $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Class getClass(java.lang.String,java.lang.Class,java.lang.ClassLoader)>("int", class "Lorg/apache/flink/configuration/ConfigurationConversionsTest;", $r2);

        return $r3;
    }

    public static byte[] lambda$getSpecs$6(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        byte[] $r1, $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>("int", $r1);

        return $r2;
    }

    public static java.lang.String lambda$getSpecs$5(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("int", "0");

        return $r1;
    }

    public static java.lang.Boolean lambda$getSpecs$4(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>("int", 1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r1;
    }

    public static java.lang.Double lambda$getSpecs$3(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $d0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: double getDouble(java.lang.String,double)>("int", 0.0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static java.lang.Float lambda$getSpecs$2(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $f0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: float getFloat(java.lang.String,float)>("int", 0.0F);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static java.lang.Long lambda$getSpecs$1(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        long $l0;
        java.lang.Long $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $l0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("int", 0L);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r1;
    }

    public static java.lang.Integer lambda$getSpecs$0(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.Configuration r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("int", 0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.flink.configuration.ConfigurationConversionsTest: double TOO_LONG_DOUBLE> = 1.7976931348623157E308;

        <org.apache.flink.configuration.ConfigurationConversionsTest: long TOO_LONG> = 2147483657L;

        $r0 = newarray (byte)[0];

        <org.apache.flink.configuration.ConfigurationConversionsTest: byte[] EMPTY_BYTES> = $r0;

        return;
    }
}
