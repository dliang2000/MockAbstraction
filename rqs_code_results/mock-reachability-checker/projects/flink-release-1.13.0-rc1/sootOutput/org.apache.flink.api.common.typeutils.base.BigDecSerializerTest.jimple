public class org.apache.flink.api.common.typeutils.base.BigDecSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.BigDecSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        return class "Ljava/math/BigDecimal;";
    }

    protected java.math.BigDecimal[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;
        java.util.Random $r2;
        java.math.BigDecimal[] $r3;
        java.math.BigDecimal $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        double $d0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $r3 = newarray (java.math.BigDecimal)[7];

        $r4 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $r3[0] = $r4;

        $r5 = <java.math.BigDecimal: java.math.BigDecimal ONE>;

        $r3[1] = $r5;

        $r6 = <java.math.BigDecimal: java.math.BigDecimal TEN>;

        $r3[2] = $r6;

        $r7 = new java.math.BigDecimal;

        $d0 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        specialinvoke $r7.<java.math.BigDecimal: void <init>(double)>($d0);

        $r3[3] = $r7;

        $r8 = new java.math.BigDecimal;

        specialinvoke $r8.<java.math.BigDecimal: void <init>(java.lang.String)>("874597969.1234123413478523984729447");

        $r3[4] = $r8;

        $r9 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(-1.444);

        $r3[5] = $r9;

        $r10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(-10000.888);

        $r3[6] = $r10;

        return $r3;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.BigDecSerializerTest r0;
        java.math.BigDecimal[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecSerializerTest: java.math.BigDecimal[] getTestData()>();

        return $r1;
    }
}
