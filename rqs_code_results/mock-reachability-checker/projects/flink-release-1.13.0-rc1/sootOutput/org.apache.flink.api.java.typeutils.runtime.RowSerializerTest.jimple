public class org.apache.flink.api.java.typeutils.runtime.RowSerializerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRowSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r11, $r12, $r13, $r14;
        org.apache.flink.types.Row r2, r3, r4, r6;
        org.apache.flink.api.common.typeutils.TypeSerializer r7;
        java.lang.String[] $r9;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r10;
        org.apache.flink.types.RowKind $r15, $r16, $r19, $r22, $r35;
        java.lang.Integer $r17, $r20, $r23, $r26, $r28, $r30, $r32, $r36;
        java.lang.Boolean $r18, $r21, $r24, $r37;
        java.util.LinkedHashMap $r25;
        java.lang.Object[] $r34;
        org.apache.flink.api.common.ExecutionConfig $r38;
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance $r39;
        org.apache.flink.types.Row[] $r40;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerTest;

        $r9 = newarray (java.lang.String)[4];

        $r9[0] = "a";

        $r9[1] = "b";

        $r9[2] = "c";

        $r9[3] = "d";

        $r10 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[4];

        $r11 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        $r10[0] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        $r10[1] = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation DOUBLE>;

        $r10[2] = $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN>;

        $r10[3] = $r14;

        r1 = staticinvoke <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation ROW_NAMED(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation[])>($r9, $r10);

        $r15 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r15, 4);

        $r16 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        virtualinvoke r2.<org.apache.flink.types.Row: void setKind(org.apache.flink.types.RowKind)>($r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r17);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "a");

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, $r18);

        $r19 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r19);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r20);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "a");

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r21);

        $r22 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        r4 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r22);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r23);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "a");

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r24);

        $r25 = new java.util.LinkedHashMap;

        specialinvoke $r25.<java.util.LinkedHashMap: void <init>()>();

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", $r26);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", $r28);

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", $r30);

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r25.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("d", $r32);

        $r35 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        $r34 = newarray (java.lang.Object)[4];

        r6 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>($r35, $r34, $r25);

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r6.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r36);

        virtualinvoke r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "a");

        virtualinvoke r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r6.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r37);

        $r38 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r38.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r7 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r38);

        $r39 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance;

        $r40 = newarray (org.apache.flink.types.Row)[4];

        $r40[0] = r2;

        $r40[1] = r3;

        $r40[2] = r4;

        $r40[3] = r6;

        specialinvoke $r39.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.RowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r7, $r40);

        virtualinvoke $r39.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    public void testLargeRowSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        org.apache.flink.types.Row $r20;
        java.lang.Integer $r21;
        org.apache.flink.api.common.ExecutionConfig $r22;
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance $r23;
        org.apache.flink.types.Row[] $r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerTest;

        $r5 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[13];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[2] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[3] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[4] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[5] = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[6] = $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[7] = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[8] = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[9] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[10] = $r17;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[11] = $r18;

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[12] = $r19;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r20 = new org.apache.flink.types.Row;

        specialinvoke $r20.<org.apache.flink.types.Row: void <init>(int)>(13);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r21);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(5, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(6, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(7, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(8, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(9, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(10, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(11, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(12, "Test");

        $r22 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r22.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r22);

        $r23 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance;

        $r24 = newarray (org.apache.flink.types.Row)[1];

        $r24[0] = $r20;

        specialinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.RowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r3, $r24);

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    public void testRowSerializerWithComplexTypes()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r6;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r9, $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r11, $r12, $r15, $r16, $r17;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r13;
        org.apache.flink.api.common.typeinfo.TypeInformation $r18;
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo $r19, $r20, $r21;
        org.apache.flink.types.Row[] $r22;
        org.apache.flink.types.RowKind $r23, $r25, $r28, $r32, $r36, $r40, $r44, $r48, $r56, $r64, $r72, $r80, $r88, $r96;
        org.apache.flink.types.Row $r24, $r27, $r31, $r35, $r39, $r43, $r47, $r55, $r63, $r71, $r79, $r87, $r95, $r103;
        java.lang.Integer $r26, $r29, $r33, $r37, $r41, $r45, $r49, $r52, $r57, $r60, $r65, $r68, $r73, $r76, $r81, $r84, $r89, $r92, $r97, $r100;
        java.lang.Double $r30, $r34, $r38, $r42, $r46, $r50, $r58, $r66, $r74, $r82, $r90, $r98;
        org.apache.flink.api.java.tuple.Tuple3 $r51, $r59, $r67, $r75, $r83, $r91, $r99;
        java.lang.Boolean $r53, $r61, $r69, $r77, $r85, $r93, $r101;
        java.lang.Short $r54, $r62, $r70, $r78, $r86, $r94, $r102;
        org.apache.flink.api.common.ExecutionConfig $r104;
        org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance $r105;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerTest;

        $r8 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r9 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[5];

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9[2] = $r12;

        $r13 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r14 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r14[0] = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r14[1] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r14[2] = $r17;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r14);

        $r9[3] = $r13;

        $r18 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/RowSerializerTest$MyPojo;");

        $r9[4] = $r18;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r9);

        $r19 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo;

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: void <init>()>();

        $r19.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: java.lang.String name> = null;

        $r20 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: void <init>()>();

        $r20.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: java.lang.String name> = "Test1";

        $r21 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: void <init>()>();

        $r21.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$MyPojo: java.lang.String name> = "Test2";

        $r22 = newarray (org.apache.flink.types.Row)[14];

        $r23 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r24 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r23, null, null, null, null, null);

        $r22[0] = $r24;

        $r25 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r27 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r25, $r26, null, null, null, null);

        $r22[1] = $r27;

        $r28 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r28, $r29, $r30, null, null, null);

        $r22[2] = $r31;

        $r32 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r35 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r32, $r33, $r34, "a", null, null);

        $r22[3] = $r35;

        $r36 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r38 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r39 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r36, $r37, $r38, "a", null, null);

        $r22[4] = $r39;

        $r40 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r43 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r40, $r41, $r42, "a", null, null);

        $r22[5] = $r43;

        $r44 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r46 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r47 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r44, $r45, $r46, "b", null, null);

        $r22[6] = $r47;

        $r48 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r50 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r51 = new org.apache.flink.api.java.tuple.Tuple3;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r54 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r51.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r52, $r53, $r54);

        $r55 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r48, $r49, $r50, "b", $r51, null);

        $r22[7] = $r55;

        $r56 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r58 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r59 = new org.apache.flink.api.java.tuple.Tuple3;

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r62 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r59.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r60, $r61, $r62);

        $r63 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r56, $r57, $r58, "b", $r59, null);

        $r22[8] = $r63;

        $r64 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r66 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r67 = new org.apache.flink.api.java.tuple.Tuple3;

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r69 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r70 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r67.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r68, $r69, $r70);

        $r71 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r64, $r65, $r66, "b", $r67, null);

        $r22[9] = $r71;

        $r72 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_AFTER>;

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r74 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r75 = new org.apache.flink.api.java.tuple.Tuple3;

        $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r77 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r78 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r75.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r76, $r77, $r78);

        $r79 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r72, $r73, $r74, "b", $r75, null);

        $r22[10] = $r79;

        $r80 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r81 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r82 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r83 = new org.apache.flink.api.java.tuple.Tuple3;

        $r84 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r85 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r86 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r83.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r84, $r85, $r86);

        $r87 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r80, $r81, $r82, "b", $r83, $r19);

        $r22[11] = $r87;

        $r88 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r89 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r90 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r91 = new org.apache.flink.api.java.tuple.Tuple3;

        $r92 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r93 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r94 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r91.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r92, $r93, $r94);

        $r95 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r88, $r89, $r90, "b", $r91, $r20);

        $r22[12] = $r95;

        $r96 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r97 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r98 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r99 = new org.apache.flink.api.java.tuple.Tuple3;

        $r100 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r101 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r102 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r99.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r100, $r101, $r102);

        $r103 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerTest: org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r96, $r97, $r98, "b", $r99, $r21);

        $r22[13] = $r103;

        $r104 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r104.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r6 = virtualinvoke $r8.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r104);

        $r105 = new org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance;

        specialinvoke $r105.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.RowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r6, $r22);

        virtualinvoke $r105.<org.apache.flink.api.java.typeutils.runtime.RowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    private static org.apache.flink.types.Row createRow(org.apache.flink.types.RowKind, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object r1, r2, r3, r4, r5;
        org.apache.flink.types.Row $r7;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r7 = new org.apache.flink.types.Row;

        specialinvoke $r7.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>(r0, 5);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, r1);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, r2);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, r3);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, r4);

        virtualinvoke $r7.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, r5);

        return $r7;
    }
}
