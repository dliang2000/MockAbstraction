public class org.apache.flink.core.io.DefaultSplitAssignerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.DefaultSplitAssignerTest r0;

        r0 := @this: org.apache.flink.core.io.DefaultSplitAssignerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSerialSplitAssignment()
    {
        org.apache.flink.core.io.DefaultSplitAssignerTest r0;
        java.util.HashSet $r2;
        org.apache.flink.api.common.io.DefaultInputSplitAssigner $r3;
        org.apache.flink.core.io.InputSplit $r4, $r5;
        boolean $z0, $z1;
        org.apache.flink.core.io.GenericInputSplit $r6;
        java.lang.Exception $r7;
        java.lang.String $r8;
        int i0;

        r0 := @this: org.apache.flink.core.io.DefaultSplitAssignerTest;

     label1:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        i0 = 0;

     label2:
        if i0 >= 50 goto label3;

        $r6 = new org.apache.flink.core.io.GenericInputSplit;

        specialinvoke $r6.<org.apache.flink.core.io.GenericInputSplit: void <init>(int,int)>(i0, 50);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i0 = i0 + 1;

        goto label2;

     label3:
        $r3 = new org.apache.flink.api.common.io.DefaultInputSplitAssigner;

        specialinvoke $r3.<org.apache.flink.api.common.io.DefaultInputSplitAssigner: void <init>(java.util.Collection)>($r2);

     label4:
        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.io.DefaultInputSplitAssigner: org.apache.flink.core.io.InputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        if $r4 == null goto label5;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label4;

     label5:
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.io.DefaultInputSplitAssigner: org.apache.flink.core.io.InputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r5);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r8 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testConcurrentSplitAssignment()
    {
        org.apache.flink.core.io.DefaultSplitAssignerTest r0;
        java.lang.Thread[] r5;
        java.util.HashSet $r6;
        org.apache.flink.api.common.io.DefaultInputSplitAssigner $r7;
        java.util.concurrent.atomic.AtomicInteger $r8, $r9;
        org.apache.flink.core.io.DefaultSplitAssignerTest$1 $r10;
        int $i2, $i4, i7, i8, i9, i10, i11;
        long $l3, $l5;
        org.apache.flink.core.io.InputSplit $r11;
        java.lang.Thread $r12, $r13, $r14, $r15, $r16;
        boolean $z0;
        org.apache.flink.core.io.GenericInputSplit $r17;
        java.lang.Exception $r18;
        java.lang.String $r19;

        r0 := @this: org.apache.flink.core.io.DefaultSplitAssignerTest;

     label01:
        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        i7 = 0;

     label02:
        if i7 >= 500 goto label03;

        $r17 = new org.apache.flink.core.io.GenericInputSplit;

        specialinvoke $r17.<org.apache.flink.core.io.GenericInputSplit: void <init>(int,int)>(i7, 500);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r17);

        i7 = i7 + 1;

        goto label02;

     label03:
        $r7 = new org.apache.flink.api.common.io.DefaultInputSplitAssigner;

        specialinvoke $r7.<org.apache.flink.api.common.io.DefaultInputSplitAssigner: void <init>(java.util.Collection)>($r6);

        $r8 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r9 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r10 = new org.apache.flink.core.io.DefaultSplitAssignerTest$1;

        specialinvoke $r10.<org.apache.flink.core.io.DefaultSplitAssignerTest$1: void <init>(org.apache.flink.core.io.DefaultSplitAssignerTest,org.apache.flink.api.common.io.DefaultInputSplitAssigner,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger)>(r0, $r7, $r8, $r9);

        r5 = newarray (java.lang.Thread)[10];

        i8 = 0;

     label04:
        if i8 >= 10 goto label05;

        $r15 = new java.lang.Thread;

        specialinvoke $r15.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        r5[i8] = $r15;

        $r16 = r5[i8];

        virtualinvoke $r16.<java.lang.Thread: void setDaemon(boolean)>(1);

        i8 = i8 + 1;

        goto label04;

     label05:
        i9 = 0;

     label06:
        if i9 >= 10 goto label07;

        $r14 = r5[i9];

        virtualinvoke $r14.<java.lang.Thread: void start()>();

        i9 = i9 + 1;

        goto label06;

     label07:
        i10 = 0;

     label08:
        if i10 >= 10 goto label09;

        $r13 = r5[i10];

        virtualinvoke $r13.<java.lang.Thread: void join(long)>(5000L);

        i10 = i10 + 1;

        goto label08;

     label09:
        i11 = 0;

     label10:
        if i11 >= 10 goto label12;

        $r12 = r5[i11];

        $z0 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("The concurrency test case is erroneous, the thread did not respond in time.");

     label11:
        i11 = i11 + 1;

        goto label10;

     label12:
        $i2 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l3);

        $i4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(124750L, $l5);

        $r11 = virtualinvoke $r7.<org.apache.flink.api.common.io.DefaultInputSplitAssigner: org.apache.flink.core.io.InputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

     label13:
        goto label15;

     label14:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

        $r19 = virtualinvoke $r18.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r19);

     label15:
        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }
}
