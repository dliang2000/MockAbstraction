public class org.apache.flink.configuration.MemorySizeTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.configuration.MemorySizeTest r0;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testUnitConversion()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize r1, $r6, $r7, $r8, $r9;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l15, $l16, $l17, $l18, $l19, $l21, $l22, $l23, $l24, $l25, $l27, $l28, $l29;
        int $i2, $i8, $i14, $i20, $i26;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        r1 = <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ZERO>;

        $l0 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

        $l1 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $l4 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l4);

        $l5 = virtualinvoke r1.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r6 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r6.<org.apache.flink.configuration.MemorySize: void <init>(long)>(955L);

        $l6 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(955L, $l6);

        $l7 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $l10 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l10);

        $l11 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $r7 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r7.<org.apache.flink.configuration.MemorySize: void <init>(long)>(18500L);

        $l12 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(18500L, $l12);

        $l13 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(18L, $l13);

        $i14 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        $l16 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l16);

        $l17 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $r8 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r8.<org.apache.flink.configuration.MemorySize: void <init>(long)>(15728640L);

        $l18 = virtualinvoke $r8.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(15728640L, $l18);

        $l19 = virtualinvoke $r8.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(15360L, $l19);

        $i20 = virtualinvoke $r8.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(15L, $l21);

        $l22 = virtualinvoke $r8.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l22);

        $l23 = virtualinvoke $r8.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l23);

        $r9 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r9.<org.apache.flink.configuration.MemorySize: void <init>(long)>(2199023255562L);

        $l24 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2199023255562L, $l24);

        $l25 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483648L, $l25);

        $i26 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2097152L, $l27);

        $l28 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2048L, $l28);

        $l29 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l29);

        return;
    }

    public void testInvalid()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r1.<org.apache.flink.configuration.MemorySize: void <init>(long)>(-1L);

        return;
    }

    public void testStandardUtils() throws java.io.IOException
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize r2, $r3;
        java.io.Serializable $r4;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.String $r5, $r6;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r3 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r3.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1234567890L);

        $r4 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r3);

        r2 = (org.apache.flink.configuration.MemorySize) $r4;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r2);

        $i0 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.flink.configuration.MemorySize: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: java.lang.String toString()>();

        $r6 = virtualinvoke r2.<org.apache.flink.configuration.MemorySize: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    public void testParseBytes()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        long $l0, $l1, $l2, $l3, $l4;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $l0 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("1234");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l0);

        $l1 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("1234b");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l1);

        $l2 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("1234 b");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l2);

        $l3 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("1234bytes");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l3);

        $l4 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("1234 bytes");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l4);

        return;
    }

    public void testParseKibiBytes()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766k");

        $l0 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l0);

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766 k");

        $l1 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l1);

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766kb");

        $l2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l2);

        $r4 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766 kb");

        $l3 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l3);

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766kibibytes");

        $l4 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l4);

        $r6 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("667766 kibibytes");

        $l5 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l5);

        return;
    }

    public void testParseMebiBytes()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623m");

        $i0 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l1);

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623 m");

        $i2 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l3);

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623mb");

        $i4 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l5);

        $r4 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623 mb");

        $i6 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l7);

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623mebibytes");

        $i8 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l9);

        $r6 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("7657623 mebibytes");

        $i10 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l11);

        return;
    }

    public void testParseGibiBytes()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654g");

        $l0 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l0);

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654 g");

        $l1 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l1);

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654gb");

        $l2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l2);

        $r4 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654 gb");

        $l3 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l3);

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654gibibytes");

        $l4 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l4);

        $r6 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("987654 gibibytes");

        $l5 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l5);

        return;
    }

    public void testParseTebiBytes()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567t");

        $l0 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l0);

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567 t");

        $l1 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l1);

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567tb");

        $l2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l2);

        $r4 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567 tb");

        $l3 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l3);

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567tebibytes");

        $l4 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l4);

        $r6 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1234567 tebibytes");

        $l5 = virtualinvoke $r6.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234567L, $l5);

        return;
    }

    public void testUpperCase()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r2, $r3, $r4, $r5;
        long $l0, $l1, $l3, $l4, $l5;
        int $i2;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1 B");

        $l0 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: long getBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1 K");

        $l1 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r3 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1 M");

        $i2 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r4 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1 G");

        $l4 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: long getGibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l4);

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1 T");

        $l5 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize: long getTebiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        return;
    }

    public void testTrimBeforeParse()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        long $l0, $l1;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $l0 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("      155      ");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l0);

        $l1 = staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("      155      bytes   ");

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l1);

        return;
    }

    public void testParseInvalid()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r5, $r6, $r7;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

     label01:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

     label04:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label05:
        goto label07;

     label06:
        $r2 := @caughtexception;

     label07:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("     ");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("foobar or fubar or foo bazz");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label11:
        goto label13;

     label12:
        $r1 := @caughtexception;

     label13:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("16 gjah");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

     label16:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("16 16 17 18 bytes");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label17:
        goto label19;

     label18:
        $r6 := @caughtexception;

     label19:
        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("-100 bytes");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label20:
        goto label22;

     label21:
        $r5 := @caughtexception;

     label22:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
        catch java.lang.IllegalArgumentException from label19 to label20 with label21;
    }

    public void testParseNumberOverflow()
    {
        org.apache.flink.configuration.MemorySizeTest r0;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("100000000000000000000000000000000 bytes");

        return;
    }

    public void testParseNumberTimeUnitOverflow()
    {
        org.apache.flink.configuration.MemorySizeTest r0;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        staticinvoke <org.apache.flink.configuration.MemorySize: long parseBytes(java.lang.String)>("100000000000000 tb");

        return;
    }

    public void testParseWithDefaultUnit()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        org.apache.flink.configuration.MemorySize $r2, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21;
        int $i0, $i2, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l4, $l5, $l7, $l9, $l11, $l13, $l15;
        java.lang.Integer $r3;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7", $r1);

        $i0 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r4 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r5 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7340032", $r4);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r6 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r7 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7m", $r6);

        $i2 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l3);

        $r8 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r9 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7", $r8);

        $l4 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7168L, $l4);

        $r10 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r11 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7m", $r10);

        $l5 = virtualinvoke $r11.<org.apache.flink.configuration.MemorySize: long getKibiBytes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7168L, $l5);

        $r12 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r13 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7 m", $r12);

        $i6 = virtualinvoke $r13.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l7);

        $r14 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r15 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7mb", $r14);

        $i8 = virtualinvoke $r15.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l9);

        $r16 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r17 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7 mb", $r16);

        $i10 = virtualinvoke $r17.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l11);

        $r18 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r19 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7mebibytes", $r18);

        $i12 = virtualinvoke $r19.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l13);

        $r20 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r21 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String,org.apache.flink.configuration.MemorySize$MemoryUnit)>("7 mebibytes", $r20);

        $i14 = virtualinvoke $r21.<org.apache.flink.configuration.MemorySize: int getMebiBytes()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l15);

        return;
    }

    public void testDivideByLong()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r2, $r3, $r4;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r2 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize: void <init>(long)>(100L);

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize divide(long)>(23L);

        $r4 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r4.<org.apache.flink.configuration.MemorySize: void <init>(long)>(4L);

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r5);

        return;
    }

    public void testDivideByNegativeLong()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r2;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r2 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize: void <init>(long)>(100L);

        virtualinvoke $r2.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize divide(long)>(-23L);

        return;
    }

    public void testToHumanReadableString()
    {
        org.apache.flink.configuration.MemorySizeTest r0;
        org.apache.flink.configuration.MemorySize $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25;
        java.lang.String $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        org.hamcrest.Matcher $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;

        r0 := @this: org.apache.flink.configuration.MemorySizeTest;

        $r1 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r1.<org.apache.flink.configuration.MemorySize: void <init>(long)>(0L);

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r3 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("0 bytes");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r2, $r3);

        $r4 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r4.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1L);

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("1 bytes");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $r7 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r7.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1024L);

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("1024 bytes");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        $r10 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r10.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1025L);

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("1.001kb (1025 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r12);

        $r13 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r13.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1536L);

        $r14 = virtualinvoke $r13.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r15 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("1.500kb (1536 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r15);

        $r16 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r16.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1000000L);

        $r17 = virtualinvoke $r16.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r18 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("976.563kb (1000000 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r18);

        $r19 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r19.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1000000000L);

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r21 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("953.674mb (1000000000 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r20, $r21);

        $r22 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r22.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1000000000000L);

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r24 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("931.323gb (1000000000000 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r23, $r24);

        $r25 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r25.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1000000000000000L);

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r27 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>("909.495tb (1000000000000000 bytes)");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r26, $r27);

        return;
    }
}
