public class org.apache.flink.testutils.serialization.types.AsciiStringType extends java.lang.Object implements org.apache.flink.testutils.serialization.types.SerializationTestType
{
    private static final int MAX_LEN;
    public java.lang.String value;

    public void <init>()
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value> = "";

        return;
    }

    private void <init>(java.lang.String)
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value> = r1;

        return;
    }

    public org.apache.flink.testutils.serialization.types.AsciiStringType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0, $r4;
        java.util.Random r1;
        int i0, $i1, $i2, i4;
        java.lang.StringBuilder $r3;
        java.lang.String $r5;
        char $c3;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: java.util.Random;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(1501);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(126);

        $i2 = $i1 + 1;

        $c3 = (char) $i2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.flink.testutils.serialization.types.AsciiStringType;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.testutils.serialization.types.AsciiStringType: void <init>(java.lang.String)>($r5);

        return $r4;
    }

    public int length()
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;
        java.nio.charset.Charset $r1;
        java.lang.String $r2;
        byte[] $r3;
        int $i0, $i1;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        $r2 = r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value>;

        $r1 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $i0 = lengthof $r3;

        $i1 = $i0 + 2;

        return $i1;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value> = $r2;

        return;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        $r1 = r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.serialization.types.AsciiStringType;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.testutils.serialization.types.AsciiStringType) r1;

        $r4 = r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value>;

        $r3 = r2.<org.apache.flink.testutils.serialization.types.AsciiStringType: java.lang.String value>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label1:
        return 0;
    }

    public volatile org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.AsciiStringType r0, $r2;
        java.util.Random r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.AsciiStringType;

        r1 := @parameter0: java.util.Random;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.AsciiStringType: org.apache.flink.testutils.serialization.types.AsciiStringType getRandom(java.util.Random)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.testutils.serialization.types.AsciiStringType: int MAX_LEN> = 1500;

        return;
    }
}
