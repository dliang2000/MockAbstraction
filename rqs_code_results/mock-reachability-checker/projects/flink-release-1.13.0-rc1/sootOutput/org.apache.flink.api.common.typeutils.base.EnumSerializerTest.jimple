public class org.apache.flink.api.common.typeutils.base.EnumSerializerTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testPublicEnum()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum[] $r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum $r2, $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r1 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum)[3];

        $r2 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum ONE>;

        $r1[0] = $r2;

        $r3 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum TWO>;

        $r1[1] = $r3;

        $r4 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PrivateEnum THREE>;

        $r1[2] = $r4;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testEnumSerializer(java.lang.Enum[])>($r1);

        return;
    }

    public void testPrivateEnum()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] $r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r1 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum)[6];

        $r2 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r1[0] = $r2;

        $r3 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r1[1] = $r3;

        $r4 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r1[2] = $r4;

        $r5 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r1[3] = $r5;

        $r6 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r1[4] = $r6;

        $r7 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r1[5] = $r7;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest: void testEnumSerializer(java.lang.Enum[])>($r1);

        return;
    }

    public void testEmptyEnum()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$EmptyEnum;");

        return;
    }

    public void testReconfiguration()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r4;
        org.apache.flink.api.common.typeutils.base.EnumSerializer r6, $r13;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i26, i28, i29;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum r8, $r10, $r11, $r12, $r14, $r16, $r19, $r21, $r24, $r26, $r29, $r31, $r34, $r36, $r39, $r41, $r46, $r47, $r48, $r49, $r50, $r51;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] $r9, $r45;
        long $l2, $l4, $l6, $l8, $l10, $l12, $l14, $l16, $l18, $l20, $l22, $l24, $l25, $l27;
        java.util.Map $r15, $r20, $r25, $r30, $r35, $r40, $r54;
        java.lang.Object $r17, $r22, $r27, $r32, $r37, $r42, $r55;
        java.lang.Integer $r18, $r23, $r28, $r33, $r38, $r43, $r56;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r44;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r52;
        java.lang.Enum[] $r53;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r9 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum)[3];

        $r10 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r9[2] = $r12;

        $r13 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;");

        $r14 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $i1 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l2 = (long) $i1;

        $r15 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r16 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = (java.lang.Integer) $r17;

        $i3 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r19 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $i5 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l6 = (long) $i5;

        $r20 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r21 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r22 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.Integer) $r22;

        $i7 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        $r24 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $i9 = virtualinvoke $r24.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l10 = (long) $i9;

        $r25 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r26 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r27 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        $r28 = (java.lang.Integer) $r27;

        $i11 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l10, $l12);

        $r29 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $i13 = virtualinvoke $r29.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l14 = (long) $i13;

        $r30 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r31 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r32 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        $r33 = (java.lang.Integer) $r32;

        $i15 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l14, $l16);

        $r34 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $i17 = virtualinvoke $r34.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l18 = (long) $i17;

        $r35 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r36 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r37 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>($r36);

        $r38 = (java.lang.Integer) $r37;

        $i19 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        $l20 = (long) $i19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, $l20);

        $r39 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $i21 = virtualinvoke $r39.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l22 = (long) $i21;

        $r40 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r41 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r42 = interfaceinvoke $r40.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        $r43 = (java.lang.Integer) $r42;

        $i23 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l22, $l24);

        $r44 = new org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        specialinvoke $r44.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;", $r9);

        r4 = virtualinvoke $r44.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r13);

        $z0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r45 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum)[6];

        $r46 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r45[0] = $r46;

        $r47 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r45[1] = $r47;

        $r48 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r45[2] = $r48;

        $r49 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r45[3] = $r49;

        $r50 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r45[4] = $r50;

        $r51 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r45[5] = $r51;

        $r52 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r6 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) $r52;

        i28 = 0;

        i0 = lengthof $r45;

        i29 = 0;

     label1:
        if i29 >= i0 goto label2;

        r8 = $r45[i29];

        $l25 = (long) i28;

        $r54 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r55 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r56 = (java.lang.Integer) $r55;

        $i26 = virtualinvoke $r56.<java.lang.Integer: int intValue()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, $l27);

        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label1;

     label2:
        $r53 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r45, $r53);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testConfigurationSnapshotSerialization() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        byte[] r2;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r6;
        java.io.ByteArrayOutputStream $r7;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r8;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r9;
        java.lang.Throwable $r10, $r11, $r13, $r15, $r16, $r17, r19, r25;
        java.io.ByteArrayInputStream $r23;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r26;
        java.lang.Thread $r27;
        java.lang.ClassLoader $r28;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r29;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r32;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum $r33, $r35, $r38, $r40, $r43, $r45, $r48, $r50, $r53, $r55, $r58, $r60;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23;
        java.util.Map $r34, $r39, $r44, $r49, $r54, $r59;
        java.lang.Object $r36, $r41, $r46, $r51, $r56, $r61;
        java.lang.Integer $r37, $r42, $r47, $r52, $r57, $r62;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] $r63;
        java.lang.Enum[] $r64;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r6 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;");

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r19 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r7);

        $r9 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot snapshotConfiguration()>();

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r9, $r6);

        r2 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r15 := @caughtexception;

        r19 = $r15;

        throw $r15;

     label05:
        $r10 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r19 == null goto label10;

     label07:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label11;

     label10:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r10;

     label12:
        $r23 = new java.io.ByteArrayInputStream;

        specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r25 = null;

     label13:
        $r26 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r26.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r23);

        $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r28 = virtualinvoke $r27.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r29 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r26, $r28, $r6);

     label14:
        if $r23 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r11 := @caughtexception;

        r25 = $r11;

        throw $r11;

     label17:
        $r13 := @caughtexception;

     label18:
        if $r23 == null goto label23;

        if r25 == null goto label22;

     label19:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r17 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label23;

     label22:
        virtualinvoke $r23.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r13;

     label24:
        r32 = interfaceinvoke r29.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r6);

        $z0 = virtualinvoke r32.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r33 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $i0 = virtualinvoke $r33.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l1 = (long) $i0;

        $r34 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r35 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r36 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        $r37 = (java.lang.Integer) $r36;

        $i2 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r38 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $i4 = virtualinvoke $r38.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l5 = (long) $i4;

        $r39 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r40 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r41 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        $r42 = (java.lang.Integer) $r41;

        $i6 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        $r43 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $i8 = virtualinvoke $r43.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l9 = (long) $i8;

        $r44 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r45 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r46 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45);

        $r47 = (java.lang.Integer) $r46;

        $i10 = virtualinvoke $r47.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l11);

        $r48 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $i12 = virtualinvoke $r48.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l13 = (long) $i12;

        $r49 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r50 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r51 = interfaceinvoke $r49.<java.util.Map: java.lang.Object get(java.lang.Object)>($r50);

        $r52 = (java.lang.Integer) $r51;

        $i14 = virtualinvoke $r52.<java.lang.Integer: int intValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        $r53 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $i16 = virtualinvoke $r53.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l17 = (long) $i16;

        $r54 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r55 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r56 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        $r57 = (java.lang.Integer) $r56;

        $i18 = virtualinvoke $r57.<java.lang.Integer: int intValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, $l19);

        $r58 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $i20 = virtualinvoke $r58.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l21 = (long) $i20;

        $r59 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r60 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r61 = interfaceinvoke $r59.<java.util.Map: java.lang.Object get(java.lang.Object)>($r60);

        $r62 = (java.lang.Integer) $r61;

        $i22 = virtualinvoke $r62.<java.lang.Integer: int intValue()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, $l23);

        $r63 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] values()>();

        $r64 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r63, $r64);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testSerializeEnumSerializer() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        byte[] r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r2, r71;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum $r3, $r5, $r8, $r10, $r13, $r15, $r18, $r20, $r23, $r25, $r28, $r30, $r38, $r40, $r43, $r45, $r48, $r50, $r53, $r55, $r58, $r60, $r63, $r65;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, $i34, $i36, $i38, $i40, $i42, $i44, $i46;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33, $l35, $l37, $l39, $l41, $l43, $l45, $l47;
        java.util.Map $r4, $r9, $r14, $r19, $r24, $r29, $r39, $r44, $r49, $r54, $r59, $r64;
        java.lang.Object $r6, $r11, $r16, $r21, $r26, $r31, $r37, $r41, $r46, $r51, $r56, $r61, $r66;
        java.lang.Integer $r7, $r12, $r17, $r22, $r27, $r32, $r42, $r47, $r52, $r57, $r62, $r67;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] $r33, $r68;
        java.lang.Enum[] $r34, $r69;
        boolean $z0, $z1;
        java.lang.Thread $r35;
        java.lang.ClassLoader $r36;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r2 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;");

        $r3 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l1 = (long) $i0;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r5 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r8 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $i4 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l5 = (long) $i4;

        $r9 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r10 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i6 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        $r13 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $i8 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l9 = (long) $i8;

        $r14 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r15 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r17 = (java.lang.Integer) $r16;

        $i10 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l11);

        $r18 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $i12 = virtualinvoke $r18.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l13 = (long) $i12;

        $r19 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r20 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r21 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        $r22 = (java.lang.Integer) $r21;

        $i14 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        $r23 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $i16 = virtualinvoke $r23.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l17 = (long) $i16;

        $r24 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r25 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r26 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        $r27 = (java.lang.Integer) $r26;

        $i18 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, $l19);

        $r28 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $i20 = virtualinvoke $r28.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l21 = (long) $i20;

        $r29 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r30 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r31 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r32 = (java.lang.Integer) $r31;

        $i22 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, $l23);

        $r33 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] values()>();

        $r34 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r33, $r34);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r1 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>($r2);

        $r35 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r36 = virtualinvoke $r35.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r37 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r1, $r36);

        r71 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) $r37;

        $r38 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $i24 = virtualinvoke $r38.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l25 = (long) $i24;

        $r39 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r40 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r41 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40);

        $r42 = (java.lang.Integer) $r41;

        $i26 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, $l27);

        $r43 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $i28 = virtualinvoke $r43.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l29 = (long) $i28;

        $r44 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r45 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r46 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>($r45);

        $r47 = (java.lang.Integer) $r46;

        $i30 = virtualinvoke $r47.<java.lang.Integer: int intValue()>();

        $l31 = (long) $i30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l29, $l31);

        $r48 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $i32 = virtualinvoke $r48.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l33 = (long) $i32;

        $r49 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r50 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r51 = interfaceinvoke $r49.<java.util.Map: java.lang.Object get(java.lang.Object)>($r50);

        $r52 = (java.lang.Integer) $r51;

        $i34 = virtualinvoke $r52.<java.lang.Integer: int intValue()>();

        $l35 = (long) $i34;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l33, $l35);

        $r53 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $i36 = virtualinvoke $r53.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l37 = (long) $i36;

        $r54 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r55 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r56 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>($r55);

        $r57 = (java.lang.Integer) $r56;

        $i38 = virtualinvoke $r57.<java.lang.Integer: int intValue()>();

        $l39 = (long) $i38;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l37, $l39);

        $r58 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $i40 = virtualinvoke $r58.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l41 = (long) $i40;

        $r59 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r60 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r61 = interfaceinvoke $r59.<java.util.Map: java.lang.Object get(java.lang.Object)>($r60);

        $r62 = (java.lang.Integer) $r61;

        $i42 = virtualinvoke $r62.<java.lang.Integer: int intValue()>();

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l41, $l43);

        $r63 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $i44 = virtualinvoke $r63.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l45 = (long) $i44;

        $r64 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r65 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r66 = interfaceinvoke $r64.<java.util.Map: java.lang.Object get(java.lang.Object)>($r65);

        $r67 = (java.lang.Integer) $r66;

        $i46 = virtualinvoke $r67.<java.lang.Integer: int intValue()>();

        $l47 = (long) $i46;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l45, $l47);

        $r68 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] values()>();

        $r69 = virtualinvoke r71.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r68, $r69);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testSerializeReconfiguredEnumSerializer() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r4;
        org.apache.flink.api.common.typeutils.base.EnumSerializer r6, $r13;
        int i0, $i1, $i3, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i26, i28, i29;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum r8, $r10, $r11, $r12, $r14, $r16, $r19, $r21, $r24, $r26, $r29, $r31, $r34, $r36, $r39, $r41, $r46, $r47, $r48, $r49, $r50, $r51;
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum[] $r9, $r45;
        long $l2, $l4, $l6, $l8, $l10, $l12, $l14, $l16, $l18, $l20, $l22, $l24, $l25, $l27;
        java.util.Map $r15, $r20, $r25, $r30, $r35, $r40, $r54;
        java.lang.Object $r17, $r22, $r27, $r32, $r37, $r42, $r55;
        java.lang.Integer $r18, $r23, $r28, $r33, $r38, $r43, $r56;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r44;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r52;
        java.lang.Enum[] $r53;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        $r9 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum)[3];

        $r10 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r9[2] = $r12;

        $r13 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;");

        $r14 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $i1 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l2 = (long) $i1;

        $r15 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r16 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16);

        $r18 = (java.lang.Integer) $r17;

        $i3 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $r19 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $i5 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l6 = (long) $i5;

        $r20 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r21 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r22 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.Integer) $r22;

        $i7 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        $r24 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $i9 = virtualinvoke $r24.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l10 = (long) $i9;

        $r25 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r26 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r27 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r26);

        $r28 = (java.lang.Integer) $r27;

        $i11 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l10, $l12);

        $r29 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $i13 = virtualinvoke $r29.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l14 = (long) $i13;

        $r30 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r31 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r32 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        $r33 = (java.lang.Integer) $r32;

        $i15 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l14, $l16);

        $r34 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $i17 = virtualinvoke $r34.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l18 = (long) $i17;

        $r35 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r36 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r37 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>($r36);

        $r38 = (java.lang.Integer) $r37;

        $i19 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        $l20 = (long) $i19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, $l20);

        $r39 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $i21 = virtualinvoke $r39.<org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: int ordinal()>();

        $l22 = (long) $i21;

        $r40 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r41 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r42 = interfaceinvoke $r40.<java.util.Map: java.lang.Object get(java.lang.Object)>($r41);

        $r43 = (java.lang.Integer) $r42;

        $i23 = virtualinvoke $r43.<java.lang.Integer: int intValue()>();

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l22, $l24);

        $r44 = new org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        specialinvoke $r44.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>(class "Lorg/apache/flink/api/common/typeutils/base/EnumSerializerTest$PublicEnum;", $r9);

        r4 = virtualinvoke $r44.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r13);

        $z0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r45 = newarray (org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum)[6];

        $r46 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum BAR>;

        $r45[0] = $r46;

        $r47 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PAULA>;

        $r45[1] = $r47;

        $r48 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum NATHANIEL>;

        $r45[2] = $r48;

        $r49 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum FOO>;

        $r45[3] = $r49;

        $r50 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum PETER>;

        $r45[4] = $r50;

        $r51 = <org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum: org.apache.flink.api.common.typeutils.base.EnumSerializerTest$PublicEnum EMMA>;

        $r45[5] = $r51;

        $r52 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r6 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) $r52;

        i28 = 0;

        i0 = lengthof $r45;

        i29 = 0;

     label1:
        if i29 >= i0 goto label2;

        r8 = $r45[i29];

        $l25 = (long) i28;

        $r54 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.util.Map getValueToOrdinal()>();

        $r55 = interfaceinvoke $r54.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r56 = (java.lang.Integer) $r55;

        $i26 = virtualinvoke $r56.<java.lang.Integer: int intValue()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, $l27);

        i28 = i28 + 1;

        i29 = i29 + 1;

        goto label1;

     label2:
        $r53 = virtualinvoke r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r45, $r53);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public final transient void testEnumSerializer(java.lang.Enum[])
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerTest r0;
        java.lang.Enum[] r1;
        java.lang.Class r2, $r4;
        org.apache.flink.api.common.typeutils.SerializerTestInstance $r5;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerTest;

        r1 := @parameter0: java.lang.Enum[];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = new org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $r6 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>(r2);

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>($r6, r2, 4, r1);

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        return;
    }
}
