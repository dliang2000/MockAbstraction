public class org.apache.flink.types.RowTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.RowTest r0;

        r0 := @this: org.apache.flink.types.RowTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRowNamed()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2, r3;
        org.apache.flink.types.RowKind $r4, $r13, $r14, $r35, $r42;
        java.lang.Integer $r5, $r10, $r11, $r17, $r26, $r28, $r36, $r38, $r39, $r43, $r45, $r46, $r51, $r52, $r58;
        java.lang.Boolean $r6, $r20, $r31, $r37, $r44;
        java.util.Set $r7, $r54;
        java.lang.String[] $r8;
        org.hamcrest.Matcher $r9, $r12, $r15, $r18, $r21, $r23, $r25, $r29, $r32, $r34, $r40, $r41, $r47, $r48, $r49, $r50, $r53, $r55, $r57, $r61, $r62, $r64, $r65;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r16, $r19, $r22, $r27, $r30, $r33, $r59;
        java.lang.String $r24, $r56;
        java.lang.Throwable $r60, $r63;

        r0 := @this: org.apache.flink.types.RowTest;

        $r4 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", $r6);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        $r7 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "a";

        $r8[1] = "b";

        $r8[2] = "c";

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher containsInAnyOrder(java.lang.Object[])>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $i0 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        $r13 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        $r14 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $r16 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("a");

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $r19 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("b");

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        $r22 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("c");

        $r23 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r23);

        $r24 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r25 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D{a=42, b=true, c=null}");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r24, $r25);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r26);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", "Hello");

        $r27 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("a");

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r29 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r27, $r29);

        $r30 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("b");

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r32 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r31);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r30, $r32);

        $r33 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("c");

        $r34 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("Hello");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r33, $r34);

        $r35 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r35);

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r36);

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", $r37);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", "Hello");

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int hashCode()>();

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r39);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r38, $r40);

        $r41 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r41);

        $r42 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r42);

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r43);

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", $r44);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", "Hello");

        $i3 = virtualinvoke r1.<org.apache.flink.types.Row: int hashCode()>();

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i4 = virtualinvoke r3.<org.apache.flink.types.Row: int hashCode()>();

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r47 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r46);

        $r48 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r47);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r45, $r48);

        $r49 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        $r50 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r49);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r50);

        virtualinvoke r1.<org.apache.flink.types.Row: void clear()>();

        $i5 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r53 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r52);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r51, $r53);

        $r54 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        $r55 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r54, $r55);

        $r56 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r57 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D{}");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r56, $r57);

     label1:
        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r58);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r63 := @caughtexception;

        $r64 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("not supported in name-based field mode");

        $r65 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r64);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r63, $r65);

     label4:
        $r59 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r59);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r60 := @caughtexception;

        $r61 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("not supported in name-based field mode");

        $r62 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r61);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r60, $r62);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void testRowPositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2, r3;
        org.apache.flink.types.RowKind $r4, $r12, $r13, $r34, $r41;
        java.lang.Integer $r5, $r9, $r10, $r16, $r25, $r27, $r35, $r37, $r38, $r42, $r44, $r45, $r50, $r51, $r57;
        java.lang.Boolean $r6, $r19, $r30, $r36, $r43;
        java.util.Set $r7, $r53;
        org.hamcrest.Matcher $r8, $r11, $r14, $r17, $r20, $r22, $r24, $r28, $r31, $r33, $r39, $r40, $r46, $r47, $r48, $r49, $r52, $r54, $r56, $r60, $r61, $r63, $r64;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r15, $r18, $r21, $r26, $r29, $r32, $r58;
        java.lang.String $r23, $r55;
        java.lang.Throwable $r59, $r62;

        r0 := @this: org.apache.flink.types.RowTest;

        $r4 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r4, 3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r6);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r7 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        $i0 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $r12 = virtualinvoke r1.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        $r13 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        $r15 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(0);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $r17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r15, $r17);

        $r18 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(1);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r18, $r20);

        $r21 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(2);

        $r22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r21, $r22);

        $r23 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D[42, true, null]");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r23, $r24);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r25);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $r26 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(0);

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r28 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r27);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r26, $r28);

        $r29 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(1);

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r31 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r30);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r29, $r31);

        $r32 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(int)>(2);

        $r33 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("Hello");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r32, $r33);

        $r34 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r34, 3);

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r35);

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r36);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $i1 = virtualinvoke r1.<org.apache.flink.types.Row: int hashCode()>();

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r39 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r38);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r37, $r39);

        $r40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r40);

        $r41 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r41, 3);

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r42);

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r43);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $i3 = virtualinvoke r1.<org.apache.flink.types.Row: int hashCode()>();

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i4 = virtualinvoke r3.<org.apache.flink.types.Row: int hashCode()>();

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r46 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r45);

        $r47 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r46);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r44, $r47);

        $r48 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        $r49 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r48);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r49);

        virtualinvoke r1.<org.apache.flink.types.Row: void clear()>();

        $i5 = virtualinvoke r1.<org.apache.flink.types.Row: int getArity()>();

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r52 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r51);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r50, $r52);

        $r53 = virtualinvoke r1.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        $r54 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r53, $r54);

        $r55 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r56 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D[null, null, null]");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r55, $r56);

     label1:
        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r57);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r62 := @caughtexception;

        $r63 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("not supported in position-based field mode");

        $r64 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r63);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r62, $r64);

     label4:
        $r58 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("a");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r58);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r59 := @caughtexception;

        $r60 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("not supported in position-based field mode");

        $r61 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r60);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r59, $r61);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void testRowNamedPositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r2, r3, r4;
        java.util.LinkedHashMap $r5;
        java.lang.Integer $r6, $r8, $r10, $r14, $r21, $r22, $r28, $r37, $r39, $r47, $r49, $r50, $r54, $r56, $r57, $r62, $r63, $r70;
        java.lang.Object[] $r12;
        org.apache.flink.types.RowKind $r13, $r24, $r25, $r46, $r53;
        java.lang.Boolean $r15, $r31, $r42, $r48, $r55;
        java.util.Set $r16, $r18, $r65;
        org.hamcrest.Matcher $r17, $r20, $r23, $r26, $r29, $r32, $r34, $r36, $r40, $r43, $r45, $r51, $r52, $r58, $r59, $r60, $r61, $r64, $r67, $r69, $r73, $r74, $r76, $r77;
        java.lang.String[] $r19, $r66;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r27, $r30, $r33, $r38, $r41, $r44, $r71;
        java.lang.String $r35, $r68;
        java.lang.Throwable $r72, $r75;

        r0 := @this: org.apache.flink.types.RowTest;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", $r6);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", $r10);

        $r13 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r12 = newarray (java.lang.Object)[3];

        r2 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>($r13, $r12, $r5);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r14);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", $r15);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r16 = virtualinvoke r2.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(0);

        $r17 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r17);

        $r18 = virtualinvoke r2.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(1);

        $r19 = newarray (java.lang.String)[3];

        $r19[0] = "a";

        $r19[1] = "b";

        $r19[2] = "c";

        $r20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r19);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r18, $r20);

        $i0 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r23 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r21, $r23);

        $r24 = virtualinvoke r2.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        $r25 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r26 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r25);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r24, $r26);

        $r27 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(0);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        $r29 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r27, $r29);

        $r30 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(1);

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r32 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r31);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r30, $r32);

        $r33 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("c");

        $r34 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r33, $r34);

        $r35 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r36 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D[42, true, null]");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r35, $r36);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r37);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $r38 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(0);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r40 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r39);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r38, $r40);

        $r41 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("b");

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r43 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r42);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r41, $r43);

        $r44 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(2);

        $r45 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("Hello");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r44, $r45);

        $r46 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r46, 3);

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r47);

        $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r48);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $i1 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = virtualinvoke r3.<org.apache.flink.types.Row: int hashCode()>();

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r51 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r50);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r49, $r51);

        $r52 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r52);

        $r53 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r4 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r53, 3);

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r4.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r54);

        $r55 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke r4.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r55);

        virtualinvoke r4.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "Hello");

        $i3 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $i4 = virtualinvoke r4.<org.apache.flink.types.Row: int hashCode()>();

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r58 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r57);

        $r59 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r58);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r56, $r59);

        $r60 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r4);

        $r61 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r60);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r61);

        virtualinvoke r2.<org.apache.flink.types.Row: void clear()>();

        $i5 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r64 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r63);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r62, $r64);

        $r65 = virtualinvoke r2.<org.apache.flink.types.Row: java.util.Set getFieldNames(boolean)>(1);

        $r66 = newarray (java.lang.String)[3];

        $r66[0] = "a";

        $r66[1] = "b";

        $r66[2] = "c";

        $r67 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r66);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r65, $r67);

        $r68 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r69 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-D[null, null, null]");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r68, $r69);

     label1:
        $r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("DOES_NOT_EXIST", $r70);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r75 := @caughtexception;

        $r76 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("Unknown field name \'DOES_NOT_EXIST\'");

        $r77 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r76);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r75, $r77);

     label4:
        $r71 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>("DOES_NOT_EXIST");

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r71);

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r72 := @caughtexception;

        $r73 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("Unknown field name \'DOES_NOT_EXIST\'");

        $r74 = staticinvoke <org.junit.internal.matchers.ThrowableMessageMatcher: org.hamcrest.Matcher hasMessage(org.hamcrest.Matcher)>($r73);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r72, $r74);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void testRowOf()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r8;
        java.lang.Long $r5, $r10;
        org.apache.flink.api.java.tuple.Tuple2 $r6, $r9;
        java.lang.Boolean $r7, $r11;

        r0 := @this: org.apache.flink.types.RowTest;

        $r3 = newarray (java.lang.Object)[5];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[0] = $r4;

        $r3[1] = "hello";

        $r3[2] = null;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r6 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r5, "hi");

        $r3[3] = $r6;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r3[4] = $r7;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row of(java.lang.Object[])>($r3);

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(int)>(5);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r8);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "hello");

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r9 = new org.apache.flink.api.java.tuple.Tuple2;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        specialinvoke $r9.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r10, "hi");

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, $r9);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, $r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void testRowCopyPositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2;
        java.lang.Integer $r3, $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r4;

        r0 := @this: org.apache.flink.types.RowTest;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(int)>(5);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r3);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "hello");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r4 = new org.apache.flink.api.java.tuple.Tuple2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r5, "hi");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, $r4);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, "hello world");

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void testRowCopyNamed()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2;
        java.lang.Integer $r3, $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r4;

        r0 := @this: org.apache.flink.types.RowTest;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r3);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "hello");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        $r4 = new org.apache.flink.api.java.tuple.Tuple2;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r4.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r5, "hi");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r4);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("e", "hello world");

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row copy(org.apache.flink.types.Row)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, r2);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void testRowProjectPositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2, r3;
        java.lang.Integer $r4, $r6, $r8;
        org.apache.flink.api.java.tuple.Tuple2 $r5;
        int[] $r7;

        r0 := @this: org.apache.flink.types.RowTest;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(int)>(5);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r4);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "hello");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r5 = new org.apache.flink.api.java.tuple.Tuple2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r6, "hi");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, $r5);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, "hello world");

        $r7 = newarray (int)[3];

        $r7[0] = 0;

        $r7[1] = 2;

        $r7[2] = 4;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row project(org.apache.flink.types.Row,int[])>(r1, $r7);

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(int)>(3);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r8);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, null);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "hello world");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r2);

        return;
    }

    public void testRowProjectNamed()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r2, r3;
        java.lang.Integer $r4, $r6, $r8;
        org.apache.flink.api.java.tuple.Tuple2 $r5;
        java.lang.String[] $r7;

        r0 := @this: org.apache.flink.types.RowTest;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r4);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "hello");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        $r5 = new org.apache.flink.api.java.tuple.Tuple2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r6, "hi");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r5);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("e", "hello world");

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "a";

        $r7[1] = "c";

        $r7[2] = "e";

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row project(org.apache.flink.types.Row,java.lang.String[])>(r1, $r7);

        r3 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r8);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("e", "hello world");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r2);

        return;
    }

    public void testRowJoinPositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r4, $r6, $r8, $r11, $r13;
        java.lang.Integer $r7, $r10, $r14, $r16;
        org.apache.flink.api.java.tuple.Tuple2 $r9, $r15;
        org.apache.flink.types.Row[] $r12;

        r0 := @this: org.apache.flink.types.RowTest;

        $r6 = new org.apache.flink.types.Row;

        specialinvoke $r6.<org.apache.flink.types.Row: void <init>(int)>(2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r7);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "hello");

        $r8 = new org.apache.flink.types.Row;

        specialinvoke $r8.<org.apache.flink.types.Row: void <init>(int)>(2);

        virtualinvoke $r8.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, null);

        $r9 = new org.apache.flink.api.java.tuple.Tuple2;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r9.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r10, "hi");

        virtualinvoke $r8.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r9);

        $r11 = new org.apache.flink.types.Row;

        specialinvoke $r11.<org.apache.flink.types.Row: void <init>(int)>(1);

        virtualinvoke $r11.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, "hello world");

        $r12 = newarray (org.apache.flink.types.Row)[2];

        $r12[0] = $r8;

        $r12[1] = $r11;

        r4 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row join(org.apache.flink.types.Row,org.apache.flink.types.Row[])>($r6, $r12);

        $r13 = new org.apache.flink.types.Row;

        specialinvoke $r13.<org.apache.flink.types.Row: void <init>(int)>(5);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r14);

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "hello");

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, null);

        $r15 = new org.apache.flink.api.java.tuple.Tuple2;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r15.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r16, "hi");

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, $r15);

        virtualinvoke $r13.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, "hello world");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r4);

        return;
    }

    public void testDeepEqualsAndHashCodePositioned()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r2, r109, r111, r113, r115;
        java.util.HashMap $r3, $r40, $r62, $r83;
        byte[] $r4, $r6, $r41, $r43, $r63, $r65, $r84, $r86;
        java.lang.Object[] $r8, $r24, $r45, $r67, $r88;
        org.apache.flink.types.RowKind $r9, $r25, $r46, $r68, $r89;
        java.lang.Boolean $r10, $r26, $r47, $r69, $r90;
        java.lang.Integer[] $r11, $r14, $r27, $r30, $r48, $r52, $r70, $r73, $r91, $r94, $r100, $r104, $r105;
        java.lang.Integer $r12, $r13, $r15, $r16, $r28, $r29, $r31, $r32, $r49, $r50, $r51, $r53, $r54, $r71, $r72, $r74, $r75, $r92, $r93, $r95, $r96, $r101, $r102, $r103, $r106, $r107;
        java.util.List $r17, $r33, $r55, $r76, $r97;
        java.util.Map $r18, $r34, $r56, $r77, $r98;
        int[][] $r19, $r35, $r57, $r78;
        int[] $r20, $r21, $r22, $r36, $r37, $r38, $r58, $r59, $r60, $r79, $r80, $r81;
        java.lang.Double $r23, $r39, $r61, $r82, $r108;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;
        java.lang.Integer[][] $r99;

        r0 := @this: org.apache.flink.types.RowTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = newarray (byte)[3];

        $r4[0] = 1;

        $r4[1] = 2;

        $r4[2] = 3;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k1", $r4);

        $r6 = newarray (byte)[3];

        $r6[0] = 3;

        $r6[1] = 4;

        $r6[2] = 6;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k2", $r6);

        $r9 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r8 = newarray (java.lang.Object)[7];

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r8[0] = $r10;

        $r11 = newarray (java.lang.Integer)[3];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r11[0] = $r12;

        $r11[1] = null;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11[2] = $r13;

        $r8[1] = $r11;

        $r14 = newarray (java.lang.Integer)[3];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r14[0] = $r15;

        $r14[1] = null;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14[2] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        $r8[2] = $r17;

        $r8[3] = $r3;

        $r18 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r8[4] = $r18;

        $r19 = newarray (int[])[3];

        $r20 = newarray (int)[3];

        $r20[0] = 1;

        $r20[1] = 2;

        $r20[2] = 3;

        $r19[0] = $r20;

        $r21 = newarray (int)[0];

        $r19[1] = $r21;

        $r22 = newarray (int)[2];

        $r22[0] = 4;

        $r22[1] = 5;

        $r19[2] = $r22;

        $r8[5] = $r19;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.44);

        $r8[6] = $r23;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind,java.lang.Object[])>($r9, $r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r2);

        $i0 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $r25 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r24 = newarray (java.lang.Object)[7];

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r24[0] = $r26;

        $r27 = newarray (java.lang.Integer)[3];

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r27[0] = $r28;

        $r27[1] = null;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r27[2] = $r29;

        $r24[1] = $r27;

        $r30 = newarray (java.lang.Integer)[3];

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r30[0] = $r31;

        $r30[1] = null;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r30[2] = $r32;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r30);

        $r24[2] = $r33;

        $r24[3] = $r3;

        $r34 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r24[4] = $r34;

        $r35 = newarray (int[])[3];

        $r36 = newarray (int)[3];

        $r36[0] = 1;

        $r36[1] = 2;

        $r36[2] = 3;

        $r35[0] = $r36;

        $r37 = newarray (int)[0];

        $r35[1] = $r37;

        $r38 = newarray (int)[2];

        $r38[0] = 4;

        $r38[1] = 5;

        $r35[2] = $r38;

        $r24[5] = $r35;

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.44);

        $r24[6] = $r39;

        r109 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind,java.lang.Object[])>($r25, $r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r109, r2);

        $i4 = virtualinvoke r109.<org.apache.flink.types.Row: int hashCode()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        $r40 = new java.util.HashMap;

        specialinvoke $r40.<java.util.HashMap: void <init>()>();

        $r41 = newarray (byte)[3];

        $r41[0] = 1;

        $r41[1] = 2;

        $r41[2] = 3;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k1", $r41);

        $r43 = newarray (byte)[3];

        $r43[0] = 3;

        $r43[1] = 4;

        $r43[2] = 6;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k2", $r43);

        $r46 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r45 = newarray (java.lang.Object)[7];

        $r47 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r45[0] = $r47;

        $r48 = newarray (java.lang.Integer)[4];

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r48[0] = $r49;

        $r48[1] = null;

        $r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r48[2] = $r50;

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99);

        $r48[3] = $r51;

        $r45[1] = $r48;

        $r52 = newarray (java.lang.Integer)[3];

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r52[0] = $r53;

        $r52[1] = null;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r52[2] = $r54;

        $r55 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r52);

        $r45[2] = $r55;

        $r45[3] = $r40;

        $r56 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r45[4] = $r56;

        $r57 = newarray (int[])[3];

        $r58 = newarray (int)[3];

        $r58[0] = 1;

        $r58[1] = 2;

        $r58[2] = 3;

        $r57[0] = $r58;

        $r59 = newarray (int)[0];

        $r57[1] = $r59;

        $r60 = newarray (int)[2];

        $r60[0] = 4;

        $r60[1] = 5;

        $r57[2] = $r60;

        $r45[5] = $r57;

        $r61 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.44);

        $r45[6] = $r61;

        r111 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind,java.lang.Object[])>($r46, $r45);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r111, r2);

        $i8 = virtualinvoke r111.<org.apache.flink.types.Row: int hashCode()>();

        $l9 = (long) $i8;

        $i10 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>($l9, $l11);

        $r62 = new java.util.HashMap;

        specialinvoke $r62.<java.util.HashMap: void <init>()>();

        $r63 = newarray (byte)[3];

        $r63[0] = 1;

        $r63[1] = 2;

        $r63[2] = 2;

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k1", $r63);

        $r65 = newarray (byte)[3];

        $r65[0] = 3;

        $r65[1] = 4;

        $r65[2] = 6;

        interfaceinvoke $r62.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k2", $r65);

        $r68 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r67 = newarray (java.lang.Object)[7];

        $r69 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r67[0] = $r69;

        $r70 = newarray (java.lang.Integer)[3];

        $r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r70[0] = $r71;

        $r70[1] = null;

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r70[2] = $r72;

        $r67[1] = $r70;

        $r73 = newarray (java.lang.Integer)[3];

        $r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r73[0] = $r74;

        $r73[1] = null;

        $r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r73[2] = $r75;

        $r76 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r73);

        $r67[2] = $r76;

        $r67[3] = $r62;

        $r77 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r67[4] = $r77;

        $r78 = newarray (int[])[3];

        $r79 = newarray (int)[3];

        $r79[0] = 1;

        $r79[1] = 2;

        $r79[2] = 3;

        $r78[0] = $r79;

        $r80 = newarray (int)[0];

        $r78[1] = $r80;

        $r81 = newarray (int)[2];

        $r81[0] = 4;

        $r81[1] = 5;

        $r78[2] = $r81;

        $r67[5] = $r78;

        $r82 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.44);

        $r67[6] = $r82;

        r113 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind,java.lang.Object[])>($r68, $r67);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r113, r2);

        $i12 = virtualinvoke r113.<org.apache.flink.types.Row: int hashCode()>();

        $l13 = (long) $i12;

        $i14 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>($l13, $l15);

        $r83 = new java.util.HashMap;

        specialinvoke $r83.<java.util.HashMap: void <init>()>();

        $r84 = newarray (byte)[3];

        $r84[0] = 1;

        $r84[1] = 2;

        $r84[2] = 3;

        interfaceinvoke $r83.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k1", $r84);

        $r86 = newarray (byte)[3];

        $r86[0] = 3;

        $r86[1] = 4;

        $r86[2] = 6;

        interfaceinvoke $r83.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("k2", $r86);

        $r89 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r88 = newarray (java.lang.Object)[7];

        $r90 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r88[0] = $r90;

        $r91 = newarray (java.lang.Integer)[3];

        $r92 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r91[0] = $r92;

        $r91[1] = null;

        $r93 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r91[2] = $r93;

        $r88[1] = $r91;

        $r94 = newarray (java.lang.Integer)[3];

        $r95 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r94[0] = $r95;

        $r94[1] = null;

        $r96 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r94[2] = $r96;

        $r97 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r94);

        $r88[2] = $r97;

        $r88[3] = $r83;

        $r98 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r88[4] = $r98;

        $r99 = newarray (java.lang.Integer[])[3];

        $r100 = newarray (java.lang.Integer)[3];

        $r101 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r100[0] = $r101;

        $r102 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r100[1] = $r102;

        $r103 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r100[2] = $r103;

        $r99[0] = $r100;

        $r104 = newarray (java.lang.Integer)[0];

        $r99[1] = $r104;

        $r105 = newarray (java.lang.Integer)[2];

        $r106 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r105[0] = $r106;

        $r107 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r105[1] = $r107;

        $r99[2] = $r105;

        $r88[5] = $r99;

        $r108 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.44);

        $r88[6] = $r108;

        r115 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind,java.lang.Object[])>($r89, $r88);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r115, r2);

        $i16 = virtualinvoke r115.<org.apache.flink.types.Row: int hashCode()>();

        $l17 = (long) $i16;

        $i18 = virtualinvoke r2.<org.apache.flink.types.Row: int hashCode()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertNotEquals(long,long)>($l17, $l19);

        return;
    }

    public void testDeepEqualsCodeNamed()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1, r3;
        org.apache.flink.types.RowKind $r4, $r15;
        java.lang.Integer $r5, $r8, $r10, $r12, $r16;
        java.lang.Boolean $r6, $r17;
        java.util.LinkedHashMap $r7;
        java.lang.Object[] $r14;
        org.hamcrest.Matcher $r18, $r19, $r20, $r21, $r22, $r23;

        r0 := @this: org.apache.flink.types.RowTest;

        $r4 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", $r6);

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", $r10);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", $r12);

        $r15 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind DELETE>;

        $r14 = newarray (java.lang.Object)[3];

        r3 = staticinvoke <org.apache.flink.types.RowUtils: org.apache.flink.types.Row createRowWithNamedPositions(org.apache.flink.types.RowKind,java.lang.Object[],java.util.LinkedHashMap)>($r15, $r14, $r7);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r16);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", null);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r3.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", $r17);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r18);

        $r19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r19);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "Hello");

        $r20 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r3);

        $r21 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r21);

        $r22 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        $r23 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r22);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r23);

        return;
    }

    public void testDeepToString()
    {
        org.apache.flink.types.RowTest r0;
        org.apache.flink.types.Row r1;
        org.apache.flink.types.RowKind $r3;
        java.lang.Integer $r4, $r6, $r18, $r19, $r20, $r21;
        org.apache.flink.api.java.tuple.Tuple2 $r5;
        int[][] $r7;
        int[] $r8, $r9;
        java.lang.Boolean[][] $r10;
        java.lang.Boolean[] $r11, $r13;
        java.lang.Boolean $r12, $r14, $r15;
        java.util.HashMap $r16;
        java.lang.Integer[] $r17, $r23;
        java.lang.String $r26;
        org.hamcrest.Matcher $r27;

        r0 := @this: org.apache.flink.types.RowTest;

        $r3 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind UPDATE_BEFORE>;

        r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("a", $r4);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("b", "hello");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("c", null);

        $r5 = new org.apache.flink.api.java.tuple.Tuple2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r6, "hi");

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("d", $r5);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("e", "hello world");

        $r7 = newarray (int[])[3];

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        $r7[0] = $r8;

        $r7[1] = null;

        $r9 = newarray (int)[2];

        $r9[0] = 3;

        $r9[1] = 4;

        $r7[2] = $r9;

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("f", $r7);

        $r10 = newarray (java.lang.Boolean[])[3];

        $r11 = newarray (java.lang.Boolean)[1];

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11[0] = $r12;

        $r10[0] = $r11;

        $r10[1] = null;

        $r13 = newarray (java.lang.Boolean)[2];

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13[1] = $r15;

        $r10[2] = $r13;

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("g", $r10);

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        $r17 = newarray (java.lang.Integer)[4];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r17[0] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r17[1] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r17[2] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r17[3] = $r21;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", $r17);

        $r23 = newarray (java.lang.Integer)[0];

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("b", $r23);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("c", null);

        virtualinvoke r1.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>("h", $r16);

        $r26 = virtualinvoke r1.<org.apache.flink.types.Row: java.lang.String toString()>();

        $r27 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>("-U{a=1, b=hello, c=null, d=(2,hi), e=hello world, f=[[1], null, [3, 4]], g=[[true], null, [false, false]], h={a=[1, 2, 3, 4], b=[], c=null}}");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r26, $r27);

        return;
    }
}
