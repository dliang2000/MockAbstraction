class org.apache.flink.util.ResourceGuardTest$1 extends java.lang.Thread
{
    final org.apache.flink.util.ResourceGuard val$resourceGuard;
    final java.util.concurrent.atomic.AtomicBoolean val$checker;
    final org.apache.flink.util.ResourceGuardTest this$0;

    void <init>(org.apache.flink.util.ResourceGuardTest, org.apache.flink.util.ResourceGuard, java.util.concurrent.atomic.AtomicBoolean)
    {
        org.apache.flink.util.ResourceGuardTest$1 r0;
        org.apache.flink.util.ResourceGuardTest r1;
        org.apache.flink.util.ResourceGuard r2;
        java.util.concurrent.atomic.AtomicBoolean r3;

        r0 := @this: org.apache.flink.util.ResourceGuardTest$1;

        r1 := @parameter0: org.apache.flink.util.ResourceGuardTest;

        r2 := @parameter1: org.apache.flink.util.ResourceGuard;

        r3 := @parameter2: java.util.concurrent.atomic.AtomicBoolean;

        r0.<org.apache.flink.util.ResourceGuardTest$1: org.apache.flink.util.ResourceGuardTest this$0> = r1;

        r0.<org.apache.flink.util.ResourceGuardTest$1: org.apache.flink.util.ResourceGuard val$resourceGuard> = r2;

        r0.<org.apache.flink.util.ResourceGuardTest$1: java.util.concurrent.atomic.AtomicBoolean val$checker> = r3;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        return;
    }

    public void run()
    {
        org.apache.flink.util.ResourceGuardTest$1 r0;
        org.apache.flink.util.ResourceGuard $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: org.apache.flink.util.ResourceGuardTest$1;

        $r1 = r0.<org.apache.flink.util.ResourceGuardTest$1: org.apache.flink.util.ResourceGuard val$resourceGuard>;

        virtualinvoke $r1.<org.apache.flink.util.ResourceGuard: void close()>();

        $r2 = r0.<org.apache.flink.util.ResourceGuardTest$1: java.util.concurrent.atomic.AtomicBoolean val$checker>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;
    }
}
