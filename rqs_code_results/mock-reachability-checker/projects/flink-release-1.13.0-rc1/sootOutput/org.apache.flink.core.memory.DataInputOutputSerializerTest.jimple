public class org.apache.flink.core.memory.DataInputOutputSerializerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.memory.DataInputOutputSerializerTest r0;

        r0 := @this: org.apache.flink.core.memory.DataInputOutputSerializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testWrapAsByteBuffer()
    {
        org.apache.flink.core.memory.DataInputOutputSerializerTest r0;
        org.apache.flink.testutils.serialization.types.SerializationTestType r1;
        org.apache.flink.core.memory.MemorySegment r3;
        org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory $r4;
        org.apache.flink.core.memory.DataOutputSerializer $r5;
        int $i0, $i1, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26, $i27, $i29, $i31, $i33;
        long $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l28, $l30, $l32, $l34;
        java.io.IOException $r6;
        java.nio.ByteBuffer r7, r8, r9, r10;

        r0 := @this: org.apache.flink.core.memory.DataInputOutputSerializerTest;

        $r4 = <org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory: org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory INT>;

        r1 = staticinvoke <org.apache.flink.testutils.serialization.types.Util: org.apache.flink.testutils.serialization.types.SerializationTestType randomRecord(org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory)>($r4);

        $r5 = new org.apache.flink.core.memory.DataOutputSerializer;

        $i0 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>($i0);

        $i1 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>($i1);

     label1:
        r7 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        $i2 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = virtualinvoke r7.<java.nio.ByteBuffer: int limit()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: void write(org.apache.flink.core.memory.DataOutputView)>($r5);

        $i6 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke r7.<java.nio.ByteBuffer: int limit()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        r8 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        $i10 = virtualinvoke r8.<java.nio.ByteBuffer: int position()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        $l13 = (long) $i12;

        $i14 = virtualinvoke r8.<java.nio.ByteBuffer: int limit()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: void clear()>();

        $i16 = virtualinvoke r8.<java.nio.ByteBuffer: int position()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $i18 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        $l19 = (long) $i18;

        $i20 = virtualinvoke r8.<java.nio.ByteBuffer: int limit()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, $l21);

        r9 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        $i22 = virtualinvoke r9.<java.nio.ByteBuffer: int position()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l23);

        $i24 = virtualinvoke r9.<java.nio.ByteBuffer: int limit()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l25);

        interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: void write(org.apache.flink.core.memory.DataOutputView)>($r5);

        r10 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        $i26 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(0, r10, $i26);

        $i27 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        $l28 = (long) $i27;

        $i29 = virtualinvoke r10.<java.nio.ByteBuffer: int position()>();

        $l30 = (long) $i29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l28, $l30);

        $i31 = interfaceinvoke r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: int length()>();

        $l32 = (long) $i31;

        $i33 = virtualinvoke r10.<java.nio.ByteBuffer: int limit()>();

        $l34 = (long) $i33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l32, $l34);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.io.IOException: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test encountered an unexpected exception.");

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testRandomValuesWriteRead()
    {
        org.apache.flink.core.memory.DataInputOutputSerializerTest r0;
        java.util.ArrayDeque $r3;
        org.apache.flink.core.memory.DataOutputSerializer $r4;
        org.apache.flink.testutils.serialization.types.Util$MockRecords $r5;
        boolean $z0, $z1;
        org.apache.flink.core.memory.DataInputDeserializer $r6;
        java.nio.ByteBuffer $r7;
        java.lang.Object $r8, $r10, $r11;
        java.lang.Class $r9;
        java.io.IOException $r12;
        java.lang.Exception $r13;
        java.util.Iterator r14, r18;
        org.apache.flink.testutils.serialization.types.SerializationTestType r15, r19, r20;

        r0 := @this: org.apache.flink.core.memory.DataInputOutputSerializerTest;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        $r4 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r4.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(1);

        $r5 = staticinvoke <org.apache.flink.testutils.serialization.types.Util: org.apache.flink.testutils.serialization.types.Util$MockRecords randomRecords(int)>(100000);

        r14 = virtualinvoke $r5.<org.apache.flink.testutils.serialization.types.Util$MockRecords: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r11 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.apache.flink.testutils.serialization.types.SerializationTestType) $r11;

        virtualinvoke $r3.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r15);

     label02:
        interfaceinvoke r15.<org.apache.flink.testutils.serialization.types.SerializationTestType: void write(org.apache.flink.core.memory.DataOutputView)>($r4);

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.io.IOException: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test encountered an unexpected exception.");

     label05:
        goto label01;

     label06:
        $r6 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r7 = virtualinvoke $r4.<org.apache.flink.core.memory.DataOutputSerializer: java.nio.ByteBuffer wrapAsByteBuffer()>();

        specialinvoke $r6.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(java.nio.ByteBuffer)>($r7);

        r18 = virtualinvoke $r3.<java.util.ArrayDeque: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r8 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.flink.testutils.serialization.types.SerializationTestType) $r8;

     label08:
        $r9 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Object newInstance()>();

        r20 = (org.apache.flink.testutils.serialization.types.SerializationTestType) $r10;

        interfaceinvoke r20.<org.apache.flink.testutils.serialization.types.SerializationTestType: void read(org.apache.flink.core.memory.DataInputView)>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r19, r20);

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test encountered an unexpected exception.");

     label11:
        goto label07;

     label12:
        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Exception from label08 to label09 with label10;
    }
}
