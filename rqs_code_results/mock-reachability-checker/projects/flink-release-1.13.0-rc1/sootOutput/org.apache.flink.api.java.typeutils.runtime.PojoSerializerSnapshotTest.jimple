public class org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest extends java.lang.Object
{
    private static final java.util.Map FIELDS;
    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD;
    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD;
    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRestoreSerializerWithSameFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r3;
        java.lang.reflect.Field[] r4, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r5, $r19;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r6;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r7, $r8, $r9, $r13, $r15, $r17;
        java.util.List $r10;
        java.lang.Class $r11;
        java.lang.reflect.Field $r14, $r16, $r18;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r20;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r21;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r22;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r6 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r6[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r10);

        r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r11, class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializer;");

        r3 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r2;

        r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        $r12 = newarray (java.lang.reflect.Field)[3];

        $r13 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r14 = $r13.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        $r12[0] = $r14;

        $r15 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r16 = $r15.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        $r12[1] = $r16;

        $r17 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r18 = $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        $r12[2] = $r18;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r12, r4);

        r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        $r19 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r20 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r19[0] = $r20;

        $r21 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r19[1] = $r21;

        $r22 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r19[2] = $r22;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r19, r5);

        return;
    }

    public void testRestoreSerializerWithRemovedFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r3;
        java.lang.reflect.Field[] r4, $r14;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r5, $r17;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r6;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r7, $r8, $r9, $r10, $r11, $r15;
        java.util.List $r12;
        java.lang.Class $r13;
        java.lang.reflect.Field $r16;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r18;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r19;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r20;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r6 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)>($r7);

        $r6[0] = $r8;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r6[1] = $r9;

        $r10 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)>($r10);

        $r6[2] = $r11;

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r12);

        r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r13 != class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializer;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r2;

        r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        $r14 = newarray (java.lang.reflect.Field)[3];

        $r14[0] = null;

        $r15 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r16 = $r15.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        $r14[1] = $r16;

        $r14[2] = null;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r14, r4);

        r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        $r17 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r18 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r17[0] = $r18;

        $r19 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r17[1] = $r19;

        $r20 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r17[2] = $r20;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r17, r5);

        return;
    }

    public void testRestoreSerializerWithNewFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r3;
        java.lang.reflect.Field[] r4, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r5, $r12;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r6, $r10;
        java.util.List $r7;
        java.lang.Class $r8;
        java.lang.reflect.Field $r11;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r6);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r7);

        r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r8 != class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializer;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r2;

        r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        $r9 = newarray (java.lang.reflect.Field)[1];

        $r10 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r11 = $r10.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        $r9[0] = $r11;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r9, r4);

        r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        $r12 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r13 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r12[0] = $r13;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r12, r5);

        return;
    }

    public void testResolveSchemaCompatibilityWithSameFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r4, $r9;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r5, $r6, $r7, $r10, $r11, $r12;
        java.util.List $r8, $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r4[1] = $r6;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r4[2] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r8);

        $r9 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r10 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r9[2] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r13);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithRemovedFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r4;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r5, $r6, $r7, $r8, $r9, $r11;
        java.util.List $r10, $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)>($r5);

        $r4[0] = $r6;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r4[1] = $r7;

        $r8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)>($r8);

        $r4[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r10);

        $r11 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r11);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r12);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithNewFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r4, $r7, $r8, $r9;
        java.util.List $r5, $r10;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r5);

        $r6 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r6[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r10);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithNewAndRemovedFields()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r4, $r5, $r8, $r9;
        java.util.List $r6, $r10;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r7;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)>($r4);

        $r6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r5);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r6);

        $r7 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[2];

        $r8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r7[0] = $r8;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r7[1] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r10);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithIncompatibleFieldSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r4, $r11;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r5, $r6, $r8, $r9, $r12, $r14, $r15, $r16;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r7;
        java.util.List $r10, $r17;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r7 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer()>();

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializerSnapshot(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r6, $r7);

        $r4[1] = $r8;

        $r9 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r4[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r10);

        $r11 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r12 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r11[0] = $r12;

        $r14 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r13 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r13.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializer)>($r14, $r13);

        $r11[1] = $r15;

        $r16 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r11[2] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r17);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithCompatibleAfterMigrationFieldSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r4, $r11;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r5, $r6, $r7, $r9, $r12, $r13, $r15, $r16;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r8;
        java.util.List $r10, $r17;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r14;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r5 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r4[1] = $r6;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r8 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration()>();

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializerSnapshot(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r7, $r8);

        $r4[2] = $r9;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r10);

        $r11 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r12 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r11[0] = $r12;

        $r13 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r11[1] = $r13;

        $r15 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r14 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r14.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializer)>($r15, $r14);

        $r11[2] = $r16;

        $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r17);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testResolveSchemaCompatibilityWithCompatibleWithReconfigurationFieldSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2, r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.TypeSerializer r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r6, $r22;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField[] $r7, $r14;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r8, $r10, $r11, $r12, $r16, $r17, $r18, $r19;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r9;
        java.util.List $r13, $r20;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r15, $r23;
        boolean $z0;
        java.lang.Class $r21;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r24;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r25;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest;

        $r7 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r8 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r9 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration()>();

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializerSnapshot(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r8, $r9);

        $r7[0] = $r10;

        $r11 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r7[1] = $r11;

        $r12 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r7[2] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)>($r13);

        $r14 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)[3];

        $r16 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD>;

        $r15 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r15.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField,org.apache.flink.api.common.typeutils.TypeSerializer)>($r16, $r15);

        $r14[0] = $r17;

        $r18 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD>;

        $r14[1] = $r18;

        $r19 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD>;

        $r14[2] = $r19;

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)>($r20);

        r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r2);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r4 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $r21 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r21, class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializer;");

        r5 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r4;

        r6 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        $r22 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r23 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r23.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r22[0] = $r23;

        $r24 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r22[1] = $r24;

        $r25 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        $r22[2] = $r25;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r22, r6);

        return;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot buildTestSnapshot(java.util.List)
    {
        java.util.List r0;
        int i0;
        java.util.ArrayList $r3, $r4;
        java.util.function.Consumer $r5;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot $r6;
        java.lang.reflect.Field[] $r7, $r10;
        java.lang.Object[] $r8, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r9, $r13;
        java.util.LinkedHashMap $r12, $r14;

        r0 := @parameter0: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$lambda_buildTestSnapshot_0__293: java.util.function.Consumer bootstrap$(java.util.ArrayList,java.util.ArrayList)>($r3, $r4);

        interfaceinvoke r0.<java.util.List: void forEach(java.util.function.Consumer)>($r5);

        $r6 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        $r7 = newarray (java.lang.reflect.Field)[i0];

        $r8 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r10 = (java.lang.reflect.Field[]) $r8;

        $r9 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        $r11 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r11;

        $r12 = new java.util.LinkedHashMap;

        specialinvoke $r12.<java.util.LinkedHashMap: void <init>()>();

        $r14 = new java.util.LinkedHashMap;

        specialinvoke $r14.<java.util.LinkedHashMap: void <init>()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],java.util.LinkedHashMap,java.util.Map)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest$TestPojo;", $r10, $r13, $r12, $r14);

        return $r6;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializer buildTestNewPojoSerializer(java.util.List)
    {
        java.util.List r0;
        int i0;
        java.util.ArrayList $r3, $r4;
        java.util.function.Consumer $r5;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r7, $r10;
        java.lang.Object[] $r8, $r11;
        java.lang.reflect.Field[] $r9, $r13;
        org.apache.flink.api.common.ExecutionConfig $r12;

        r0 := @parameter0: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$lambda_buildTestNewPojoSerializer_1__294: java.util.function.Consumer bootstrap$(java.util.ArrayList,java.util.ArrayList)>($r3, $r4);

        interfaceinvoke r0.<java.util.List: void forEach(java.util.function.Consumer)>($r5);

        $r6 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r7 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        $r8 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r10 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r8;

        $r9 = newarray (java.lang.reflect.Field)[i0];

        $r11 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r13 = (java.lang.reflect.Field[]) $r11;

        $r12 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[],java.lang.reflect.Field[],org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest$TestPojo;", $r10, $r13, $r12);

        return $r6;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockRemovedField(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField r0, r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField shallowCopy()>();

        r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field> = null;

        return r1;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField r0, r2;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField shallowCopy()>();

        r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r1;

        return r2;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField mockFieldSerializerSnapshot(org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField r0, r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField shallowCopy()>();

        r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot> = r1;

        return r2;
    }

    public static void lambda$buildTestNewPojoSerializer$1(java.util.ArrayList, java.util.ArrayList, org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)
    {
        java.util.ArrayList r0, r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField r2;
        java.lang.reflect.Field $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    public static void lambda$buildTestSnapshot$0(java.util.ArrayList, java.util.ArrayList, org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField)
    {
        java.util.ArrayList r0, r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField r2;
        java.lang.reflect.Field $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r4;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: java.lang.reflect.Field field>;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot serializerSnapshot>;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1, $r5, $r9;
        java.util.Map $r2, $r6, $r10;
        java.lang.reflect.Field $r3, $r7, $r11;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField $r13, $r15, $r17;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r14;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r16;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r18;
        java.lang.Exception $r19, $r21;
        java.lang.RuntimeException $r20, $r22;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(3);

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: java.util.Map FIELDS> = $r0;

     label1:
        $r2 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: java.util.Map FIELDS>;

        $r1 = class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest$TestPojo;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("id");

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", $r3);

        $r6 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: java.util.Map FIELDS>;

        $r5 = class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest$TestPojo;";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("name");

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", $r7);

        $r10 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: java.util.Map FIELDS>;

        $r9 = class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerSnapshotTest$TestPojo;";

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("height");

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("height", $r11);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

     label4:
        $r13 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        $r14 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("id", $r14);

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField ID_FIELD> = $r13;

        $r15 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        $r16 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("name", $r16);

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField NAME_FIELD> = $r15;

        $r17 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField;

        $r18 = <org.apache.flink.api.common.typeutils.base.DoubleSerializer: org.apache.flink.api.common.typeutils.base.DoubleSerializer INSTANCE>;

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("height", $r18);

        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotTest$TestPojoField HEIGHT_FIELD> = $r17;

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }
}
