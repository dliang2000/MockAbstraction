public class org.apache.flink.configuration.FilesystemSchemeConfigTest extends org.apache.flink.util.TestLogger
{
    public final org.junit.rules.TemporaryFolder tempFolder;

    public void <init>()
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.configuration.FilesystemSchemeConfigTest: org.junit.rules.TemporaryFolder tempFolder> = $r1;

        return;
    }

    public void clearFsSettings() throws java.io.IOException
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        org.apache.flink.configuration.Configuration $r1;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        $r1 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r1.<org.apache.flink.configuration.Configuration: void <init>()>();

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r1);

        return;
    }

    public void testDefaultsToLocal() throws java.lang.Exception
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        org.apache.flink.core.fs.FileSystem r2;
        java.net.URI $r3, $r6, $r9;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        java.lang.String $r7, $r8, $r10;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        $r3 = new java.net.URI;

        $r4 = r0.<org.apache.flink.configuration.FilesystemSchemeConfigTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.net.URI toURI()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke $r3.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r8);

        r2 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r3);

        $r9 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r10);

        return;
    }

    public void testExplicitlySetToLocal() throws java.lang.Exception
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        org.apache.flink.core.fs.FileSystem r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5;
        java.net.URI $r6, $r8, $r11, $r14;
        java.lang.String $r7, $r12, $r13, $r15;
        org.junit.rules.TemporaryFolder $r9;
        java.io.File $r10;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME>;

        $r6 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI getLocalFsURI()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>($r5, $r7);

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r4);

        $r8 = new java.net.URI;

        $r9 = r0.<org.apache.flink.configuration.FilesystemSchemeConfigTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r10 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.net.URI toURI()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r8.<java.net.URI: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r8.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r13);

        r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r8);

        $r14 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r15 = virtualinvoke $r14.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r15);

        return;
    }

    public void testExplicitlySetToOther() throws java.lang.Exception
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5;
        java.net.URI $r6, $r9;
        org.junit.rules.TemporaryFolder $r7;
        java.io.File $r8;
        java.lang.String $r10, $r11, $r14;
        org.apache.flink.core.fs.UnsupportedFileSystemSchemeException $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME>;

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>($r5, "otherFS://localhost:1234/");

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r4);

        $r6 = new java.net.URI;

        $r7 = r0.<org.apache.flink.configuration.FilesystemSchemeConfigTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r6.<java.net.URI: void <init>(java.lang.String)>($r10);

        $r11 = virtualinvoke $r6.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

     label1:
        staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should have failed with an exception");

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.UnsupportedFileSystemSchemeException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean contains(java.lang.CharSequence)>("otherFS");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label4:
        return;

        catch org.apache.flink.core.fs.UnsupportedFileSystemSchemeException from label1 to label2 with label3;
    }

    public void testExplicitlyPathTakesPrecedence() throws java.lang.Exception
    {
        org.apache.flink.configuration.FilesystemSchemeConfigTest r0;
        java.net.URI r2, $r9;
        org.apache.flink.core.fs.FileSystem r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5;
        org.junit.rules.TemporaryFolder $r6;
        java.io.File $r7;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.flink.configuration.FilesystemSchemeConfigTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME>;

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>($r5, "otherFS://localhost:1234/");

        staticinvoke <org.apache.flink.core.fs.FileSystem: void initialize(org.apache.flink.configuration.Configuration)>($r4);

        $r6 = r0.<org.apache.flink.configuration.FilesystemSchemeConfigTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r7 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        r2 = virtualinvoke $r7.<java.io.File: java.net.URI toURI()>();

        $r8 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>(r2);

        $r9 = virtualinvoke r3.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r10);

        return;
    }
}
