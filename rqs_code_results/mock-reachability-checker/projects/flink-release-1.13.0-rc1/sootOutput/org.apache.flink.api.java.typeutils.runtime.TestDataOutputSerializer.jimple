public final class org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer extends java.lang.Object implements org.apache.flink.core.memory.DataOutputView
{
    private byte[] buffer;
    private int position;
    private java.nio.ByteBuffer wrapper;
    private final int maxSize;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long BASE_OFFSET;
    private static final boolean LITTLE_ENDIAN;

    public void <init>(int)
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void <init>(int,int)>(i0, 2147483647);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2, $r3;
        java.nio.ByteBuffer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 1 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        $r2 = newarray (byte)[i0];

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer> = $r2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: java.nio.ByteBuffer wrapper> = $r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int maxSize> = i1;

        return;
    }

    public java.nio.ByteBuffer wrapAsByteBuffer()
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        java.nio.ByteBuffer $r1, $r3, $r5;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: java.nio.ByteBuffer wrapper>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: java.nio.ByteBuffer wrapper>;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i0);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: java.nio.ByteBuffer wrapper>;

        return $r5;
    }

    public byte[] copyByteBuffer()
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        byte[] r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public void clear()
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = 0;

        return;
    }

    public int length()
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2, $r4;
        byte[] $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        $r1 = newarray (java.lang.Object)[2];

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[pos=%d cap=%d]", $r1);

        return $r5;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r1, $r2;
        byte $b6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(1);

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i4;

        $i5 = i0 & 255;

        $b6 = (byte) $i5;

        $r2[$i3] = $b6;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        byte[] r1, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label2;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $i6 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i4 = lengthof $r3;

        $i5 = $i4 - i1;

        if $i6 <= $i5 goto label3;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(i1);

     label3:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i7, i1);

        $i8 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i9 = $i8 + i1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i9;

        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        boolean z0;
        byte $b0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void write(int)>($b0);

        return;
    }

    public void writeByte(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void write(int)>(i0);

        return;
    }

    public void writeBytes(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7;
        byte[] $r2;
        char $c6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r2;

        $i2 = $i1 - i0;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(i0);

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void writeByte(int)>($c6);

        i7 = i7 + 1;

        goto label2;

     label3:
        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i5 = $i4 + i0;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i5;

        return;
    }

    public void writeChar(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        byte[] $r1, $r2, $r3;
        byte $b7, $b10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(2);

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i5;

        $i6 = i0 >> 8;

        $b7 = (byte) $i6;

        $r2[$i4] = $b7;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i8 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i9;

        $b10 = (byte) i0;

        $r3[$i8] = $b10;

        return;
    }

    public void writeChars(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i6, i7;
        byte[] $r2;
        char $c5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i2 = lengthof $r2;

        $i1 = 2 * i0;

        $i3 = $i2 - $i1;

        if $i4 < $i3 goto label1;

        $i6 = 2 * i0;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>($i6);

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void writeChar(int)>($c5);

        i7 = i7 + 1;

        goto label2;

     label3:
        return;
    }

    public void writeDouble(double) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        double d0;
        long $l0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void writeLong(long)>($l0);

        return;
    }

    public void writeFloat(float) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        float f0;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void writeInt(int)>($i0);

        return;
    }

    public void writeInt(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i7, $i8, i9;
        boolean $z0;
        long $l4, $l5, $l6;
        sun.misc.Unsafe $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i9 := @parameter0: int;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 3;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(4);

     label1:
        $z0 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label2;

        i9 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i9);

     label2:
        $r3 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $l5 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: long BASE_OFFSET>;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        virtualinvoke $r3.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>($r2, $l6, i9);

        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i8 = $i7 + 4;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i8;

        return;
    }

    public void writeLong(long) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i7, $i8;
        boolean $z0;
        long $l4, $l5, $l6, l9;
        sun.misc.Unsafe $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        l9 := @parameter0: long;

        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 7;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(8);

     label1:
        $z0 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label2;

        l9 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l9);

     label2:
        $r3 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $l5 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: long BASE_OFFSET>;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        virtualinvoke $r3.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>($r2, $l6, l9);

        $i7 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i8 = $i7 + 8;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i8;

        return;
    }

    public void writeShort(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12;
        byte[] $r1, $r2, $r3;
        byte $b8, $b13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>(2);

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i5;

        $i6 = i0 >>> 8;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        $r2[$i4] = $b8;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i9 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i10 = $i9 + 1;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i10;

        $i11 = i0 >>> 0;

        $i12 = $i11 & 255;

        $b13 = (byte) $i12;

        $r3[$i9] = $b13;

        return;
    }

    public void writeUTF(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        java.lang.String r1, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i31, $i33, $i35, i36, i37, i39, i40, i41, i42, i45, i46, i47;
        byte[] $r2, r8;
        byte $b7, $b10, $b14, $b18, $b22, $b26, $b30, $b32, $b34;
        char $c11, $c12, $c13, $c15, $c16, $c17, $c19, $c20, $c21, $c23, $c24, $c25, $c27, $c28, $c29, c38, c43, c44;
        java.io.UTFDataFormatException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i36 = 0;

        i37 = 0;

     label01:
        if i37 >= i0 goto label05;

        c38 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i37);

        if c38 < 1 goto label02;

        if c38 > 127 goto label02;

        i36 = i36 + 1;

        goto label04;

     label02:
        if c38 <= 2047 goto label03;

        i36 = i36 + 3;

        goto label04;

     label03:
        i36 = i36 + 2;

     label04:
        i37 = i37 + 1;

        goto label01;

     label05:
        if i36 <= 65535 goto label06;

        $r3 = new java.io.UTFDataFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoded string is too long: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i36);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label06:
        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r2;

        $i2 = $i1 - i36;

        $i3 = $i2 - 2;

        if $i4 <= $i3 goto label07;

        $i35 = i36 + 2;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void resize(int)>($i35);

     label07:
        r8 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        i39 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        i40 = i39 + 1;

        $i5 = i36 >>> 8;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        r8[i39] = $b7;

        i41 = i40 + 1;

        $i8 = i36 >>> 0;

        $i9 = $i8 & 255;

        $b10 = (byte) $i9;

        r8[i40] = $b10;

        i42 = 0;

     label08:
        if i42 >= i0 goto label10;

        c43 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c43 < 1 goto label10;

        if c43 <= 127 goto label09;

        goto label10;

     label09:
        $i33 = i41;

        i41 = i41 + 1;

        $b34 = (byte) c43;

        r8[$i33] = $b34;

        i42 = i42 + 1;

        goto label08;

     label10:
        if i42 >= i0 goto label14;

        c44 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c44 < 1 goto label11;

        if c44 > 127 goto label11;

        $i31 = i41;

        i41 = i41 + 1;

        $b32 = (byte) c44;

        r8[$i31] = $b32;

        goto label13;

     label11:
        if c44 <= 2047 goto label12;

        i45 = i41 + 1;

        $c19 = c44 >> 12;

        $c20 = $c19 & 15;

        $c21 = 224 | $c20;

        $b22 = (byte) $c21;

        r8[i41] = $b22;

        i46 = i45 + 1;

        $c23 = c44 >> 6;

        $c24 = $c23 & 63;

        $c25 = 128 | $c24;

        $b26 = (byte) $c25;

        r8[i45] = $b26;

        i41 = i46 + 1;

        $c27 = c44 >> 0;

        $c28 = $c27 & 63;

        $c29 = 128 | $c28;

        $b30 = (byte) $c29;

        r8[i46] = $b30;

        goto label13;

     label12:
        i47 = i41 + 1;

        $c11 = c44 >> 6;

        $c12 = $c11 & 31;

        $c13 = 192 | $c12;

        $b14 = (byte) $c13;

        r8[i41] = $b14;

        i41 = i47 + 1;

        $c15 = c44 >> 0;

        $c16 = $c15 & 63;

        $c17 = 128 | $c16;

        $b18 = (byte) $c17;

        r8[i47] = $b18;

     label13:
        i42 = i42 + 1;

        goto label10;

     label14:
        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = i41;

        return;
    }

    private void resize(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        byte[] r1, $r2, $r3, $r4, $r5, $r7;
        java.nio.ByteBuffer $r6;
        java.io.EOFException $r8;
        java.lang.NegativeArraySizeException $r9;
        java.io.IOException $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i1 = lengthof $r2;

        $i4 = $i1 * 2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i2 = lengthof $r3;

        $i3 = $i2 + i0;

        i10 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        $i5 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int maxSize>;

        if i10 <= $i5 goto label3;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i7 = lengthof $r7;

        $i9 = $i7 + i0;

        $i8 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int maxSize>;

        if $i9 <= $i8 goto label2;

        $r8 = new java.io.EOFException;

        specialinvoke $r8.<java.io.EOFException: void <init>(java.lang.String)>("Exceeded maximum capacity");

        throw $r8;

     label2:
        i10 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int maxSize>;

     label3:
        r1 = newarray (byte)[i10];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i6 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i6);

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer> = r1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r5);

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: java.nio.ByteBuffer wrapper> = $r6;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Serialization failed because the record length would exceed 2GB (max addressable array size in Java).");

        throw $r10;

     label6:
        return;

        catch java.lang.NegativeArraySizeException from label1 to label4 with label5;
    }

    public void skipBytesToWrite(int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r1;
        java.io.EOFException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i2 = lengthof $r1;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i3 = $i2 - $i1;

        if $i3 >= i0 goto label1;

        $r2 = new java.io.EOFException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not skip ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i5 = $i4 + i0;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i5;

        return;
    }

    public void write(org.apache.flink.core.memory.DataInputView, int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2, $r3;
        java.io.EOFException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i2 = lengthof $r2;

        $i1 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i3 = $i2 - $i1;

        if $i3 >= i0 goto label1;

        $r4 = new java.io.EOFException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes. Buffer overflow.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.EOFException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] buffer>;

        $i4 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[],int,int)>($r3, $i4, i0);

        $i5 = r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position>;

        $i6 = $i5 + i0;

        r0.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: int position> = $i6;

        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;
        int $i0;
        long $l1;
        java.nio.ByteOrder $r2, $r3;
        boolean $z0;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: sun.misc.Unsafe UNSAFE> = $r0;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: sun.misc.Unsafe UNSAFE>;

        $i0 = virtualinvoke $r1.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        $l1 = (long) $i0;

        <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: long BASE_OFFSET> = $l1;

        $r3 = <org.apache.flink.core.memory.MemoryUtils: java.nio.ByteOrder NATIVE_BYTE_ORDER>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r3 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: boolean LITTLE_ENDIAN> = $z0;

        return;
    }
}
