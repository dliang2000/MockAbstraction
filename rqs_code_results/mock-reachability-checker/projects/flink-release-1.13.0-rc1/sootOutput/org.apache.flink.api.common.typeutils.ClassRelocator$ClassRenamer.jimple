final class org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer extends java.lang.Object
{
    private final org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry renaming;

    void <init>(org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry)
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer r0;
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r1;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry renaming> = r1;

        return;
    }

    java.util.Map remap()
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer r0;
        java.util.Map r1, $r14;
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry $r2, $r3, $r8;
        java.util.Set $r4;
        java.util.stream.Stream $r5, $r7;
        java.util.function.Predicate $r6;
        java.util.function.Function $r10, $r11;
        java.util.stream.Collector $r12;
        java.lang.Object $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry renaming>;

        r1 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map access$100(org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry)>($r2);

        $r3 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry renaming>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Set getDefinedClassesUnderRoot()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.stream.Stream stream()>();

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer$lambda_remap_0__212: java.util.function.Predicate bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6);

        $r8 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry renaming>;

        virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer$newNameFor__213: java.util.function.Function bootstrap$(org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry)>($r8);

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer$lambda_remap_1__214: java.util.function.Function bootstrap$(java.util.Map)>(r1);

        $r12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r10, $r11);

        $r13 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r12);

        $r14 = (java.util.Map) $r13;

        return $r14;
    }

    private static org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter remap(java.util.Map, org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader)
    {
        java.util.Map r0;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter $r4;
        org.apache.flink.shaded.asm7.org.objectweb.asm.commons.ClassRemapper $r5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.commons.SimpleRemapper $r6;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader;

        $r4 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter;

        specialinvoke $r4.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter: void <init>(int)>(0);

        $r5 = new org.apache.flink.shaded.asm7.org.objectweb.asm.commons.ClassRemapper;

        $r6 = new org.apache.flink.shaded.asm7.org.objectweb.asm.commons.SimpleRemapper;

        specialinvoke $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.commons.SimpleRemapper: void <init>(java.util.Map)>(r0);

        specialinvoke $r5.<org.apache.flink.shaded.asm7.org.objectweb.asm.commons.ClassRemapper: void <init>(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassVisitor,org.apache.flink.shaded.asm7.org.objectweb.asm.commons.Remapper)>($r4, $r6);

        virtualinvoke r1.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: void accept(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassVisitor,int)>($r5, 8);

        return $r4;
    }

    private static org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader classReaderFor(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, $r5, $r6;
        java.io.InputStream r2;
        java.lang.StringBuilder $r4, $r7, $r8;
        java.lang.ClassLoader $r9;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader $r10;
        java.io.IOException $r11;
        java.lang.RuntimeException $r12;

        r0 := @parameter0: java.lang.Class;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = virtualinvoke $r9.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

     label1:
        $r10 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader;

        specialinvoke $r10.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>(r2);

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static byte[] lambda$remap$1(java.util.Map, java.lang.Class)
    {
        java.util.Map r0;
        java.lang.Class r1;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader r2;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter r3;
        byte[] $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.Class;

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader classReaderFor(java.lang.Class)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRenamer: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter remap(java.util.Map,org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader)>(r0, r2);

        $r4 = virtualinvoke r3.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassWriter: byte[] toByteArray()>();

        return $r4;
    }

    public static boolean lambda$remap$0(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
