public class org.apache.flink.api.connector.source.mocks.MockSplitEnumerator extends java.lang.Object implements org.apache.flink.api.connector.source.SplitEnumerator
{
    private final java.util.SortedSet unassignedSplits;
    private final org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext;
    private final java.util.List handledSourceEvent;
    private final java.util.List successfulCheckpoints;
    private volatile boolean started;
    private volatile boolean closed;

    public void <init>(int, org.apache.flink.api.connector.source.SplitEnumeratorContext)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        int i0, i1;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.util.HashSet $r2;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit $r3;
        java.util.SortedSet $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: void <init>(java.util.Set,org.apache.flink.api.connector.source.SplitEnumeratorContext)>($r2, r1);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        $r3 = new org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        specialinvoke $r3.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: void <init>(int)>(i1);

        interfaceinvoke $r4.<java.util.SortedSet: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(java.util.Set, org.apache.flink.api.connector.source.SplitEnumeratorContext)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.Set r1;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r2;
        java.util.TreeSet $r3;
        java.util.function.ToIntFunction $r4;
        java.util.Comparator $r5;
        java.util.SortedSet $r6;
        java.util.ArrayList $r7, $r8;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.TreeSet;

        $r4 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumerator$lambda_new_0__276: java.util.function.ToIntFunction bootstrap$()>();

        $r5 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r4);

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r5);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits> = $r3;

        $r6 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        interfaceinvoke $r6.<java.util.SortedSet: boolean addAll(java.util.Collection)>(r1);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext> = r2;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List handledSourceEvent> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List successfulCheckpoints> = $r8;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean started> = 0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean closed> = 0;

        return;
    }

    public void start()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean started> = 1;

        return;
    }

    public void handleSplitRequest(int, java.lang.String)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void handleSourceEvent(int, org.apache.flink.api.connector.source.SourceEvent)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        int i0;
        org.apache.flink.api.connector.source.SourceEvent r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.connector.source.SourceEvent;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List handledSourceEvent>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addSplitsBack(java.util.List, int)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.List r1;
        int i0;
        java.util.SortedSet $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void addReader(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r2;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r3;
        java.util.ArrayList $r4;
        java.util.SortedSet $r5, $r10;
        boolean $z0;
        org.apache.flink.api.connector.source.SplitsAssignment $r6;
        org.apache.flink.api.connector.source.SplitEnumeratorContext $r7, $r13;
        java.lang.Integer $r8;
        java.util.Map $r9;
        java.lang.Object $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        i0 := @parameter0: int;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        r2 = interfaceinvoke $r5.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) $r11;

        $r12 = virtualinvoke r3.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.lang.String splitId()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        $r13 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext>;

        $i2 = interfaceinvoke $r13.<org.apache.flink.api.connector.source.SplitEnumeratorContext: int currentParallelism()>();

        $i3 = $i1 % $i2;

        if $i3 != i0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        $r7 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext>;

        $r6 = new org.apache.flink.api.connector.source.SplitsAssignment;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r8, $r4);

        specialinvoke $r6.<org.apache.flink.api.connector.source.SplitsAssignment: void <init>(java.util.Map)>($r9);

        interfaceinvoke $r7.<org.apache.flink.api.connector.source.SplitEnumeratorContext: void assignSplits(org.apache.flink.api.connector.source.SplitsAssignment)>($r6);

        $r10 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        interfaceinvoke $r10.<java.util.SortedSet: boolean removeAll(java.util.Collection)>($r4);

        return;
    }

    public java.util.Set snapshotState()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.SortedSet $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        return $r1;
    }

    public void notifyCheckpointComplete(long)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        long l0;
        java.util.List $r1;
        java.lang.Long $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List successfulCheckpoints>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean closed> = 1;

        return;
    }

    public void addNewSplits(java.util.List)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.List r1;
        java.util.SortedSet $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean addAll(java.util.Collection)>(r1);

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: void assignAllSplits()>();

        return;
    }

    public boolean started()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $z0 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean started>;

        return $z0;
    }

    public boolean closed()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $z0 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: boolean closed>;

        return $z0;
    }

    public java.util.Set getUnassignedSplits()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.SortedSet $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        return $r1;
    }

    public java.util.List getHandledSourceEvent()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List handledSourceEvent>;

        return $r1;
    }

    public java.util.List getSuccessfulCheckpoints()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.List successfulCheckpoints>;

        return $r1;
    }

    private void assignAllSplits()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.HashMap $r2;
        java.util.SortedSet $r3;
        java.util.function.Consumer $r4, $r8;
        org.apache.flink.api.connector.source.SplitsAssignment $r5;
        org.apache.flink.api.connector.source.SplitEnumeratorContext $r6;
        java.util.Collection $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        $r4 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumerator$lambda_assignAllSplits_2__277: java.util.function.Consumer bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumerator,java.util.Map)>(r0, $r2);

        interfaceinvoke $r3.<java.util.SortedSet: void forEach(java.util.function.Consumer)>($r4);

        $r6 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext>;

        $r5 = new org.apache.flink.api.connector.source.SplitsAssignment;

        specialinvoke $r5.<org.apache.flink.api.connector.source.SplitsAssignment: void <init>(java.util.Map)>($r2);

        interfaceinvoke $r6.<org.apache.flink.api.connector.source.SplitEnumeratorContext: void assignSplits(org.apache.flink.api.connector.source.SplitsAssignment)>($r5);

        $r7 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r8 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumerator$lambda_assignAllSplits_3__278: java.util.function.Consumer bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumerator)>(r0);

        interfaceinvoke $r7.<java.util.Collection: void forEach(java.util.function.Consumer)>($r8);

        return;
    }

    public volatile java.lang.Object snapshotState() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.Set $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.Set snapshotState()>();

        return $r1;
    }

    public void lambda$assignAllSplits$3(java.util.List)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.List r1;
        java.util.SortedSet $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: java.util.SortedSet unassignedSplits>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean removeAll(java.util.Collection)>(r1);

        return;
    }

    public void lambda$assignAllSplits$2(java.util.Map, org.apache.flink.api.connector.source.mocks.MockSourceSplit)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator r0;
        java.util.Map r1, $r6;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r2;
        int i0, $i1, $i2;
        java.lang.String $r3;
        org.apache.flink.api.connector.source.SplitEnumeratorContext $r4, $r5;
        java.lang.Integer $r7, $r8;
        boolean $z0;
        java.util.function.Function $r9;
        java.lang.Object $r10;
        java.util.List $r11;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $r3 = virtualinvoke r2.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.lang.String splitId()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext>;

        $i2 = interfaceinvoke $r4.<org.apache.flink.api.connector.source.SplitEnumeratorContext: int currentParallelism()>();

        i0 = $i1 % $i2;

        $r5 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: org.apache.flink.api.connector.source.SplitEnumeratorContext enumContext>;

        $r6 = interfaceinvoke $r5.<org.apache.flink.api.connector.source.SplitEnumeratorContext: java.util.Map registeredReaders()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumerator$lambda_null_1__282: java.util.function.Function bootstrap$()>();

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r8, $r9);

        $r11 = (java.util.List) $r10;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r2);

     label1:
        return;
    }

    public static java.util.List lambda$null$1(java.lang.Integer)
    {
        java.lang.Integer r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Integer;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public static int lambda$new$0(org.apache.flink.api.connector.source.mocks.MockSourceSplit)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        java.lang.String $r1;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $r1 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.lang.String splitId()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i0;
    }
}
