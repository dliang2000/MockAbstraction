public class org.apache.flink.configuration.ConfigUtilsTest extends java.lang.Object
{
    private static final org.apache.flink.configuration.ConfigOption TEST_OPTION;
    private static final java.lang.Integer[] intArray;
    private static final java.util.List intList;

    public void <init>()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void collectionIsCorrectlyPutAndFetched()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.util.List r2, $r5, $r9;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.configuration.ConfigOption $r4, $r7;
        java.util.function.Function $r6;
        org.apache.flink.util.function.FunctionWithException $r8;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: java.util.List intList>;

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__342: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeCollectionToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.util.Collection,java.util.function.Function)>($r3, $r4, $r5, $r6);

        $r7 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__343: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r2 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r3, $r7, $r8);

        $r9 = <org.apache.flink.configuration.ConfigUtilsTest: java.util.List intList>;

        $r10 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r10);

        return;
    }

    public void arrayIsCorrectlyPutAndFetched()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.util.List r2, $r9;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.configuration.ConfigOption $r4, $r7;
        java.lang.Integer[] $r5;
        java.util.function.Function $r6;
        org.apache.flink.util.function.FunctionWithException $r8;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: java.lang.Integer[] intArray>;

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__344: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeArrayToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.lang.Object[],java.util.function.Function)>($r3, $r4, $r5, $r6);

        $r7 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__345: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r2 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r3, $r7, $r8);

        $r9 = <org.apache.flink.configuration.ConfigUtilsTest: java.util.List intList>;

        $r10 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r10);

        return;
    }

    public void nullCollectionPutsNothingInConfig()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.lang.Object r2;
        java.util.List r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5, $r10, $r13;
        java.util.function.Function $r6;
        java.util.Set $r7;
        org.hamcrest.Matcher $r8, $r9, $r11, $r12, $r15, $r16;
        org.apache.flink.util.function.FunctionWithException $r14;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__346: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeCollectionToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.util.Collection,java.util.function.Function)>($r4, $r5, null, $r6);

        $r7 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r9 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $r10 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        r2 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r10);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        $r12 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r12);

        $r13 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__349: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r4, $r13, $r14);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r16 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r16);

        return;
    }

    public void nullArrayPutsNothingInConfig()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.lang.Object r2;
        java.util.List r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5, $r10, $r13;
        java.util.function.Function $r6;
        java.util.Set $r7;
        org.hamcrest.Matcher $r8, $r9, $r11, $r12, $r15, $r16;
        org.apache.flink.util.function.FunctionWithException $r14;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__347: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeArrayToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.lang.Object[],java.util.function.Function)>($r4, $r5, null, $r6);

        $r7 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r9 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $r10 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        r2 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r10);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        $r12 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r12);

        $r13 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r14 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__348: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r4, $r13, $r14);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r16 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r16);

        return;
    }

    public void emptyCollectionPutsEmptyValueInConfig()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.util.List r2, r3, $r6;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5, $r8, $r12;
        java.util.function.Function $r7;
        java.lang.Object $r9;
        org.hamcrest.Matcher $r10, $r11, $r14, $r15;
        org.apache.flink.util.function.FunctionWithException $r13;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__350: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeCollectionToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.util.Collection,java.util.function.Function)>($r4, $r5, $r6, $r7);

        $r8 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r9 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r8);

        r2 = (java.util.List) $r9;

        $r10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r11 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r11);

        $r12 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__351: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r4, $r12, $r13);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r15 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r15);

        return;
    }

    public void emptyArrayPutsEmptyValueInConfig()
    {
        org.apache.flink.configuration.ConfigUtilsTest r0;
        java.util.List r2, r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ConfigOption $r5, $r8, $r12;
        java.lang.Integer[] $r6;
        java.util.function.Function $r7;
        java.lang.Object $r9;
        org.hamcrest.Matcher $r10, $r11, $r14, $r15;
        org.apache.flink.util.function.FunctionWithException $r13;

        r0 := @this: org.apache.flink.configuration.ConfigUtilsTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r6 = newarray (java.lang.Integer)[5];

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$toString__352: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.configuration.ConfigUtils: void encodeArrayToConfig(org.apache.flink.configuration.WritableConfig,org.apache.flink.configuration.ConfigOption,java.lang.Object[],java.util.function.Function)>($r4, $r5, $r6, $r7);

        $r8 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r9 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r8);

        r2 = (java.util.List) $r9;

        $r10 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r11 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r11);

        $r12 = <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION>;

        $r13 = staticinvoke <org.apache.flink.configuration.ConfigUtilsTest$valueOf__353: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        r3 = staticinvoke <org.apache.flink.configuration.ConfigUtils: java.util.List decodeListFromConfig(org.apache.flink.configuration.ReadableConfig,org.apache.flink.configuration.ConfigOption,org.apache.flink.util.function.FunctionWithException)>($r4, $r12, $r13);

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r15 = staticinvoke <org.hamcrest.core.Is: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r15);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r1;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r2;
        org.apache.flink.configuration.ConfigOption $r3;
        java.lang.Integer[] $r4, $r9;
        java.lang.Integer $r5, $r6, $r7, $r8;
        java.util.List $r10;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("test.option.key");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        <org.apache.flink.configuration.ConfigUtilsTest: org.apache.flink.configuration.ConfigOption TEST_OPTION> = $r3;

        $r4 = newarray (java.lang.Integer)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r4[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4[3] = $r8;

        <org.apache.flink.configuration.ConfigUtilsTest: java.lang.Integer[] intArray> = $r4;

        $r9 = <org.apache.flink.configuration.ConfigUtilsTest: java.lang.Integer[] intArray>;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        <org.apache.flink.configuration.ConfigUtilsTest: java.util.List intList> = $r10;

        return;
    }
}
