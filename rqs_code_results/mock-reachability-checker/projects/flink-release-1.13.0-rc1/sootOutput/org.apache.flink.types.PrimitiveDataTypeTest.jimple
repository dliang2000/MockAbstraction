public class org.apache.flink.types.PrimitiveDataTypeTest extends java.lang.Object
{
    private java.io.PipedInputStream in;
    private java.io.PipedOutputStream out;
    private org.apache.flink.core.memory.DataInputView mIn;
    private org.apache.flink.core.memory.DataOutputView mOut;

    public void <init>()
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup() throws java.lang.Exception
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;
        java.io.PipedInputStream $r1, $r3, $r5;
        java.io.PipedOutputStream $r2, $r7;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r4;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r6;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        $r1 = new java.io.PipedInputStream;

        specialinvoke $r1.<java.io.PipedInputStream: void <init>(int)>(1000);

        r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedInputStream in> = $r1;

        $r2 = new java.io.PipedOutputStream;

        $r3 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedInputStream in>;

        specialinvoke $r2.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>($r3);

        r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedOutputStream out> = $r2;

        $r4 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        $r5 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedInputStream in>;

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r5);

        r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn> = $r4;

        $r6 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        $r7 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedOutputStream out>;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r7);

        r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut> = $r6;

        return;
    }

    public void testIntValue()
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;
        org.apache.flink.types.IntValue $r7, $r8, $r9, $r10, $r14, $r15, $r16;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24, $i26;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25, $l27;
        org.apache.flink.core.memory.DataOutputView $r11, $r12, $r13;
        org.apache.flink.core.memory.DataInputView $r17, $r18, $r19;
        java.lang.Exception $r20;
        java.lang.String $r21;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        $r7 = new org.apache.flink.types.IntValue;

        specialinvoke $r7.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        $i0 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $r8 = new org.apache.flink.types.IntValue;

        specialinvoke $r8.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        $r9 = new org.apache.flink.types.IntValue;

        specialinvoke $r9.<org.apache.flink.types.IntValue: void <init>(int)>(-10);

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(20);

        $i2 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r7);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $i4 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r8);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 0L);

        $i6 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r9);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, 1L);

        $i8 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r10);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, -1L);

     label1:
        $r11 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r7.<org.apache.flink.types.IntValue: void write(org.apache.flink.core.memory.DataOutputView)>($r11);

        $r12 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r9.<org.apache.flink.types.IntValue: void write(org.apache.flink.core.memory.DataOutputView)>($r12);

        $r13 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r10.<org.apache.flink.types.IntValue: void write(org.apache.flink.core.memory.DataOutputView)>($r13);

        $r14 = new org.apache.flink.types.IntValue;

        specialinvoke $r14.<org.apache.flink.types.IntValue: void <init>()>();

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>()>();

        $r16 = new org.apache.flink.types.IntValue;

        specialinvoke $r16.<org.apache.flink.types.IntValue: void <init>()>();

        $r17 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r14.<org.apache.flink.types.IntValue: void read(org.apache.flink.core.memory.DataInputView)>($r17);

        $r18 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r15.<org.apache.flink.types.IntValue: void read(org.apache.flink.core.memory.DataInputView)>($r18);

        $r19 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r16.<org.apache.flink.types.IntValue: void read(org.apache.flink.core.memory.DataInputView)>($r19);

        $i10 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r14);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 0L);

        $i12 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        $i14 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        $i16 = virtualinvoke $r9.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r15);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 0L);

        $i18 = virtualinvoke $r9.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        $i20 = virtualinvoke $r15.<org.apache.flink.types.IntValue: int getValue()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, $l21);

        $i22 = virtualinvoke $r10.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r16);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l23, 0L);

        $i24 = virtualinvoke $r10.<org.apache.flink.types.IntValue: int getValue()>();

        $l25 = (long) $i24;

        $i26 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, $l27);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        $r21 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testDoubleValue()
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;
        org.apache.flink.types.DoubleValue $r7, $r8, $r9, $r10, $r14, $r15, $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        org.apache.flink.core.memory.DataOutputView $r11, $r12, $r13;
        org.apache.flink.core.memory.DataInputView $r17, $r18, $r19;
        java.lang.Exception $r20;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        $r7 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r7.<org.apache.flink.types.DoubleValue: void <init>(double)>(10.2);

        $d0 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(10.2, $d0, 1.0E-4);

        $r8 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r8.<org.apache.flink.types.DoubleValue: void <init>(double)>(10.2);

        $r9 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r9.<org.apache.flink.types.DoubleValue: void <init>(double)>(-10.5);

        $r10 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r10.<org.apache.flink.types.DoubleValue: void <init>(double)>(20.2);

        $i0 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r7);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 0L);

        $i2 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r8);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, 0L);

        $i4 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r9);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, 1L);

        $i6 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r10);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, -1L);

     label1:
        $r11 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r7.<org.apache.flink.types.DoubleValue: void write(org.apache.flink.core.memory.DataOutputView)>($r11);

        $r12 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r9.<org.apache.flink.types.DoubleValue: void write(org.apache.flink.core.memory.DataOutputView)>($r12);

        $r13 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r10.<org.apache.flink.types.DoubleValue: void write(org.apache.flink.core.memory.DataOutputView)>($r13);

        $r14 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r14.<org.apache.flink.types.DoubleValue: void <init>()>();

        $r15 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r15.<org.apache.flink.types.DoubleValue: void <init>()>();

        $r16 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r16.<org.apache.flink.types.DoubleValue: void <init>()>();

        $r17 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r14.<org.apache.flink.types.DoubleValue: void read(org.apache.flink.core.memory.DataInputView)>($r17);

        $r18 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r15.<org.apache.flink.types.DoubleValue: void read(org.apache.flink.core.memory.DataInputView)>($r18);

        $r19 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r16.<org.apache.flink.types.DoubleValue: void read(org.apache.flink.core.memory.DataInputView)>($r19);

        $i8 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r14);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, 0L);

        $d1 = virtualinvoke $r7.<org.apache.flink.types.DoubleValue: double getValue()>();

        $d2 = virtualinvoke $r14.<org.apache.flink.types.DoubleValue: double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d2, 1.0E-4);

        $i10 = virtualinvoke $r9.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r15);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 0L);

        $d3 = virtualinvoke $r9.<org.apache.flink.types.DoubleValue: double getValue()>();

        $d4 = virtualinvoke $r15.<org.apache.flink.types.DoubleValue: double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d3, $d4, 1.0E-4);

        $i12 = virtualinvoke $r10.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r16);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 0L);

        $d5 = virtualinvoke $r10.<org.apache.flink.types.DoubleValue: double getValue()>();

        $d6 = virtualinvoke $r16.<org.apache.flink.types.DoubleValue: double getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d5, $d6, 1.0E-4);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(0);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testStringValue()
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;
        java.lang.CharSequence r8, $r26, $r27, $r28;
        org.apache.flink.types.StringValue r9, r10, r11, r12, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r36, $r37, $r38, $r39, $r40;
        java.lang.String $r21, $r29, $r30, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i16, $i18, $i23, $i25, $i27, $i29, $i31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        long $l13, $l15, $l17, $l19, $l21, $l24, $l26, $l28, $l30, $l32;
        char $c20;
        org.apache.flink.core.memory.DataOutputView $r31, $r32, $r33, $r34, $r35;
        org.apache.flink.core.memory.DataInputView $r41, $r42, $r43, $r44, $r45;
        java.lang.Exception $r56;
        java.lang.IndexOutOfBoundsException $r57, $r58;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        $r18 = new org.apache.flink.types.StringValue;

        specialinvoke $r18.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a test");

        $r19 = new org.apache.flink.types.StringValue;

        specialinvoke $r19.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This");

        $r20 = new org.apache.flink.types.StringValue;

        specialinvoke $r20.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("is a");

        $r21 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("This is a test", $r21);

        $r22 = new org.apache.flink.types.StringValue;

        specialinvoke $r22.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a test");

        $r23 = new org.apache.flink.types.StringValue;

        specialinvoke $r23.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a tesa");

        $r24 = new org.apache.flink.types.StringValue;

        specialinvoke $r24.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a tesz");

        $r25 = new org.apache.flink.types.StringValue;

        specialinvoke $r25.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("\u00dcnlaut \u00dftring \u00b5 avec \u00e9 y \u00a2");

        r8 = virtualinvoke $r22.<org.apache.flink.types.StringValue: java.lang.CharSequence subSequence(int,int)>(0, 4);

        r9 = (org.apache.flink.types.StringValue) r8;

        $i0 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int length()>();

        $r26 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.CharSequence subSequence(int,int)>(0, $i0);

        r10 = (org.apache.flink.types.StringValue) $r26;

        $r27 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.CharSequence subSequence(int,int)>(5, 9);

        r11 = (org.apache.flink.types.StringValue) $r27;

        $r28 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.CharSequence subSequence(int,int)>(0, 0);

        r12 = (org.apache.flink.types.StringValue) $r28;

        $i1 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r18);

        if $i1 != 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i2 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r22);

        if $i2 != 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $i3 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r23);

        if $i3 <= 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $i4 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r24);

        if $i4 >= 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z0 = virtualinvoke $r19.<org.apache.flink.types.StringValue: boolean equals(java.lang.Object)>(r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i5 = virtualinvoke $r19.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r9);

        if $i5 != 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $i6 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r10);

        if $i6 != 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $i7 = virtualinvoke $r20.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r11);

        if $i7 != 0 goto label13;

        $z7 = 1;

        goto label14;

     label13:
        $z7 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        virtualinvoke r11.<org.apache.flink.types.StringValue: void setValue(java.lang.CharSequence)>("This is a test");

        $i8 = virtualinvoke $r20.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r11);

        if $i8 <= 0 goto label15;

        $z8 = 1;

        goto label16;

     label15:
        $z8 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $i9 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r11);

        if $i9 != 0 goto label17;

        $z9 = 1;

        goto label18;

     label17:
        $z9 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        virtualinvoke r11.<org.apache.flink.types.StringValue: void setValue(java.lang.CharSequence)>("is a");

        $i10 = virtualinvoke $r20.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r11);

        if $i10 != 0 goto label19;

        $z10 = 1;

        goto label20;

     label19:
        $z10 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $i11 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>(r11);

        if $i11 >= 0 goto label21;

        $z11 = 1;

        goto label22;

     label21:
        $z11 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $i12 = virtualinvoke $r20.<org.apache.flink.types.StringValue: int hashCode()>();

        $l13 = (long) $i12;

        $i14 = virtualinvoke r11.<org.apache.flink.types.StringValue: int hashCode()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

        $i16 = virtualinvoke r11.<org.apache.flink.types.StringValue: int length()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l17, 4L);

        $r29 = virtualinvoke r11.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("is a", $r29);

        $i18 = virtualinvoke r12.<org.apache.flink.types.StringValue: int length()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, 0L);

        $r30 = virtualinvoke r12.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r30);

        $c20 = virtualinvoke r11.<org.apache.flink.types.StringValue: char charAt(int)>(1);

        $l21 = (long) $c20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(115L, $l21);

     label23:
        virtualinvoke r11.<org.apache.flink.types.StringValue: char charAt(int)>(5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception should have been thrown when accessing characters out of bounds.");

     label24:
        goto label26;

     label25:
        $r57 := @caughtexception;

     label26:
        $r31 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r18.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r31);

        $r32 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r25.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r32);

        $r33 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r23.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r33);

        $r34 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r24.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r34);

        $r35 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke r11.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>($r35);

        $r36 = new org.apache.flink.types.StringValue;

        specialinvoke $r36.<org.apache.flink.types.StringValue: void <init>()>();

        $r37 = new org.apache.flink.types.StringValue;

        specialinvoke $r37.<org.apache.flink.types.StringValue: void <init>()>();

        $r38 = new org.apache.flink.types.StringValue;

        specialinvoke $r38.<org.apache.flink.types.StringValue: void <init>()>();

        $r39 = new org.apache.flink.types.StringValue;

        specialinvoke $r39.<org.apache.flink.types.StringValue: void <init>()>();

        $r40 = new org.apache.flink.types.StringValue;

        specialinvoke $r40.<org.apache.flink.types.StringValue: void <init>()>();

        $r41 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r36.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r41);

        $r42 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r39.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r42);

        $r43 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r37.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r43);

        $r44 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r38.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r44);

        $r45 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r40.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>($r45);

        $i23 = virtualinvoke $r18.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r36);

        $l24 = (long) $i23;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l24, 0L);

        $r46 = virtualinvoke $r18.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        $r47 = virtualinvoke $r36.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, $r47);

        $i25 = virtualinvoke $r25.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r39);

        $l26 = (long) $i25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l26, 0L);

        $r48 = virtualinvoke $r25.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        $r49 = virtualinvoke $r39.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r48, $r49);

        $i27 = virtualinvoke $r23.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r37);

        $l28 = (long) $i27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l28, 0L);

        $r50 = virtualinvoke $r23.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        $r51 = virtualinvoke $r37.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $i29 = virtualinvoke $r24.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r38);

        $l30 = (long) $i29;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l30, 0L);

        $r52 = virtualinvoke $r24.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        $r53 = virtualinvoke $r38.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $i31 = virtualinvoke r11.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r40);

        $l32 = (long) $i31;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l32, 0L);

        $r54 = virtualinvoke r11.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        $r55 = virtualinvoke $r40.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

     label27:
        virtualinvoke $r40.<org.apache.flink.types.StringValue: char charAt(int)>(5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception should have been thrown when accessing characters out of bounds.");

     label28:
        goto label30;

     label29:
        $r58 := @caughtexception;

     label30:
        goto label32;

     label31:
        $r56 := @caughtexception;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(0);

     label32:
        return;

        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label25;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label29;
        catch java.lang.Exception from label26 to label30 with label31;
    }

    public void testPactNull()
    {
        org.apache.flink.types.PrimitiveDataTypeTest r0;
        org.apache.flink.types.NullValue $r4, $r5, $r6;
        boolean $z0;
        java.io.PipedInputStream $r7;
        int $i1, i3, i4;
        long $l2;
        org.apache.flink.core.memory.DataInputView $r8;
        org.apache.flink.core.memory.DataOutputView $r9;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r13, $r15;

        r0 := @this: org.apache.flink.types.PrimitiveDataTypeTest;

        $r4 = new org.apache.flink.types.NullValue;

        specialinvoke $r4.<org.apache.flink.types.NullValue: void <init>()>();

        $r5 = new org.apache.flink.types.NullValue;

        specialinvoke $r5.<org.apache.flink.types.NullValue: void <init>()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("PactNull not equal to other PactNulls.", $r4, $r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("PactNull not equal to other PactNulls.", $r5, $r4);

        $z0 = virtualinvoke $r4.<org.apache.flink.types.NullValue: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(java.lang.String,boolean)>("PactNull equal to other null.", $z0);

        $r6 = new org.apache.flink.types.NullValue;

        specialinvoke $r6.<org.apache.flink.types.NullValue: void <init>()>();

     label1:
        i3 = 0;

     label2:
        if i3 >= 13 goto label3;

        $r9 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataOutputView mOut>;

        virtualinvoke $r6.<org.apache.flink.types.NullValue: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        i3 = i3 + 1;

        goto label2;

     label3:
        i4 = 0;

     label4:
        if i4 >= 13 goto label5;

        $r8 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: org.apache.flink.core.memory.DataInputView mIn>;

        virtualinvoke $r6.<org.apache.flink.types.NullValue: void read(org.apache.flink.core.memory.DataInputView)>($r8);

        i4 = i4 + 1;

        goto label4;

     label5:
        $r7 = r0.<org.apache.flink.types.PrimitiveDataTypeTest: java.io.PipedInputStream in>;

        $i1 = virtualinvoke $r7.<java.io.PipedInputStream: int available()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Reading PactNull does not consume the same data as was written.", 0L, $l2);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An exception occurred in the testcase: ");

        $r13 = virtualinvoke $r10.<java.io.IOException: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r15);

     label8:
        return;

        catch java.io.IOException from label1 to label6 with label7;
    }
}
