public class org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSerializeConfigWhenSerializerMissing() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r5;
        org.apache.flink.core.memory.DataOutputSerializer $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest;

        $r4 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: void <init>()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) $r5;

     label1:
        $r6 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r6, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testSerializerDeserializationFailure() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r2, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer $r5;
        org.apache.flink.core.memory.DataOutputSerializer $r7;
        org.apache.flink.core.memory.DataInputDeserializer $r8;
        byte[] $r9, $r14;
        java.lang.Class $r10;
        java.lang.ClassLoader $r11;
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer $r13;
        java.lang.IllegalStateException $r17, $r18;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest;

        $r5 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: void <init>()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) $r6;

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r5);

        $r7 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r7.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(64);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r7, r2);

        $r8 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r9 = virtualinvoke $r7.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        specialinvoke $r8.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>($r9);

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r8, $r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

     label1:
        interfaceinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected exception");

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

     label4:
        $r15 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) r4;

        $r13 = new org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r14 = newarray (byte)[0];

        specialinvoke $r13.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: void <init>(byte[])>($r14);

        virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r13);

     label5:
        interfaceinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("expected exception");

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

     label8:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label5 to label6 with label7;
    }
}
