public class org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest extends org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest r0;
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest;

        $r1 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO>;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparatorTestBase: void <init>(org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo)>($r1);

        return;
    }

    protected void deepEquals(java.lang.String, int[], int[])
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest r0;
        java.lang.String r1;
        int[] r2, r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.String,int[],int[])>(r1, r2, r3);

        return;
    }

    protected int[][] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest r0;
        int[][] $r1;
        int[] $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest;

        $r1 = newarray (int[])[6];

        $r2 = newarray (int)[2];

        $r2[0] = -1;

        $r2[1] = 0;

        $r1[0] = $r2;

        $r3 = newarray (int)[2];

        $r3[0] = 0;

        $r3[1] = -1;

        $r1[1] = $r3;

        $r4 = newarray (int)[2];

        $r4[0] = 0;

        $r4[1] = 0;

        $r1[2] = $r4;

        $r5 = newarray (int)[2];

        $r5[0] = 0;

        $r5[1] = 1;

        $r1[3] = $r5;

        $r6 = newarray (int)[3];

        $r6[0] = 0;

        $r6[1] = 1;

        $r6[2] = 2;

        $r1[4] = $r6;

        $r7 = newarray (int)[1];

        $r7[0] = 2;

        $r1[5] = $r7;

        return $r1;
    }

    protected volatile void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        int[] $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (int[]) r2;

        $r4 = (int[]) r3;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest: void deepEquals(java.lang.String,int[],int[])>(r1, $r5, $r4);

        return;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest r0;
        int[][] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparatorTest: int[][] getSortedTestData()>();

        return $r1;
    }
}
