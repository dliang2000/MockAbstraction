class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView extends org.apache.flink.core.memory.DataOutputSerializer
{
    private final org.apache.flink.core.testutils.BlockerSync blocker;

    void <init>(org.apache.flink.core.testutils.BlockerSync)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView r0;
        org.apache.flink.core.testutils.BlockerSync r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView;

        r1 := @parameter0: org.apache.flink.core.testutils.BlockerSync;

        specialinvoke r0.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(32);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView: org.apache.flink.core.testutils.BlockerSync blocker> = r1;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView r0;
        byte[] r1;
        int i0, i1;
        org.apache.flink.core.testutils.BlockerSync $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView: org.apache.flink.core.testutils.BlockerSync blocker>;

        virtualinvoke $r2.<org.apache.flink.core.testutils.BlockerSync: void blockNonInterruptible()>();

        return;
    }
}
