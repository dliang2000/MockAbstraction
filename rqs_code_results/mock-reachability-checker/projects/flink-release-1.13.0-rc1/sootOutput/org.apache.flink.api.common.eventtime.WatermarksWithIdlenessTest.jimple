public class org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testZeroTimeout()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness $r1;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r2;
        java.time.Duration $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r1 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        $r2 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        $r3 = <java.time.Duration: java.time.Duration ZERO>;

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator,java.time.Duration)>($r2, $r3);

        return;
    }

    public void testNegativeTimeout()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness $r1;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r2;
        java.time.Duration $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r1 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        $r2 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        $r3 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(-1L);

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator,java.time.Duration)>($r2, $r3);

        return;
    }

    public void testInitiallyActive()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.util.clock.ManualClock $r3;
        long $l0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r4;
        java.time.Duration $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r3 = new org.apache.flink.util.clock.ManualClock;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r3.<org.apache.flink.util.clock.ManualClock: void <init>(long)>($l0);

        $r4 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void <init>(org.apache.flink.util.clock.Clock,java.time.Duration)>($r3, $r5);

        $z0 = virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testIdleWithoutEvents()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.util.clock.ManualClock $r3;
        long $l0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r4;
        java.time.Duration $r5;
        java.util.concurrent.TimeUnit $r6;
        boolean $z1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r3 = new org.apache.flink.util.clock.ManualClock;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r3.<org.apache.flink.util.clock.ManualClock: void <init>(long)>($l0);

        $r4 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void <init>(org.apache.flink.util.clock.Clock,java.time.Duration)>($r3, $r5);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r3.<org.apache.flink.util.clock.ManualClock: void advanceTime(long,java.util.concurrent.TimeUnit)>(11L, $r6);

        $z1 = virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testRepeatedIdleChecks()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer r2;
        org.apache.flink.util.clock.ManualClock $r3;
        long $l0;
        java.time.Duration $r4;
        boolean $z0, $z1;
        java.util.concurrent.TimeUnit $r5;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r3 = new org.apache.flink.util.clock.ManualClock;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r3.<org.apache.flink.util.clock.ManualClock: void <init>(long)>($l0);

        $r4 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(122L);

        r2 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer createTimerAndMakeIdle(org.apache.flink.util.clock.ManualClock,java.time.Duration)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r3.<org.apache.flink.util.clock.ManualClock: void advanceTime(long,java.util.concurrent.TimeUnit)>(100L, $r5);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testActiveAfterIdleness()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer r2;
        org.apache.flink.util.clock.ManualClock $r3;
        long $l0;
        java.time.Duration $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r3 = new org.apache.flink.util.clock.ManualClock;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r3.<org.apache.flink.util.clock.ManualClock: void <init>(long)>($l0);

        $r4 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        r2 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer createTimerAndMakeIdle(org.apache.flink.util.clock.ManualClock,java.time.Duration)>($r3, $r4);

        virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void activity()>();

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testIdleActiveIdle()
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest r0;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer r2;
        org.apache.flink.util.clock.ManualClock $r3;
        long $l0;
        java.time.Duration $r4, $r5;
        boolean $z0, $z2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        $r3 = new org.apache.flink.util.clock.ManualClock;

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        specialinvoke $r3.<org.apache.flink.util.clock.ManualClock: void <init>(long)>($l0);

        $r4 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(122L);

        r2 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer createTimerAndMakeIdle(org.apache.flink.util.clock.ManualClock,java.time.Duration)>($r3, $r4);

        virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void activity()>();

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(123L);

        virtualinvoke $r3.<org.apache.flink.util.clock.ManualClock: void advanceTime(java.time.Duration)>($r5);

        $z2 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    private static org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer createTimerAndMakeIdle(org.apache.flink.util.clock.ManualClock, java.time.Duration)
    {
        org.apache.flink.util.clock.ManualClock r0;
        java.time.Duration r1, $r4;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r3;
        long $l0, $l1;
        boolean $z1;

        r0 := @parameter0: org.apache.flink.util.clock.ManualClock;

        r1 := @parameter1: java.time.Duration;

        $r3 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void <init>(org.apache.flink.util.clock.Clock,java.time.Duration)>(r0, r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        $l0 = virtualinvoke r1.<java.time.Duration: long toMillis()>();

        $l1 = $l0 + 1L;

        $r4 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>($l1);

        virtualinvoke r0.<org.apache.flink.util.clock.ManualClock: void advanceTime(java.time.Duration)>($r4);

        $z1 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return $r3;
    }
}
