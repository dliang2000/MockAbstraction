public final enum class org.apache.flink.testutils.migration.MigrationVersion extends java.lang.Enum
{
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_3;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_4;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_5;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_6;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_7;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_8;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_9;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_10;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_11;
    public static final enum org.apache.flink.testutils.migration.MigrationVersion v1_12;
    private final java.lang.String versionStr;
    private static final java.util.Map CODE_MAP;
    private static final org.apache.flink.testutils.migration.MigrationVersion[] $VALUES;

    public static org.apache.flink.testutils.migration.MigrationVersion[] values()
    {
        org.apache.flink.testutils.migration.MigrationVersion[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.testutils.migration.MigrationVersion[]) $r1;

        return $r2;
    }

    public static org.apache.flink.testutils.migration.MigrationVersion valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.testutils.migration.MigrationVersion $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/testutils/migration/MigrationVersion;", r0);

        $r2 = (org.apache.flink.testutils.migration.MigrationVersion) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        org.apache.flink.testutils.migration.MigrationVersion r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: org.apache.flink.testutils.migration.MigrationVersion;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.flink.testutils.migration.MigrationVersion: java.lang.String versionStr> = r2;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.testutils.migration.MigrationVersion r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.testutils.migration.MigrationVersion;

        $r1 = r0.<org.apache.flink.testutils.migration.MigrationVersion: java.lang.String versionStr>;

        return $r1;
    }

    public boolean isNewerVersionThan(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.testutils.migration.MigrationVersion r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.migration.MigrationVersion;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $i0 = virtualinvoke r0.<org.apache.flink.testutils.migration.MigrationVersion: int ordinal()>();

        $i1 = virtualinvoke r1.<org.apache.flink.testutils.migration.MigrationVersion: int ordinal()>();

        if $i0 <= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List orHigher()
    {
        org.apache.flink.testutils.migration.MigrationVersion r0;
        org.apache.flink.testutils.migration.MigrationVersion[] $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Predicate $r3;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.util.List $r7;

        r0 := @this: org.apache.flink.testutils.migration.MigrationVersion;

        $r1 = staticinvoke <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion[] values()>();

        $r2 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($r1);

        $r3 = staticinvoke <org.apache.flink.testutils.migration.MigrationVersion$lambda_orHigher_0__170: java.util.function.Predicate bootstrap$(org.apache.flink.testutils.migration.MigrationVersion)>(r0);

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.List) $r6;

        return $r7;
    }

    public static java.util.Optional byCode(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.util.Optional $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.flink.testutils.migration.MigrationVersion: java.util.Map CODE_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r2);

        return $r3;
    }

    public static java.lang.String lambda$static$1(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.testutils.migration.MigrationVersion r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r1 = r0.<org.apache.flink.testutils.migration.MigrationVersion: java.lang.String versionStr>;

        return $r1;
    }

    public boolean lambda$orHigher$0(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.testutils.migration.MigrationVersion r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.migration.MigrationVersion;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $i0 = virtualinvoke r0.<org.apache.flink.testutils.migration.MigrationVersion: int ordinal()>();

        $i1 = virtualinvoke r1.<org.apache.flink.testutils.migration.MigrationVersion: int ordinal()>();

        if $i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        org.apache.flink.testutils.migration.MigrationVersion $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.apache.flink.testutils.migration.MigrationVersion[] $r10, $r21;
        java.util.stream.Stream $r22;
        java.util.function.Function $r23, $r24;
        java.util.stream.Collector $r25;
        java.lang.Object $r26;
        java.util.Map $r27;

        $r0 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r0.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_3", 0, "1.3");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_3> = $r0;

        $r1 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r1.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_4", 1, "1.4");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_4> = $r1;

        $r2 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r2.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_5", 2, "1.5");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_5> = $r2;

        $r3 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r3.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_6", 3, "1.6");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_6> = $r3;

        $r4 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r4.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_7", 4, "1.7");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_7> = $r4;

        $r5 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r5.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_8", 5, "1.8");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_8> = $r5;

        $r6 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r6.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_9", 6, "1.9");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_9> = $r6;

        $r7 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r7.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_10", 7, "1.10");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_10> = $r7;

        $r8 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r8.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_11", 8, "1.11");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_11> = $r8;

        $r9 = new org.apache.flink.testutils.migration.MigrationVersion;

        specialinvoke $r9.<org.apache.flink.testutils.migration.MigrationVersion: void <init>(java.lang.String,int,java.lang.String)>("v1_12", 9, "1.12");

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_12> = $r9;

        $r10 = newarray (org.apache.flink.testutils.migration.MigrationVersion)[10];

        $r11 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_3>;

        $r10[0] = $r11;

        $r12 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_4>;

        $r10[1] = $r12;

        $r13 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_5>;

        $r10[2] = $r13;

        $r14 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_6>;

        $r10[3] = $r14;

        $r15 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_7>;

        $r10[4] = $r15;

        $r16 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_8>;

        $r10[5] = $r16;

        $r17 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_9>;

        $r10[6] = $r17;

        $r18 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_10>;

        $r10[7] = $r18;

        $r19 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_11>;

        $r10[8] = $r19;

        $r20 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_12>;

        $r10[9] = $r20;

        <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion[] $VALUES> = $r10;

        $r21 = staticinvoke <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion[] values()>();

        $r22 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r21);

        $r23 = staticinvoke <org.apache.flink.testutils.migration.MigrationVersion$lambda_static_1__173: java.util.function.Function bootstrap$()>();

        $r24 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r25 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r23, $r24);

        $r26 = interfaceinvoke $r22.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r25);

        $r27 = (java.util.Map) $r26;

        <org.apache.flink.testutils.migration.MigrationVersion: java.util.Map CODE_MAP> = $r27;

        return;
    }
}
