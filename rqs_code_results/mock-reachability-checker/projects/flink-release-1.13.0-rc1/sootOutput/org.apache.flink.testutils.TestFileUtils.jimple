public class org.apache.flink.testutils.TestFileUtils extends java.lang.Object
{
    private static final java.lang.String FILE_PREFIX;
    private static final java.lang.String FILE_SUFFIX;

    public static java.lang.String createTempFile(long) throws java.io.IOException
    {
        java.io.File r0;
        java.io.BufferedOutputStream $r3;
        java.io.FileOutputStream $r4;
        byte $b0;
        java.net.URI $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        long l1;

        l1 := @parameter0: long;

        r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("flink_test_", ".tmp");

        virtualinvoke r0.<java.io.File: void deleteOnExit()>();

        $r3 = new java.io.BufferedOutputStream;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r4);

     label1:
        $b0 = l1 cmp 0L;

        if $b0 <= 0 goto label2;

        virtualinvoke $r3.<java.io.BufferedOutputStream: void write(int)>(0);

        l1 = l1 - 1L;

        goto label1;

     label2:
        virtualinvoke $r3.<java.io.BufferedOutputStream: void close()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.io.BufferedOutputStream: void close()>();

        throw $r7;

     label5:
        $r5 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String toString()>();

        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String createTempFileInDirectory(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, $r10, $r12, $r24;
        java.io.File $r6, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        boolean $z0;
        java.io.BufferedWriter $r14;
        java.io.FileWriter $r15;
        java.lang.Throwable $r16, $r17, $r18, r20;
        java.net.URI $r23;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label01:
        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r10 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r12);

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r13 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r13.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r6.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r6.<java.io.File: void deleteOnExit()>();

        $r14 = new java.io.BufferedWriter;

        $r15 = new java.io.FileWriter;

        specialinvoke $r15.<java.io.FileWriter: void <init>(java.io.File)>($r6);

        specialinvoke $r14.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r15);

        r20 = null;

     label02:
        virtualinvoke $r14.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

     label03:
        if $r14 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r14.<java.io.BufferedWriter: void close()>();

        goto label13;

     label05:
        $r18 := @caughtexception;

        r20 = $r18;

        throw $r18;

     label06:
        $r17 := @caughtexception;

     label07:
        if $r14 == null goto label12;

        if r20 == null goto label11;

     label08:
        virtualinvoke $r14.<java.io.BufferedWriter: void close()>();

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label12;

     label11:
        virtualinvoke $r14.<java.io.BufferedWriter: void close()>();

     label12:
        throw $r17;

     label13:
        $r23 = virtualinvoke $r6.<java.io.File: java.net.URI toURI()>();

        $r24 = virtualinvoke $r23.<java.net.URI: java.lang.String toString()>();

        return $r24;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static java.lang.String createTempFileInDirectory(java.lang.String, long) throws java.io.IOException
    {
        java.lang.String r0, $r9, $r11, $r23;
        java.io.File $r5, $r12;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        boolean $z0;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        byte $b0;
        java.lang.Throwable $r16, $r17, $r18, r19;
        long l1;
        java.net.URI $r22;

        r0 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

     label01:
        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r11);

        $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r12 = virtualinvoke $r5.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r5.<java.io.File: boolean createNewFile()>();

        virtualinvoke $r5.<java.io.File: void deleteOnExit()>();

        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

        r19 = null;

     label02:
        $b0 = l1 cmp 0L;

        if $b0 <= 0 goto label03;

        virtualinvoke $r13.<java.io.BufferedOutputStream: void write(int)>(0);

        l1 = l1 - 1L;

        goto label02;

     label03:
        if $r13 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

        goto label13;

     label05:
        $r17 := @caughtexception;

        r19 = $r17;

        throw $r17;

     label06:
        $r18 := @caughtexception;

     label07:
        if $r13 == null goto label12;

        if r19 == null goto label11;

     label08:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        virtualinvoke r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label12;

     label11:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

     label12:
        throw $r18;

     label13:
        $r22 = virtualinvoke $r5.<java.io.File: java.net.URI toURI()>();

        $r23 = virtualinvoke $r22.<java.net.URI: java.lang.String toString()>();

        return $r23;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static java.lang.String createTempFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r15;
        java.io.File r1;
        java.io.BufferedWriter $r5;
        java.io.FileWriter $r6;
        java.lang.Throwable $r7, $r8, $r9, r11;
        java.net.URI $r14;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("flink_test_", ".tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r5 = new java.io.BufferedWriter;

        $r6 = new java.io.FileWriter;

        specialinvoke $r6.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        specialinvoke $r5.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r6);

        r11 = null;

     label01:
        virtualinvoke $r5.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r11 = $r9;

        throw $r9;

     label05:
        $r8 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r11 == null goto label10;

     label07:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

        goto label11;

     label10:
        virtualinvoke $r5.<java.io.BufferedWriter: void close()>();

     label11:
        throw $r8;

     label12:
        $r14 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r15 = virtualinvoke $r14.<java.net.URI: java.lang.String toString()>();

        return $r15;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static transient java.lang.String createTempFileDir(java.io.File, long[]) throws java.io.IOException
    {
        java.io.File r0, $r7, $r11;
        long[] r1;
        int i0, i2;
        java.lang.String $r8, $r10, $r12;
        boolean $z0;
        java.net.URI $r9;
        java.io.BufferedOutputStream $r13;
        java.io.FileOutputStream $r14;
        byte $b1;
        java.lang.Throwable $r15, $r16, $r18, r20;
        long l3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: long[];

     label01:
        $r7 = new java.io.File;

        $r8 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r8);

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        virtualinvoke $r7.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r7.<java.io.File: void deleteOnExit()>();

        i0 = lengthof r1;

        i2 = 0;

     label02:
        if i2 >= i0 goto label15;

        l3 = r1[i2];

        $r11 = new java.io.File;

        $r12 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, $r12);

        virtualinvoke $r11.<java.io.File: void deleteOnExit()>();

        $r13 = new java.io.BufferedOutputStream;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>($r11);

        specialinvoke $r13.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r14);

        r20 = null;

     label03:
        $b1 = l3 cmp 0L;

        if $b1 <= 0 goto label04;

        virtualinvoke $r13.<java.io.BufferedOutputStream: void write(int)>(0);

        l3 = l3 - 1L;

        goto label03;

     label04:
        if $r13 == null goto label14;

        goto label05;

     label05:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

        goto label14;

     label06:
        $r18 := @caughtexception;

        r20 = $r18;

        throw $r18;

     label07:
        $r16 := @caughtexception;

     label08:
        if $r13 == null goto label13;

        if r20 == null goto label12;

     label09:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

     label10:
        goto label13;

     label11:
        $r15 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label13;

     label12:
        virtualinvoke $r13.<java.io.BufferedOutputStream: void close()>();

     label13:
        throw $r16;

     label14:
        i2 = i2 + 1;

        goto label02;

     label15:
        $r9 = virtualinvoke $r7.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        return $r10;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    public static transient java.lang.String createTempFileDir(java.io.File, java.lang.String[]) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String[] r1;
        java.lang.String $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDirExtension(java.io.File,java.lang.String,java.lang.String[])>(r0, ".tmp", r1);

        return $r2;
    }

    public static transient java.lang.String createTempFileDirExtension(java.io.File, java.lang.String, java.lang.String[]) throws java.io.IOException
    {
        java.io.File r0, $r9, $r13;
        java.lang.String r1, r4, $r10, $r12, $r14;
        java.lang.String[] r2;
        int i0, i1;
        boolean $z0;
        java.net.URI $r11;
        java.io.BufferedWriter $r15;
        java.io.FileWriter $r16;
        java.lang.Throwable $r17, $r19, $r20, r22;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

     label01:
        $r9 = new java.io.File;

        $r10 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName(java.lang.String)>(".tmp");

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r10);

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        virtualinvoke $r9.<java.io.File: boolean mkdirs()>();

        virtualinvoke $r9.<java.io.File: void deleteOnExit()>();

        i0 = lengthof r2;

        i1 = 0;

     label02:
        if i1 >= i0 goto label15;

        r4 = r2[i1];

        $r13 = new java.io.File;

        $r14 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName(java.lang.String)>(r1);

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r14);

        virtualinvoke $r13.<java.io.File: void deleteOnExit()>();

        $r15 = new java.io.BufferedWriter;

        $r16 = new java.io.FileWriter;

        specialinvoke $r16.<java.io.FileWriter: void <init>(java.io.File)>($r13);

        specialinvoke $r15.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r16);

        r22 = null;

     label03:
        virtualinvoke $r15.<java.io.BufferedWriter: void write(java.lang.String)>(r4);

     label04:
        if $r15 == null goto label14;

        goto label05;

     label05:
        virtualinvoke $r15.<java.io.BufferedWriter: void close()>();

        goto label14;

     label06:
        $r19 := @caughtexception;

        r22 = $r19;

        throw $r19;

     label07:
        $r20 := @caughtexception;

     label08:
        if $r15 == null goto label13;

        if r22 == null goto label12;

     label09:
        virtualinvoke $r15.<java.io.BufferedWriter: void close()>();

     label10:
        goto label13;

     label11:
        $r17 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label13;

     label12:
        virtualinvoke $r15.<java.io.BufferedWriter: void close()>();

     label13:
        throw $r20;

     label14:
        i1 = i1 + 1;

        goto label02;

     label15:
        $r11 = virtualinvoke $r9.<java.io.File: java.net.URI toURI()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String toString()>();

        return $r12;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    public static java.lang.String randomFileName()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName(java.lang.String)>(".tmp");

        return $r0;
    }

    public static java.lang.String randomFileName(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        double $d0, $d1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flink_test_");

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 2.147483647E9;

        $i0 = (int) $d1;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void <init>()
    {
        org.apache.flink.testutils.TestFileUtils r0;

        r0 := @this: org.apache.flink.testutils.TestFileUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.testutils.TestFileUtils: java.lang.String FILE_SUFFIX> = ".tmp";

        <org.apache.flink.testutils.TestFileUtils: java.lang.String FILE_PREFIX> = "flink_test_";

        return;
    }
}
