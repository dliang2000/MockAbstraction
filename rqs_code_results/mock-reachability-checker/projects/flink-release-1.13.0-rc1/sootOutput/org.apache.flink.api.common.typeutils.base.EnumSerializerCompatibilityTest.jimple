public class org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest extends org.apache.flink.util.TestLogger
{
    public static org.junit.rules.TemporaryFolder temporaryFolder;
    private static final java.lang.String ENUM_NAME;
    private static final java.lang.String ENUM_A;
    private static final java.lang.String ENUM_B;
    private static final java.lang.String ENUM_C;
    private static final java.lang.String ENUM_D;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void checkIndenticalEnums() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String,java.lang.String)>("public enum EnumSerializerUpgradeTestEnum { A, B, C }", "public enum EnumSerializerUpgradeTestEnum { A, B, C }");

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void checkAppendedField() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String,java.lang.String)>("public enum EnumSerializerUpgradeTestEnum { A, B, C }", "public enum EnumSerializerUpgradeTestEnum { A, B, C, D }");

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void removingFieldShouldBeIncompatible() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String,java.lang.String)>("public enum EnumSerializerUpgradeTestEnum { A, B, C }", "public enum EnumSerializerUpgradeTestEnum { A, C }");

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void checkDifferentFieldOrder() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String,java.lang.String)>("public enum EnumSerializerUpgradeTestEnum { A, B, C }", "public enum EnumSerializerUpgradeTestEnum { A, C, B }");

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility checkCompatibility(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.String r0, r1;
        java.net.URLClassLoader r2, r46;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot r4;
        byte[] r5;
        org.junit.rules.TemporaryFolder $r12, $r44;
        java.io.File $r13, $r45;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r14, $r58;
        java.lang.Class $r15, $r59;
        java.io.ByteArrayOutputStream $r16;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r17;
        java.lang.Throwable $r19, $r20, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r33, r35, r37, r49, r52;
        java.io.ByteArrayInputStream $r47;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r50;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r53;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r61;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r12 = <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r13 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        r2 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.net.URLClassLoader compileAndLoadJava(java.io.File,java.lang.String,java.lang.String)>($r13, "EnumSerializerUpgradeTestEnum.java", r0);

        $r14 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r15 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("EnumSerializerUpgradeTestEnum");

        specialinvoke $r14.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>($r15);

        r4 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.base.EnumSerializer: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot snapshotConfiguration()>();

        $r16 = new java.io.ByteArrayOutputStream;

        specialinvoke $r16.<java.io.ByteArrayOutputStream: void <init>()>();

        r35 = null;

     label01:
        $r17 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r17.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r16);

        r37 = null;

     label02:
        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r17, r4, $r14);

        r5 = virtualinvoke $r16.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label03:
        if $r17 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r17.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        goto label13;

     label05:
        $r31 := @caughtexception;

        r37 = $r31;

        throw $r31;

     label06:
        $r25 := @caughtexception;

     label07:
        if $r17 == null goto label12;

        if r37 == null goto label11;

     label08:
        virtualinvoke $r17.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label09:
        goto label12;

     label10:
        $r22 := @caughtexception;

        virtualinvoke r37.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

        goto label12;

     label11:
        virtualinvoke $r17.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label12:
        throw $r25;

     label13:
        if $r16 == null goto label23;

        goto label14;

     label14:
        virtualinvoke $r16.<java.io.ByteArrayOutputStream: void close()>();

        goto label23;

     label15:
        $r28 := @caughtexception;

        r35 = $r28;

        throw $r28;

     label16:
        $r29 := @caughtexception;

     label17:
        if $r16 == null goto label22;

        if r35 == null goto label21;

     label18:
        virtualinvoke $r16.<java.io.ByteArrayOutputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r19 := @caughtexception;

        virtualinvoke r35.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label22;

     label21:
        virtualinvoke $r16.<java.io.ByteArrayOutputStream: void close()>();

     label22:
        throw $r29;

     label23:
        $r44 = <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r45 = virtualinvoke $r44.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        r46 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.net.URLClassLoader compileAndLoadJava(java.io.File,java.lang.String,java.lang.String)>($r45, "EnumSerializerUpgradeTestEnum.java", r1);

        $r47 = new java.io.ByteArrayInputStream;

        specialinvoke $r47.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5);

        r49 = null;

     label24:
        $r50 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r50.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r47);

        r52 = null;

     label25:
        r53 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r50, r46, $r14);

     label26:
        if $r50 == null goto label36;

        goto label27;

     label27:
        virtualinvoke $r50.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label36;

     label28:
        $r20 := @caughtexception;

        r52 = $r20;

        throw $r20;

     label29:
        $r26 := @caughtexception;

     label30:
        if $r50 == null goto label35;

        if r52 == null goto label34;

     label31:
        virtualinvoke $r50.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label32:
        goto label35;

     label33:
        $r23 := @caughtexception;

        virtualinvoke r52.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label35;

     label34:
        virtualinvoke $r50.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label35:
        throw $r26;

     label36:
        if $r47 == null goto label46;

        goto label37;

     label37:
        virtualinvoke $r47.<java.io.ByteArrayInputStream: void close()>();

        goto label46;

     label38:
        $r27 := @caughtexception;

        r49 = $r27;

        throw $r27;

     label39:
        $r33 := @caughtexception;

     label40:
        if $r47 == null goto label45;

        if r49 == null goto label44;

     label41:
        virtualinvoke $r47.<java.io.ByteArrayInputStream: void close()>();

     label42:
        goto label45;

     label43:
        $r32 := @caughtexception;

        virtualinvoke r49.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r32);

        goto label45;

     label44:
        virtualinvoke $r47.<java.io.ByteArrayInputStream: void close()>();

     label45:
        throw $r33;

     label46:
        $r58 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r59 = virtualinvoke r46.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("EnumSerializerUpgradeTestEnum");

        specialinvoke $r58.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>($r59);

        $r61 = interfaceinvoke r53.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r58);

        return $r61;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
        catch java.lang.Throwable from label25 to label26 with label28;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label28 to label30 with label29;
        catch java.lang.Throwable from label24 to label36 with label38;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label38 to label40 with label39;
    }

    static void <clinit>()
    {
        org.junit.rules.TemporaryFolder $r0;

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: java.lang.String ENUM_D> = "public enum EnumSerializerUpgradeTestEnum { A, C, B }";

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: java.lang.String ENUM_C> = "public enum EnumSerializerUpgradeTestEnum { A, C }";

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: java.lang.String ENUM_B> = "public enum EnumSerializerUpgradeTestEnum { A, B, C, D }";

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: java.lang.String ENUM_A> = "public enum EnumSerializerUpgradeTestEnum { A, B, C }";

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: java.lang.String ENUM_NAME> = "EnumSerializerUpgradeTestEnum";

        $r0 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r0.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.EnumSerializerCompatibilityTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r0;

        return;
    }
}
