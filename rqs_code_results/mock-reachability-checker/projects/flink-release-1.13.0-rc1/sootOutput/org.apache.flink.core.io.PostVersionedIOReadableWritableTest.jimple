public class org.apache.flink.core.io.PostVersionedIOReadableWritableTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testReadVersioned() throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, r2, r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        $r4 = "test-data";

        r1 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        r2 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] serializeWithPostVersionedReadableWritable(byte[])>(r1);

        $i0 = lengthof r1;

        r3 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] restoreWithPostVersionedReadableWritable(byte[],int)>(r2, $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, r3);

        return;
    }

    public void testReadNonVersioned() throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r2, r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        $r4 = newarray (byte)[4];

        $r4[0] = 0;

        $r4[1] = 0;

        $r4[2] = 2;

        $r4[3] = 51;

        r2 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] serializeWithNonVersionedReadableWritable(byte[])>($r4);

        $i0 = lengthof $r4;

        r3 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] restoreWithPostVersionedReadableWritable(byte[],int)>(r2, $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r4, r3);

        return;
    }

    public void testReadNonVersionedWithLongPayload() throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, r2, r3;
        java.lang.String $r4;
        int $i0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        $r4 = "test-data";

        r1 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        r2 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] serializeWithNonVersionedReadableWritable(byte[])>(r1);

        $i0 = lengthof r1;

        r3 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] restoreWithPostVersionedReadableWritable(byte[],int)>(r2, $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, r3);

        return;
    }

    public void testReadNonVersionedWithShortPayload() throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r2, r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        $r4 = newarray (byte)[2];

        $r4[0] = -15;

        $r4[1] = -51;

        r2 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] serializeWithNonVersionedReadableWritable(byte[])>($r4);

        $i0 = lengthof $r4;

        r3 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] restoreWithPostVersionedReadableWritable(byte[],int)>(r2, $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r4, r3);

        return;
    }

    public void testReadNonVersionedWithEmptyPayload() throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, r2, r3;
        int $i0;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        r1 = newarray (byte)[0];

        r2 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] serializeWithNonVersionedReadableWritable(byte[])>(r1);

        $i0 = lengthof r1;

        r3 = specialinvoke r0.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest: byte[] restoreWithPostVersionedReadableWritable(byte[],int)>(r2, $i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, r3);

        return;
    }

    private byte[] serializeWithNonVersionedReadableWritable(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, r3;
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestNonVersionedReadableWritable $r7;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.Throwable $r10, $r12, $r13, r14;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        r1 := @parameter0: byte[];

        $r7 = new org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestNonVersionedReadableWritable;

        specialinvoke $r7.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestNonVersionedReadableWritable: void <init>(byte[])>(r1);

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r14 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r7.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestNonVersionedReadableWritable: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        r3 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r12 := @caughtexception;

        r14 = $r12;

        throw $r12;

     label05:
        $r10 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r14 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r10;

     label12:
        return r3;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private byte[] serializeWithPostVersionedReadableWritable(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, r3;
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable $r7;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.Throwable $r10, $r12, $r13, r14;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        r1 := @parameter0: byte[];

        $r7 = new org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable;

        specialinvoke $r7.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable: void <init>(byte[])>(r1);

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r14 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r7.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        r3 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r10 := @caughtexception;

        r14 = $r10;

        throw $r10;

     label05:
        $r13 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r14 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        virtualinvoke r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r13;

     label12:
        return r3;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private byte[] restoreWithPostVersionedReadableWritable(byte[], int) throws java.io.IOException
    {
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest r0;
        byte[] r1, $r15;
        int i0;
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable $r6;
        org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestByteArrayInputStreamProducingOneByteAtATime $r7;
        java.lang.Throwable $r8, $r10, $r11, r12;

        r0 := @this: org.apache.flink.core.io.PostVersionedIOReadableWritableTest;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r6 = new org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable;

        specialinvoke $r6.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable: void <init>(int)>(i0);

        $r7 = new org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestByteArrayInputStreamProducingOneByteAtATime;

        specialinvoke $r7.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestByteArrayInputStreamProducingOneByteAtATime: void <init>(byte[])>(r1);

        r12 = null;

     label01:
        virtualinvoke $r6.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable: void read(java.io.InputStream)>($r7);

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r10 := @caughtexception;

        r12 = $r10;

        throw $r10;

     label05:
        $r8 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label11;

     label10:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label11:
        throw $r8;

     label12:
        $r15 = virtualinvoke $r6.<org.apache.flink.core.io.PostVersionedIOReadableWritableTest$TestPostVersionedReadableWritable: byte[] getData()>();

        return $r15;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static void assertEmpty(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.io.EOFException $r2;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

     label1:
        interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.EOFException from label1 to label2 with label3;
    }

    static void access$000(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        staticinvoke <org.apache.flink.core.io.PostVersionedIOReadableWritableTest: void assertEmpty(org.apache.flink.core.memory.DataInputView)>(r0);

        return;
    }
}
