public class org.apache.flink.api.common.io.EnumerateNestedFilesTest extends java.lang.Object
{
    public org.junit.rules.TemporaryFolder tempFolder;
    protected org.apache.flink.configuration.Configuration config;
    private org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format;

    public void <init>()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder> = $r1;

        return;
    }

    public void setup()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        org.apache.flink.configuration.Configuration $r1;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r2;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

        $r1 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r1.<org.apache.flink.configuration.Configuration: void <init>()>();

        r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config> = $r1;

        $r2 = new org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.EnumerateNestedFilesTest,org.apache.flink.api.common.io.EnumerateNestedFilesTest$1)>(r0, null);

        r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format> = $r2;

        return;
    }

    public void setdown() throws java.lang.Exception
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

        $r1 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        virtualinvoke $r2.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void close()>();

     label1:
        return;
    }

    public void testNoNestedDirectoryTrue()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        org.apache.flink.core.fs.FileInputSplit[] r1;
        org.apache.flink.core.fs.Path $r2;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r3, $r6, $r7;
        org.apache.flink.configuration.Configuration $r4, $r5;
        int $i0;
        long $l1;
        java.lang.Exception $r8;
        java.lang.String $r9, r10;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r10 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>("foo");

        $r3 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r2 = new org.apache.flink.core.fs.Path;

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r10);

        virtualinvoke $r3.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r2);

        $r4 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r6 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r5 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r6.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r1 = virtualinvoke $r7.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r1;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testOneNestedDirectoryTrue()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, $r7, $r9, $r11, $r16, $r22, r23;
        java.io.File r2, r3;
        org.apache.flink.core.fs.FileInputSplit[] r4;
        java.lang.String[] $r5;
        org.junit.rules.TemporaryFolder $r6;
        org.apache.flink.core.fs.Path $r13;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r14, $r19, $r20;
        java.net.URI $r15;
        org.apache.flink.configuration.Configuration $r17, $r18;
        int $i0;
        long $l1;
        java.lang.Exception $r21;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r23 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r6 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r23;

        $r5[1] = r1;

        r2 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r5);

        r3 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $r7 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r7, "paella");

        $r9 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r9, "kalamari");

        $r11 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r11, "fideua");

        $r14 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r13 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r3.<java.io.File: java.net.URI toURI()>();

        $r16 = virtualinvoke $r15.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r16);

        virtualinvoke $r14.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r13);

        $r17 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r17.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r19 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r18 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r19.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

        $r20 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r4 = virtualinvoke $r20.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testOneNestedDirectoryFalse()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, $r7, $r9, $r11, $r16, $r22, r23;
        java.io.File r2, r3;
        org.apache.flink.core.fs.FileInputSplit[] r4;
        java.lang.String[] $r5;
        org.junit.rules.TemporaryFolder $r6;
        org.apache.flink.core.fs.Path $r13;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r14, $r19, $r20;
        java.net.URI $r15;
        org.apache.flink.configuration.Configuration $r17, $r18;
        int $i0;
        long $l1;
        java.lang.Exception $r21;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r23 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r6 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r23;

        $r5[1] = r1;

        r2 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r5);

        r3 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $r7 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r7, "paella");

        $r9 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r9, "kalamari");

        $r11 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r11, "fideua");

        $r14 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r13 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r3.<java.io.File: java.net.URI toURI()>();

        $r16 = virtualinvoke $r15.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r16);

        virtualinvoke $r14.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r13);

        $r17 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r17.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 0);

        $r19 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r18 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r19.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

        $r20 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r4 = virtualinvoke $r20.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testTwoNestedDirectoriesTrue()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, r2, $r9, $r11, $r13, $r15, $r20, $r26, r27;
        java.io.File r3, r4, r5;
        org.apache.flink.core.fs.FileInputSplit[] r6;
        java.lang.String[] $r7;
        org.junit.rules.TemporaryFolder $r8;
        org.apache.flink.core.fs.Path $r17;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r18, $r23, $r24;
        java.net.URI $r19;
        org.apache.flink.configuration.Configuration $r21, $r22;
        int $i0;
        long $l1;
        java.lang.Exception $r25;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r27 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r8 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = r27;

        $r7[1] = r1;

        $r7[2] = r2;

        r3 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r7);

        r4 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        r5 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        $r9 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r9, "paella");

        $r11 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r11, "kalamari");

        $r13 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r13, "fideua");

        $r15 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r15, "bravas");

        $r18 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r17 = new org.apache.flink.core.fs.Path;

        $r19 = virtualinvoke r5.<java.io.File: java.net.URI toURI()>();

        $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r20);

        virtualinvoke $r18.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r17);

        $r21 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r21.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r23 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r22 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r23.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r22);

        $r24 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r6 = virtualinvoke $r24.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r6;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

     label2:
        goto label4;

     label3:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

        $r26 = virtualinvoke $r25.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r26);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testOnlyLevel2NestedDirectories()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, r2, r3, $r16, $r18, $r20, $r22, $r26, $r32, r33;
        java.io.File r4, r5, r6;
        org.apache.flink.core.fs.FileInputSplit[] r7;
        org.junit.rules.TemporaryFolder $r8, $r10, $r13, $r15;
        java.lang.String[] $r9, $r12, $r14;
        org.apache.flink.core.fs.Path $r24;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r25, $r29, $r30;
        org.apache.flink.configuration.Configuration $r27, $r28;
        int $i0;
        long $l1;
        java.lang.Exception $r31;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r33 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r3 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r8 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        r4 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String)>(r33);

        $r10 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = r33;

        $r9[1] = r1;

        virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r9);

        $r13 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = r33;

        $r12[1] = r1;

        $r12[2] = r2;

        r5 = virtualinvoke $r13.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r12);

        $r15 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r14 = newarray (java.lang.String)[3];

        $r14[0] = r33;

        $r14[1] = r1;

        $r14[2] = r3;

        r6 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r14);

        $r16 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r16, "paella");

        $r18 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r18, "kalamari");

        $r20 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r20, "fideua");

        $r22 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r22, "bravas");

        $r25 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r24 = new org.apache.flink.core.fs.Path;

        $r26 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r24.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r26);

        virtualinvoke $r25.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r24);

        $r27 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r27.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r29 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r28 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r29.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r28);

        $r30 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r7 = virtualinvoke $r30.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r7;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

     label2:
        goto label4;

     label3:
        $r31 := @caughtexception;

        virtualinvoke $r31.<java.lang.Exception: void printStackTrace()>();

        $r32 = virtualinvoke $r31.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r32);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testTwoNestedDirectoriesWithFilteredFilesTrue()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, r2, r3, r4, $r14, $r18, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r42, $r48, r49;
        java.io.File r5, r6, r7, r8, r9, $r24;
        org.apache.flink.core.fs.FileInputSplit[] r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r19;
        java.lang.String[] $r20, $r22;
        org.junit.rules.TemporaryFolder $r21, $r23;
        org.apache.flink.core.fs.Path $r39;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r40, $r45, $r46;
        java.net.URI $r41;
        org.apache.flink.configuration.Configuration $r43, $r44;
        int $i0;
        long $l1;
        java.lang.Exception $r47;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r49 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r14 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r3 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r18 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r4 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r20 = newarray (java.lang.String)[4];

        $r20[0] = r49;

        $r20[1] = r1;

        $r20[2] = r2;

        $r20[3] = r4;

        r5 = virtualinvoke $r21.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r20);

        r6 = virtualinvoke r5.<java.io.File: java.io.File getParentFile()>();

        r7 = virtualinvoke r6.<java.io.File: java.io.File getParentFile()>();

        r8 = virtualinvoke r7.<java.io.File: java.io.File getParentFile()>();

        $r23 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r22 = newarray (java.lang.String)[2];

        $r22[0] = r49;

        $r22[1] = r3;

        r9 = virtualinvoke $r23.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r22);

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>(r8, "_IWillBeFiltered");

        virtualinvoke $r24.<java.io.File: boolean createNewFile()>();

        $r25 = virtualinvoke r8.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r25, "paella");

        $r27 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r27, "kalamari");

        $r29 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r29, "fideua");

        $r31 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r31, "bravas");

        $r33 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r33, "kalamari");

        $r35 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r35, "fideua");

        $r37 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r37, "bravas");

        $r40 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r39 = new org.apache.flink.core.fs.Path;

        $r41 = virtualinvoke r8.<java.io.File: java.net.URI toURI()>();

        $r42 = virtualinvoke $r41.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r39.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r42);

        virtualinvoke $r40.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r39);

        $r43 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r43.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r45 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r44 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r45.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r44);

        $r46 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r11 = virtualinvoke $r46.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r11;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

     label2:
        goto label4;

     label3:
        $r47 := @caughtexception;

        virtualinvoke $r47.<java.lang.Exception: void printStackTrace()>();

        $r48 = virtualinvoke $r47.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r48);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testGetStatisticsOneFileInNestedDir()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, r2, $r8, $r13, $r19;
        java.io.File r3, r4;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r5;
        java.lang.String[] $r6;
        org.junit.rules.TemporaryFolder $r7;
        org.apache.flink.core.fs.Path $r10;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r11, $r16, $r17;
        java.net.URI $r12;
        org.apache.flink.configuration.Configuration $r14, $r15;
        long $l0;
        java.lang.Exception $r18;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r7 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        r3 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r6);

        r4 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        $r8 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r8, 512000L);

        $r11 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r10 = new org.apache.flink.core.fs.Path;

        $r12 = virtualinvoke r4.<java.io.File: java.net.URI toURI()>();

        $r13 = virtualinvoke $r12.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r13);

        virtualinvoke $r11.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r10);

        $r14 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r14.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r16 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r15 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r16.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r15);

        $r17 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r5 = virtualinvoke $r17.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l0 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 512000L, $l0);

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

        $r19 = virtualinvoke $r18.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r19);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testGetStatisticsMultipleNestedFiles()
    {
        org.apache.flink.api.common.io.EnumerateNestedFilesTest r0;
        java.lang.String r1, r2, r3, $r13, $r15, $r17, $r19, $r24, $r29, $r33;
        java.io.File r4, r5, r6;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r7, r8;
        java.lang.String[] $r9, $r11;
        org.junit.rules.TemporaryFolder $r10, $r12;
        org.apache.flink.core.fs.Path $r21;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat $r22, $r27, $r28, $r31;
        java.net.URI $r23;
        org.apache.flink.configuration.Configuration $r25, $r26;
        long $l4, $l5;
        java.lang.Exception $r32;

        r0 := @this: org.apache.flink.api.common.io.EnumerateNestedFilesTest;

     label1:
        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        r3 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String randomFileName()>();

        $r10 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = r1;

        $r9[1] = r2;

        r4 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r9);

        $r12 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = r1;

        $r11[1] = r3;

        r5 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFolder(java.lang.String[])>($r11);

        r6 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        $r13 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r13, 2077L);

        $r15 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r15, 31909L);

        $r17 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r17, 10L);

        $r19 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r19, 71L);

        $r22 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r21 = new org.apache.flink.core.fs.Path;

        $r23 = virtualinvoke r6.<java.io.File: java.net.URI toURI()>();

        $r24 = virtualinvoke $r23.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r24);

        virtualinvoke $r22.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r21);

        $r25 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r25.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>("recursive.file.enumeration", 1);

        $r27 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        $r26 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.configuration.Configuration config>;

        virtualinvoke $r27.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r26);

        $r28 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r7 = virtualinvoke $r28.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l4 = interfaceinvoke r7.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 34067L, $l4);

        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

        $r29 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>($r29, 42L);

        $r31 = r0.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat format>;

        r8 = virtualinvoke $r31.<org.apache.flink.api.common.io.EnumerateNestedFilesTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r7);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r8, r7);

        $l5 = interfaceinvoke r8.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 34109L, $l5);

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.lang.Exception: void printStackTrace()>();

        $r33 = virtualinvoke $r32.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r33);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
