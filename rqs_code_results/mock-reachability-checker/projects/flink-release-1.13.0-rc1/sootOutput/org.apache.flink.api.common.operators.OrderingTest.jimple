public class org.apache.flink.api.common.operators.OrderingTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.OrderingTest r0;

        r0 := @this: org.apache.flink.api.common.operators.OrderingTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testNewOrdering()
    {
        org.apache.flink.api.common.operators.OrderingTest r0;
        org.apache.flink.api.common.operators.Ordering $r2;
        java.lang.Integer $r3, $r6, $r9;
        org.apache.flink.api.common.operators.Order $r4, $r7, $r10;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;
        int[] $r12, $r13;
        java.lang.Class[] $r14, $r15;
        boolean[] $r16, $r17;

        r0 := @this: org.apache.flink.api.common.operators.OrderingTest;

        $r2 = new org.apache.flink.api.common.operators.Ordering;

        specialinvoke $r2.<org.apache.flink.api.common.operators.Ordering: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r4 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ASCENDING>;

        virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer,java.lang.Class,org.apache.flink.api.common.operators.Order)>($r3, class "Ljava/lang/Integer;", $r4);

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order DESCENDING>;

        virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer,java.lang.Class,org.apache.flink.api.common.operators.Order)>($r6, class "Ljava/lang/Long;", $r7);

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r10 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ASCENDING>;

        virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer,java.lang.Class,org.apache.flink.api.common.operators.Order)>($r9, class "Ljava/lang/String;", $r10);

        $i4 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $r12 = newarray (int)[2];

        $r12[0] = 3;

        $r12[1] = 1;

        $r13 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r12, $r13);

        $r14 = newarray (java.lang.Class)[2];

        $r14[0] = class "Ljava/lang/Integer;";

        $r14[1] = class "Ljava/lang/Long;";

        $r15 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: java.lang.Class[] getTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r14, $r15);

        $r16 = newarray (boolean)[2];

        $r16[0] = 1;

        $r16[1] = 0;

        $r17 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(boolean[],boolean[])>($r16, $r17);

        return;
    }
}
