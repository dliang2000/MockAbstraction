public class org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testExtractInputFormatType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DummyFloatInputFormat $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;
        java.lang.Exception $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

     label1:
        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DummyFloatInputFormat;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DummyFloatInputFormat: void <init>()>();

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>($r2);

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r5 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testExtractDerivedInputFormatType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r1;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedInputFormat $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r5, $r7, $r9;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedTupleInputFormat $r4;
        boolean $z0, $z1;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6, $r8, $r10, r14, r16;
        java.lang.Exception $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

     label1:
        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedInputFormat;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedInputFormat: void <init>()>();

        r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>($r2);

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r14);

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedTupleInputFormat;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$DerivedTupleInputFormat: void <init>()>();

        r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>($r4);

        $z0 = virtualinvoke r16.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = r16 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        r1 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r16;

        $i0 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r8 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r10 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r12 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testMultiLevelDerivedInputFormatType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r5, $r7, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r2;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$FinalRelativeInputFormat $r3;
        boolean $z0, $z1;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r6, $r8;
        java.lang.Exception $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

     label1:
        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$FinalRelativeInputFormat;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$FinalRelativeInputFormat: void <init>()>();

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>($r3);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = r1 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        r2 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r1;

        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r5 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r9 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r11 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testQueryableFormatType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$QueryableInputFormat $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;
        java.lang.Exception $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest;

     label1:
        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$QueryableInputFormat;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorInputFormatsTest$QueryableInputFormat: void <init>()>();

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getInputFormatTypes(org.apache.flink.api.common.io.InputFormat)>($r2);

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r5 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
