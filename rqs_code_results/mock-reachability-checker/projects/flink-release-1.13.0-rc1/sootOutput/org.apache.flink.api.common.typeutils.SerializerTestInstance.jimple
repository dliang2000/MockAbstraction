public class org.apache.flink.api.common.typeutils.SerializerTestInstance extends org.apache.flink.api.common.typeutils.SerializerTestBase
{
    private final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    private final java.lang.Class typeClass;
    private final int length;
    private final java.lang.Object[] testData;

    public transient void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class, int, java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class r2;
        int i0;
        java.lang.Object[] r3;
        org.apache.flink.testutils.DeeplyEqualsChecker $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.Object[];

        $r4 = new org.apache.flink.testutils.DeeplyEqualsChecker;

        specialinvoke $r4.<org.apache.flink.testutils.DeeplyEqualsChecker: void <init>()>();

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.testutils.DeeplyEqualsChecker,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>($r4, r1, r2, i0, r3);

        return;
    }

    public transient void <init>(org.apache.flink.testutils.DeeplyEqualsChecker, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class, int, java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        org.apache.flink.testutils.DeeplyEqualsChecker r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Class r3;
        int i0;
        java.lang.Object[] r4;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        r1 := @parameter0: org.apache.flink.testutils.DeeplyEqualsChecker;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.Object[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>(org.apache.flink.testutils.DeeplyEqualsChecker)>(r1);

        r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r2;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: java.lang.Class typeClass> = r3;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: int length> = i0;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: java.lang.Object[] testData> = r4;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $i0 = r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: int length>;

        return $i0;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: java.lang.Class typeClass>;

        return $r1;
    }

    protected java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: java.lang.Object[] testData>;

        return $r1;
    }

    public void testAll()
    {
        org.apache.flink.api.common.typeutils.SerializerTestInstance r0;
        java.lang.reflect.Method[] r1;
        int i0, i1;
        java.lang.reflect.Method r2;
        java.lang.Class $r3;
        java.lang.'annotation'.Annotation $r4;
        java.lang.Object[] $r5;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalAccessException $r9;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r13, $r15;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestInstance;

        $r3 = class "Lorg/apache/flink/api/common/typeutils/SerializerTestBase;";

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r2 = r1[i1];

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/junit/Test;");

        if $r4 != null goto label2;

        goto label6;

     label2:
        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to invoke test ");

        $r13 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r9);

        throw $r10;

     label5:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestInstance: void sneakyThrow(java.lang.Throwable)>($r8);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
    }

    private static void sneakyThrow(java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        throw r0;
    }
}
