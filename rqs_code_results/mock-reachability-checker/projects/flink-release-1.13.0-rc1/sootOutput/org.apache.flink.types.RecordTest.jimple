public class org.apache.flink.types.RecordTest extends java.lang.Object
{
    private static final long SEED;
    private final java.util.Random rand;
    private org.apache.flink.core.memory.DataInputView in;
    private org.apache.flink.core.memory.DataOutputView out;
    private final org.apache.flink.types.StringValue origVal1;
    private final org.apache.flink.types.DoubleValue origVal2;
    private final org.apache.flink.types.IntValue origVal3;

    public void <init>()
    {
        org.apache.flink.types.RecordTest r0;
        java.util.Random $r1;
        org.apache.flink.types.StringValue $r2;
        org.apache.flink.types.DoubleValue $r3;
        org.apache.flink.types.IntValue $r4;

        r0 := @this: org.apache.flink.types.RecordTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(354144423270432543L);

        r0.<org.apache.flink.types.RecordTest: java.util.Random rand> = $r1;

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hello World!");

        r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1> = $r2;

        $r3 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r3.<org.apache.flink.types.DoubleValue: void <init>(double)>(3.141592653589793);

        r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.DoubleValue origVal2> = $r3;

        $r4 = new org.apache.flink.types.IntValue;

        specialinvoke $r4.<org.apache.flink.types.IntValue: void <init>(int)>(1337);

        r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.IntValue origVal3> = $r4;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.flink.types.RecordTest r0;
        java.io.PipedInputStream $r3;
        java.io.PipedOutputStream $r4;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r5;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r6;

        r0 := @this: org.apache.flink.types.RecordTest;

        $r3 = new java.io.PipedInputStream;

        specialinvoke $r3.<java.io.PipedInputStream: void <init>(int)>(1048576);

        $r4 = new java.io.PipedOutputStream;

        specialinvoke $r4.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>($r3);

        $r5 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r5.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r3);

        r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in> = $r5;

        $r6 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r6.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r4);

        r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out> = $r6;

        return;
    }

    public void testEmptyRecordSerialization()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Record $r1, $r5, $r7;
        org.apache.flink.core.memory.DataOutputView $r2, $r6;
        org.apache.flink.core.memory.DataInputView $r3, $r8;
        int $i0, $i1;
        java.lang.Throwable $r10;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.String $r13, $r15;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        $r1 = new org.apache.flink.types.Record;

        specialinvoke $r1.<org.apache.flink.types.Record: void <init>()>();

        $r2 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r1.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r2);

        $r3 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r1.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r3);

        $i0 = virtualinvoke $r1.<org.apache.flink.types.Record: int getNumFields()>();

        if $i0 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Deserialized Empty record is not another empty record.", $z0);

        $r5 = new org.apache.flink.types.Record;

        specialinvoke $r5.<org.apache.flink.types.Record: void <init>()>();

        $r6 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r5.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r6);

        $r7 = new org.apache.flink.types.Record;

        specialinvoke $r7.<org.apache.flink.types.Record: void <init>()>();

        $r8 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r7.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r8);

        $i1 = virtualinvoke $r7.<org.apache.flink.types.Record: int getNumFields()>();

        if $i1 != 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Deserialized Empty record is not another empty record.", $z1);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r13 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r15);

     label8:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    public void testAddField()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Record $r1, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        org.apache.flink.types.StringValue $r2, $r3, $r6, $r11, $r16, r33;
        java.lang.String $r4, $r7, $r25, $r27;
        org.apache.flink.types.Value $r5, $r13, $r14, $r15, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.flink.types.DoubleValue $r10, $r17, r34;
        org.apache.flink.types.IntValue $r12, $r18, $r19, r31, r35;
        java.util.Random $r20;
        java.lang.Throwable $r22;
        java.lang.StringBuilder $r23, $r24, $r26;

        r0 := @this: org.apache.flink.types.RecordTest;

     label01:
        $r1 = new org.apache.flink.types.Record;

        specialinvoke $r1.<org.apache.flink.types.Record: void <init>()>();

        $i0 = virtualinvoke $r1.<org.apache.flink.types.Record: int getNumFields()>();

        if $i0 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r2 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        virtualinvoke $r1.<org.apache.flink.types.Record: void addField(org.apache.flink.types.Value)>($r2);

        $i1 = virtualinvoke $r1.<org.apache.flink.types.Record: int getNumFields()>();

        if $i1 != 1 goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r3 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        $r4 = virtualinvoke $r3.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $r5 = virtualinvoke $r1.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/StringValue;");

        $r6 = (org.apache.flink.types.StringValue) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = new org.apache.flink.types.Record;

        specialinvoke $r8.<org.apache.flink.types.Record: void <init>()>();

        i8 = 0;

     label06:
        if i8 >= 100 goto label11;

        $r19 = new org.apache.flink.types.IntValue;

        $r20 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $i3 = virtualinvoke $r20.<java.util.Random: int nextInt()>();

        specialinvoke $r19.<org.apache.flink.types.IntValue: void <init>(int)>($i3);

        virtualinvoke $r8.<org.apache.flink.types.Record: void addField(org.apache.flink.types.Value)>($r19);

        $r21 = virtualinvoke $r8.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i8, class "Lorg/apache/flink/types/IntValue;");

        r31 = (org.apache.flink.types.IntValue) $r21;

        $i4 = virtualinvoke $r8.<org.apache.flink.types.Record: int getNumFields()>();

        $i5 = i8 + 1;

        if $i4 != $i5 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $i6 = virtualinvoke $r19.<org.apache.flink.types.IntValue: int getValue()>();

        $i7 = virtualinvoke r31.<org.apache.flink.types.IntValue: int getValue()>();

        if $i6 != $i7 goto label09;

        $z7 = 1;

        goto label10;

     label09:
        $z7 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        i8 = i8 + 1;

        goto label06;

     label11:
        $r9 = new org.apache.flink.types.Record;

        $r11 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        $r10 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.DoubleValue origVal2>;

        specialinvoke $r9.<org.apache.flink.types.Record: void <init>(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r11, $r10);

        $r12 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.IntValue origVal3>;

        virtualinvoke $r9.<org.apache.flink.types.Record: void addField(org.apache.flink.types.Value)>($r12);

        $i2 = virtualinvoke $r9.<org.apache.flink.types.Record: int getNumFields()>();

        if $i2 != 3 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r13 = virtualinvoke $r9.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/StringValue;");

        r33 = (org.apache.flink.types.StringValue) $r13;

        $r14 = virtualinvoke $r9.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/DoubleValue;");

        r34 = (org.apache.flink.types.DoubleValue) $r14;

        $r15 = virtualinvoke $r9.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(2, class "Lorg/apache/flink/types/IntValue;");

        r35 = (org.apache.flink.types.IntValue) $r15;

        $r16 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        $z1 = virtualinvoke r33.<org.apache.flink.types.StringValue: boolean equals(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("The value of the first field has changed", $z1);

        $r17 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.DoubleValue origVal2>;

        $z2 = virtualinvoke r34.<org.apache.flink.types.DoubleValue: boolean equals(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("The value of the second field changed", $z2);

        $r18 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.IntValue origVal3>;

        $z3 = virtualinvoke r35.<org.apache.flink.types.IntValue: boolean equals(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("The value of the third field has changed", $z3);

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r25 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r27);

     label16:
        return;

        catch java.lang.Throwable from label01 to label14 with label15;
    }

    public void testRemoveField()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.StringValue r1, $r5, $r10;
        org.apache.flink.types.IntValue r2, $r6, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        org.apache.flink.types.Record $r3, r15, r16;
        org.apache.flink.types.DoubleValue $r4;
        org.apache.flink.types.Value $r7, $r8;
        java.lang.String $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Random $r13;

        r0 := @this: org.apache.flink.types.RecordTest;

        $r3 = new org.apache.flink.types.Record;

        $r5 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        $r4 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.DoubleValue origVal2>;

        specialinvoke $r3.<org.apache.flink.types.Record: void <init>(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r5, $r4);

        $r6 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.IntValue origVal3>;

        virtualinvoke $r3.<org.apache.flink.types.Record: void addField(org.apache.flink.types.Value)>($r6);

        virtualinvoke $r3.<org.apache.flink.types.Record: void removeField(int)>(1);

        $i1 = virtualinvoke $r3.<org.apache.flink.types.Record: int getNumFields()>();

        if $i1 != 2 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = virtualinvoke $r3.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/StringValue;");

        r1 = (org.apache.flink.types.StringValue) $r7;

        $r8 = virtualinvoke $r3.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/IntValue;");

        r2 = (org.apache.flink.types.IntValue) $r8;

        $r9 = virtualinvoke r1.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $r10 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.StringValue origVal1>;

        $r11 = virtualinvoke $r10.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i2 = virtualinvoke r2.<org.apache.flink.types.IntValue: int getValue()>();

        $r12 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.IntValue origVal3>;

        $i3 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        if $i2 != $i3 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        r15 = specialinvoke r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.Record generateFilledDenseRecord(int)>(100);

        i12 = virtualinvoke r15.<org.apache.flink.types.Record: int getNumFields()>();

        virtualinvoke r15.<org.apache.flink.types.Record: void removeField(int)>(0);

        $i4 = virtualinvoke r15.<org.apache.flink.types.Record: int getNumFields()>();

        $i5 = i12 - 1;

        if $i4 != $i5 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        i13 = virtualinvoke r15.<org.apache.flink.types.Record: int getNumFields()>();

        $i6 = i13 - 1;

        virtualinvoke r15.<org.apache.flink.types.Record: void removeField(int)>($i6);

        $i7 = virtualinvoke r15.<org.apache.flink.types.Record: int getNumFields()>();

        $i8 = i13 - 1;

        if $i7 != $i8 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        r16 = specialinvoke r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.Record generateFilledDenseRecord(int)>(100);

        i14 = 0;

     label09:
        if i14 >= 100 goto label12;

        i15 = virtualinvoke r16.<org.apache.flink.types.Record: int getNumFields()>();

        $r13 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $i9 = virtualinvoke r16.<org.apache.flink.types.Record: int getNumFields()>();

        i0 = virtualinvoke $r13.<java.util.Random: int nextInt(int)>($i9);

        virtualinvoke r16.<org.apache.flink.types.Record: void removeField(int)>(i0);

        $i10 = virtualinvoke r16.<org.apache.flink.types.Record: int getNumFields()>();

        $i11 = i15 - 1;

        if $i10 != $i11 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        i14 = i14 + 1;

        goto label09;

     label12:
        return;
    }

    public void testSetNullInt()
    {
        org.apache.flink.types.RecordTest r0;
        int $i0;
        org.apache.flink.types.Value $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        org.apache.flink.types.Record r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        r8 = specialinvoke r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.Record generateFilledDenseRecord(int)>(58);

        virtualinvoke r8.<org.apache.flink.types.Record: void setNull(int)>(42);

        $i0 = virtualinvoke r8.<org.apache.flink.types.Record: int getNumFields()>();

        if $i0 != 58 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r1 = virtualinvoke r8.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(42, class "Lorg/apache/flink/types/IntValue;");

        if $r1 != null goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r7);

     label8:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    public void testSetNullLong()
    {
        org.apache.flink.types.RecordTest r0;
        long l0, $l2, $l3;
        int $i1, i5;
        byte $b4;
        org.apache.flink.types.Value $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;
        org.apache.flink.types.Record r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.RecordTest;

     label01:
        r8 = specialinvoke r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.Record generateFilledDenseRecord(int)>(58);

        l0 = specialinvoke r0.<org.apache.flink.types.RecordTest: long generateRandomBitmask(int)>(58);

        virtualinvoke r8.<org.apache.flink.types.Record: void setNull(long)>(l0);

        i5 = 0;

     label02:
        if i5 >= 58 goto label06;

        $l2 = 1L << i5;

        $l3 = $l2 & l0;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label05;

        $r1 = virtualinvoke r8.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i5, class "Lorg/apache/flink/types/IntValue;");

        if $r1 != null goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label05:
        i5 = i5 + 1;

        goto label02;

     label06:
        $i1 = virtualinvoke r8.<org.apache.flink.types.Record: int getNumFields()>();

        if $i1 != 58 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label09:
        goto label11;

     label10:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r7);

     label11:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
    }

    public void testSetNullLongArray()
    {
        org.apache.flink.types.RecordTest r0;
        int i0, $i2, $i3, $i4, i6, $i7, $i8;
        long[] $r1, r14;
        org.apache.flink.types.Value $r2, $r3, $r4, $r5;
        long $l5;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;
        org.apache.flink.types.Record r12;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.types.RecordTest;

     label01:
        r12 = specialinvoke r0.<org.apache.flink.types.RecordTest: org.apache.flink.types.Record generateFilledDenseRecord(int)>(612);

        $r1 = newarray (long)[4];

        $r1[0] = 1L;

        $r1[1] = 1L;

        $r1[2] = 1L;

        $r1[3] = 1L;

        virtualinvoke r12.<org.apache.flink.types.Record: void setNull(long[])>($r1);

        $r2 = virtualinvoke r12.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        if $r2 != null goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = virtualinvoke r12.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(64, class "Lorg/apache/flink/types/IntValue;");

        if $r3 != null goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r4 = virtualinvoke r12.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(128, class "Lorg/apache/flink/types/IntValue;");

        if $r4 != null goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r5 = virtualinvoke r12.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(192, class "Lorg/apache/flink/types/IntValue;");

        if $r5 != null goto label08;

        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        r14 = newarray (long)[10];

        i6 = 0;

     label10:
        $i7 = lengthof r14;

        if i6 >= $i7 goto label13;

        i0 = i6 * 64;

        $i2 = i0 + 64;

        $i3 = virtualinvoke r12.<org.apache.flink.types.Record: int getNumFields()>();

        if $i2 >= $i3 goto label11;

        $i8 = 64;

        goto label12;

     label11:
        $i4 = virtualinvoke r12.<org.apache.flink.types.Record: int getNumFields()>();

        $i8 = $i4 - i0;

     label12:
        $l5 = specialinvoke r0.<org.apache.flink.types.RecordTest: long generateRandomBitmask(int)>($i8);

        r14[i6] = $l5;

        i6 = i6 + 1;

        goto label10;

     label13:
        virtualinvoke r12.<org.apache.flink.types.Record: void setNull(long[])>(r14);

     label14:
        goto label16;

     label15:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r9 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label16:
        return;

        catch java.lang.Throwable from label01 to label14 with label15;
    }

    public void testUpdateBinaryRepresentations()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Record $r1, $r14, $r16, $r23;
        org.apache.flink.types.IntValue $r2, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r18, $r21, $r26, $r28, $r30, $r32, $r40, $r42, $r46, $r47;
        org.apache.flink.types.Value $r6, $r8, $r10, $r12, $r25, $r27, $r29, $r31, $r33, $r36, $r39, $r41, $r43, $r44, $r45;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        org.apache.flink.core.memory.DataOutputView $r15, $r22;
        org.apache.flink.core.memory.DataInputView $r17, $r24;
        org.apache.flink.types.StringValue $r19, $r20, $r34, $r37;
        java.lang.String $r35, $r38, $r51, $r53, $r57, $r59, $r63, $r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Exception $r48;
        java.lang.StringBuilder $r49, $r50, $r52, $r55, $r56, $r58, $r61, $r62, $r64;
        java.lang.RuntimeException $r54;
        java.lang.Throwable $r60;

        r0 := @this: org.apache.flink.types.RecordTest;

     label01:
        $r1 = new org.apache.flink.types.Record;

        specialinvoke $r1.<org.apache.flink.types.Record: void <init>()>();

        $r2 = new org.apache.flink.types.IntValue;

        specialinvoke $r2.<org.apache.flink.types.IntValue: void <init>(int)>(1);

        $r3 = new org.apache.flink.types.IntValue;

        specialinvoke $r3.<org.apache.flink.types.IntValue: void <init>(int)>(2);

     label02:
        virtualinvoke $r1.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(1, $r2);

        virtualinvoke $r1.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(3, $r3);

        virtualinvoke $r1.<org.apache.flink.types.Record: void setNumFields(int)>(5);

        virtualinvoke $r1.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        $r4 = new org.apache.flink.types.IntValue;

        specialinvoke $r4.<org.apache.flink.types.IntValue: void <init>(int)>(3);

        $r5 = new org.apache.flink.types.IntValue;

        specialinvoke $r5.<org.apache.flink.types.IntValue: void <init>(int)>(4);

        virtualinvoke $r1.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(7, $r4);

        virtualinvoke $r1.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(8, $r5);

        virtualinvoke $r1.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        $r6 = virtualinvoke $r1.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/IntValue;");

        $r7 = (org.apache.flink.types.IntValue) $r6;

        $i0 = virtualinvoke $r7.<org.apache.flink.types.IntValue: int getValue()>();

        if $i0 != 1 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = virtualinvoke $r1.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(3, class "Lorg/apache/flink/types/IntValue;");

        $r9 = (org.apache.flink.types.IntValue) $r8;

        $i1 = virtualinvoke $r9.<org.apache.flink.types.IntValue: int getValue()>();

        if $i1 != 2 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r10 = virtualinvoke $r1.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(7, class "Lorg/apache/flink/types/IntValue;");

        $r11 = (org.apache.flink.types.IntValue) $r10;

        $i2 = virtualinvoke $r11.<org.apache.flink.types.IntValue: int getValue()>();

        if $i2 != 3 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r12 = virtualinvoke $r1.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(8, class "Lorg/apache/flink/types/IntValue;");

        $r13 = (org.apache.flink.types.IntValue) $r12;

        $i3 = virtualinvoke $r13.<org.apache.flink.types.IntValue: int getValue()>();

        if $i3 != 4 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label11:
        goto label13;

     label12:
        $r54 := @caughtexception;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error updating binary representation: ");

        $r57 = virtualinvoke $r54.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r59);

     label13:
        $r14 = new org.apache.flink.types.Record;

        specialinvoke $r14.<org.apache.flink.types.Record: void <init>()>();

        i11 = 0;

     label14:
        if i11 >= 8 goto label15;

        $r47 = new org.apache.flink.types.IntValue;

        specialinvoke $r47.<org.apache.flink.types.IntValue: void <init>(int)>(i11);

        virtualinvoke $r14.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i11, $r47);

        i11 = i11 + 1;

        goto label14;

     label15:
        $r15 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r14.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r15);

        $r16 = new org.apache.flink.types.Record;

        specialinvoke $r16.<org.apache.flink.types.Record: void <init>()>();

        $r17 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r16.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r17);

        $r18 = new org.apache.flink.types.IntValue;

        specialinvoke $r18.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        virtualinvoke $r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(1, $r18);

        $r19 = new org.apache.flink.types.StringValue;

        specialinvoke $r19.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Some long value");

        virtualinvoke $r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(4, $r19);

        $r20 = new org.apache.flink.types.StringValue;

        specialinvoke $r20.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("An even longer value");

        virtualinvoke $r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(5, $r20);

        $r21 = new org.apache.flink.types.IntValue;

        specialinvoke $r21.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        virtualinvoke $r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(10, $r21);

        $r22 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r16.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r22);

        $r23 = new org.apache.flink.types.Record;

        specialinvoke $r23.<org.apache.flink.types.Record: void <init>()>();

        $r24 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r23.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r24);

        $r25 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i4 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        if $i4 != 0 goto label16;

        $z6 = 1;

        goto label17;

     label16:
        $z6 = 0;

     label17:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r27 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/IntValue;");

        $r28 = (org.apache.flink.types.IntValue) $r27;

        $i5 = virtualinvoke $r28.<org.apache.flink.types.IntValue: int getValue()>();

        if $i5 != 10 goto label18;

        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r29 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(2, class "Lorg/apache/flink/types/IntValue;");

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i6 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        if $i6 != 2 goto label20;

        $z8 = 1;

        goto label21;

     label20:
        $z8 = 0;

     label21:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r31 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(3, class "Lorg/apache/flink/types/IntValue;");

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i7 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        if $i7 != 3 goto label22;

        $z9 = 1;

        goto label23;

     label22:
        $z9 = 0;

     label23:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r33 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(4, class "Lorg/apache/flink/types/StringValue;");

        $r34 = (org.apache.flink.types.StringValue) $r33;

        $r35 = virtualinvoke $r34.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z0 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>("Some long value");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r36 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(5, class "Lorg/apache/flink/types/StringValue;");

        $r37 = (org.apache.flink.types.StringValue) $r36;

        $r38 = virtualinvoke $r37.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        $z1 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>("An even longer value");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r39 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(6, class "Lorg/apache/flink/types/IntValue;");

        $r40 = (org.apache.flink.types.IntValue) $r39;

        $i8 = virtualinvoke $r40.<org.apache.flink.types.IntValue: int getValue()>();

        if $i8 != 6 goto label24;

        $z10 = 1;

        goto label25;

     label24:
        $z10 = 0;

     label25:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $r41 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(7, class "Lorg/apache/flink/types/IntValue;");

        $r42 = (org.apache.flink.types.IntValue) $r41;

        $i9 = virtualinvoke $r42.<org.apache.flink.types.IntValue: int getValue()>();

        if $i9 != 7 goto label26;

        $z11 = 1;

        goto label27;

     label26:
        $z11 = 0;

     label27:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r43 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(8, class "Lorg/apache/flink/types/IntValue;");

        if $r43 != null goto label28;

        $z12 = 1;

        goto label29;

     label28:
        $z12 = 0;

     label29:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        $r44 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(9, class "Lorg/apache/flink/types/IntValue;");

        if $r44 != null goto label30;

        $z13 = 1;

        goto label31;

     label30:
        $z13 = 0;

     label31:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r45 = virtualinvoke $r23.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(10, class "Lorg/apache/flink/types/IntValue;");

        $r46 = (org.apache.flink.types.IntValue) $r45;

        $i10 = virtualinvoke $r46.<org.apache.flink.types.IntValue: int getValue()>();

        if $i10 != 10 goto label32;

        $z14 = 1;

        goto label33;

     label32:
        $z14 = 0;

     label33:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label34:
        goto label36;

     label35:
        $r48 := @caughtexception;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error updating binary representation: ");

        $r51 = virtualinvoke $r48.<java.lang.Exception: java.lang.String getMessage()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r53);

     label36:
        goto label38;

     label37:
        $r60 := @caughtexception;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r63 = virtualinvoke $r60.<java.lang.Throwable: java.lang.String getMessage()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r65);

     label38:
        return;

        catch java.lang.RuntimeException from label02 to label11 with label12;
        catch java.lang.RuntimeException from label15 to label34 with label35;
        catch java.io.IOException from label15 to label34 with label35;
        catch java.lang.Throwable from label01 to label36 with label37;
    }

    public void testDeSerialization()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.IntValue r4, r6, $r8;
        org.apache.flink.types.StringValue r5, $r7, r25;
        org.apache.flink.types.Record $r9, $r10;
        org.apache.flink.core.memory.DataOutputView $r11;
        org.apache.flink.core.memory.DataInputView $r12;
        int $i0, $i1;
        org.apache.flink.types.Value $r13, $r14, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r17;
        java.lang.Throwable $r18;
        java.lang.StringBuilder $r19, $r20, $r22;
        java.lang.String $r21, $r23;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hello World!");

        $r8 = new org.apache.flink.types.IntValue;

        specialinvoke $r8.<org.apache.flink.types.IntValue: void <init>(int)>(1337);

        $r9 = new org.apache.flink.types.Record;

        specialinvoke $r9.<org.apache.flink.types.Record: void <init>(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r7, $r8);

        $r10 = new org.apache.flink.types.Record;

        specialinvoke $r10.<org.apache.flink.types.Record: void <init>()>();

     label2:
        $r11 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r9.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r11);

        $r12 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r10.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r12);

        $i0 = virtualinvoke $r9.<org.apache.flink.types.Record: int getNumFields()>();

        $i1 = virtualinvoke $r10.<org.apache.flink.types.Record: int getNumFields()>();

        if $i0 != $i1 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r13 = virtualinvoke $r9.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/StringValue;");

        r25 = (org.apache.flink.types.StringValue) $r13;

        $r14 = virtualinvoke $r9.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/IntValue;");

        r4 = (org.apache.flink.types.IntValue) $r14;

        $r15 = virtualinvoke $r10.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/StringValue;");

        r5 = (org.apache.flink.types.StringValue) $r15;

        $r16 = virtualinvoke $r10.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(1, class "Lorg/apache/flink/types/IntValue;");

        r6 = (org.apache.flink.types.IntValue) $r16;

        $z0 = virtualinvoke $r7.<org.apache.flink.types.StringValue: boolean equals(java.lang.Object)>(r25);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r8.<org.apache.flink.types.IntValue: boolean equals(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = virtualinvoke $r7.<org.apache.flink.types.StringValue: boolean equals(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke $r8.<org.apache.flink.types.IntValue: boolean equals(java.lang.Object)>(r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Error writing Record");

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r21 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r23);

     label9:
        return;

        catch java.io.IOException from label2 to label5 with label6;
        catch java.lang.Throwable from label1 to label7 with label8;
    }

    public void testClear() throws java.io.IOException
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Record $r2, $r11;
        org.apache.flink.types.IntValue $r3, $r6, $r7, $r10, $r12, $r15, $r18;
        org.apache.flink.core.memory.DataOutputView $r4, $r8;
        org.apache.flink.types.Value $r5, $r9, $r14, $r17;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;
        org.apache.flink.core.memory.DataInputView $r13, $r16;
        java.lang.Throwable $r19;
        java.lang.StringBuilder $r20, $r21, $r23;
        java.lang.String $r22, $r24;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        $r2 = new org.apache.flink.types.Record;

        $r3 = new org.apache.flink.types.IntValue;

        specialinvoke $r3.<org.apache.flink.types.IntValue: void <init>(int)>(42);

        specialinvoke $r2.<org.apache.flink.types.Record: void <init>(org.apache.flink.types.Value)>($r3);

        $r4 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r2.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r4);

        $r5 = virtualinvoke $r2.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        $r6 = (org.apache.flink.types.IntValue) $r5;

        $i0 = virtualinvoke $r6.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(42L, $l1);

        $r7 = new org.apache.flink.types.IntValue;

        specialinvoke $r7.<org.apache.flink.types.IntValue: void <init>(int)>(23);

        virtualinvoke $r2.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(0, $r7);

        $r8 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        virtualinvoke $r2.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>($r8);

        $r9 = virtualinvoke $r2.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        $r10 = (org.apache.flink.types.IntValue) $r9;

        $i2 = virtualinvoke $r10.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $l3);

        virtualinvoke $r2.<org.apache.flink.types.Record: void clear()>();

        $i4 = virtualinvoke $r2.<org.apache.flink.types.Record: int getNumFields()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r11 = new org.apache.flink.types.Record;

        $r12 = new org.apache.flink.types.IntValue;

        specialinvoke $r12.<org.apache.flink.types.IntValue: void <init>(int)>(42);

        specialinvoke $r11.<org.apache.flink.types.Record: void <init>(org.apache.flink.types.Value)>($r12);

        $r13 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r11.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r13);

        $r14 = virtualinvoke $r11.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        $r15 = (org.apache.flink.types.IntValue) $r14;

        $i6 = virtualinvoke $r15.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(42L, $l7);

        $r16 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        virtualinvoke $r11.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>($r16);

        $r17 = virtualinvoke $r11.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(0, class "Lorg/apache/flink/types/IntValue;");

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i8 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $l9);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r22 = virtualinvoke $r19.<java.lang.Throwable: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r24);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private org.apache.flink.types.Record generateFilledDenseRecord(int)
    {
        org.apache.flink.types.RecordTest r0;
        int i0, $i1, i2;
        org.apache.flink.types.Record $r2;
        org.apache.flink.types.IntValue $r3;
        java.util.Random $r4;

        r0 := @this: org.apache.flink.types.RecordTest;

        i0 := @parameter0: int;

        $r2 = new org.apache.flink.types.Record;

        specialinvoke $r2.<org.apache.flink.types.Record: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = new org.apache.flink.types.IntValue;

        $r4 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $i1 = virtualinvoke $r4.<java.util.Random: int nextInt()>();

        specialinvoke $r3.<org.apache.flink.types.IntValue: void <init>(int)>($i1);

        virtualinvoke $r2.<org.apache.flink.types.Record: void addField(org.apache.flink.types.Value)>($r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private long generateRandomBitmask(int)
    {
        org.apache.flink.types.RecordTest r0;
        int i0, i4;
        java.util.Random $r1;
        boolean $z0;
        long $l1, l2, $l5;

        r0 := @this: org.apache.flink.types.RecordTest;

        i0 := @parameter0: int;

        l2 = 0L;

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r1 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $z0 = virtualinvoke $r1.<java.util.Random: boolean nextBoolean()>();

        if $z0 == 0 goto label2;

        $l5 = 1L;

        goto label3;

     label2:
        $l5 = 0L;

     label3:
        $l1 = $l5 << i4;

        l2 = l2 | $l1;

        i4 = i4 + 1;

        goto label1;

     label4:
        return l2;
    }

    public void blackBoxTests()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Value[] r1, $r3, $r4, $r13, $r30, $r31, $r32, $r36, $r46, r72, r73;
        org.apache.flink.types.Value[][] $r2;
        org.apache.flink.types.IntValue $r5, $r8, $r9, $r12, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r33, $r34;
        org.apache.flink.types.StringValue $r6, $r10, $r15, $r19, $r23, $r27, $r35, $r37, $r40, $r43, $r47, $r50;
        org.apache.flink.types.LongValue $r7, $r11, $r16, $r20, $r24, $r28;
        java.util.Random $r38, $r41, $r44, $r48, $r51, $r53, $r56, $r57, $r60, $r63;
        java.lang.String $r39, $r42, $r45, $r49, $r52, $r67, $r69;
        org.apache.flink.core.memory.DataOutputView $r54, $r58, $r61;
        org.apache.flink.core.memory.DataInputView $r55, $r59, $r62;
        java.lang.Throwable $r64;
        java.lang.StringBuilder $r65, $r66, $r68;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        $r2 = newarray (org.apache.flink.types.Value[])[8];

        $r3 = newarray (org.apache.flink.types.Value)[0];

        $r2[0] = $r3;

        $r4 = newarray (org.apache.flink.types.Value)[8];

        $r5 = new org.apache.flink.types.IntValue;

        specialinvoke $r5.<org.apache.flink.types.IntValue: void <init>(int)>(55);

        $r4[0] = $r5;

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hi there!");

        $r4[1] = $r6;

        $r7 = new org.apache.flink.types.LongValue;

        specialinvoke $r7.<org.apache.flink.types.LongValue: void <init>(long)>(457354357357135L);

        $r4[2] = $r7;

        $r8 = new org.apache.flink.types.IntValue;

        specialinvoke $r8.<org.apache.flink.types.IntValue: void <init>(int)>(345);

        $r4[3] = $r8;

        $r9 = new org.apache.flink.types.IntValue;

        specialinvoke $r9.<org.apache.flink.types.IntValue: void <init>(int)>(-468);

        $r4[4] = $r9;

        $r10 = new org.apache.flink.types.StringValue;

        specialinvoke $r10.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is the message and the message is this!");

        $r4[5] = $r10;

        $r11 = new org.apache.flink.types.LongValue;

        specialinvoke $r11.<org.apache.flink.types.LongValue: void <init>(long)>(0L);

        $r4[6] = $r11;

        $r12 = new org.apache.flink.types.IntValue;

        specialinvoke $r12.<org.apache.flink.types.IntValue: void <init>(int)>(465);

        $r4[7] = $r12;

        $r2[1] = $r4;

        $r13 = newarray (org.apache.flink.types.Value)[16];

        $r14 = new org.apache.flink.types.IntValue;

        specialinvoke $r14.<org.apache.flink.types.IntValue: void <init>(int)>(55);

        $r13[0] = $r14;

        $r15 = new org.apache.flink.types.StringValue;

        specialinvoke $r15.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hi there!");

        $r13[1] = $r15;

        $r16 = new org.apache.flink.types.LongValue;

        specialinvoke $r16.<org.apache.flink.types.LongValue: void <init>(long)>(457354357357135L);

        $r13[2] = $r16;

        $r17 = new org.apache.flink.types.IntValue;

        specialinvoke $r17.<org.apache.flink.types.IntValue: void <init>(int)>(345);

        $r13[3] = $r17;

        $r18 = new org.apache.flink.types.IntValue;

        specialinvoke $r18.<org.apache.flink.types.IntValue: void <init>(int)>(-468);

        $r13[4] = $r18;

        $r19 = new org.apache.flink.types.StringValue;

        specialinvoke $r19.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is the message and the message is this!");

        $r13[5] = $r19;

        $r20 = new org.apache.flink.types.LongValue;

        specialinvoke $r20.<org.apache.flink.types.LongValue: void <init>(long)>(0L);

        $r13[6] = $r20;

        $r21 = new org.apache.flink.types.IntValue;

        specialinvoke $r21.<org.apache.flink.types.IntValue: void <init>(int)>(465);

        $r13[7] = $r21;

        $r22 = new org.apache.flink.types.IntValue;

        specialinvoke $r22.<org.apache.flink.types.IntValue: void <init>(int)>(55);

        $r13[8] = $r22;

        $r23 = new org.apache.flink.types.StringValue;

        specialinvoke $r23.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hi there!");

        $r13[9] = $r23;

        $r24 = new org.apache.flink.types.LongValue;

        specialinvoke $r24.<org.apache.flink.types.LongValue: void <init>(long)>(457354357357135L);

        $r13[10] = $r24;

        $r25 = new org.apache.flink.types.IntValue;

        specialinvoke $r25.<org.apache.flink.types.IntValue: void <init>(int)>(345);

        $r13[11] = $r25;

        $r26 = new org.apache.flink.types.IntValue;

        specialinvoke $r26.<org.apache.flink.types.IntValue: void <init>(int)>(-468);

        $r13[12] = $r26;

        $r27 = new org.apache.flink.types.StringValue;

        specialinvoke $r27.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is the message and the message is this!");

        $r13[13] = $r27;

        $r28 = new org.apache.flink.types.LongValue;

        specialinvoke $r28.<org.apache.flink.types.LongValue: void <init>(long)>(0L);

        $r13[14] = $r28;

        $r29 = new org.apache.flink.types.IntValue;

        specialinvoke $r29.<org.apache.flink.types.IntValue: void <init>(int)>(465);

        $r13[15] = $r29;

        $r2[2] = $r13;

        $r30 = newarray (org.apache.flink.types.Value)[8];

        $r30[0] = null;

        $r30[1] = null;

        $r30[2] = null;

        $r30[3] = null;

        $r30[4] = null;

        $r30[5] = null;

        $r30[6] = null;

        $r30[7] = null;

        $r2[3] = $r30;

        $r31 = newarray (org.apache.flink.types.Value)[16];

        $r31[0] = null;

        $r31[1] = null;

        $r31[2] = null;

        $r31[3] = null;

        $r31[4] = null;

        $r31[5] = null;

        $r31[6] = null;

        $r31[7] = null;

        $r31[8] = null;

        $r31[9] = null;

        $r31[10] = null;

        $r31[11] = null;

        $r31[12] = null;

        $r31[13] = null;

        $r31[14] = null;

        $r31[15] = null;

        $r2[4] = $r31;

        $r32 = newarray (org.apache.flink.types.Value)[4];

        $r33 = new org.apache.flink.types.IntValue;

        specialinvoke $r33.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r32[0] = $r33;

        $r32[1] = null;

        $r34 = new org.apache.flink.types.IntValue;

        specialinvoke $r34.<org.apache.flink.types.IntValue: void <init>(int)>(-7628761);

        $r32[2] = $r34;

        $r35 = new org.apache.flink.types.StringValue;

        specialinvoke $r35.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("A test string");

        $r32[3] = $r35;

        $r2[5] = $r32;

        $r36 = newarray (org.apache.flink.types.Value)[3];

        $r37 = new org.apache.flink.types.StringValue;

        $r38 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r39 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>($r38, 15);

        specialinvoke $r37.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r39);

        $r36[0] = $r37;

        $r40 = new org.apache.flink.types.StringValue;

        $r41 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r42 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>($r41, 1015);

        specialinvoke $r40.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r42);

        $r36[1] = $r40;

        $r43 = new org.apache.flink.types.StringValue;

        $r44 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r45 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>($r44, 32);

        specialinvoke $r43.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r45);

        $r36[2] = $r43;

        $r2[6] = $r36;

        $r46 = newarray (org.apache.flink.types.Value)[3];

        $r47 = new org.apache.flink.types.StringValue;

        $r48 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r49 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>($r48, 1265);

        specialinvoke $r47.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r49);

        $r46[0] = $r47;

        $r46[1] = null;

        $r50 = new org.apache.flink.types.StringValue;

        $r51 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r52 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>($r51, 855);

        specialinvoke $r50.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r52);

        $r46[2] = $r50;

        $r2[7] = $r46;

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r1 = $r2[i1];

        $r63 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r62 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        $r61 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, $r63, $r62, $r61);

        i1 = i1 + 1;

        goto label2;

     label3:
        i2 = 0;

     label4:
        if i2 >= 10000 goto label5;

        $r57 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        r72 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Value[] createRandomValues(java.util.Random,int,int)>($r57, 0, 32);

        $r60 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r59 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        $r58 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r72, $r60, $r59, $r58);

        i2 = i2 + 1;

        goto label4;

     label5:
        i3 = 0;

     label6:
        if i3 >= 1000 goto label7;

        $r53 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        r73 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Value[] createRandomValues(java.util.Random,int,int)>($r53, 20, 150);

        $r56 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        $r55 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataInputView in>;

        $r54 = r0.<org.apache.flink.types.RecordTest: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r73, $r56, $r55, $r54);

        i3 = i3 + 1;

        goto label6;

     label7:
        goto label9;

     label8:
        $r64 := @caughtexception;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r67 = virtualinvoke $r64.<java.lang.Throwable: java.lang.String getMessage()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r69);

     label9:
        return;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    static void blackboxTestRecordWithValues(org.apache.flink.types.Value[], java.util.Random, org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.lang.Exception
    {
        org.apache.flink.types.Value[] r0;
        java.util.Random r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.core.memory.DataOutputView r3;
        int[] r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25, i26, i27, i28, $i29, i30, i31, i32, i33, i34, i35, i36, i37, $i38, i39, i40, i41, $i42, i43, i44, i45, i46;
        org.apache.flink.types.Record $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r21, $r23, r35, r37;
        org.apache.flink.types.Value $r17, $r18, $r20, $r22, $r24, $r25, $r26, $r27, $r28;

        r0 := @parameter0: org.apache.flink.types.Value[];

        r1 := @parameter1: java.util.Random;

        r2 := @parameter2: org.apache.flink.core.memory.DataInputView;

        r3 := @parameter3: org.apache.flink.core.memory.DataOutputView;

        $i0 = lengthof r0;

        r4 = staticinvoke <org.apache.flink.types.RecordTest: int[] createPermutation(java.util.Random,int)>(r1, $i0);

        $i1 = lengthof r0;

        r5 = staticinvoke <org.apache.flink.types.RecordTest: int[] createPermutation(java.util.Random,int)>(r1, $i1);

        $r6 = new org.apache.flink.types.Record;

        specialinvoke $r6.<org.apache.flink.types.Record: void <init>()>();

        i21 = 0;

     label01:
        $i2 = lengthof r0;

        if i21 >= $i2 goto label02;

        i22 = r4[i21];

        $r28 = r0[i22];

        virtualinvoke $r6.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i22, $r28);

        i21 = i21 + 1;

        goto label01;

     label02:
        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r6, r5, r0);

        $r7 = new org.apache.flink.types.Record;

        specialinvoke $r7.<org.apache.flink.types.Record: void <init>()>();

        i23 = 0;

     label03:
        $i3 = lengthof r0;

        if i23 >= $i3 goto label04;

        i24 = r4[i23];

        $r27 = r0[i24];

        virtualinvoke $r7.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i24, $r27);

        i23 = i23 + 1;

        goto label03;

     label04:
        virtualinvoke $r7.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r7, r5, r0);

        $r8 = new org.apache.flink.types.Record;

        specialinvoke $r8.<org.apache.flink.types.Record: void <init>()>();

        $i4 = lengthof r0;

        $i5 = $i4 + 1;

        i25 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i5);

        i26 = 0;

     label05:
        $i6 = lengthof r0;

        if i26 >= $i6 goto label07;

        if i26 != i25 goto label06;

        virtualinvoke $r8.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label06:
        i27 = r4[i26];

        $r26 = r0[i27];

        virtualinvoke $r8.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i27, $r26);

        i26 = i26 + 1;

        goto label05;

     label07:
        $i7 = lengthof r0;

        if i25 != $i7 goto label08;

        virtualinvoke $r8.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label08:
        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r8, r5, r0);

        $r9 = new org.apache.flink.types.Record;

        specialinvoke $r9.<org.apache.flink.types.Record: void <init>()>();

        i28 = 0;

     label09:
        $i29 = lengthof r0;

        if i28 >= $i29 goto label10;

        i30 = r4[i28];

        $r25 = r0[i30];

        virtualinvoke $r9.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i30, $r25);

        i28 = i28 + 1;

        goto label09;

     label10:
        virtualinvoke $r9.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        $r10 = new org.apache.flink.types.Record;

        specialinvoke $r10.<org.apache.flink.types.Record: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r10, r5, r0);

        $r11 = new org.apache.flink.types.Record;

        specialinvoke $r11.<org.apache.flink.types.Record: void <init>()>();

        i31 = 0;

     label11:
        $i8 = lengthof r0;

        if i31 >= $i8 goto label12;

        i32 = r4[i31];

        $r24 = r0[i32];

        virtualinvoke $r11.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i32, $r24);

        i31 = i31 + 1;

        goto label11;

     label12:
        virtualinvoke $r11.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        virtualinvoke $r11.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r11, r5, r0);

        $r12 = new org.apache.flink.types.Record;

        specialinvoke $r12.<org.apache.flink.types.Record: void <init>()>();

        r35 = $r12;

        $i9 = lengthof r0;

        $i10 = $i9 + 1;

        i33 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i10);

        i34 = 0;

     label13:
        $i11 = lengthof r0;

        if i34 >= $i11 goto label15;

        if i34 != i33 goto label14;

        virtualinvoke r35.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        $r23 = new org.apache.flink.types.Record;

        specialinvoke $r23.<org.apache.flink.types.Record: void <init>()>();

        r35 = $r23;

        virtualinvoke $r23.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label14:
        i35 = r4[i34];

        $r22 = r0[i35];

        virtualinvoke r35.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i35, $r22);

        i34 = i34 + 1;

        goto label13;

     label15:
        $i12 = lengthof r0;

        if i33 != $i12 goto label16;

        virtualinvoke r35.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        $r21 = new org.apache.flink.types.Record;

        specialinvoke $r21.<org.apache.flink.types.Record: void <init>()>();

        r35 = $r21;

        virtualinvoke $r21.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label16:
        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>(r35, r5, r0);

        $r13 = new org.apache.flink.types.Record;

        specialinvoke $r13.<org.apache.flink.types.Record: void <init>()>();

        $i13 = lengthof r0;

        $i14 = $i13 + 1;

        i36 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i14);

        i37 = 0;

     label17:
        $i38 = lengthof r0;

        if i37 >= $i38 goto label19;

        if i37 != i36 goto label18;

        virtualinvoke $r13.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        virtualinvoke $r13.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label18:
        i39 = r4[i37];

        $r20 = r0[i39];

        virtualinvoke $r13.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i39, $r20);

        i37 = i37 + 1;

        goto label17;

     label19:
        $i15 = lengthof r0;

        if i36 != $i15 goto label20;

        virtualinvoke $r13.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        virtualinvoke $r13.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label20:
        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r13, r5, r0);

        $r14 = new org.apache.flink.types.Record;

        specialinvoke $r14.<org.apache.flink.types.Record: void <init>()>();

        r37 = $r14;

        $i16 = lengthof r0;

        $i17 = $i16 + 1;

        i40 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i17);

        i41 = 0;

     label21:
        $i42 = lengthof r0;

        if i41 >= $i42 goto label23;

        if i41 != i40 goto label22;

        virtualinvoke r37.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        $r19 = new org.apache.flink.types.Record;

        specialinvoke $r19.<org.apache.flink.types.Record: void <init>()>();

        r37 = $r19;

        virtualinvoke $r19.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label22:
        i43 = r4[i41];

        $r18 = r0[i43];

        virtualinvoke r37.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i43, $r18);

        i41 = i41 + 1;

        goto label21;

     label23:
        virtualinvoke r37.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        $r15 = new org.apache.flink.types.Record;

        specialinvoke $r15.<org.apache.flink.types.Record: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r15, r5, r0);

        $r16 = new org.apache.flink.types.Record;

        specialinvoke $r16.<org.apache.flink.types.Record: void <init>()>();

        $i18 = lengthof r0;

        $i19 = $i18 + 1;

        i44 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i19);

        i45 = 0;

     label24:
        $i20 = lengthof r0;

        if i45 >= $i20 goto label26;

        if i45 != i44 goto label25;

        virtualinvoke $r16.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        virtualinvoke $r16.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

     label25:
        i46 = r4[i45];

        $r17 = r0[i46];

        virtualinvoke $r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i46, $r17);

        i45 = i45 + 1;

        goto label24;

     label26:
        virtualinvoke $r16.<org.apache.flink.types.Record: void write(org.apache.flink.core.memory.DataOutputView)>(r3);

        virtualinvoke $r16.<org.apache.flink.types.Record: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        staticinvoke <org.apache.flink.types.RecordTest: void testAllRetrievalMethods(org.apache.flink.types.Record,int[],org.apache.flink.types.Value[])>($r16, r5, r0);

        return;
    }

    public static void testAllRetrievalMethods(org.apache.flink.types.Record, int[], org.apache.flink.types.Value[]) throws java.lang.Exception
    {
        org.apache.flink.types.Record r0;
        int[] r1;
        org.apache.flink.types.Value[] r2;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;
        java.lang.Class $r3, $r27, $r45;
        java.lang.Object $r4, $r28;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r12, $r13, $r14, $r15, $r17, $r20, $r21, $r22, $r23, $r25, $r30, $r31, $r32, $r33, $r35, $r38, $r39, $r40, $r41, $r43, $r46, $r47, $r48, $r49, $r51, $r53, $r54, $r55, $r56, $r58;
        java.lang.String $r9, $r11, $r16, $r18, $r24, $r26, $r34, $r36, $r42, $r44, $r50, $r52, $r57, $r59;
        org.apache.flink.types.IntValue $r19, $r37;
        org.apache.flink.types.Value $r29, r60, r61, r62, r63, r64, r65, r66, r67;

        r0 := @parameter0: org.apache.flink.types.Record;

        r1 := @parameter1: int[];

        r2 := @parameter2: org.apache.flink.types.Value[];

        i3 = 0;

     label01:
        $i0 = lengthof r2;

        if i3 >= $i0 goto label05;

        i4 = r1[i3];

        r60 = r2[i4];

        if r60 != null goto label03;

        r61 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i4, class "Lorg/apache/flink/types/IntValue;");

        if r61 == null goto label02;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at position ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be null in ");

        $r57 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r59);

     label02:
        goto label04;

     label03:
        $r45 = virtualinvoke r60.<java.lang.Object: java.lang.Class getClass()>();

        r62 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i4, $r45);

        $z4 = virtualinvoke r60.<java.lang.Object: boolean equals(java.lang.Object)>(r62);

        if $z4 != 0 goto label04;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong value at position ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r50 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r52, r60, r62);

     label04:
        i3 = i3 + 1;

        goto label01;

     label05:
        i5 = 0;

     label06:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label10;

        i6 = r1[i5];

        r63 = r2[i6];

        if r63 != null goto label08;

        $r37 = new org.apache.flink.types.IntValue;

        specialinvoke $r37.<org.apache.flink.types.IntValue: void <init>()>();

        r64 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,org.apache.flink.types.Value)>(i6, $r37);

        if r64 == null goto label07;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at position ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be null in ");

        $r42 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r44);

     label07:
        goto label09;

     label08:
        $r27 = virtualinvoke r63.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.Object newInstance()>();

        $r29 = (org.apache.flink.types.Value) $r28;

        r65 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,org.apache.flink.types.Value)>(i6, $r29);

        $z3 = virtualinvoke r63.<java.lang.Object: boolean equals(java.lang.Object)>(r65);

        if $z3 != 0 goto label09;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong value at position ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r34 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r36, r63, r65);

     label09:
        i5 = i5 + 1;

        goto label06;

     label10:
        i7 = 0;

     label11:
        $i2 = lengthof r2;

        if i7 >= $i2 goto label15;

        i8 = r1[i7];

        r66 = r2[i8];

        if r66 != null goto label12;

        $r19 = new org.apache.flink.types.IntValue;

        specialinvoke $r19.<org.apache.flink.types.IntValue: void <init>()>();

        $z2 = virtualinvoke r0.<org.apache.flink.types.Record: boolean getFieldInto(int,org.apache.flink.types.Value)>(i8, $r19);

        if $z2 == 0 goto label14;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at position ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be null in ");

        $r24 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r26);

        goto label14;

     label12:
        $r3 = virtualinvoke r66.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r67 = (org.apache.flink.types.Value) $r4;

        $z0 = virtualinvoke r0.<org.apache.flink.types.Record: boolean getFieldInto(int,org.apache.flink.types.Value)>(i8, r67);

        if $z0 != 0 goto label13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at position ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be not null in ");

        $r16 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label13:
        $z1 = virtualinvoke r66.<java.lang.Object: boolean equals(java.lang.Object)>(r67);

        if $z1 != 0 goto label14;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong value at position ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r11, r66, r67);

     label14:
        i7 = i7 + 1;

        goto label11;

     label15:
        return;
    }

    public void testUnionFields()
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Value[][] $r1;
        org.apache.flink.types.Value[] $r2, $r5, $r7, $r8, $r9, $r14, $r18, $r22, $r27, $r28, $r30, $r31;
        org.apache.flink.types.IntValue $r3, $r4, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25;
        org.apache.flink.types.StringValue $r6;
        int $i0, $i1, $i2, $i3, i4;
        java.util.Random $r26, $r29;
        java.lang.Throwable $r32;
        java.lang.StringBuilder $r33, $r34, $r36;
        java.lang.String $r35, $r37;

        r0 := @this: org.apache.flink.types.RecordTest;

     label1:
        $r1 = newarray (org.apache.flink.types.Value[])[8];

        $r2 = newarray (org.apache.flink.types.Value)[3];

        $r3 = new org.apache.flink.types.IntValue;

        specialinvoke $r3.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r2[0] = $r3;

        $r2[1] = null;

        $r4 = new org.apache.flink.types.IntValue;

        specialinvoke $r4.<org.apache.flink.types.IntValue: void <init>(int)>(-7628761);

        $r2[2] = $r4;

        $r1[0] = $r2;

        $r5 = newarray (org.apache.flink.types.Value)[3];

        $r5[0] = null;

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hellow Test!");

        $r5[1] = $r6;

        $r5[2] = null;

        $r1[1] = $r5;

        $r7 = newarray (org.apache.flink.types.Value)[8];

        $r7[0] = null;

        $r7[1] = null;

        $r7[2] = null;

        $r7[3] = null;

        $r7[4] = null;

        $r7[5] = null;

        $r7[6] = null;

        $r7[7] = null;

        $r1[2] = $r7;

        $r8 = newarray (org.apache.flink.types.Value)[16];

        $r8[0] = null;

        $r8[1] = null;

        $r8[2] = null;

        $r8[3] = null;

        $r8[4] = null;

        $r8[5] = null;

        $r8[6] = null;

        $r8[7] = null;

        $r8[8] = null;

        $r8[9] = null;

        $r8[10] = null;

        $r8[11] = null;

        $r8[12] = null;

        $r8[13] = null;

        $r8[14] = null;

        $r8[15] = null;

        $r1[3] = $r8;

        $r9 = newarray (org.apache.flink.types.Value)[7];

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r9[0] = $r10;

        $r11 = new org.apache.flink.types.IntValue;

        specialinvoke $r11.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r9[1] = $r11;

        $r12 = new org.apache.flink.types.IntValue;

        specialinvoke $r12.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r9[2] = $r12;

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r9[3] = $r13;

        $r9[4] = null;

        $r9[5] = null;

        $r9[6] = null;

        $r1[4] = $r9;

        $r14 = newarray (org.apache.flink.types.Value)[7];

        $r14[0] = null;

        $r14[1] = null;

        $r14[2] = null;

        $r14[3] = null;

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r14[4] = $r15;

        $r16 = new org.apache.flink.types.IntValue;

        specialinvoke $r16.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r14[5] = $r16;

        $r17 = new org.apache.flink.types.IntValue;

        specialinvoke $r17.<org.apache.flink.types.IntValue: void <init>(int)>(56);

        $r14[6] = $r17;

        $r1[5] = $r14;

        $r18 = newarray (org.apache.flink.types.Value)[3];

        $r19 = new org.apache.flink.types.IntValue;

        specialinvoke $r19.<org.apache.flink.types.IntValue: void <init>(int)>(43);

        $r18[0] = $r19;

        $r20 = new org.apache.flink.types.IntValue;

        specialinvoke $r20.<org.apache.flink.types.IntValue: void <init>(int)>(42);

        $r18[1] = $r20;

        $r21 = new org.apache.flink.types.IntValue;

        specialinvoke $r21.<org.apache.flink.types.IntValue: void <init>(int)>(41);

        $r18[2] = $r21;

        $r1[6] = $r18;

        $r22 = newarray (org.apache.flink.types.Value)[3];

        $r23 = new org.apache.flink.types.IntValue;

        specialinvoke $r23.<org.apache.flink.types.IntValue: void <init>(int)>(-463);

        $r22[0] = $r23;

        $r24 = new org.apache.flink.types.IntValue;

        specialinvoke $r24.<org.apache.flink.types.IntValue: void <init>(int)>(-464);

        $r22[1] = $r24;

        $r25 = new org.apache.flink.types.IntValue;

        specialinvoke $r25.<org.apache.flink.types.IntValue: void <init>(int)>(-465);

        $r22[2] = $r25;

        $r1[7] = $r22;

        i4 = 0;

     label2:
        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        if i4 >= $i1 goto label3;

        $r28 = $r1[i4];

        $i2 = i4 + 1;

        $r27 = $r1[$i2];

        $r26 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        specialinvoke r0.<org.apache.flink.types.RecordTest: void testUnionFieldsForValues(org.apache.flink.types.Value[],org.apache.flink.types.Value[],java.util.Random)>($r28, $r27, $r26);

        $i3 = i4 + 1;

        $r31 = $r1[$i3];

        $r30 = $r1[i4];

        $r29 = r0.<org.apache.flink.types.RecordTest: java.util.Random rand>;

        specialinvoke r0.<org.apache.flink.types.RecordTest: void testUnionFieldsForValues(org.apache.flink.types.Value[],org.apache.flink.types.Value[],java.util.Random)>($r31, $r30, $r29);

        i4 = i4 + 2;

        goto label2;

     label3:
        goto label5;

     label4:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r35 = virtualinvoke $r32.<java.lang.Throwable: java.lang.String getMessage()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r37);

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void testUnionFieldsForValues(org.apache.flink.types.Value[], org.apache.flink.types.Value[], java.util.Random)
    {
        org.apache.flink.types.RecordTest r0;
        org.apache.flink.types.Value[] r1, r2;
        java.util.Random r3;
        int[] r4, r5;
        org.apache.flink.types.Record $r6, r9, r10, r11, r12, r13, r14, r15, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i14, i15;
        org.apache.flink.types.Value $r7, $r8;

        r0 := @this: org.apache.flink.types.RecordTest;

        r1 := @parameter0: org.apache.flink.types.Value[];

        r2 := @parameter1: org.apache.flink.types.Value[];

        r3 := @parameter2: java.util.Random;

        r9 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r1);

        r10 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r2);

        virtualinvoke r9.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        virtualinvoke r10.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        virtualinvoke r9.<org.apache.flink.types.Record: void unionFields(org.apache.flink.types.Record)>(r10);

        staticinvoke <org.apache.flink.types.RecordTest: void checkUnionedRecord(org.apache.flink.types.Record,org.apache.flink.types.Value[],org.apache.flink.types.Value[])>(r9, r1, r2);

        r11 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r1);

        r12 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r2);

        virtualinvoke r11.<org.apache.flink.types.Record: void unionFields(org.apache.flink.types.Record)>(r12);

        staticinvoke <org.apache.flink.types.RecordTest: void checkUnionedRecord(org.apache.flink.types.Record,org.apache.flink.types.Value[],org.apache.flink.types.Value[])>(r11, r1, r2);

        r13 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r1);

        r14 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r2);

        virtualinvoke r13.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        virtualinvoke r13.<org.apache.flink.types.Record: void unionFields(org.apache.flink.types.Record)>(r14);

        staticinvoke <org.apache.flink.types.RecordTest: void checkUnionedRecord(org.apache.flink.types.Record,org.apache.flink.types.Value[],org.apache.flink.types.Value[])>(r13, r1, r2);

        r15 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r1);

        r16 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])>(r2);

        virtualinvoke r16.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

        virtualinvoke r15.<org.apache.flink.types.Record: void unionFields(org.apache.flink.types.Record)>(r16);

        staticinvoke <org.apache.flink.types.RecordTest: void checkUnionedRecord(org.apache.flink.types.Record,org.apache.flink.types.Value[],org.apache.flink.types.Value[])>(r15, r1, r2);

        $r6 = new org.apache.flink.types.Record;

        specialinvoke $r6.<org.apache.flink.types.Record: void <init>()>();

        $i0 = lengthof r1;

        r4 = staticinvoke <org.apache.flink.types.RecordTest: int[] createPermutation(java.util.Random,int)>(r3, $i0);

        $i1 = lengthof r2;

        r5 = staticinvoke <org.apache.flink.types.RecordTest: int[] createPermutation(java.util.Random,int)>(r3, $i1);

        $i2 = lengthof r1;

        $i3 = $i2 + 1;

        i9 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i3);

        i10 = 0;

     label1:
        $i4 = lengthof r1;

        if i10 >= $i4 goto label3;

        if i10 != i9 goto label2;

        virtualinvoke $r6.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label2:
        i11 = r4[i10];

        $r8 = r1[i11];

        virtualinvoke $r6.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i11, $r8);

        i10 = i10 + 1;

        goto label1;

     label3:
        $i5 = lengthof r1;

        if i9 != $i5 goto label4;

        virtualinvoke $r6.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label4:
        $i6 = lengthof r2;

        $i7 = $i6 + 1;

        i12 = virtualinvoke r3.<java.util.Random: int nextInt(int)>($i7);

        i13 = 0;

     label5:
        $i14 = lengthof r2;

        if i13 >= $i14 goto label7;

        if i13 != i12 goto label6;

        virtualinvoke r16.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label6:
        i15 = r5[i13];

        $r7 = r2[i15];

        virtualinvoke r16.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i15, $r7);

        i13 = i13 + 1;

        goto label5;

     label7:
        $i8 = lengthof r2;

        if i12 != $i8 goto label8;

        virtualinvoke r16.<org.apache.flink.types.Record: void updateBinaryRepresenation()>();

     label8:
        virtualinvoke $r6.<org.apache.flink.types.Record: void unionFields(org.apache.flink.types.Record)>(r16);

        staticinvoke <org.apache.flink.types.RecordTest: void checkUnionedRecord(org.apache.flink.types.Record,org.apache.flink.types.Value[],org.apache.flink.types.Value[])>($r6, r1, r2);

        return;
    }

    private static void checkUnionedRecord(org.apache.flink.types.Record, org.apache.flink.types.Value[], org.apache.flink.types.Value[])
    {
        org.apache.flink.types.Record r0;
        org.apache.flink.types.Value[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Class $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r22;
        java.lang.String $r8, $r11, $r13, $r18, $r21, $r23;
        org.apache.flink.types.Value $r24, $r25, r26, r27, r28;

        r0 := @parameter0: org.apache.flink.types.Record;

        r1 := @parameter1: org.apache.flink.types.Value[];

        r2 := @parameter2: org.apache.flink.types.Value[];

        i5 = 0;

     label1:
        $i1 = lengthof r1;

        $i0 = lengthof r2;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        if i5 >= $i2 goto label9;

        $i3 = lengthof r1;

        if i5 >= $i3 goto label5;

        $i4 = lengthof r2;

        if i5 >= $i4 goto label4;

        $r24 = r1[i5];

        if $r24 != null goto label2;

        $r25 = r2[i5];

        goto label3;

     label2:
        $r25 = r1[i5];

     label3:
        r26 = $r25;

        goto label6;

     label4:
        r26 = r1[i5];

        goto label6;

     label5:
        r26 = r2[i5];

     label6:
        if r26 != null goto label7;

        r27 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i5, class "Lorg/apache/flink/types/IntValue;");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at position ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected to be null in ");

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" U ");

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>($r23, r27);

        goto label8;

     label7:
        $r3 = virtualinvoke r26.<java.lang.Object: java.lang.Class getClass()>();

        r28 = virtualinvoke r0.<org.apache.flink.types.Record: org.apache.flink.types.Value getField(int,java.lang.Class)>(i5, $r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong value at position ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" U ");

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r13, r26, r28);

     label8:
        i5 = i5 + 1;

        goto label1;

     label9:
        return;
    }

    public static org.apache.flink.types.Record createRecord(org.apache.flink.types.Value[])
    {
        org.apache.flink.types.Value[] r0;
        org.apache.flink.types.Record $r2;
        int $i0, i1;
        org.apache.flink.types.Value $r3;

        r0 := @parameter0: org.apache.flink.types.Value[];

        $r2 = new org.apache.flink.types.Record;

        specialinvoke $r2.<org.apache.flink.types.Record: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        virtualinvoke $r2.<org.apache.flink.types.Record: void setField(int,org.apache.flink.types.Value)>(i1, $r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public static org.apache.flink.types.Value[] createRandomValues(java.util.Random, int, int)
    {
        java.util.Random r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, i9;
        org.apache.flink.types.Value[] r1;
        org.apache.flink.types.StringValue $r2;
        java.lang.String $r3;
        org.apache.flink.types.NullValue $r4;
        org.apache.flink.types.DoubleValue $r5;
        double $d0;
        org.apache.flink.types.LongValue $r6;
        long $l7;
        org.apache.flink.types.IntValue $r7;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = i1 - i0;

        $i5 = $i4 + 1;

        $i6 = virtualinvoke r0.<java.util.Random: int nextInt(int)>($i5);

        i2 = $i6 + i0;

        r1 = newarray (org.apache.flink.types.Value)[i2];

        i9 = 0;

     label1:
        if i9 >= i2 goto label9;

        i3 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(7);

        tableswitch(i3)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label7;
        };

     label2:
        $r7 = new org.apache.flink.types.IntValue;

        $i8 = virtualinvoke r0.<java.util.Random: int nextInt()>();

        specialinvoke $r7.<org.apache.flink.types.IntValue: void <init>(int)>($i8);

        r1[i9] = $r7;

        goto label8;

     label3:
        $r6 = new org.apache.flink.types.LongValue;

        $l7 = virtualinvoke r0.<java.util.Random: long nextLong()>();

        specialinvoke $r6.<org.apache.flink.types.LongValue: void <init>(long)>($l7);

        r1[i9] = $r6;

        goto label8;

     label4:
        $r5 = new org.apache.flink.types.DoubleValue;

        $d0 = virtualinvoke r0.<java.util.Random: double nextDouble()>();

        specialinvoke $r5.<org.apache.flink.types.DoubleValue: void <init>(double)>($d0);

        r1[i9] = $r5;

        goto label8;

     label5:
        $r4 = staticinvoke <org.apache.flink.types.NullValue: org.apache.flink.types.NullValue getInstance()>();

        r1[i9] = $r4;

        goto label8;

     label6:
        $r2 = new org.apache.flink.types.StringValue;

        $r3 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random)>(r0);

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>($r3);

        r1[i9] = $r2;

        goto label8;

     label7:
        r1[i9] = null;

     label8:
        i9 = i9 + 1;

        goto label1;

     label9:
        return r1;
    }

    public static java.lang.String createRandomString(java.util.Random)
    {
        java.util.Random r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.Random;

        $i0 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(150);

        $r1 = staticinvoke <org.apache.flink.types.RecordTest: java.lang.String createRandomString(java.util.Random,int)>(r0, $i0);

        return $r1;
    }

    public static java.lang.String createRandomString(java.util.Random, int)
    {
        java.util.Random r0;
        int i0, $i1, $i2, i4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        char $c3;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: void ensureCapacity(int)>(i0);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i1 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(26);

        $i2 = $i1 + 65;

        $c3 = (char) $i2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static int[] createPermutation(java.util.Random, int)
    {
        java.util.Random r0;
        int i0, i1, i2, i3, $i4, i5, i6;
        int[] r1;

        r0 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        r1 = newarray (int)[i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        r1[i5] = i5;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = 0;

     label3:
        if i6 >= i0 goto label4;

        i1 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(i0);

        i2 = virtualinvoke r0.<java.util.Random: int nextInt(int)>(i0);

        i3 = r1[i1];

        $i4 = r1[i2];

        r1[i1] = $i4;

        r1[i2] = i3;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.RecordTest: long SEED> = 354144423270432543L;

        return;
    }
}
