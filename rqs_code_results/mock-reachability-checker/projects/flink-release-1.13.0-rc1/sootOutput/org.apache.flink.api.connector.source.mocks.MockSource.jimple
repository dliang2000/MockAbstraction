public class org.apache.flink.api.connector.source.mocks.MockSource extends java.lang.Object implements org.apache.flink.api.connector.source.Source
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.connector.source.Boundedness boundedness;
    private final int numSplits;
    private final boolean readerWaitingForMoreSplits;
    private final boolean readerMarkIdleOnNoSplits;
    protected java.util.List createdReaders;

    public void <init>(org.apache.flink.api.connector.source.Boundedness, int)
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.Boundedness r1;
        int i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.Boundedness;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSource: void <init>(org.apache.flink.api.connector.source.Boundedness,int,boolean,boolean)>(r1, i0, 0, 0);

        return;
    }

    public void <init>(org.apache.flink.api.connector.source.Boundedness, int, boolean, boolean)
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.Boundedness r1;
        int i0;
        boolean z0, z1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.Boundedness;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSource: org.apache.flink.api.connector.source.Boundedness boundedness> = r1;

        r0.<org.apache.flink.api.connector.source.mocks.MockSource: int numSplits> = i0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSource: java.util.List createdReaders> = $r2;

        r0.<org.apache.flink.api.connector.source.mocks.MockSource: boolean readerWaitingForMoreSplits> = z0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSource: boolean readerMarkIdleOnNoSplits> = z1;

        return;
    }

    public org.apache.flink.api.connector.source.Boundedness getBoundedness()
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.Boundedness $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: org.apache.flink.api.connector.source.Boundedness boundedness>;

        return $r1;
    }

    public org.apache.flink.api.connector.source.SourceReader createReader(org.apache.flink.api.connector.source.SourceReaderContext)
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.SourceReaderContext r1;
        org.apache.flink.api.connector.source.mocks.MockSourceReader $r3;
        boolean $z0, $z1;
        java.util.List $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SourceReaderContext;

        $r3 = new org.apache.flink.api.connector.source.mocks.MockSourceReader;

        $z1 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: boolean readerWaitingForMoreSplits>;

        $z0 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: boolean readerMarkIdleOnNoSplits>;

        specialinvoke $r3.<org.apache.flink.api.connector.source.mocks.MockSourceReader: void <init>(boolean,boolean)>($z1, $z0);

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: java.util.List createdReaders>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public org.apache.flink.api.connector.source.SplitEnumerator createEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext)
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        $r2 = new org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: int numSplits>;

        specialinvoke $r2.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: void <init>(int,org.apache.flink.api.connector.source.SplitEnumeratorContext)>($i0, r1);

        return $r2;
    }

    public org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext, java.util.Set) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.util.Set r2;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumerator $r3;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        r2 := @parameter1: java.util.Set;

        $r3 = new org.apache.flink.api.connector.source.mocks.MockSplitEnumerator;

        specialinvoke $r3.<org.apache.flink.api.connector.source.mocks.MockSplitEnumerator: void <init>(java.util.Set,org.apache.flink.api.connector.source.SplitEnumeratorContext)>(r2, r1);

        return $r3;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getSplitSerializer()
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        $r1 = new org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        specialinvoke $r1.<org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer: void <init>()>();

        return $r1;
    }

    public org.apache.flink.core.io.SimpleVersionedSerializer getEnumeratorCheckpointSerializer()
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorCheckpointSerializer $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        $r1 = new org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorCheckpointSerializer;

        specialinvoke $r1.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorCheckpointSerializer: void <init>()>();

        return $r1;
    }

    public java.util.List getCreatedReaders()
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSource: java.util.List createdReaders>;

        return $r1;
    }

    public volatile org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext, java.lang.Object) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSource r0;
        org.apache.flink.api.connector.source.SplitEnumeratorContext r1;
        java.lang.Object r2;
        java.util.Set $r3;
        org.apache.flink.api.connector.source.SplitEnumerator $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSource;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.util.Set) r2;

        $r4 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSource: org.apache.flink.api.connector.source.SplitEnumerator restoreEnumerator(org.apache.flink.api.connector.source.SplitEnumeratorContext,java.util.Set)>(r1, $r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.connector.source.mocks.MockSource: long serialVersionUID> = 1L;

        return;
    }
}
