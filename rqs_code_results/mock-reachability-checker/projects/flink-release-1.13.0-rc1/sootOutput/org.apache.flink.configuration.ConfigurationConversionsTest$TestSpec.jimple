class org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec extends java.lang.Object
{
    private final org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor configurationAccessor;
    private org.hamcrest.Matcher matcher;
    private java.lang.String expectedException;
    private java.lang.Class exceptionClass;

    private void <init>(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.String expectedException> = null;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor configurationAccessor> = r1;

        return;
    }

    public static org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec whenAccessed(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor r0;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec $r1;

        r0 := @parameter0: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor;

        $r1 = new org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        specialinvoke $r1.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor)>(r0);

        return $r1;
    }

    public org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(org.hamcrest.Matcher)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: org.hamcrest.Matcher;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.hamcrest.Matcher matcher> = r1;

        return r0;
    }

    public org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expect(java.lang.Object)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        java.lang.Object r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.hamcrest.Matcher matcher> = $r2;

        return r0;
    }

    public org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.String expectedException> = r1;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.Class exceptionClass> = class "Ljava/lang/IllegalArgumentException;";

        return r0;
    }

    public org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec expectException(java.lang.String, java.lang.Class)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        java.lang.String r1;
        java.lang.Class r2;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.String expectedException> = r1;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.Class exceptionClass> = r2;

        return r0;
    }

    public java.util.Optional getExpectedException()
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        java.lang.String $r1;
        java.util.Optional $r2;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.String expectedException>;

        $r2 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r1);

        return $r2;
    }

    public java.lang.Class getExceptionClass()
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: java.lang.Class exceptionClass>;

        return $r1;
    }

    void assertConfiguration(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec r0;
        org.apache.flink.configuration.Configuration r1;
        org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor $r2;
        java.lang.Object $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r2 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor configurationAccessor>;

        $r3 = interfaceinvoke $r2.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec$ConfigurationAccessor: java.lang.Object access(org.apache.flink.configuration.Configuration)>(r1);

        $r4 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$TestSpec: org.hamcrest.Matcher matcher>;

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r4);

        return;
    }
}
