public abstract class org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    protected abstract org.apache.flink.api.common.typeutils.TypePairComparator createComparator(boolean);

    protected abstract org.apache.flink.api.java.tuple.Tuple2 getSortedTestData();

    public void testEqualityWithReference()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;
        org.apache.flink.api.java.tuple.Tuple2 r1;
        java.lang.Object $r2, $r4, $r7;
        org.apache.flink.api.java.tuple.Tuple[] $r3, $r5, $r8;
        int $i0, i1;
        org.apache.flink.api.java.tuple.Tuple $r6, $r9;
        boolean $z0;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r15, $r17;
        java.lang.StringBuilder $r13, $r14, $r16;
        org.apache.flink.api.common.typeutils.TypePairComparator r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

     label1:
        r18 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.common.typeutils.TypePairComparator getComparator(boolean)>(1);

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.java.tuple.Tuple2 getSortedData()>();

        i1 = 0;

     label2:
        $r2 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r3 = (org.apache.flink.api.java.tuple.Tuple[]) $r2;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label3;

        $r4 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r5 = (org.apache.flink.api.java.tuple.Tuple[]) $r4;

        $r6 = $r5[i1];

        virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypePairComparator: void setReference(java.lang.Object)>($r6);

        $r7 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r8 = (org.apache.flink.api.java.tuple.Tuple[]) $r7;

        $r9 = $r8[i1];

        $z0 = virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypePairComparator: boolean equalToReference(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testInequalityWithReference()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: void testGreatSmallAscDescWithReference(boolean)>(1);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: void testGreatSmallAscDescWithReference(boolean)>(0);

        return;
    }

    protected void testGreatSmallAscDescWithReference(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;
        boolean z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypePairComparator r1;
        java.lang.Object $r2, $r4, $r6, $r9, $r12;
        org.apache.flink.api.java.tuple.Tuple[] $r3, $r5, $r7, $r10, $r13;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.flink.api.java.tuple.Tuple $r8, $r11, $r14;
        java.lang.Exception $r15;
        java.io.PrintStream $r16;
        java.lang.String $r17, $r20, $r22;
        java.lang.StringBuilder $r18, $r19, $r21;
        org.apache.flink.api.java.tuple.Tuple2 r23;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

        z0 := @parameter0: boolean;

     label01:
        r23 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.java.tuple.Tuple2 getSortedData()>();

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.common.typeutils.TypePairComparator getComparator(boolean)>(z0);

        i5 = 0;

     label02:
        $r2 = r23.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r3 = (org.apache.flink.api.java.tuple.Tuple[]) $r2;

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        if i5 >= $i1 goto label11;

        i6 = i5 + 1;

     label03:
        $r4 = r23.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r5 = (org.apache.flink.api.java.tuple.Tuple[]) $r4;

        $i2 = lengthof $r5;

        if i6 >= $i2 goto label10;

        $r6 = r23.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r7 = (org.apache.flink.api.java.tuple.Tuple[]) $r6;

        $r8 = $r7[i5];

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypePairComparator: void setReference(java.lang.Object)>($r8);

        if z0 == 0 goto label06;

        $r12 = r23.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r13 = (org.apache.flink.api.java.tuple.Tuple[]) $r12;

        $r14 = $r13[i6];

        $i4 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypePairComparator: int compareToReference(java.lang.Object)>($r14);

        if $i4 <= 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label09;

     label06:
        $r9 = r23.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r10 = (org.apache.flink.api.java.tuple.Tuple[]) $r9;

        $r11 = $r10[i6];

        $i3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypePairComparator: int compareToReference(java.lang.Object)>($r11);

        if $i3 >= 0 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label09:
        i6 = i6 + 1;

        goto label03;

     label10:
        i5 = i5 + 1;

        goto label02;

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        $r16 = <java.lang.System: java.io.PrintStream err>;

        $r17 = virtualinvoke $r15.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r20 = virtualinvoke $r15.<java.lang.Exception: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label13:
        return;

        catch java.lang.Exception from label01 to label11 with label12;
    }

    protected org.apache.flink.api.common.typeutils.TypePairComparator getComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypePairComparator r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.common.typeutils.TypePairComparator createComparator(boolean)>(z0);

        if r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as comparator.");

        throw $r2;

     label1:
        return r1;
    }

    protected org.apache.flink.api.java.tuple.Tuple2 getSortedData()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase r0;
        org.apache.flink.api.java.tuple.Tuple2 r1;
        java.lang.Object $r2, $r3, $r4, $r7;
        org.apache.flink.api.java.tuple.Tuple[] $r5, $r8;
        int $i0, $i1;
        java.lang.RuntimeException $r6, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TuplePairComparatorTestBase: org.apache.flink.api.java.tuple.Tuple2 getSortedTestData()>();

        if r1 == null goto label1;

        $r2 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        if $r2 == null goto label1;

        $r3 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        if $r3 != null goto label2;

     label1:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as test data.");

        throw $r9;

     label2:
        $r4 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r5 = (org.apache.flink.api.java.tuple.Tuple[]) $r4;

        $i0 = lengthof $r5;

        if $i0 < 2 goto label3;

        $r7 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r8 = (org.apache.flink.api.java.tuple.Tuple[]) $r7;

        $i1 = lengthof $r8;

        if $i1 >= 2 goto label4;

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case does not provide enough sorted test data.");

        throw $r6;

     label4:
        return r1;
    }
}
