public class org.apache.flink.types.parser.FloatValueParserTest extends org.apache.flink.types.parser.ParserTestBase
{

    public void <init>()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        specialinvoke r0.<org.apache.flink.types.parser.ParserTestBase: void <init>()>();

        return;
    }

    public java.lang.String[] getValidTestValues()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;
        java.lang.String[] $r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        $r1 = newarray (java.lang.String)[16];

        $r1[0] = "0";

        $r1[1] = "0.0";

        $r1[2] = "123.4";

        $r1[3] = "0.124";

        $r1[4] = ".623";

        $r1[5] = "1234";

        $r1[6] = "-12.34";

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(3.4028235E38F);

        $r1[7] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(1.4E-45F);

        $r1[8] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(#-InfinityF);

        $r1[9] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(#InfinityF);

        $r1[10] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(#NaNF);

        $r1[11] = $r6;

        $r1[12] = "1.234E2";

        $r1[13] = "1.234e3";

        $r1[14] = "1.234E-2";

        $r1[15] = "1239";

        return $r1;
    }

    public org.apache.flink.types.FloatValue[] getValidTestResults()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;
        org.apache.flink.types.FloatValue[] $r1;
        org.apache.flink.types.FloatValue $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        $r1 = newarray (org.apache.flink.types.FloatValue)[16];

        $r2 = new org.apache.flink.types.FloatValue;

        specialinvoke $r2.<org.apache.flink.types.FloatValue: void <init>(float)>(0.0F);

        $r1[0] = $r2;

        $r3 = new org.apache.flink.types.FloatValue;

        specialinvoke $r3.<org.apache.flink.types.FloatValue: void <init>(float)>(0.0F);

        $r1[1] = $r3;

        $r4 = new org.apache.flink.types.FloatValue;

        specialinvoke $r4.<org.apache.flink.types.FloatValue: void <init>(float)>(123.4F);

        $r1[2] = $r4;

        $r5 = new org.apache.flink.types.FloatValue;

        specialinvoke $r5.<org.apache.flink.types.FloatValue: void <init>(float)>(0.124F);

        $r1[3] = $r5;

        $r6 = new org.apache.flink.types.FloatValue;

        specialinvoke $r6.<org.apache.flink.types.FloatValue: void <init>(float)>(0.623F);

        $r1[4] = $r6;

        $r7 = new org.apache.flink.types.FloatValue;

        specialinvoke $r7.<org.apache.flink.types.FloatValue: void <init>(float)>(1234.0F);

        $r1[5] = $r7;

        $r8 = new org.apache.flink.types.FloatValue;

        specialinvoke $r8.<org.apache.flink.types.FloatValue: void <init>(float)>(-12.34F);

        $r1[6] = $r8;

        $r9 = new org.apache.flink.types.FloatValue;

        specialinvoke $r9.<org.apache.flink.types.FloatValue: void <init>(float)>(3.4028235E38F);

        $r1[7] = $r9;

        $r10 = new org.apache.flink.types.FloatValue;

        specialinvoke $r10.<org.apache.flink.types.FloatValue: void <init>(float)>(1.4E-45F);

        $r1[8] = $r10;

        $r11 = new org.apache.flink.types.FloatValue;

        specialinvoke $r11.<org.apache.flink.types.FloatValue: void <init>(float)>(#-InfinityF);

        $r1[9] = $r11;

        $r12 = new org.apache.flink.types.FloatValue;

        specialinvoke $r12.<org.apache.flink.types.FloatValue: void <init>(float)>(#InfinityF);

        $r1[10] = $r12;

        $r13 = new org.apache.flink.types.FloatValue;

        specialinvoke $r13.<org.apache.flink.types.FloatValue: void <init>(float)>(#NaNF);

        $r1[11] = $r13;

        $r14 = new org.apache.flink.types.FloatValue;

        specialinvoke $r14.<org.apache.flink.types.FloatValue: void <init>(float)>(123.4F);

        $r1[12] = $r14;

        $r15 = new org.apache.flink.types.FloatValue;

        specialinvoke $r15.<org.apache.flink.types.FloatValue: void <init>(float)>(1234.0F);

        $r1[13] = $r15;

        $r16 = new org.apache.flink.types.FloatValue;

        specialinvoke $r16.<org.apache.flink.types.FloatValue: void <init>(float)>(0.01234F);

        $r1[14] = $r16;

        $r17 = new org.apache.flink.types.FloatValue;

        specialinvoke $r17.<org.apache.flink.types.FloatValue: void <init>(float)>(1239.0F);

        $r1[15] = $r17;

        return $r1;
    }

    public java.lang.String[] getInvalidTestValues()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        $r1 = newarray (java.lang.String)[8];

        $r1[0] = "a";

        $r1[1] = "123abc4";

        $r1[2] = "-57-6";

        $r1[3] = "7-877678";

        $r1[4] = " 1";

        $r1[5] = "2 ";

        $r1[6] = " ";

        $r1[7] = "\t";

        return $r1;
    }

    public boolean allowsEmptyField()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        return 0;
    }

    public org.apache.flink.types.parser.FieldParser getParser()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;
        org.apache.flink.types.parser.FloatValueParser $r1;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        $r1 = new org.apache.flink.types.parser.FloatValueParser;

        specialinvoke $r1.<org.apache.flink.types.parser.FloatValueParser: void <init>()>();

        return $r1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        return class "Lorg/apache/flink/types/FloatValue;";
    }

    public volatile java.lang.Object[] getValidTestResults()
    {
        org.apache.flink.types.parser.FloatValueParserTest r0;
        org.apache.flink.types.FloatValue[] $r1;

        r0 := @this: org.apache.flink.types.parser.FloatValueParserTest;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.FloatValueParserTest: org.apache.flink.types.FloatValue[] getValidTestResults()>();

        return $r1;
    }
}
