public class org.apache.flink.api.common.typeutils.base.IntValueComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.IntValueComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.IntValueComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.IntValueComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.IntValueComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.IntValueComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.IntValueComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.IntValueComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.IntValueComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.IntValueSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.IntValueComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.IntValueSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.IntValueSerializer: void <init>()>();

        return $r1;
    }

    protected org.apache.flink.types.IntValue[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.IntValueComparatorTest r0;
        java.util.Random $r2;
        org.apache.flink.types.IntValue[] $r3;
        org.apache.flink.types.IntValue $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.IntValueComparatorTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412338L);

        i1 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        if i1 >= 0 goto label1;

        i1 = neg i1;

     label1:
        if i1 != 2147483647 goto label2;

        i1 = i1 + -3;

     label2:
        if i1 > 2 goto label3;

        i1 = i1 + 3;

     label3:
        $r3 = newarray (org.apache.flink.types.IntValue)[8];

        $r4 = new org.apache.flink.types.IntValue;

        specialinvoke $r4.<org.apache.flink.types.IntValue: void <init>(int)>(-2147483648);

        $r3[0] = $r4;

        $r5 = new org.apache.flink.types.IntValue;

        $i0 = neg i1;

        specialinvoke $r5.<org.apache.flink.types.IntValue: void <init>(int)>($i0);

        $r3[1] = $r5;

        $r6 = new org.apache.flink.types.IntValue;

        specialinvoke $r6.<org.apache.flink.types.IntValue: void <init>(int)>(-1);

        $r3[2] = $r6;

        $r7 = new org.apache.flink.types.IntValue;

        specialinvoke $r7.<org.apache.flink.types.IntValue: void <init>(int)>(0);

        $r3[3] = $r7;

        $r8 = new org.apache.flink.types.IntValue;

        specialinvoke $r8.<org.apache.flink.types.IntValue: void <init>(int)>(1);

        $r3[4] = $r8;

        $r9 = new org.apache.flink.types.IntValue;

        specialinvoke $r9.<org.apache.flink.types.IntValue: void <init>(int)>(2);

        $r3[5] = $r9;

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(i1);

        $r3[6] = $r10;

        $r11 = new org.apache.flink.types.IntValue;

        specialinvoke $r11.<org.apache.flink.types.IntValue: void <init>(int)>(2147483647);

        $r3[7] = $r11;

        return $r3;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.IntValueComparatorTest r0;
        org.apache.flink.types.IntValue[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.IntValueComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.IntValueComparatorTest: org.apache.flink.types.IntValue[] getSortedTestData()>();

        return $r1;
    }
}
