public final class org.apache.flink.testutils.serialization.types.Util extends java.lang.Object
{
    private static final long SEED;
    private static java.util.Random random;

    public static org.apache.flink.testutils.serialization.types.SerializationTestType randomRecord(org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory)
    {
        org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory r0;
        org.apache.flink.testutils.serialization.types.SerializationTestType $r1, $r3;
        java.util.Random $r2;

        r0 := @parameter0: org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory;

        $r1 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory: org.apache.flink.testutils.serialization.types.SerializationTestType factory()>();

        $r2 = <org.apache.flink.testutils.serialization.types.Util: java.util.Random random>;

        $r3 = interfaceinvoke $r1.<org.apache.flink.testutils.serialization.types.SerializationTestType: org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)>($r2);

        return $r3;
    }

    public static org.apache.flink.testutils.serialization.types.Util$MockRecords randomRecords(int, org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory)
    {
        int i0;
        org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory r0;
        org.apache.flink.testutils.serialization.types.Util$1 $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory;

        $r1 = new org.apache.flink.testutils.serialization.types.Util$1;

        specialinvoke $r1.<org.apache.flink.testutils.serialization.types.Util$1: void <init>(int,org.apache.flink.testutils.serialization.types.SerializationTestTypeFactory)>(i0, r0);

        return $r1;
    }

    public static org.apache.flink.testutils.serialization.types.Util$MockRecords randomRecords(int)
    {
        int i0;
        org.apache.flink.testutils.serialization.types.Util$2 $r0;

        i0 := @parameter0: int;

        $r0 = new org.apache.flink.testutils.serialization.types.Util$2;

        specialinvoke $r0.<org.apache.flink.testutils.serialization.types.Util$2: void <init>(int)>(i0);

        return $r0;
    }

    private void <init>()
    {
        org.apache.flink.testutils.serialization.types.Util r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;
    }

    static java.util.Random access$000()
    {
        java.util.Random $r0;

        $r0 = <org.apache.flink.testutils.serialization.types.Util: java.util.Random random>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <org.apache.flink.testutils.serialization.types.Util: long SEED> = 64871654635745873L;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>(long)>(64871654635745873L);

        <org.apache.flink.testutils.serialization.types.Util: java.util.Random random> = $r0;

        return;
    }
}
