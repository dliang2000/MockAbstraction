class org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec extends java.lang.Object
{
    private final org.apache.flink.configuration.ConfigOption option;
    private java.lang.Object value;
    private java.lang.String stringValue;
    private java.lang.Object defaultValueOverride;

    private void <init>(org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        org.apache.flink.configuration.ConfigOption r1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption option> = r1;

        return;
    }

    public org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object, java.lang.String)
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.Object r1;
        java.lang.String r2;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object value> = r1;

        r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.String stringValue> = r2;

        return r0;
    }

    public org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.Object r1, $r3;
        org.apache.flink.configuration.ConfigOption $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption option>;

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Default value override should be different from the config option default.");

        r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object defaultValueOverride> = r1;

        return r0;
    }

    public org.apache.flink.configuration.ConfigOption getOption()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        org.apache.flink.configuration.ConfigOption $r1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption option>;

        return $r1;
    }

    public java.lang.Object getValue()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object value>;

        return $r1;
    }

    public java.lang.String getStringValue()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.String stringValue>;

        return $r1;
    }

    public java.lang.Object getDefaultValueOverride()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r1 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object defaultValueOverride>;

        return $r1;
    }

    public void setValue(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        org.apache.flink.configuration.Configuration r1;
        java.lang.Object $r2;
        org.apache.flink.configuration.ConfigOption $r3;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r3 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption option>;

        $r2 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object value>;

        virtualinvoke r1.<org.apache.flink.configuration.Configuration: org.apache.flink.configuration.Configuration set(org.apache.flink.configuration.ConfigOption,java.lang.Object)>($r3, $r2);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r15;
        org.apache.flink.configuration.ConfigOption $r3;
        java.lang.Object $r6, $r13;
        java.lang.String $r9, $r16;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TestSpec{option=");

        $r3 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption option>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", value=");

        $r6 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object value>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", stringValue=\'");

        $r9 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.String stringValue>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", defaultValueOverride=");

        $r13 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object defaultValueOverride>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    void <init>(org.apache.flink.configuration.ConfigOption, org.apache.flink.configuration.ReadableWritableConfigurationTest$1)
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec r0;
        org.apache.flink.configuration.ConfigOption r1;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$1 r2;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        r1 := @parameter0: org.apache.flink.configuration.ConfigOption;

        r2 := @parameter1: org.apache.flink.configuration.ReadableWritableConfigurationTest$1;

        specialinvoke r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption)>(r1);

        return;
    }
}
