public class org.apache.flink.api.common.operators.util.FieldSetTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.util.FieldSetTest r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSetTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testFieldSetConstructors()
    {
        org.apache.flink.api.common.operators.util.FieldSetTest r0;
        org.apache.flink.api.common.operators.util.FieldSet $r1, $r4, $r5, $r8, $r11, $r14;
        int[] $r2, $r3, $r7, $r10, $r12, $r13, $r15, $r16;
        java.lang.Integer $r6, $r9;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSetTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r2 = newarray (int)[0];

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r1, $r2);

        $r4 = <org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET>;

        $r3 = newarray (int)[0];

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r4, $r3);

        $r5 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r6);

        $r7 = newarray (int)[1];

        $r7[0] = 14;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r5, $r7);

        $r8 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r9);

        $r10 = newarray (int)[1];

        $r10[0] = 3;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r8, $r10);

        $r11 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r12 = newarray (int)[3];

        $r12[0] = 7;

        $r12[1] = 4;

        $r12[2] = 1;

        specialinvoke $r11.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r12);

        $r13 = newarray (int)[3];

        $r13[0] = 1;

        $r13[1] = 4;

        $r13[2] = 7;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r11, $r13);

        $r14 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r15 = newarray (int)[8];

        $r15[0] = 7;

        $r15[1] = 4;

        $r15[2] = 1;

        $r15[3] = 4;

        $r15[4] = 7;

        $r15[5] = 1;

        $r15[6] = 4;

        $r15[7] = 2;

        specialinvoke $r14.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r15);

        $r16 = newarray (int)[4];

        $r16[0] = 1;

        $r16[1] = 4;

        $r16[2] = 2;

        $r16[3] = 7;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r14, $r16);

        return;
    }

    public void testFieldSetAdds()
    {
        org.apache.flink.api.common.operators.util.FieldSetTest r0;
        org.apache.flink.api.common.operators.util.FieldSet $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r28, $r30, $r31, $r32, $r34, $r35, $r37, $r39, $r41, $r42;
        java.lang.Integer $r2, $r4, $r8, $r10, $r14, $r20, $r22, $r26;
        int[] $r6, $r12, $r16, $r18, $r24, $r27, $r29, $r33, $r36, $r38, $r40, $r43;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSetTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = virtualinvoke $r1.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r4);

        $r6 = newarray (int)[2];

        $r6[0] = 1;

        $r6[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r5, $r6);

        $r7 = <org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = virtualinvoke $r9.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r10);

        $r12 = newarray (int)[2];

        $r12[0] = 3;

        $r12[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r11, $r12);

        $r13 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        specialinvoke $r13.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r14);

        $r15 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r16 = newarray (int)[3];

        $r16[0] = 17;

        $r16[1] = 31;

        $r16[2] = 42;

        specialinvoke $r15.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r16);

        $r17 = virtualinvoke $r13.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r15);

        $r18 = newarray (int)[4];

        $r18[0] = 17;

        $r18[1] = 13;

        $r18[2] = 42;

        $r18[3] = 31;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r17, $r18);

        $r19 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        specialinvoke $r19.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r20);

        $r21 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        specialinvoke $r21.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r22);

        $r23 = virtualinvoke $r19.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r21);

        $r24 = newarray (int)[2];

        $r24[0] = 17;

        $r24[1] = 14;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r23, $r24);

        $r25 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r25.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r26);

        $r27 = newarray (int)[4];

        $r27[0] = 2;

        $r27[1] = 8;

        $r27[2] = 5;

        $r27[3] = 7;

        $r28 = virtualinvoke $r25.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(int[])>($r27);

        $r29 = newarray (int)[5];

        $r29[0] = 3;

        $r29[1] = 2;

        $r29[2] = 8;

        $r29[3] = 5;

        $r29[4] = 7;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r28, $r29);

        $r30 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r30.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r31 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r31.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r32 = virtualinvoke $r30.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r31);

        $r33 = newarray (int)[0];

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r32, $r33);

        $r34 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r34.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r35 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r36 = newarray (int)[2];

        $r36[0] = 3;

        $r36[1] = 4;

        specialinvoke $r35.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r36);

        $r37 = virtualinvoke $r34.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r35);

        $r38 = newarray (int)[2];

        $r38[0] = 4;

        $r38[1] = 3;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r37, $r38);

        $r39 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r40 = newarray (int)[2];

        $r40[0] = 5;

        $r40[1] = 1;

        specialinvoke $r39.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r40);

        $r41 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r41.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r42 = virtualinvoke $r39.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r41);

        $r43 = newarray (int)[2];

        $r43[0] = 5;

        $r43[1] = 1;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r42, $r43);

        return;
    }

    public void testImmutability()
    {
        org.apache.flink.api.common.operators.util.FieldSetTest r0;
        org.apache.flink.api.common.operators.util.FieldSet $r5, $r6, $r8, $r10, $r12;
        java.lang.Integer $r7, $r9, $r16;
        int[] $r11, $r18;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSetTest;

        $r5 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r6 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r7);

        $r8 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        specialinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r9);

        $r10 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r11 = newarray (int)[4];

        $r11[0] = 5;

        $r11[1] = 4;

        $r11[2] = 7;

        $r11[3] = 6;

        specialinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r11);

        $r12 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r6);

        virtualinvoke $r12.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r8);

        virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r10);

        virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r5);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r16);

        $r18 = newarray (int)[4];

        $r18[0] = 78;

        $r18[1] = 13;

        $r18[2] = 66;

        $r18[3] = 3;

        virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(int[])>($r18);

        $i0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l7);

        return;
    }

    public void testAddListToSet()
    {
        org.apache.flink.api.common.operators.util.FieldSetTest r0;
        org.apache.flink.api.common.operators.util.FieldSet $r1, $r3, $r6;
        java.lang.Integer $r2;
        org.apache.flink.api.common.operators.util.FieldList $r4;
        int[] $r5, $r7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSetTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = virtualinvoke $r1.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)>($r2);

        $r4 = new org.apache.flink.api.common.operators.util.FieldList;

        $r5 = newarray (int)[3];

        $r5[0] = 14;

        $r5[1] = 3;

        $r5[2] = 1;

        specialinvoke $r4.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>($r5);

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r4);

        $r7 = newarray (int)[3];

        $r7[0] = 1;

        $r7[1] = 3;

        $r7[2] = 14;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldSetTest: void check(org.apache.flink.api.common.operators.util.FieldSet,int[])>($r6, $r7);

        return;
    }

    private static transient void check(org.apache.flink.api.common.operators.util.FieldSet, int[])
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        int[] r1, r6, r7;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8, i10, i11, i12;
        long $l2, $l4, $l9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        java.lang.Integer $r3, $r4;
        java.util.Iterator r8;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter1: int[];

        if r1 != null goto label1;

        $i8 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        return;

     label1:
        $i1 = lengthof r1;

        $l2 = (long) $i1;

        $i3 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        i10 = lengthof r1;

        i11 = 0;

     label2:
        if i11 >= i10 goto label3;

        i0 = r1[i11];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r4);

        i11 = i11 + 1;

        goto label2;

     label3:
        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        r6 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int[] toArray()>();

        staticinvoke <java.util.Arrays: void sort(int[])>(r6);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r6, r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i5 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        r7 = newarray (int)[$i5];

        r8 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Iterator iterator()>();

        i12 = 0;

     label4:
        $i6 = lengthof r7;

        if i12 >= $i6 goto label5;

        $r2 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Integer) $r2;

        $i7 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r7[i12] = $i7;

        i12 = i12 + 1;

        goto label4;

     label5:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        staticinvoke <java.util.Arrays: void sort(int[])>(r7);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r7, r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }
}
