public class org.apache.flink.testutils.serialization.types.ByteArrayType extends java.lang.Object implements org.apache.flink.testutils.serialization.types.SerializationTestType
{
    private static final int MAX_LEN;
    private byte[] data;

    public void <init>()
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[0];

        r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data> = $r1;

        return;
    }

    public void <init>(byte[])
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        byte[] r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data> = r1;

        return;
    }

    public org.apache.flink.testutils.serialization.types.ByteArrayType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0, $r3;
        java.util.Random r1;
        int i0, $i1;
        byte[] r2;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: java.util.Random;

        $i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(7680);

        i0 = $i1 + 1;

        r2 = newarray (byte)[i0];

        virtualinvoke r1.<java.util.Random: void nextBytes(byte[])>(r2);

        $r3 = new org.apache.flink.testutils.serialization.types.ByteArrayType;

        specialinvoke $r3.<org.apache.flink.testutils.serialization.types.ByteArrayType: void <init>(byte[])>(r2);

        return $r3;
    }

    public int length()
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        $r1 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        $i0 = lengthof $r1;

        $i1 = $i0 + 4;

        return $i1;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        org.apache.flink.core.memory.DataOutputView r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        $i0 = lengthof $r2;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r3 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>($r3);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0;
        byte[] $r2, $r3;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r2 = newarray (byte)[i0];

        r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data> = $r2;

        $r3 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>($r3);

        return;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        $r1 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte[] $r3, $r4;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.serialization.types.ByteArrayType;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.testutils.serialization.types.ByteArrayType) r1;

        $r4 = r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        $r3 = r2.<org.apache.flink.testutils.serialization.types.ByteArrayType: byte[] data>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        return $z1;

     label1:
        return 0;
    }

    public volatile org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ByteArrayType r0, $r2;
        java.util.Random r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteArrayType;

        r1 := @parameter0: java.util.Random;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.ByteArrayType: org.apache.flink.testutils.serialization.types.ByteArrayType getRandom(java.util.Random)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.testutils.serialization.types.ByteArrayType: int MAX_LEN> = 7680;

        return;
    }
}
