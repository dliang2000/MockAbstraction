public class org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder tempFolder;

    public void <init>()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest: org.junit.rules.TemporaryFolder tempFolder> = $r1;

        return;
    }

    public void testDelegateFsMethods() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest r0;
        org.apache.flink.core.fs.FileSystem r1, $r40, $r43, $r46, $r50, $r55, $r60, $r65, $r70, $r73, $r77, $r81, $r84, $r87, $r91, $r96, $r101, $r107;
        short s0, $s4;
        long l1, $l5, $l6, $l7, $l8, $l9;
        java.lang.Object $r4, $r5, $r9, $r11, $r15, $r17, $r21, $r23, $r25, $r29, $r31, $r35, $r39, $r42, $r45, $r49, $r52, $r54, $r57, $r59, $r62, $r64, $r67, $r69, $r72, $r74, $r76, $r79, $r80, $r82, $r83, $r85, $r86, $r88, $r90, $r93, $r95, $r98, $r99, $r100, $r106;
        org.apache.flink.core.fs.Path $r6, $r12, $r18, $r24, $r32, r109, r111, r112, r113, r114, r115, r116, r117, r118, r121, r122;
        org.apache.flink.core.fs.FSDataInputStream $r7, $r13;
        org.mockito.stubbing.OngoingStubbing $r8, $r14, $r20, $r28, $r34, $r103;
        int $i2, $i3, $i12, $i13, i14, i15, i16, i17;
        boolean $z0, $z1, $z11, $z14, z15, z16;
        org.apache.flink.core.fs.FSDataOutputStream $r19, $r27, $r33;
        org.apache.flink.core.fs.FileSystem$WriteMode $r26, $r119;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r37;
        java.util.Random $r38;
        org.apache.flink.core.fs.FileSystemKind $r102, $r105, $r123;
        org.apache.flink.core.fs.FileStatus r110;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest;

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem;");

        r1 = (org.apache.flink.core.fs.FileSystem) $r4;

        $r5 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r6 = (org.apache.flink.core.fs.Path) $r5;

        $r7 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r6);

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7);

        $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataInputStream;");

        interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9);

        $r11 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r12 = (org.apache.flink.core.fs.Path) $r11;

        $i2 = staticinvoke <org.mockito.Matchers: int anyInt()>();

        $r13 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>($r12, $i2);

        $r14 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r13);

        $r15 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataInputStream;");

        interfaceinvoke $r14.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r15);

        $r17 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r18 = (org.apache.flink.core.fs.Path) $r17;

        $z0 = staticinvoke <org.mockito.Matchers: boolean anyBoolean()>();

        $r19 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean)>($r18, $z0);

        $r20 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r19);

        $r21 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataOutputStream;");

        interfaceinvoke $r20.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r21);

        $r23 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r24 = (org.apache.flink.core.fs.Path) $r23;

        $r25 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem$WriteMode;");

        $r26 = (org.apache.flink.core.fs.FileSystem$WriteMode) $r25;

        $r27 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r24, $r26);

        $r28 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r27);

        $r29 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataOutputStream;");

        interfaceinvoke $r28.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r29);

        $r31 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r32 = (org.apache.flink.core.fs.Path) $r31;

        $z1 = staticinvoke <org.mockito.Matchers: boolean anyBoolean()>();

        $i3 = staticinvoke <org.mockito.Matchers: int anyInt()>();

        $s4 = staticinvoke <org.mockito.Matchers: short anyShort()>();

        $l5 = staticinvoke <org.mockito.Matchers: long anyLong()>();

        $r33 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>($r32, $z1, $i3, $s4, $l5);

        $r34 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r33);

        $r35 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataOutputStream;");

        interfaceinvoke $r34.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r35);

        $r37 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        specialinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>(r1, 1000);

        $r38 = new java.util.Random;

        specialinvoke $r38.<java.util.Random: void <init>()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean isDistributedFS()>();

        $r39 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r40 = (org.apache.flink.core.fs.FileSystem) $r39;

        virtualinvoke $r40.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        $r42 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r43 = (org.apache.flink.core.fs.FileSystem) $r42;

        virtualinvoke $r43.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.Path getHomeDirectory()>();

        $r45 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r46 = (org.apache.flink.core.fs.FileSystem) $r45;

        virtualinvoke $r46.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getHomeDirectory()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: java.net.URI getUri()>();

        $r49 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r50 = (org.apache.flink.core.fs.FileSystem) $r49;

        virtualinvoke $r50.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r52 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r109 = (org.apache.flink.core.fs.Path) $r52;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r109);

        $r54 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r55 = (org.apache.flink.core.fs.FileSystem) $r54;

        virtualinvoke $r55.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>(r109);

        $r57 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileStatus;");

        r110 = (org.apache.flink.core.fs.FileStatus) $r57;

        i14 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        i15 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        $l7 = (long) i14;

        $l6 = (long) i15;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r110, $l7, $l6);

        $r59 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r60 = (org.apache.flink.core.fs.FileSystem) $r59;

        $l9 = (long) i14;

        $l8 = (long) i15;

        virtualinvoke $r60.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>(r110, $l9, $l8);

        $r62 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r111 = (org.apache.flink.core.fs.Path) $r62;

        i16 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>(r111, i16);

        $r64 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r65 = (org.apache.flink.core.fs.FileSystem) $r64;

        virtualinvoke $r65.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path,int)>(r111, i16);

        $r67 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r112 = (org.apache.flink.core.fs.Path) $r67;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r112);

        $r69 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r70 = (org.apache.flink.core.fs.FileSystem) $r69;

        virtualinvoke $r70.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r112);

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: long getDefaultBlockSize()>();

        $r72 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r73 = (org.apache.flink.core.fs.FileSystem) $r72;

        virtualinvoke $r73.<org.apache.flink.core.fs.FileSystem: long getDefaultBlockSize()>();

        $r74 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r113 = (org.apache.flink.core.fs.Path) $r74;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r113);

        $r76 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r77 = (org.apache.flink.core.fs.FileSystem) $r76;

        virtualinvoke $r77.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r113);

        $r79 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r114 = (org.apache.flink.core.fs.Path) $r79;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r114);

        $r80 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r81 = (org.apache.flink.core.fs.FileSystem) $r80;

        virtualinvoke $r81.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r114);

        $r82 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r115 = (org.apache.flink.core.fs.Path) $r82;

        z15 = virtualinvoke $r38.<java.util.Random: boolean nextBoolean()>();

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r115, z15);

        $r83 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r84 = (org.apache.flink.core.fs.FileSystem) $r83;

        virtualinvoke $r84.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r115, z15);

        $r85 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r116 = (org.apache.flink.core.fs.Path) $r85;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r116);

        $r86 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r87 = (org.apache.flink.core.fs.FileSystem) $r86;

        virtualinvoke $r87.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r116);

        $r88 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r117 = (org.apache.flink.core.fs.Path) $r88;

        z16 = virtualinvoke $r38.<java.util.Random: boolean nextBoolean()>();

        i17 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        $i12 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        s0 = (short) $i12;

        $i13 = virtualinvoke $r38.<java.util.Random: int nextInt()>();

        l1 = (long) $i13;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>(r117, z16, i17, s0, l1);

        $r90 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r91 = (org.apache.flink.core.fs.FileSystem) $r90;

        virtualinvoke $r91.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,boolean,int,short,long)>(r117, z16, i17, s0, l1);

        $r93 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r118 = (org.apache.flink.core.fs.Path) $r93;

        $z11 = virtualinvoke $r38.<java.util.Random: boolean nextBoolean()>();

        if $z11 == 0 goto label1;

        $r119 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        goto label2;

     label1:
        $r119 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

     label2:
        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r118, $r119);

        $r95 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r96 = (org.apache.flink.core.fs.FileSystem) $r95;

        virtualinvoke $r96.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r118, $r119);

        $r98 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r121 = (org.apache.flink.core.fs.Path) $r98;

        $r99 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        r122 = (org.apache.flink.core.fs.Path) $r99;

        virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r121, r122);

        $r100 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r101 = (org.apache.flink.core.fs.FileSystem) $r100;

        virtualinvoke $r101.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r121, r122);

        $z14 = virtualinvoke $r38.<java.util.Random: boolean nextBoolean()>();

        if $z14 == 0 goto label3;

        $r123 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind FILE_SYSTEM>;

        goto label4;

     label3:
        $r123 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind OBJECT_STORE>;

     label4:
        $r102 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        $r103 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r102);

        interfaceinvoke $r103.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r123);

        $r105 = virtualinvoke $r37.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r123, $r105);

        $r106 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r107 = (org.apache.flink.core.fs.FileSystem) $r106;

        virtualinvoke $r107.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        return;
    }

    public void testDelegateOutStreamMethods() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest r0;
        org.apache.flink.core.fs.FSDataOutputStream r1, r4, $r16, $r24, $r26, $r28, $r30, $r32;
        org.apache.flink.core.fs.FileSystem r2;
        byte[] r5;
        java.lang.Object $r6, $r11, $r12, $r14, $r20, $r23, $r25, $r27, $r29, $r31;
        long $l1, $l2;
        java.lang.Long $r7, $r9;
        org.mockito.stubbing.OngoingStubbing $r8, $r17;
        org.apache.flink.core.fs.Path $r13, $r22;
        org.apache.flink.core.fs.FileSystem$WriteMode $r15, $r21;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r19;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest;

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataOutputStream;");

        r1 = (org.apache.flink.core.fs.FSDataOutputStream) $r6;

        $l1 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: long getPos()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r8 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r7);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(46651L);

        interfaceinvoke $r8.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r9);

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem;");

        r2 = (org.apache.flink.core.fs.FileSystem) $r11;

        $r12 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r13 = (org.apache.flink.core.fs.Path) $r12;

        $r14 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem$WriteMode;");

        $r15 = (org.apache.flink.core.fs.FileSystem$WriteMode) $r14;

        $r16 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r13, $r15);

        $r17 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r16);

        interfaceinvoke $r17.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1);

        $r19 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        specialinvoke $r19.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>(r2, 100);

        $r20 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r22 = (org.apache.flink.core.fs.Path) $r20;

        $r21 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        r4 = virtualinvoke $r19.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r22, $r21);

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(77);

        $r23 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r24 = (org.apache.flink.core.fs.FSDataOutputStream) $r23;

        virtualinvoke $r24.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(77);

        r5 = newarray (byte)[1786];

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void write(byte[],int,int)>(r5, 100, 111);

        $r25 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r26 = (org.apache.flink.core.fs.FSDataOutputStream) $r25;

        virtualinvoke $r26.<org.apache.flink.core.fs.FSDataOutputStream: void write(byte[],int,int)>(r5, 100, 111);

        $l2 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: long getPos()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(46651L, $l2);

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void flush()>();

        $r27 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r28 = (org.apache.flink.core.fs.FSDataOutputStream) $r27;

        virtualinvoke $r28.<org.apache.flink.core.fs.FSDataOutputStream: void flush()>();

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void sync()>();

        $r29 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r30 = (org.apache.flink.core.fs.FSDataOutputStream) $r29;

        virtualinvoke $r30.<org.apache.flink.core.fs.FSDataOutputStream: void sync()>();

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        $r31 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r32 = (org.apache.flink.core.fs.FSDataOutputStream) $r31;

        virtualinvoke $r32.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        return;
    }

    public void testDelegateInStreamMethods() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest r0;
        org.apache.flink.core.fs.FSDataInputStream r1, r4, $r31, $r39, $r43, $r45;
        org.apache.flink.core.fs.FileSystem r2;
        java.lang.Object $r5, $r10, $r28, $r29, $r35, $r38, $r42, $r44;
        int $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i15;
        java.lang.Integer $r6, $r8, $r12, $r14, $r20, $r22;
        org.mockito.stubbing.OngoingStubbing $r7, $r13, $r17, $r21, $r25, $r32;
        byte[] $r11, $r37;
        long $l8, $l11, $l13, $l14, $l16;
        java.lang.Long $r16, $r18;
        boolean $z1, $z2;
        java.lang.Boolean $r24, $r26, $r40, $r41;
        org.apache.flink.core.fs.Path $r30, $r36;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r34;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemDelegationTest;

        $r5 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FSDataInputStream;");

        r1 = (org.apache.flink.core.fs.FSDataInputStream) $r5;

        $i4 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r6);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(93);

        interfaceinvoke $r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r8);

        $r10 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "[B");

        $r11 = (byte[]) $r10;

        $i5 = staticinvoke <org.mockito.Matchers: int anyInt()>();

        $i6 = staticinvoke <org.mockito.Matchers: int anyInt()>();

        $i7 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[],int,int)>($r11, $i5, $i6);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r12);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        interfaceinvoke $r13.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r14);

        $l8 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataInputStream: long getPos()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $r17 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r16);

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(93L);

        interfaceinvoke $r17.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r18);

        $i9 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataInputStream: int available()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r21 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r20);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17);

        interfaceinvoke $r21.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r22);

        $z1 = virtualinvoke r1.<org.apache.flink.core.fs.FSDataInputStream: boolean markSupported()>();

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r25 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r24);

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r25.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r26);

        $r28 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/FileSystem;");

        r2 = (org.apache.flink.core.fs.FileSystem) $r28;

        $r29 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r30 = (org.apache.flink.core.fs.Path) $r29;

        $r31 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r30);

        $r32 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r31);

        interfaceinvoke $r32.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1);

        $r34 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        specialinvoke $r34.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>(r2, 100);

        $r35 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/flink/core/fs/Path;");

        $r36 = (org.apache.flink.core.fs.Path) $r35;

        r4 = virtualinvoke $r34.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r36);

        $i10 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(93L, $l11);

        $r37 = newarray (byte)[11];

        $i12 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[],int,int)>($r37, 2, 5);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(11L, $l13);

        $l14 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: long getPos()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(93L, $l14);

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>(17876L);

        $r38 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r39 = (org.apache.flink.core.fs.FSDataInputStream) $r38;

        virtualinvoke $r39.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>(17876L);

        $i15 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: int available()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(17L, $l16);

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: boolean markSupported()>();

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r40, $r41);

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: void mark(int)>(9876);

        $r42 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r43 = (org.apache.flink.core.fs.FSDataInputStream) $r42;

        virtualinvoke $r43.<org.apache.flink.core.fs.FSDataInputStream: void mark(int)>(9876);

        virtualinvoke r4.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        $r44 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object)>(r1);

        $r45 = (org.apache.flink.core.fs.FSDataInputStream) $r44;

        virtualinvoke $r45.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        return;
    }
}
