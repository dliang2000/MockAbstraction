public class org.apache.flink.api.common.operators.GenericDataSourceBaseTest extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBaseTest r0;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBaseTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDataSourcePlain()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBaseTest r0;
        java.util.List r3, r4, $r13, $r15;
        org.apache.flink.api.common.operators.util.TestNonRichInputFormat $r5;
        org.apache.flink.api.common.operators.GenericDataSourceBase $r6;
        org.apache.flink.api.common.operators.OperatorInformation $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8;
        org.apache.flink.api.common.ExecutionConfig $r9;
        java.lang.String[] $r12, $r14;
        java.lang.Exception $r16;
        java.lang.String $r17;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBaseTest;

     label1:
        $r5 = new org.apache.flink.api.common.operators.util.TestNonRichInputFormat;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void <init>()>();

        $r6 = new org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r7 = new org.apache.flink.api.common.operators.OperatorInformation;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r7.<org.apache.flink.api.common.operators.OperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r8);

        specialinvoke $r6.<org.apache.flink.api.common.operators.GenericDataSourceBase: void <init>(org.apache.flink.api.common.io.InputFormat,org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>($r5, $r7, "testSource");

        $r9 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        r3 = virtualinvoke $r6.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.util.List executeOnCollections(org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(null, $r9);

        virtualinvoke $r5.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void reset()>();

        virtualinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        r4 = virtualinvoke $r6.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.util.List executeOnCollections(org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(null, $r9);

        $r12 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, r3);

        $r14 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, r4);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

        $r17 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testDataSourceWithRuntimeContext()
    {
        org.apache.flink.api.common.operators.GenericDataSourceBaseTest r0;
        java.util.List r6, r7, $r39, $r41;
        org.apache.flink.api.common.operators.util.TestRichInputFormat $r8;
        org.apache.flink.api.common.operators.GenericDataSourceBase $r9;
        org.apache.flink.api.common.operators.OperatorInformation $r10;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r11;
        java.util.HashMap $r12, $r13;
        org.apache.flink.api.common.TaskInfo $r14;
        org.apache.flink.api.common.ExecutionConfig $r15;
        java.lang.Boolean $r17, $r18, $r19, $r20, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r34, $r35, $r36, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r21, $r32;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r22, $r33;
        java.lang.String[] $r38, $r40;
        java.lang.Exception $r42;
        java.lang.String $r43;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSourceBaseTest;

     label1:
        $r8 = new org.apache.flink.api.common.operators.util.TestRichInputFormat;

        specialinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: void <init>()>();

        $r9 = new org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r10 = new org.apache.flink.api.common.operators.OperatorInformation;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r10.<org.apache.flink.api.common.operators.OperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r11);

        specialinvoke $r9.<org.apache.flink.api.common.operators.GenericDataSourceBase: void <init>(org.apache.flink.api.common.io.InputFormat,org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>($r8, $r10, "testSource");

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r14 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r14.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("test_source", 1, 0, 1, 0);

        $r15 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r15.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z0 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenClosed()>();

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenOpened()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r22 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r22.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r21.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r14, null, $r15, $r13, $r12, $r22);

        r6 = virtualinvoke $r9.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.util.List executeOnCollections(org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r21, $r15);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z2 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenClosed()>();

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z3 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenOpened()>();

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: void reset()>();

        virtualinvoke $r15.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z4 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenClosed()>();

        $r29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

        $r30 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $z5 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenOpened()>();

        $r31 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, $r31);

        $r32 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r33 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r33.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r32.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r14, null, $r15, $r13, $r12, $r33);

        r7 = virtualinvoke $r9.<org.apache.flink.api.common.operators.GenericDataSourceBase: java.util.List executeOnCollections(org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r32, $r15);

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z6 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenClosed()>();

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r34, $r35);

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $z7 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean hasBeenOpened()>();

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r36, $r37);

        $r38 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] RICH_NAMES>;

        $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r38);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, r6);

        $r40 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] RICH_NAMES>;

        $r41 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r41, r7);

     label2:
        goto label4;

     label3:
        $r42 := @caughtexception;

        virtualinvoke $r42.<java.lang.Exception: void printStackTrace()>();

        $r43 = virtualinvoke $r42.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r43);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
