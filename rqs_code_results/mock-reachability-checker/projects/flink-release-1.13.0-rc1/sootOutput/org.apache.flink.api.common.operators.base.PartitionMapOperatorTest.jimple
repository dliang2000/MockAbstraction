public class org.apache.flink.api.common.operators.base.PartitionMapOperatorTest extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest r0;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testMapPartitionWithRuntimeContext()
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest r0;
        java.util.List r8, r9, $r19, $r39, $r47;
        java.util.concurrent.atomic.AtomicBoolean $r10, $r11;
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 $r12;
        org.apache.flink.api.common.operators.base.MapPartitionOperatorBase $r13;
        org.apache.flink.api.common.operators.UnaryOperatorInformation $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r15, $r16;
        java.util.ArrayList $r17;
        java.lang.String[] $r18;
        org.apache.flink.api.common.TaskInfo $r20;
        org.apache.flink.api.common.ExecutionConfig $r21;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r23, $r28;
        java.util.HashMap $r24, $r25, $r29, $r30;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r26, $r31;
        java.lang.Integer[] $r32, $r40;
        java.lang.Integer $r33, $r34, $r35, $r36, $r37, $r38, $r41, $r42, $r43, $r44, $r45, $r46;
        boolean $z0, $z1;
        java.lang.Exception $r48;
        java.lang.String $r49;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest;

     label1:
        $r10 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        $r11 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        $r12 = new org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1;

        specialinvoke $r12.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: void <init>(org.apache.flink.api.common.operators.base.PartitionMapOperatorTest,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r10, $r11);

        $r13 = new org.apache.flink.api.common.operators.base.MapPartitionOperatorBase;

        $r14 = new org.apache.flink.api.common.operators.UnaryOperatorInformation;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        specialinvoke $r14.<org.apache.flink.api.common.operators.UnaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r16, $r15);

        specialinvoke $r13.<org.apache.flink.api.common.operators.base.MapPartitionOperatorBase: void <init>(org.apache.flink.api.common.functions.MapPartitionFunction,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r12, $r14, "Test Task");

        $r17 = new java.util.ArrayList;

        $r18 = newarray (java.lang.String)[6];

        $r18[0] = "1";

        $r18[1] = "2";

        $r18[2] = "3";

        $r18[3] = "4";

        $r18[4] = "5";

        $r18[5] = "6";

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r19);

        $r20 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r20.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("Test Task", 1, 0, 1, 0);

        $r21 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r21.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r23 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        $r25 = new java.util.HashMap;

        specialinvoke $r25.<java.util.HashMap: void <init>()>();

        $r26 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r26.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r23.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r20, null, $r21, $r24, $r25, $r26);

        r8 = virtualinvoke $r13.<org.apache.flink.api.common.operators.base.MapPartitionOperatorBase: java.util.List executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r17, $r23, $r21);

        virtualinvoke $r21.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        $r28 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r29 = new java.util.HashMap;

        specialinvoke $r29.<java.util.HashMap: void <init>()>();

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        $r31 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r31.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r28.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r20, null, $r21, $r29, $r30, $r31);

        r9 = virtualinvoke $r13.<org.apache.flink.api.common.operators.base.MapPartitionOperatorBase: java.util.List executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r17, $r28, $r21);

        $r32 = newarray (java.lang.Integer)[6];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r32[0] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r32[1] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r32[2] = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r32[3] = $r36;

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r32[4] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r32[5] = $r38;

        $r39 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, r8);

        $r40 = newarray (java.lang.Integer)[6];

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r40[0] = $r41;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r40[1] = $r42;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r40[2] = $r43;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r40[3] = $r44;

        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r40[4] = $r45;

        $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r40[5] = $r46;

        $r47 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r47, r9);

        $z0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label2:
        goto label4;

     label3:
        $r48 := @caughtexception;

        virtualinvoke $r48.<java.lang.Exception: void printStackTrace()>();

        $r49 = virtualinvoke $r48.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r49);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
