public class org.apache.flink.api.common.operators.SelectorFunctionKeysTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testAreCompatible1() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r11, $r14;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r9, $r12;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1 $r10;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2 $r13;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r10 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1;

        specialinvoke $r10.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1: void <init>()>();

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, r1, $r11);

        $r12 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r13 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2;

        specialinvoke $r13.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2: void <init>()>();

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r5, $r14);

        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible2() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r6, $r11;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7, $r12;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10, $r13, $r14;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r15, $r17;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3 $r16;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector4 $r18;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r7[1] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7[2] = $r10;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r11 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r12 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r12[0] = $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r12[1] = $r14;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r12);

        $r15 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r16 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3;

        specialinvoke $r16.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3: void <init>()>();

        specialinvoke $r15.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r16, r1, $r11);

        $r17 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r18 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector4;

        specialinvoke $r18.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector4: void <init>()>();

        specialinvoke $r17.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r18, $r6, $r11);

        $z0 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r17.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible3() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r1, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r5;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r6;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1 $r7;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r5 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        $r6 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r7 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1;

        specialinvoke $r7.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1: void <init>()>();

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r6.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, r2, $r8);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testAreCompatible4() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5, $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6, $r15;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9, $r16, $r17;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r10;
        int[] $r11;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r12;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3 $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[2] = $r9;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r11 = newarray (int)[2];

        $r11[0] = 2;

        $r11[1] = 0;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r11, $r5);

        $r12 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r13 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3;

        specialinvoke $r13.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3: void <init>()>();

        $r14 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r15 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r15[0] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r15[1] = $r17;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r15);

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, r2, $r14);

        $z0 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testOriginalTypes1() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4, $r10, $r12;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r6, $r9, $r11;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r7;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2 $r8;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        $r3 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r4 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[1] = $r6;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r4);

        $r7 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r8 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2;

        specialinvoke $r8.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector2: void <init>()>();

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r7.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r3, $r9);

        $r10 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10[0] = $r11;

        $r12 = virtualinvoke $r7.<org.apache.flink.api.common.operators.Keys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r10, $r12);

        return;
    }

    public void testOriginalTypes2() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r5, $r10, $r11;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r7;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r8;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3 $r9;

        r0 := @this: org.apache.flink.api.common.operators.SelectorFunctionKeysTest;

        $r4 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r5 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r5[0] = $r6;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r5[1] = $r7;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r8 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r9 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3;

        specialinvoke $r9.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3: void <init>()>();

        specialinvoke $r8.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, r2, $r4);

        $r10 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r10[0] = $r4;

        $r11 = virtualinvoke $r8.<org.apache.flink.api.common.operators.Keys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r10, $r11);

        return;
    }
}
