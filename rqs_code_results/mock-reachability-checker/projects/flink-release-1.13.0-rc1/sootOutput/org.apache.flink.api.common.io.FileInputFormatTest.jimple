public class org.apache.flink.api.common.io.FileInputFormatTest extends java.lang.Object
{
    public org.junit.rules.TemporaryFolder temporaryFolder;

    public void <init>()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r1;

        return;
    }

    public void testGetPathWithoutSettingFirst()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        org.apache.flink.core.fs.Path $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.Path getFilePath()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Path should be null.", $r3);

        return;
    }

    public void testGetPathsWithoutSettingFirst()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.Path[] r2;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r3;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r3 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Paths should not be null.", r2);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Paths size should be 0.", 0L, $l1);

        return;
    }

    public void testToStringWithoutPathSet()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("The toString() should be correct.", "File Input (unknown file)", $r3);

        return;
    }

    public void testSetPathsNull()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = newarray (java.lang.String)[1];

        $r4 = (java.lang.String) null;

        $r3[0] = $r4;

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r3);

        return;
    }

    public void testSetPathNullString()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = (java.lang.String) null;

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>($r3);

        return;
    }

    public void testSetPathNullPath()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        org.apache.flink.core.fs.Path $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = (org.apache.flink.core.fs.Path) null;

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r3);

        return;
    }

    public void testSetPathsOnePathNull()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "/an/imaginary/path";

        $r3[1] = null;

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r3);

        return;
    }

    public void testSetPathsEmptyArray()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r2;
        java.lang.String[] $r3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r3 = newarray (java.lang.String)[0];

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r3);

        return;
    }

    public void testSetPath()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        org.apache.flink.core.fs.Path $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>("/some/imaginary/path");

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.Path getFilePath()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, "/some/imaginary/path");

        return;
    }

    public void testSetPathOnMulti()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.Path[] r3;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r4;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.Path $r5, $r8;
        java.net.URI $r6, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePath(java.lang.String)>("/an/imaginary/path");

        r3 = virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof r3;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r5 = r3[0];

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path", $r7);

        $r8 = $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path filePath>;

        $r9 = virtualinvoke $r8.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path", $r10);

        return;
    }

    public void testSetPathsSingleWithMulti()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.Path[] r3;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r4;
        java.lang.String[] $r5;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.Path $r6, $r9;
        java.net.URI $r7, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "/an/imaginary/path";

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r5);

        r3 = virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof r3;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r6 = r3[0];

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path", $r8);

        $r9 = $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path filePath>;

        $r10 = virtualinvoke $r9.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path", $r11);

        return;
    }

    public void testSetPathsMulti()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.Path[] r4;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r5;
        java.lang.String[] $r6;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.Path $r7, $r10;
        java.net.URI $r8, $r11;
        java.lang.String $r9, $r12;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r5 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "/an/imaginary/path";

        $r6[1] = "/an/imaginary/path2";

        virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r6);

        r4 = virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path[] getFilePaths()>();

        $i0 = lengthof r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r7 = r4[0];

        $r8 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path", $r9);

        $r10 = r4[1];

        $r11 = virtualinvoke $r10.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/an/imaginary/path2", $r12);

        return;
    }

    public void testMultiPathSetOnSinglePathIF()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r4;
        java.lang.String[] $r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "/an/imaginary/path";

        $r5[1] = "/an/imaginary/path2";

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePaths(java.lang.String[])>($r5);

        return;
    }

    public void testMultiPathSetOnSinglePathIF2()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r4;
        org.apache.flink.core.fs.Path[] $r5;
        org.apache.flink.core.fs.Path $r6, $r7;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r5 = newarray (org.apache.flink.core.fs.Path)[2];

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/an/imaginary/path");

        $r5[0] = $r6;

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/an/imaginary/path2");

        $r5[1] = $r7;

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePaths(org.apache.flink.core.fs.Path[])>($r5);

        return;
    }

    public void testSinglePathGetOnMultiPathIF()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r4;
        java.lang.String[] $r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "/an/imaginary/path";

        $r5[1] = "/an/imaginary/path2";

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r5);

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.core.fs.Path getFilePath()>();

        return;
    }

    public void testSetFileViaConfiguration()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r4;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.core.fs.Path $r6, $r7;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("input.file.path", "file:///some/none/existing/directory/");

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("file:///some/none/existing/directory/");

        $r7 = virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.Path getFilePath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Paths should be equal.", $r6, $r7);

        return;
    }

    public void testSetFileViaConfigurationEmptyPath()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r3;
        org.apache.flink.configuration.Configuration $r4;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r3 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("input.file.path", null);

        virtualinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        return;
    }

    public void testCreateInputSplitSingleFile() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, $r8, $r11;
        org.apache.flink.core.fs.FileInputSplit[] r3;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r4;
        org.apache.flink.configuration.Configuration $r5;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.FileInputSplit $r6, $r9;
        org.apache.flink.core.fs.Path $r7, $r10;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>("Hello World");

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        r3 = virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(2);

        $i0 = lengthof r3;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r6 = r3[0];

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r8);

        $r9 = r3[1];

        $r10 = virtualinvoke $r9.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r11);

        return;
    }

    public void testCreateInputSplitMultiFiles() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, r2, r3, $r12, $r14, $r16;
        org.apache.flink.core.fs.FileInputSplit[] r5;
        int i0, $i1, i10, i11, i12, i13;
        org.apache.flink.core.fs.FileInputSplit r7;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r8;
        java.lang.String[] $r9;
        org.apache.flink.configuration.Configuration $r10;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        org.apache.flink.core.fs.Path $r11, $r13, $r15;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(21L);

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(22L);

        r3 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(23L);

        $r8 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r8.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = r1;

        $r9[1] = r2;

        $r9[2] = r3;

        virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormat: void setFilePaths(java.lang.String[])>($r9);

        $r10 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r10.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r10);

        r5 = virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(3);

        i10 = 0;

        i11 = 0;

        i12 = 0;

        $i1 = lengthof r5;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l2);

        i0 = lengthof r5;

        i13 = 0;

     label1:
        if i13 >= i0 goto label6;

        r7 = r5[i13];

        $l6 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l6);

        $r11 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r12 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        i10 = i10 + 1;

        $l9 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(21L, $l9);

        goto label5;

     label2:
        $r13 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label3;

        i11 = i11 + 1;

        $l8 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(22L, $l8);

        goto label5;

     label3:
        $r15 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r16 = virtualinvoke $r15.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label4;

        i12 = i12 + 1;

        $l7 = virtualinvoke r7.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(23L, $l7);

        goto label5;

     label4:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Got split for unknown file.");

     label5:
        i13 = i13 + 1;

        goto label1;

     label6:
        $l3 = (long) i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $l4 = (long) i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l4);

        $l5 = (long) i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        return;
    }

    public void testGetStatisticsNonExistingFile()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r1;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r2;
        org.apache.flink.configuration.Configuration $r3;
        java.lang.Exception $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        $r2 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>("file:///some/none/existing/directory/");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("The file statistics should be null.", r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r5 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testGetStatisticsOneFileNoCachedVersion()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, $r7;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r4;
        org.apache.flink.configuration.Configuration $r5;
        long $l0;
        java.lang.Exception $r6;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(512000L);

        $r4 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        r3 = virtualinvoke $r4.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l0 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 512000L, $l0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r7 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testGetStatisticsMultipleFilesNoCachedVersion()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, $r10;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        long[] $r6;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r7;
        org.apache.flink.configuration.Configuration $r8;
        long $l3;
        java.lang.Exception $r9;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        $r4 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r6 = newarray (long)[3];

        $r6[0] = 2077L;

        $r6[1] = 31909L;

        $r6[2] = 10L;

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDir(java.io.File,long[])>($r5, $r6);

        $r7 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r8);

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l3 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 33996L, $l3);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        $r10 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testGetStatisticsOneFileWithCachedVersion()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, $r20;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r2, r3, r5, r7, $r14, $r17;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r8, $r10, $r12, $r15;
        org.apache.flink.configuration.Configuration $r9, $r11, $r13, $r16;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        java.lang.Exception $r19;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(50873L);

        $r8 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r8.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r9 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r9.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r9);

        r2 = virtualinvoke $r8.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l1 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 50873L, $l1);

        $r10 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r10.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r10.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r11 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r11.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r11);

        r3 = virtualinvoke $r10.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r2);

        if r3 != r2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Statistics object was changed", $z0);

        $r12 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r12.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r12.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

        $r14 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l2 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        specialinvoke $r14.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l2, 10065L, -1.0F);

        r5 = virtualinvoke $r12.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r14);

        $l3 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 10065L, $l3);

        $r15 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r15.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r15.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r1);

        $r16 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r16.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r16);

        $r17 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l4 = virtualinvoke r2.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        $l5 = $l4 - 1L;

        specialinvoke $r17.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l5, 10065L, -1.0F);

        r7 = virtualinvoke $r15.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r17);

        $l6 = interfaceinvoke r7.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 50873L, $l6);

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

        $r20 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r20);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void testGetStatisticsMultipleFilesWithCachedVersion()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r1;
        java.lang.String r2, r3, r4, r5, $r31;
        long l5, l6, l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r6, r7, r9, r11, $r25, $r28;
        org.junit.rules.TemporaryFolder $r12;
        org.apache.flink.core.fs.Path $r13, $r15, $r17;
        org.apache.flink.core.fs.FileStatus $r14, $r16, $r18;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r19, $r21, $r23, $r26;
        org.apache.flink.configuration.Configuration $r20, $r22, $r24, $r27;
        java.lang.Exception $r30;
        org.apache.flink.core.fs.FileSystem r32;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        r32 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r12 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>(r2, 2077L);

        $r13 = new org.apache.flink.core.fs.Path;

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        $r14 = virtualinvoke r32.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r13);

        l5 = interfaceinvoke $r14.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        r4 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>(r2, 31909L);

        $r15 = new org.apache.flink.core.fs.Path;

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r4);

        $r16 = virtualinvoke r32.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r15);

        l6 = interfaceinvoke $r16.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        r5 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,long)>(r2, 10L);

        $r17 = new org.apache.flink.core.fs.Path;

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r5);

        $r18 = virtualinvoke r32.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r17);

        l7 = interfaceinvoke $r18.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        $r19 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r20 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r20.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r20);

        r6 = virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l8 = virtualinvoke r6.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 33996L, $l8);

        $r21 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r21.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r22 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r22.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r22);

        r7 = virtualinvoke $r21.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r6);

        if r7 != r6 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Statistics object was changed", $z0);

        $r23 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r23.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r23.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r24 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r24.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r23.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r24);

        $r25 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l9 = virtualinvoke r6.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        specialinvoke $r25.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l9, 10065L, -1.0F);

        r9 = virtualinvoke $r23.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r25);

        $l10 = interfaceinvoke r9.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 10065L, $l10);

        $r26 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r26.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r27 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r27.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r27);

        $r28 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l11 = staticinvoke <java.lang.Math: long min(long,long)>(l5, l6);

        $l12 = staticinvoke <java.lang.Math: long min(long,long)>($l11, l7);

        $l13 = $l12 - 1L;

        specialinvoke $r28.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l13, 10065L, -1.0F);

        r11 = virtualinvoke $r26.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r28);

        $l14 = interfaceinvoke r11.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 33996L, $l14);

     label4:
        goto label6;

     label5:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

        $r31 = virtualinvoke $r30.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void testGetStatisticsMultipleNonExistingFile() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r2;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r3;
        java.lang.String[] $r4;
        org.apache.flink.configuration.Configuration $r5;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r3 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "file:///some/none/existing/directory/";

        $r4[1] = "file:///another/non/existing/directory/";

        virtualinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r4);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("The file statistics should be null.", r2);

        return;
    }

    public void testGetStatisticsMultipleOneFileNoCachedVersion() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, r2;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r4;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r5;
        java.lang.String[] $r6;
        org.apache.flink.configuration.Configuration $r7;
        long $l3;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(512000L);

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(517120L);

        $r5 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r6);

        $r7 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r7.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r7);

        r4 = virtualinvoke $r5.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l3 = interfaceinvoke r4.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 1029120L, $l3);

        return;
    }

    public void testGetStatisticsMultipleFilesMultiplePathsNoCachedVersion() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.lang.String r1, r2;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r4;
        org.junit.rules.TemporaryFolder $r5, $r8;
        java.io.File $r6, $r9;
        long[] $r7, $r10;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r11;
        java.lang.String[] $r12;
        org.apache.flink.configuration.Configuration $r13;
        long $l8;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r5 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r6 = virtualinvoke $r5.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r7 = newarray (long)[3];

        $r7[0] = 2077L;

        $r7[1] = 31909L;

        $r7[2] = 10L;

        r1 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDir(java.io.File,long[])>($r6, $r7);

        $r8 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r9 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r10 = newarray (long)[3];

        $r10[0] = 2051L;

        $r10[1] = 31902L;

        $r10[2] = 15L;

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDir(java.io.File,long[])>($r9, $r10);

        $r11 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r12 = newarray (java.lang.String)[2];

        $r12[0] = r1;

        $r12[1] = r2;

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

        r4 = virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l8 = interfaceinvoke r4.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 67964L, $l8);

        return;
    }

    public void testGetStatisticsMultipleOneFileWithCachedVersion() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.lang.String r2, r3;
        long l2, l4, $l6, $l7, $l8, $l9, $l10, $l11;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r4, r5, r7, r9, $r21, $r25;
        org.apache.flink.core.fs.Path $r10, $r12;
        org.apache.flink.core.fs.FileStatus $r11, $r13;
        org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat $r14, $r17, $r19, $r22;
        java.lang.String[] $r15, $r23;
        org.apache.flink.configuration.Configuration $r16, $r18, $r20, $r24;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(50873L);

        $r10 = new org.apache.flink.core.fs.Path;

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r2);

        $r11 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r10);

        l2 = interfaceinvoke $r11.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        r3 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>(52573L);

        $r12 = new org.apache.flink.core.fs.Path;

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        $r13 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r12);

        l4 = interfaceinvoke $r13.<org.apache.flink.core.fs.FileStatus: long getModificationTime()>();

        $r14 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r15 = newarray (java.lang.String)[2];

        $r15[0] = r2;

        $r15[1] = r3;

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r15);

        $r16 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r16.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r16);

        r4 = virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l6 = virtualinvoke r4.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 103446L, $l6);

        $r17 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r17.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r17.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r18 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r18.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

        r5 = virtualinvoke $r17.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r4);

        if r5 != r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Statistics object was changed", $z0);

        $r19 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePath(java.lang.String)>(r2);

        $r20 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r20.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r20);

        $r21 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l7 = virtualinvoke r4.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        specialinvoke $r21.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l7, 10065L, -1.0F);

        r7 = virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r21);

        $l8 = interfaceinvoke r7.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 10065L, $l8);

        $r22 = new org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat;

        specialinvoke $r22.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r23 = newarray (java.lang.String)[2];

        $r23[0] = r2;

        $r23[1] = r3;

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void setFilePaths(java.lang.String[])>($r23);

        $r24 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r24.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r24);

        $r25 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l9 = staticinvoke <java.lang.Math: long min(long,long)>(l2, l4);

        $l10 = $l9 - 1L;

        specialinvoke $r25.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l10, 10065L, -1.0F);

        r9 = virtualinvoke $r22.<org.apache.flink.api.common.io.FileInputFormatTest$MultiDummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r25);

        $l11 = interfaceinvoke r9.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 103446L, $l11);

        return;
    }

    public void testFileInputSplit()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit[] r2, r22;
        org.apache.flink.core.fs.FileInputSplit r3, r20;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        java.lang.String[] $r6;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r7, $r11;
        org.apache.flink.configuration.Configuration $r8, $r12;
        int $i0, $i2, i11, i12, i13, i14;
        long $l1, $l3, $l4, $l5, $l7, $l8, $l9, $l10;
        java.lang.String $r9, $r14, $r17, r18;
        org.apache.flink.core.fs.Path $r13;
        boolean $z0, $z1;
        byte $b6;
        java.lang.Exception $r16;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label01:
        $r4 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r6 = newarray (java.lang.String)[4];

        $r6[0] = "some";

        $r6[1] = "stupid";

        $r6[2] = "meaningless";

        $r6[3] = "files";

        r18 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDirExtension(java.io.File,java.lang.String,java.lang.String[])>($r5, ".deflate", $r6);

        $r7 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r18);

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r8);

        r2 = virtualinvoke $r7.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(2);

        $i0 = lengthof r2;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        i11 = lengthof r2;

        i12 = 0;

     label02:
        if i12 >= i11 goto label03;

        r20 = r2[i12];

        $l9 = virtualinvoke r20.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l9);

        $l10 = virtualinvoke r20.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l10);

        i12 = i12 + 1;

        goto label02;

     label03:
        $r9 = virtualinvoke r18.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file:", "");

        staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileInDirectory(java.lang.String,java.lang.String)>($r9, "this creates a test file with a random extension (at least not .deflate)");

        $r11 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>(r18);

        $r12 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r12.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r12);

        r22 = virtualinvoke $r11.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(2);

        $i2 = lengthof r22;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l3);

        i13 = lengthof r22;

        i14 = 0;

     label04:
        if i14 >= i13 goto label09;

        r3 = r22[i14];

        $r13 = virtualinvoke r3.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean endsWith(java.lang.String)>(".deflate");

        if $z0 == 0 goto label05;

        $l7 = virtualinvoke r3.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-1L, $l7);

        $l8 = virtualinvoke r3.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l8);

        goto label08;

     label05:
        $l4 = virtualinvoke r3.<org.apache.flink.core.fs.FileInputSplit: long getStart()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l4);

        $l5 = virtualinvoke r3.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $b6 = $l5 cmp 0L;

        if $b6 <= 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("split size not correct", $z1);

     label08:
        i14 = i14 + 1;

        goto label04;

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

        $r17 = virtualinvoke $r16.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public void testIgnoredUnderscoreFiles()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r1, r2, r3, r4, $r21;
        org.apache.flink.core.fs.FileInputSplit[] r6;
        java.net.URI r7, r8, r9, r10, $r22;
        org.junit.rules.TemporaryFolder $r11, $r12, $r13, $r14, $r20;
        java.nio.charset.Charset $r15;
        java.lang.String $r16, $r23, $r31, $r32;
        byte[] $r17;
        java.io.File[] $r18;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r19;
        org.apache.flink.configuration.Configuration $r24;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.FileInputSplit $r25, $r27;
        org.apache.flink.core.fs.Path $r26, $r28;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Exception $r29;
        java.io.PrintStream $r30;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        $r11 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("dataFile1.txt");

        $r12 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("another_file.bin");

        $r13 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r3 = virtualinvoke $r13.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("_luigi");

        $r14 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r4 = virtualinvoke $r14.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("_SUCCESS");

        $r16 = "CONTENTS";

        $r15 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r17 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        $r18 = newarray (java.io.File)[4];

        $r18[0] = r1;

        $r18[1] = r2;

        $r18[2] = r3;

        $r18[3] = r4;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest: void createTempFiles(byte[],java.io.File[])>($r17, $r18);

        $r19 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r20 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r21 = virtualinvoke $r20.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r22 = virtualinvoke $r21.<java.io.File: java.net.URI toURI()>();

        $r23 = virtualinvoke $r22.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>($r23);

        $r24 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r24.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r24);

        r6 = virtualinvoke $r19.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r6;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r25 = r6[0];

        $r26 = virtualinvoke $r25.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        r7 = virtualinvoke $r26.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r27 = r6[1];

        $r28 = virtualinvoke $r27.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        r8 = virtualinvoke $r28.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r9 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        r10 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $z0 = virtualinvoke r7.<java.net.URI: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        $z3 = virtualinvoke r8.<java.net.URI: boolean equals(java.lang.Object)>(r10);

        if $z3 != 0 goto label3;

     label2:
        $z1 = virtualinvoke r7.<java.net.URI: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r8.<java.net.URI: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label4;

     label3:
        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label6:
        goto label8;

     label7:
        $r29 := @caughtexception;

        $r30 = <java.lang.System: java.io.PrintStream err>;

        $r31 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r31);

        virtualinvoke $r29.<java.lang.Exception: void printStackTrace()>();

        $r32 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r32);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testExcludeFiles()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r1, r2, $r18;
        org.apache.flink.core.fs.FileInputSplit[] r6;
        java.net.URI r7, r8, $r19;
        org.junit.rules.TemporaryFolder $r9, $r10, $r17;
        java.io.File[] $r11;
        java.nio.charset.Charset $r12;
        java.lang.String $r13, $r20, $r28, $r29;
        byte[] $r14;
        org.apache.flink.configuration.Configuration $r15;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r16;
        org.apache.flink.api.common.io.GlobFilePathFilter $r21;
        java.util.List $r22, $r23;
        int $i0;
        long $l1;
        org.apache.flink.core.fs.FileInputSplit $r24;
        org.apache.flink.core.fs.Path $r25;
        java.lang.Exception $r26;
        java.io.PrintStream $r27;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        $r9 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("dataFile1.txt");

        $r10 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("another_file.bin");

        $r11 = newarray (java.io.File)[2];

        $r11[0] = r1;

        $r11[1] = r2;

        $r13 = "CONTENTS";

        $r12 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest: void createTempFiles(byte[],java.io.File[])>($r14, $r11);

        $r15 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r15.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r16 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r16.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r17 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r18 = virtualinvoke $r17.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r19 = virtualinvoke $r18.<java.io.File: java.net.URI toURI()>();

        $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>($r20);

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r15);

        $r21 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r22 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**/another_file.bin");

        specialinvoke $r21.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r22, $r23);

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilesFilter(org.apache.flink.api.common.io.FilePathFilter)>($r21);

        r6 = virtualinvoke $r16.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r6;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r24 = r6[0];

        $r25 = virtualinvoke $r24.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        r7 = virtualinvoke $r25.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r8 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r7, r8);

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        $r27 = <java.lang.System: java.io.PrintStream err>;

        $r28 = virtualinvoke $r26.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r28);

        virtualinvoke $r26.<java.lang.Exception: void printStackTrace()>();

        $r29 = virtualinvoke $r26.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r29);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadMultiplePatterns() throws java.lang.Exception
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r2, r3, $r16;
        org.apache.flink.core.fs.FileInputSplit[] r6;
        org.junit.rules.TemporaryFolder $r7, $r8, $r15;
        java.nio.charset.Charset $r9;
        java.lang.String $r10, $r18;
        byte[] $r11;
        java.io.File[] $r12;
        org.apache.flink.configuration.Configuration $r13;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r14;
        java.net.URI $r17;
        org.apache.flink.api.common.io.GlobFilePathFilter $r19;
        java.util.List $r20, $r22;
        java.lang.String[] $r21;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        $r7 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("dataFile1.txt");

        $r8 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r3 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("another_file.bin");

        $r10 = "CONTENTS";

        $r9 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);

        $r12 = newarray (java.io.File)[2];

        $r12[0] = r2;

        $r12[1] = r3;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest: void createTempFiles(byte[],java.io.File[])>($r11, $r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r14 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r15 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r16 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r17 = virtualinvoke $r16.<java.io.File: java.net.URI toURI()>();

        $r18 = virtualinvoke $r17.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>($r18);

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

        $r19 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r20 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r21 = newarray (java.lang.String)[2];

        $r21[0] = "**/another_file.bin";

        $r21[1] = "**/dataFile1.txt";

        $r22 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        specialinvoke $r19.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r20, $r22);

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilesFilter(org.apache.flink.api.common.io.FilePathFilter)>($r19);

        r6 = virtualinvoke $r14.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(1);

        $i0 = lengthof r6;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        return;
    }

    public void testGetStatsIgnoredUnderscoreFiles()
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r1, r2, r3, r4, $r15;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r6;
        org.junit.rules.TemporaryFolder $r7, $r8, $r9, $r10, $r14;
        java.io.File[] $r11;
        byte[] $r12;
        org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat $r13;
        java.net.URI $r16;
        java.lang.String $r17, $r21, $r22;
        org.apache.flink.configuration.Configuration $r18;
        long $l1;
        java.lang.Exception $r19;
        java.io.PrintStream $r20;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

     label1:
        $r7 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("dataFile1.txt");

        $r8 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("another_file.bin");

        $r9 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r3 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("_luigi");

        $r10 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r4 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("_SUCCESS");

        $r12 = newarray (byte)[2048];

        $r11 = newarray (java.io.File)[4];

        $r11[0] = r1;

        $r11[1] = r2;

        $r11[2] = r3;

        $r11[3] = r4;

        specialinvoke r0.<org.apache.flink.api.common.io.FileInputFormatTest: void createTempFiles(byte[],java.io.File[])>($r12, $r11);

        $r13 = new org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat;

        specialinvoke $r13.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest,org.apache.flink.api.common.io.FileInputFormatTest$1)>(r0, null);

        $r14 = r0.<org.apache.flink.api.common.io.FileInputFormatTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r15 = virtualinvoke $r14.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r16 = virtualinvoke $r15.<java.io.File: java.net.URI toURI()>();

        $r17 = virtualinvoke $r16.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void setFilePath(java.lang.String)>($r17);

        $r18 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r18.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r13.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

        r6 = virtualinvoke $r13.<org.apache.flink.api.common.io.FileInputFormatTest$DummyFileInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $l1 = interfaceinvoke r6.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4096L, $l1);

     label2:
        goto label4;

     label3:
        $r19 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r21 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r21);

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testDecorateInputStream() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        java.io.File r1;
        org.apache.flink.core.fs.FileInputSplit[] r4;
        int i2, $i3, i5, i7;
        org.apache.flink.core.fs.FileInputSplit r6;
        java.io.FileOutputStream $r7;
        org.apache.flink.configuration.Configuration $r8;
        org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat $r9;
        java.net.URI $r10;
        java.lang.String $r11;
        java.lang.Object $r12;
        byte[] $r13, $r14, $r15, r17;
        byte $b4, b6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("input-stream-decoration-test", "tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        i5 = 0;

     label1:
        if i5 >= 24 goto label2;

        $r15 = newarray (byte)[1];

        $b4 = (byte) i5;

        $r15[0] = $b4;

        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>($r15);

        i5 = i5 + 1;

        goto label1;

     label2:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r9 = new org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat;

        specialinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest$MyDecoratedInputFormat: void <init>(org.apache.flink.api.common.io.FileInputFormatTest$1)>(null);

        $r10 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: void setFilePath(java.lang.String)>($r11);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r8);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: void openInputFormat()>();

        r4 = virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(3);

        r17 = null;

        b6 = 0;

        i2 = lengthof r4;

        i7 = 0;

     label3:
        if i7 >= i2 goto label6;

        r6 = r4[i7];

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r6);

     label4:
        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: boolean reachedEnd()>();

        if $z0 != 0 goto label5;

        $r12 = virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r17);

        $r13 = (byte[]) $r12;

        r17 = $r13;

        if $r13 == null goto label4;

        $r14 = newarray (byte)[1];

        $i3 = b6 - 1;

        b6 = (byte) $i3;

        $r14[0] = b6;

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r14, $r13);

        goto label4;

     label5:
        i7 = i7 + 1;

        goto label3;

     label6:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormat: void closeInputFormat()>();

        return;
    }

    private transient void createTempFiles(byte[], java.io.File[]) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileInputFormatTest r0;
        byte[] r1;
        java.io.File[] r2;
        int i0, i1;
        java.io.File r4;
        java.io.BufferedOutputStream $r7;
        java.io.FileOutputStream $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.api.common.io.FileInputFormatTest;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.File[];

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        r4 = r2[i1];

        virtualinvoke r4.<java.io.File: void deleteOnExit()>();

        $r7 = new java.io.BufferedOutputStream;

        $r8 = new java.io.FileOutputStream;

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>(r4);

        specialinvoke $r7.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r8);

     label2:
        virtualinvoke $r7.<java.io.BufferedOutputStream: void write(byte[])>(r1);

     label3:
        virtualinvoke $r7.<java.io.BufferedOutputStream: void close()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        virtualinvoke $r7.<java.io.BufferedOutputStream: void close()>();

        throw $r9;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
