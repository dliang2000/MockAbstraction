class org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction extends org.apache.flink.api.common.functions.RichFlatJoinFunction
{
    final java.util.concurrent.atomic.AtomicBoolean opened;
    final java.util.concurrent.atomic.AtomicBoolean closed;

    private void <init>()
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        java.util.concurrent.atomic.AtomicBoolean $r1, $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        specialinvoke r0.<org.apache.flink.api.common.functions.RichFlatJoinFunction: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean opened> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean closed> = $r2;

        return;
    }

    public void open(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        org.apache.flink.configuration.Configuration r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        org.apache.flink.api.common.functions.RuntimeContext $r3, $r4;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r2 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean opened>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: org.apache.flink.api.common.functions.RuntimeContext getRuntimeContext()>();

        $i0 = interfaceinvoke $r3.<org.apache.flink.api.common.functions.RuntimeContext: int getIndexOfThisSubtask()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: org.apache.flink.api.common.functions.RuntimeContext getRuntimeContext()>();

        $i2 = interfaceinvoke $r4.<org.apache.flink.api.common.functions.RuntimeContext: int getNumberOfParallelSubtasks()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        return;
    }

    public void close() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        $r1 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean closed>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        return;
    }

    public void join(java.lang.String, java.lang.String, org.apache.flink.util.Collector) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        java.lang.String r1, r2, $r5, $r8, $r10;
        org.apache.flink.util.Collector r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r9;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.apache.flink.util.Collector;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r3.<org.apache.flink.util.Collector: void collect(java.lang.Object)>($r10);

        return;
    }

    public volatile void join(java.lang.Object, java.lang.Object, org.apache.flink.util.Collector) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        java.lang.Object r1, r2;
        org.apache.flink.util.Collector r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.flink.util.Collector;

        $r5 = (java.lang.String) r1;

        $r4 = (java.lang.String) r2;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: void join(java.lang.String,java.lang.String,org.apache.flink.util.Collector)>($r5, $r4, r3);

        return;
    }

    void <init>(org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$1)
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction r0;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$1 r1;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$1;

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: void <init>()>();

        return;
    }
}
