public class org.apache.flink.util.NetUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.NetUtilsTest r0;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testCorrectHostnamePort() throws java.lang.Exception
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.URL $r2, $r3;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>("http", "foo.com", 8080, "/index.html");

        $r3 = staticinvoke <org.apache.flink.util.NetUtils: java.net.URL getCorrectHostnamePort(java.lang.String)>("foo.com:8080/index.html");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void testParseHostPortAddress()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.InetSocketAddress $r2, $r3;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

        $r2 = new java.net.InetSocketAddress;

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>("foo.com", 8080);

        $r3 = staticinvoke <org.apache.flink.util.NetUtils: java.net.InetSocketAddress parseHostPortAddress(java.lang.String)>("foo.com:8080");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void testIPv4toURL()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r4;
        java.lang.Exception $r3;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

     label1:
        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("192.168.0.1");

        $r2 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressToUrlString(java.net.InetAddress)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("192.168.0.1", $r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        $r4 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r4);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testIPv6toURL()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.InetAddress r2;
        java.lang.String $r3, $r5;
        java.lang.Exception $r4;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

     label1:
        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("2001:01db8:00:0:00:ff00:42:8329");

        $r3 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressToUrlString(java.net.InetAddress)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[2001:1db8::ff00:42:8329]", $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r5 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r5);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testIPv4URLEncoding()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.InetAddress r1;
        java.net.InetSocketAddress $r3;
        java.lang.String $r4, $r5, $r6, $r8;
        java.lang.Exception $r7;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

     label1:
        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("10.244.243.12");

        $r3 = new java.net.InetSocketAddress;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, 23453);

        $r4 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressToUrlString(java.net.InetAddress)>(r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("10.244.243.12", $r4);

        $r5 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressAndPortToUrlString(java.net.InetAddress,int)>(r1, 23453);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("10.244.243.12:23453", $r5);

        $r6 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String socketAddressToUrlString(java.net.InetSocketAddress)>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("10.244.243.12:23453", $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r8 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testIPv6URLEncoding()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.net.InetAddress r2;
        java.net.InetSocketAddress $r4;
        java.lang.String $r5, $r6, $r7, $r9;
        java.lang.Exception $r8;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

     label1:
        r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("2001:db8:10:11:12:ff00:42:8329");

        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r2, 23453);

        $r5 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressToUrlString(java.net.InetAddress)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[2001:db8:10:11:12:ff00:42:8329]", $r5);

        $r6 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String ipAddressAndPortToUrlString(java.net.InetAddress,int)>(r2, 23453);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[2001:db8:10:11:12:ff00:42:8329]:23453", $r6);

        $r7 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String socketAddressToUrlString(java.net.InetSocketAddress)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[2001:db8:10:11:12:ff00:42:8329]:23453", $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testFreePortRangeUtility()
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.util.HashSet $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13;
        java.lang.Integer[] $r4, $r10, $r17;
        java.lang.Integer $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r23, $r27, $r29, $r31, $r33, $r35, $r37;
        org.hamcrest.Matcher $r9, $r16, $r24, $r25;
        java.lang.Object $r26, $r28, $r30, $r32, $r34, $r36, $r42;
        java.lang.Throwable $r43, $r44, $r45, $r46, r50, r52, r54, r56;
        java.util.Iterator r47, r48, r49;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

        r47 = staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>("50000-50050, 50100-50200,51234 ");

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

     label01:
        $z0 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r42 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        $z9 = interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r42);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Duplicate element", $z9);

        goto label01;

     label02:
        $i0 = interfaceinvoke $r3.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(153L, $l1);

        $r4 = newarray (java.lang.Integer)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50000);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50001);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50002);

        $r4[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50050);

        $r4[3] = $r8;

        $r9 = staticinvoke <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r9);

        $r10 = newarray (java.lang.Integer)[5];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50100);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50101);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50110);

        $r10[2] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50200);

        $r10[3] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(51234);

        $r10[4] = $r15;

        $r16 = staticinvoke <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r16);

        $r17 = newarray (java.lang.Integer)[6];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50051);

        $r17[0] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50052);

        $r17[1] = $r19;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1337);

        $r17[2] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50201);

        $r17[3] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(49999);

        $r17[4] = $r22;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(50099);

        $r17[5] = $r23;

        $r24 = staticinvoke <org.hamcrest.core.IsCollectionContaining: org.hamcrest.Matcher hasItems(java.lang.Object[])>($r17);

        $r25 = staticinvoke <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r24);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r25);

        r48 = staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>(" 51234");

        $z1 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r26 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        $r27 = (java.lang.Integer) $r26;

        $i2 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(51234L, $l3);

        $z2 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        r49 = staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>("5,1,2,3,4");

        $z3 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r28 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r29 = (java.lang.Integer) $r28;

        $i4 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l5);

        $r30 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (java.lang.Integer) $r30;

        $i6 = virtualinvoke $r31.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r32 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r33 = (java.lang.Integer) $r32;

        $i8 = virtualinvoke $r33.<java.lang.Integer: int intValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l9);

        $r34 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r35 = (java.lang.Integer) $r34;

        $i10 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l11);

        $r36 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>();

        $r37 = (java.lang.Integer) $r36;

        $i12 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l13);

        $z4 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        r50 = null;

     label03:
        staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>("localhost");

     label04:
        goto label06;

     label05:
        $r44 := @caughtexception;

        r50 = $r44;

     label06:
        $z5 = r50 instanceof java.lang.NumberFormatException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        r52 = null;

     label07:
        staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>("5-");

     label08:
        goto label10;

     label09:
        $r46 := @caughtexception;

        r52 = $r46;

     label10:
        $z6 = r52 instanceof java.lang.NumberFormatException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        r54 = null;

     label11:
        staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>("-5");

     label12:
        goto label14;

     label13:
        $r43 := @caughtexception;

        r54 = $r43;

     label14:
        $z7 = r54 instanceof java.lang.NumberFormatException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        r56 = null;

     label15:
        staticinvoke <org.apache.flink.util.NetUtils: java.util.Iterator getPortRangeFromString(java.lang.String)>(",5");

     label16:
        goto label18;

     label17:
        $r45 := @caughtexception;

        r56 = $r45;

     label18:
        $z8 = r56 instanceof java.lang.NumberFormatException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void testFormatAddress() throws java.net.UnknownHostException
    {
        org.apache.flink.util.NetUtilsTest r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r20, $r23, $r25, $r26, $r27, $r33, $r35, $r36, $r37;
        java.lang.String $r5, $r6, $r10, $r11, $r15, $r16, $r21, $r22, $r24, $r28, $r29, $r34, $r38, $r39, r47, r54;
        java.lang.Exception $r40, $r41, $r42;

        r0 := @this: org.apache.flink.util.NetUtilsTest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.2.3.4");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(42);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("1.2.3.4", 42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[2001:db8:85a3::8a2e:370:7334]:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(42);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("2001:0db8:85a3:0000:0000:8a2e:0370:7334", 42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[2001:db8:85a3::8a2e:370:7334]:");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(42);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("[2001:0db8:85a3:0000:0000:8a2e:0370:7334]", 42);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("somerandomhostname");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(99);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("somerandomhostname", 99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        r47 = "  somerandomhostname  ";

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke r47.<java.lang.String: java.lang.String trim()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(99);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("  somerandomhostname  ", 99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r28, $r29);

     label01:
        staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("illegalhost.", 42);

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

     label04:
        staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("illegalhost:fasf", 42);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r42 := @caughtexception;

     label07:
        staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("1.2.3.4", -1);

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        goto label10;

     label09:
        $r40 := @caughtexception;

     label10:
        r54 = "CamelCaseHostName";

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r54.<java.lang.String: java.lang.String toLowerCase()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(99);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = staticinvoke <org.apache.flink.util.NetUtils: java.lang.String unresolvedHostAndPortToNormalizedString(java.lang.String,int)>("CamelCaseHostName", 99);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r39);

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
    }
}
