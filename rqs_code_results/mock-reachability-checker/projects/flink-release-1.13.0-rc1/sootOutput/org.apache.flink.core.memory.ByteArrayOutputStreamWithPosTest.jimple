public class org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest extends java.lang.Object
{
    private static final int BUFFER_SIZE;
    public org.junit.rules.ExpectedException thrown;
    private org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream;

    public void <init>()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        org.junit.rules.ExpectedException $r1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.junit.rules.ExpectedException thrown> = $r1;

        return;
    }

    public void setup()
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r1;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        $r1 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r1.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>(int)>(32);

        r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream> = $r1;

        return;
    }

    public void testSetPositionWhenBufferIsFull() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        byte[] $r1, $r4;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r2, $r3, $r5, $r6, $r7;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r1 = newarray (byte)[32];

        virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void write(byte[])>($r1);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r4 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l1);

        $r5 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $i2 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l3);

        $r6 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void setPosition(int)>(32);

        $r7 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $i4 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l5);

        return;
    }

    public void testSetNegativePosition() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        byte[] $r1;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r2, $r5;
        org.junit.rules.ExpectedException $r3, $r4;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r1 = newarray (byte)[32];

        virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void write(byte[])>($r1);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r3.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r4 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r4.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>("Position out of bounds");

        $r5 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void setPosition(int)>(-1);

        return;
    }

    public void testSetPositionLargerThanBufferSize() throws java.lang.Exception
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        byte[] $r1, $r4, $r7;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r2, $r3, $r5, $r6, $r8;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        $r2 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r1 = newarray (byte)[32];

        virtualinvoke $r2.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void write(byte[])>($r1);

        $r3 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r4 = virtualinvoke $r3.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i0 = lengthof $r4;

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(32L, $l1);

        $r5 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void setPosition(int)>(33);

        $r6 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $r7 = virtualinvoke $r6.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i2 = lengthof $r7;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(64L, $l3);

        $r8 = r0.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: org.apache.flink.core.memory.ByteArrayOutputStreamWithPos stream>;

        $i4 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(33L, $l5);

        return;
    }

    public void testToString() throws java.io.IOException
    {
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest r0;
        byte[] r1, $r8, $r9, $r12, $r13, $r16;
        java.nio.charset.Charset $r3, $r7, $r11, $r15;
        java.lang.String $r4, $r6, $r10, $r14;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;

        r0 := @this: org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest;

        $r4 = "1234567890";

        $r3 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r1 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $r5 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        $i0 = lengthof r1;

        specialinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>(int)>($i0);

        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void write(byte[])>(r1);

        $r6 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: java.lang.String toString()>();

        $r7 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r8 = virtualinvoke $r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, $r8);

        i6 = 0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label2;

        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void setPosition(int)>(i6);

        $r13 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, i6);

        $r14 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: java.lang.String toString()>();

        $r15 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r16 = virtualinvoke $r14.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r13, $r16);

        i6 = i6 + 1;

        goto label1;

     label2:
        $i2 = lengthof r1;

        $i3 = $i2 + 1;

        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void setPosition(int)>($i3);

        $i4 = lengthof r1;

        $i5 = $i4 + 1;

        $r9 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i5);

        $r10 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: java.lang.String toString()>();

        $r11 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r9, $r12);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.core.memory.ByteArrayOutputStreamWithPosTest: int BUFFER_SIZE> = 32;

        return;
    }
}
