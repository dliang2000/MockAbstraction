public class org.apache.flink.api.common.typeutils.base.CharComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.CharComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CharComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.CharComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.CharComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CharComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.CharComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.CharComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.CharComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.CharSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CharComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.CharSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.CharSerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Character[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.CharComparatorTest r0;
        java.util.Random $r2;
        java.lang.Character[] $r3;
        java.lang.Character $r4, $r5, $r6, $r7;
        char $c0, $c2;
        int $i1, i3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CharComparatorTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412338L);

        i3 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(65535);

        if i3 >= 0 goto label1;

        i3 = neg i3;

     label1:
        if i3 != 0 goto label2;

        i3 = i3 + 2;

     label2:
        if i3 != 65535 goto label3;

        i3 = i3 + -2;

     label3:
        $r3 = newarray (java.lang.Character)[4];

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        $r3[0] = $r4;

        $c0 = (char) i3;

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r3[1] = $r5;

        $i1 = i3 + 1;

        $c2 = (char) $i1;

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65535);

        $r3[3] = $r7;

        return $r3;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.CharComparatorTest r0;
        java.lang.Character[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CharComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.CharComparatorTest: java.lang.Character[] getSortedTestData()>();

        return $r1;
    }
}
