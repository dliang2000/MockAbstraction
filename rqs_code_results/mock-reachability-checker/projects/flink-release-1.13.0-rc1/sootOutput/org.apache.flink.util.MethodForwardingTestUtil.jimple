public class org.apache.flink.util.MethodForwardingTestUtil extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.MethodForwardingTestUtil r0;

        r0 := @this: org.apache.flink.util.MethodForwardingTestUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void testMethodForwarding(java.lang.Class, java.util.function.Function) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Class r0;
        java.util.function.Function r1;
        java.util.function.Supplier $r2;
        java.util.Set $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.function.Function;

        $r2 = staticinvoke <org.apache.flink.util.MethodForwardingTestUtil$lambda_testMethodForwarding_0__194: java.util.function.Supplier bootstrap$(java.lang.Class)>(r0);

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        staticinvoke <org.apache.flink.util.MethodForwardingTestUtil: void testMethodForwarding(java.lang.Class,java.util.function.Function,java.util.function.Supplier,java.util.Set)>(r0, r1, $r2, $r3);

        return;
    }

    public static void testMethodForwarding(java.lang.Class, java.util.function.Function, java.util.function.Supplier) throws java.lang.NoSuchMethodException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Class r0;
        java.util.function.Function r1;
        java.util.function.Supplier r2;
        java.util.Set $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.function.Function;

        r2 := @parameter2: java.util.function.Supplier;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        staticinvoke <org.apache.flink.util.MethodForwardingTestUtil: void testMethodForwarding(java.lang.Class,java.util.function.Function,java.util.function.Supplier,java.util.Set)>(r0, r1, r2, $r3);

        return;
    }

    public static void testMethodForwarding(java.lang.Class, java.util.function.Function, java.util.function.Supplier, java.util.Set) throws java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.IllegalAccessException
    {
        java.lang.Class r0, $r10, $r19, $r20, $r24, $r26, $r30, r36;
        java.util.function.Function r1;
        java.util.function.Supplier r2;
        java.util.Set r3;
        java.lang.Object r4, $r15, $r18, $r25, r29;
        java.lang.reflect.Method[] r5, r32;
        int i0, $i1, $i2, i3, i4, i5, $i6, i7, $i8;
        java.lang.reflect.Method r6, r31, r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String $r11, $r27, $r28;
        java.lang.Class[] $r12, r34;
        org.mockito.verification.VerificationMode $r14;
        java.lang.Object[] $r17, r35;
        java.lang.Byte $r21;
        java.lang.Character $r22;
        java.lang.Boolean $r23;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.function.Function;

        r2 := @parameter2: java.util.function.Supplier;

        r3 := @parameter3: java.util.Set;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        r29 = interfaceinvoke r2.<java.util.function.Supplier: java.lang.Object get()>();

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>(r29);

        if $z0 == 0 goto label01;

        $z9 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r29);

        if $z9 != 0 goto label02;

     label01:
        r29 = staticinvoke <org.mockito.Mockito: java.lang.Object spy(java.lang.Object)>(r29);

     label02:
        r4 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r29);

        $r30 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $z10 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r30);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z10);

        r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r5;

        i3 = 0;

     label03:
        if i3 >= i0 goto label16;

        r6 = r5[i3];

        $z1 = staticinvoke <org.apache.flink.util.MethodForwardingTestUtil: boolean checkSkipMethodForwardCheck(java.lang.reflect.Method,java.util.Set)>(r6, r3);

        if $z1 == 0 goto label04;

        goto label15;

     label04:
        $r10 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r12 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r31 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r11, $r12);

        $z2 = virtualinvoke r31.<java.lang.reflect.Method: boolean isBridge()>();

        if $z2 == 0 goto label07;

        $r26 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        r32 = virtualinvoke $r26.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i4 = lengthof r32;

        i5 = 0;

     label05:
        if i5 >= i4 goto label07;

        r33 = r32[i5];

        $z7 = virtualinvoke r33.<java.lang.reflect.Method: boolean isBridge()>();

        if $z7 != 0 goto label06;

        $r27 = virtualinvoke r33.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke r31.<java.lang.reflect.Method: java.lang.String getName()>();

        $z8 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        if $z8 == 0 goto label06;

        $i1 = virtualinvoke r33.<java.lang.reflect.Method: int getParameterCount()>();

        $i2 = virtualinvoke r31.<java.lang.reflect.Method: int getParameterCount()>();

        if $i1 != $i2 goto label06;

        r31 = r33;

        goto label07;

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        r34 = virtualinvoke r31.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i6 = lengthof r34;

        r35 = newarray (java.lang.Object)[$i6];

        i7 = 0;

     label08:
        $i8 = lengthof r35;

        if i7 >= $i8 goto label14;

        r36 = r34[i7];

        $z3 = virtualinvoke r36.<java.lang.Class: boolean isArray()>();

        if $z3 == 0 goto label09;

        $r24 = virtualinvoke r36.<java.lang.Class: java.lang.Class getComponentType()>();

        $r25 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r24, 0);

        r35[i7] = $r25;

        goto label13;

     label09:
        $z4 = virtualinvoke r36.<java.lang.Class: boolean isPrimitive()>();

        if $z4 == 0 goto label12;

        $r19 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z5 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>(r36);

        if $z5 == 0 goto label10;

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r35[i7] = $r23;

        goto label13;

     label10:
        $r20 = <java.lang.Character: java.lang.Class TYPE>;

        $z6 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>(r36);

        if $z6 == 0 goto label11;

        $r22 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97);

        r35[i7] = $r22;

        goto label13;

     label11:
        $r21 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        r35[i7] = $r21;

        goto label13;

     label12:
        $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(r36);

        r35[i7] = $r18;

     label13:
        i7 = i7 + 1;

        goto label08;

     label14:
        virtualinvoke r31.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, r35);

        $r14 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r15 = staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r29, $r14);

        virtualinvoke r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r15, r35);

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r29;

        staticinvoke <org.mockito.Mockito: void reset(java.lang.Object[])>($r17);

     label15:
        i3 = i3 + 1;

        goto label03;

     label16:
        return;
    }

    private static boolean checkSkipMethodForwardCheck(java.lang.reflect.Method, java.util.Set)
    {
        java.lang.reflect.Method r0;
        java.util.Set r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.Class[] $r5;
        java.lang.Exception $r7;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.util.Set;

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isBridge()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isDefault()>();

        if $z1 != 0 goto label1;

        $z2 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r3 = class "Ljava/lang/Object;";

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r5 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r5);

     label3:
        return 1;

     label4:
        $r7 := @caughtexception;

        return 0;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static java.lang.Object lambda$testMethodForwarding$0(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.mockito.Mockito: java.lang.Object spy(java.lang.Class)>(r0);

        return $r1;
    }
}
