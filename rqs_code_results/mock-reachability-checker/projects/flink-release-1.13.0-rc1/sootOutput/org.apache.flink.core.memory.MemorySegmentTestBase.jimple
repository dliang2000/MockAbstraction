public abstract class org.apache.flink.core.memory.MemorySegmentTestBase extends java.lang.Object
{
    private final java.util.Random random;
    private final int pageSize;

    void <init>(int)
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        int i0;
        java.util.Random $r1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random> = $r1;

        r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize> = i0;

        return;
    }

    abstract org.apache.flink.core.memory.MemorySegment createSegment(int);

    abstract org.apache.flink.core.memory.MemorySegment createSegment(int, java.lang.Object);

    public void testByteAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i3, $i7, $i8, $i9, $i10, $i11, $i16, $i17, $i19, $i24, i27, $i28, i29, i30, i31, i32, i33;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b12, $b14, $b18, $b20, $b22, $b25;
        long $l13, $l15, $l21, $l23, l26;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        boolean[] r29, r30;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(-1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $z4 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $z5 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(2147483647, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r20 := @caughtexception;

        $z9 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(-2147483648, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        $z3 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r19 := @caughtexception;

        $z8 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label16:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r17 := @caughtexception;

        $z6 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r18 := @caughtexception;

        $z7 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label22:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r13 := @caughtexception;

        $z2 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label25:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l26 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l26);

        i27 = 0;

     label26:
        $i28 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i27 >= $i28 goto label27;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i24 = virtualinvoke $r12.<java.util.Random: int nextInt()>();

        $b25 = (byte) $i24;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i27, $b25);

        i27 = i27 + 1;

        goto label26;

     label27:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l26);

        i29 = 0;

     label28:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i29 >= $i7 goto label29;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i19 = virtualinvoke $r11.<java.util.Random: int nextInt()>();

        $b20 = (byte) $i19;

        $l21 = (long) $b20;

        $b22 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i29);

        $l23 = (long) $b22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, $l23);

        i29 = i29 + 1;

        goto label28;

     label29:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l26);

        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r29 = newarray (boolean)[$i8];

        i30 = 0;

     label30:
        if i30 >= 1000 goto label33;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i31 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i16);

        $z1 = r29[i31];

        if $z1 == 0 goto label31;

        goto label32;

     label31:
        r29[i31] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i17 = virtualinvoke $r10.<java.util.Random: int nextInt()>();

        $b18 = (byte) $i17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i31, $b18);

     label32:
        i30 = i30 + 1;

        goto label30;

     label33:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l26);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r30 = newarray (boolean)[$i9];

        i32 = 0;

     label34:
        if i32 >= 1000 goto label37;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i33 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i10);

        $z0 = r30[i33];

        if $z0 == 0 goto label35;

        goto label36;

     label35:
        r30[i33] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i11 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $b12 = (byte) $i11;

        $l13 = (long) $b12;

        $b14 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i33);

        $l15 = (long) $b14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, $l15);

     label36:
        i32 = i32 + 1;

        goto label34;

     label37:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
    }

    public void testBooleanAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, $i10, i11, i12, i13, i14, i15;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r16;
        boolean $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.Boolean $r9, $r10, $r14, $r15;
        java.lang.Exception $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long l8;
        boolean[] r33, r34;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(-1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

        $z14 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>($i1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r24 := @caughtexception;

        $z19 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(2147483647, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        $z16 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(-2147483648, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        $z13 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        $z18 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label16:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>($i2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r17 := @caughtexception;

        $z12 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r22 := @caughtexception;

        $z17 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label22:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r20 := @caughtexception;

        $z15 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label25:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l8 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l8);

        i9 = 0;

     label26:
        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i9 >= $i10 goto label27;

        $r16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $z11 = virtualinvoke $r16.<java.util.Random: boolean nextBoolean()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(i9, $z11);

        i9 = i9 + 1;

        goto label26;

     label27:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l8);

        i11 = 0;

     label28:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i11 >= $i3 goto label29;

        $r13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $z9 = virtualinvoke $r13.<java.util.Random: boolean nextBoolean()>();

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        $z10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(i11);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        i11 = i11 + 1;

        goto label28;

     label29:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l8);

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r33 = newarray (boolean)[$i4];

        i12 = 0;

     label30:
        if i12 >= 1000 goto label33;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i13 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>($i7);

        $z7 = r33[i13];

        if $z7 == 0 goto label31;

        goto label32;

     label31:
        r33[i13] = 1;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $z8 = virtualinvoke $r12.<java.util.Random: boolean nextBoolean()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(i13, $z8);

     label32:
        i12 = i12 + 1;

        goto label30;

     label33:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l8);

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r34 = newarray (boolean)[$i5];

        i14 = 0;

     label34:
        if i14 >= 1000 goto label37;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i15 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i6);

        $z4 = r34[i15];

        if $z4 == 0 goto label35;

        goto label36;

     label35:
        r34[i15] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $z5 = virtualinvoke $r8.<java.util.Random: boolean nextBoolean()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        $z6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(i15);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

     label36:
        i14 = i14 + 1;

        goto label34;

     label37:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
    }

    public void testCopyUnsafeIndexOutOfBounds()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        byte[] r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r3, $r4;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = newarray (byte)[$i0];

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i1);

     label1:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyToUnsafe(int,java.lang.Object,int,int)>(1, r1, 0, $i2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void copyFromUnsafe(int,java.lang.Object,int,int)>(1, r1, 0, $i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label4 to label5 with label6;
    }

    public void testEqualTo()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        byte[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Random $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i1);

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i2);

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r3 = newarray (byte)[$i3];

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r3);

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r3);

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i5 = $i4 - 8;

        i0 = virtualinvoke $r4.<java.util.Random: int nextInt(int)>($i5);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, 10);

        $z0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean equalTo(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i0, i0, 9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, 0);

        $z1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean equalTo(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i0, i0, 9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i6 = i0 + 8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i6, 10);

        $z2 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean equalTo(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i0, i0, 9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testCharAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i3, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i21, $i22, $i23, $i24, $i25, $i27, $i32, i35, $i36, $i37, i38, i39, i40, i41, i42;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        char $c17, $c19, $c26, $c28, $c30, $c33;
        long $l18, $l20, $l29, $l31, l34;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean[] r33, r34;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(-1, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r20 := @caughtexception;

        $z11 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>($i1, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        $z8 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(-2147483648, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

        $z13 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(2147483647, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        $z6 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(2147483646, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r16 := @caughtexception;

        $z7 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r19 := @caughtexception;

        $z10 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label19:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>($i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r13 := @caughtexception;

        $z4 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label22:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r14 := @caughtexception;

        $z5 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r21 := @caughtexception;

        $z12 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(2147483646);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r18 := @caughtexception;

        $z9 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label31:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l34 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l34);

        i35 = 0;

     label32:
        $i36 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i37 = $i36 - 2;

        if i35 > $i37 goto label33;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i32 = virtualinvoke $r12.<java.util.Random: int nextInt(int)>(65535);

        $c33 = (char) $i32;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i35, $c33);

        i35 = i35 + 2;

        goto label32;

     label33:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l34);

        i38 = 0;

     label34:
        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i9 = $i8 - 2;

        if i38 > $i9 goto label35;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i27 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>(65535);

        $c28 = (char) $i27;

        $l29 = (long) $c28;

        $c30 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i38);

        $l31 = (long) $c30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l29, $l31);

        i38 = i38 + 2;

        goto label34;

     label35:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l34);

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r33 = newarray (boolean)[$i10];

        i39 = 0;

     label36:
        if i39 >= 1000 goto label39;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i21 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i22 = $i21 - 1;

        i40 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i22);

        $z2 = r33[i40];

        if $z2 != 0 goto label38;

        $i23 = i40 + 1;

        $z3 = r33[$i23];

        if $z3 == 0 goto label37;

        goto label38;

     label37:
        r33[i40] = 1;

        $i24 = i40 + 1;

        r33[$i24] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i25 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(65535);

        $c26 = (char) $i25;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(i40, $c26);

     label38:
        i39 = i39 + 1;

        goto label36;

     label39:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l34);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r34 = newarray (boolean)[$i11];

        i41 = 0;

     label40:
        if i41 >= 1000 goto label43;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i13 = $i12 - 1;

        i42 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i13);

        $z0 = r34[i42];

        if $z0 != 0 goto label42;

        $i14 = i42 + 1;

        $z1 = r34[$i14];

        if $z1 == 0 goto label41;

        goto label42;

     label41:
        r34[i42] = 1;

        $i15 = i42 + 1;

        r34[$i15] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i16 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>(65535);

        $c17 = (char) $i16;

        $l18 = (long) $c17;

        $c19 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(i42);

        $l20 = (long) $c19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, $l20);

     label42:
        i41 = i41 + 1;

        goto label40;

     label43:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
    }

    public void testShortAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i3, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i21, $i22, $i23, $i24, $i25, $i27, $i32, i35, $i36, $i37, i38, i39, i40, i41, i42;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        short $s17, $s19, $s26, $s28, $s30, $s33;
        long $l18, $l20, $l29, $l31, l34;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean[] r33, r34;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(-1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $z8 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>($i1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        $z9 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(-2147483648, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        $z5 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(2147483647, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r20 := @caughtexception;

        $z11 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(2147483646, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;

        $z13 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

        $z7 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label19:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>($i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r21 := @caughtexception;

        $z12 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label22:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r15 := @caughtexception;

        $z6 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r13 := @caughtexception;

        $z4 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(2147483646);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r19 := @caughtexception;

        $z10 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label31:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l34 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l34);

        i35 = 0;

     label32:
        $i36 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i37 = $i36 - 2;

        if i35 > $i37 goto label33;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i32 = virtualinvoke $r12.<java.util.Random: int nextInt()>();

        $s33 = (short) $i32;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i35, $s33);

        i35 = i35 + 2;

        goto label32;

     label33:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l34);

        i38 = 0;

     label34:
        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i9 = $i8 - 2;

        if i38 > $i9 goto label35;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i27 = virtualinvoke $r11.<java.util.Random: int nextInt()>();

        $s28 = (short) $i27;

        $l29 = (long) $s28;

        $s30 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i38);

        $l31 = (long) $s30;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l29, $l31);

        i38 = i38 + 2;

        goto label34;

     label35:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l34);

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r33 = newarray (boolean)[$i10];

        i39 = 0;

     label36:
        if i39 >= 1000 goto label39;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i21 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i22 = $i21 - 1;

        i40 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i22);

        $z2 = r33[i40];

        if $z2 != 0 goto label38;

        $i23 = i40 + 1;

        $z3 = r33[$i23];

        if $z3 == 0 goto label37;

        goto label38;

     label37:
        r33[i40] = 1;

        $i24 = i40 + 1;

        r33[$i24] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i25 = virtualinvoke $r10.<java.util.Random: int nextInt()>();

        $s26 = (short) $i25;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(i40, $s26);

     label38:
        i39 = i39 + 1;

        goto label36;

     label39:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l34);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r34 = newarray (boolean)[$i11];

        i41 = 0;

     label40:
        if i41 >= 1000 goto label43;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i13 = $i12 - 1;

        i42 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i13);

        $z0 = r34[i42];

        if $z0 != 0 goto label42;

        $i14 = i42 + 1;

        $z1 = r34[$i14];

        if $z1 == 0 goto label41;

        goto label42;

     label41:
        r34[i42] = 1;

        $i15 = i42 + 1;

        r34[$i15] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i16 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $s17 = (short) $i16;

        $l18 = (long) $s17;

        $s19 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(i42);

        $l20 = (long) $s19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, $l20);

     label42:
        i41 = i41 + 1;

        goto label40;

     label43:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
    }

    public void testIntAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i40, $i42, i44, $i45, $i46, i47, i48, i49, i50, i51;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        long $l26, $l28, $l39, $l41, l43;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean[] r37, r38;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(-1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $z12 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>($i1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        $z15 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label07:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 - 3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>($i3, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $z11 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(-2147483648, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        $z10 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(2147483647, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r14 := @caughtexception;

        $z9 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(2147483644, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r13 := @caughtexception;

        $z8 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r22 := @caughtexception;

        $z17 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label22:
        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>($i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r19 := @caughtexception;

        $z14 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label25:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 - 3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>($i8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r21 := @caughtexception;

        $z16 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r23 := @caughtexception;

        $z18 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label31:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r18 := @caughtexception;

        $z13 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(2147483644);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r24 := @caughtexception;

        $z19 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label37:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l43 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l43);

        i44 = 0;

     label38:
        $i45 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i46 = $i45 - 4;

        if i44 > $i46 goto label39;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i42 = virtualinvoke $r12.<java.util.Random: int nextInt()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i44, $i42);

        i44 = i44 + 4;

        goto label38;

     label39:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l43);

        i47 = 0;

     label40:
        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i14 = $i13 - 4;

        if i47 > $i14 goto label41;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i38 = virtualinvoke $r11.<java.util.Random: int nextInt()>();

        $l39 = (long) $i38;

        $i40 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i47);

        $l41 = (long) $i40;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l39, $l41);

        i47 = i47 + 4;

        goto label40;

     label41:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l43);

        $i15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r37 = newarray (boolean)[$i15];

        i48 = 0;

     label42:
        if i48 >= 1000 goto label45;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i29 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i30 = $i29 - 3;

        i49 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i30);

        $z4 = r37[i49];

        if $z4 != 0 goto label44;

        $i31 = i49 + 1;

        $z5 = r37[$i31];

        if $z5 != 0 goto label44;

        $i32 = i49 + 2;

        $z6 = r37[$i32];

        if $z6 != 0 goto label44;

        $i33 = i49 + 3;

        $z7 = r37[$i33];

        if $z7 == 0 goto label43;

        goto label44;

     label43:
        r37[i49] = 1;

        $i34 = i49 + 1;

        r37[$i34] = 1;

        $i35 = i49 + 2;

        r37[$i35] = 1;

        $i36 = i49 + 3;

        r37[$i36] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i37 = virtualinvoke $r10.<java.util.Random: int nextInt()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(i49, $i37);

     label44:
        i48 = i48 + 1;

        goto label42;

     label45:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l43);

        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r38 = newarray (boolean)[$i16];

        i50 = 0;

     label46:
        if i50 >= 1000 goto label49;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i17 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i18 = $i17 - 3;

        i51 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i18);

        $z0 = r38[i51];

        if $z0 != 0 goto label48;

        $i19 = i51 + 1;

        $z1 = r38[$i19];

        if $z1 != 0 goto label48;

        $i20 = i51 + 2;

        $z2 = r38[$i20];

        if $z2 != 0 goto label48;

        $i21 = i51 + 3;

        $z3 = r38[$i21];

        if $z3 == 0 goto label47;

        goto label48;

     label47:
        r38[i51] = 1;

        $i22 = i51 + 1;

        r38[$i22] = 1;

        $i23 = i51 + 2;

        r38[$i23] = 1;

        $i24 = i51 + 3;

        r38[$i24] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i25 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $l26 = (long) $i25;

        $i27 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(i51);

        $l28 = (long) $i27;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l26, $l28);

     label48:
        i50 = i50 + 1;

        goto label46;

     label49:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public void testLongAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, i56, $i57, $i58, i59, i60, i61, i62, i63;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        long $l33, $l34, $l51, $l52, $l53, $l54, l55;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean[] r37, r38;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(-1, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $z20 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>($i1, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r19 := @caughtexception;

        $z22 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

     label07:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 - 7;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>($i3, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        $z24 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(-2147483648, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        $z17 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(2147483647, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r16 := @caughtexception;

        $z19 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(2147483640, 0L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r24 := @caughtexception;

        $z27 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r23 := @caughtexception;

        $z26 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z26);

     label22:
        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r15 := @caughtexception;

        $z18 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label25:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 - 7;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r22 := @caughtexception;

        $z25 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r18 := @caughtexception;

        $z21 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

     label31:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r20 := @caughtexception;

        $z23 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z23);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(2147483640);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r13 := @caughtexception;

        $z16 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label37:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l55 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l55);

        i56 = 0;

     label38:
        $i57 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i58 = $i57 - 8;

        if i56 > $i58 goto label39;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $l54 = virtualinvoke $r12.<java.util.Random: long nextLong()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i56, $l54);

        i56 = i56 + 8;

        goto label38;

     label39:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l55);

        i59 = 0;

     label40:
        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i14 = $i13 - 8;

        if i59 > $i14 goto label41;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $l52 = virtualinvoke $r11.<java.util.Random: long nextLong()>();

        $l53 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i59);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l52, $l53);

        i59 = i59 + 8;

        goto label40;

     label41:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l55);

        $i15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r37 = newarray (boolean)[$i15];

        i60 = 0;

     label42:
        if i60 >= 1000 goto label45;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i35 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i36 = $i35 - 7;

        i61 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i36);

        $z8 = r37[i61];

        if $z8 != 0 goto label44;

        $i37 = i61 + 1;

        $z9 = r37[$i37];

        if $z9 != 0 goto label44;

        $i38 = i61 + 2;

        $z10 = r37[$i38];

        if $z10 != 0 goto label44;

        $i39 = i61 + 3;

        $z11 = r37[$i39];

        if $z11 != 0 goto label44;

        $i40 = i61 + 4;

        $z12 = r37[$i40];

        if $z12 != 0 goto label44;

        $i41 = i61 + 5;

        $z13 = r37[$i41];

        if $z13 != 0 goto label44;

        $i42 = i61 + 6;

        $z14 = r37[$i42];

        if $z14 != 0 goto label44;

        $i43 = i61 + 7;

        $z15 = r37[$i43];

        if $z15 == 0 goto label43;

        goto label44;

     label43:
        r37[i61] = 1;

        $i44 = i61 + 1;

        r37[$i44] = 1;

        $i45 = i61 + 2;

        r37[$i45] = 1;

        $i46 = i61 + 3;

        r37[$i46] = 1;

        $i47 = i61 + 4;

        r37[$i47] = 1;

        $i48 = i61 + 5;

        r37[$i48] = 1;

        $i49 = i61 + 6;

        r37[$i49] = 1;

        $i50 = i61 + 7;

        r37[$i50] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $l51 = virtualinvoke $r10.<java.util.Random: long nextLong()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(i61, $l51);

     label44:
        i60 = i60 + 1;

        goto label42;

     label45:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l55);

        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r38 = newarray (boolean)[$i16];

        i62 = 0;

     label46:
        if i62 >= 1000 goto label49;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i17 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i18 = $i17 - 7;

        i63 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i18);

        $z0 = r38[i63];

        if $z0 != 0 goto label48;

        $i19 = i63 + 1;

        $z1 = r38[$i19];

        if $z1 != 0 goto label48;

        $i20 = i63 + 2;

        $z2 = r38[$i20];

        if $z2 != 0 goto label48;

        $i21 = i63 + 3;

        $z3 = r38[$i21];

        if $z3 != 0 goto label48;

        $i22 = i63 + 4;

        $z4 = r38[$i22];

        if $z4 != 0 goto label48;

        $i23 = i63 + 5;

        $z5 = r38[$i23];

        if $z5 != 0 goto label48;

        $i24 = i63 + 6;

        $z6 = r38[$i24];

        if $z6 != 0 goto label48;

        $i25 = i63 + 7;

        $z7 = r38[$i25];

        if $z7 == 0 goto label47;

        goto label48;

     label47:
        r38[i63] = 1;

        $i26 = i63 + 1;

        r38[$i26] = 1;

        $i27 = i63 + 2;

        r38[$i27] = 1;

        $i28 = i63 + 3;

        r38[$i28] = 1;

        $i29 = i63 + 4;

        r38[$i29] = 1;

        $i30 = i63 + 5;

        r38[$i30] = 1;

        $i31 = i63 + 6;

        r38[$i31] = 1;

        $i32 = i63 + 7;

        r38[$i32] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $l33 = virtualinvoke $r8.<java.util.Random: long nextLong()>();

        $l34 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(i63);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l33, $l34);

     label48:
        i62 = i62 + 1;

        goto label46;

     label49:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public void testFloatAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i28, $i29, $i30, i31, i32, i33, i34, i35;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        float $f6, $f7, $f8, $f9, $f10, $f11;
        double $d0, $d1, $d2, $d3;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long l27;
        boolean[] r37, r38;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(-1, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

        $z19 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>($i1, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        $z11 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label07:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 - 3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>($i3, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

        $z18 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(-2147483648, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r21 := @caughtexception;

        $z16 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(2147483647, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r15 := @caughtexception;

        $z10 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(2147483644, 0.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r14 := @caughtexception;

        $z9 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r13 := @caughtexception;

        $z8 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label22:
        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>($i4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r20 := @caughtexception;

        $z15 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label25:
        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i6 = $i5 - 3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>($i6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r22 := @caughtexception;

        $z17 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r19 := @caughtexception;

        $z14 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label31:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r18 := @caughtexception;

        $z13 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(2147483644);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r17 := @caughtexception;

        $z12 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label37:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l27 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l27);

        i28 = 0;

     label38:
        $i29 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i30 = $i29 - 4;

        if i28 > $i30 goto label39;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $f11 = virtualinvoke $r12.<java.util.Random: float nextFloat()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(i28, $f11);

        i28 = i28 + 4;

        goto label38;

     label39:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l27);

        i31 = 0;

     label40:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 - 4;

        if i31 > $i8 goto label41;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $f9 = virtualinvoke $r11.<java.util.Random: float nextFloat()>();

        $d2 = (double) $f9;

        $f10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(i31);

        $d3 = (double) $f10;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d2, $d3, 0.0);

        i31 = i31 + 4;

        goto label40;

     label41:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l27);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r37 = newarray (boolean)[$i9];

        i32 = 0;

     label42:
        if i32 >= 1000 goto label45;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i19 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i20 = $i19 - 3;

        i33 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i20);

        $z4 = r37[i33];

        if $z4 != 0 goto label44;

        $i21 = i33 + 1;

        $z5 = r37[$i21];

        if $z5 != 0 goto label44;

        $i22 = i33 + 2;

        $z6 = r37[$i22];

        if $z6 != 0 goto label44;

        $i23 = i33 + 3;

        $z7 = r37[$i23];

        if $z7 == 0 goto label43;

        goto label44;

     label43:
        r37[i33] = 1;

        $i24 = i33 + 1;

        r37[$i24] = 1;

        $i25 = i33 + 2;

        r37[$i25] = 1;

        $i26 = i33 + 3;

        r37[$i26] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $f8 = virtualinvoke $r10.<java.util.Random: float nextFloat()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(i33, $f8);

     label44:
        i32 = i32 + 1;

        goto label42;

     label45:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l27);

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r38 = newarray (boolean)[$i10];

        i34 = 0;

     label46:
        if i34 >= 1000 goto label49;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = $i11 - 3;

        i35 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i12);

        $z0 = r38[i35];

        if $z0 != 0 goto label48;

        $i13 = i35 + 1;

        $z1 = r38[$i13];

        if $z1 != 0 goto label48;

        $i14 = i35 + 2;

        $z2 = r38[$i14];

        if $z2 != 0 goto label48;

        $i15 = i35 + 3;

        $z3 = r38[$i15];

        if $z3 == 0 goto label47;

        goto label48;

     label47:
        r38[i35] = 1;

        $i16 = i35 + 1;

        r38[$i16] = 1;

        $i17 = i35 + 2;

        r38[$i17] = 1;

        $i18 = i35 + 3;

        r38[$i18] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $f6 = virtualinvoke $r8.<java.util.Random: float nextFloat()>();

        $d0 = (double) $f6;

        $f7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(i35);

        $d1 = (double) $f7;

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d0, $d1, 0.0);

     label48:
        i34 = i34 + 1;

        goto label46;

     label49:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public void testDoubleAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i44, $i45, $i46, i47, i48, i49, i50, i51;
        java.util.Random $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        double $d6, $d7, $d8, $d9, $d10, $d11;
        java.lang.Exception $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long l43;
        boolean[] r37, r38;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(-1, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r18 := @caughtexception;

        $z21 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

     label04:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>($i1, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        $z26 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z26);

     label07:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 - 7;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>($i3, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $z19 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(-2147483648, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        $z17 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(2147483647, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r15 := @caughtexception;

        $z18 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label16:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(2147483640, 0.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r17 := @caughtexception;

        $z20 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r22 := @caughtexception;

        $z25 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

     label22:
        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>($i4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r19 := @caughtexception;

        $z22 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

     label25:
        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i6 = $i5 - 7;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>($i6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r13 := @caughtexception;

        $z16 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r24 := @caughtexception;

        $z27 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

     label31:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r20 := @caughtexception;

        $z23 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z23);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(2147483640);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r21 := @caughtexception;

        $z24 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

     label37:
        $r2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l43 = virtualinvoke $r2.<java.util.Random: long nextLong()>();

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l43);

        i44 = 0;

     label38:
        $i45 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i46 = $i45 - 8;

        if i44 > $i46 goto label39;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $d11 = virtualinvoke $r12.<java.util.Random: double nextDouble()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(i44, $d11);

        i44 = i44 + 8;

        goto label38;

     label39:
        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l43);

        i47 = 0;

     label40:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 - 8;

        if i47 > $i8 goto label41;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $d9 = virtualinvoke $r11.<java.util.Random: double nextDouble()>();

        $d10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(i47);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d9, $d10, 0.0);

        i47 = i47 + 8;

        goto label40;

     label41:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l43);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r37 = newarray (boolean)[$i9];

        i48 = 0;

     label42:
        if i48 >= 1000 goto label45;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i27 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i28 = $i27 - 7;

        i49 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i28);

        $z8 = r37[i49];

        if $z8 != 0 goto label44;

        $i29 = i49 + 1;

        $z9 = r37[$i29];

        if $z9 != 0 goto label44;

        $i30 = i49 + 2;

        $z10 = r37[$i30];

        if $z10 != 0 goto label44;

        $i31 = i49 + 3;

        $z11 = r37[$i31];

        if $z11 != 0 goto label44;

        $i32 = i49 + 4;

        $z12 = r37[$i32];

        if $z12 != 0 goto label44;

        $i33 = i49 + 5;

        $z13 = r37[$i33];

        if $z13 != 0 goto label44;

        $i34 = i49 + 6;

        $z14 = r37[$i34];

        if $z14 != 0 goto label44;

        $i35 = i49 + 7;

        $z15 = r37[$i35];

        if $z15 == 0 goto label43;

        goto label44;

     label43:
        r37[i49] = 1;

        $i36 = i49 + 1;

        r37[$i36] = 1;

        $i37 = i49 + 2;

        r37[$i37] = 1;

        $i38 = i49 + 3;

        r37[$i38] = 1;

        $i39 = i49 + 4;

        r37[$i39] = 1;

        $i40 = i49 + 5;

        r37[$i40] = 1;

        $i41 = i49 + 6;

        r37[$i41] = 1;

        $i42 = i49 + 7;

        r37[$i42] = 1;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $d8 = virtualinvoke $r10.<java.util.Random: double nextDouble()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(i49, $d8);

     label44:
        i48 = i48 + 1;

        goto label42;

     label45:
        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void setSeed(long)>(l43);

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r38 = newarray (boolean)[$i10];

        i50 = 0;

     label46:
        if i50 >= 1000 goto label49;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = $i11 - 7;

        i51 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i12);

        $z0 = r38[i51];

        if $z0 != 0 goto label48;

        $i13 = i51 + 1;

        $z1 = r38[$i13];

        if $z1 != 0 goto label48;

        $i14 = i51 + 2;

        $z2 = r38[$i14];

        if $z2 != 0 goto label48;

        $i15 = i51 + 3;

        $z3 = r38[$i15];

        if $z3 != 0 goto label48;

        $i16 = i51 + 4;

        $z4 = r38[$i16];

        if $z4 != 0 goto label48;

        $i17 = i51 + 5;

        $z5 = r38[$i17];

        if $z5 != 0 goto label48;

        $i18 = i51 + 6;

        $z6 = r38[$i18];

        if $z6 != 0 goto label48;

        $i19 = i51 + 7;

        $z7 = r38[$i19];

        if $z7 == 0 goto label47;

        goto label48;

     label47:
        r38[i51] = 1;

        $i20 = i51 + 1;

        r38[$i20] = 1;

        $i21 = i51 + 2;

        r38[$i21] = 1;

        $i22 = i51 + 3;

        r38[$i22] = 1;

        $i23 = i51 + 4;

        r38[$i23] = 1;

        $i24 = i51 + 5;

        r38[$i24] = 1;

        $i25 = i51 + 6;

        r38[$i25] = 1;

        $i26 = i51 + 7;

        r38[$i26] = 1;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $d6 = virtualinvoke $r8.<java.util.Random: double nextDouble()>();

        $d7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(i51);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d6, $d7, 0.0);

     label48:
        i50 = i50 + 1;

        goto label46;

     label49:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
    }

    public void testBulkBytePutExceptions()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        java.util.Random $r3;
        java.lang.Exception $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i4 = $i1 / 4;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 % 4;

        $i5 = $i4 + $i3;

        r2 = newarray (byte)[$i5];

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void nextBytes(byte[])>(r2);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(-1, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r11 := @caughtexception;

        $z7 = $r11 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(-1, r2, 4, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        $z16 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(-2147483648, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        $z6 = $r10 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(-2147483648, r2, 4, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r6 := @caughtexception;

        $z2 = $r6 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label13:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>($i6, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r4 := @caughtexception;

        $z0 = $r4 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label16:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i7, r2, 6, 44);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r24 := @caughtexception;

        $z20 = $r24 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

     label19:
        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = lengthof r2;

        $i10 = $i9 - $i8;

        $i11 = $i10 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>($i11, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r14 := @caughtexception;

        $z10 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label22:
        $i12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i13 = $i12 - 5;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i13, r2, 3, 6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r9 := @caughtexception;

        $z5 = $r9 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(2147483647, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r22 := @caughtexception;

        $z18 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(2147483647, r2, 10, 20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r16 := @caughtexception;

        $z12 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label31:
        $i14 = lengthof r2;

        $i15 = 2147483647 - $i14;

        $i16 = $i15 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>($i16, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r13 := @caughtexception;

        $z9 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(2147483636, r2, 11, 11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r12 := @caughtexception;

        $z8 = $r12 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label37:
        $i17 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i18 = $i17 / 4;

        $i19 = 3 * $i18;

        $i20 = $i19 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>($i20, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label38:
        goto label40;

     label39:
        $r8 := @caughtexception;

        $z4 = $r8 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label40:
        $i21 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i22 = $i21 / 4;

        $i23 = 3 * $i22;

        $i26 = $i23 + 2;

        $i24 = lengthof r2;

        $i25 = $i24 - 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i26, r2, 0, $i25);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label41:
        goto label43;

     label42:
        $r21 := @caughtexception;

        $z17 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label43:
        $i27 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i28 = $i27 / 8;

        $i29 = 7 * $i28;

        $i32 = $i29 + 1;

        $i30 = lengthof r2;

        $i31 = $i30 / 2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i32, r2, 0, $i31);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label44:
        goto label46;

     label45:
        $r7 := @caughtexception;

        $z3 = $r7 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label46:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r2, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label47:
        goto label49;

     label48:
        $r5 := @caughtexception;

        $z1 = $r5 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label49:
        $i33 = lengthof r2;

        $i34 = $i33 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r2, -1, $i34);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label50:
        goto label52;

     label51:
        $r15 := @caughtexception;

        $z11 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label52:
        $i35 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r2, -2147483648, $i35);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label53:
        goto label55;

     label54:
        $r18 := @caughtexception;

        $z14 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label55:
        $i36 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r2, 2147483647, $i36);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label56:
        goto label58;

     label57:
        $r17 := @caughtexception;

        $z13 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label58:
        $i37 = lengthof r2;

        $i38 = 2147483647 - $i37;

        $i40 = $i38 + 1;

        $i39 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r2, $i40, $i39);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label59:
        goto label61;

     label60:
        $r23 := @caughtexception;

        $z19 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label61:
        $i41 = lengthof r2;

        $i42 = $i41 / 2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(-2, r2, -1, $i42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label62:
        goto label64;

     label63:
        $r19 := @caughtexception;

        $z15 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label64:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
        catch java.lang.Exception from label37 to label38 with label39;
        catch java.lang.Exception from label40 to label41 with label42;
        catch java.lang.Exception from label43 to label44 with label45;
        catch java.lang.Exception from label46 to label47 with label48;
        catch java.lang.Exception from label49 to label50 with label51;
        catch java.lang.Exception from label52 to label53 with label54;
        catch java.lang.Exception from label55 to label56 with label57;
        catch java.lang.Exception from label58 to label59 with label60;
        catch java.lang.Exception from label61 to label62 with label63;
    }

    public void testBulkByteGetExceptions()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39;
        java.lang.Exception $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i2 = $i1 / 4;

        r2 = newarray (byte)[$i2];

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(-1, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

        $z1 = $r4 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(-1, r2, 4, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        $z14 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(-2147483648, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        $z16 = $r19 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(-2147483648, r2, 4, 5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r23 := @caughtexception;

        $z20 = $r23 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

     label13:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>($i3, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r10 := @caughtexception;

        $z7 = $r10 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label16:
        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i4, r2, 6, 44);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label17:
        goto label19;

     label18:
        $r12 := @caughtexception;

        $z9 = $r12 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label19:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i5 = lengthof r2;

        $i7 = $i6 - $i5;

        $i8 = $i7 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>($i8, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label20:
        goto label22;

     label21:
        $r3 := @caughtexception;

        $z0 = $r3 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label22:
        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i10 = $i9 - 5;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i10, r2, 3, 6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label23:
        goto label25;

     label24:
        $r7 := @caughtexception;

        $z4 = $r7 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(2147483647, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label26:
        goto label28;

     label27:
        $r22 := @caughtexception;

        $z19 = $r22 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

     label28:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(2147483647, r2, 10, 20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label29:
        goto label31;

     label30:
        $r6 := @caughtexception;

        $z3 = $r6 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label31:
        $i11 = lengthof r2;

        $i12 = 2147483647 - $i11;

        $i13 = $i12 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>($i13, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label32:
        goto label34;

     label33:
        $r21 := @caughtexception;

        $z18 = $r21 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

     label34:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(2147483636, r2, 11, 11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label35:
        goto label37;

     label36:
        $r15 := @caughtexception;

        $z12 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label37:
        $i14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i15 = $i14 / 4;

        $i16 = 3 * $i15;

        $i17 = $i16 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>($i17, r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label38:
        goto label40;

     label39:
        $r14 := @caughtexception;

        $z11 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

     label40:
        $i18 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i19 = $i18 / 4;

        $i20 = 3 * $i19;

        $i23 = $i20 + 2;

        $i21 = lengthof r2;

        $i22 = $i21 - 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i23, r2, 0, $i22);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label41:
        goto label43;

     label42:
        $r20 := @caughtexception;

        $z17 = $r20 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label43:
        $i24 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i25 = $i24 / 8;

        $i26 = 7 * $i25;

        $i29 = $i26 + 1;

        $i27 = lengthof r2;

        $i28 = $i27 / 2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i29, r2, 0, $i28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label44:
        goto label46;

     label45:
        $r13 := @caughtexception;

        $z10 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

     label46:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r2, -1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label47:
        goto label49;

     label48:
        $r18 := @caughtexception;

        $z15 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label49:
        $i30 = lengthof r2;

        $i31 = $i30 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r2, -1, $i31);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label50:
        goto label52;

     label51:
        $r9 := @caughtexception;

        $z6 = $r9 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label52:
        $i32 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r2, -2147483648, $i32);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label53:
        goto label55;

     label54:
        $r16 := @caughtexception;

        $z13 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label55:
        $i33 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r2, 2147483647, $i33);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label56:
        goto label58;

     label57:
        $r11 := @caughtexception;

        $z8 = $r11 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label58:
        $i34 = lengthof r2;

        $i35 = 2147483647 - $i34;

        $i37 = $i35 + 1;

        $i36 = lengthof r2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r2, $i37, $i36);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label59:
        goto label61;

     label60:
        $r8 := @caughtexception;

        $z5 = $r8 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label61:
        $i38 = lengthof r2;

        $i39 = $i38 / 2;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(-2, r2, -1, $i39);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label62:
        goto label64;

     label63:
        $r5 := @caughtexception;

        $z2 = $r5 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label64:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
        catch java.lang.Exception from label37 to label38 with label39;
        catch java.lang.Exception from label40 to label41 with label42;
        catch java.lang.Exception from label43 to label44 with label45;
        catch java.lang.Exception from label46 to label47 with label48;
        catch java.lang.Exception from label49 to label50 with label51;
        catch java.lang.Exception from label52 to label53 with label54;
        catch java.lang.Exception from label55 to label56 with label57;
        catch java.lang.Exception from label58 to label59 with label60;
        catch java.lang.Exception from label61 to label62 with label63;
    }

    public void testBulkByteAccess()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        byte[] r1, r2, r20, r21, r22, r24, r25, r27, r28, r29, r31, r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76;
        java.util.Random $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.flink.core.memory.MemorySegment r19, r23, r26, r30;
        long l64;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r19 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        l64 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void setSeed(long)>(l64);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i2 = $i1 / 8;

        r20 = newarray (byte)[$i2];

        i65 = 0;

     label01:
        if i65 >= 8 goto label02;

        $r18 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r18.<java.util.Random: void nextBytes(byte[])>(r20);

        $i61 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i62 = $i61 / 8;

        $i63 = i65 * $i62;

        virtualinvoke r19.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>($i63, r20);

        i65 = i65 + 1;

        goto label01;

     label02:
        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void setSeed(long)>(l64);

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i4 = $i3 / 8;

        r21 = newarray (byte)[$i4];

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i6 = $i5 / 8;

        r22 = newarray (byte)[$i6];

        i66 = 0;

     label03:
        if i66 >= 8 goto label04;

        $r17 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r17.<java.util.Random: void nextBytes(byte[])>(r21);

        $i58 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i59 = $i58 / 8;

        $i60 = i66 * $i59;

        virtualinvoke r19.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>($i60, r22);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r21, r22);

        i66 = i66 + 1;

        goto label03;

     label04:
        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r23 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i7);

        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r24 = newarray (byte)[$i8];

        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void nextBytes(byte[])>(r24);

        i67 = 0;

     label05:
        if i67 >= 16 goto label06;

        $i50 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i51 = $i50 / 16;

        $i57 = i67 * $i51;

        $i52 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i53 = $i52 / 16;

        $i56 = i67 * $i53;

        $i54 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i55 = $i54 / 16;

        virtualinvoke r23.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i57, r24, $i56, $i55);

        i67 = i67 + 1;

        goto label05;

     label06:
        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r25 = newarray (byte)[$i9];

        i68 = 0;

     label07:
        if i68 >= 16 goto label08;

        $i42 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i43 = $i42 / 16;

        $i49 = i68 * $i43;

        $i44 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i45 = $i44 / 16;

        $i48 = i68 * $i45;

        $i46 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i47 = $i46 / 16;

        virtualinvoke r23.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i49, r25, $i48, $i47);

        i68 = i68 + 1;

        goto label07;

     label08:
        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r24, r25);

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r26 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i10);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r27 = newarray (byte)[$i11];

        $i12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r26.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r27, 0, $i12);

        i69 = 0;

     label09:
        if i69 >= 200 goto label10;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i30 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i31 = $i30 - 10;

        $i32 = virtualinvoke $r12.<java.util.Random: int nextInt(int)>($i31);

        i70 = $i32 + 1;

        $r13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i33 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i34 = $i33 - i70;

        $i35 = $i34 + 1;

        i71 = virtualinvoke $r13.<java.util.Random: int nextInt(int)>($i35);

        $r14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i36 = virtualinvoke $r14.<java.util.Random: int nextInt(int)>(3);

        $i37 = $i36 + 1;

        $i38 = $i37 * i70;

        r28 = newarray (byte)[$i38];

        $r15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i39 = lengthof r28;

        $i40 = $i39 - i70;

        $i41 = $i40 + 1;

        i72 = virtualinvoke $r15.<java.util.Random: int nextInt(int)>($i41);

        $r16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r16.<java.util.Random: void nextBytes(byte[])>(r28);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r28, i72, r27, i71, i70);

        virtualinvoke r26.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(i71, r28, i72, i70);

        i69 = i69 + 1;

        goto label09;

     label10:
        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r29 = newarray (byte)[$i13];

        virtualinvoke r26.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(0, r29);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r27, r29);

        $i14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r30 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i14);

        $i15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r31 = newarray (byte)[$i15];

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r7.<java.util.Random: void nextBytes(byte[])>(r31);

        virtualinvoke r30.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r31);

        i73 = 0;

     label11:
        if i73 >= 200 goto label12;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i17 = $i16 / 8;

        $i18 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i17);

        i74 = $i18 + 1;

        $r9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i19 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i20 = $i19 - i74;

        $i21 = $i20 + 1;

        i75 = virtualinvoke $r9.<java.util.Random: int nextInt(int)>($i21);

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i22 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(3);

        $i23 = $i22 + 1;

        $i24 = $i23 * i74;

        r32 = newarray (byte)[$i24];

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i25 = lengthof r32;

        $i26 = $i25 - i74;

        $i27 = $i26 + 1;

        i76 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>($i27);

        virtualinvoke r30.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(i75, r32, i76, i74);

        $i28 = i75 + i74;

        r1 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r31, i75, $i28);

        $i29 = i76 + i74;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r32, i76, $i29);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, r2);

        i73 = i73 + 1;

        goto label11;

     label12:
        return;
    }

    public void testDataInputOutput() throws java.io.IOException
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1, r5;
        byte[] r2, r14, r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16;
        java.util.Random $r7, $r12, $r13;
        java.io.ByteArrayOutputStream $r8;
        java.io.DataOutputStream $r9;
        java.io.DataInputStream $r10;
        java.io.ByteArrayInputStream $r11;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = newarray (byte)[$i1];

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r7.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        $r8 = new java.io.ByteArrayOutputStream;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        $r9 = new java.io.DataOutputStream;

        specialinvoke $r9.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r8);

        i11 = 0;

     label1:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i11 >= $i3 goto label2;

        $r13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        i12 = virtualinvoke $r13.<java.util.Random: int nextInt(int)>(200);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i10 = $i9 - i11;

        i13 = staticinvoke <java.lang.Math: int min(int,int)>(i12, $i10);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, i11, i13);

        i11 = i11 + i13;

        goto label1;

     label2:
        r14 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r2, r14);

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r5 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i4);

        $r10 = new java.io.DataInputStream;

        $r11 = new java.io.ByteArrayInputStream;

        specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>(r14);

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r11);

        i14 = 0;

     label3:
        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i14 >= $i5 goto label4;

        $r12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        i15 = virtualinvoke $r12.<java.util.Random: int nextInt(int)>(200);

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 - i14;

        i16 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i8);

        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r10, i14, i16);

        i14 = i14 + i16;

        goto label3;

     label4:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r15 = newarray (byte)[$i6];

        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(0, r15);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r2, r15);

        return;
    }

    public void testDataInputOutputOutOfBounds()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2, $r8;
        java.util.Random $r3;
        java.io.DataOutputStream $r4;
        java.io.ByteArrayOutputStream $r5;
        java.io.DataInputStream $r6;
        java.io.ByteArrayInputStream $r7;
        java.lang.Exception $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(52);

        r2 = newarray (byte)[52];

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r3.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        $r4 = new java.io.DataOutputStream;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r4, -1, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        $z1 = $r10 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r4, 52, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        $z5 = $r14 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r4, -52, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        $z4 = $r13 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r4, -2147483648, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label11:
        goto label13;

     label12:
        $r18 := @caughtexception;

        $z9 = $r18 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r4, 2147483647, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label14:
        goto label16;

     label15:
        $r15 := @caughtexception;

        $z6 = $r15 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

     label16:
        $r6 = new java.io.DataInputStream;

        $r7 = new java.io.ByteArrayInputStream;

        $r8 = newarray (byte)[52];

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

     label17:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, -1, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label18:
        goto label20;

     label19:
        $r12 := @caughtexception;

        $z3 = $r12 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label20:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, 52, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label21:
        goto label23;

     label22:
        $r17 := @caughtexception;

        $z8 = $r17 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label23:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, -52, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label24:
        goto label26;

     label25:
        $r9 := @caughtexception;

        $z0 = $r9 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label26:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, -2147483648, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label27:
        goto label29;

     label28:
        $r16 := @caughtexception;

        $z7 = $r16 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

     label29:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, 2147483647, 26);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("IndexOutOfBoundsException expected");

     label30:
        goto label32;

     label31:
        $r11 := @caughtexception;

        $z2 = $r11 instanceof java.lang.IndexOutOfBoundsException;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label32:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Exception from label23 to label24 with label25;
        catch java.lang.Exception from label26 to label27 with label28;
        catch java.lang.Exception from label29 to label30 with label31;
    }

    public void testDataInputOutputStreamUnderflowOverflow() throws java.io.IOException
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2, $r9;
        java.util.Random $r4, $r10, $r11;
        java.io.DataOutputStream $r5;
        org.apache.flink.core.memory.MemorySegmentTestBase$1 $r6;
        int $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i10, i11, i12;
        java.io.DataInputStream $r7;
        java.io.ByteArrayInputStream $r8;
        java.io.EOFException $r12;
        java.io.IOException $r13;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(1337);

        r2 = newarray (byte)[1337];

        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        $r5 = new java.io.DataOutputStream;

        $r6 = new org.apache.flink.core.memory.MemorySegmentTestBase$1;

        specialinvoke $r6.<org.apache.flink.core.memory.MemorySegmentTestBase$1: void <init>(org.apache.flink.core.memory.MemorySegmentTestBase)>(r0);

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

     label01:
        i6 = 0;

     label02:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i6 >= $i1 goto label03;

        $r11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        i7 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>(133);

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i5 = $i4 - i6;

        i8 = staticinvoke <java.lang.Math: int min(int,int)>(i7, $i5);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r5, i6, i8);

        i6 = i6 + i8;

        goto label02;

     label03:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an IOException");

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        $r7 = new java.io.DataInputStream;

        $r8 = new java.io.ByteArrayInputStream;

        $r9 = newarray (byte)[668];

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9);

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

     label07:
        i9 = 0;

     label08:
        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i9 >= $i10 goto label09;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        i11 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(133);

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 - i9;

        i12 = staticinvoke <java.lang.Math: int min(int,int)>(i11, $i3);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r7, i9, i12);

        i9 = i9 + i12;

        goto label08;

     label09:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an EOFException");

     label10:
        goto label12;

     label11:
        $r12 := @caughtexception;

     label12:
        return;

        catch java.io.IOException from label01 to label04 with label05;
        catch java.io.EOFException from label07 to label10 with label11;
    }

    public void testByteBufferGet()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferGet(boolean)>(0);

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferGet(boolean)>(1);

        return;
    }

    private void testByteBufferGet(boolean)
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        boolean z0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2, r10;
        java.nio.ByteBuffer r3, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18;
        java.util.Random $r4, $r8;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = newarray (byte)[$i1];

        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        if z0 == 0 goto label1;

        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i14 = 3 * $i13;

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i14);

        goto label2;

     label1:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = 3 * $i2;

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

     label2:
        r3 = $r9;

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i5 = 2 * $i4;

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i5);

        i15 = 0;

     label3:
        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i15 >= $i16 goto label4;

        $r8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i10 = $i9 / 10;

        i17 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i10);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = $i11 - i15;

        i18 = staticinvoke <java.lang.Math: int min(int,int)>(i17, $i12);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(i15, r3, i18);

        i15 = i15 + i18;

        goto label3;

     label4:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r10 = newarray (byte)[$i6];

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = 2 * $i7;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r10);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r2, r10);

        return;
    }

    public void testHeapByteBufferGetReadOnly()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferGetReadOnly(boolean)>(0);

        return;
    }

    public void testOffHeapByteBufferGetReadOnly()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferGetReadOnly(boolean)>(1);

        return;
    }

    private void testByteBufferGetReadOnly(boolean) throws java.nio.ReadOnlyBufferException
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        boolean z0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.nio.ByteBuffer r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        if z0 == 0 goto label1;

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i3);

        goto label2;

     label1:
        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

     label2:
        r2 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(0, r2, $i2);

        return;
    }

    public void testByteBufferPut()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferPut(boolean)>(0);

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testByteBufferPut(boolean)>(1);

        return;
    }

    private void testByteBufferPut(boolean)
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        boolean z0;
        byte[] r1, r9;
        java.nio.ByteBuffer r2, $r8;
        org.apache.flink.core.memory.MemorySegment r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15, i16;
        java.util.Random $r4, $r7;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        z0 := @parameter0: boolean;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = newarray (byte)[$i1];

        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r4.<java.util.Random: void nextBytes(byte[])>(r1);

        if z0 == 0 goto label1;

        $i12 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i12);

        goto label2;

     label1:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

     label2:
        r2 = $r8;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i4 = 3 * $i3;

        r3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i4);

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = 2 * $i5;

        i13 = 0;

     label3:
        $i14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i13 >= $i14 goto label4;

        $r7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 / 10;

        i15 = virtualinvoke $r7.<java.util.Random: int nextInt(int)>($i8);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i10 = $i9 - i13;

        i16 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i10);

        $i11 = i0 + i13;

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>($i11, r2, i16);

        i13 = i13 + i16;

        goto label3;

     label4:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r9 = newarray (byte)[$i6];

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(i0, r9);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r1, r9);

        return;
    }

    public void testSlicedByteBufferGet()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testSlicedByteBufferGet(boolean)>(0);

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testSlicedByteBufferGet(boolean)>(1);

        return;
    }

    private void testSlicedByteBufferGet(boolean)
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        boolean z0;
        org.apache.flink.core.memory.MemorySegment r1;
        byte[] r2, r12;
        java.nio.ByteBuffer r3, r4, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i14, i15, i16;
        java.util.Random $r5, $r10;
        java.nio.Buffer $r6;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        z0 := @parameter0: boolean;

        $i0 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i0);

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = newarray (byte)[$i1];

        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r5.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        if z0 == 0 goto label1;

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = $i11 + 49;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i12);

        goto label2;

     label1:
        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i3 = $i2 + 49;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

     label2:
        r3 = $r11;

        $r6 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(19);

        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i5 = 19 + $i4;

        virtualinvoke $r6.<java.nio.Buffer: java.nio.Buffer limit(int)>($i5);

        r4 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        i13 = 0;

     label3:
        $i14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i13 >= $i14 goto label4;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i7 / 10;

        i15 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>($i8);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i10 = $i9 - i13;

        i16 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i10);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(i13, r4, i16);

        i13 = i13 + i16;

        goto label3;

     label4:
        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r12 = newarray (byte)[$i6];

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(19);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r12);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r2, r12);

        return;
    }

    public void testSlicedByteBufferPut()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testSlicedByteBufferPut(boolean)>(0);

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void testSlicedByteBufferPut(boolean)>(1);

        return;
    }

    private void testSlicedByteBufferPut(boolean)
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        boolean z0;
        byte[] r1, r5, r12;
        java.nio.ByteBuffer r3, $r11;
        org.apache.flink.core.memory.MemorySegment r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, i22, i23;
        java.util.Random $r6, $r10;
        java.nio.Buffer $r8;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        z0 := @parameter0: boolean;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i2 = $i1 + 49;

        r1 = newarray (byte)[$i2];

        $r6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        virtualinvoke $r6.<java.util.Random: void nextBytes(byte[])>(r1);

        if z0 == 0 goto label1;

        $i18 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i19 = $i18 + 49;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i19);

        goto label2;

     label1:
        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i4 = $i3 + 49;

        $r11 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

     label2:
        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        $r8 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(19);

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i6 = 19 + $i5;

        virtualinvoke $r8.<java.nio.Buffer: java.nio.Buffer limit(int)>($i6);

        r3 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = 3 * $i7;

        r4 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i8);

        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = 2 * $i9;

        i20 = 0;

     label3:
        $i21 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i20 >= $i21 goto label4;

        $r10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i14 = $i13 / 10;

        i22 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>($i14);

        $i15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i16 = $i15 - i20;

        i23 = staticinvoke <java.lang.Math: int min(int,int)>(i22, $i16);

        $i17 = i0 + i20;

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>($i17, r3, i23);

        i20 = i20 + i23;

        goto label3;

     label4:
        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r12 = newarray (byte)[$i10];

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[])>(i0, r12);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = 19 + $i11;

        r5 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, 19, $i12);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r5, r12);

        return;
    }

    public void testByteBufferOutOfBounds()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i20, $i22, $i24, $i26, $i28, $i30, $i32, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52;
        org.apache.flink.core.memory.MemorySegment r5;
        java.nio.ByteBuffer r7, $r13, $r14;
        int[] $r8, $r9, $r10, $r11;
        java.nio.ByteBuffer[] $r12;
        long $l17, $l19, $l21, $l23, $l25, $l27, $l29, $l31, $l33;
        java.lang.RuntimeException $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = $i2 / 10;

        $r8 = newarray (int)[3];

        $r8[0] = 0;

        $r8[1] = 1;

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i4 = $i3 / 10;

        $i5 = $i4 * 9;

        $r8[2] = $i5;

        $r9 = newarray (int)[5];

        $r9[0] = -1;

        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i7 = $i6 + 1;

        $r9[1] = $i7;

        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i9 = neg $i8;

        $r9[2] = $i9;

        $r9[3] = 2147483647;

        $r9[4] = -2147483648;

        $r10 = newarray (int)[4];

        $r10[0] = 0;

        $r10[1] = 1;

        $r10[2] = i0;

        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $r10[3] = $i10;

        $r11 = newarray (int)[4];

        $r11[0] = -1;

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = neg $i11;

        $r11[1] = $i12;

        $r11[2] = 2147483647;

        $r11[3] = -2147483648;

        $i13 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r5 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i13);

        $r12 = newarray (java.nio.ByteBuffer)[2];

        $r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r12[1] = $r14;

        i1 = lengthof $r12;

        i34 = 0;

     label01:
        if i34 >= i1 goto label36;

        r7 = $r12[i34];

        i35 = lengthof $r8;

        i36 = 0;

     label02:
        if i36 >= i35 goto label12;

        i37 = $r8[i36];

        i38 = lengthof $r11;

        i39 = 0;

     label03:
        if i39 >= i38 goto label11;

        i40 = $r11[i39];

     label04:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(i37, r7, i40);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

     label07:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(i37, r7, i40);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

     label10:
        $i28 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $l29 = (long) $i28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l29);

        $i30 = virtualinvoke r7.<java.nio.ByteBuffer: int capacity()>();

        $l31 = (long) $i30;

        $i32 = virtualinvoke r7.<java.nio.ByteBuffer: int limit()>();

        $l33 = (long) $i32;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l31, $l33);

        i39 = i39 + 1;

        goto label03;

     label11:
        i36 = i36 + 1;

        goto label02;

     label12:
        i41 = lengthof $r9;

        i42 = 0;

     label13:
        if i42 >= i41 goto label23;

        i43 = $r9[i42];

        i44 = lengthof $r10;

        i45 = 0;

     label14:
        if i45 >= i44 goto label22;

        i46 = $r10[i45];

     label15:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(i43, r7, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label16:
        goto label18;

     label17:
        $r17 := @caughtexception;

     label18:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(i43, r7, i46);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label19:
        goto label21;

     label20:
        $r19 := @caughtexception;

     label21:
        $i22 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l23);

        $i24 = virtualinvoke r7.<java.nio.ByteBuffer: int capacity()>();

        $l25 = (long) $i24;

        $i26 = virtualinvoke r7.<java.nio.ByteBuffer: int limit()>();

        $l27 = (long) $i26;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l25, $l27);

        i45 = i45 + 1;

        goto label14;

     label22:
        i42 = i42 + 1;

        goto label13;

     label23:
        i47 = lengthof $r8;

        i48 = 0;

     label24:
        if i48 >= i47 goto label35;

        i49 = $r8[i48];

        i50 = lengthof $r10;

        i51 = 0;

     label25:
        if i51 >= i50 goto label34;

        i52 = $r10[i51];

        $i15 = i49 + i52;

        $i14 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if $i15 <= $i14 goto label33;

     label26:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(i49, r7, i52);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label27:
        goto label29;

     label28:
        $r15 := @caughtexception;

     label29:
        virtualinvoke r5.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(i49, r7, i52);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IndexOutOfBoundsException");

     label30:
        goto label32;

     label31:
        $r18 := @caughtexception;

     label32:
        $i16 = virtualinvoke r7.<java.nio.ByteBuffer: int position()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l17);

        $i18 = virtualinvoke r7.<java.nio.ByteBuffer: int capacity()>();

        $l19 = (long) $i18;

        $i20 = virtualinvoke r7.<java.nio.ByteBuffer: int limit()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l19, $l21);

     label33:
        i51 = i51 + 1;

        goto label25;

     label34:
        i48 = i48 + 1;

        goto label24;

     label35:
        i34 = i34 + 1;

        goto label01;

     label36:
        return;

        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.nio.BufferUnderflowException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.nio.BufferOverflowException from label07 to label08 with label09;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label17;
        catch java.nio.BufferUnderflowException from label15 to label16 with label17;
        catch java.lang.IndexOutOfBoundsException from label18 to label19 with label20;
        catch java.nio.BufferOverflowException from label18 to label19 with label20;
        catch java.lang.IndexOutOfBoundsException from label26 to label27 with label28;
        catch java.nio.BufferUnderflowException from label26 to label27 with label28;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label31;
        catch java.nio.BufferOverflowException from label29 to label30 with label31;
    }

    public void testByteBufferOverflowUnderflow()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i36, $i38, $i39, $i40, $i42, $i45, i47;
        java.nio.ByteBuffer r1;
        org.apache.flink.core.memory.MemorySegment r2;
        long $l10, $l12, $l14, $l21, $l23, $l25, $l32, $l34, $l35, $l37, $l41, $l43, $l44, $l46;
        java.nio.BufferOverflowException $r5, $r8;
        java.nio.BufferUnderflowException $r6, $r7;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = $i2 / 10;

        r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i3);

     label01:
        $i4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i8 = $i4 / 5;

        $i5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i6 = $i5 / 10;

        $i7 = $i6 + 2;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>($i8, r1, $i7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

     label04:
        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l10);

        $i11 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $l12 = (long) $i11;

        $i13 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l12, $l14);

     label05:
        $i15 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i19 = $i15 / 5;

        $i16 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i17 = $i16 / 10;

        $i18 = $i17 + 2;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>($i19, r1, $i18);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label06:
        goto label08;

     label07:
        $r6 := @caughtexception;

     label08:
        $i20 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l21);

        $i22 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $l23 = (long) $i22;

        $i24 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l23, $l25);

        $i26 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        i47 = $i26 / 3;

        $i27 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $i28 = 2 * $i27;

        i1 = $i28 / 3;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i47);

     label09:
        $i29 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $i30 = $i29 / 3;

        $i31 = $i30 + 3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(20, r1, $i31);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

     label12:
        $l32 = (long) i47;

        $i33 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $l34 = (long) $i33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l32, $l34);

        $l35 = (long) i1;

        $i36 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l35, $l37);

     label13:
        $i38 = virtualinvoke r1.<java.nio.ByteBuffer: int capacity()>();

        $i39 = $i38 / 3;

        $i40 = $i39 + 3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(20, r1, $i40);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label14:
        goto label16;

     label15:
        $r7 := @caughtexception;

     label16:
        $l41 = (long) i47;

        $i42 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $l43 = (long) $i42;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l41, $l43);

        $l44 = (long) i1;

        $i45 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $l46 = (long) $i45;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l44, $l46);

        return;

        catch java.nio.BufferOverflowException from label01 to label02 with label03;
        catch java.nio.BufferUnderflowException from label05 to label06 with label07;
        catch java.nio.BufferOverflowException from label09 to label10 with label11;
        catch java.nio.BufferUnderflowException from label13 to label14 with label15;
    }

    public void testCompareBytes()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        byte[] r1, r2;
        int i0, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i30;
        java.util.Random $r3, $r4, $r5;
        byte b29;
        org.apache.flink.core.memory.MemorySegment r6, r7;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i6 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = newarray (byte)[$i6];

        $i7 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r2 = newarray (byte)[$i7];

        $i8 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = $i8 / 255;

        i28 = 0;

     label01:
        $i9 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        if i28 >= $i9 goto label03;

        $i23 = i28 / i0;

        $i24 = $i23 & 255;

        b29 = (byte) $i24;

        r1[i28] = b29;

        $i26 = i28 + 16666;

        $i25 = lengthof r2;

        if $i26 >= $i25 goto label02;

        $i27 = i28 + 16666;

        r2[$i27] = b29;

     label02:
        i28 = i28 + 1;

        goto label01;

     label03:
        $i10 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r6 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i10);

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r7 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i11);

        virtualinvoke r6.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r1);

        virtualinvoke r7.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        i30 = 0;

     label04:
        if i30 >= 1000 goto label11;

        $r3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i12 = lengthof r1;

        i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i12);

        $r4 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i13 = lengthof r2;

        i3 = virtualinvoke $r4.<java.util.Random: int nextInt(int)>($i13);

        $i14 = lengthof r1;

        $i17 = $i14 - i2;

        $i15 = lengthof r2;

        $i16 = $i15 - i3;

        $i18 = staticinvoke <java.lang.Math: int min(int,int)>($i17, $i16);

        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i19 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i20 = $i19 / 50;

        $i21 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i20);

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i21);

        i5 = virtualinvoke r6.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r7, i2, i3, i4);

        $i22 = i3 - 16666;

        if i2 >= $i22 goto label07;

        if i5 > 0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        goto label10;

     label07:
        if i5 < 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label10:
        i30 = i30 + 1;

        goto label04;

     label11:
        return;
    }

    public void testCompareBytesWithDifferentLength()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r3, r4;
        byte[] $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer $r7, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23;
        org.hamcrest.Matcher $r9, $r12, $r15, $r18, $r21, $r24;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $r5 = newarray (byte)[3];

        $r5[0] = 97;

        $r5[1] = 98;

        $r5[2] = 99;

        $r6 = newarray (byte)[4];

        $r6[0] = 97;

        $r6[1] = 98;

        $r6[2] = 99;

        $r6[3] = 100;

        r3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(4);

        r4 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(4);

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, $r5);

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, $r6);

        $i0 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 0, 0, 3, 4);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher lessThan(java.lang.Comparable)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $i1 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 0, 0, 3, 3);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        $i2 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 0, 0, 3, 2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher greaterThan(java.lang.Comparable)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        $i3 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 1, 1, 2, 3);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher lessThan(java.lang.Comparable)>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        $i4 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 1, 1, 2, 2);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r21 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r19, $r21);

        $i5 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int,int)>(r4, 1, 1, 2, 1);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r24 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher greaterThan(java.lang.Comparable)>($r23);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r24);

        return;
    }

    public void testSwapBytes()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        int i0, $i1, $i2, $i3, $i8, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        byte[] r1, r2, $r6;
        org.apache.flink.core.memory.MemorySegment r3, r4;
        byte $b4, $b6, $b9;
        long $l5, $l7, $l10;
        java.util.Random $r5;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $i1 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        i0 = $i1 / 2;

        $i2 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r1 = newarray (byte)[$i2];

        r2 = newarray (byte)[i0];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r2, 1);

        $i3 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        r3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>($i3);

        r4 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(i0);

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r1);

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[])>(0, r2);

        i15 = 0;

     label1:
        if i15 >= i0 goto label2;

        $r5 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: java.util.Random random>;

        $i11 = r0.<org.apache.flink.core.memory.MemorySegmentTestBase: int pageSize>;

        $i12 = $i11 / 40;

        i16 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>($i12);

        $i13 = i0 - i15;

        i17 = staticinvoke <java.lang.Math: int min(int,int)>(i16, $i13);

        $r6 = newarray (byte)[i17];

        $i14 = i15 + i0;

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void swapBytes(byte[],org.apache.flink.core.memory.MemorySegment,int,int,int)>($r6, r4, $i14, i15, i17);

        i15 = i15 + i17;

        goto label1;

     label2:
        i18 = 0;

     label3:
        if i18 >= i0 goto label4;

        $b4 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i18);

        $l5 = (long) $b4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $b6 = virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(i18);

        $l7 = (long) $b6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = i18 + i0;

        $b9 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i8);

        $l10 = (long) $b9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l10);

        i18 = i18 + 1;

        goto label3;

     label4:
        return;
    }

    public void testCheckAgainstOverflowUnderflowOnRelease()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.lang.Exception $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(512);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void free()>();

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label02:
        goto label07;

     label03:
        $r7 := @caughtexception;

        $z10 = $r7 instanceof java.lang.IllegalStateException;

        if $z10 != 0 goto label04;

        $z11 = $r7 instanceof java.lang.NullPointerException;

        if $z11 == 0 goto label05;

     label04:
        $z12 = 1;

        goto label06;

     label05:
        $z12 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label08:
        goto label13;

     label09:
        $r6 := @caughtexception;

        $z8 = $r6 instanceof java.lang.IllegalStateException;

        if $z8 != 0 goto label10;

        $z9 = $r6 instanceof java.lang.NullPointerException;

        if $z9 == 0 goto label11;

     label10:
        $z13 = 1;

        goto label12;

     label11:
        $z13 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

     label13:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label14:
        goto label19;

     label15:
        $r2 := @caughtexception;

        $z0 = $r2 instanceof java.lang.IllegalStateException;

        if $z0 != 0 goto label16;

        $z1 = $r2 instanceof java.lang.NullPointerException;

        if $z1 == 0 goto label17;

     label16:
        $z14 = 1;

        goto label18;

     label17:
        $z14 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

     label19:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label20:
        goto label25;

     label21:
        $r5 := @caughtexception;

        $z6 = $r5 instanceof java.lang.IllegalStateException;

        if $z6 != 0 goto label22;

        $z7 = $r5 instanceof java.lang.NullPointerException;

        if $z7 == 0 goto label23;

     label22:
        $z15 = 1;

        goto label24;

     label23:
        $z15 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

     label25:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label26:
        goto label31;

     label27:
        $r3 := @caughtexception;

        $z2 = $r3 instanceof java.lang.IllegalStateException;

        if $z2 != 0 goto label28;

        $z3 = $r3 instanceof java.lang.NullPointerException;

        if $z3 == 0 goto label29;

     label28:
        $z16 = 1;

        goto label30;

     label29:
        $z16 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

     label31:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expecting an IllegalStateException");

     label32:
        goto label37;

     label33:
        $r4 := @caughtexception;

        $z4 = $r4 instanceof java.lang.IllegalStateException;

        if $z4 != 0 goto label34;

        $z5 = $r4 instanceof java.lang.NullPointerException;

        if $z5 == 0 goto label35;

     label34:
        $z17 = 1;

        goto label36;

     label35:
        $z17 = 0;

     label36:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

     label37:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label31 to label32 with label33;
    }

    public void testByteBufferWrapping()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.nio.ByteBuffer r2, r3, r4;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22, $i24;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23, $l25;
        java.nio.ByteOrder $r5, $r8, $r15, $r18;
        java.lang.RuntimeException $r21, $r23, $r24;
        java.lang.IllegalStateException $r22;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(1024);

        r2 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(13, 47);

        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(13L, $l1);

        $i2 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(60L, $l3);

        $i4 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(47L, $l5);

        r3 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(500, 267);

        $i6 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l7);

        $i8 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(767L, $l9);

        $i10 = virtualinvoke r3.<java.nio.ByteBuffer: int remaining()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(267L, $l11);

        r4 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(0, 1024);

        $i12 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1024L, $l15);

        $i16 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1024L, $l17);

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(112, 651797651);

        $i18 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getIntLittleEndian(int)>(112);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(651797651L, $l19);

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(187, 992288337);

        $i20 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getIntBigEndian(int)>(187);

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(992288337L, $l21);

     label01:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(-1, 20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(10, -20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label05:
        goto label07;

     label06:
        $r21 := @caughtexception;

     label07:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(10, 1024);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

     label10:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void free()>();

     label11:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(13, 47);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label12:
        goto label14;

     label13:
        $r22 := @caughtexception;

     label14:
        $r15 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r15);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(112, 651797651);

        $i22 = virtualinvoke r4.<java.nio.ByteBuffer: int getInt(int)>(112);

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(651797651L, $l23);

        $r18 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r18);

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(187, 992288337);

        $i24 = virtualinvoke r4.<java.nio.ByteBuffer: int getInt(int)>(187);

        $l25 = (long) $i24;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(992288337L, $l25);

        return;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalStateException from label11 to label12 with label13;
    }

    public void testOwner()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r2, $r3;
        java.lang.Object $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        $r3 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(64);

        $r4 = virtualinvoke $r3.<org.apache.flink.core.memory.MemorySegment: java.lang.Object getOwner()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r4);

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int,java.lang.Object)>(64, $r5);

        $r6 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: java.lang.Object getOwner()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void free()>();

        $r7 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: java.lang.Object getOwner()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r7);

        return;
    }

    public void testSizeAndFreeing()
    {
        org.apache.flink.core.memory.MemorySegmentTestBase r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int $i1, $i3;
        long $l2, $l4;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.core.memory.MemorySegmentTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: org.apache.flink.core.memory.MemorySegment createSegment(int)>(651);

        $i1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(651L, $l2);

        $z0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean isFreed()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void free()>();

        $z1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean isFreed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i3 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(651L, $l4);

        return;
    }

    public static java.util.Collection executionModes()
    {
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1, $r3, $r5;
        java.lang.Integer $r2, $r4, $r6;
        java.util.List $r7;

        $r0 = newarray (java.lang.Object[])[3];

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        $r1[0] = $r2;

        $r0[0] = $r1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4096);

        $r3[0] = $r4;

        $r0[1] = $r3;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(524288);

        $r5[0] = $r6;

        $r0[2] = $r5;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r7;
    }
}
