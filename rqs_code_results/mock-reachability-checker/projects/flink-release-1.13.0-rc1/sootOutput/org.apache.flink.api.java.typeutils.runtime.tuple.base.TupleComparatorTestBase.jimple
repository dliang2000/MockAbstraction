public abstract class org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected void deepEquals(java.lang.String, org.apache.flink.api.java.tuple.Tuple, org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase r0;
        java.lang.String r1;
        org.apache.flink.api.java.tuple.Tuple r2, r3;
        int $i0, i1;
        java.lang.Object $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        r3 := @parameter2: org.apache.flink.api.java.tuple.Tuple;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: int getArity()>();

        if i1 >= $i0 goto label2;

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected abstract org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean);

    protected abstract org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer();

    protected volatile void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        org.apache.flink.api.java.tuple.Tuple $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.apache.flink.api.java.tuple.Tuple) r2;

        $r4 = (org.apache.flink.api.java.tuple.Tuple) r3;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: void deepEquals(java.lang.String,org.apache.flink.api.java.tuple.Tuple,org.apache.flink.api.java.tuple.Tuple)>(r1, $r5, $r4);

        return;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)>(z0);

        return $r1;
    }
}
