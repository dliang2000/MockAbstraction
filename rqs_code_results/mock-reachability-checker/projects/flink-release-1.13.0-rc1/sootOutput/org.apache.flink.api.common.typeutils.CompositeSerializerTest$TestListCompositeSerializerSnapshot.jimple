public class org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private boolean isImmutableTargetType;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/CompositeSerializerTest$TestListCompositeSerializer;");

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: boolean isImmutableTargetType> = 0;

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer, boolean)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r1;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: boolean isImmutableTargetType> = z0;

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        return 0;
    }

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $z0 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: boolean isImmutableTargetType>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>($z0);

        return;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: boolean isImmutableTargetType> = $z0;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        $r2 = r1.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] fieldSerializers>;

        return $r2;
    }

    protected org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        $z0 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: boolean isImmutableTargetType>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: void <init>(boolean,org.apache.flink.api.common.typeutils.TypeSerializer[])>($z0, r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer)>($r2);

        return $r3;
    }
}
