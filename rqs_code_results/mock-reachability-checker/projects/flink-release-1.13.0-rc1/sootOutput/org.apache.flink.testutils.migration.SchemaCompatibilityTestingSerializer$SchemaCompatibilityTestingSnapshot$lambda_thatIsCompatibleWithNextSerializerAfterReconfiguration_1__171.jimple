public final class org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171 extends java.lang.Object implements java.util.function.Function
{
    org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer cap0;

    public static java.util.function.Function bootstrap$(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171 $r1;

        $r0 := @parameter0: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171;

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171: void <init>(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)>($r0);

        return $r1;
    }

    public void <init>(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171 $r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r1;

        $r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171;

        $r1 := @parameter0: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer cap0> = $r1;

        return;
    }

    public java.lang.Object apply(java.lang.Object)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171 $r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4;

        $r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r1;

        $r3 = $r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__171: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer cap0>;

        $r4 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$thatIsCompatibleWithNextSerializerAfterReconfiguration$1(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r4;
    }
}
