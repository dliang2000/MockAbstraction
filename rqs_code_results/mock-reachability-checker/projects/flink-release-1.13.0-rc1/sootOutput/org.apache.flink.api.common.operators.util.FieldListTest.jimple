public class org.apache.flink.api.common.operators.util.FieldListTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.util.FieldListTest r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldListTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testFieldListConstructors()
    {
        org.apache.flink.api.common.operators.util.FieldListTest r0;
        org.apache.flink.api.common.operators.util.FieldList $r1, $r4, $r5, $r7, $r10, $r13;
        int[] $r2, $r3, $r6, $r9, $r11, $r12, $r14, $r15;
        java.lang.Integer $r8;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldListTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r2 = newarray (int)[0];

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r1, $r2);

        $r4 = <org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList EMPTY_LIST>;

        $r3 = newarray (int)[0];

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r4, $r3);

        $r5 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(14);

        $r6 = newarray (int)[1];

        $r6[0] = 14;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r5, $r6);

        $r7 = new org.apache.flink.api.common.operators.util.FieldList;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.lang.Integer)>($r8);

        $r9 = newarray (int)[1];

        $r9[0] = 3;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r7, $r9);

        $r10 = new org.apache.flink.api.common.operators.util.FieldList;

        $r11 = newarray (int)[3];

        $r11[0] = 7;

        $r11[1] = 4;

        $r11[2] = 1;

        specialinvoke $r10.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>($r11);

        $r12 = newarray (int)[3];

        $r12[0] = 7;

        $r12[1] = 4;

        $r12[2] = 1;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r10, $r12);

        $r13 = new org.apache.flink.api.common.operators.util.FieldList;

        $r14 = newarray (int)[8];

        $r14[0] = 7;

        $r14[1] = 4;

        $r14[2] = 1;

        $r14[3] = 4;

        $r14[4] = 7;

        $r14[5] = 1;

        $r14[6] = 4;

        $r14[7] = 2;

        specialinvoke $r13.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>($r14);

        $r15 = newarray (int)[8];

        $r15[0] = 7;

        $r15[1] = 4;

        $r15[2] = 1;

        $r15[3] = 4;

        $r15[4] = 7;

        $r15[5] = 1;

        $r15[6] = 4;

        $r15[7] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r13, $r15);

        return;
    }

    public void testFieldListAdds()
    {
        org.apache.flink.api.common.operators.util.FieldListTest r0;
        org.apache.flink.api.common.operators.util.FieldList $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r20, $r22, $r24;
        java.lang.Integer $r2, $r4, $r8, $r10;
        int[] $r6, $r12, $r15, $r17, $r21, $r23, $r25;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldListTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = virtualinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>($r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>($r4);

        $r6 = newarray (int)[2];

        $r6[0] = 1;

        $r6[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r5, $r6);

        $r7 = <org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList EMPTY_LIST>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r11 = virtualinvoke $r9.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>($r10);

        $r12 = newarray (int)[2];

        $r12[0] = 3;

        $r12[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r11, $r12);

        $r13 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r13.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(13);

        $r14 = new org.apache.flink.api.common.operators.util.FieldList;

        $r15 = newarray (int)[3];

        $r15[0] = 17;

        $r15[1] = 31;

        $r15[2] = 42;

        specialinvoke $r14.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>($r15);

        $r16 = virtualinvoke $r13.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r14);

        $r17 = newarray (int)[4];

        $r17[0] = 13;

        $r17[1] = 17;

        $r17[2] = 31;

        $r17[3] = 42;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r16, $r17);

        $r18 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r18.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(14);

        $r19 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r19.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(17);

        $r20 = virtualinvoke $r18.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r19);

        $r21 = newarray (int)[2];

        $r21[0] = 14;

        $r21[1] = 17;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r20, $r21);

        $r22 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r22.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(3);

        $r23 = newarray (int)[4];

        $r23[0] = 2;

        $r23[1] = 8;

        $r23[2] = 5;

        $r23[3] = 7;

        $r24 = virtualinvoke $r22.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(int[])>($r23);

        $r25 = newarray (int)[5];

        $r25[0] = 3;

        $r25[1] = 2;

        $r25[2] = 8;

        $r25[3] = 5;

        $r25[4] = 7;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r24, $r25);

        return;
    }

    public void testImmutability()
    {
        org.apache.flink.api.common.operators.util.FieldListTest r0;
        org.apache.flink.api.common.operators.util.FieldList $r5, $r6, $r7, $r9, $r11;
        java.lang.Integer $r8, $r15;
        int[] $r10, $r17;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldListTest;

        $r5 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r6 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int)>(5);

        $r7 = new org.apache.flink.api.common.operators.util.FieldList;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        specialinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: void <init>(java.lang.Integer)>($r8);

        $r9 = new org.apache.flink.api.common.operators.util.FieldList;

        $r10 = newarray (int)[4];

        $r10[0] = 5;

        $r10[1] = 4;

        $r10[2] = 7;

        $r10[3] = 6;

        specialinvoke $r9.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>($r10);

        $r11 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r6);

        virtualinvoke $r11.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r7);

        virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r9);

        virtualinvoke $r9.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r5);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14);

        virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>($r15);

        $r17 = newarray (int)[4];

        $r17[0] = 78;

        $r17[1] = 13;

        $r17[2] = 66;

        $r17[3] = 3;

        virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(int[])>($r17);

        $i0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $i6 = virtualinvoke $r9.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l7);

        return;
    }

    public void testAddSetToList()
    {
        org.apache.flink.api.common.operators.util.FieldListTest r0;
        org.apache.flink.api.common.operators.util.FieldList $r1, $r4, $r6, $r8, $r10, $r13, $r15, $r18;
        org.apache.flink.api.common.operators.util.FieldSet $r2, $r11, $r16;
        java.lang.Integer $r3, $r12, $r17;
        int[] $r5, $r7, $r9, $r14, $r19;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldListTest;

        $r1 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r3);

        $r4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r2);

        $r5 = newarray (int)[1];

        $r5[0] = 2;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(int[])>($r5);

        $r7 = newarray (int)[2];

        $r7[0] = 1;

        $r7[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r6, $r7);

        $r8 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r8.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r9 = newarray (int)[1];

        $r9[0] = 1;

        $r10 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(int[])>($r9);

        $r11 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r11.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r12);

        $r13 = virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r11);

        $r14 = newarray (int)[2];

        $r14[0] = 1;

        $r14[1] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r13, $r14);

        $r15 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r15.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        $r16 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r16.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r17);

        $r18 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addFields(org.apache.flink.api.common.operators.util.FieldSet)>($r16);

        $r19 = newarray (int)[1];

        $r19[0] = 2;

        staticinvoke <org.apache.flink.api.common.operators.util.FieldListTest: void check(org.apache.flink.api.common.operators.util.FieldList,int[])>($r18, $r19);

        return;
    }

    private static transient void check(org.apache.flink.api.common.operators.util.FieldList, int[])
    {
        org.apache.flink.api.common.operators.util.FieldList r0;
        int[] r1, r6, r7;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8, i10, i11, i12;
        long $l2, $l4, $l9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        java.lang.Integer $r3, $r4;
        java.util.Iterator r8;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.FieldList;

        r1 := @parameter1: int[];

        if r1 != null goto label1;

        $i8 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        return;

     label1:
        $i1 = lengthof r1;

        $l2 = (long) $i1;

        $i3 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        i10 = lengthof r1;

        i11 = 0;

     label2:
        if i11 >= i10 goto label3;

        i0 = r1[i11];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: boolean contains(java.lang.Integer)>($r4);

        i11 = i11 + 1;

        goto label2;

     label3:
        r6 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int[] toArray()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r6, r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i5 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        r7 = newarray (int)[$i5];

        r8 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldList: java.util.Iterator iterator()>();

        i12 = 0;

     label4:
        $i6 = lengthof r7;

        if i12 >= $i6 goto label5;

        $r2 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Integer) $r2;

        $i7 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r7[i12] = $i7;

        i12 = i12 + 1;

        goto label4;

     label5:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r7, r1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }
}
