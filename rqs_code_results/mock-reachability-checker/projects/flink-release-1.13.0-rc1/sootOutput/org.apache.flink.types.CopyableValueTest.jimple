public class org.apache.flink.types.CopyableValueTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.CopyableValueTest r0;

        r0 := @this: org.apache.flink.types.CopyableValueTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCopy()
    {
        org.apache.flink.types.CopyableValueTest r0;
        int i0, i1;
        org.apache.flink.types.CopyableValue r3;
        org.apache.flink.types.CopyableValue[] $r4;
        org.apache.flink.types.BooleanValue $r5;
        org.apache.flink.types.ByteValue $r6;
        org.apache.flink.types.CharValue $r7;
        org.apache.flink.types.DoubleValue $r8;
        org.apache.flink.types.FloatValue $r9;
        org.apache.flink.types.IntValue $r10;
        org.apache.flink.types.LongValue $r11;
        org.apache.flink.types.NullValue $r12;
        org.apache.flink.types.ShortValue $r13;
        org.apache.flink.types.StringValue $r14;
        java.lang.Object $r15;

        r0 := @this: org.apache.flink.types.CopyableValueTest;

        $r4 = newarray (org.apache.flink.types.CopyableValue)[10];

        $r5 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r5.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(1);

        $r4[0] = $r5;

        $r6 = new org.apache.flink.types.ByteValue;

        specialinvoke $r6.<org.apache.flink.types.ByteValue: void <init>(byte)>(42);

        $r4[1] = $r6;

        $r7 = new org.apache.flink.types.CharValue;

        specialinvoke $r7.<org.apache.flink.types.CharValue: void <init>(char)>(113);

        $r4[2] = $r7;

        $r8 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r8.<org.apache.flink.types.DoubleValue: void <init>(double)>(3.141592653589793);

        $r4[3] = $r8;

        $r9 = new org.apache.flink.types.FloatValue;

        specialinvoke $r9.<org.apache.flink.types.FloatValue: void <init>(float)>(3.1415927F);

        $r4[4] = $r9;

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(42);

        $r4[5] = $r10;

        $r11 = new org.apache.flink.types.LongValue;

        specialinvoke $r11.<org.apache.flink.types.LongValue: void <init>(long)>(42L);

        $r4[6] = $r11;

        $r12 = new org.apache.flink.types.NullValue;

        specialinvoke $r12.<org.apache.flink.types.NullValue: void <init>()>();

        $r4[7] = $r12;

        $r13 = new org.apache.flink.types.ShortValue;

        specialinvoke $r13.<org.apache.flink.types.ShortValue: void <init>(short)>(42);

        $r4[8] = $r13;

        $r14 = new org.apache.flink.types.StringValue;

        specialinvoke $r14.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("QED");

        $r4[9] = $r14;

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = $r4[i1];

        $r15 = interfaceinvoke r3.<org.apache.flink.types.CopyableValue: java.lang.Object copy()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r15);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testCopyTo()
    {
        org.apache.flink.types.CopyableValueTest r0;
        org.apache.flink.types.BooleanValue $r21, $r22;
        org.apache.flink.types.ByteValue $r23, $r24;
        org.apache.flink.types.CharValue $r25, $r26;
        org.apache.flink.types.DoubleValue $r27, $r28;
        org.apache.flink.types.FloatValue $r29, $r30;
        org.apache.flink.types.IntValue $r31, $r32;
        org.apache.flink.types.LongValue $r33, $r34;
        org.apache.flink.types.NullValue $r35, $r36;
        org.apache.flink.types.ShortValue $r37, $r38;
        org.apache.flink.types.StringValue $r39, $r40;

        r0 := @this: org.apache.flink.types.CopyableValueTest;

        $r21 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r21.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(1);

        $r22 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r22.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(0);

        virtualinvoke $r21.<org.apache.flink.types.BooleanValue: void copyTo(org.apache.flink.types.BooleanValue)>($r22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = new org.apache.flink.types.ByteValue;

        specialinvoke $r23.<org.apache.flink.types.ByteValue: void <init>(byte)>(3);

        $r24 = new org.apache.flink.types.ByteValue;

        specialinvoke $r24.<org.apache.flink.types.ByteValue: void <init>(byte)>(7);

        virtualinvoke $r23.<org.apache.flink.types.ByteValue: void copyTo(org.apache.flink.types.ByteValue)>($r24);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = new org.apache.flink.types.CharValue;

        specialinvoke $r25.<org.apache.flink.types.CharValue: void <init>(char)>(945);

        $r26 = new org.apache.flink.types.CharValue;

        specialinvoke $r26.<org.apache.flink.types.CharValue: void <init>(char)>(969);

        virtualinvoke $r25.<org.apache.flink.types.CharValue: void copyTo(org.apache.flink.types.CharValue)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r27.<org.apache.flink.types.DoubleValue: void <init>(double)>(2.718281828459045);

        $r28 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r28.<org.apache.flink.types.DoubleValue: void <init>(double)>(0.0);

        virtualinvoke $r27.<org.apache.flink.types.DoubleValue: void copyTo(org.apache.flink.types.DoubleValue)>($r28);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = new org.apache.flink.types.FloatValue;

        specialinvoke $r29.<org.apache.flink.types.FloatValue: void <init>(float)>(2.7182817F);

        $r30 = new org.apache.flink.types.FloatValue;

        specialinvoke $r30.<org.apache.flink.types.FloatValue: void <init>(float)>(1.4142135F);

        virtualinvoke $r29.<org.apache.flink.types.FloatValue: void copyTo(org.apache.flink.types.FloatValue)>($r30);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = new org.apache.flink.types.IntValue;

        specialinvoke $r31.<org.apache.flink.types.IntValue: void <init>(int)>(8191);

        $r32 = new org.apache.flink.types.IntValue;

        specialinvoke $r32.<org.apache.flink.types.IntValue: void <init>(int)>(131071);

        virtualinvoke $r31.<org.apache.flink.types.IntValue: void copyTo(org.apache.flink.types.IntValue)>($r32);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = new org.apache.flink.types.LongValue;

        specialinvoke $r33.<org.apache.flink.types.LongValue: void <init>(long)>(524287L);

        $r34 = new org.apache.flink.types.LongValue;

        specialinvoke $r34.<org.apache.flink.types.LongValue: void <init>(long)>(2147483647L);

        virtualinvoke $r33.<org.apache.flink.types.LongValue: void copyTo(org.apache.flink.types.LongValue)>($r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = new org.apache.flink.types.NullValue;

        specialinvoke $r35.<org.apache.flink.types.NullValue: void <init>()>();

        $r36 = new org.apache.flink.types.NullValue;

        specialinvoke $r36.<org.apache.flink.types.NullValue: void <init>()>();

        virtualinvoke $r35.<org.apache.flink.types.NullValue: void copyTo(org.apache.flink.types.NullValue)>($r36);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = new org.apache.flink.types.ShortValue;

        specialinvoke $r37.<org.apache.flink.types.ShortValue: void <init>(short)>(31);

        $r38 = new org.apache.flink.types.ShortValue;

        specialinvoke $r38.<org.apache.flink.types.ShortValue: void <init>(short)>(127);

        virtualinvoke $r37.<org.apache.flink.types.ShortValue: void copyTo(org.apache.flink.types.ShortValue)>($r38);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        $r39 = new org.apache.flink.types.StringValue;

        specialinvoke $r39.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("2305843009213693951");

        $r40 = new org.apache.flink.types.StringValue;

        specialinvoke $r40.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("618970019642690137449562111");

        virtualinvoke $r39.<org.apache.flink.types.StringValue: void copyTo(org.apache.flink.types.StringValue)>($r40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        return;
    }
}
