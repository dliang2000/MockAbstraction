public class org.apache.flink.api.connector.source.mocks.MockSourceSplit extends java.lang.Object implements org.apache.flink.api.connector.source.SourceSplit, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int id;
    private final java.util.concurrent.BlockingQueue records;
    private final int endIndex;
    private int index;

    public void <init>(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: void <init>(int,int)>(i0, 0);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int i0, i1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: void <init>(int,int,int)>(i0, i1, 2147483647);

        return;
    }

    public void <init>(int, int, int)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int i0, i1, i2;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id> = i0;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex> = i2;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index> = i1;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records> = $r1;

        return;
    }

    public java.lang.String splitId()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public int index()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int $i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        return $i0;
    }

    public int endIndex()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int $i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        return $i0;
    }

    public boolean isAvailable()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        boolean $z0, $z1, $z2;
        java.util.concurrent.BlockingQueue $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $z0 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: boolean isFinished()>();

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $z1 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFinished()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $i1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int[] getNext(boolean) throws java.lang.InterruptedException
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        boolean z0;
        java.util.concurrent.BlockingQueue $r2, $r4;
        java.lang.Object $r3, $r5;
        int $i0, $i1, $i2;
        java.lang.Integer $r6;
        int[] $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        $r6 = (java.lang.Integer) $r5;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        $r6 = (java.lang.Integer) $r3;

     label2:
        if $r6 != null goto label3;

        $r7 = null;

        goto label4;

     label3:
        $r7 = newarray (int)[2];

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7[0] = $i0;

        $i1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index> = $i2;

        $r7[1] = $i1;

     label4:
        return $r7;
    }

    public void addRecord(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        int i0;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Integer $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to add record to split.");

        throw $r3;

     label1:
        return;
    }

    public int hashCode()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        java.lang.Object[] $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Integer $r2, $r6, $r7, $r8;
        java.lang.Integer[] $r3;
        java.util.concurrent.BlockingQueue $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r3 = newarray (java.lang.Integer)[0];

        $r5 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r6;

        $i2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r7;

        $i3 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[3] = $r8;

        $i4 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Integer[] $r3, $r6;
        java.util.concurrent.BlockingQueue $r4, $r7;
        java.lang.Object[] $r5, $r8;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) r1;

        $i1 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id>;

        $i0 = r2.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id>;

        if $i1 != $i0 goto label2;

        $i3 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        $i2 = r2.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        if $i3 != $i2 goto label2;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r3 = newarray (java.lang.Integer)[0];

        $r5 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r7 = r2.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $r6 = newarray (java.lang.Integer)[0];

        $r8 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r5, $r8);

        if $z1 == 0 goto label2;

        $i5 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        $i4 = r2.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        if $i5 != $i4 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r2, $r4, $r5, $r6;
        java.util.concurrent.BlockingQueue $r3;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int id>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: java.util.concurrent.BlockingQueue records>;

        $i1 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r4;

        $i2 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int endIndex>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r5;

        $i3 = r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplit: int index>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[3] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("MockSourceSplit(id=%d, num_records=%d, endIndex=%d, currentIndex=%d)", $r1);

        return $r7;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.connector.source.mocks.MockSourceSplit: long serialVersionUID> = 1L;

        return;
    }
}
