public class org.apache.flink.util.TimeUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.TimeUtilsTest r0;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testParseDurationNanos()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562ns");

        $i0 = virtualinvoke $r1.<java.time.Duration: int getNano()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l1);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562nano");

        $i2 = virtualinvoke $r2.<java.time.Duration: int getNano()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l3);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562nanos");

        $i4 = virtualinvoke $r3.<java.time.Duration: int getNano()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l5);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562nanosecond");

        $i6 = virtualinvoke $r4.<java.time.Duration: int getNano()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l7);

        $r5 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562nanoseconds");

        $i8 = virtualinvoke $r5.<java.time.Duration: int getNano()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l9);

        $r6 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("424562 ns");

        $i10 = virtualinvoke $r6.<java.time.Duration: int getNano()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(424562L, $l11);

        return;
    }

    public void testParseDurationMicros()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731\u00b5s");

        $i0 = virtualinvoke $r1.<java.time.Duration: int getNano()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l1);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731micro");

        $i2 = virtualinvoke $r2.<java.time.Duration: int getNano()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l3);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731micros");

        $i4 = virtualinvoke $r3.<java.time.Duration: int getNano()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l5);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731microsecond");

        $i6 = virtualinvoke $r4.<java.time.Duration: int getNano()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l7);

        $r5 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731microseconds");

        $i8 = virtualinvoke $r5.<java.time.Duration: int getNano()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l9);

        $r6 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("565731 \u00b5s");

        $i10 = virtualinvoke $r6.<java.time.Duration: int getNano()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(565731000L, $l11);

        return;
    }

    public void testParseDurationMillis()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234ms");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234milli");

        $l2 = virtualinvoke $r3.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234millis");

        $l3 = virtualinvoke $r4.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l3);

        $r5 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234millisecond");

        $l4 = virtualinvoke $r5.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l4);

        $r6 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234milliseconds");

        $l5 = virtualinvoke $r6.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l5);

        $r7 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1234 ms");

        $l6 = virtualinvoke $r7.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l6);

        return;
    }

    public void testParseDurationSeconds()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4, $r5, $r6;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766s");

        $l0 = virtualinvoke $r1.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766sec");

        $l1 = virtualinvoke $r2.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766secs");

        $l2 = virtualinvoke $r3.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766second");

        $l3 = virtualinvoke $r4.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l3);

        $r5 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766seconds");

        $l4 = virtualinvoke $r5.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l4);

        $r6 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("667766 s");

        $l5 = virtualinvoke $r6.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(667766L, $l5);

        return;
    }

    public void testParseDurationMinutes()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("7657623min");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toMinutes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("7657623minute");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toMinutes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("7657623minutes");

        $l2 = virtualinvoke $r3.<java.time.Duration: long toMinutes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("7657623 min");

        $l3 = virtualinvoke $r4.<java.time.Duration: long toMinutes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7657623L, $l3);

        return;
    }

    public void testParseDurationHours()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654h");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toHours()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654hour");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toHours()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654hours");

        $l2 = virtualinvoke $r3.<java.time.Duration: long toHours()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654 h");

        $l3 = virtualinvoke $r4.<java.time.Duration: long toHours()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l3);

        return;
    }

    public void testParseDurationDays()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4;
        long $l0, $l1, $l2, $l3;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654d");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toDays()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654day");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toDays()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654days");

        $l2 = virtualinvoke $r3.<java.time.Duration: long toDays()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("987654 d");

        $l3 = virtualinvoke $r4.<java.time.Duration: long toDays()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(987654L, $l3);

        return;
    }

    public void testParseDurationUpperCase()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 NS");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toNanos()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 MICRO");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toNanos()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1000L, $l1);

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 MS");

        $l2 = virtualinvoke $r3.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l2);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 S");

        $l3 = virtualinvoke $r4.<java.time.Duration: long getSeconds()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r5 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 MIN");

        $l4 = virtualinvoke $r5.<java.time.Duration: long toMinutes()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l4);

        $r6 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 H");

        $l5 = virtualinvoke $r6.<java.time.Duration: long toHours()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r7 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("1 D");

        $l6 = virtualinvoke $r7.<java.time.Duration: long toDays()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l6);

        return;
    }

    public void testParseDurationTrim()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r2;
        long $l0, $l1;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("      155      ");

        $l0 = virtualinvoke $r1.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l0);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("      155      ms   ");

        $l1 = virtualinvoke $r2.<java.time.Duration: long toMillis()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(155L, $l1);

        return;
    }

    public void testParseDurationInvalid()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.lang.IllegalArgumentException $r8, $r9, $r10, $r11, $r12, $r14;
        java.lang.NullPointerException $r13;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

     label01:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label02:
        goto label04;

     label03:
        $r13 := @caughtexception;

     label04:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

     label07:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("     ");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

     label10:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("foobar or fubar or foo bazz");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

     label13:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("16 gjah");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label14:
        goto label16;

     label15:
        $r9 := @caughtexception;

     label16:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("16 16 17 18 ms");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label17:
        goto label19;

     label18:
        $r11 := @caughtexception;

     label19:
        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("-100 ms");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label20:
        goto label22;

     label21:
        $r10 := @caughtexception;

     label22:
        return;

        catch java.lang.NullPointerException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label16 to label17 with label18;
        catch java.lang.IllegalArgumentException from label19 to label20 with label21;
    }

    public void testParseDurationNumberOverflow()
    {
        org.apache.flink.util.TimeUtilsTest r0;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration parseDuration(java.lang.String)>("100000000000000000000000000000000 ms");

        return;
    }

    public void testGetStringInMillis()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        java.time.Duration $r1, $r3, $r6;
        java.lang.String $r2, $r4, $r7;
        java.time.temporal.ChronoUnit $r5;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r1 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(4567L);

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.lang.String getStringInMillis(java.time.Duration)>($r1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("4567ms", $r2);

        $r3 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(4567L);

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils: java.lang.String getStringInMillis(java.time.Duration)>($r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("4567000ms", $r4);

        $r5 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MICROS>;

        $r6 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(4567L, $r5);

        $r7 = staticinvoke <org.apache.flink.util.TimeUtils: java.lang.String getStringInMillis(java.time.Duration)>($r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("4ms", $r7);

        return;
    }

    public void testToDuration()
    {
        org.apache.flink.util.TimeUtilsTest r0;
        org.apache.flink.api.common.time.Time r1;
        java.time.Duration r2;
        java.util.concurrent.TimeUnit $r3, $r5;
        long $l0, $l1, $l2;
        java.lang.Long $r4, $r6;
        org.hamcrest.Matcher $r7, $r8;

        r0 := @this: org.apache.flink.util.TimeUtilsTest;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MICROSECONDS>;

        r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(1337L, $r3);

        r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.Duration toDuration(org.apache.flink.api.common.time.Time)>(r1);

        $l0 = virtualinvoke r2.<java.time.Duration: long toNanos()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.time.Time: java.util.concurrent.TimeUnit getUnit()>();

        $l1 = virtualinvoke r1.<org.apache.flink.api.common.time.Time: long getSize()>();

        $l2 = virtualinvoke $r5.<java.util.concurrent.TimeUnit: long toNanos(long)>($l1);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r8);

        return;
    }
}
