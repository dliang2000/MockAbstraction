public class org.apache.flink.configuration.GlobalConfigurationTest extends org.apache.flink.util.TestLogger
{
    public org.junit.rules.TemporaryFolder tempFolder;

    public void <init>()
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.configuration.GlobalConfigurationTest: org.junit.rules.TemporaryFolder tempFolder> = $r1;

        return;
    }

    public void testConfigurationYAML()
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        java.io.File r1, $r7;
        org.junit.rules.TemporaryFolder $r6;
        java.io.PrintWriter $r8;
        java.lang.String $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        java.util.Set $r10;
        int $i0;
        long $l1;
        java.lang.Throwable $r20, $r22, $r24, $r25, r27;
        java.io.FileNotFoundException $r23;
        org.apache.flink.configuration.Configuration r31;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $r6 = r0.<org.apache.flink.configuration.GlobalConfigurationTest: org.junit.rules.TemporaryFolder tempFolder>;

        r1 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "flink-conf.yaml");

     label01:
        $r8 = new java.io.PrintWriter;

        specialinvoke $r8.<java.io.PrintWriter: void <init>(java.io.File)>($r7);

        r27 = null;

     label02:
        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("###########################");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("# Some : comments : to skip");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("###########################");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey1: myvalue1");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey2       : myvalue2");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey3:myvalue3");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>(" some nonsense without colon and whitespace separator");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>(" :  ");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("   ");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey4: myvalue4# some comments");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("   mykey5    :    myvalue5    ");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey6: my: value6");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey7: ");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>(": myvalue8");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey9: myvalue9");

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>("mykey9: myvalue10");

     label03:
        if $r8 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r8.<java.io.PrintWriter: void close()>();

        goto label13;

     label05:
        $r20 := @caughtexception;

        r27 = $r20;

        throw $r20;

     label06:
        $r25 := @caughtexception;

     label07:
        if $r8 == null goto label12;

        if r27 == null goto label11;

     label08:
        virtualinvoke $r8.<java.io.PrintWriter: void close()>();

     label09:
        goto label12;

     label10:
        $r24 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

        goto label12;

     label11:
        virtualinvoke $r8.<java.io.PrintWriter: void close()>();

     label12:
        throw $r25;

     label13:
        goto label15;

     label14:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.io.FileNotFoundException: void printStackTrace()>();

     label15:
        $r9 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r31 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r9);

        $r10 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r10.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l1);

        $r11 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey1", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue1", $r11);

        $r12 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey2", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue2", $r12);

        $r13 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey3", "null");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $r13);

        $r14 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey4", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue4", $r14);

        $r15 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey5", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue5", $r15);

        $r16 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey6", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my: value6", $r16);

        $r17 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey7", "null");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $r17);

        $r18 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey8", "null");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("null", $r18);

        $r19 = virtualinvoke r31.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("mykey9", null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myvalue10", $r19);

     label16:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean delete()>();

        goto label19;

     label17:
        $r22 := @caughtexception;

     label18:
        virtualinvoke $r7.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean delete()>();

        throw $r22;

     label19:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.io.FileNotFoundException from label01 to label13 with label14;
        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void testFailIfNull()
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $r1 = (java.lang.String) null;

        staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r1);

        return;
    }

    public void testFailIfNotLoaded()
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.util.UUID $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/some/path/");

        $r3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r5);

        return;
    }

    public void testInvalidConfiguration() throws java.io.IOException
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        org.junit.rules.TemporaryFolder $r1;
        java.io.File $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $r1 = r0.<org.apache.flink.configuration.GlobalConfigurationTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r2 = virtualinvoke $r1.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r3);

        return;
    }

    public void testInvalidYamlFile() throws java.io.IOException
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        java.io.File r1, $r16;
        org.junit.rules.TemporaryFolder $r5, $r15;
        java.io.PrintWriter $r6;
        java.lang.Throwable $r8, $r10, $r11, r12;
        java.lang.String $r17;
        org.apache.flink.configuration.Configuration $r18;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $r5 = r0.<org.apache.flink.configuration.GlobalConfigurationTest: org.junit.rules.TemporaryFolder tempFolder>;

        r1 = virtualinvoke $r5.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("flink-conf.yaml");

        $r6 = new java.io.PrintWriter;

        specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.File)>(r1);

        r12 = null;

     label01:
        virtualinvoke $r6.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("invalid");

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<java.io.PrintWriter: void close()>();

        goto label12;

     label04:
        $r10 := @caughtexception;

        r12 = $r10;

        throw $r10;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke $r6.<java.io.PrintWriter: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke $r6.<java.io.PrintWriter: void close()>();

     label11:
        throw $r11;

     label12:
        $r15 = r0.<org.apache.flink.configuration.GlobalConfigurationTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r16 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String getAbsolutePath()>();

        $r18 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration(java.lang.String)>($r17);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r18);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void testHiddenKey()
    {
        org.apache.flink.configuration.GlobalConfigurationTest r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.flink.configuration.GlobalConfigurationTest;

        $z0 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("password123");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("123pasSword");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("PasSword");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("Secret");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $z4 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("fs.azure.account.key.storageaccount123456.core.windows.net");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("Hello");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $z6 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: boolean isSensitive(java.lang.String)>("metrics.reporter.dghttp.apikey");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        return;
    }
}
