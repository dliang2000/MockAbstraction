public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private static final org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer;
    private final org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility;
    private final org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers;

    void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility> = $r2;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers> = r1;

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility> = r1;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers> = r2;

        return;
    }

    public org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility getMockOuterSchemaCompatibility()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility>;

        return $r1;
    }

    org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)>(r0);

        return $r1;
    }

    public java.lang.String deserialize(java.lang.String, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.String r1, $r4;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.StringSerializer: java.lang.String deserialize(java.lang.String,org.apache.flink.core.memory.DataInputView)>(r1, r2);

        return $r4;
    }

    public java.lang.String deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.StringSerializer: java.lang.String deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r3;
    }

    public void serialize(java.lang.String, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.String r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.StringSerializer: void serialize(java.lang.String,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        return;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.StringSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        return;
    }

    public java.lang.String copy(java.lang.String)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.String r1, $r3;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.StringSerializer: java.lang.String copy(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String copy(java.lang.String, java.lang.String)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.String r1, r2, $r4;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.base.StringSerializer: java.lang.String copy(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public java.lang.String createInstance()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.base.StringSerializer: java.lang.String createInstance()>();

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        return r0;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        return 0;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers>;

        $r2 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] nestedSerializers>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.String) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: java.lang.String deserialize(java.lang.String,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: java.lang.String deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: void serialize(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: java.lang.String copy(java.lang.String,java.lang.String)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: java.lang.String copy(java.lang.String)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: java.lang.String createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.StringSerializer $r0;

        <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: long serialVersionUID> = -545688468997398105L;

        $r0 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer delegateSerializer> = $r0;

        return;
    }
}
