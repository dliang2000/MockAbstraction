public class org.apache.flink.testutils.serialization.types.ByteSubArrayType extends java.lang.Object implements org.apache.flink.testutils.serialization.types.SerializationTestType
{
    private static final int MAX_LEN;
    private final byte[] data;
    private int len;

    public void <init>()
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[512];

        r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data> = $r1;

        r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len> = 0;

        return;
    }

    public org.apache.flink.testutils.serialization.types.ByteSubArrayType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0, $r4;
        java.util.Random r1;
        int i0, $i1, $i2, i4;
        byte[] r3;
        byte $b3;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        r1 := @parameter0: java.util.Random;

        $i1 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(512);

        i0 = $i1 + 1;

        $r4 = new org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        specialinvoke $r4.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: void <init>()>();

        $r4.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len> = i0;

        r3 = $r4.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(256);

        $b3 = (byte) $i2;

        r3[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r4;
    }

    public int length()
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0;
        int $i0, $i1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        $i0 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        $i1 = $i0 + 4;

        return $i1;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $i0 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r2 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        $i1 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r2, 0, $i1);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i0, $i1;
        byte[] $r2;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len> = $i0;

        $r2 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        $i1 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[],int,int)>($r2, 0, $i1);

        return;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0;
        byte[] r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        $i0 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        $i1 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        $i2 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(r1);

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0, r2;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1, $i2, i5;
        byte[] $r3, $r4;
        byte $b3, $b4;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        if $z0 == 0 goto label5;

        r2 = (org.apache.flink.testutils.serialization.types.ByteSubArrayType) r1;

        $i1 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        $i0 = r2.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        if $i1 != $i0 goto label4;

        i5 = 0;

     label1:
        $i2 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: int len>;

        if i5 >= $i2 goto label3;

        $r3 = r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        $b4 = $r3[i5];

        $r4 = r2.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: byte[] data>;

        $b3 = $r4[i5];

        if $b4 == $b3 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 0;
    }

    public volatile org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ByteSubArrayType r0, $r2;
        java.util.Random r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ByteSubArrayType;

        r1 := @parameter0: java.util.Random;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.ByteSubArrayType: org.apache.flink.testutils.serialization.types.ByteSubArrayType getRandom(java.util.Random)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.testutils.serialization.types.ByteSubArrayType: int MAX_LEN> = 512;

        return;
    }
}
