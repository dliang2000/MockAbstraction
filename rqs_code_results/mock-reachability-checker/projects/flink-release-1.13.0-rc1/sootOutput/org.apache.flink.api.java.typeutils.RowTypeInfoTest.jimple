public class org.apache.flink.api.java.typeutils.RowTypeInfoTest extends org.apache.flink.api.common.typeutils.TypeInformationTestBase
{
    private static org.apache.flink.api.common.typeinfo.TypeInformation[] typeList;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.java.typeutils.RowTypeInfo[] getTestData()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo[] $r1;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2, $r6, $r10, $r12;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r7, $r11, $r13;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5, $r8, $r9, $r14, $r15;
        java.lang.String[] $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r1 = newarray (org.apache.flink.api.java.typeutils.RowTypeInfo)[4];

        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r3[1] = $r5;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r1[0] = $r2;

        $r6 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r7[1] = $r9;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r1[1] = $r6;

        $r10 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r11 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r11);

        $r1[2] = $r10;

        $r12 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r13 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r13[0] = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r13[1] = $r15;

        $r16 = newarray (java.lang.String)[2];

        $r16[0] = "int";

        $r16[1] = "int2";

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r13, $r16);

        $r1[3] = $r12;

        return $r1;
    }

    public void testWrongNumberOfFieldNames()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r1;
        java.lang.String[] $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r1 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "int";

        $r2[1] = "string";

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r3, $r2);

        return;
    }

    public void testDuplicateCustomFieldNames()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r1;
        java.lang.String[] $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r1 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "int";

        $r2[1] = "string";

        $r2[2] = "string";

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r3, $r2);

        return;
    }

    public void testCustomFieldNames()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        java.lang.String[] $r4, $r6, $r8, $r9, $r20, $r21, $r22, $r23;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r5, $r18;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7, $r19;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r12, $r14, $r16;
        org.apache.flink.api.common.typeinfo.TypeInformation $r11, $r13, $r15, $r17;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "int";

        $r4[1] = "row";

        $r4[2] = "string";

        $r5 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r7 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = "int";

        $r6[1] = "row";

        $r6[2] = "string";

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r7, $r6);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "int";

        $r8[1] = "row";

        $r8[2] = "string";

        $r9 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] getFieldNames()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("string");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r15 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("row.0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        $r17 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("row.f1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r4[1] = "composite";

        $r18 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r19 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r19, $r4);

        $r20 = newarray (java.lang.String)[3];

        $r20[0] = "int";

        $r20[1] = "row";

        $r20[2] = "string";

        $r21 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] getFieldNames()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r20, $r21);

        $r22 = newarray (java.lang.String)[3];

        $r22[0] = "int";

        $r22[1] = "composite";

        $r22[2] = "string";

        $r23 = virtualinvoke $r18.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] getFieldNames()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r22, $r23);

        return;
    }

    public void testGetFlatFields()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r3;
        java.lang.String[] $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r5;
        java.util.ArrayList $r6;
        int $i0, $i2;
        long $l1, $l3;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r7, $r11, $r13, $r17, $r19, $r23;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r14, $r20;
        java.lang.String $r9, $r12, $r15, $r18, $r21, $r24;
        java.lang.Object $r10, $r16, $r22;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r3 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r5 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "int";

        $r4[1] = "row";

        $r4[2] = "string";

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r5, $r4);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.java.typeutils.RowTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("row.*", 0, $r6);

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r7 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, $r8);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        $r10 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r10;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r12);

        $r13 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        specialinvoke $r13.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(2, $r14);

        $r15 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        $r16 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(1);

        $r17 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r16;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r18);

        interfaceinvoke $r6.<java.util.List: void clear()>();

        virtualinvoke $r3.<org.apache.flink.api.java.typeutils.RowTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("string", 0, $r6);

        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r19 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(3, $r20);

        $r21 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        $r22 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r22;

        $r24 = virtualinvoke $r23.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r24);

        return;
    }

    public void testGetTypeAt()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;
        java.lang.String[] $r4, $r5;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r8, $r10;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7, $r9, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "f0";

        $r4[1] = "f1";

        $r4[2] = "f2";

        $r5 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: java.lang.String[] getFieldNames()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r4, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f2");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r9 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1.f0");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        $r11 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1.1");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testNestedRowTypeInfo()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1");

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Row(f0: Short, f1: BigDecimal)", $r5);

        $r6 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(java.lang.String)>("f1.f0");

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Short", $r7);

        return;
    }

    public void testSchemaEquals()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r5, $r10, $r15, $r20;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6, $r11, $r16, $r21;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r12, $r13, $r17, $r18, $r22, $r23;
        java.lang.String[] $r9, $r14, $r19, $r24;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r5 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "field1";

        $r9[1] = "field2";

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r6, $r9);

        $r10 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r11 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11[0] = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11[1] = $r13;

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "field1";

        $r14[1] = "field2";

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r11, $r14);

        $z0 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean schemaEquals(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r15 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r16 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r16[0] = $r17;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r16[1] = $r18;

        $r19 = newarray (java.lang.String)[2];

        $r19[0] = "otherField";

        $r19[1] = "field2";

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r16, $r19);

        $r20 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r21 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r22 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r21[0] = $r22;

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r21[1] = $r23;

        $r24 = newarray (java.lang.String)[2];

        $r24[0] = "field1";

        $r24[1] = "field2";

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[],java.lang.String[])>($r21, $r24);

        $z1 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean schemaEquals(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: boolean schemaEquals(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    protected volatile org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()
    {
        org.apache.flink.api.java.typeutils.RowTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfoTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.java.typeutils.RowTypeInfo[] getTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r0, $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r1, $r4, $r5, $r6;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;

        $r0 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r0[0] = $r1;

        $r2 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        $r3[1] = $r5;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r0[1] = $r2;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r0[2] = $r6;

        <org.apache.flink.api.java.typeutils.RowTypeInfoTest: org.apache.flink.api.common.typeinfo.TypeInformation[] typeList> = $r0;

        return;
    }
}
