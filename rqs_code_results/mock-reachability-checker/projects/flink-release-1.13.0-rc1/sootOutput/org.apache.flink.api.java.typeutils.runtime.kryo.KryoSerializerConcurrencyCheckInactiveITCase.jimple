public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testWithNoConcurrencyCheck() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase r0;
        org.slf4j.Logger $r2;
        boolean $z0, z1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest $r3;
        java.lang.AssertionError $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase: org.slf4j.Logger log>;

        $z0 = interfaceinvoke $r2.<org.slf4j.Logger: boolean isDebugEnabled()>();

        staticinvoke <org.junit.Assume: void assumeFalse(boolean)>($z0);

     label1:
        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testConcurrentUseOfSerializer()>();

        z1 = 0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        z1 = 1;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("testConcurrentUseOfSerializer() should have failed if concurrency checks are off by default", z1);

        return;

        catch java.lang.AssertionError from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        boolean $z0;

        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerDebugInitHelper: boolean INITIAL_SETTING>;

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerDebugInitHelper: boolean setToDebug> = $z0;

        return;
    }
}
