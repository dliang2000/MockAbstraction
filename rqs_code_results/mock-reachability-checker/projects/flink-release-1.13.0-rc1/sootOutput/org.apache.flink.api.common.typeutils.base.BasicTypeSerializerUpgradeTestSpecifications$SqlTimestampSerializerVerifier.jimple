public final class org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier r0;
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier;

        $r1 = <org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer INSTANCE>;

        return $r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier r0;
        java.sql.Timestamp $r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier;

        $r1 = new java.sql.Timestamp;

        specialinvoke $r1.<java.sql.Timestamp: void <init>(long)>(1580382960L);

        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r1);

        return $r2;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BasicTypeSerializerUpgradeTestSpecifications$SqlTimestampSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
