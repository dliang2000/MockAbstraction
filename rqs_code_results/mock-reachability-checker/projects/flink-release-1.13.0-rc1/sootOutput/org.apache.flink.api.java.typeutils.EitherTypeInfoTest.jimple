public class org.apache.flink.api.java.typeutils.EitherTypeInfoTest extends org.apache.flink.api.common.typeutils.TypeInformationTestBase
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.EitherTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EitherTypeInfoTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.java.typeutils.EitherTypeInfo[] getTestData()
    {
        org.apache.flink.api.java.typeutils.EitherTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.EitherTypeInfo[] $r1;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r2, $r5;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4, $r8;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7;
        org.apache.flink.api.common.typeinfo.TypeInformation $r9, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.EitherTypeInfoTest;

        $r1 = newarray (org.apache.flink.api.java.typeutils.EitherTypeInfo)[2];

        $r2 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r3);

        $r1[0] = $r2;

        $r5 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/lang/Double;");

        $r7[0] = $r9;

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/lang/String;");

        $r7[1] = $r10;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r6);

        $r1[1] = $r5;

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()
    {
        org.apache.flink.api.java.typeutils.EitherTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.EitherTypeInfo[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.EitherTypeInfoTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.EitherTypeInfoTest: org.apache.flink.api.java.typeutils.EitherTypeInfo[] getTestData()>();

        return $r1;
    }
}
