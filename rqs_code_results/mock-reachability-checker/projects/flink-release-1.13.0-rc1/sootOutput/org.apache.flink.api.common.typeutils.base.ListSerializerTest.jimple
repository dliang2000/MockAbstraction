public class org.apache.flink.api.common.typeutils.base.ListSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.ListSerializer $r1;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.ListSerializer;

        $r2 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ListSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>($r2);

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        return class "Ljava/util/List;";
    }

    protected java.util.List[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;
        java.util.List r2, r5;
        java.util.Random $r10;
        java.util.LinkedList $r11, $r14, $r18;
        java.util.ArrayList $r12, $r16, $r19;
        java.lang.Long $r13, $r15, $r17, $r22, $r23;
        int $i0, i3, i4, i5;
        java.util.List[] $r20, $r21;
        long $l1, $l2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        $r10 = new java.util.Random;

        specialinvoke $r10.<java.util.Random: void <init>(long)>(123654789L);

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(55L);

        r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r13);

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12345L);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(777888L);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        $r18 = new java.util.LinkedList;

        specialinvoke $r18.<java.util.LinkedList: void <init>()>();

        i3 = 0;

     label1:
        $i0 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(200);

        if i3 >= $i0 goto label2;

        $l2 = virtualinvoke $r10.<java.util.Random: long nextLong()>();

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r23);

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(200);

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>(int)>(i4);

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        $l1 = virtualinvoke $r10.<java.util.Random: long nextLong()>();

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r22);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r20 = newarray (java.util.List)[8];

        $r20[0] = r2;

        $r20[1] = $r11;

        $r20[2] = $r12;

        $r20[3] = r5;

        $r20[4] = $r14;

        $r20[5] = $r16;

        $r20[6] = $r18;

        $r20[7] = $r19;

        $r21 = (java.util.List[]) $r20;

        return $r21;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.ListSerializerTest r0;
        java.util.List[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ListSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ListSerializerTest: java.util.List[] getTestData()>();

        return $r1;
    }
}
