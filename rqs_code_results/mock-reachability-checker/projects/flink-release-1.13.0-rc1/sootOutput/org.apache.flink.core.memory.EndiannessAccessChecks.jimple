public class org.apache.flink.core.memory.EndiannessAccessChecks extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.memory.EndiannessAccessChecks r0;

        r0 := @this: org.apache.flink.core.memory.EndiannessAccessChecks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testOnHeapSegment()
    {
        org.apache.flink.core.memory.EndiannessAccessChecks r0;
        byte[] $r1;
        org.apache.flink.core.memory.MemorySegment $r2;

        r0 := @this: org.apache.flink.core.memory.EndiannessAccessChecks;

        $r1 = newarray (byte)[11111];

        $r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>($r1);

        specialinvoke r0.<org.apache.flink.core.memory.EndiannessAccessChecks: void testBigAndLittleEndianAccessUnaligned(org.apache.flink.core.memory.MemorySegment)>($r2);

        return;
    }

    public void testOffHeapSegment()
    {
        org.apache.flink.core.memory.EndiannessAccessChecks r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.EndiannessAccessChecks;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>(11111);

        specialinvoke r0.<org.apache.flink.core.memory.EndiannessAccessChecks: void testBigAndLittleEndianAccessUnaligned(org.apache.flink.core.memory.MemorySegment)>($r1);

        return;
    }

    public void testOffHeapUnsafeSegment()
    {
        org.apache.flink.core.memory.EndiannessAccessChecks r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.EndiannessAccessChecks;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int)>(11111);

        specialinvoke r0.<org.apache.flink.core.memory.EndiannessAccessChecks: void testBigAndLittleEndianAccessUnaligned(org.apache.flink.core.memory.MemorySegment)>($r1);

        return;
    }

    private void testBigAndLittleEndianAccessUnaligned(org.apache.flink.core.memory.MemorySegment)
    {
        org.apache.flink.core.memory.EndiannessAccessChecks r0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.util.Random $r3;
        int $i0, $i1, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i21, $i22, $i23, $i30, $i31, $i33, $i36, $i38, $i39, i43, i45, i49, i50, i51, i52, i53, i55, i57, i61, i63, i67, i68, i70, i71;
        long $l2, $l3, $l4, $l5, $l15, $l17, $l18, $l20, $l24, $l26, $l27, $l29, $l32, $l34, $l35, $l37, $l40, $l41, l42, l44, l46, l47, l48, l54, l60, l66, l69;
        char $c16, $c19, c62, c64, c65;
        short $s25, $s28, s56, s58, s59;
        float f0, f1, f2, f3, f4;
        double d0, d1, d2, d3, d4;

        r0 := @this: org.apache.flink.core.memory.EndiannessAccessChecks;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>()>();

        l42 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l42);

        i43 = 0;

     label01:
        if i43 >= 10000 goto label02;

        l44 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        $i38 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i39 = $i38 - 7;

        i45 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i39);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLongLittleEndian(int,long)>(i45, l44);

        l46 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLongBigEndian(int)>(i45);

        $l40 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l46);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l44, $l40);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i45, l44);

        l47 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLongLittleEndian(int)>(i45);

        $l41 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l47);

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l44, $l41);

        i43 = i43 + 1;

        goto label01;

     label02:
        l48 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l48);

        i49 = 0;

     label03:
        if i49 >= 10000 goto label04;

        i50 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        $i30 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i31 = $i30 - 3;

        i51 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i31);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntLittleEndian(int,int)>(i51, i50);

        i52 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getIntBigEndian(int)>(i51);

        $l32 = (long) i50;

        $i33 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i52);

        $l34 = (long) $i33;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l32, $l34);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i51, i50);

        i53 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getIntLittleEndian(int)>(i51);

        $l35 = (long) i50;

        $i36 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i53);

        $l37 = (long) $i36;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l35, $l37);

        i49 = i49 + 1;

        goto label03;

     label04:
        l54 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l54);

        i55 = 0;

     label05:
        if i55 >= 10000 goto label06;

        $i21 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        s56 = (short) $i21;

        $i22 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i23 = $i22 - 1;

        i57 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i23);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShortLittleEndian(int,short)>(i57, s56);

        s58 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShortBigEndian(int)>(i57);

        $l24 = (long) s56;

        $s25 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s58);

        $l26 = (long) $s25;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l24, $l26);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShortBigEndian(int,short)>(i57, s56);

        s59 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShortLittleEndian(int)>(i57);

        $l27 = (long) s56;

        $s28 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s59);

        $l29 = (long) $s28;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l27, $l29);

        i55 = i55 + 1;

        goto label05;

     label06:
        l60 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l60);

        i61 = 0;

     label07:
        if i61 >= 10000 goto label08;

        $i12 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        c62 = (char) $i12;

        $i13 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i14 = $i13 - 1;

        i63 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i14);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putCharLittleEndian(int,char)>(i63, c62);

        c64 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getCharBigEndian(int)>(i63);

        $l15 = (long) c62;

        $c16 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c64);

        $l17 = (long) $c16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, $l17);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putCharBigEndian(int,char)>(i63, c62);

        c65 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getCharLittleEndian(int)>(i63);

        $l18 = (long) c62;

        $c19 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c65);

        $l20 = (long) $c19;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l18, $l20);

        i61 = i61 + 1;

        goto label07;

     label08:
        l66 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l66);

        i67 = 0;

     label09:
        if i67 >= 10000 goto label10;

        f0 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $i6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i7 = $i6 - 3;

        i68 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i7);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloatLittleEndian(int,float)>(i68, f0);

        f1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloatBigEndian(int)>(i68);

        $i8 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i9 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i8);

        f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i9);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(f0, f2, 0.0F);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloatBigEndian(int,float)>(i68, f0);

        f3 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloatLittleEndian(int)>(i68);

        $i10 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f3);

        $i11 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i10);

        f4 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i11);

        staticinvoke <org.junit.Assert: void assertEquals(float,float,float)>(f0, f4, 0.0F);

        i67 = i67 + 1;

        goto label09;

     label10:
        l69 = virtualinvoke $r3.<java.util.Random: long nextLong()>();

        virtualinvoke $r3.<java.util.Random: void setSeed(long)>(l69);

        i70 = 0;

     label11:
        if i70 >= 10000 goto label12;

        d0 = virtualinvoke $r3.<java.util.Random: double nextDouble()>();

        $i0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i1 = $i0 - 7;

        i71 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDoubleLittleEndian(int,double)>(i71, d0);

        d1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDoubleBigEndian(int)>(i71);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l3 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l2);

        d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, d2, 0.0);

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDoubleBigEndian(int,double)>(i71, d0);

        d3 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDoubleLittleEndian(int)>(i71);

        $l4 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d3);

        $l5 = staticinvoke <java.lang.Long: long reverseBytes(long)>($l4);

        d4 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l5);

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(d0, d4, 0.0);

        i70 = i70 + 1;

        goto label11;

     label12:
        return;
    }
}
