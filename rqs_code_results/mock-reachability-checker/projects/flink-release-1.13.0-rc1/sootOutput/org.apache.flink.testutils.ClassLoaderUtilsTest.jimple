public class org.apache.flink.testutils.ClassLoaderUtilsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.testutils.ClassLoaderUtilsTest r0;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtilsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testObjectFromNewClassLoaderObject() throws java.lang.Exception
    {
        org.apache.flink.testutils.ClassLoaderUtilsTest r0;
        java.util.function.Supplier $r1;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtilsTest;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest$createSerializableObjectFromNewClassLoader__165: java.util.function.Supplier bootstrap$()>();

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest: void testObjectFromNewClassLoaderObject(java.util.function.Supplier)>($r1);

        return;
    }

    public void testObjectFromNewClassLoaderClassLoaders() throws java.lang.Exception
    {
        org.apache.flink.testutils.ClassLoaderUtilsTest r0;
        java.util.function.Supplier $r1;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtilsTest;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest$createSerializableObjectFromNewClassLoader__166: java.util.function.Supplier bootstrap$()>();

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest: void testObjectFromNewClassLoaderClassLoaders(java.util.function.Supplier)>($r1);

        return;
    }

    public void testExceptionObjectFromNewClassLoaderObject() throws java.lang.Exception
    {
        org.apache.flink.testutils.ClassLoaderUtilsTest r0;
        java.util.function.Supplier $r1;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtilsTest;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest$createExceptionObjectFromNewClassLoader__167: java.util.function.Supplier bootstrap$()>();

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest: void testObjectFromNewClassLoaderObject(java.util.function.Supplier)>($r1);

        return;
    }

    public void testExceptionObjectFromNewClassLoaderClassLoaders() throws java.lang.Exception
    {
        org.apache.flink.testutils.ClassLoaderUtilsTest r0;
        java.util.function.Supplier $r1;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtilsTest;

        $r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest$createExceptionObjectFromNewClassLoader__168: java.util.function.Supplier bootstrap$()>();

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtilsTest: void testObjectFromNewClassLoaderClassLoaders(java.util.function.Supplier)>($r1);

        return;
    }

    private static void testObjectFromNewClassLoaderObject(java.util.function.Supplier)
    {
        java.util.function.Supplier r0;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader r1;
        java.lang.Object r2, $r4;
        java.lang.ClassLoader $r5, $r7;
        java.lang.Class $r6, $r8;
        java.lang.String $r9;
        java.lang.ClassNotFoundException $r11;

        r0 := @parameter0: java.util.function.Supplier;

        $r4 = interfaceinvoke r0.<java.util.function.Supplier: java.lang.Object get()>();

        r1 = (org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader) $r4;

        r2 = virtualinvoke r1.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.Object getObject()>();

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

     label1:
        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should not be able to load class from the system class loader");

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static void testObjectFromNewClassLoaderClassLoaders(java.util.function.Supplier)
    {
        java.util.function.Supplier r0;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader r1;
        java.lang.Object $r2;
        java.lang.ClassLoader $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.util.function.Supplier;

        $r2 = interfaceinvoke r0.<java.util.function.Supplier: java.lang.Object get()>();

        r1 = (org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader) $r2;

        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r4 = virtualinvoke r1.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r6 = virtualinvoke r1.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.ClassLoader getClassLoader()>();

        $r7 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r7);

        return;
    }
}
