public class org.apache.flink.api.java.typeutils.LambdaExtractionTest extends java.lang.Object
{
    private static final org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE;
    private static final org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_DOUBLE_TYPE;
    private static final org.apache.flink.api.common.functions.MapFunction STATIC_LAMBDA;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIdentifyLambdas() throws org.apache.flink.api.java.typeutils.TypeExtractionException
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r5, r6, r7, $r19;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$3 $r8;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$4 $r9;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$StaticMapper $r10;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$5 $r11;
        org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        $r8 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$3;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$3: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest)>(r0);

        $r9 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$4;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$4: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest)>(r0);

        $r10 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$StaticMapper;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$StaticMapper: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest$1)>(null);

        $r11 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$5;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$5: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest)>(r0);

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$parseInt__295: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$toString__297: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        r7 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$init__298: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>($r8);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r12);

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>($r9);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r13);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>($r10);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>($r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>(r5);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r16);

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>(r6);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>(r7);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r18);

        $r19 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.functions.MapFunction STATIC_LAMBDA>;

        $r20 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: org.apache.flink.api.java.typeutils.TypeExtractionUtils$LambdaExecutable checkAndExtractLambda(org.apache.flink.api.common.functions.Function)>($r19);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r20);

        return;
    }

    public void testLambdaWithMemberVariable()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$MyClass $r2;
        org.apache.flink.api.common.functions.MapFunction $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        $r2 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$MyClass;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$MyClass: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest$1)>(null);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$MyClass: org.apache.flink.api.common.functions.MapFunction getMapFunction()>();

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r5);

        return;
    }

    public void testLambdaWithLocalVariable()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaWithLocalVariable_efe8762_1__296: org.apache.flink.api.common.functions.MapFunction bootstrap$(java.lang.String,int)>("mystring", 26);

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>(r2, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r5);

        return;
    }

    public void testLambdaWithNonGenericResultType()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaWithNonGenericResultType_25093706_1__299: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r2);

        return;
    }

    public void testMapLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r5, $r7;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r4, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testMapLambda_25093706_1__300: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

     label1:
        return;
    }

    public void testFlatMapLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.FlatMapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r5, $r7;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r4, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testFlatMapLambda_8cd6315f_1__301: org.apache.flink.api.common.functions.FlatMapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

     label1:
        return;
    }

    public void testMapPartitionLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapPartitionFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r5, $r7;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r4, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testMapPartitionLambda_ec0de74e_1__302: org.apache.flink.api.common.functions.MapPartitionFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapPartitionReturnTypes(org.apache.flink.api.common.functions.MapPartitionFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

     label1:
        return;
    }

    public void testJoinLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.JoinFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r4, $r6, $r8;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5, $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testJoinLambda_83b32e92_1__303: org.apache.flink.api.common.functions.JoinFunction bootstrap$()>();

        $r4 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_DOUBLE_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r4, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r7 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

     label1:
        return;
    }

    public void testCoGroupLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.CoGroupFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r4, $r6, $r8;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5, $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testCoGroupLambda_3648110f_1__304: org.apache.flink.api.common.functions.CoGroupFunction bootstrap$()>();

        $r4 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_DOUBLE_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r4, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r7 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

     label1:
        return;
    }

    public void testKeySelectorLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.java.functions.KeySelector r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3, $r5, $r7;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r4, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testKeySelectorLambda_42235fa5_1__305: org.apache.flink.api.java.functions.KeySelector bootstrap$()>();

        $r3 = <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r3, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

     label1:
        return;
    }

    public void testLambdaTypeErasure()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r4;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$6 $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaTypeErasure_25093706_1__306: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$6;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$6: void <init>(org.apache.flink.api.java.typeutils.LambdaExtractionTest)>(r0);

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$6: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>(r1, $r4, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testLambdaWithoutTypeErasure()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.functions.MapFunction $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$of__307: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r2, $r3, null, 1);

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testPartitionerLambda()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r4, $r7;
        boolean $z0, $z1;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r3, $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testPartitionerLambda_ff548ad2_1__309: org.apache.flink.api.common.functions.Partitioner bootstrap$()>();

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner,java.lang.String,boolean)>(r1, null, 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

     label1:
        return;
    }

    public void testInstanceMethodRefSameType()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$getKey__310: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$MyType;");

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r2);

        return;
    }

    public void testInstanceMethodRefSuperType()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$toString__308: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r2);

        return;
    }

    public void testInstanceMethodRefSuperTypeProtected()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$getKey2__311: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$MySubtype;");

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r2);

        return;
    }

    public void testConstructorMethodRef()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$init__312: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>(r1, $r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r2);

        return;
    }

    public void testSamMethodExtractionInterfaceWithDefaultMethod()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;
        java.lang.reflect.Method r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$InterfaceWithDefaultMethod;");

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("samMethod", $r2);

        return;
    }

    public void getSingleAbstractMethodMultipleMethods()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$InterfaceWithMultipleMethods;");

        return;
    }

    public void testSingleAbstractMethodNoAbstractMethods()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$InterfaceWithoutAbstractMethod;");

        return;
    }

    public void testSingleAbstractMethodNotAnInterface()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.LambdaExtractionTest;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.reflect.Method getSingleAbstractMethod(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/LambdaExtractionTest$AbstractClassWithSingleAbstractMethod;");

        return;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r50, $r51, $r52, $r53, $r54, $r56, $r57, $r58, $r59, $r60, $r62, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r72, $r74, $r75, $r76, $r77, $r78, $r80, $r81, $r82, $r83, $r84, $r86, $r87, $r88, $r89, $r90, $r92, $r93, $r94, $r95, $r96, $r98, $r99, $r100, $r101, $r102, $r104, $r108, $r109, $r110, $r111, $r112, $r114, $r115, $r116, $r117, $r118;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z90, $z91, $z92, $z93, $z94, $z95, $z96, $z97, $z98, $z99, $z100, $z101, $z102, $z103, $z104, $z105, $z106, $z107, $z108, $z109, $z110;
        org.apache.flink.api.common.functions.MapPartitionFunction $r7;
        org.apache.flink.api.common.functions.Partitioner $r13;
        org.apache.flink.api.java.functions.KeySelector $r19;
        org.apache.flink.api.common.functions.MapFunction $r25, $r31, $r37, $r49, $r55, $r67, $r73, $r85, $r91, $r97, $r107, $r113, $r119;
        org.apache.flink.api.common.functions.CoGroupFunction $r43;
        org.apache.flink.api.common.functions.JoinFunction $r61;
        org.apache.flink.api.common.functions.FlatMapFunction $r79;
        java.lang.Object $r103, $r105;
        java.lang.Integer $r106;
        byte b18;
        java.lang.IllegalArgumentException $r120;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b18 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1948856189: goto label11;
            case -1776922004: goto label13;
            case -1378399789: goto label03;
            case -1249358039: goto label01;
            case -1162226646: goto label10;
            case -1121620993: goto label14;
            case -901961502: goto label16;
            case -749079927: goto label08;
            case -385779469: goto label09;
            case -75393495: goto label04;
            case 3543: goto label12;
            case 1187783740: goto label07;
            case 1262705592: goto label15;
            case 1818100338: goto label05;
            case 1949105294: goto label02;
            case 2022578178: goto label06;
            default: goto label17;
        };

     label01:
        $z107 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("getKey");

        if $z107 == 0 goto label17;

        b18 = 0;

        goto label17;

     label02:
        $z96 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testLambdaTypeErasure$25093706$1");

        if $z96 == 0 goto label17;

        b18 = 1;

        goto label17;

     label03:
        $z108 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testLambdaWithLocalVariable$efe8762$1");

        if $z108 == 0 goto label17;

        b18 = 2;

        goto label17;

     label04:
        $z101 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("getKey2");

        if $z101 == 0 goto label17;

        b18 = 3;

        goto label17;

     label05:
        $z97 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z97 == 0 goto label17;

        b18 = 4;

        goto label17;

     label06:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testFlatMapLambda$8cd6315f$1");

        if $z0 == 0 goto label17;

        b18 = 5;

        goto label17;

     label07:
        $z99 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("parseInt");

        if $z99 == 0 goto label17;

        b18 = 6;

        goto label17;

     label08:
        $z103 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testJoinLambda$83b32e92$1");

        if $z103 == 0 goto label17;

        b18 = 7;

        goto label17;

     label09:
        $z102 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testMapLambda$25093706$1");

        if $z102 == 0 goto label17;

        b18 = 8;

        goto label17;

     label10:
        $z106 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testLambdaWithNonGenericResultType$25093706$1");

        if $z106 == 0 goto label17;

        b18 = 9;

        goto label17;

     label11:
        $z110 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testCoGroupLambda$3648110f$1");

        if $z110 == 0 goto label17;

        b18 = 10;

        goto label17;

     label12:
        $z100 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("of");

        if $z100 == 0 goto label17;

        b18 = 11;

        goto label17;

     label13:
        $z109 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z109 == 0 goto label17;

        b18 = 12;

        goto label17;

     label14:
        $z105 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testKeySelectorLambda$42235fa5$1");

        if $z105 == 0 goto label17;

        b18 = 13;

        goto label17;

     label15:
        $z98 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testPartitionerLambda$ff548ad2$1");

        if $z98 == 0 goto label17;

        b18 = 14;

        goto label17;

     label16:
        $z104 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testMapPartitionLambda$ec0de74e$1");

        if $z104 == 0 goto label17;

        b18 = 15;

     label17:
        tableswitch(b18)
        {
            case 0: goto label18;
            case 1: goto label19;
            case 2: goto label20;
            case 3: goto label21;
            case 4: goto label22;
            case 5: goto label24;
            case 6: goto label25;
            case 7: goto label27;
            case 8: goto label28;
            case 9: goto label29;
            case 10: goto label30;
            case 11: goto label31;
            case 12: goto label32;
            case 13: goto label34;
            case 14: goto label35;
            case 15: goto label36;
            default: goto label37;
        };

     label18:
        $i17 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i17 != 5 goto label37;

        $r114 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z91 = virtualinvoke $r114.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z91 == 0 goto label37;

        $r115 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z92 = virtualinvoke $r115.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z92 == 0 goto label37;

        $r116 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z93 = virtualinvoke $r116.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z93 == 0 goto label37;

        $r117 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z94 = virtualinvoke $r117.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest$MyType");

        if $z94 == 0 goto label37;

        $r118 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z95 = virtualinvoke $r118.<java.lang.Object: boolean equals(java.lang.Object)>("()I");

        if $z95 == 0 goto label37;

        $r119 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$getKey__331: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r119;

     label19:
        $i16 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i16 != 6 goto label37;

        $r108 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z86 = virtualinvoke $r108.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z86 == 0 goto label37;

        $r109 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z87 = virtualinvoke $r109.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z87 == 0 goto label37;

        $r110 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z88 = virtualinvoke $r110.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z88 == 0 goto label37;

        $r111 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z89 = virtualinvoke $r111.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z89 == 0 goto label37;

        $r112 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z90 = virtualinvoke $r112.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple1;)Lorg/apache/flink/api/java/tuple/Tuple1;");

        if $z90 == 0 goto label37;

        $r113 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaTypeErasure_25093706_1__330: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r113;

     label20:
        $i14 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i14 != 6 goto label37;

        $r98 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z81 = virtualinvoke $r98.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z81 == 0 goto label37;

        $r99 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z82 = virtualinvoke $r99.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z82 == 0 goto label37;

        $r100 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z83 = virtualinvoke $r100.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z83 == 0 goto label37;

        $r101 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z84 = virtualinvoke $r101.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z84 == 0 goto label37;

        $r102 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z85 = virtualinvoke $r102.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/String;ILjava/lang/Integer;)Ljava/lang/String;");

        if $z85 == 0 goto label37;

        $r103 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.Object getCapturedArg(int)>(0);

        $r104 = (java.lang.String) $r103;

        $r105 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.Object getCapturedArg(int)>(1);

        $r106 = (java.lang.Integer) $r105;

        $i15 = virtualinvoke $r106.<java.lang.Integer: int intValue()>();

        $r107 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaWithLocalVariable_efe8762_1__329: org.apache.flink.api.common.functions.MapFunction bootstrap$(java.lang.String,int)>($r104, $i15);

        return $r107;

     label21:
        $i13 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i13 != 5 goto label37;

        $r92 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z76 = virtualinvoke $r92.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z76 == 0 goto label37;

        $r93 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z77 = virtualinvoke $r93.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z77 == 0 goto label37;

        $r94 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z78 = virtualinvoke $r94.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z78 == 0 goto label37;

        $r95 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z79 = virtualinvoke $r95.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest$MyType");

        if $z79 == 0 goto label37;

        $r96 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z80 = virtualinvoke $r96.<java.lang.Object: boolean equals(java.lang.Object)>("()I");

        if $z80 == 0 goto label37;

        $r97 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$getKey2__328: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r97;

     label22:
        $i12 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i12 != 8 goto label23;

        $r86 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z71 = virtualinvoke $r86.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z71 == 0 goto label23;

        $r87 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z72 = virtualinvoke $r87.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z72 == 0 goto label23;

        $r88 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z73 = virtualinvoke $r88.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z73 == 0 goto label23;

        $r89 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z74 = virtualinvoke $r89.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Integer");

        if $z74 == 0 goto label23;

        $r90 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z75 = virtualinvoke $r90.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/String;)V");

        if $z75 == 0 goto label23;

        $r91 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$init__327: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r91;

     label23:
        $i19 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i19 != 8 goto label37;

        $r80 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z66 = virtualinvoke $r80.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z66 == 0 goto label37;

        $r81 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z67 = virtualinvoke $r81.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z67 == 0 goto label37;

        $r82 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z68 = virtualinvoke $r82.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z68 == 0 goto label37;

        $r83 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z69 = virtualinvoke $r83.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Integer");

        if $z69 == 0 goto label37;

        $r84 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z70 = virtualinvoke $r84.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/String;)V");

        if $z70 == 0 goto label37;

        $r85 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$init__326: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r85;

     label24:
        $i11 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i11 != 6 goto label37;

        $r74 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z61 = virtualinvoke $r74.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/FlatMapFunction");

        if $z61 == 0 goto label37;

        $r75 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z62 = virtualinvoke $r75.<java.lang.Object: boolean equals(java.lang.Object)>("flatMap");

        if $z62 == 0 goto label37;

        $r76 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z63 = virtualinvoke $r76.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;Lorg/apache/flink/util/Collector;)V");

        if $z63 == 0 goto label37;

        $r77 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z64 = virtualinvoke $r77.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z64 == 0 goto label37;

        $r78 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z65 = virtualinvoke $r78.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;Lorg/apache/flink/util/Collector;)V");

        if $z65 == 0 goto label37;

        $r79 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testFlatMapLambda_8cd6315f_1__325: org.apache.flink.api.common.functions.FlatMapFunction bootstrap$()>();

        return $r79;

     label25:
        $i10 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i10 != 6 goto label26;

        $r68 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z56 = virtualinvoke $r68.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z56 == 0 goto label26;

        $r69 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z57 = virtualinvoke $r69.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z57 == 0 goto label26;

        $r70 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z58 = virtualinvoke $r70.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z58 == 0 goto label26;

        $r71 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z59 = virtualinvoke $r71.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Integer");

        if $z59 == 0 goto label26;

        $r72 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z60 = virtualinvoke $r72.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/String;)I");

        if $z60 == 0 goto label26;

        $r73 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$parseInt__324: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r73;

     label26:
        $i20 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i20 != 6 goto label37;

        $r62 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z51 = virtualinvoke $r62.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z51 == 0 goto label37;

        $r63 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z52 = virtualinvoke $r63.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z52 == 0 goto label37;

        $r64 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z53 = virtualinvoke $r64.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z53 == 0 goto label37;

        $r65 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z54 = virtualinvoke $r65.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Integer");

        if $z54 == 0 goto label37;

        $r66 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z55 = virtualinvoke $r66.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/String;)I");

        if $z55 == 0 goto label37;

        $r67 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$parseInt__323: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r67;

     label27:
        $i9 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i9 != 6 goto label37;

        $r56 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z46 = virtualinvoke $r56.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/JoinFunction");

        if $z46 == 0 goto label37;

        $r57 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z47 = virtualinvoke $r57.<java.lang.Object: boolean equals(java.lang.Object)>("join");

        if $z47 == 0 goto label37;

        $r58 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z48 = virtualinvoke $r58.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

        if $z48 == 0 goto label37;

        $r59 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z49 = virtualinvoke $r59.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z49 == 0 goto label37;

        $r60 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z50 = virtualinvoke $r60.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;Lorg/apache/flink/api/java/tuple/Tuple2;)Lorg/apache/flink/api/java/tuple/Tuple2;");

        if $z50 == 0 goto label37;

        $r61 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testJoinLambda_83b32e92_1__322: org.apache.flink.api.common.functions.JoinFunction bootstrap$()>();

        return $r61;

     label28:
        $i8 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i8 != 6 goto label37;

        $r50 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z41 = virtualinvoke $r50.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z41 == 0 goto label37;

        $r51 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z42 = virtualinvoke $r51.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z42 == 0 goto label37;

        $r52 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z43 = virtualinvoke $r52.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z43 == 0 goto label37;

        $r53 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z44 = virtualinvoke $r53.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z44 == 0 goto label37;

        $r54 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z45 = virtualinvoke $r54.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;)Lorg/apache/flink/api/java/tuple/Tuple2;");

        if $z45 == 0 goto label37;

        $r55 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testMapLambda_25093706_1__321: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r55;

     label29:
        $i7 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i7 != 6 goto label37;

        $r44 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z36 = virtualinvoke $r44.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z36 == 0 goto label37;

        $r45 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z37 = virtualinvoke $r45.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z37 == 0 goto label37;

        $r46 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z38 = virtualinvoke $r46.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z38 == 0 goto label37;

        $r47 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z39 = virtualinvoke $r47.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z39 == 0 goto label37;

        $r48 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z40 = virtualinvoke $r48.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;)Ljava/lang/Boolean;");

        if $z40 == 0 goto label37;

        $r49 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testLambdaWithNonGenericResultType_25093706_1__320: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r49;

     label30:
        $i6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i6 != 6 goto label37;

        $r38 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z31 = virtualinvoke $r38.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/CoGroupFunction");

        if $z31 == 0 goto label37;

        $r39 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z32 = virtualinvoke $r39.<java.lang.Object: boolean equals(java.lang.Object)>("coGroup");

        if $z32 == 0 goto label37;

        $r40 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z33 = virtualinvoke $r40.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Iterable;Ljava/lang/Iterable;Lorg/apache/flink/util/Collector;)V");

        if $z33 == 0 goto label37;

        $r41 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z34 = virtualinvoke $r41.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z34 == 0 goto label37;

        $r42 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z35 = virtualinvoke $r42.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Iterable;Ljava/lang/Iterable;Lorg/apache/flink/util/Collector;)V");

        if $z35 == 0 goto label37;

        $r43 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testCoGroupLambda_3648110f_1__319: org.apache.flink.api.common.functions.CoGroupFunction bootstrap$()>();

        return $r43;

     label31:
        $i5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i5 != 6 goto label37;

        $r32 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z26 = virtualinvoke $r32.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z26 == 0 goto label37;

        $r33 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z27 = virtualinvoke $r33.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z27 == 0 goto label37;

        $r34 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z28 = virtualinvoke $r34.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z28 == 0 goto label37;

        $r35 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z29 = virtualinvoke $r35.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/tuple/Tuple1");

        if $z29 == 0 goto label37;

        $r36 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z30 = virtualinvoke $r36.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Lorg/apache/flink/api/java/tuple/Tuple1;");

        if $z30 == 0 goto label37;

        $r37 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$of__318: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r37;

     label32:
        $i4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i4 != 5 goto label33;

        $r26 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z21 = virtualinvoke $r26.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z21 == 0 goto label33;

        $r27 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z22 = virtualinvoke $r27.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z22 == 0 goto label33;

        $r28 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z23 = virtualinvoke $r28.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z23 == 0 goto label33;

        $r29 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z24 = virtualinvoke $r29.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Object");

        if $z24 == 0 goto label33;

        $r30 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z25 = virtualinvoke $r30.<java.lang.Object: boolean equals(java.lang.Object)>("()Ljava/lang/String;");

        if $z25 == 0 goto label33;

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$toString__317: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r31;

     label33:
        $i21 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i21 != 5 goto label37;

        $r20 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z16 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z16 == 0 goto label37;

        $r21 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z17 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z17 == 0 goto label37;

        $r22 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z18 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z18 == 0 goto label37;

        $r23 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z19 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>("java/lang/Object");

        if $z19 == 0 goto label37;

        $r24 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z20 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>("()Ljava/lang/String;");

        if $z20 == 0 goto label37;

        $r25 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$toString__316: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r25;

     label34:
        $i3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i3 != 6 goto label37;

        $r14 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z11 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/functions/KeySelector");

        if $z11 == 0 goto label37;

        $r15 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z12 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>("getKey");

        if $z12 == 0 goto label37;

        $r16 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z13 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z13 == 0 goto label37;

        $r17 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z14 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z14 == 0 goto label37;

        $r18 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z15 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;)Lorg/apache/flink/api/java/tuple/Tuple2;");

        if $z15 == 0 goto label37;

        $r19 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testKeySelectorLambda_42235fa5_1__315: org.apache.flink.api.java.functions.KeySelector bootstrap$()>();

        return $r19;

     label35:
        $i2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i2 != 6 goto label37;

        $r8 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/Partitioner");

        if $z6 == 0 goto label37;

        $r9 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>("partition");

        if $z7 == 0 goto label37;

        $r10 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z8 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;I)I");

        if $z8 == 0 goto label37;

        $r11 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z9 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z9 == 0 goto label37;

        $r12 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z10 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/java/tuple/Tuple2;I)I");

        if $z10 == 0 goto label37;

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testPartitionerLambda_ff548ad2_1__314: org.apache.flink.api.common.functions.Partitioner bootstrap$()>();

        return $r13;

     label36:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label37;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapPartitionFunction");

        if $z1 == 0 goto label37;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("mapPartition");

        if $z2 == 0 goto label37;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Iterable;Lorg/apache/flink/util/Collector;)V");

        if $z3 == 0 goto label37;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/typeutils/LambdaExtractionTest");

        if $z4 == 0 goto label37;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Iterable;Lorg/apache/flink/util/Collector;)V");

        if $z5 == 0 goto label37;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$lambda_testMapPartitionLambda_ec0de74e_1__313: org.apache.flink.api.common.functions.MapPartitionFunction bootstrap$()>();

        return $r7;

     label37:
        $r120 = new java.lang.IllegalArgumentException;

        specialinvoke $r120.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r120;
    }

    public static int lambda$testPartitionerLambda$ff548ad2$1(org.apache.flink.api.java.tuple.Tuple2, int)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        int i0, $i1, $i2;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (java.lang.String) $r1;

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i2 = $i1 % i0;

        return $i2;
    }

    public static org.apache.flink.api.java.tuple.Tuple1 lambda$testLambdaTypeErasure$25093706$1(org.apache.flink.api.java.tuple.Tuple1) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple1 r0;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple1;

        return null;
    }

    public static org.apache.flink.api.java.tuple.Tuple2 lambda$testKeySelectorLambda$42235fa5$1(org.apache.flink.api.java.tuple.Tuple2) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        return null;
    }

    public static void lambda$testCoGroupLambda$3648110f$1(java.lang.Iterable, java.lang.Iterable, org.apache.flink.util.Collector) throws java.lang.Exception
    {
        java.lang.Iterable r0, r1;
        org.apache.flink.util.Collector r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.Iterable;

        r2 := @parameter2: org.apache.flink.util.Collector;

        return;
    }

    public static org.apache.flink.api.java.tuple.Tuple2 lambda$testJoinLambda$83b32e92$1(org.apache.flink.api.java.tuple.Tuple2, org.apache.flink.api.java.tuple.Tuple2) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple2 r0, r1;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        r1 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        return null;
    }

    public static void lambda$testMapPartitionLambda$ec0de74e$1(java.lang.Iterable, org.apache.flink.util.Collector) throws java.lang.Exception
    {
        java.lang.Iterable r0;
        org.apache.flink.util.Collector r1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: org.apache.flink.util.Collector;

        return;
    }

    public static void lambda$testFlatMapLambda$8cd6315f$1(org.apache.flink.api.java.tuple.Tuple2, org.apache.flink.util.Collector) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        org.apache.flink.util.Collector r1;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        r1 := @parameter1: org.apache.flink.util.Collector;

        interfaceinvoke r1.<org.apache.flink.util.Collector: void collect(java.lang.Object)>(null);

        return;
    }

    public static org.apache.flink.api.java.tuple.Tuple2 lambda$testMapLambda$25093706$1(org.apache.flink.api.java.tuple.Tuple2) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        return null;
    }

    public static java.lang.Boolean lambda$testLambdaWithNonGenericResultType$25093706$1(org.apache.flink.api.java.tuple.Tuple2) throws java.lang.Exception
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        return null;
    }

    public static java.lang.String lambda$testLambdaWithLocalVariable$efe8762$1(java.lang.String, int, java.lang.Integer) throws java.lang.Exception
    {
        java.lang.String r0, $r6;
        int i0;
        java.lang.Integer r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Integer;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(24);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$1 $r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1, $r3;
        org.apache.flink.api.java.typeutils.LambdaExtractionTest$2 $r2;
        org.apache.flink.api.common.functions.MapFunction $r4;

        $r0 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$1;

        specialinvoke $r0.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$1: void <init>()>();

        $r1 = virtualinvoke $r0.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$1: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_BOOLEAN_TYPE> = $r1;

        $r2 = new org.apache.flink.api.java.typeutils.LambdaExtractionTest$2;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$2: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.LambdaExtractionTest$2: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation NESTED_TUPLE_DOUBLE_TYPE> = $r3;

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.LambdaExtractionTest$parseInt__332: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        <org.apache.flink.api.java.typeutils.LambdaExtractionTest: org.apache.flink.api.common.functions.MapFunction STATIC_LAMBDA> = $r4;

        return;
    }
}
