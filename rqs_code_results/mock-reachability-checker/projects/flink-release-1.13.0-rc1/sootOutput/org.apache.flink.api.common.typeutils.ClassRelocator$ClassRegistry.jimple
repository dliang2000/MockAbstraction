final class org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry extends java.lang.Object
{
    private static final java.util.concurrent.atomic.AtomicInteger GENERATED_ID;
    private final java.lang.Class root;
    private final java.util.Map targetNames;

    void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.lang.Class r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Predicate $r3;
        java.util.function.Function $r5, $r6;
        java.util.stream.Collector $r7;
        java.lang.Object $r8;
        java.util.Map $r9, $r11;
        java.lang.StringBuilder $r10, $r13, $r18;
        java.lang.String $r12, $r17, $r19;
        java.lang.Object[] $r14;
        java.util.concurrent.atomic.AtomicInteger $r15;
        int $i0;
        java.lang.Integer $r16;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.Class root> = r1;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.stream.Stream definedClasses(java.lang.Class)>(r1);

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry$lambda_new_0__218: java.util.function.Predicate bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        $r5 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry$lambda_new_1__219: java.util.function.Function bootstrap$()>();

        $r7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r5, $r6);

        $r8 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r7);

        $r9 = (java.util.Map) $r8;

        r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map targetNames> = $r9;

        $r11 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map targetNames>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = newarray (java.lang.Object)[1];

        $r15 = <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.concurrent.atomic.AtomicInteger GENERATED_ID>;

        $i0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14[0] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("$generated%d$", $r14);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r19);

        return;
    }

    public java.lang.Class getRoot()
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.Class root>;

        return $r1;
    }

    java.lang.String getRootNewName()
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.Class root>;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.String newNameFor(java.lang.Class)>($r1);

        return $r2;
    }

    java.lang.String newNameFor(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.lang.String $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map targetNames>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    java.util.Set getDefinedClassesUnderRoot()
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.lang.Class $r1;
        java.util.stream.Stream $r2;
        java.util.stream.Collector $r3;
        java.lang.Object $r4;
        java.util.Set $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.Class root>;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.stream.Stream definedClasses(java.lang.Class)>($r1);

        $r3 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r3);

        $r5 = (java.util.Set) $r4;

        return $r5;
    }

    private java.util.Map remappingAsPathNames()
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.util.Map $r1, $r8;
        java.util.Set $r2;
        java.util.stream.Stream $r3;
        java.util.function.Function $r4, $r5;
        java.util.stream.Collector $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map targetNames>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.stream.Stream stream()>();

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry$lambda_remappingAsPathNames_2__221: java.util.function.Function bootstrap$()>();

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry$lambda_remappingAsPathNames_3__222: java.util.function.Function bootstrap$()>();

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r4, $r5);

        $r7 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        $r8 = (java.util.Map) $r7;

        return $r8;
    }

    private static java.lang.String pathName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    private static java.lang.String pathName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r2;
    }

    public static java.util.stream.Stream definedClasses(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.stream.Stream r1, $r3, $r5, $r6;
        java.lang.Class[] $r2;
        java.util.function.Function $r4;

        r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getClasses()>();

        $r3 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r2);

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry$definedClasses__220: java.util.function.Function bootstrap$()>();

        r1 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($r4);

        $r5 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>(r0);

        $r6 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>($r5, r1);

        return $r6;
    }

    public static java.lang.String lambda$remappingAsPathNames$3(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r3;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.String pathName(java.lang.String)>($r2);

        return $r3;
    }

    public static java.lang.String lambda$remappingAsPathNames$2(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r2 = (java.lang.Class) $r1;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.lang.String pathName(java.lang.Class)>($r2);

        return $r3;
    }

    public static java.lang.String lambda$new$1(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.'annotation'.Annotation $r1;
        org.apache.flink.api.common.typeutils.ClassRelocator$RelocateClass $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/ClassRelocator$RelocateClass;");

        $r2 = (org.apache.flink.api.common.typeutils.ClassRelocator$RelocateClass) $r1;

        $r3 = interfaceinvoke $r2.<org.apache.flink.api.common.typeutils.ClassRelocator$RelocateClass: java.lang.String value()>();

        return $r3;
    }

    public static boolean lambda$new$0(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.'annotation'.Annotation $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/ClassRelocator$RelocateClass;");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static java.util.Map access$100(org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry)
    {
        org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry;

        $r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.Map remappingAsPathNames()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <org.apache.flink.api.common.typeutils.ClassRelocator$ClassRegistry: java.util.concurrent.atomic.AtomicInteger GENERATED_ID> = $r0;

        return;
    }
}
