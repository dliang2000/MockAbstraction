public class org.apache.flink.api.common.accumulators.IntMinimumTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGet()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;
        org.apache.flink.api.common.accumulators.IntMinimum $r2;
        java.lang.Integer $r3;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        $r2 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $l1);

        return;
    }

    public void testResetLocal()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;
        org.apache.flink.api.common.accumulators.IntMinimum $r2;
        long $l1, $l3, $l5;
        java.lang.Integer $r3, $r4;
        int $i2, $i4;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        $r2 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(13);

        $l1 = (long) 13;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void resetLocal()>();

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i4 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $l5);

        return;
    }

    public void testAdd()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;
        org.apache.flink.api.common.accumulators.IntMinimum $r2;
        java.lang.Integer $r3;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        $r2 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(1234);

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(9876);

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(-987);

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(-123);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-987L, $l1);

        return;
    }

    public void testMerge()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;
        org.apache.flink.api.common.accumulators.IntMinimum $r3, $r4;
        java.lang.Integer $r5, $r6;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        $r3 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(1234);

        $r4 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r4.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(5678);

        virtualinvoke $r4.<org.apache.flink.api.common.accumulators.IntMinimum: void merge(org.apache.flink.api.common.accumulators.Accumulator)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l1);

        virtualinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: void merge(org.apache.flink.api.common.accumulators.Accumulator)>($r4);

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i2 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1234L, $l3);

        return;
    }

    public void testClone()
    {
        org.apache.flink.api.common.accumulators.IntMinimumTest r0;
        org.apache.flink.api.common.accumulators.IntMinimum r2, $r3;
        long $l1, $l3;
        java.lang.Integer $r4;
        int $i2;

        r0 := @this: org.apache.flink.api.common.accumulators.IntMinimumTest;

        $r3 = new org.apache.flink.api.common.accumulators.IntMinimum;

        specialinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: void add(int)>(42);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.accumulators.IntMinimum: org.apache.flink.api.common.accumulators.IntMinimum clone()>();

        $l1 = (long) 42;

        $r4 = virtualinvoke r2.<org.apache.flink.api.common.accumulators.IntMinimum: java.lang.Integer getLocalValue()>();

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        return;
    }
}
