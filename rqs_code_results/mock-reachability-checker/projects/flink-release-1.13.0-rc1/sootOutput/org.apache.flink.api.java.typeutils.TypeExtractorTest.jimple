public class org.apache.flink.api.java.typeutils.TypeExtractorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testBasicType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r4, $r7, $r8, $r11;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$1 $r3;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r9;
        java.lang.Class $r6;
        java.lang.Boolean $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$1;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$1: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getGroupReduceReturnTypes(org.apache.flink.api.common.functions.GroupReduceFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r6);

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/lang/Boolean;");

        $z1 = virtualinvoke $r7.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/lang/Boolean;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r11);

        return;
    }

    public void testTupleWithBasicTypes() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r9, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r42, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4, r5, $r11;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$2 $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$3 $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i2, $i3, i5;
        long $l1, $l4;
        java.util.ArrayList $r10;
        java.lang.Object $r12;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r13;
        java.lang.Class $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r44, $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60;
        org.apache.flink.api.java.tuple.Tuple9 $r33;
        java.lang.Integer $r34;
        java.lang.Long $r35;
        java.lang.Double $r36;
        java.lang.Float $r37;
        java.lang.Boolean $r38;
        java.lang.Character $r39;
        java.lang.Short $r40;
        java.lang.Byte $r41;
        org.apache.flink.api.common.functions.InvalidTypesException $r64;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$2;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$2: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$3;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$3: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r8);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, $r9);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l1);

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f3", 0, $r10);

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 != 1 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r12;

        $i3 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l4);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r14 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple9;", $r14);

        i5 = 0;

     label3:
        if i5 >= 9 goto label4;

        $r63 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i5);

        $z3 = $r63 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r16 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r18 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r20 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r22 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r24 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r26 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        $r28 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r27, $r28);

        $r29 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r30 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r29, $r30);

        $r31 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        $r32 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r31, $r32);

        $r33 = new org.apache.flink.api.java.tuple.Tuple9;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r37 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r39 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(119);

        $r40 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1);

        $r41 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        specialinvoke $r33.<org.apache.flink.api.java.tuple.Tuple9: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r34, $r35, $r36, $r37, $r38, "Hello World", $r39, $r40, $r41);

        $r42 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r33);

        $z2 = $r42 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r43 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r33);

        r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r43;

        $r44 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r45 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r44, $r45);

        $r46 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r47 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, $r47);

        $r48 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r49 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r48, $r49);

        $r50 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r51 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r51);

        $r52 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r53 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r52, $r53);

        $r54 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r55 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r54, $r55);

        $r56 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        $r57 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r56, $r57);

        $r58 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r59 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r58, $r59);

        $r60 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        $r61 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r60, $r61);

     label5:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/tuple/Tuple9;");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Exception expected here");

     label6:
        goto label8;

     label7:
        $r64 := @caughtexception;

     label8:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label5 to label6 with label7;
    }

    public void testTupleWithTuples()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r9, $r17, $r20, $r26, $r27, $r28, $r29, $r31, $r33, $r35, $r36, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r61, $r62, $r63, $r64, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4, r6, $r11, $r14, $r22, $r40, $r44, $r48, $r52, $r68, $r72, $r76, $r80;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$4 $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$5 $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17;
        java.util.ArrayList $r10;
        java.lang.Object $r12, $r15, $r18, $r23;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r13, $r16, $r19, $r24;
        java.lang.Class $r21, $r25, $r30, $r32, $r34;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r38, $r42, $r46, $r50, $r66, $r70, $r74, $r78;
        org.apache.flink.api.java.tuple.Tuple3 $r54;
        org.apache.flink.api.java.tuple.Tuple1 $r55, $r56;
        java.lang.Integer $r57;
        org.apache.flink.api.java.tuple.Tuple2 $r58;
        java.lang.Long $r59, $r60;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$4;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$4: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$5;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$5: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r8);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, $r9);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f0.f0", 0, $r10);

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r12;

        $i2 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r14 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f0.f0", 0, $r10);

        $r15 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r15;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $z2 = $r17 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r18 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r18;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $z3 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        interfaceinvoke $r10.<java.util.List: void clear()>();

        $r22 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        virtualinvoke $r22.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f1.f0", 0, $r10);

        $r23 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r23;

        $i4 = virtualinvoke $r24.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        interfaceinvoke $r10.<java.util.List: void clear()>();

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r25 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r25);

        $r26 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z4 = virtualinvoke $r26.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r27 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z5 = virtualinvoke $r27.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r28 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $z6 = virtualinvoke $r28.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r29 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r30 = virtualinvoke $r29.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple1;", $r30);

        $r31 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r32 = virtualinvoke $r31.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple1;", $r32);

        $r33 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r34);

        $r35 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $i6 = virtualinvoke $r35.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r36 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $i8 = virtualinvoke $r36.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l9);

        $r37 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $i10 = virtualinvoke $r37.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        $r38 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r39 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r40 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r39;

        $r41 = virtualinvoke $r40.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r38, $r41);

        $r42 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r43 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r44 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r43;

        $r45 = virtualinvoke $r44.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r42, $r45);

        $r46 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r47 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r48 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r47;

        $r49 = virtualinvoke $r48.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r46, $r49);

        $r50 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r51 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r52 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r51;

        $r53 = virtualinvoke $r52.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r50, $r53);

        $r54 = new org.apache.flink.api.java.tuple.Tuple3;

        $r55 = new org.apache.flink.api.java.tuple.Tuple1;

        specialinvoke $r55.<org.apache.flink.api.java.tuple.Tuple1: void <init>(java.lang.Object)>("hello");

        $r56 = new org.apache.flink.api.java.tuple.Tuple1;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r56.<org.apache.flink.api.java.tuple.Tuple1: void <init>(java.lang.Object)>($r57);

        $r58 = new org.apache.flink.api.java.tuple.Tuple2;

        $r59 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r60 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L);

        specialinvoke $r58.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r59, $r60);

        specialinvoke $r54.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r55, $r56, $r58);

        $r61 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r54);

        $z7 = $r61 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r62 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r54);

        r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r62;

        $r63 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $i12 = virtualinvoke $r63.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l13);

        $r64 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $i14 = virtualinvoke $r64.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $r65 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $i16 = virtualinvoke $r65.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l17);

        $r66 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r67 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r68 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r67;

        $r69 = virtualinvoke $r68.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r66, $r69);

        $r70 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r71 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r72 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r71;

        $r73 = virtualinvoke $r72.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r70, $r73);

        $r74 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r75 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r76 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r75;

        $r77 = virtualinvoke $r76.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r74, $r77);

        $r78 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r79 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r80 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r79;

        $r81 = virtualinvoke $r80.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r78, $r81);

        return;
    }

    public void testTuple0()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$6 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$7 $r4;
        boolean $z0, $z1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$6;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$6: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$7;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$7: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testSubclassOfTuple()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r4, $r7, $r8, $r11, $r14, $r21, $r24;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$8 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$9 $r6;
        boolean $z0, $z1;
        int $i0, $i2;
        long $l1, $l3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r9, $r12, $r15, $r19, $r22, $r25;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r13, $r20, $r23;
        java.lang.Class $r16, $r26;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomTuple $r17;
        java.lang.Integer $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$8: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$9;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$9: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        $r8 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatJoinReturnTypes(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7, $r8);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r11 = virtualinvoke $r9.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r12 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r14 = virtualinvoke $r12.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomTuple;", $r16);

        $r17 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomTuple;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomTuple: void <init>(java.lang.String,java.lang.Integer)>("hello", $r18);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r17);

        $z1 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i2 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r19 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r4;

        $r21 = virtualinvoke $r19.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r22 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r4;

        $r24 = virtualinvoke $r22.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $r25 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r4;

        $r26 = virtualinvoke $r25.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomTuple;", $r26);

        return;
    }

    public void testPojo()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r4, $r7, $r8, $r10, $r11, $r16;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$10 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$11 $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Class $r9, $r12, $r13, $r15;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$10;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$10: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$11;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$11: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        $r8 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCrossReturnTypes(org.apache.flink.api.common.functions.CrossFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7, $r8);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r9 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;");

        $r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;");

        $z3 = $r10 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;");

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r13 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType: void <init>(java.lang.String,int)>("World", 1);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r14);

        $z4 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        $z5 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $z6 = r4 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r15 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;");

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$PojoWithNonPublicDefaultCtor;");

        $z7 = $r16 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z7);

        return;
    }

    public void testMethodChainingPojo()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.Class $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType: void <init>()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType: org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType setMyField1(java.lang.String)>("World");

        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType: org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomChainingPojoType setMyField2(int)>(1);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r3);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomChainingPojoType;");

        return;
    }

    public void testRow()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r4;
        org.apache.flink.types.Row $r5, $r12;
        java.lang.Integer $r6;
        java.lang.Class $r7;
        int $i0;
        long $l1;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r9;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r11;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.types.Row;

        specialinvoke $r5.<org.apache.flink.types.Row: void <init>(int)>(2);

        virtualinvoke $r5.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, "string");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        virtualinvoke $r5.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r5);

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, class "Lorg/apache/flink/api/java/typeutils/RowTypeInfo;");

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r8 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r9 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r9[1] = $r11;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, r2);

        $r12 = new org.apache.flink.types.Row;

        specialinvoke $r12.<org.apache.flink.types.Row: void <init>(int)>(2);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r12);

        $r13 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/Row;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r13);

        return;
    }

    public void testTupleWithPojo()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r6, $r10, $r17, $r23, $r29, $r31, $r33, $r34, $r40, $r42, $r43;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3, r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$12 $r8;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$13 $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        java.lang.Class $r11, $r18, $r24, $r30, $r32, $r35, $r39, $r41, $r44;
        java.util.ArrayList $r12;
        java.lang.Object $r13, $r15, $r19, $r21, $r25, $r27;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r14, $r16, $r20, $r22, $r26, $r28;
        org.apache.flink.api.java.tuple.Tuple2 $r36;
        java.lang.Long $r37;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType $r38;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$12;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$12: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$13;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.TypeExtractorTest$13: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r10 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r9);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r10);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r11);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f0", 0, $r12);

        $i2 = interfaceinvoke $r12.<java.util.List: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r13;

        $i4 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r15 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r15;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $z1 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Long;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        interfaceinvoke $r12.<java.util.List: void clear()>();

        virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f1.myField1", 0, $r12);

        $r19 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r20 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r19;

        $i6 = virtualinvoke $r20.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r21 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r21;

        $r23 = virtualinvoke $r22.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r24 = virtualinvoke $r23.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $z2 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        interfaceinvoke $r12.<java.util.List: void clear()>();

        virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("f1.myField2", 0, $r12);

        $r25 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r26 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r25;

        $i8 = virtualinvoke $r26.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l9);

        $r27 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r28 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r27;

        $r29 = virtualinvoke $r28.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r30 = virtualinvoke $r29.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $z3 = virtualinvoke $r30.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r31 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r32 = virtualinvoke $r31.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r32);

        $r33 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z4 = $r33 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r34 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r35 = virtualinvoke $r34.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;", $r35);

        $r36 = new org.apache.flink.api.java.tuple.Tuple2;

        $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r38 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType;

        specialinvoke $r38.<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType: void <init>(java.lang.String,int)>("Hello", 1);

        specialinvoke $r36.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r37, $r38);

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r36);

        $z5 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $i10 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        r7 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r6;

        $r39 = virtualinvoke r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r39);

        $r40 = virtualinvoke r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r41 = virtualinvoke $r40.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r41);

        $r42 = virtualinvoke r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z6 = $r42 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r43 = virtualinvoke r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r44 = virtualinvoke $r43.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomType;", $r44);

        return;
    }

    public void testValue()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r9, $r13, $r14;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$14 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$15 $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r7, $r10, $r11, $r15, $r16;
        org.apache.flink.types.StringValue $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$14;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$14: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$15;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$15: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = r2 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r7 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, class "Lorg/apache/flink/types/StringValue;");

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;");

        $z3 = $r8 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;");

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r11 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("Hello");

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r12);

        $z4 = $r13 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r12);

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        $r16 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        return;
    }

    public void testTupleOfValues()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r4, $r7, $r9, $r12, $r18, $r21;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$16 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$17 $r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r8, $r11, $r17, $r20;
        java.lang.Class $r10, $r13, $r19, $r22;
        org.apache.flink.api.java.tuple.Tuple2 $r14;
        org.apache.flink.types.StringValue $r15;
        org.apache.flink.types.IntValue $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$16;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$16: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$17;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$17: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r9 = virtualinvoke $r8.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/StringValue;", $r10);

        $r11 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/IntValue;", $r13);

        $r14 = new org.apache.flink.api.java.tuple.Tuple2;

        $r15 = new org.apache.flink.types.StringValue;

        specialinvoke $r15.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("x");

        $r16 = new org.apache.flink.types.IntValue;

        specialinvoke $r16.<org.apache.flink.types.IntValue: void <init>(int)>(1);

        specialinvoke $r14.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r15, $r16);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r14);

        $z2 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $z3 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r17 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r4;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, class "Lorg/apache/flink/types/StringValue;");

        $r20 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r4;

        $r21 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, class "Lorg/apache/flink/types/IntValue;");

        return;
    }

    public void testGenericsNotInSuperclass()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r9, $r11;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$18 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$19 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$18;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$18: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$19;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$19: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$LongKeyValue;", $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testChainedGenericsNotInSuperclass()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r9, $r11, $r13;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$20 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$21 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$20;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$20: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$21;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$21: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$ChainedTwo;", $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testGenericsInDirectSuperclass()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r9, $r11, $r13;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$22 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$23 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$22;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$22: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$23;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$23: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$ChainedThree;", $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testGenericsNotInSuperclassWithNonGenericClassAtEnd()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r9, $r11, $r13;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$24 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$25 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$24;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$24: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$25;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$25: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$ChainedFour;", $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testMissingTupleGenerics()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$26 $r4;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$26;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$26: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r4, $r5, "name", 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r6 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testTupleSupertype()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$27 $r4;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$27;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$27: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r4, $r5, "name", 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r6 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testSameGenericVariable()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r9, $r11;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$28 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$29 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Class $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$28;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$28: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$29;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$29: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$SameTypeVariable;", $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testNestedTupleGenerics()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r10, $r11, $r12, $r13, $r16, $r18;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3, r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$30 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$31 $r6;
        boolean $z0, $z1;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Class $r8, $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9, $r15, $r17;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$30;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$30: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$31;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$31: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$Nested;", $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z1 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $i2 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r13;

        $r14 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple2;", $r14);

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r16 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r18 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        return;
    }

    public void testNestedTupleGenerics2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r24;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3, r4, r5, r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$32 $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$33 $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r17, $r21, $r23;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$32;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$32: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$33;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$33: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r8);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, $r9);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z1 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r13;

        $r14 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r14.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r15 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z3 = virtualinvoke $r15.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r16 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r18 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z4 = virtualinvoke $r19.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r20 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r20;

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r22 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r24 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        return;
    }

    public void testFunctionWithMissingGenerics()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$34 $r4;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$34;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$34: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r4, $r5, "name", 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r6 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testFunctionDependingOnInputAsSuperclass()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$35 $r3;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$35;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$35: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testFunctionDependingOnInputFromInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testFunctionDependingOnInputWithMissingInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper $r3;
        org.apache.flink.api.common.functions.InvalidTypesException $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

     label1:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testFunctionDependingOnInputWithTupleInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2 $r4;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r3);

        return;
    }

    public void testFunctionDependingOnInputWithCustomTupleInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r10;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$36 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$36;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$36: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        return;
    }

    public void testFunctionDependingOnUnknownInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper3 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r6;
        boolean $z0;
        org.apache.flink.api.common.functions.InvalidTypesException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper3;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper3: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r4, $r5, "name", 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testFunctionDependingOnInputWithFunctionHierarchy()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper4 $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper4;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper4: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testFunctionDependingOnInputWithFunctionHierarchy2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r10, $r12;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3, $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper5 $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9, $r11;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper5;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper5: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        return;
    }

    public void testFunctionWithNoGenericSuperclass()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$Mapper2 $r3;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$Mapper2;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$Mapper2: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testFunctionDependingPartialOnInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r8, $r9, $r11, $r12;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.ValueTypeInfo r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$37 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$38 $r6;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        java.lang.Class $r10, $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$37;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$37: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$38;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$38: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r8 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r4 = (org.apache.flink.api.java.typeutils.ValueTypeInfo) $r9;

        $r10 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/DoubleValue;", $r10);

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z2 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r13);

        return;
    }

    public void testFunctionDependingPartialOnInput2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r8, $r10, $r11;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.ValueTypeInfo r4, $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$OneAppender $r5;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;
        java.lang.Class $r9, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$OneAppender;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$OneAppender: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/DoubleValue;");

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r7 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r4 = (org.apache.flink.api.java.typeutils.ValueTypeInfo) $r8;

        $r9 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/DoubleValue;", $r9);

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z2 = virtualinvoke $r10.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r12);

        return;
    }

    public void testFunctionInputInOutputMultipleTimes()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r6, $r8;
        boolean $z0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void testFunctionInputInOutputMultipleTimes2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r11, $r12, $r14, $r16, $r17, $r18, $r20, $r22;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3, r4, r5, $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9, $r10, $r13, $r15, $r19, $r21;
        boolean $z0, $z1, $z2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$FieldDuplicator: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r8 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r8[0] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r8[1] = $r10;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r8);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r7);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r14 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r16 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z2 = virtualinvoke $r17.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r18 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        r5 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r18;

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r20 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r22 = virtualinvoke r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        return;
    }

    public void testAbstractAndInterfaceTypes()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$39 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r7, $r9;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$40 $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$41 $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation r10, r11, r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$39;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$39: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r10 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = r10 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$40;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$40: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r7);

        $z1 = r11 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$41;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$41: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r12 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r8, $r9);

        $z2 = r12 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testValueSupertypeException()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$42 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$43 $r5;
        boolean $z0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$44 $r7;
        org.apache.flink.api.common.functions.InvalidTypesException $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$42;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$42: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$43;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$43: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r4, $r6, "name", 1);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$44;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$44: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r7);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testBasicArray()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r7, $r10;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$45 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$46 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$47 $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$45;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$45: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$46;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$46: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$47;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$47: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getCoGroupReturnTypes(org.apache.flink.api.common.functions.CoGroupFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5, $r7);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $z2 = r2 instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo;

        if $z2 != 0 goto label1;

        $z4 = r2 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z3 = r2 instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo;

        if $z3 == 0 goto label4;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo STRING_ARRAY_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, r2);

        goto label5;

     label4:
        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r2;

        $r10 = virtualinvoke $r8.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

     label5:
        return;
    }

    public void testBasicArray2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo r3, $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper $r4;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo BOOLEAN_ARRAY_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = r2 instanceof org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo) r2;

        $r6 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        $z1 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testCustomArray()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$48 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$49 $r4;
        boolean $z0;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$48;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$48: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$49;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$49: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r2;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$CustomArrayObject;", $r8);

        return;
    }

    public void testTupleArray()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r8, $r9, $r11, $r13;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$50 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$51 $r6;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$50;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$50: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$51;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$51: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r2;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        return;
    }

    public void testCustomArrayWithTypeVariable()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r8, $r9, $r11;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$52 $r6;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$52;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$52: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r2;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        r4 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r11 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testParameterizedArrays()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$53 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$54 $r5;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$53;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$53: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$54;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$54: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testParameterizedPojo()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$55 $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$55;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$55: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$InType;");

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, r2);

        $z0 = r3 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testFunctionDependingOnInputWithTupleInputWithTypeMismatch()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2 $r4;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8;
        org.apache.flink.api.common.functions.InvalidTypesException $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$IdentityMapper2: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

     label1:
        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testInputMismatchExceptions()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$56 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$57 $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r8, $r12, $r16;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$58 $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$59 $r10;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$60 $r11;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$61 $r14;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$62 $r15;
        org.apache.flink.api.common.functions.InvalidTypesException $r18, $r19, $r20, $r21;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$56;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$56: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

     label01:
        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$57;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$57: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

     label04:
        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$58;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$58: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r7);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

     label07:
        $r10 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$59;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.TypeExtractorTest$59: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

     label08:
        $r11 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$60;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.TypeExtractorTest$60: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r12 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r11);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, $r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

     label11:
        $r14 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$61;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TypeExtractorTest$61: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

     label12:
        $r15 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$62;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.TypeExtractorTest$62: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r16 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r15);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r14, $r16);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("exception expected");

     label13:
        goto label15;

     label14:
        $r18 := @caughtexception;

     label15:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label01 to label02 with label03;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label04 to label05 with label06;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label08 to label09 with label10;
        catch org.apache.flink.api.common.functions.InvalidTypesException from label12 to label13 with label14;
    }

    public void testTypeErasure()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r5, $r8;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$DummyFlatMapFunction $r3, $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$63 $r4;
        boolean $z0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$64 $r7;
        org.apache.flink.api.common.functions.InvalidTypesException $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$DummyFlatMapFunction;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$DummyFlatMapFunction: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$63;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$63: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation,java.lang.String,boolean)>($r3, $r5, "name", 1);

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label1:
        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$DummyFlatMapFunction;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$DummyFlatMapFunction: void <init>()>();

        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$64;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$64: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r8 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r7);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getFlatMapReturnTypes(org.apache.flink.api.common.functions.FlatMapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r8);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected an exception");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public void testResultTypeQueryable()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$MyQueryableMapper $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$MyQueryableMapper;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorTest$MyQueryableMapper: void <init>()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r2, $r3);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r1);

        return;
    }

    public void testTupleWithPrimitiveArray()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$65 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r22;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$65;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$65: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo INT_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo LONG_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BYTE_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo CHAR_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r16 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo FLOAT_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r18 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo SHORT_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r19 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = <org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo: org.apache.flink.api.common.typeinfo.PrimitiveArrayTypeInfo BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO>;

        $r21 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo STRING_ARRAY_TYPE_INFO>;

        $r23 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

        return;
    }

    public void testFunction()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$66 $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$66;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$66: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testInterface()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$67 $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$67;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$67: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testCreateTypeInfoFromInstance()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$68 $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r7;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$69 $r5;
        java.lang.Class $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation r8, r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$68;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$68: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        r8 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object,java.lang.Class,java.lang.Class,int)>($r3, null, null, 0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r8);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$69;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$69: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        r9 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object,java.lang.Class,java.lang.Class,int)>($r5, class "Lorg/apache/flink/api/common/functions/MapFunction;", $r6, 0);

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, r9);

        return;
    }

    public void testExtractKeySelector()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$70 $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5, $r6;
        org.apache.flink.api.common.functions.InvalidTypesException $r8;
        java.lang.Exception $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$70;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$70: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

     label1:
        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getKeySelectorTypes(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r6);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("wrong exception type");

     label5:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public void testDuplicateValue()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r5, $r7, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValue $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$71 $r4;
        boolean $z0;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValue;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValue: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$71;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$71: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r2 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r1;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void testDuplicateValueNested()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r5, $r7, $r9;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValueNested $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$72 $r4;
        boolean $z0;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValueNested;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$DuplicateValueNested: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$72;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$72: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        r2 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r1;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        return;
    }

    public void testInputInference1()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r10, $r12;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$73 $r5;
        boolean $z0;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r9, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper: void <init>()>();

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$73;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$73: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        return;
    }

    public void testInputInference2()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r7, $r9, $r11;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper2 $r4;
        boolean $z0;
        int $i0;
        long $l1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r8, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper2;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper2: void <init>()>();

        $r5 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation BOOLEAN>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }

    public void testInputInference3()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper3 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$74 $r4;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper3;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper3: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$74;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$74: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testInputInference4()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper4 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$75 $r4;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper4;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EdgeMapper4: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$75;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$75: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testInputInferenceWithCustomTupleAndRichFunction()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r7, $r9, $r11, $r12, $r13, $r15;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$JoinWithCustomTuple2WithArray $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$76 $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$77 $r8;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$JoinWithCustomTuple2WithArray;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$JoinWithCustomTuple2WithArray: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$76;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$76: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$76: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        $r8 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$77;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$77: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r9 = virtualinvoke $r8.<org.apache.flink.api.java.typeutils.TypeExtractorTest$77: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getJoinReturnTypes(org.apache.flink.api.common.functions.JoinFunction,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7, $r9);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r12 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        r4 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r15 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        return;
    }

    public void testEnumType()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$78 $r3;
        org.apache.flink.api.java.typeutils.EnumTypeInfo $r4;
        boolean $z0;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$78;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$78: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = new org.apache.flink.api.java.typeutils.EnumTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.EnumTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$MyEnum;");

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, class "Lorg/apache/flink/api/java/typeutils/TypeExtractorTest$MyEnum;");

        return;
    }

    public void testMultiDimensionalArray()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$79 $r1;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$80 $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r7, $r11, $r15, $r19, r22, r24, r26, r28, r29;
        java.lang.String $r4, $r8, $r12, $r16, $r20;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$81 $r5;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$82 $r6;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$83 $r9;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$84 $r10;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$85 $r13;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$86 $r14;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$MapperWithMultiDimGenericArray $r17;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$87 $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r1 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$79;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.TypeExtractorTest$79: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$80;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorTest$80: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r3 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r2);

        r22 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r1, $r3);

        $r4 = virtualinvoke r22.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ObjectArrayTypeInfo<ObjectArrayTypeInfo<Java Tuple2<Integer, Double>>>", $r4);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$81;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$81: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$82;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TypeExtractorTest$82: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r6);

        r24 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r5, $r7);

        $r8 = virtualinvoke r24.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ObjectArrayTypeInfo<ObjectArrayTypeInfo<int[]>>", $r8);

        $r9 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$83;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.TypeExtractorTest$83: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r10 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$84;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.TypeExtractorTest$84: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r11 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r10);

        r26 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, $r11);

        $r12 = virtualinvoke r26.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ObjectArrayTypeInfo<ObjectArrayTypeInfo<BasicArrayTypeInfo<Integer>>>", $r12);

        $r13 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$85;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TypeExtractorTest$85: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r14 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$86;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TypeExtractorTest$86: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r15 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r14);

        r28 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r15);

        $r16 = virtualinvoke r28.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ObjectArrayTypeInfo<ObjectArrayTypeInfo<ObjectArrayTypeInfo<PojoType<org.apache.flink.api.java.typeutils.TypeExtractorTest$CustomType, fields = [myField1: String, myField2: Integer]>>>>", $r16);

        $r17 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$MapperWithMultiDimGenericArray;

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.TypeExtractorTest$MapperWithMultiDimGenericArray: void <init>()>();

        $r18 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$87;

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.TypeExtractorTest$87: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r19 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r18);

        r29 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r17, $r19);

        $r20 = virtualinvoke r29.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ObjectArrayTypeInfo<ObjectArrayTypeInfo<ObjectArrayTypeInfo<Java Tuple1<String>>>>", $r20);

        return;
    }

    public void testInputMismatchWithRawFuntion()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$MapWithResultTypeQueryable $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$MapWithResultTypeQueryable;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$MapWithResultTypeQueryable: void <init>()>();

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r2);

        return;
    }

    public void testEither()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$88 $r4;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$88;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$88: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, $r6);

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, r3);

        return;
    }

    public void testEitherHierarchy()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r5, $r6, $r8, $r12, $r13;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r4, $r9;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper2 $r7;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r10;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r11;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper3 $r14;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$Either2 $r15;
        org.apache.flink.api.common.typeinfo.TypeInformation r17, r20, r23, r24;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r2 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper: void <init>()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        r17 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r2, $r3);

        $r4 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, r17);

        $r7 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper2;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper2: void <init>()>();

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r20 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, $r8);

        $r9 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r11 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11[0] = $r12;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r11);

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r10);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r20);

        $r14 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper3;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TypeExtractorTest$EitherMapper3: void <init>()>();

        r23 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r14, $r9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r23);

        $r15 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$Either2;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.TypeExtractorTest$Either2: void <init>()>();

        r24 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, r24);

        return;
    }

    public void testEitherFromObjectException()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.types.Either r1;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        r1 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>("test");

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>(r1);

        return;
    }

    public void testGenericTypeWithSubclassInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r4, r5;
        java.util.HashMap $r6;
        java.lang.Class $r8;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$89 $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "b");

        $r8 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>($r8);

        $r9 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$89;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.TypeExtractorTest$89: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, r2);

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Ljava/util/Map;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r5, r4);

        return;
    }

    public void testGenericTypeWithSuperclassInput()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$90 $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Ljava/util/Map;");

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$90;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$90: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, r1);

        return;
    }

    public void testInputWithCustomTypeInfo()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$91 $r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$92 $r4;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r3 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$91;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TypeExtractorTest$91: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$92;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$92: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r6[0] = $r3;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        return;
    }

    public void testBigBasicTypes()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r22;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$93 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$94 $r5;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r9, $r18, $r21;
        java.math.BigInteger $r17;
        java.math.BigDecimal $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$93;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$93: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$94;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$94: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/math/BigInteger;");

        $z1 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/math/BigDecimal;");

        $z2 = virtualinvoke $r12.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/math/BigInteger;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/math/BigDecimal;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_INT_TYPE_INFO>;

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(java.lang.String)>("42");

        $r19 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BIG_DEC_TYPE_INFO>;

        $r20 = new java.math.BigDecimal;

        specialinvoke $r20.<java.math.BigDecimal: void <init>(java.lang.String)>("42.42");

        $r22 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        return;
    }

    public void testSqlTimeTypes()
    {
        org.apache.flink.api.java.typeutils.TypeExtractorTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r24, $r27;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$95 $r4;
        org.apache.flink.api.java.typeutils.TypeExtractorTest$96 $r5;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo $r7, $r9, $r11, $r19, $r22, $r25;
        java.sql.Date $r20;
        java.sql.Time $r23;
        java.sql.Timestamp $r26;

        r0 := @this: org.apache.flink.api.java.typeutils.TypeExtractorTest;

        $r4 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$95;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.TypeExtractorTest$95: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r5 = new org.apache.flink.api.java.typeutils.TypeExtractorTest$96;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TypeExtractorTest$96: void <init>(org.apache.flink.api.java.typeutils.TypeExtractorTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo DATE>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIME>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIMESTAMP>;

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r11, $r12);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/sql/Date;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/sql/Time;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        $r18 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Ljava/sql/Timestamp;");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo DATE>;

        $r20 = staticinvoke <java.sql.Date: java.sql.Date valueOf(java.lang.String)>("1998-12-12");

        $r21 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r21);

        $r22 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIME>;

        $r23 = staticinvoke <java.sql.Time: java.sql.Time valueOf(java.lang.String)>("12:37:45");

        $r24 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r24);

        $r25 = <org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo: org.apache.flink.api.common.typeinfo.SqlTimeTypeInfo TIMESTAMP>;

        $r26 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1998-12-12 12:37:45");

        $r27 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r27);

        return;
    }
}
