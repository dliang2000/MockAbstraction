public class org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2 extends java.lang.Object
{
    private long longValue;
    private java.util.Map theMap;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2 r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap> = $r1;

        return;
    }

    public void <init>(java.util.Random)
    {
        org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2 r0;
        java.util.Random r1;
        java.util.HashMap $r2;
        long $l0, $l1, $l3, $l5, $l7, $l9, $l11;
        java.util.Map $r3, $r7, $r11, $r15, $r19, $r23;
        java.lang.String $r4, $r8, $r12, $r16, $r20, $r24;
        org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1 $r5, $r9, $r13, $r17, $r21, $r25;
        int $i2, $i4, $i6, $i8, $i10, $i12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2;

        r1 := @parameter0: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap> = $r2;

        $l0 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: long longValue> = $l0;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l1 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $r5 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i2 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l3 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l3);

        $r9 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i4 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i4);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l5 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5);

        $r13 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i6 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i6);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l7 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l7);

        $r17 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i8 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i8);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r17);

        $r19 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l9 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l9);

        $r21 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i10 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i10);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r23 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $l11 = virtualinvoke r1.<java.util.Random: long nextLong()>();

        $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l11);

        $r25 = new org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1;

        $i12 = virtualinvoke r1.<java.util.Random: int nextInt()>();

        specialinvoke $r25.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject1: void <init>(int)>($i12);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r25);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2 r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3;
        long $l0, $l1;
        byte $b2;
        java.util.Map $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2;

        r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Lorg/apache/flink/api/java/typeutils/runtime/AbstractGenericTypeSerializerTest$ComplexNestedObject2;" goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2) r1;

        $l1 = r2.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: long longValue>;

        $l0 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: long longValue>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $r4 = r2.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest$ComplexNestedObject2: java.util.Map theMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }
}
