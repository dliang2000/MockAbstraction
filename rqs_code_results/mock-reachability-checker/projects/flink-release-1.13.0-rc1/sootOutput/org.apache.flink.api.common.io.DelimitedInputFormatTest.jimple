public class org.apache.flink.api.common.io.DelimitedInputFormatTest extends java.lang.Object
{
    private org.apache.flink.api.common.io.DelimitedInputFormat format;

    public void <init>()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat $r1;
        org.apache.flink.core.fs.Path $r2;
        org.apache.flink.api.common.io.DelimitedInputFormat $r3;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r1 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r1.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format> = $r1;

        $r3 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r2 = new org.apache.flink.core.fs.Path;

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("file:///some/file/that/will/not/be/read");

        virtualinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>($r2);

        return;
    }

    public void shutdown() throws java.lang.Exception
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.api.common.io.DelimitedInputFormat $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r1 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r2.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

     label1:
        return;
    }

    public void testConfigure()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.configuration.Configuration $r2;
        org.apache.flink.api.common.io.DelimitedInputFormat $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.String $r4, $r10;
        byte[] $r6, $r12;
        java.nio.charset.Charset $r8, $r14;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("delimited-format.delimiter", "\n");

        $r3 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r2);

        $r4 = new java.lang.String;

        $r5 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormat: byte[] getDelimiter()>();

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: java.nio.charset.Charset getCharset()>();

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r6, $r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("\n", $r4);

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("delimited-format.delimiter", "&-&");

        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r2);

        $r10 = new java.lang.String;

        $r11 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormat: byte[] getDelimiter()>();

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.nio.charset.Charset getCharset()>();

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r12, $r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("&-&", $r10);

        return;
    }

    public void testSerialization() throws java.lang.Exception
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.api.common.io.DelimitedInputFormat r6;
        byte[] $r7, $r13, $r15;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat $r8;
        java.io.ByteArrayOutputStream $r9;
        java.io.ObjectOutputStream $r10;
        java.io.ObjectInputStream $r11;
        java.io.ByteArrayInputStream $r12;
        java.lang.Object $r14;
        int $i3, $i5, $i7;
        long $l4, $l6, $l8;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r7 = newarray (byte)[4];

        $r7[0] = 1;

        $r7[1] = 2;

        $r7[2] = 3;

        $r7[3] = 4;

        $r8 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void setDelimiter(byte[])>($r7);

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void setNumLineSamples(int)>(7);

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void setLineLengthLimit(int)>(12345);

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>(178);

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>(int)>(4096);

        $r10 = new java.io.ObjectOutputStream;

        specialinvoke $r10.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r9);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        virtualinvoke $r10.<java.io.ObjectOutputStream: void flush()>();

        virtualinvoke $r10.<java.io.ObjectOutputStream: void close()>();

        $r11 = new java.io.ObjectInputStream;

        $r12 = new java.io.ByteArrayInputStream;

        $r13 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13);

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r12);

        $r14 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r6 = (org.apache.flink.api.common.io.DelimitedInputFormat) $r14;

        $i3 = virtualinvoke r6.<org.apache.flink.api.common.io.DelimitedInputFormat: int getNumLineSamples()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l4);

        $i5 = virtualinvoke r6.<org.apache.flink.api.common.io.DelimitedInputFormat: int getLineLengthLimit()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12345L, $l6);

        $i7 = virtualinvoke r6.<org.apache.flink.api.common.io.DelimitedInputFormat: int getBufferSize()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(178L, $l8);

        $r15 = virtualinvoke r6.<org.apache.flink.api.common.io.DelimitedInputFormat: byte[] getDelimiter()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r7, $r15);

        return;
    }

    public void testOpen() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        org.apache.flink.api.common.io.DelimitedInputFormat $r3, $r4, $r5, $r7, $r8;
        long $l1, $l4, $l5, $l6, $l8;
        java.lang.String $r6;
        int $i2, $i3, $i7;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("my mocked line 1\nmy mocked line 2\n");

        $r3 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>(5);

        $r4 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        $r5 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $l1 = $r5.<org.apache.flink.api.common.io.DelimitedInputFormat: long splitStart>;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r6 = "my mocked line 1\nmy mocked line 2\n";

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i3 = $i2 - 5;

        $l5 = (long) $i3;

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $l4 = $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: long splitLength>;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l4);

        $l6 = (long) 5;

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $i7 = virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: int getBufferSize()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        return;
    }

    public void testReadWithoutTrailingDelimiter() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        java.lang.String r4, r5;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.api.common.io.DelimitedInputFormat $r7, $r8, $r9, $r11, $r13, $r15;
        java.lang.Object $r10, $r12, $r14;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("my key|my val$$$my key2\n$$ctd.$$|my value2");

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r4 = (java.lang.String) $r10;

        $r11 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r5 = (java.lang.String) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my key|my val$$$my key2", r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("$$ctd.$$|my value2", r5);

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testReadWithTrailingDelimiter() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        java.lang.String r4, r5;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.api.common.io.DelimitedInputFormat $r7, $r8, $r9, $r11, $r13, $r15;
        java.lang.Object $r10, $r12, $r14;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("my key|my val$$$my key2\n$$ctd.$$|my value2\n");

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r4 = (java.lang.String) $r10;

        $r11 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r5 = (java.lang.String) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my key|my val$$$my key2", r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("$$ctd.$$|my value2", r5);

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testReadCustomDelimiter() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        java.lang.String r4, r5;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.api.common.io.DelimitedInputFormat $r7, $r8, $r9, $r10, $r12, $r14, $r16;
        java.lang.Object $r11, $r13, $r15;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("my key|my val$$$my key2\n$$ctd.$$|my value2");

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: void setDelimiter(java.lang.String)>("$$$");

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        $r10 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r11 = virtualinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r4 = (java.lang.String) $r11;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my key|my val", r4);

        $r12 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r5 = (java.lang.String) $r13;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("my key2\n$$ctd.$$|my value2", r5);

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMultiCharDelimiter() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        java.lang.String r4, r5, r6;
        org.apache.flink.configuration.Configuration $r7;
        org.apache.flink.api.common.io.DelimitedInputFormat $r8, $r9, $r10, $r11, $r13, $r15, $r17, $r19;
        java.lang.Object $r12, $r14, $r16, $r18;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("www112xx1123yyy11123zzzzz1123");

        $r7 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r7.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void setDelimiter(java.lang.String)>("1123");

        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r7);

        $r10 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        $r11 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r4 = (java.lang.String) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("www112xx", r4);

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r5 = (java.lang.String) $r14;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("yyy1", r5);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r6 = (java.lang.String) $r16;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("zzzzz", r6);

        $r17 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r18);

        $r19 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r19.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testReadCustomDelimiterWithCharset() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        java.lang.String r3, r5, r9, r10;
        int i0, i1, i2, i3;
        org.apache.flink.core.fs.FileInputSplit r7;
        java.lang.String[] $r11, $r12;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$1 $r13;
        org.apache.flink.configuration.Configuration $r14;
        java.lang.Object $r15, $r16;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r11 = newarray (java.lang.String)[5];

        $r11[0] = "\u020e\u021f\u05c0\u020b\u020f";

        $r11[1] = "Apache";

        $r11[2] = "\nFlink";

        $r11[3] = "\u0000";

        $r11[4] = "\u05c0";

        r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($r11, "\u05c0\u05c0");

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = "UTF-8";

        $r12[1] = "UTF-16BE";

        $r12[2] = "UTF-16LE";

        i0 = lengthof $r12;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r5 = $r12[i2];

        $r13 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$1;

        specialinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormatTest$1: void <init>(org.apache.flink.api.common.io.DelimitedInputFormatTest,java.lang.String)>(r0, r5);

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(java.lang.String)>("file:///some/file/that/will/not/be/read");

        r7 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String,java.lang.String)>(r3, r5);

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void setDelimiter(java.lang.String)>("\u05c0\u05c0");

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void setCharset(java.lang.String)>(r5);

        $r14 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r14.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r14);

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r7);

        i1 = lengthof $r11;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        r9 = $r11[i3];

        $r16 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r10 = (java.lang.String) $r16;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r9, r10);

        i3 = i3 + 1;

        goto label2;

     label3:
        $r15 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $z0 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public void testReadOverSplitBoundariesUnaligned() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2, $r6, $r9;
        org.apache.flink.core.fs.Path $r7, $r10;
        long $l0, $l1, $l2, $l3;
        java.lang.String[] $r8, $r11;
        org.apache.flink.configuration.Configuration $r12;
        org.apache.flink.api.common.io.DelimitedInputFormat $r13, $r14, $r15, $r17, $r19, $r21, $r22, $r23, $r24, $r26, $r28, $r29;
        java.lang.Object $r16, $r18, $r20, $r25, $r27;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("value1\nvalue2\nvalue3");

        $r6 = new org.apache.flink.core.fs.FileInputSplit;

        $r7 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l0 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l1 = $l0 / 2L;

        $r8 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r7, 0L, $l1, $r8);

        $r9 = new org.apache.flink.core.fs.FileInputSplit;

        $r10 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l2 = virtualinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l3 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $r11 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r9.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(1, $r10, $l2, $l3, $r11);

        $r12 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r12.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r12);

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r6);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value1", $r16);

        $r17 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value2", $r18);

        $r19 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        $r21 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r21.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r22 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r22.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $r23 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r23.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r9);

        $r24 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r25 = virtualinvoke $r24.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("value3", $r25);

        $r26 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r27 = virtualinvoke $r26.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r27);

        $r28 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z1 = virtualinvoke $r28.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r29 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r29.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        return;
    }

    public void testReadWithBufferSizeIsMultiple() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2, $r6, $r9;
        org.apache.flink.core.fs.Path $r7, $r10;
        long $l0, $l1, $l2, $l3, $l4, $l7, $l8, $l10, $l12;
        java.lang.String[] $r8, $r11;
        org.apache.flink.configuration.Configuration $r12;
        org.apache.flink.api.common.io.DelimitedInputFormat $r13, $r14, $r15, $r16, $r19, $r21, $r22, $r23, $r24, $r27;
        int $i5, $i6, $i9, $i11, i13;
        java.lang.Object $r17, $r20, $r25;
        java.lang.String $r18, $r26;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("aaaaaaa\nbbbbbbb\nccccccc\nddddddd\n");

        $r6 = new org.apache.flink.core.fs.FileInputSplit;

        $r7 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l0 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l1 = $l0 / 2L;

        $r8 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r7, 0L, $l1, $r8);

        $r9 = new org.apache.flink.core.fs.FileInputSplit;

        $r10 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l2 = virtualinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l3 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $r11 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r9.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(1, $r10, $l2, $l3, $r11);

        $r12 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r12.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $l4 = virtualinvoke $r6.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $i5 = (int) $l4;

        $i6 = 2 * $i5;

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>($i6);

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r12);

        i13 = 0;

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r6);

     label1:
        $r16 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        $r18 = (java.lang.String) $r17;

        if $r18 == null goto label2;

        $i11 = virtualinvoke $r18.<java.lang.String: int length()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l12);

        i13 = i13 + 1;

        goto label1;

     label2:
        $r19 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        $r21 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r21.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r22 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r22.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $l7 = (long) i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $r23 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r23.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r9);

     label3:
        $r24 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r25 = virtualinvoke $r24.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        $r26 = (java.lang.String) $r25;

        if $r26 == null goto label4;

        $i9 = virtualinvoke $r26.<java.lang.String: int length()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l10);

        i13 = i13 + 1;

        goto label3;

     label4:
        $r27 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r27.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $l8 = (long) i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l8);

        return;
    }

    public void testReadExactlyBufferSize() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.api.common.io.DelimitedInputFormat $r6, $r7, $r8, $r9, $r12, $r14, $r15;
        long $l0, $l2, $l4;
        int $i1, $i3, i5;
        java.lang.Object $r10, $r13;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("aaaaaaa\nbbbbbbb\nccccccc\nddddddd\n");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $l0 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $i1 = (int) $l0;

        virtualinvoke $r6.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>($i1);

        $r7 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r8 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r2);

        i5 = 0;

     label1:
        $r9 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        $r11 = (java.lang.String) $r10;

        if $r11 == null goto label2;

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l4);

        i5 = i5 + 1;

        goto label1;

     label2:
        $r12 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r13);

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $l2 = (long) i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l2);

        return;
    }

    public void testReadRecordsLargerThanBuffer() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r2, $r7, $r10;
        org.apache.flink.core.fs.Path $r8, $r11;
        long $l0, $l1, $l2, $l3, $l5;
        java.lang.String[] $r9, $r12, $r34;
        org.apache.flink.configuration.Configuration $r13;
        org.apache.flink.api.common.io.DelimitedInputFormat $r14, $r15, $r17, $r18, $r21, $r23, $r24, $r25, $r26, $r29, $r31, $r32;
        java.util.ArrayList $r16;
        java.lang.Object $r19, $r22, $r27, $r30;
        java.lang.String $r20, $r28, $r33;
        boolean $z0, $z1;
        int $i4;
        java.util.List $r35;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("aaaaaaaaaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbbbbbbbbbb\nccccccccccccccccccc\nddddddddddddddddddddddddddddddddddd\n");

        $r7 = new org.apache.flink.core.fs.FileInputSplit;

        $r8 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l0 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l1 = $l0 / 2L;

        $r9 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r7.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r8, 0L, $l1, $r9);

        $r10 = new org.apache.flink.core.fs.FileInputSplit;

        $r11 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $l2 = virtualinvoke $r7.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $l3 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        $r12 = virtualinvoke r2.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r10.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(1, $r11, $l2, $l3, $r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>(8);

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r7);

     label1:
        $r18 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        $r20 = (java.lang.String) $r19;

        if $r20 == null goto label2;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label1;

     label2:
        $r21 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r22);

        $r23 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r23.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r24 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r24.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $r25 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r25.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r10);

     label3:
        $r26 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r27 = virtualinvoke $r26.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        $r28 = (java.lang.String) $r27;

        if $r28 == null goto label4;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label3;

     label4:
        $r29 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r30 = virtualinvoke $r29.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r30);

        $r31 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z1 = virtualinvoke $r31.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r32 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r32.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        $i4 = interfaceinvoke $r16.<java.util.List: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l5);

        $r33 = "aaaaaaaaaaaaaaaaaaaaa\nbbbbbbbbbbbbbbbbbbbbbbbbb\nccccccccccccccccccc\nddddddddddddddddddddddddddddddddddd\n";

        $r34 = virtualinvoke $r33.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $r35 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r34);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r16);

        return;
    }

    public void testDelimiterOnBufferBoundary() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.util.function.FunctionWithException $r1;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest$lambda_testDelimiterOnBufferBoundary_0__237: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testDelimiterOnBufferBoundary(org.apache.flink.util.function.FunctionWithException)>($r1);

        return;
    }

    public void testDelimiterOnBufferBoundaryWithWholeFileSplit() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.util.function.FunctionWithException $r1;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest$lambda_testDelimiterOnBufferBoundaryWithWholeFileSplit_1__238: org.apache.flink.util.function.FunctionWithException bootstrap$()>();

        specialinvoke r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testDelimiterOnBufferBoundary(org.apache.flink.util.function.FunctionWithException)>($r1);

        return;
    }

    private void testDelimiterOnBufferBoundary(org.apache.flink.util.function.FunctionWithException) throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.util.function.FunctionWithException r1;
        java.lang.String r4, r8, r9;
        org.apache.flink.core.fs.FileInputSplit r5;
        int i0, i1;
        java.lang.String[] $r10;
        java.lang.Object $r11, $r18, $r22;
        org.apache.flink.configuration.Configuration $r12;
        org.apache.flink.api.common.io.DelimitedInputFormat $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r1 := @parameter0: org.apache.flink.util.function.FunctionWithException;

        $r10 = newarray (java.lang.String)[3];

        $r10[0] = "1234567890<DEL?NO!>1234567890";

        $r10[1] = "1234567890<DEL?NO!>1234567890";

        $r10[2] = "<DEL?NO!>";

        r4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($r10, "<DELIM>");

        $r11 = interfaceinvoke r1.<org.apache.flink.util.function.FunctionWithException: java.lang.Object apply(java.lang.Object)>(r4);

        r5 = (org.apache.flink.core.fs.FileInputSplit) $r11;

        $r12 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r12.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r13 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormat: void setBufferSize(int)>(12);

        $r14 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void setDelimiter(java.lang.String)>("<DELIM>");

        $r15 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r15.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r12);

        $r16 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r5);

        i0 = lengthof $r10;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r8 = $r10[i1];

        $r21 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        r9 = (java.lang.String) $r22;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r8, r9);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r17 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: java.lang.Object nextRecord(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r18);

        $r19 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        $z0 = virtualinvoke $r19.<org.apache.flink.api.common.io.DelimitedInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r20 = r0.<org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.api.common.io.DelimitedInputFormat format>;

        virtualinvoke $r20.<org.apache.flink.api.common.io.DelimitedInputFormat: void close()>();

        return;
    }

    public void testGetStatistics() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        long l0, l1, l2, $l5;
        org.apache.flink.core.fs.Path r2, r4;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r6;
        java.lang.String $r7, $r8, $r12, $r14;
        int $i3, $i4;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat $r9;
        java.lang.String[] $r10;
        java.net.URI $r11, $r13;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r7 = "my mocked line 1\nmy mocked line 2\n";

        $i3 = virtualinvoke $r7.<java.lang.String: int length()>();

        l0 = (long) $i3;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.Path createTempFilePath(java.lang.String)>("my mocked line 1\nmy mocked line 2\n");

        $r8 = "my mocked line 1\nmy mocked line 2\nanother mocked line3\n";

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        l1 = (long) $i4;

        r4 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.Path createTempFilePath(java.lang.String)>("my mocked line 1\nmy mocked line 2\nanother mocked line3\n");

        l2 = l0 + l1;

        $r9 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        $r10 = newarray (java.lang.String)[2];

        $r11 = virtualinvoke r2.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String toString()>();

        $r10[0] = $r12;

        $r13 = virtualinvoke r4.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String toString()>();

        $r10[1] = $r14;

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePaths(java.lang.String[])>($r10);

        r6 = virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r6);

        $l5 = virtualinvoke r6.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", l2, $l5);

        return;
    }

    public void testGetStatisticsFileDoesNotExist() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r2;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat $r3;
        java.lang.String[] $r4;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        $r3 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "file:///path/does/not/really/exist";

        $r4[1] = "file:///another/path/that/does/not/exist";

        virtualinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePaths(java.lang.String[])>($r4);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("The file statistics should be null.", r2);

        return;
    }

    public void testGetStatisticsSingleFileWithCachedVersion() throws java.io.IOException
    {
        org.apache.flink.api.common.io.DelimitedInputFormatTest r0;
        org.apache.flink.core.fs.Path r2;
        long l0, $l3, $l4, $l5, $l6, $l7, $l8;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3, r4, r6, r8, $r16, $r19;
        java.lang.String $r9;
        int $i2;
        org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat $r10, $r12, $r14, $r17;
        org.apache.flink.configuration.Configuration $r11, $r13, $r15, $r18;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatTest;

        r2 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.Path createTempFilePath(java.lang.String)>("my mocked line 1\nmy mocked line 2\n");

        $r9 = "my mocked line 1\nmy mocked line 2\n";

        $i2 = virtualinvoke $r9.<java.lang.String: int length()>();

        l0 = (long) $i2;

        $r10 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>(r2);

        $r11 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r11.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r11);

        r3 = virtualinvoke $r10.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3);

        $l3 = virtualinvoke r3.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", l0, $l3);

        $r12 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>(r2);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

        r4 = virtualinvoke $r12.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Statistics object was changed.", r4, r3);

        $r14 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>(r2);

        $r15 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r15.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r15);

        $r16 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l4 = virtualinvoke r3.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        specialinvoke $r16.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l4, 10065L, -1.0F);

        r6 = virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r16);

        $l5 = interfaceinvoke r6.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", 10065L, $l5);

        $r17 = new org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat;

        specialinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormatTest$MyTextInputFormat: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: void setFilePath(org.apache.flink.core.fs.Path)>(r2);

        $r18 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r18.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

        $r19 = new org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics;

        $l6 = virtualinvoke r3.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: long getLastModificationTime()>();

        $l7 = $l6 - 1L;

        specialinvoke $r19.<org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics: void <init>(long,long,float)>($l7, 10065L, -1.0F);

        r8 = virtualinvoke $r17.<org.apache.flink.api.common.io.DelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>($r19);

        $l8 = interfaceinvoke r8.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size from the statistics is wrong.", l0, $l8);

        return;
    }

    static org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r17;
        java.io.File r1;
        java.io.OutputStreamWriter $r5;
        java.io.FileOutputStream $r6;
        java.lang.Throwable $r7, $r8, $r10, r11;
        org.apache.flink.core.fs.FileInputSplit $r14;
        org.apache.flink.core.fs.Path $r15;
        java.net.URI $r16;
        long $l0;
        java.lang.String[] $r18;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r5 = new java.io.OutputStreamWriter;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);

        r11 = null;

     label01:
        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>(r0);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<java.io.Writer: void close()>();

        goto label12;

     label04:
        $r7 := @caughtexception;

        r11 = $r7;

        throw $r7;

     label05:
        $r10 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r11 == null goto label10;

     label07:
        virtualinvoke $r5.<java.io.Writer: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke $r5.<java.io.Writer: void close()>();

     label11:
        throw $r10;

     label12:
        $r14 = new org.apache.flink.core.fs.FileInputSplit;

        $r15 = new org.apache.flink.core.fs.Path;

        $r16 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r17 = virtualinvoke $r16.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r17);

        $l0 = virtualinvoke r1.<java.io.File: long length()>();

        $r18 = newarray (java.lang.String)[1];

        $r18[0] = "localhost";

        specialinvoke $r14.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r15, 0L, $l0, $r18);

        return $r14;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    static org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1, $r18;
        java.io.File r2;
        java.io.OutputStreamWriter $r6;
        java.io.FileOutputStream $r7;
        java.lang.Throwable $r8, $r9, $r11, r12;
        org.apache.flink.core.fs.FileInputSplit $r15;
        org.apache.flink.core.fs.Path $r16;
        java.net.URI $r17;
        long $l0;
        java.lang.String[] $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp");

        virtualinvoke r2.<java.io.File: void deleteOnExit()>();

        $r6 = new java.io.OutputStreamWriter;

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r7, r1);

        r12 = null;

     label01:
        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(r0);

     label02:
        if $r6 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r6.<java.io.Writer: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r12 = $r9;

        throw $r9;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r6 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke $r6.<java.io.Writer: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke $r6.<java.io.Writer: void close()>();

     label11:
        throw $r11;

     label12:
        $r15 = new org.apache.flink.core.fs.FileInputSplit;

        $r16 = new org.apache.flink.core.fs.Path;

        $r17 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $r18 = virtualinvoke $r17.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r18);

        $l0 = virtualinvoke r2.<java.io.File: long length()>();

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "localhost";

        specialinvoke $r15.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r16, 0L, $l0, $r19);

        return $r15;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static org.apache.flink.core.fs.Path createTempFilePath(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r16;
        java.io.File r1;
        java.io.OutputStreamWriter $r5;
        java.io.FileOutputStream $r6;
        java.lang.Throwable $r8, $r9, $r10, r11;
        org.apache.flink.core.fs.Path $r14;
        java.net.URI $r15;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r5 = new java.io.OutputStreamWriter;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r6);

        r11 = null;

     label01:
        virtualinvoke $r5.<java.io.OutputStreamWriter: void write(java.lang.String)>(r0);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<java.io.OutputStreamWriter: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r11 = $r9;

        throw $r9;

     label05:
        $r10 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r11 == null goto label10;

     label07:
        virtualinvoke $r5.<java.io.OutputStreamWriter: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke $r5.<java.io.OutputStreamWriter: void close()>();

     label11:
        throw $r10;

     label12:
        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r16 = virtualinvoke $r15.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r16);

        return $r14;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public static org.apache.flink.core.fs.FileInputSplit lambda$testDelimiterOnBufferBoundaryWithWholeFileSplit$1(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.flink.core.fs.FileInputSplit r1, $r2;
        org.apache.flink.core.fs.Path $r3;
        java.lang.String[] $r4;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>(r0);

        $r2 = new org.apache.flink.core.fs.FileInputSplit;

        $r3 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r4 = virtualinvoke r1.<org.apache.flink.core.fs.FileInputSplit: java.lang.String[] getHostnames()>();

        specialinvoke $r2.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r3, 0L, -1L, $r4);

        return $r2;
    }

    public static org.apache.flink.core.fs.FileInputSplit lambda$testDelimiterOnBufferBoundary$0(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        org.apache.flink.core.fs.FileInputSplit $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>(r0);

        return $r1;
    }
}
