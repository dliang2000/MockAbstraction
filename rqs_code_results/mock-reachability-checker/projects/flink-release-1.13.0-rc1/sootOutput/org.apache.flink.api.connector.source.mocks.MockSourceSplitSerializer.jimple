public class org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer extends java.lang.Object implements org.apache.flink.core.io.SimpleVersionedSerializer
{

    public void <init>()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        return 0;
    }

    public byte[] serialize(org.apache.flink.api.connector.source.mocks.MockSourceSplit) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit r1;
        byte[] $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        r1 := @parameter0: org.apache.flink.api.connector.source.mocks.MockSourceSplit;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r1);

        return $r2;
    }

    public org.apache.flink.api.connector.source.mocks.MockSourceSplit deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;
        int i0;
        byte[] r1;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        java.lang.Object $r5;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit $r6;
        java.lang.ClassNotFoundException $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

     label1:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r1, $r4);

        $r6 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to deserialize the split.", $r7);

        throw $r8;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public volatile java.lang.Object deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;
        int i0;
        byte[] r1;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer: org.apache.flink.api.connector.source.mocks.MockSourceSplit deserialize(int,byte[])>(i0, r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer r0;
        java.lang.Object r1;
        org.apache.flink.api.connector.source.mocks.MockSourceSplit $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.connector.source.mocks.MockSourceSplit) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSourceSplitSerializer: byte[] serialize(org.apache.flink.api.connector.source.mocks.MockSourceSplit)>($r2);

        return $r3;
    }
}
