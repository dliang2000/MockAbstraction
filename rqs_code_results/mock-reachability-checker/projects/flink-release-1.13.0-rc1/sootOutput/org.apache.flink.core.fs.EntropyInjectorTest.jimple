public class org.apache.flink.core.fs.EntropyInjectorTest extends java.lang.Object
{
    public static final org.junit.rules.TemporaryFolder TMP_FOLDER;

    public void <init>()
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testEmptyPath() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("test", "ignored");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs://localhost:12345");

        $r5 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        return;
    }

    public void testFullUriNonMatching() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("_entropy_key_", "ignored");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://hugo@myawesomehost:55522/path/to/the/file");

        $r5 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        return;
    }

    public void testFullUriMatching() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("s0mek3y", "12345678");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://hugo@myawesomehost:55522/path/s0mek3y/the/file");

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://hugo@myawesomehost:55522/path/12345678/the/file");

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://hugo@myawesomehost:55522/path/the/file");

        $r8 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testPathOnlyNonMatching() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("_entropy_key_", "ignored");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/path/file");

        $r5 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        return;
    }

    public void testPathOnlyMatching() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("_entropy_key_", "xyzz");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/path/_entropy_key_/file");

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/path/xyzz/file");

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/path/file");

        $r8 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testEntropyNotFullSegment() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r3;
        org.apache.flink.core.fs.Path $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r3 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r3.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("_entropy_key_", "pqr");

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://myhost:122/entropy-_entropy_key_-suffix/file");

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://myhost:122/entropy-pqr-suffix/file");

        $r6 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("s3://myhost:122/entropy--suffix/file");

        $r8 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.Path resolveEntropy(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.EntropyInjectingFileSystem,boolean)>($r4, $r3, 0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public void testCreateEntropyAwarePlainFs() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        java.io.File r1, $r11, $r12;
        org.apache.flink.core.fs.OutputStreamAndPath r3;
        org.junit.rules.TemporaryFolder $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r10;
        org.apache.flink.core.fs.local.LocalFileSystem $r7;
        org.apache.flink.core.fs.FileSystem$WriteMode $r8;
        org.apache.flink.core.fs.FSDataOutputStream $r9;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r4 = <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER>;

        r1 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r5 = new org.apache.flink.core.fs.Path;

        $r6 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r1);

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r6, "_entropy_/file");

        $r7 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        $r8 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r3 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r7, $r5, $r8);

        $r9 = virtualinvoke r3.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.FSDataOutputStream stream()>();

        virtualinvoke $r9.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        $r10 = virtualinvoke r3.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.Path path()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r10);

        $r11 = new java.io.File;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "_entropy_");

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "file");

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCreateEntropyAwareEntropyFs() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        java.io.File r1, $r17, $r18;
        org.apache.flink.core.fs.OutputStreamAndPath r5;
        org.junit.rules.TemporaryFolder $r6;
        org.apache.flink.core.fs.Path $r7, $r8, $r9, $r10, $r14, $r15, $r16;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r11;
        org.apache.flink.core.fs.FileSystem$WriteMode $r12;
        org.apache.flink.core.fs.FSDataOutputStream $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r6 = <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER>;

        r1 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r7 = new org.apache.flink.core.fs.Path;

        $r8 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r1);

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r8, "_entropy_/file");

        $r9 = new org.apache.flink.core.fs.Path;

        $r10 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r1);

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r10, "test-entropy/file");

        $r11 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r11.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("_entropy_", "test-entropy");

        $r12 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r5 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r11, $r7, $r12);

        $r13 = virtualinvoke r5.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.FSDataOutputStream stream()>();

        virtualinvoke $r13.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r1);

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r15, "test-entropy/file");

        $r16 = virtualinvoke r5.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.Path path()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r16);

        $r17 = new java.io.File;

        $r18 = new java.io.File;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "test-entropy");

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r18, "file");

        $z0 = virtualinvoke $r17.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testWithSafetyNet() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        java.io.File r3;
        org.apache.flink.core.fs.FSDataOutputStream r7;
        org.apache.flink.core.fs.FileSystem r8;
        org.junit.rules.TemporaryFolder $r10;
        org.apache.flink.core.fs.Path $r11, $r12, $r13, $r14, $r17;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r15;
        org.apache.flink.core.fs.FileSystem$WriteMode $r16;
        java.io.IOException $r18;
        java.lang.Throwable $r19;
        org.apache.flink.core.fs.OutputStreamAndPath r20;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r10 = <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER>;

        r3 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r11 = new org.apache.flink.core.fs.Path;

        $r12 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r12, "__ekey__/path/");

        $r13 = new org.apache.flink.core.fs.Path;

        $r14 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r14, "abc/path/");

        $r15 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r15.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("__ekey__", "abc");

        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void initializeSafetyNetForThread()>();

        r8 = staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: org.apache.flink.core.fs.FileSystem wrapWithSafetyNetWhenActivated(org.apache.flink.core.fs.FileSystem)>($r15);

     label1:
        $r16 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r20 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r8, $r11, $r16);

        r7 = virtualinvoke r20.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.FSDataOutputStream stream()>();

        $r17 = virtualinvoke r20.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.Path path()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r17);

     label2:
        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void closeSafetyNetAndGuardedResourcesForThread()>();

        goto label5;

     label3:
        $r19 := @caughtexception;

     label4:
        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void closeSafetyNetAndGuardedResourcesForThread()>();

        throw $r19;

     label5:
        virtualinvoke r7.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(42);

        virtualinvoke r7.<org.apache.flink.core.fs.FSDataOutputStream: void flush()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("stream should be already close and hence fail with an exception");

     label6:
        goto label8;

     label7:
        $r18 := @caughtexception;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void testClassLoaderFixingFsWithSafeyNet() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        java.io.File r3;
        org.apache.flink.core.fs.PluginFileSystemFactory r6;
        org.apache.flink.core.fs.FileSystem r7, r8;
        org.apache.flink.core.fs.OutputStreamAndPath r9;
        org.junit.rules.TemporaryFolder $r11;
        org.apache.flink.core.fs.Path $r12, $r13, $r14, $r15, $r19;
        org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory $r16;
        java.net.URI $r17;
        org.apache.flink.core.fs.FileSystem$WriteMode $r18;
        java.lang.Throwable $r20;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r11 = <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER>;

        r3 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r13, "__ekey__/path/");

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r15, "abc/path/");

        $r16 = new org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory;

        specialinvoke $r16.<org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory: void <init>(java.lang.String,java.lang.String)>("__ekey__", "abc");

        r6 = staticinvoke <org.apache.flink.core.fs.PluginFileSystemFactory: org.apache.flink.core.fs.PluginFileSystemFactory of(org.apache.flink.core.fs.FileSystemFactory)>($r16);

        $r17 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("test");

        r7 = virtualinvoke r6.<org.apache.flink.core.fs.PluginFileSystemFactory: org.apache.flink.core.fs.FileSystem create(java.net.URI)>($r17);

        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void initializeSafetyNetForThread()>();

        r8 = staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: org.apache.flink.core.fs.FileSystem wrapWithSafetyNetWhenActivated(org.apache.flink.core.fs.FileSystem)>(r7);

     label1:
        $r18 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r9 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r8, $r12, $r18);

        $r19 = virtualinvoke r9.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.Path path()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r19);

     label2:
        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void closeSafetyNetAndGuardedResourcesForThread()>();

        goto label5;

     label3:
        $r20 := @caughtexception;

     label4:
        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void closeSafetyNetAndGuardedResourcesForThread()>();

        throw $r20;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testClassLoaderFixingFsWithoutSafeyNet() throws java.lang.Exception
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        java.io.File r3;
        org.apache.flink.core.fs.PluginFileSystemFactory r6;
        org.apache.flink.core.fs.FileSystem r7;
        org.apache.flink.core.fs.OutputStreamAndPath r8;
        org.junit.rules.TemporaryFolder $r9;
        org.apache.flink.core.fs.Path $r10, $r11, $r12, $r13, $r17;
        org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory $r14;
        java.net.URI $r15;
        org.apache.flink.core.fs.FileSystem$WriteMode $r16;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r9 = <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER>;

        r3 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r10 = new org.apache.flink.core.fs.Path;

        $r11 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r11, "__ekey__/path/");

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r3);

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r13, "abc/path/");

        $r14 = new org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory;

        specialinvoke $r14.<org.apache.flink.core.fs.EntropyInjectorTest$TestFileSystemFactory: void <init>(java.lang.String,java.lang.String)>("__ekey__", "abc");

        r6 = staticinvoke <org.apache.flink.core.fs.PluginFileSystemFactory: org.apache.flink.core.fs.PluginFileSystemFactory of(org.apache.flink.core.fs.FileSystemFactory)>($r14);

        $r15 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("test");

        r7 = virtualinvoke r6.<org.apache.flink.core.fs.PluginFileSystemFactory: org.apache.flink.core.fs.FileSystem create(java.net.URI)>($r15);

        $r16 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r8 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: org.apache.flink.core.fs.OutputStreamAndPath createEntropyAware(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r7, $r10, $r16);

        $r17 = virtualinvoke r8.<org.apache.flink.core.fs.OutputStreamAndPath: org.apache.flink.core.fs.Path path()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r17);

        return;
    }

    public void testIsEntropyFs()
    {
        org.apache.flink.core.fs.EntropyInjectorTest r0;
        org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.EntropyInjectorTest;

        $r2 = new org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs;

        specialinvoke $r2.<org.apache.flink.core.fs.EntropyInjectorTest$TestEntropyInjectingFs: void <init>(java.lang.String,java.lang.String)>("test", "ignored");

        $z0 = staticinvoke <org.apache.flink.core.fs.EntropyInjector: boolean isEntropyInjecting(org.apache.flink.core.fs.FileSystem)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    static void <clinit>()
    {
        org.junit.rules.TemporaryFolder $r0;

        $r0 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r0.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.core.fs.EntropyInjectorTest: org.junit.rules.TemporaryFolder TMP_FOLDER> = $r0;

        return;
    }
}
