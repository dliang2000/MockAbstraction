public class org.apache.flink.configuration.DelegatingConfigurationTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.configuration.DelegatingConfigurationTest r0;

        r0 := @this: org.apache.flink.configuration.DelegatingConfigurationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIfDelegatesImplementAllMethods() throws java.lang.IllegalArgumentException
    {
        org.apache.flink.configuration.DelegatingConfigurationTest r0;
        java.lang.reflect.Method[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.reflect.Method r4, r6;
        java.lang.Class[] r7, r8;
        java.lang.Class $r9, $r10, $r19, $r20;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;
        java.lang.String $r13, $r16, $r17, $r18;

        r0 := @this: org.apache.flink.configuration.DelegatingConfigurationTest;

        $r9 = class "Lorg/apache/flink/configuration/Configuration;";

        r1 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $r10 = class "Lorg/apache/flink/configuration/DelegatingConfiguration;";

        r2 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r1;

        i6 = 0;

     label01:
        if i6 >= i0 goto label11;

        r4 = r1[i6];

        i1 = virtualinvoke r4.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i1);

        if $z0 == 0 goto label10;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i1);

        if $z1 == 0 goto label02;

        goto label10;

     label02:
        z3 = 0;

        i2 = lengthof r2;

        i7 = 0;

     label03:
        if i7 >= i2 goto label09;

        r6 = r2[i7];

        $r17 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r18 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z2 == 0 goto label08;

        r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r8 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof r7;

        $i3 = lengthof r8;

        if $i4 == $i3 goto label04;

        goto label08;

     label04:
        i8 = 0;

     label05:
        $i5 = lengthof r7;

        if i8 >= $i5 goto label07;

        $r20 = r7[i8];

        $r19 = r8[i8];

        if $r20 == $r19 goto label06;

        goto label08;

     label06:
        i8 = i8 + 1;

        goto label05;

     label07:
        z3 = 1;

        goto label09;

     label08:
        i7 = i7 + 1;

        goto label03;

     label09:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration method \'");

        $r13 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has not been wrapped correctly in DelegatingConfiguration wrapper");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r16, z3);

     label10:
        i6 = i6 + 1;

        goto label01;

     label11:
        return;
    }

    public void testDelegationConfigurationWithNullPrefix()
    {
        org.apache.flink.configuration.DelegatingConfigurationTest r0;
        java.util.Set r3, $r6;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.DelegatingConfiguration $r5;

        r0 := @this: org.apache.flink.configuration.DelegatingConfigurationTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>("test-key", "value");

        $r5 = new org.apache.flink.configuration.DelegatingConfiguration;

        specialinvoke $r5.<org.apache.flink.configuration.DelegatingConfiguration: void <init>(org.apache.flink.configuration.Configuration,java.lang.String)>($r4, null);

        r3 = virtualinvoke $r5.<org.apache.flink.configuration.DelegatingConfiguration: java.util.Set keySet()>();

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.util.Set keySet()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r6);

        return;
    }

    public void testDelegationConfigurationWithPrefix()
    {
        org.apache.flink.configuration.DelegatingConfigurationTest r0;
        org.apache.flink.configuration.Configuration $r3, $r11;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        org.apache.flink.configuration.DelegatingConfiguration $r8, $r12;
        int $i0;
        long $l1;
        java.util.Iterator $r9;
        java.lang.Object $r10;
        boolean $z0;
        java.util.Set r15, r18;

        r0 := @this: org.apache.flink.configuration.DelegatingConfigurationTest;

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pref-");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>($r7, "value");

        $r8 = new org.apache.flink.configuration.DelegatingConfiguration;

        specialinvoke $r8.<org.apache.flink.configuration.DelegatingConfiguration: void <init>(org.apache.flink.configuration.Configuration,java.lang.String)>($r3, "pref-");

        r15 = virtualinvoke $r8.<org.apache.flink.configuration.DelegatingConfiguration: java.util.Set keySet()>();

        $i0 = interfaceinvoke r15.<java.util.Set: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 1L);

        $r9 = interfaceinvoke r15.<java.util.Set: java.util.Iterator iterator()>();

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, "key");

        $r11 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r11.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.configuration.Configuration: void setValueInternal(java.lang.String,java.lang.Object)>("test-key", "value");

        $r12 = new org.apache.flink.configuration.DelegatingConfiguration;

        specialinvoke $r12.<org.apache.flink.configuration.DelegatingConfiguration: void <init>(org.apache.flink.configuration.Configuration,java.lang.String)>($r11, "pref-");

        r18 = virtualinvoke $r12.<org.apache.flink.configuration.DelegatingConfiguration: java.util.Set keySet()>();

        $z0 = interfaceinvoke r18.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testDelegationConfigurationToMapConsistentWithAddAllToProperties()
    {
        org.apache.flink.configuration.DelegatingConfigurationTest r0;
        java.util.Map r4;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        org.apache.flink.configuration.Configuration $r8;
        org.apache.flink.configuration.DelegatingConfiguration $r9;
        java.util.Properties $r10, $r11;
        java.util.Set $r12;
        boolean $z0;
        java.lang.Object $r13, $r14, $r15;

        r0 := @this: org.apache.flink.configuration.DelegatingConfigurationTest;

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("k0", "v0");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("prefix.k1", "v1");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("prefix.prefix.k2", "v2");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("k3.prefix.prefix.k3", "v3");

        $r9 = new org.apache.flink.configuration.DelegatingConfiguration;

        specialinvoke $r9.<org.apache.flink.configuration.DelegatingConfiguration: void <init>(org.apache.flink.configuration.Configuration,java.lang.String)>($r8, "prefix.");

        $r10 = new java.util.Properties;

        specialinvoke $r10.<java.util.Properties: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.configuration.DelegatingConfiguration: void addAllToProperties(java.util.Properties)>($r10);

        r4 = virtualinvoke $r9.<org.apache.flink.configuration.DelegatingConfiguration: java.util.Map toMap()>();

        $r11 = new java.util.Properties;

        specialinvoke $r11.<java.util.Properties: void <init>()>();

        $r12 = interfaceinvoke r4.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r13;

        $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r11.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label1;

     label2:
        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        return;
    }
}
