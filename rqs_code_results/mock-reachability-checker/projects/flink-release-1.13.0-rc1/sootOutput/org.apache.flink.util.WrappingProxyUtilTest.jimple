public class org.apache.flink.util.WrappingProxyUtilTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.WrappingProxyUtilTest r0;

        r0 := @this: org.apache.flink.util.WrappingProxyUtilTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testThrowsExceptionIfTooManyProxies()
    {
        org.apache.flink.util.WrappingProxyUtilTest r0;
        org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        org.hamcrest.Matcher $r6;

        r0 := @this: org.apache.flink.util.WrappingProxyUtilTest;

     label1:
        $r2 = new org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy;

        specialinvoke $r2.<org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy: void <init>(int,org.apache.flink.util.WrappingProxyUtilTest$1)>(128, null);

        staticinvoke <org.apache.flink.util.WrappingProxyUtil: java.lang.Object stripProxy(org.apache.flink.util.WrappingProxy)>($r2);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Expected exception not thrown");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher containsString(java.lang.String)>("Are there loops in the object graph?");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public void testStripsAllProxies()
    {
        org.apache.flink.util.WrappingProxyUtilTest r0;
        org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy $r2;
        java.lang.Object $r3;
        org.hamcrest.Matcher $r4, $r5, $r6;

        r0 := @this: org.apache.flink.util.WrappingProxyUtilTest;

        $r2 = new org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy;

        specialinvoke $r2.<org.apache.flink.util.WrappingProxyUtilTest$SelfWrappingProxy: void <init>(int,org.apache.flink.util.WrappingProxyUtilTest$1)>(127, null);

        $r3 = staticinvoke <org.apache.flink.util.WrappingProxyUtil: java.lang.Object stripProxy(org.apache.flink.util.WrappingProxy)>($r2);

        $r4 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/util/WrappingProxyUtilTest$SelfWrappingProxy;");

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r4);

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r6);

        return;
    }
}
