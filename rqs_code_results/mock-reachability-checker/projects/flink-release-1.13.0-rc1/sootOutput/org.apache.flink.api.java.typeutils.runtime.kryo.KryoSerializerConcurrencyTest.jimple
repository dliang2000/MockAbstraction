public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDuplicateSerializerWithDefaultSerializerClass()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$WrappedString;", class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$TestSerializer;");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void runDuplicateSerializerTest(org.apache.flink.api.common.ExecutionConfig)>($r2);

        return;
    }

    public void testDuplicateSerializerWithDefaultSerializerInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$WrappedString;", $r3);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void runDuplicateSerializerTest(org.apache.flink.api.common.ExecutionConfig)>($r2);

        return;
    }

    public void testDuplicateSerializerWithRegisteredSerializerClass()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void registerTypeWithKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$WrappedString;", class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$TestSerializer;");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void runDuplicateSerializerTest(org.apache.flink.api.common.ExecutionConfig)>($r2);

        return;
    }

    public void testDuplicateSerializerWithRegisteredSerializerInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$TestSerializer: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void registerTypeWithKryoSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$WrappedString;", $r3);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void runDuplicateSerializerTest(org.apache.flink.api.common.ExecutionConfig)>($r2);

        return;
    }

    private void runDuplicateSerializerTest(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r3, $r7;
        java.lang.String r5, r6, $r13, $r14;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString $r8, $r10, $r12;
        java.lang.Object $r9, $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r7 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerConcurrencyTest$WrappedString;", r1);

        r3 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer duplicate()>();

        $r8 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString: void <init>(java.lang.String)>("test");

        $r9 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copy(java.lang.Object)>($r8);

        $r10 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString) $r9;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString: java.lang.String access$000(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString)>($r10);

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copy(java.lang.Object)>($r8);

        $r12 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString) $r11;

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString: java.lang.String access$000(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString)>($r12);

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString: java.lang.String access$000(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString)>($r8);

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r14 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString: java.lang.String access$000(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$WrappedString)>($r8);

        $z1 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>($r14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r5, r6);

        return;
    }

    public void testConcurrentUseOfSerializer() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r8;
        org.apache.flink.api.common.ExecutionConfig $r9;
        org.apache.flink.core.testutils.BlockerSync $r10;
        org.apache.flink.core.memory.DataOutputSerializer $r11;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView $r12;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$1 $r13;
        java.lang.Throwable $r14;
        java.lang.IllegalStateException $r15;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        $r8 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r9 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r9);

        $r10 = new org.apache.flink.core.testutils.BlockerSync;

        specialinvoke $r10.<org.apache.flink.core.testutils.BlockerSync: void <init>()>();

        $r11 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r11.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(32);

        $r12 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$LockingView: void <init>(org.apache.flink.core.testutils.BlockerSync)>($r10);

        $r13 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$1;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest$1: void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest,java.lang.String,org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer,org.apache.flink.core.memory.DataOutputView)>(r0, "serializer", $r8, $r12);

        virtualinvoke $r13.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r10.<org.apache.flink.core.testutils.BlockerSync: void awaitBlocker()>();

     label1:
        virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>("value", $r11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should have failed with an exception");

     label2:
        virtualinvoke $r10.<org.apache.flink.core.testutils.BlockerSync: void releaseBlocker()>();

        goto label7;

     label3:
        $r15 := @caughtexception;

     label4:
        virtualinvoke $r10.<org.apache.flink.core.testutils.BlockerSync: void releaseBlocker()>();

        goto label7;

     label5:
        $r14 := @caughtexception;

     label6:
        virtualinvoke $r10.<org.apache.flink.core.testutils.BlockerSync: void releaseBlocker()>();

        throw $r14;

     label7:
        virtualinvoke $r13.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
