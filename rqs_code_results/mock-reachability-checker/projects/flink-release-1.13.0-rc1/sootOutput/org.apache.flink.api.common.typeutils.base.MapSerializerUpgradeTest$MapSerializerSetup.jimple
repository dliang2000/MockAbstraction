public final class org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$PreUpgradeSetup
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createPriorSerializer()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup r0;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r1;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r2;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup;

        $r1 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r3 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r2 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r1;
    }

    public java.util.Map createTestData()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup r0;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(3);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public volatile java.lang.Object createTestData()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializerUpgradeTest$MapSerializerSetup: java.util.Map createTestData()>();

        return $r1;
    }
}
