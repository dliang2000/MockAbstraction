class org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 extends org.apache.flink.api.common.functions.RichMapPartitionFunction
{
    final java.util.concurrent.atomic.AtomicBoolean val$opened;
    final java.util.concurrent.atomic.AtomicBoolean val$closed;
    final org.apache.flink.api.common.operators.base.PartitionMapOperatorTest this$0;

    void <init>(org.apache.flink.api.common.operators.base.PartitionMapOperatorTest, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.atomic.AtomicBoolean)
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 r0;
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest r1;
        java.util.concurrent.atomic.AtomicBoolean r2, r3;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicBoolean;

        r3 := @parameter2: java.util.concurrent.atomic.AtomicBoolean;

        r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest this$0> = r1;

        r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: java.util.concurrent.atomic.AtomicBoolean val$opened> = r2;

        r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: java.util.concurrent.atomic.AtomicBoolean val$closed> = r3;

        specialinvoke r0.<org.apache.flink.api.common.functions.RichMapPartitionFunction: void <init>()>();

        return;
    }

    public void open(org.apache.flink.configuration.Configuration) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 r0;
        org.apache.flink.configuration.Configuration r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r3 = r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: java.util.concurrent.atomic.AtomicBoolean val$opened>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: org.apache.flink.api.common.functions.RuntimeContext getRuntimeContext()>();

        $i0 = interfaceinvoke r2.<org.apache.flink.api.common.functions.RuntimeContext: int getIndexOfThisSubtask()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = interfaceinvoke r2.<org.apache.flink.api.common.functions.RuntimeContext: int getNumberOfParallelSubtasks()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r4 = interfaceinvoke r2.<org.apache.flink.api.common.functions.RuntimeContext: java.lang.String getTaskName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("Test Task", $r4);

        return;
    }

    public void mapPartition(java.lang.Iterable, org.apache.flink.util.Collector)
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 r0;
        java.lang.Iterable r1;
        org.apache.flink.util.Collector r2;
        java.util.Iterator r3;
        java.lang.String r4;
        boolean $z0;
        java.lang.Object $r5;
        int $i0;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: org.apache.flink.util.Collector;

        r3 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r5;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r4);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r2.<org.apache.flink.util.Collector: void collect(java.lang.Object)>($r6);

        goto label1;

     label2:
        return;
    }

    public void close() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1 r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1;

        $r1 = r0.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest$1: java.util.concurrent.atomic.AtomicBoolean val$closed>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }
}
