public class org.apache.flink.util.ProcessorArchitectureTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.ProcessorArchitectureTest r0;

        r0 := @this: org.apache.flink.util.ProcessorArchitectureTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testArchitectureNotUnknown()
    {
        org.apache.flink.util.ProcessorArchitectureTest r0;
        org.apache.flink.util.ProcessorArchitecture r1, $r2;

        r0 := @this: org.apache.flink.util.ProcessorArchitectureTest;

        r1 = staticinvoke <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture getProcessorArchitecture()>();

        $r2 = <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture UNKNOWN>;

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    public void testNamesNotNull()
    {
        org.apache.flink.util.ProcessorArchitectureTest r0;
        org.apache.flink.util.ProcessorArchitecture r1;
        java.lang.String $r2;
        java.util.List $r3;

        r0 := @this: org.apache.flink.util.ProcessorArchitectureTest;

        r1 = staticinvoke <org.apache.flink.util.ProcessorArchitecture: org.apache.flink.util.ProcessorArchitecture getProcessorArchitecture()>();

        $r2 = virtualinvoke r1.<org.apache.flink.util.ProcessorArchitecture: java.lang.String getArchitectureName()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r1.<org.apache.flink.util.ProcessorArchitecture: java.util.List getAlternativeNames()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r3);

        return;
    }
}
