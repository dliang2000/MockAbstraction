public class org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest r0;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDeSerialization()
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest r0;
        int i0, i1;
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO r4, r6, $r10, $r14, $r17, $r19;
        byte[] r5;
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema $r7;
        org.apache.flink.api.common.ExecutionConfig $r8;
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO[] $r9;
        java.util.Date[] $r11, $r15, $r18, $r20;
        java.util.Date $r12, $r13, $r16, $r21;
        java.lang.Object $r22;
        java.lang.Exception $r23;
        java.lang.String $r24;
        org.apache.flink.api.common.typeinfo.TypeInformation r25;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest;

     label1:
        r25 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/serialization/TypeInformationSerializationSchemaTest$MyPOJO;");

        $r7 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r7.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig)>(r25, $r8);

        $r9 = newarray (org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO)[4];

        $r10 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO;

        $r11 = newarray (java.util.Date)[2];

        $r12 = new java.util.Date;

        specialinvoke $r12.<java.util.Date: void <init>(long)>(763784523L);

        $r11[0] = $r12;

        $r13 = new java.util.Date;

        specialinvoke $r13.<java.util.Date: void <init>(long)>(88234L);

        $r11[1] = $r13;

        specialinvoke $r10.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO: void <init>(int,java.util.Date[])>(72, $r11);

        $r9[0] = $r10;

        $r14 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO;

        $r15 = newarray (java.util.Date)[1];

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>(long)>(11111111111111L);

        $r15[0] = $r16;

        specialinvoke $r14.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO: void <init>(int,java.util.Date[])>(-1, $r15);

        $r9[1] = $r14;

        $r17 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO;

        $r18 = newarray (java.util.Date)[0];

        specialinvoke $r17.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO: void <init>(int,java.util.Date[])>(42, $r18);

        $r9[2] = $r17;

        $r19 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO;

        $r20 = newarray (java.util.Date)[1];

        $r21 = new java.util.Date;

        specialinvoke $r21.<java.util.Date: void <init>(long)>(222763784523L);

        $r20[0] = $r21;

        specialinvoke $r19.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO: void <init>(int,java.util.Date[])>(17, $r20);

        $r9[3] = $r19;

        i0 = lengthof $r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = $r9[i1];

        r5 = virtualinvoke $r7.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: byte[] serialize(java.lang.Object)>(r4);

        $r22 = virtualinvoke $r7.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: java.lang.Object deserialize(byte[])>(r5);

        r6 = (org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest$MyPOJO) $r22;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

        $r24 = virtualinvoke $r23.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r24);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testSerializability()
    {
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest r0;
        org.apache.flink.api.common.serialization.TypeInformationSerializationSchema $r2;
        org.apache.flink.api.common.ExecutionConfig $r3;
        java.lang.Exception $r5;
        java.lang.String $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation r7;

        r0 := @this: org.apache.flink.api.common.serialization.TypeInformationSerializationSchemaTest;

     label1:
        r7 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/serialization/TypeInformationSerializationSchemaTest$MyPOJO;");

        $r2 = new org.apache.flink.api.common.serialization.TypeInformationSerializationSchema;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r2.<org.apache.flink.api.common.serialization.TypeInformationSerializationSchema: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig)>(r7, $r3);

        staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r6 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r6);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
