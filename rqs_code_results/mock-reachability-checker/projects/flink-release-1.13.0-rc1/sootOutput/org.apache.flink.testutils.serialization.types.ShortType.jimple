public class org.apache.flink.testutils.serialization.types.ShortType extends java.lang.Object implements org.apache.flink.testutils.serialization.types.SerializationTestType
{
    private short value;

    public void <init>()
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.ShortType: short value> = 0;

        return;
    }

    private void <init>(short)
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;
        short s0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        s0 := @parameter0: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.serialization.types.ShortType: short value> = s0;

        return;
    }

    public org.apache.flink.testutils.serialization.types.ShortType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ShortType r0, $r2;
        java.util.Random r1;
        int $i0;
        short $s1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        r1 := @parameter0: java.util.Random;

        $r2 = new org.apache.flink.testutils.serialization.types.ShortType;

        $i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(65536);

        $s1 = (short) $i0;

        specialinvoke $r2.<org.apache.flink.testutils.serialization.types.ShortType: void <init>(short)>($s1);

        return $r2;
    }

    public int length()
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        return 2;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;
        org.apache.flink.core.memory.DataOutputView r1;
        short $s0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $s0 = r0.<org.apache.flink.testutils.serialization.types.ShortType: short value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>($s0);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;
        org.apache.flink.core.memory.DataInputView r1;
        short $s0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $s0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        r0.<org.apache.flink.testutils.serialization.types.ShortType: short value> = $s0;

        return;
    }

    public int hashCode()
    {
        org.apache.flink.testutils.serialization.types.ShortType r0;
        short $s0;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        $s0 = r0.<org.apache.flink.testutils.serialization.types.ShortType: short value>;

        return $s0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.testutils.serialization.types.ShortType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        short $s0, $s1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.testutils.serialization.types.ShortType;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.testutils.serialization.types.ShortType) r1;

        $s1 = r0.<org.apache.flink.testutils.serialization.types.ShortType: short value>;

        $s0 = r2.<org.apache.flink.testutils.serialization.types.ShortType: short value>;

        if $s1 != $s0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public volatile org.apache.flink.testutils.serialization.types.SerializationTestType getRandom(java.util.Random)
    {
        org.apache.flink.testutils.serialization.types.ShortType r0, $r2;
        java.util.Random r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.ShortType;

        r1 := @parameter0: java.util.Random;

        $r2 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.ShortType: org.apache.flink.testutils.serialization.types.ShortType getRandom(java.util.Random)>(r1);

        return $r2;
    }
}
