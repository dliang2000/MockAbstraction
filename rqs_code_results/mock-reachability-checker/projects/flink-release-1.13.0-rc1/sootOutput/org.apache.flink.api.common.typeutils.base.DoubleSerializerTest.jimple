public class org.apache.flink.api.common.typeutils.base.DoubleSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.DoubleSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.DoubleSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        return 8;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        return class "Ljava/lang/Double;";
    }

    protected java.lang.Double[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;
        double d0, $d1, $d2;
        java.util.Random $r2;
        java.lang.Double[] $r3;
        java.lang.Double $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $d1 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        d0 = $d1 * 1.7976931348623157E308;

        $r3 = newarray (java.lang.Double)[10];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-1.0);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $r3[4] = $r8;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3[5] = $r9;

        $d2 = neg d0;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r3[6] = $r10;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);

        $r3[7] = $r11;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        $r3[8] = $r12;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        $r3[9] = $r13;

        return $r3;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleSerializerTest r0;
        java.lang.Double[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.DoubleSerializerTest: java.lang.Double[] getTestData()>();

        return $r1;
    }
}
