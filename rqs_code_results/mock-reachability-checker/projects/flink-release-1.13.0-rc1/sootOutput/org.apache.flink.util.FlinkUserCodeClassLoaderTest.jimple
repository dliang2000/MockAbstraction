public class org.apache.flink.util.FlinkUserCodeClassLoaderTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.FlinkUserCodeClassLoaderTest r0;

        r0 := @this: org.apache.flink.util.FlinkUserCodeClassLoaderTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testExceptionHandling()
    {
        org.apache.flink.util.FlinkUserCodeClassLoaderTest r0;
        java.lang.RuntimeException $r5;
        java.util.concurrent.atomic.AtomicReference $r6;
        org.apache.flink.util.FlinkUserCodeClassLoaderTest$ThrowingURLClassLoader $r7;
        java.util.function.Consumer $r9;
        java.lang.Throwable $r11, $r15, $r16, $r17, r20;
        java.lang.Object $r12;
        org.hamcrest.Matcher $r13, $r14;

        r0 := @this: org.apache.flink.util.FlinkUserCodeClassLoaderTest;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Expected exception");

        $r6 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

     label01:
        $r7 = new org.apache.flink.util.FlinkUserCodeClassLoaderTest$ThrowingURLClassLoader;

        virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <org.apache.flink.util.FlinkUserCodeClassLoaderTest$set__178: java.util.function.Consumer bootstrap$(java.util.concurrent.atomic.AtomicReference)>($r6);

        specialinvoke $r7.<org.apache.flink.util.FlinkUserCodeClassLoaderTest$ThrowingURLClassLoader: void <init>(java.util.function.Consumer,java.lang.RuntimeException)>($r9, $r5);

        r20 = null;

     label02:
        virtualinvoke $r7.<org.apache.flink.util.FlinkUserCodeClassLoader: java.lang.Class loadClass(java.lang.String)>("dummy.class");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("The expected exception is not thrown");

     label03:
        if $r7 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r7.<org.apache.flink.util.FlinkUserCodeClassLoader: void close()>();

        goto label13;

     label05:
        $r16 := @caughtexception;

        r20 = $r16;

        throw $r16;

     label06:
        $r17 := @caughtexception;

     label07:
        if $r7 == null goto label12;

        if r20 == null goto label11;

     label08:
        virtualinvoke $r7.<org.apache.flink.util.FlinkUserCodeClassLoader: void close()>();

     label09:
        goto label12;

     label10:
        $r15 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label12;

     label11:
        virtualinvoke $r7.<org.apache.flink.util.FlinkUserCodeClassLoader: void close()>();

     label12:
        throw $r17;

     label13:
        goto label15;

     label14:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r13);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r14);

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label13 with label14;
    }
}
