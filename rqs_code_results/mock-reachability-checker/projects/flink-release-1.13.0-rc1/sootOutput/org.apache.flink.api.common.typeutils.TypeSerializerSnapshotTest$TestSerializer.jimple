final class org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private final boolean compatible;

    void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: void <init>(boolean)>(1);

        return;
    }

    void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer: boolean compatible> = z0;

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        return 0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        java.io.ObjectInputStream r1;
        java.io.IOException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("cannot deserialize");

        throw $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializerConfigSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializerConfigSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest$TestSerializerConfigSnapshot: void <init>()>();

        return $r1;
    }
}
