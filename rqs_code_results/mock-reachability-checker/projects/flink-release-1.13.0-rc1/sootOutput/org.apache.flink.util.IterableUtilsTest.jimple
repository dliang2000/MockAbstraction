public class org.apache.flink.util.IterableUtilsTest extends org.apache.flink.util.TestLogger
{
    private final java.lang.Iterable testIterable;

    public void <init>()
    {
        org.apache.flink.util.IterableUtilsTest r0;
        java.lang.Integer[] $r1;
        java.lang.Integer $r2, $r3, $r4, $r5, $r6;
        java.util.List $r7;

        r0 := @this: org.apache.flink.util.IterableUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = newarray (java.lang.Integer)[5];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[4] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        r0.<org.apache.flink.util.IterableUtilsTest: java.lang.Iterable testIterable> = $r7;

        return;
    }

    public void testToStream()
    {
        org.apache.flink.util.IterableUtilsTest r0;
        java.util.stream.Stream r2;
        java.util.ArrayDeque $r3;
        java.lang.Iterable $r4, $r7;
        java.util.function.Consumer $r6;
        java.util.function.Predicate $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.util.IterableUtilsTest;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        $r4 = r0.<org.apache.flink.util.IterableUtilsTest: java.lang.Iterable testIterable>;

        virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <org.apache.flink.util.IterableUtilsTest$add__176: java.util.function.Consumer bootstrap$(java.util.Queue)>($r3);

        interfaceinvoke $r4.<java.lang.Iterable: void forEach(java.util.function.Consumer)>($r6);

        $r7 = r0.<org.apache.flink.util.IterableUtilsTest: java.lang.Iterable testIterable>;

        r2 = staticinvoke <org.apache.flink.util.IterableUtils: java.util.stream.Stream toStream(java.lang.Iterable)>($r7);

        $r8 = staticinvoke <org.apache.flink.util.IterableUtilsTest$lambda_testToStream_0__177: java.util.function.Predicate bootstrap$(java.util.Queue)>($r3);

        $z0 = interfaceinvoke r2.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public static boolean lambda$testToStream$0(java.util.Queue, java.lang.Integer)
    {
        java.util.Queue r0;
        java.lang.Integer r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.util.Queue;

        r1 := @parameter1: java.lang.Integer;

        $r2 = interfaceinvoke r0.<java.util.Queue: java.lang.Object poll()>();

        $r3 = (java.lang.Integer) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Integer: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }
}
