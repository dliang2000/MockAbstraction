public class org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.SqlTimestampComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer: void <init>()>();

        return $r1;
    }

    protected java.sql.Timestamp[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest r0;
        java.sql.Timestamp[] $r1;
        java.sql.Timestamp $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest;

        $r1 = newarray (java.sql.Timestamp)[7];

        $r2 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1970-01-01 00:00:00.000");

        $r1[0] = $r2;

        $r3 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123");

        $r1[1] = $r3;

        $r4 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123000001");

        $r1[2] = $r4;

        $r5 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123000002");

        $r1[3] = $r5;

        $r6 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2013-08-12 14:15:59.478");

        $r1[4] = $r6;

        $r7 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2013-08-12 14:15:59.479");

        $r1[5] = $r7;

        $r8 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2040-05-12 18:00:45.999");

        $r1[6] = $r8;

        return $r1;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest r0;
        java.sql.Timestamp[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampComparatorTest: java.sql.Timestamp[] getSortedTestData()>();

        return $r1;
    }
}
