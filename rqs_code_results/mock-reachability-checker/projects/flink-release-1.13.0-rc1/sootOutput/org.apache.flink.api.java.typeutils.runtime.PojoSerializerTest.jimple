public class org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{
    private org.apache.flink.api.common.typeinfo.TypeInformation type;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$TestUserClass;");

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type> = $r1;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.ExecutionConfig $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        boolean $z0, $z1;
        java.lang.AssertionError $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r2);

        $z0 = <org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        return r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        return class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$TestUserClass;";
    }

    protected org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        java.util.Random $r2;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass[] $r3;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass $r4, $r9, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int[] $r5, $r8, $r10, $r12, $r15, $r18;
        java.util.Date $r6, $r16;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass $r7, $r11, $r17;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $r3 = newarray (org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass)[4];

        $r4 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass;

        $i0 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d0 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r5 = newarray (int)[3];

        $r5[0] = 1;

        $r5[1] = 2;

        $r5[2] = 3;

        $r6 = new java.util.Date;

        specialinvoke $r6.<java.util.Date: void <init>()>();

        $r7 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass;

        $i1 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d1 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r8 = newarray (int)[3];

        $r8[0] = 10;

        $r8[1] = 11;

        $r8[2] = 12;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass: void <init>(int,java.lang.String,double,int[])>($i1, "foo@boo", $d1, $r8);

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass: void <init>(int,java.lang.String,double,int[],java.util.Date,org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass)>($i0, "foo", $d0, $r5, $r6, $r7);

        $r3[0] = $r4;

        $r9 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass;

        $i2 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d2 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r10 = newarray (int)[3];

        $r10[0] = 4;

        $r10[1] = 5;

        $r10[2] = 6;

        $r11 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass;

        $i3 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d3 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r12 = newarray (int)[3];

        $r12[0] = 20;

        $r12[1] = 21;

        $r12[2] = 22;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass: void <init>(int,java.lang.String,double,int[])>($i3, "bar@bas", $d3, $r12);

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass: void <init>(int,java.lang.String,double,int[],java.util.Date,org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass)>($i2, "bar", $d2, $r10, null, $r11);

        $r3[1] = $r9;

        $r13 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass;

        $i4 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d4 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass: void <init>(int,java.lang.String,double,int[],java.util.Date,org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass)>($i4, null, $d4, null, null, null);

        $r3[2] = $r13;

        $r14 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass;

        $i5 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d5 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r15 = newarray (int)[3];

        $r15[0] = 4;

        $r15[1] = 5;

        $r15[2] = 6;

        $r16 = new java.util.Date;

        specialinvoke $r16.<java.util.Date: void <init>()>();

        $r17 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass;

        $i6 = virtualinvoke $r2.<java.util.Random: int nextInt()>();

        $d6 = virtualinvoke $r2.<java.util.Random: double nextDouble()>();

        $r18 = newarray (int)[3];

        $r18[0] = 20;

        $r18[1] = 21;

        $r18[2] = 22;

        specialinvoke $r17.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass: void <init>(int,java.lang.String,double,int[])>($i6, "bar@bas", $d6, $r18);

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass: void <init>(int,java.lang.String,double,int[],java.util.Date,org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass)>($i5, "bar", $d5, $r15, $r16, $r17);

        $r3[3] = $r14;

        return $r3;
    }

    public void testTuplePojoTestEquality()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r1;
        int[] r3, $r21, $r24, $r27, $r35, $r38, $r41;
        org.apache.flink.api.common.typeutils.TypeComparator r4, r8, r13, r53;
        int i0, i1, i2, i3, $i4;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r7, r10;
        org.apache.flink.api.common.typeinfo.TypeInformation $r14, $r26, $r33;
        java.util.ArrayList $r15;
        java.lang.Object $r16;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r17;
        boolean[] $r18, $r28, $r39, $r42;
        org.apache.flink.api.common.ExecutionConfig $r19, $r29, $r40, $r43;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass $r20;
        java.util.Date $r22;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass $r23;
        org.apache.flink.api.java.tuple.Tuple1 $r25;
        org.apache.flink.api.java.tuple.Tuple3 $r30;
        java.lang.Integer $r31;
        java.lang.Double $r32;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r34, $r36;
        java.lang.String[] $r37;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.operators.Keys$IncompatibleKeysException $r46;
        java.lang.StringBuilder $r47, $r48, $r50;
        java.lang.String $r49, $r51;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        r1 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) $r14;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        virtualinvoke r1.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("nestedClass.dumm2", 0, $r15);

        r3 = newarray (int)[1];

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r16;

        $i4 = virtualinvoke $r17.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        r3[0] = $i4;

        $r18 = newarray (boolean)[1];

        $r18[0] = 1;

        $r19 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r19.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r4 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r3, $r18, 0, $r19);

        $r20 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass;

        $r21 = newarray (int)[3];

        $r21[0] = 1;

        $r21[1] = 2;

        $r21[2] = 3;

        $r22 = new java.util.Date;

        specialinvoke $r22.<java.util.Date: void <init>()>();

        $r23 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass;

        $r24 = newarray (int)[3];

        $r24[0] = 5;

        $r24[1] = 4;

        $r24[2] = 3;

        specialinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass: void <init>(int,java.lang.String,double,int[])>(1, "haha", 4.0, $r24);

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass: void <init>(int,java.lang.String,double,int[],java.util.Date,org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$NestedTestUserClass)>(0, "abc", 3.0, $r21, $r22, $r23);

        i0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r20);

        $r25 = new org.apache.flink.api.java.tuple.Tuple1;

        specialinvoke $r25.<org.apache.flink.api.java.tuple.Tuple1: void <init>(java.lang.Object)>("haha");

        $r26 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r25);

        r7 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r26;

        $r27 = newarray (int)[1];

        $r27[0] = 0;

        $r28 = newarray (boolean)[1];

        $r28[0] = 1;

        $r29 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r29.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r8 = virtualinvoke r7.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r27, $r28, 0, $r29);

        i1 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r25);

        if i0 != i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("The hashing for tuples and pojos must be the same, so that they are mixable", $z1);

        $r30 = new org.apache.flink.api.java.tuple.Tuple3;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.0);

        specialinvoke $r30.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r31, "haha", $r32);

        $r33 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r30);

        r10 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r33;

        $r34 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r35 = newarray (int)[3];

        $r35[0] = 1;

        $r35[1] = 0;

        $r35[2] = 2;

        specialinvoke $r34.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r35, r10);

        $r36 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r37 = newarray (java.lang.String)[3];

        $r37[0] = "nestedClass.dumm2";

        $r37[1] = "nestedClass.dumm1";

        $r37[2] = "nestedClass.dumm3";

        specialinvoke $r36.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r37, r1);

     label3:
        $z0 = virtualinvoke $r34.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r36);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Expecting the keys to be compatible", $z0);

     label4:
        goto label6;

     label5:
        $r46 := @caughtexception;

        virtualinvoke $r46.<org.apache.flink.api.common.operators.Keys$IncompatibleKeysException: void printStackTrace()>();

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keys must be compatible: ");

        $r49 = virtualinvoke $r46.<org.apache.flink.api.common.operators.Keys$IncompatibleKeysException: java.lang.String getMessage()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r51);

     label6:
        $r38 = virtualinvoke $r36.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        $r39 = newarray (boolean)[3];

        $r39[0] = 1;

        $r39[1] = 1;

        $r39[2] = 1;

        $r40 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r40.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r53 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r38, $r39, 0, $r40);

        i2 = virtualinvoke r53.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r20);

        $r41 = virtualinvoke $r34.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        $r42 = newarray (boolean)[3];

        $r42[0] = 1;

        $r42[1] = 1;

        $r42[2] = 1;

        $r43 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r43.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r13 = virtualinvoke r10.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r41, $r42, 0, $r43);

        i3 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r30);

        if i2 != i3 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("The hashing for tuples and pojos must be the same, so that they are mixable. Also for those with multiple key fields", $z2);

        return;

        catch org.apache.flink.api.common.operators.Keys$IncompatibleKeysException from label3 to label4 with label5;
    }

    public void testReconfigureWithDifferentPojoType() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r1, r28;
        byte[] r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6, $r25;
        org.apache.flink.api.common.ExecutionConfig $r7, $r26;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r27;
        java.io.ByteArrayOutputStream $r9;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15, $r16, $r18, r21, r31;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r19;
        java.io.ByteArrayInputStream $r29;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r32;
        java.lang.Thread $r33;
        java.lang.ClassLoader $r34;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r35;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r38;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r7);

        r1 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r8;

        r19 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()>();

        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

        r21 = null;

     label01:
        $r10 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r10.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r9);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r10, r19, r1);

        r2 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r9 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r21 = $r13;

        throw $r13;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r9 == null goto label11;

        if r21 == null goto label10;

     label07:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r12 := @caughtexception;

        virtualinvoke r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label11;

     label10:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r15;

     label12:
        $r25 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        $r26 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r26.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r27 = virtualinvoke $r25.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r26);

        r28 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r27;

        $r29 = new java.io.ByteArrayInputStream;

        specialinvoke $r29.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r31 = null;

     label13:
        $r32 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r32.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r29);

        $r33 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r34 = virtualinvoke $r33.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r35 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r32, $r34, r28);

     label14:
        if $r29 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r16 := @caughtexception;

        r31 = $r16;

        throw $r16;

     label17:
        $r14 := @caughtexception;

     label18:
        if $r29 == null goto label23;

        if r31 == null goto label22;

     label19:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r18 := @caughtexception;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label23;

     label22:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r14;

     label24:
        r38 = interfaceinvoke r35.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r28);

        $z0 = virtualinvoke r38.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReconfigureDifferentSubclassRegistrationOrder() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        int i0, i1, $i3, $i6;
        byte[] r1;
        org.apache.flink.api.common.ExecutionConfig $r6, $r32;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7, $r34;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r35, $r47, $r48;
        java.util.LinkedHashMap $r9, $r12, $r50, $r53;
        java.lang.Object $r10, $r13, $r51, $r54;
        java.lang.Integer $r11, $r14, $r52, $r55;
        java.io.ByteArrayOutputStream $r15;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r16;
        java.lang.Throwable $r17, $r18, $r19, $r21, $r22, $r23, r29, r39;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r26, r36, r49;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r27;
        java.io.ByteArrayInputStream $r37;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r40;
        java.lang.Thread $r41;
        java.lang.ClassLoader $r42;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r43;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r46;
        boolean $z0, $z1;
        long $l2, $l4, $l5, $l7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r6);

        r26 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r8;

        $r9 = virtualinvoke r26.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $r10 = virtualinvoke $r9.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        $r11 = (java.lang.Integer) $r10;

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = virtualinvoke r26.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r14 = (java.lang.Integer) $r13;

        i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r27 = virtualinvoke r26.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()>();

        $r15 = new java.io.ByteArrayOutputStream;

        specialinvoke $r15.<java.io.ByteArrayOutputStream: void <init>()>();

        r29 = null;

     label01:
        $r16 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r16.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r15);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r16, r27, r26);

        r1 = virtualinvoke $r15.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r15 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r21 := @caughtexception;

        r29 = $r21;

        throw $r21;

     label05:
        $r17 := @caughtexception;

     label06:
        if $r15 == null goto label11;

        if r29 == null goto label10;

     label07:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r23 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label11;

     label10:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r17;

     label12:
        $r32 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        virtualinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        $r34 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r35 = virtualinvoke $r34.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r32);

        r36 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r35;

        $r37 = new java.io.ByteArrayInputStream;

        specialinvoke $r37.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r39 = null;

     label13:
        $r40 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r40.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r37);

        $r41 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r42 = virtualinvoke $r41.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r43 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r40, $r42, r36);

     label14:
        if $r37 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r18 := @caughtexception;

        r39 = $r18;

        throw $r18;

     label17:
        $r22 := @caughtexception;

     label18:
        if $r37 == null goto label23;

        if r39 == null goto label22;

     label19:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r19 := @caughtexception;

        virtualinvoke r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label23;

     label22:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r22;

     label24:
        r46 = interfaceinvoke r43.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r36);

        $z0 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r47 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $z1 = $r47 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r48 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r49 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r48;

        $l2 = (long) i0;

        $r50 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $r51 = virtualinvoke $r50.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        $r52 = (java.lang.Integer) $r51;

        $i3 = virtualinvoke $r52.<java.lang.Integer: int intValue()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $l5 = (long) i1;

        $r53 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $r54 = virtualinvoke $r53.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r55 = (java.lang.Integer) $r54;

        $i6 = virtualinvoke $r55.<java.lang.Integer: int intValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReconfigureRepopulateNonregisteredSubclassSerializerCache() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        byte[] r1;
        org.apache.flink.api.common.ExecutionConfig $r6, $r31;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7, $r30;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r32, $r44, $r45;
        java.util.Map $r11, $r12, $r13, $r47, $r48, $r49;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.ByteArrayOutputStream $r14;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r15;
        java.lang.Throwable $r16, $r18, $r19, $r21, $r22, $r23, r27, r36;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r24, r33, r46;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r25;
        java.io.ByteArrayInputStream $r34;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r37;
        java.lang.Thread $r38;
        java.lang.ClassLoader $r39;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r40;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r43;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r6);

        r24 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r8;

        virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r11 = virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $i0 = interfaceinvoke $r11.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r12 = virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z0 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r13 = virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        r25 = virtualinvoke r24.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()>();

        $r14 = new java.io.ByteArrayOutputStream;

        specialinvoke $r14.<java.io.ByteArrayOutputStream: void <init>()>();

        r27 = null;

     label01:
        $r15 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r15.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r14);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r15, r25, r24);

        r1 = virtualinvoke $r14.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r14 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r18 := @caughtexception;

        r27 = $r18;

        throw $r18;

     label05:
        $r23 := @caughtexception;

     label06:
        if $r14 == null goto label11;

        if r27 == null goto label10;

     label07:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

        goto label11;

     label10:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r23;

     label12:
        $r30 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r31 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r31.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r32 = virtualinvoke $r30.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r31);

        r33 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r32;

        $r34 = new java.io.ByteArrayInputStream;

        specialinvoke $r34.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r36 = null;

     label13:
        $r37 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r37.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r34);

        $r38 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r39 = virtualinvoke $r38.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r40 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r37, $r39, r33);

     label14:
        if $r34 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r34.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r21 := @caughtexception;

        r36 = $r21;

        throw $r21;

     label17:
        $r16 := @caughtexception;

     label18:
        if $r34 == null goto label23;

        if r36 == null goto label22;

     label19:
        virtualinvoke $r34.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r19 := @caughtexception;

        virtualinvoke r36.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label23;

     label22:
        virtualinvoke $r34.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r16;

     label24:
        r43 = interfaceinvoke r40.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r33);

        $z2 = virtualinvoke r43.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r44 = virtualinvoke r43.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $z3 = $r44 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r45 = virtualinvoke r43.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r46 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r45;

        $r47 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $i2 = interfaceinvoke $r47.<java.util.Map: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        $r48 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z4 = interfaceinvoke $r48.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r49 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z5 = interfaceinvoke $r49.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReconfigureWithPreviouslyNonregisteredSubclasses() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        byte[] r1;
        org.apache.flink.api.common.ExecutionConfig $r5, $r32;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6, $r34;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r35, $r47, $r48;
        java.util.Map $r10, $r11, $r12, $r50, $r51, $r52;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.LinkedHashMap $r13, $r53, $r54, $r55;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r14;
        java.io.ByteArrayOutputStream $r15;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r16;
        java.lang.Throwable $r17, $r19, $r20, $r21, $r23, $r24, r28, r39;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r25, r36, r49;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r26;
        java.io.ByteArrayInputStream $r37;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r40;
        java.lang.Thread $r41;
        java.lang.ClassLoader $r42;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r43;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r46;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r5);

        r25 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r7;

        virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getSubclassSerializer(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r10 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $i0 = interfaceinvoke $r10.<java.util.Map: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r11 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z0 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r12 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z1 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r13 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $z2 = virtualinvoke $r13.<java.util.LinkedHashMap: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r14 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getRegisteredSerializers()>();

        $i2 = lengthof $r14;

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        r26 = virtualinvoke r25.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot snapshotConfiguration()>();

        $r15 = new java.io.ByteArrayOutputStream;

        specialinvoke $r15.<java.io.ByteArrayOutputStream: void <init>()>();

        r28 = null;

     label01:
        $r16 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r16.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r15);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r16, r26, r25);

        r1 = virtualinvoke $r15.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r15 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r20 := @caughtexception;

        r28 = $r20;

        throw $r20;

     label05:
        $r19 := @caughtexception;

     label06:
        if $r15 == null goto label11;

        if r28 == null goto label10;

     label07:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r21 := @caughtexception;

        virtualinvoke r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label11;

     label10:
        virtualinvoke $r15.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r19;

     label12:
        $r32 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        virtualinvoke $r32.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        $r34 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.common.typeinfo.TypeInformation type>;

        $r35 = virtualinvoke $r34.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r32);

        r36 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r35;

        $r37 = new java.io.ByteArrayInputStream;

        specialinvoke $r37.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r39 = null;

     label13:
        $r40 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r40.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r37);

        $r41 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r42 = virtualinvoke $r41.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r43 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r40, $r42, r36);

     label14:
        if $r37 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r24 := @caughtexception;

        r39 = $r24;

        throw $r24;

     label17:
        $r17 := @caughtexception;

     label18:
        if $r37 == null goto label23;

        if r39 == null goto label22;

     label19:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r23 := @caughtexception;

        virtualinvoke r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

        goto label23;

     label22:
        virtualinvoke $r37.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r17;

     label24:
        r46 = interfaceinvoke r43.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r36);

        $z3 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r47 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $z4 = $r47 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r48 = virtualinvoke r46.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r49 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) $r48;

        $r50 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $i4 = interfaceinvoke $r50.<java.util.Map: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $r51 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z5 = interfaceinvoke $r51.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r52 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.Map getSubclassSerializerCache()>();

        $z6 = interfaceinvoke $r52.<java.util.Map: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r53 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $i6 = virtualinvoke $r53.<java.util.LinkedHashMap: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l7);

        $r54 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $z7 = virtualinvoke $r54.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassA;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r55 = virtualinvoke r49.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        $z8 = virtualinvoke $r55.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest$SubTestUserClassB;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest$TestUserClass[] getTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializerTest;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerTest: boolean $assertionsDisabled> = $z1;

        return;
    }
}
