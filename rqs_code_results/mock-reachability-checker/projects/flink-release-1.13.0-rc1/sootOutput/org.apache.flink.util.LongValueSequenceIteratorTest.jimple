public class org.apache.flink.util.LongValueSequenceIteratorTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.LongValueSequenceIteratorTest r0;

        r0 := @this: org.apache.flink.util.LongValueSequenceIteratorTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testSplitRegular()
    {
        org.apache.flink.util.LongValueSequenceIteratorTest r0;
        org.apache.flink.util.LongValueSequenceIterator $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.flink.util.LongValueSequenceIteratorTest;

        $r1 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r1.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(0L, 10L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r1, 2);

        $r2 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r2.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(100L, 100000L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r2, 7);

        $r3 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r3.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-100L, 0L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r3, 5);

        $r4 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r4.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-100L, 100L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r4, 3);

        return;
    }

    public void testSplittingLargeRangesBy2()
    {
        org.apache.flink.util.LongValueSequenceIteratorTest r0;
        org.apache.flink.util.LongValueSequenceIterator $r1, $r2, $r3;

        r0 := @this: org.apache.flink.util.LongValueSequenceIteratorTest;

        $r1 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r1.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(0L, 9223372036854775807L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r1, 2);

        $r2 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r2.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-1000000000L, 9223372036854775807L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r2, 2);

        $r3 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r3.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-9223372036854775808L, 9223372036854775807L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r3, 2);

        return;
    }

    public void testSplittingTooSmallRanges()
    {
        org.apache.flink.util.LongValueSequenceIteratorTest r0;
        org.apache.flink.util.LongValueSequenceIterator $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.flink.util.LongValueSequenceIteratorTest;

        $r1 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r1.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(0L, 0L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r1, 2);

        $r2 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r2.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-5L, -5L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r2, 2);

        $r3 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r3.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(-5L, -4L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r3, 3);

        $r4 = new org.apache.flink.util.LongValueSequenceIterator;

        specialinvoke $r4.<org.apache.flink.util.LongValueSequenceIterator: void <init>(long,long)>(10L, 15L);

        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitting(org.apache.flink.util.LongValueSequenceIterator,int)>($r4, 10);

        return;
    }

    private static void testSplitting(org.apache.flink.util.LongValueSequenceIterator, int)
    {
        org.apache.flink.util.LongValueSequenceIterator r0, $r2, $r3, $r4, $r5;
        int i0, $i1, $i7, $i9, $i10, i14;
        org.apache.flink.util.LongValueSequenceIterator[] r1;
        long $l2, $l3, $l4, $l5, $l6, $l8, $l11, $l12, $l13;

        r0 := @parameter0: org.apache.flink.util.LongValueSequenceIterator;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<org.apache.flink.util.LongValueSequenceIterator: org.apache.flink.util.LongValueSequenceIterator[] split(int)>(i0);

        $l3 = (long) i0;

        $i1 = lengthof r1;

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        $l4 = virtualinvoke r0.<org.apache.flink.util.LongValueSequenceIterator: long getCurrent()>();

        $r2 = r1[0];

        $l5 = virtualinvoke $r2.<org.apache.flink.util.LongValueSequenceIterator: long getCurrent()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l5);

        $l6 = virtualinvoke r0.<org.apache.flink.util.LongValueSequenceIterator: long getTo()>();

        $i7 = i0 - 1;

        $r3 = r1[$i7];

        $l8 = virtualinvoke $r3.<org.apache.flink.util.LongValueSequenceIterator: long getTo()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        i14 = 1;

     label1:
        $i9 = lengthof r1;

        if i14 >= $i9 goto label2;

        $i10 = i14 - 1;

        $r4 = r1[$i10];

        $l11 = virtualinvoke $r4.<org.apache.flink.util.LongValueSequenceIterator: long getTo()>();

        $l12 = $l11 + 1L;

        $r5 = r1[i14];

        $l13 = virtualinvoke $r5.<org.apache.flink.util.LongValueSequenceIterator: long getCurrent()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l12, $l13);

        i14 = i14 + 1;

        goto label1;

     label2:
        staticinvoke <org.apache.flink.util.LongValueSequenceIteratorTest: void testMaxSplitDiff(org.apache.flink.util.LongValueSequenceIterator[])>(r1);

        return;
    }

    private static void testMaxSplitDiff(org.apache.flink.util.LongValueSequenceIterator[])
    {
        org.apache.flink.util.LongValueSequenceIterator[] r0;
        int i0, i12;
        org.apache.flink.util.LongValueSequenceIterator r2;
        byte $b1, $b3, $b6, $b9;
        long $l2, $l4, $l5, $l7, $l8, l10, l11, l13;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.LongValueSequenceIterator[];

        l10 = 9223372036854775807L;

        l11 = -9223372036854775808L;

        i0 = lengthof r0;

        i12 = 0;

     label1:
        if i12 >= i0 goto label5;

        r2 = r0[i12];

        $l4 = virtualinvoke r2.<org.apache.flink.util.LongValueSequenceIterator: long getTo()>();

        $l5 = virtualinvoke r2.<org.apache.flink.util.LongValueSequenceIterator: long getCurrent()>();

        $b6 = $l4 cmp $l5;

        if $b6 >= 0 goto label2;

        l13 = 0L;

        goto label3;

     label2:
        $l7 = virtualinvoke r2.<org.apache.flink.util.LongValueSequenceIterator: long getTo()>();

        $l8 = virtualinvoke r2.<org.apache.flink.util.LongValueSequenceIterator: long getCurrent()>();

        l13 = $l7 - $l8;

     label3:
        $b9 = l13 cmp 0L;

        if $b9 >= 0 goto label4;

        l13 = 9223372036854775807L;

     label4:
        l10 = staticinvoke <java.lang.Math: long min(long,long)>(l10, l13);

        l11 = staticinvoke <java.lang.Math: long max(long,long)>(l11, l13);

        i12 = i12 + 1;

        goto label1;

     label5:
        $b1 = l11 cmp l10;

        if $b1 == 0 goto label6;

        $l2 = l11 - 1L;

        $b3 = $l2 cmp l10;

        if $b3 != 0 goto label7;

     label6:
        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
