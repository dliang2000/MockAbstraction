public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCompatibleAsIsIntermediateCompatibilityResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r4;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r7, $r11;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r8, $r9;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[2];

        $r5 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)>("first serializer");

        $r4[0] = $r5;

        $r6 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)>("second serializer");

        $r4[1] = $r6;

        $r7 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r8 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r8.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("first serializer");

        $r7[0] = $r8;

        $r9 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r9.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("second serializer");

        $r7[1] = $r9;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r7, $r4);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r10 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility getFinalResult()>();

        $z1 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r7, $r11);

        return;
    }

    public void testCompatibleWithReconfiguredSerializerIntermediateCompatibilityResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r5;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r8, $r11, $r14;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r9, $r10, $r12, $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[2];

        $r6 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)>("a");

        $r5[0] = $r6;

        $r7 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration(java.lang.String)>("b");

        $r5[1] = $r7;

        $r8 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r9 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r9.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("a");

        $r8[0] = $r9;

        $r10 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r10.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("b");

        $r8[1] = $r10;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r8, $r5);

        $r11 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r12 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r12.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("a");

        $r11[0] = $r12;

        $r13 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r13.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("b");

        $r11[1] = $r13;

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r14 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r11, $r14);

        return;
    }

    public void testCompatibleAfterMigrationIntermediateCompatibilityResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r4;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r5, $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r8;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r9, $r10, $r11;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r12;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[3];

        $r5 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration(java.lang.String)>("a");

        $r4[0] = $r5;

        $r6 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration(java.lang.String)>("b");

        $r4[1] = $r6;

        $r7 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)>("c");

        $r4[2] = $r7;

        $r8 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r9 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r9.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("a");

        $r8[0] = $r9;

        $r10 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r10.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("b");

        $r8[1] = $r10;

        $r11 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r11.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String)>("c");

        $r8[2] = $r11;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r8, $r4);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r12 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility getFinalResult()>();

        $z1 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testIncompatibleIntermediateCompatibilityResult()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r4;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r5, $r6, $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r9;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r10, $r11, $r12, $r13;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[4];

        $r5 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer()>();

        $r4[0] = $r5;

        $r6 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer()>();

        $r4[1] = $r6;

        $r7 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration()>();

        $r4[2] = $r7;

        $r8 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration()>();

        $r4[3] = $r8;

        $r9 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[4];

        $r10 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r10.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r9[0] = $r10;

        $r11 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r11.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r9[1] = $r11;

        $r12 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r12.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r9[2] = $r12;

        $r13 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        specialinvoke $r13.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>()>();

        $r9[3] = $r13;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r9, $r4);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r14 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility getFinalResult()>();

        $z1 = virtualinvoke $r14.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testGetFinalResultOnUndefinedReconfigureIntermediateCompatibilityResultFails()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r3 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r2[0] = $r3;

        r1 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult undefinedReconfigureResult(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2);

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility getFinalResult()>();

        return;
    }

    public void testGetNestedSerializersOnCompatibleAfterMigrationIntermediateCompatibilityResultFails()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        r1 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedCompatibleAfterMigrationResult()>();

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        return;
    }

    public void testGetNestedSerializersOnIncompatibleIntermediateCompatibilityResultFails()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        r1 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult definedIncompatibleResult()>();

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        return;
    }
}
