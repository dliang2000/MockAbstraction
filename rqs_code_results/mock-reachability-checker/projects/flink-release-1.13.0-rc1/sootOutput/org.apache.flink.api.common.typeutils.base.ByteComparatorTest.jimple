public class org.apache.flink.api.common.typeutils.base.ByteComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.ByteComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.ByteComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.ByteComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.ByteComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ByteComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.ByteComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.ByteSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.ByteSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ByteSerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Byte[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.ByteComparatorTest r0;
        java.util.Random $r2;
        java.lang.Byte[] $r3;
        java.lang.Byte $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r17;
        int $i0, i7;
        java.lang.Integer $r5, $r7, $r9, $r11, $r13, $r15;
        byte $b1, $b2, $b3, $b4, $b5, $b6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteComparatorTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412338L);

        i7 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(127);

        if i7 >= 0 goto label1;

        i7 = neg i7;

     label1:
        if i7 != 127 goto label2;

        i7 = i7 + -3;

     label2:
        if i7 > 2 goto label3;

        i7 = i7 + 3;

     label3:
        $r3 = newarray (java.lang.Byte)[8];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $r3[0] = $r4;

        $i0 = neg i7;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $b1 = virtualinvoke $r5.<java.lang.Integer: byte byteValue()>();

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $b2 = virtualinvoke $r7.<java.lang.Integer: byte byteValue()>();

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r3[2] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $b3 = virtualinvoke $r9.<java.lang.Integer: byte byteValue()>();

        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r3[3] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $b4 = virtualinvoke $r11.<java.lang.Integer: byte byteValue()>();

        $r12 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b4);

        $r3[4] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $b5 = virtualinvoke $r13.<java.lang.Integer: byte byteValue()>();

        $r14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b5);

        $r3[5] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $b6 = virtualinvoke $r15.<java.lang.Integer: byte byteValue()>();

        $r16 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b6);

        $r3[6] = $r16;

        $r17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $r3[7] = $r17;

        return $r3;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.ByteComparatorTest r0;
        java.lang.Byte[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ByteComparatorTest: java.lang.Byte[] getSortedTestData()>();

        return $r1;
    }
}
