public class org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetTargetFields()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r1, $r16;
        org.apache.flink.api.common.operators.util.FieldSet $r2, $r3, $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r23, $r25, $r27, $r29, $r30;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15;
        java.lang.Integer $r7, $r9, $r11, $r13, $r20, $r22, $r24, $r26, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r1 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 1);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 4);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(2, 3);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(3, 2);

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r3 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i2 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $i4 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r5 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $i6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l7);

        $r6 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r12 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 3);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z3 = virtualinvoke $r12.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 4);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 4);

        $i8 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $r16 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 0);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 4);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 1);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 2);

        virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 3);

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i10 = virtualinvoke $r17.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l11);

        $r18 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i12 = virtualinvoke $r18.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l13);

        $r19 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z4 = virtualinvoke $r19.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r20);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r21 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z5 = virtualinvoke $r21.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r23 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z6 = virtualinvoke $r23.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r25 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z7 = virtualinvoke $r25.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r26);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r27 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z8 = virtualinvoke $r27.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r29 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r29);

        $r30 = virtualinvoke $r16.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 2);

        $i14 = virtualinvoke $r30.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l15);

        return;
    }

    public void testGetSourceField()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r1, $r2;
        int $i0, $i2, $i4, $i6, $i8, $i9, $i10, $i12, $i14, $i16, $i18, $i20;
        long $l1, $l3, $l5, $l7, $l11, $l13, $l15, $l17, $l19;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r1 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 1);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 4);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(2, 3);

        virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(3, 2);

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 1);

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 4);

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $i4 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 3);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l5);

        $i6 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 2);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l7);

        $i8 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 0);

        if $i8 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i9 = virtualinvoke $r1.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 5);

        if $i9 >= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 0);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 4);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 1);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 2);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 3);

        $i10 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 0);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        $i12 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 4);

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l13);

        $i14 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 1);

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l15);

        $i16 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 2);

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l17);

        $i18 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 3);

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l19);

        $i20 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 5);

        if $i20 >= 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testGetReadSet()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r2;
        org.apache.flink.api.common.operators.util.FieldSet $r3, $r5, $r6, $r8, $r10, $r12, $r13, $r15, $r17;
        int[] $r4;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Integer $r7, $r9, $r11, $r14, $r16, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        $r3 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r4 = newarray (int)[2];

        $r4[0] = 0;

        $r4[1] = 1;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r4);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addReadFields(org.apache.flink.api.common.operators.util.FieldSet)>($r3);

        $r5 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $i0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r6 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r11);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addReadFields(org.apache.flink.api.common.operators.util.FieldSet)>($r10);

        $r12 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $i2 = virtualinvoke $r12.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r13 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z2 = virtualinvoke $r13.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r14);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r15 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z3 = virtualinvoke $r15.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r17 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(0);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z4 = virtualinvoke $r17.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;
    }

    public void testAddForwardedFieldsTargetTwice()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 2);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(1, 2);

        return;
    }

    public void testGetTargetFieldInvalidIndex()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 0);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        return;
    }

    public void testGetSourceFieldInvalidIndex()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addForwardedField(int,int)>(0, 0);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 0);

        return;
    }

    public void testGetReadFieldsInvalidIndex()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties $r2;
        org.apache.flink.api.common.operators.util.FieldSet $r3;
        int[] $r4;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void <init>()>();

        $r3 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r4 = newarray (int)[2];

        $r4[0] = 0;

        $r4[1] = 1;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(int[])>($r4);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: void addReadFields(org.apache.flink.api.common.operators.util.FieldSet)>($r3);

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getReadFields(int)>(1);

        return;
    }

    public void testAllForwardedSingleInputSemProps()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties $r2;
        org.apache.flink.api.common.operators.util.FieldSet $r3, $r4, $r5, $r6, $r8, $r10;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        java.lang.Integer $r7, $r9, $r11;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $i2 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l3);

        $r5 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 123);

        $i4 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r6 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(0, 123);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(123);

        $z2 = virtualinvoke $r10.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $i6 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 0);

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 2);

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l9);

        $i10 = virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(0, 123);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(123L, $l11);

        return;
    }

    public void testAllForwardedSingleInputSemPropsInvalidIndex1()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: int getForwardingSourceField(int,int)>(1, 0);

        return;
    }

    public void testAllForwardedSingleInputSemPropsInvalidIndex2()
    {
        org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest r0;
        org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties $r2;

        r0 := @this: org.apache.flink.api.common.operators.SingleInputSemanticPropertiesTest;

        $r2 = new org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties;

        specialinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties$AllFieldsForwardedProperties: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.operators.SingleInputSemanticProperties: org.apache.flink.api.common.operators.util.FieldSet getForwardingTargetFields(int,int)>(1, 0);

        return;
    }
}
