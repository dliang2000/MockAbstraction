public class org.apache.flink.api.common.ExecutionConfigTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testDoubleTypeRegistration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        java.util.List r2, r3;
        java.lang.Class r4, r13;
        org.apache.flink.api.common.ExecutionConfig $r5;
        java.lang.Class[] $r6, $r7;
        boolean $z0, $z1;
        java.util.LinkedHashSet $r8;
        int $i0, $i3, i4;
        long $l1, $l2;
        java.lang.Object $r9, $r10, $r11;
        java.util.Iterator r12, r14;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Ljava/lang/Double;";

        $r6[1] = class "Ljava/lang/Integer;";

        $r6[2] = class "Ljava/lang/Double;";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r7 = newarray (java.lang.Class)[2];

        $r7[0] = class "Ljava/lang/Double;";

        $r7[1] = class "Ljava/lang/Integer;";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        r12 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.Class) $r11;

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(r13);

        goto label1;

     label2:
        i4 = 0;

        $r8 = virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredKryoTypes()>();

        r14 = virtualinvoke $r8.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r9;

        $i3 = i4;

        i4 = i4 + 1;

        $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>($i3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, $r10);

        goto label3;

     label4:
        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $l2 = (long) $i0;

        $l1 = (long) i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l1);

        return;
    }

    public void testConfigurationOfParallelism()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;
        long $l0, $l2, $l3, $l5;
        int $i1, $i4;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig setParallelism(int)>(36);

        $l0 = (long) 36;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: int getParallelism()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l0, $l2);

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig setParallelism(int)>(-1);

        $l3 = (long) -1;

        $i4 = virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: int getParallelism()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        return;
    }

    public void testDisableGenericTypes()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        org.apache.flink.api.common.ExecutionConfig $r5;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r6;
        boolean $z0;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        r3 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r5);

        $z0 = r3 instanceof org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void disableGenericTypes()>();

     label1:
        virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should have failed with an exception");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public void testExecutionConfigSerialization() throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        int i0, $i1, $i3;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.flink.api.common.ExecutionConfig r3, r4, $r6;
        java.util.Random $r5;
        java.io.Serializable $r10;
        org.apache.flink.util.SerializedValue $r11;
        java.lang.Class $r12;
        java.lang.ClassLoader $r13;
        java.lang.Object $r14;
        java.lang.Boolean $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        long $l2, $l4;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r5 = new java.util.Random;

        specialinvoke $r5.<java.util.Random: void <init>()>();

        $i1 = virtualinvoke $r5.<java.util.Random: int nextInt(int)>(10);

        i0 = 1 + $i1;

        z0 = virtualinvoke $r5.<java.util.Random: boolean nextBoolean()>();

        z1 = virtualinvoke $r5.<java.util.Random: boolean nextBoolean()>();

        z2 = virtualinvoke $r5.<java.util.Random: boolean nextBoolean()>();

        z3 = virtualinvoke $r5.<java.util.Random: boolean nextBoolean()>();

        z4 = virtualinvoke $r5.<java.util.Random: boolean nextBoolean()>();

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        if z0 == 0 goto label01;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableClosureCleaner()>();

        goto label02;

     label01:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableClosureCleaner()>();

     label02:
        if z1 == 0 goto label03;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void enableForceAvro()>();

        goto label04;

     label03:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void disableForceAvro()>();

     label04:
        if z2 == 0 goto label05;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void enableForceKryo()>();

        goto label06;

     label05:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void disableForceKryo()>();

     label06:
        if z3 == 0 goto label07;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void disableGenericTypes()>();

        goto label08;

     label07:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void enableGenericTypes()>();

     label08:
        if z4 == 0 goto label09;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        goto label10;

     label09:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

     label10:
        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig setParallelism(int)>(i0);

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r3 = (org.apache.flink.api.common.ExecutionConfig) $r10;

        $r11 = new org.apache.flink.util.SerializedValue;

        specialinvoke $r11.<org.apache.flink.util.SerializedValue: void <init>(java.lang.Object)>($r6);

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r14 = virtualinvoke $r11.<org.apache.flink.util.SerializedValue: java.lang.Object deserializeValue(java.lang.ClassLoader)>($r13);

        r4 = (org.apache.flink.api.common.ExecutionConfig) $r14;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r3);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r4);

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $z5 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: boolean isClosureCleanerEnabled()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $z6 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: boolean isForceAvroEnabled()>();

        $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $z7 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: boolean isForceKryoEnabled()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        $z8 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: boolean hasGenericTypesDisabled()>();

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        $z9 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: boolean isObjectReuseEnabled()>();

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        $l2 = (long) i0;

        $i3 = virtualinvoke r3.<org.apache.flink.api.common.ExecutionConfig: int getParallelism()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        return;
    }

    public void testGlobalParametersNotNull()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r2;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getGlobalJobParameters()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r3);

        return;
    }

    public void testGlobalParametersHashCode()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r3, $r4;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r5, $r6;
        int $i0, $i2;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getGlobalJobParameters()>();

        $i0 = virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters: int hashCode()>();

        $l1 = (long) $i0;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getGlobalJobParameters()>();

        $i2 = virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        return;
    }

    public void testReadingDefaultConfig()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r3, $r7;
        org.apache.flink.configuration.Configuration $r4;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6;
        org.hamcrest.Matcher $r8;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = class "Lorg/apache/flink/api/common/ExecutionConfigTest;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r4, $r6);

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r8);

        return;
    }

    public void testLoadingRegisteredKryoTypesFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4, $r5;
        org.apache.flink.configuration.Configuration $r6;
        java.lang.Thread $r7;
        java.lang.ClassLoader $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("pipeline.registered-kryo-types", "org.apache.flink.api.common.ExecutionConfigTest;org.apache.flink.api.common.ExecutionConfigTest$TestSerializer1");

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r6, $r8);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r9);

        return;
    }

    public void testLoadingRegisteredPojoTypesFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4, $r5;
        org.apache.flink.configuration.Configuration $r6;
        java.lang.Thread $r7;
        java.lang.ClassLoader $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("pipeline.registered-pojo-types", "org.apache.flink.api.common.ExecutionConfigTest;org.apache.flink.api.common.ExecutionConfigTest$TestSerializer1");

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r6, $r8);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r9);

        return;
    }

    public void testLoadingRestartStrategyFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4, $r7;
        org.apache.flink.api.common.time.Time $r5;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r6;
        org.apache.flink.configuration.Configuration $r8;
        java.lang.Thread $r9;
        java.lang.ClassLoader $r10;
        org.hamcrest.Matcher $r11;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time minutes(long)>(2L);

        $r6 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int,org.apache.flink.api.common.time.Time)>(10, $r5);

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void setRestartStrategy(org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration)>($r6);

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r8 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r8.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("restart-strategy", "fixeddelay");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("restart-strategy.fixed-delay.attempts", "10");

        virtualinvoke $r8.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("restart-strategy.fixed-delay.delay", "2 min");

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r8, $r10);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r11);

        return;
    }

    public void testLoadingDefaultKryoSerializersFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4, $r5;
        org.apache.flink.configuration.Configuration $r6;
        java.lang.Thread $r7;
        java.lang.ClassLoader $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer2;");

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("pipeline.default-kryo-serializers", "class:org.apache.flink.api.common.ExecutionConfigTest,serializer:org.apache.flink.api.common.ExecutionConfigTest$TestSerializer1;class:org.apache.flink.api.common.ExecutionConfigTest$TestSerializer1,serializer:org.apache.flink.api.common.ExecutionConfigTest$TestSerializer2");

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r6, $r8);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r9);

        return;
    }

    public void testNotOverridingRegisteredKryoTypesWithDefaultsFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        java.util.LinkedHashSet $r8, $r9;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r5, $r7);

        $r8 = new java.util.LinkedHashSet;

        specialinvoke $r8.<java.util.LinkedHashSet: void <init>()>();

        virtualinvoke $r8.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r8.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r9 = virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredKryoTypes()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

        return;
    }

    public void testNotOverridingRegisteredPojoTypesWithDefaultsFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        java.util.LinkedHashSet $r8, $r9;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerPojoType(java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r5, $r7);

        $r8 = new java.util.LinkedHashSet;

        specialinvoke $r8.<java.util.LinkedHashSet: void <init>()>();

        virtualinvoke $r8.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;");

        virtualinvoke $r8.<java.util.LinkedHashSet: boolean add(java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        $r9 = virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredPojoTypes()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

        return;
    }

    public void testNotOverridingRestartStrategiesWithDefaultsFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration r2, $r8;
        org.apache.flink.api.common.ExecutionConfig $r3;
        org.apache.flink.api.common.time.Time $r4;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r4 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time minutes(long)>(2L);

        r2 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int,org.apache.flink.api.common.time.Time)>(10, $r4);

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void setRestartStrategy(org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration)>(r2);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r5, $r7);

        $r8 = virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration getRestartStrategy()>();

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        return;
    }

    public void testNotOverridingDefaultKryoSerializersFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Thread $r6;
        java.lang.ClassLoader $r7;
        java.util.LinkedHashMap $r8, $r11;
        org.hamcrest.Matcher $r12;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void addDefaultKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer2;");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r5, $r7);

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;");

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer1;", class "Lorg/apache/flink/api/common/ExecutionConfigTest$TestSerializer2;");

        $r11 = virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap getDefaultKryoSerializerClasses()>();

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r12);

        return;
    }
}
