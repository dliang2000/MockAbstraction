public class org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext extends java.lang.Object implements org.apache.flink.api.connector.source.SplitEnumeratorContext
{
    private final java.util.Map sentSourceEvent;
    private final java.util.concurrent.ConcurrentMap registeredReaders;
    private final java.util.List splitsAssignmentSequence;
    private final java.util.concurrent.ExecutorService workerExecutor;
    private final java.util.concurrent.ExecutorService mainExecutor;
    private final org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory mainThreadFactory;
    private final java.util.concurrent.atomic.AtomicReference errorInWorkerThread;
    private final java.util.concurrent.atomic.AtomicReference errorInMainThread;
    private final java.util.concurrent.BlockingQueue oneTimeCallables;
    private final java.util.List periodicCallables;
    private final java.util.concurrent.atomic.AtomicBoolean stoppedAcceptAsyncCalls;
    private final int parallelism;

    public void <init>(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;
        java.util.HashMap $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.ArrayList $r3, $r7;
        java.util.concurrent.atomic.AtomicReference $r4, $r5, $r9, $r11;
        java.util.concurrent.ArrayBlockingQueue $r6;
        java.util.List $r8;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory $r10, $r12, $r14;
        java.util.concurrent.ExecutorService $r13, $r15;
        java.util.concurrent.atomic.AtomicBoolean $r16;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.Map sentSourceEvent> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ConcurrentMap registeredReaders> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List splitsAssignmentSequence> = $r3;

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: int parallelism> = i0;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread> = $r5;

        $r6 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r6.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(100);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.BlockingQueue oneTimeCallables> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r7);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List periodicCallables> = $r8;

        $r9 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread>;

        $r10 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory getThreadFactory(java.lang.String,java.util.concurrent.atomic.AtomicReference)>("SplitEnumerator-main", $r9);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory mainThreadFactory> = $r10;

        $r11 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread>;

        $r12 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory getThreadFactory(java.lang.String,java.util.concurrent.atomic.AtomicReference)>("SplitEnumerator-worker", $r11);

        $r13 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService getExecutor(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory)>($r12);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService workerExecutor> = $r13;

        $r14 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory mainThreadFactory>;

        $r15 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService getExecutor(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory)>($r14);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService mainExecutor> = $r15;

        $r16 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r16.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicBoolean stoppedAcceptAsyncCalls> = $r16;

        return;
    }

    public org.apache.flink.metrics.MetricGroup metricGroup()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r1.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        return $r1;
    }

    public void sendEventToSourceReader(int, org.apache.flink.api.connector.source.SourceEvent)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;
        org.apache.flink.api.connector.source.SourceEvent r1;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory $r3;
        boolean $z0;
        java.util.Map $r4;
        java.lang.Integer $r5;
        java.util.function.Function $r6;
        java.lang.Object $r7;
        java.util.List $r8;
        java.util.concurrent.ExecutorService $r9;
        java.util.concurrent.Callable $r10;
        java.util.concurrent.Future $r11;
        java.lang.Exception $r13;
        java.lang.RuntimeException $r14;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.connector.source.SourceEvent;

     label1:
        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory mainThreadFactory>;

        $z0 = virtualinvoke $r3.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: boolean isCurrentThreadMainExecutorThread()>();

        if $z0 != 0 goto label2;

        $r9 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService mainExecutor>;

        $r10 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_sendEventToSourceReader_1__283: java.util.concurrent.Callable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext,int,org.apache.flink.api.connector.source.SourceEvent)>(r0, i0, r1);

        $r11 = interfaceinvoke $r9.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r10);

        interfaceinvoke $r11.<java.util.concurrent.Future: java.lang.Object get()>();

        goto label3;

     label2:
        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.Map sentSourceEvent>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_sendEventToSourceReader_2__281: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r5, $r6);

        $r8 = (java.util.List) $r7;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to assign splits", $r13);

        throw $r14;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public int currentParallelism()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int $i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $i0 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: int parallelism>;

        return $i0;
    }

    public java.util.Map registeredReaders()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ConcurrentMap registeredReaders>;

        return $r1;
    }

    public void assignSplits(org.apache.flink.api.connector.source.SplitsAssignment)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        org.apache.flink.api.connector.source.SplitsAssignment r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: org.apache.flink.api.connector.source.SplitsAssignment;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List splitsAssignmentSequence>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void signalNoMoreSplits(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        return;
    }

    public void callAsync(java.util.concurrent.Callable, java.util.function.BiConsumer)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1, $r5;
        java.util.function.BiConsumer r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        java.util.concurrent.BlockingQueue $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicBoolean stoppedAcceptAsyncCalls>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.BlockingQueue oneTimeCallables>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_callAsync_5__280: java.util.concurrent.Callable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext,java.util.concurrent.Callable,java.util.function.BiConsumer)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>($r5);

        return;
    }

    public void callAsync(java.util.concurrent.Callable, java.util.function.BiConsumer, long, long)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1, $r5;
        java.util.function.BiConsumer r2;
        long l0, l1;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        java.util.List $r4;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicBoolean stoppedAcceptAsyncCalls>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List periodicCallables>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_callAsync_8__279: java.util.concurrent.Callable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext,java.util.concurrent.Callable,java.util.function.BiConsumer)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    public void runInCoordinatorThread(java.lang.Runnable)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService mainExecutor>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

        return;
    }

    public void close()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicBoolean stoppedAcceptAsyncCalls>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public void runNextOneTimeCallable() throws java.lang.Throwable
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2, $r4;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.Future $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.BlockingQueue oneTimeCallables>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        $r3 = (java.util.concurrent.Callable) $r2;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r5 = (java.util.concurrent.Future) $r4;

        interfaceinvoke $r5.<java.util.concurrent.Future: java.lang.Object get()>();

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: void checkError()>();

        return;
    }

    public void runPeriodicCallable(int) throws java.lang.Throwable
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2, $r4;
        java.util.concurrent.Callable $r3;
        java.util.concurrent.Future $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List periodicCallables>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.util.concurrent.Callable) $r2;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r5 = (java.util.concurrent.Future) $r4;

        interfaceinvoke $r5.<java.util.concurrent.Future: java.lang.Object get()>();

        specialinvoke r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: void checkError()>();

        return;
    }

    public java.util.Map getSentSourceEvent() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.ExecutorService $r1;
        java.util.concurrent.Callable $r2;
        java.util.concurrent.Future $r3;
        java.lang.Object $r4;
        java.util.Map $r5;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService workerExecutor>;

        $r2 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_getSentSourceEvent_9__286: java.util.concurrent.Callable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext)>(r0);

        $r3 = interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.concurrent.Future: java.lang.Object get()>();

        $r5 = (java.util.Map) $r4;

        return $r5;
    }

    public void registerReader(org.apache.flink.api.connector.source.ReaderInfo)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        org.apache.flink.api.connector.source.ReaderInfo r1;
        java.util.concurrent.ConcurrentMap $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: org.apache.flink.api.connector.source.ReaderInfo;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ConcurrentMap registeredReaders>;

        $i0 = virtualinvoke r1.<org.apache.flink.api.connector.source.ReaderInfo: int getSubtaskId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public void unregisterReader(int)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;
        java.util.concurrent.ConcurrentMap $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ConcurrentMap registeredReaders>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    public java.util.List getPeriodicCallables()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List periodicCallables>;

        return $r1;
    }

    public java.util.concurrent.BlockingQueue getOneTimeCallables()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.BlockingQueue $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.BlockingQueue oneTimeCallables>;

        return $r1;
    }

    public java.util.List getSplitsAssignmentSequence()
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.List splitsAssignmentSequence>;

        return $r1;
    }

    private void checkError() throws java.lang.Throwable
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r3, $r5, $r8;
        java.lang.Object $r2, $r4, $r6, $r9;
        java.lang.Throwable $r7, $r10;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r2 == null goto label1;

        $r8 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r10 = (java.lang.Throwable) $r9;

        throw $r10;

     label1:
        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r4 == null goto label2;

        $r5 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r7 = (java.lang.Throwable) $r6;

        throw $r7;

     label2:
        return;
    }

    private static org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory getThreadFactory(java.lang.String, java.util.concurrent.atomic.AtomicReference)
    {
        java.lang.String r0;
        java.util.concurrent.atomic.AtomicReference r1;
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicReference;

        $r2 = new org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        specialinvoke $r2.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory: void <init>(java.lang.String,java.util.concurrent.atomic.AtomicReference)>(r0, r1);

        return $r2;
    }

    private static java.util.concurrent.ExecutorService getExecutor(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory r0;
        java.util.concurrent.ScheduledExecutorService $r1;

        r0 := @parameter0: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$TestingExecutorThreadFactory;

        $r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>(r0);

        return $r1;
    }

    private static org.apache.flink.util.ThrowableCatchingRunnable wrap(java.util.concurrent.atomic.AtomicReference, java.lang.Runnable)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Runnable r1;
        org.apache.flink.util.ThrowableCatchingRunnable $r2;
        java.util.function.Consumer $r3;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Runnable;

        $r2 = new org.apache.flink.util.ThrowableCatchingRunnable;

        $r3 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_wrap_10__285: java.util.function.Consumer bootstrap$(java.util.concurrent.atomic.AtomicReference)>(r0);

        specialinvoke $r2.<org.apache.flink.util.ThrowableCatchingRunnable: void <init>(java.util.function.Consumer,java.lang.Runnable)>($r3, r1);

        return $r2;
    }

    public static void lambda$wrap$10(java.util.concurrent.atomic.AtomicReference, java.lang.Throwable)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Throwable r1, $r3;
        boolean $z0;
        java.lang.Object $r2;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter1: java.lang.Throwable;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r1);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (java.lang.Throwable) $r2;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r1);

     label1:
        return;
    }

    public java.util.HashMap lambda$getSentSourceEvent$9() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.HashMap $r1;
        java.util.Map $r2;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        $r1 = new java.util.HashMap;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.Map sentSourceEvent>;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public java.util.concurrent.Future lambda$callAsync$8(java.util.concurrent.Callable, java.util.function.BiConsumer) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1;
        java.util.function.BiConsumer r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Runnable $r5;
        org.apache.flink.util.ThrowableCatchingRunnable $r6;
        java.util.concurrent.Future $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService workerExecutor>;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_null_7__284: java.lang.Runnable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext,java.util.concurrent.Callable,java.util.function.BiConsumer)>(r0, r1, r2);

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.util.ThrowableCatchingRunnable wrap(java.util.concurrent.atomic.AtomicReference,java.lang.Runnable)>($r4, $r5);

        $r7 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r6);

        return $r7;
    }

    public void lambda$null$7(java.util.concurrent.Callable, java.util.function.BiConsumer)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1;
        java.util.function.BiConsumer r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Runnable $r5;
        org.apache.flink.util.ThrowableCatchingRunnable $r6;
        java.util.concurrent.Future $r7;
        java.lang.Throwable $r9;
        java.lang.Object r10;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

     label1:
        r10 = interfaceinvoke r1.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService mainExecutor>;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_null_6__290: java.lang.Runnable bootstrap$(java.util.function.BiConsumer,java.lang.Object)>(r2, r10);

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.util.ThrowableCatchingRunnable wrap(java.util.concurrent.atomic.AtomicReference,java.lang.Runnable)>($r4, $r5);

        $r7 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r6);

        interfaceinvoke $r7.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        interfaceinvoke r2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(null, $r9);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void lambda$null$6(java.util.function.BiConsumer, java.lang.Object)
    {
        java.util.function.BiConsumer r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.function.BiConsumer;

        r1 := @parameter1: java.lang.Object;

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r1, null);

        return;
    }

    public java.util.concurrent.Future lambda$callAsync$5(java.util.concurrent.Callable, java.util.function.BiConsumer) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1;
        java.util.function.BiConsumer r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Runnable $r5;
        org.apache.flink.util.ThrowableCatchingRunnable $r6;
        java.util.concurrent.Future $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService workerExecutor>;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInWorkerThread>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_null_4__289: java.lang.Runnable bootstrap$(org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext,java.util.concurrent.Callable,java.util.function.BiConsumer)>(r0, r1, r2);

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.util.ThrowableCatchingRunnable wrap(java.util.concurrent.atomic.AtomicReference,java.lang.Runnable)>($r4, $r5);

        $r7 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r6);

        return $r7;
    }

    public void lambda$null$4(java.util.concurrent.Callable, java.util.function.BiConsumer)
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        java.util.concurrent.Callable r1;
        java.util.function.BiConsumer r2;
        java.util.concurrent.ExecutorService $r3;
        java.util.concurrent.atomic.AtomicReference $r4;
        java.lang.Runnable $r5;
        org.apache.flink.util.ThrowableCatchingRunnable $r6;
        java.util.concurrent.Future $r7;
        java.lang.Throwable $r9;
        java.lang.Object r10;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        r1 := @parameter0: java.util.concurrent.Callable;

        r2 := @parameter1: java.util.function.BiConsumer;

     label1:
        r10 = interfaceinvoke r1.<java.util.concurrent.Callable: java.lang.Object call()>();

        $r3 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.ExecutorService mainExecutor>;

        $r4 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.concurrent.atomic.AtomicReference errorInMainThread>;

        $r5 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_null_3__288: java.lang.Runnable bootstrap$(java.util.function.BiConsumer,java.lang.Object)>(r2, r10);

        $r6 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: org.apache.flink.util.ThrowableCatchingRunnable wrap(java.util.concurrent.atomic.AtomicReference,java.lang.Runnable)>($r4, $r5);

        $r7 = interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r6);

        interfaceinvoke $r7.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        interfaceinvoke r2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(null, $r9);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void lambda$null$3(java.util.function.BiConsumer, java.lang.Object)
    {
        java.util.function.BiConsumer r0;
        java.lang.Object r1;

        r0 := @parameter0: java.util.function.BiConsumer;

        r1 := @parameter1: java.lang.Object;

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r1, null);

        return;
    }

    public static java.util.List lambda$sendEventToSourceReader$2(java.lang.Integer)
    {
        java.lang.Integer r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Integer;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public java.lang.Boolean lambda$sendEventToSourceReader$1(int, org.apache.flink.api.connector.source.SourceEvent) throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext r0;
        int i0;
        org.apache.flink.api.connector.source.SourceEvent r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.util.function.Function $r4;
        java.lang.Object $r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Boolean $r7;

        r0 := @this: org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.connector.source.SourceEvent;

        $r2 = r0.<org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext: java.util.Map sentSourceEvent>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.apache.flink.api.connector.source.mocks.MockSplitEnumeratorContext$lambda_null_0__287: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r3, $r4);

        $r6 = (java.util.List) $r5;

        $z0 = interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r7;
    }

    public static java.util.List lambda$null$0(java.lang.Integer)
    {
        java.lang.Integer r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.lang.Integer;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }
}
