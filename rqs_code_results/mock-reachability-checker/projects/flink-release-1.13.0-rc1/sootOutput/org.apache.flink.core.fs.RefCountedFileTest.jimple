public class org.apache.flink.core.fs.RefCountedFileTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder temporaryFolder;

    public void <init>()
    {
        org.apache.flink.core.fs.RefCountedFileTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.RefCountedFileTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r1;

        return;
    }

    public void releaseToZeroRefCounterShouldDeleteTheFile() throws java.io.IOException
    {
        org.apache.flink.core.fs.RefCountedFileTest r0;
        java.util.stream.Stream r3;
        java.io.File $r6, $r8, $r16;
        org.junit.rules.TemporaryFolder $r7, $r15;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.util.UUID $r11;
        java.lang.String $r13;
        boolean $z0;
        org.apache.flink.core.fs.RefCountedFile $r14;
        java.nio.file.Path $r17;
        long $l0;
        java.lang.Throwable $r18, $r20, $r21, r22;

        r0 := @this: org.apache.flink.core.fs.RefCountedFileTest;

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp_");

        $r11 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, $r13);

        $z0 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r14 = new org.apache.flink.core.fs.RefCountedFile;

        specialinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: void <init>(java.io.File)>($r6);

        specialinvoke r0.<org.apache.flink.core.fs.RefCountedFileTest: void verifyTheFileIsStillThere()>();

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: boolean release()>();

        $r15 = r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r16 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r17 = virtualinvoke $r16.<java.io.File: java.nio.file.Path toPath()>();

        r3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($r17);

        r22 = null;

     label01:
        $l0 = interfaceinvoke r3.<java.util.stream.Stream: long count()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l0);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

        goto label12;

     label04:
        $r21 := @caughtexception;

        r22 = $r21;

        throw $r21;

     label05:
        $r20 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r22 == null goto label10;

     label07:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label11;

     label10:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

     label11:
        throw $r20;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void retainsShouldRequirePlusOneReleasesToDeleteTheFile() throws java.io.IOException
    {
        org.apache.flink.core.fs.RefCountedFileTest r0;
        java.util.stream.Stream r3;
        java.io.File $r6, $r8, $r16;
        org.junit.rules.TemporaryFolder $r7, $r15;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.util.UUID $r11;
        java.lang.String $r13;
        boolean $z0;
        org.apache.flink.core.fs.RefCountedFile $r14;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5, $l6;
        java.nio.file.Path $r17;
        java.lang.Throwable $r18, $r19, $r20, r22;

        r0 := @this: org.apache.flink.core.fs.RefCountedFileTest;

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp_");

        $r11 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, $r13);

        $z0 = virtualinvoke $r6.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r14 = new org.apache.flink.core.fs.RefCountedFile;

        specialinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: void <init>(java.io.File)>($r6);

        specialinvoke r0.<org.apache.flink.core.fs.RefCountedFileTest: void verifyTheFileIsStillThere()>();

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: void retain()>();

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: void retain()>();

        $i0 = virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: int getReferenceCounter()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: boolean release()>();

        $i2 = virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: int getReferenceCounter()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l3);

        specialinvoke r0.<org.apache.flink.core.fs.RefCountedFileTest: void verifyTheFileIsStillThere()>();

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: boolean release()>();

        $i4 = virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: int getReferenceCounter()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        specialinvoke r0.<org.apache.flink.core.fs.RefCountedFileTest: void verifyTheFileIsStillThere()>();

        virtualinvoke $r14.<org.apache.flink.core.fs.RefCountedFile: boolean release()>();

        $r15 = r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r16 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r17 = virtualinvoke $r16.<java.io.File: java.nio.file.Path toPath()>();

        r3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($r17);

        r22 = null;

     label01:
        $l6 = interfaceinvoke r3.<java.util.stream.Stream: long count()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l6);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

        goto label12;

     label04:
        $r20 := @caughtexception;

        r22 = $r20;

        throw $r20;

     label05:
        $r19 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r22 == null goto label10;

     label07:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label11;

     label10:
        interfaceinvoke r3.<java.util.stream.Stream: void close()>();

     label11:
        throw $r19;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private void verifyTheFileIsStillThere() throws java.io.IOException
    {
        org.apache.flink.core.fs.RefCountedFileTest r0;
        java.util.stream.Stream r1;
        org.junit.rules.TemporaryFolder $r4;
        java.io.File $r5;
        java.nio.file.Path $r6;
        long $l0;
        java.lang.Throwable $r8, $r9, $r10, r11;

        r0 := @this: org.apache.flink.core.fs.RefCountedFileTest;

        $r4 = r0.<org.apache.flink.core.fs.RefCountedFileTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r5 = virtualinvoke $r4.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r6 = virtualinvoke $r5.<java.io.File: java.nio.file.Path toPath()>();

        r1 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($r6);

        r11 = null;

     label01:
        $l0 = interfaceinvoke r1.<java.util.stream.Stream: long count()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

     label02:
        if r1 == null goto label12;

        goto label03;

     label03:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r11 = $r9;

        throw $r9;

     label05:
        $r8 := @caughtexception;

     label06:
        if r1 == null goto label11;

        if r11 == null goto label10;

     label07:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label11:
        throw $r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private static byte[] bytesOf(java.lang.String)
    {
        java.lang.String r0;
        java.nio.charset.Charset $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        return $r2;
    }
}
