public class org.apache.flink.core.fs.PathTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.fs.PathTest r0;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testPathFromString()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r6, $r11, $r16, $r21, $r26, $r31, $r36, $r41, $r44, $r47, $r49;
        java.net.URI $r2, $r4, $r7, $r9, $r12, $r14, $r17, $r19, $r22, $r24, $r27, $r29, $r32, $r34, $r37, $r39, $r42, $r45;
        java.lang.String $r3, $r5, $r8, $r10, $r13, $r15, $r18, $r20, $r23, $r25, $r28, $r30, $r33, $r35, $r38, $r40, $r43, $r46, $r48;
        java.lang.Exception $r50, $r51;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/path");

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r3);

        $r4 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r5 = virtualinvoke $r4.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r5);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/path/");

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r8);

        $r9 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r10);

        $r11 = new org.apache.flink.core.fs.Path;

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my//path/");

        $r12 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r13 = virtualinvoke $r12.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r13);

        $r14 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r15 = virtualinvoke $r14.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $r16 = new org.apache.flink.core.fs.Path;

        specialinvoke $r16.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my//path//a///");

        $r17 = virtualinvoke $r16.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r18 = virtualinvoke $r17.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path/a", $r18);

        $r19 = virtualinvoke $r16.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r20);

        $r21 = new org.apache.flink.core.fs.Path;

        specialinvoke $r21.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("\\my\\path\\\\a\\\\\\");

        $r22 = virtualinvoke $r21.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r23 = virtualinvoke $r22.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path/a", $r23);

        $r24 = virtualinvoke $r21.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r25 = virtualinvoke $r24.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r25);

        $r26 = new org.apache.flink.core.fs.Path;

        specialinvoke $r26.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///my/path");

        $r27 = virtualinvoke $r26.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r28 = virtualinvoke $r27.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r28);

        $r29 = virtualinvoke $r26.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r30 = virtualinvoke $r29.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r30);

        $r31 = new org.apache.flink.core.fs.Path;

        specialinvoke $r31.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///my/path/");

        $r32 = virtualinvoke $r31.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r33 = virtualinvoke $r32.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r33);

        $r34 = virtualinvoke $r31.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r35 = virtualinvoke $r34.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r35);

        $r36 = new org.apache.flink.core.fs.Path;

        specialinvoke $r36.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("file:///my/path");

        $r37 = virtualinvoke $r36.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r38 = virtualinvoke $r37.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path", $r38);

        $r39 = virtualinvoke $r36.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r40 = virtualinvoke $r39.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r40);

        $r41 = new org.apache.flink.core.fs.Path;

        specialinvoke $r41.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/windows/path");

        $r42 = virtualinvoke $r41.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r43 = virtualinvoke $r42.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/C:/my/windows/path", $r43);

        $r44 = new org.apache.flink.core.fs.Path;

        specialinvoke $r44.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("file:/C:/my/windows/path");

        $r45 = virtualinvoke $r44.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r46 = virtualinvoke $r45.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/C:/my/windows/path", $r46);

     label1:
        $r47 = new org.apache.flink.core.fs.Path;

        $r48 = (java.lang.String) null;

        specialinvoke $r47.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r48);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r50 := @caughtexception;

     label4:
        $r49 = new org.apache.flink.core.fs.Path;

        specialinvoke $r49.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("");

        staticinvoke <org.junit.Assert: void fail()>();

     label5:
        goto label7;

     label6:
        $r51 := @caughtexception;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public void testIsAbsolute()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/abs/path");

        $z0 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = new org.apache.flink.core.fs.Path;

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/");

        $z1 = virtualinvoke $r2.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("./my/rel/path");

        $z2 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("my/rel/path");

        $z3 = virtualinvoke $r4.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/abs/windows/path");

        $z4 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("y:/my/abs/windows/path");

        $z5 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/y:/my/abs/windows/path");

        $z6 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("b:\\my\\abs\\windows\\path");

        $z7 = virtualinvoke $r8.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/c:/my/dir");

        $z8 = virtualinvoke $r9.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r10 = new org.apache.flink.core.fs.Path;

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/C:/");

        $z9 = virtualinvoke $r10.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $r11 = new org.apache.flink.core.fs.Path;

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:");

        $z10 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        $r12 = new org.apache.flink.core.fs.Path;

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/");

        $z11 = virtualinvoke $r12.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r13 = new org.apache.flink.core.fs.Path;

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:my\\relative\\path");

        $z12 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z12);

        $r14 = new org.apache.flink.core.fs.Path;

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("\\my\\dir");

        $z13 = virtualinvoke $r14.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r15 = new org.apache.flink.core.fs.Path;

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("\\");

        $z14 = virtualinvoke $r15.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $r16 = new org.apache.flink.core.fs.Path;

        specialinvoke $r16.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(".\\my\\relative\\path");

        $z15 = virtualinvoke $r16.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z15);

        $r17 = new org.apache.flink.core.fs.Path;

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("my\\relative\\path");

        $z16 = virtualinvoke $r17.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z16);

        $r18 = new org.apache.flink.core.fs.Path;

        specialinvoke $r18.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("\\\\myServer\\myDir");

        $z17 = virtualinvoke $r18.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        return;
    }

    public void testGetName()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        java.lang.String $r2, $r4, $r6, $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/fancy/path");

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("path", $r2);

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/fancy/path/");

        $r4 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("path", $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///my/path");

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("path", $r6);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///myPath/");

        $r8 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("myPath", $r8);

        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/");

        $r10 = virtualinvoke $r9.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r10);

        $r11 = new org.apache.flink.core.fs.Path;

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/windows/path");

        $r12 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("path", $r12);

        $r13 = new org.apache.flink.core.fs.Path;

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("file:/C:/my/windows/path");

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("path", $r14);

        return;
    }

    public void testGetParent()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r2, $r5, $r6, $r9, $r10, $r13, $r14, $r17, $r18, $r19, $r20;
        java.net.URI $r3, $r7, $r11, $r15, $r21;
        java.lang.String $r4, $r8, $r12, $r16, $r22;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/fancy/path");

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/fancy", $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/other/fancy/path/");

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/other/fancy", $r8);

        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///my/path");

        $r10 = virtualinvoke $r9.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r11 = virtualinvoke $r10.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my", $r12);

        $r13 = new org.apache.flink.core.fs.Path;

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///myPath/");

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r15 = virtualinvoke $r14.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r16 = virtualinvoke $r15.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/", $r16);

        $r17 = new org.apache.flink.core.fs.Path;

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/");

        $r18 = virtualinvoke $r17.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r18);

        $r19 = new org.apache.flink.core.fs.Path;

        specialinvoke $r19.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/windows/path");

        $r20 = virtualinvoke $r19.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r22 = virtualinvoke $r21.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/C:/my/windows", $r22);

        return;
    }

    public void testSuffix()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r4, $r7, r11, r13, r15;
        java.net.URI $r2, $r5, $r8;
        java.lang.String $r3, $r6, $r9;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/path");

        r11 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path suffix(java.lang.String)>("_123");

        $r2 = virtualinvoke r11.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path_123", $r3);

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/path/");

        r13 = virtualinvoke $r4.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path suffix(java.lang.String)>("/abc");

        $r5 = virtualinvoke r13.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/my/path/abc", $r6);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/windows/path");

        r15 = virtualinvoke $r7.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path suffix(java.lang.String)>("/abc");

        $r8 = virtualinvoke r15.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/C:/my/windows/path/abc", $r9);

        return;
    }

    public void testDepth()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r1, $r2, $r3, $r4, $r5;
        int $i0, $i2, $i4, $i6, $i8;
        long $l1, $l3, $l5, $l7, $l9;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r1 = new org.apache.flink.core.fs.Path;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/path");

        $i0 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: int depth()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r2 = new org.apache.flink.core.fs.Path;

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/fancy/path/");

        $i2 = virtualinvoke $r2.<org.apache.flink.core.fs.Path: int depth()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/my/fancy/fancy/fancy/fancy/fancy/fancy/fancy/fancy/fancy/fancy/path");

        $i4 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: int depth()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12L, $l5);

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/");

        $i6 = virtualinvoke $r4.<org.apache.flink.core.fs.Path: int depth()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("C:/my/windows/path");

        $i8 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: int depth()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l9);

        return;
    }

    public void testParsing()
    {
        org.apache.flink.core.fs.PathTest r0;
        org.apache.flink.core.fs.Path $r4, $r14, $r23, $r32, $r41;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r15, $r16, $r17, $r18, $r24, $r25, $r26, $r27, $r33, $r34, $r35, $r36, $r42, $r43, $r44, $r45;
        java.lang.String $r10, $r11, $r12, $r13, $r19, $r20, $r21, $r22, $r28, $r29, $r30, $r31, $r37, $r38, $r39, $r40, $r46, $r47, $r48, $r49;
        java.net.URI r50, r51, r52, r53, r54;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r4 = new org.apache.flink.core.fs.Path;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hdfs");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("localhost:8000");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test/test");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r10);

        r50 = virtualinvoke $r4.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r11 = virtualinvoke r50.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r11);

        $r12 = virtualinvoke r50.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("localhost:8000", $r12);

        $r13 = virtualinvoke r50.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test/test", $r13);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hdfs");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test/test");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r19);

        r51 = virtualinvoke $r14.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r20 = virtualinvoke r51.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r20);

        $r21 = virtualinvoke r51.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r21);

        $r22 = virtualinvoke r51.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test/test", $r22);

        $r23 = new org.apache.flink.core.fs.Path;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hdfs");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test/test");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r28);

        r52 = virtualinvoke $r23.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r29 = virtualinvoke r52.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r29);

        $r30 = virtualinvoke r52.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r30);

        $r31 = virtualinvoke r52.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test/test", $r31);

        $r32 = new org.apache.flink.core.fs.Path;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hdfs");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":/");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test/test");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r37);

        r53 = virtualinvoke $r32.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r38 = virtualinvoke r53.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r38);

        $r39 = virtualinvoke r53.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("test", $r39);

        $r40 = virtualinvoke r53.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test", $r40);

        $r41 = new org.apache.flink.core.fs.Path;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hdfs");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":///");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/test/test");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r46);

        r54 = virtualinvoke $r41.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r47 = virtualinvoke r54.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hdfs", $r47);

        $r48 = virtualinvoke r54.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r48);

        $r49 = virtualinvoke r54.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test/test", $r49);

        return;
    }

    public void testMakeQualified() throws java.io.IOException
    {
        org.apache.flink.core.fs.PathTest r0;
        java.lang.String r1, $r4, $r5, $r9, $r10, $r13, $r14, $r15;
        org.apache.flink.core.fs.Path $r2, $r6, $r8, $r11, r17, r20;
        org.apache.flink.core.fs.FileSystem $r3, $r7, $r12;
        java.net.URI r18, r21;

        r0 := @this: org.apache.flink.core.fs.PathTest;

        $r2 = new org.apache.flink.core.fs.Path;

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("test/test");

        $r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        r17 = virtualinvoke $r2.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem)>($r3);

        r18 = virtualinvoke r17.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r4 = virtualinvoke r18.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r4);

        $r5 = virtualinvoke r18.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r5);

        $r6 = new org.apache.flink.core.fs.Path;

        $r7 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r8 = virtualinvoke $r7.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        $r9 = virtualinvoke $r8.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String)>($r9, "test/test");

        r1 = virtualinvoke $r6.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        $r10 = virtualinvoke r18.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r10);

        $r11 = new org.apache.flink.core.fs.Path;

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("/test/test");

        $r12 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        r20 = virtualinvoke $r11.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem)>($r12);

        r21 = virtualinvoke r20.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r13 = virtualinvoke r21.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("file", $r13);

        $r14 = virtualinvoke r21.<java.net.URI: java.lang.String getAuthority()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r14);

        $r15 = virtualinvoke r21.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("/test/test", $r15);

        return;
    }
}
