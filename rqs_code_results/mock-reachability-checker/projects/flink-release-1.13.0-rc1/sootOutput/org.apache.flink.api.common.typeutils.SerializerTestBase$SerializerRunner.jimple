class org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner extends java.lang.Thread
{
    final java.util.concurrent.CyclicBarrier allReadyBarrier;
    final org.apache.flink.api.common.typeutils.TypeSerializer serializer;
    final java.lang.Object[] testData;
    final long durationLimitMillis;
    java.lang.Throwable failure;
    final org.apache.flink.testutils.DeeplyEqualsChecker checker;

    void <init>(java.util.concurrent.CyclicBarrier, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Object[], long, org.apache.flink.testutils.DeeplyEqualsChecker)
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner r0;
        java.util.concurrent.CyclicBarrier r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Object[] r3;
        long l0;
        org.apache.flink.testutils.DeeplyEqualsChecker r4;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner;

        r1 := @parameter0: java.util.concurrent.CyclicBarrier;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: java.lang.Object[];

        l0 := @parameter3: long;

        r4 := @parameter4: org.apache.flink.testutils.DeeplyEqualsChecker;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.util.concurrent.CyclicBarrier allReadyBarrier> = r1;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = r2;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Object[] testData> = r3;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: long durationLimitMillis> = l0;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.testutils.DeeplyEqualsChecker checker> = r4;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure> = null;

        return;
    }

    public void run()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner r0;
        java.lang.Object[] r3;
        int i0, $i5, i9;
        java.lang.Object r4, r5, r6;
        org.apache.flink.core.memory.DataInputDeserializer $r7;
        org.apache.flink.core.memory.DataOutputSerializer $r8;
        java.util.concurrent.CyclicBarrier $r9;
        long $l2, $l3, $l4, $l6, l8;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10, $r12, $r13;
        byte[] $r11;
        org.apache.flink.testutils.CustomEqualityMatcher $r14, $r16;
        org.apache.flink.testutils.DeeplyEqualsChecker $r15;
        byte $b7;
        java.lang.Throwable $r17;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner;

        $r7 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r7.<org.apache.flink.core.memory.DataInputDeserializer: void <init>()>();

        $r8 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r8.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(128);

     label1:
        $r9 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.util.concurrent.CyclicBarrier allReadyBarrier>;

        virtualinvoke $r9.<java.util.concurrent.CyclicBarrier: int await()>();

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: long durationLimitMillis>;

        $l4 = $l3 * 1000000L;

        l8 = $l2 + $l4;

     label2:
        r3 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Object[] testData>;

        i0 = lengthof r3;

        i9 = 0;

     label3:
        if i9 >= i0 goto label6;

        r4 = r3[i9];

        $r10 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r4, $r8);

        $r11 = virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getSharedBuffer()>();

        $i5 = virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputSerializer: int length()>();

        virtualinvoke $r7.<org.apache.flink.core.memory.DataInputDeserializer: void setBuffer(byte[],int,int)>($r11, 0, $i5);

        $r12 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r5 = virtualinvoke $r12.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r7);

        $r13 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        r6 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r5);

        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputSerializer: void clear()>();

        $r14 = staticinvoke <org.apache.flink.testutils.CustomEqualityMatcher: org.apache.flink.testutils.CustomEqualityMatcher deeplyEquals(java.lang.Object)>(r4);

        $r15 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: org.apache.flink.testutils.DeeplyEqualsChecker checker>;

        $r16 = virtualinvoke $r14.<org.apache.flink.testutils.CustomEqualityMatcher: org.apache.flink.testutils.CustomEqualityMatcher withChecker(org.apache.flink.testutils.DeeplyEqualsChecker)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Serialization/Deserialization cycle resulted in an object that are not equal to the original.", r6, $r16);

        $l6 = staticinvoke <java.lang.System: long nanoTime()>();

        $b7 = $l6 cmp l8;

        if $b7 < 0 goto label5;

     label4:
        return;

     label5:
        i9 = i9 + 1;

        goto label3;

     label6:
        goto label2;

     label7:
        $r17 := @caughtexception;

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure> = $r17;

        return;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label7 with label7;
    }

    void checkResult() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner r0;
        java.lang.Throwable $r1, $r2, $r3, $r5;
        boolean $z0;
        java.lang.Exception $r4;
        java.lang.AssertionError $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure>;

        $z0 = $r2 instanceof java.lang.AssertionError;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure>;

        $r6 = (java.lang.AssertionError) $r5;

        throw $r6;

     label1:
        $r3 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: java.lang.Throwable failure>;

        $r4 = (java.lang.Exception) $r3;

        throw $r4;

     label2:
        return;
    }
}
