public class org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testRowSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r4;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r9;
        org.apache.flink.types.Row $r10, $r12;
        java.lang.Integer $r11, $r13;
        org.apache.flink.api.common.ExecutionConfig $r14;
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance $r15;
        org.apache.flink.types.Row[] $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest;

        $r6 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[1] = $r9;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r10 = new org.apache.flink.types.Row;

        specialinvoke $r10.<org.apache.flink.types.Row: void <init>(int)>(2);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r10.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r11);

        virtualinvoke $r10.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, "a");

        $r12 = new org.apache.flink.types.Row;

        specialinvoke $r12.<org.apache.flink.types.Row: void <init>(int)>(2);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r12.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r13);

        virtualinvoke $r12.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, null);

        $r14 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r14.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r4 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createLegacySerializer(org.apache.flink.api.common.ExecutionConfig)>($r14);

        $r15 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance;

        $r16 = newarray (org.apache.flink.types.Row)[2];

        $r16[0] = $r10;

        $r16[1] = $r12;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r4, $r16);

        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    public void testLargeRowSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19;
        org.apache.flink.types.Row $r20;
        java.lang.Integer $r21;
        org.apache.flink.api.common.ExecutionConfig $r22;
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance $r23;
        org.apache.flink.types.Row[] $r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest;

        $r5 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[13];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[2] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[3] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[4] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[5] = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[6] = $r13;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[7] = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[8] = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[9] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[10] = $r17;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[11] = $r18;

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[12] = $r19;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r20 = new org.apache.flink.types.Row;

        specialinvoke $r20.<org.apache.flink.types.Row: void <init>(int)>(13);

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, $r21);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(5, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(6, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(7, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(8, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(9, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(10, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(11, null);

        virtualinvoke $r20.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(12, "Test");

        $r22 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r22.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r3 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createLegacySerializer(org.apache.flink.api.common.ExecutionConfig)>($r22);

        $r23 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance;

        $r24 = newarray (org.apache.flink.types.Row)[1];

        $r24[0] = $r20;

        specialinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r3, $r24);

        virtualinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    public void testRowSerializerWithComplexTypes()
    {
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r6;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r9, $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r11, $r12, $r15, $r16, $r17;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r13;
        org.apache.flink.api.common.typeinfo.TypeInformation $r18;
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo $r19, $r20, $r21;
        org.apache.flink.types.Row[] $r22;
        org.apache.flink.types.Row $r23, $r25, $r28, $r31, $r34, $r37, $r40, $r47, $r54, $r61, $r68, $r75, $r82, $r89;
        java.lang.Integer $r24, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r48, $r51, $r55, $r58, $r62, $r65, $r69, $r72, $r76, $r79, $r83, $r86;
        java.lang.Double $r27, $r30, $r33, $r36, $r39, $r42, $r49, $r56, $r63, $r70, $r77, $r84;
        org.apache.flink.api.java.tuple.Tuple3 $r43, $r50, $r57, $r64, $r71, $r78, $r85;
        java.lang.Boolean $r45, $r52, $r59, $r66, $r73, $r80, $r87;
        java.lang.Short $r46, $r53, $r60, $r67, $r74, $r81, $r88;
        org.apache.flink.api.common.ExecutionConfig $r90;
        org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance $r91;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest;

        $r8 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        $r9 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[5];

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9[2] = $r12;

        $r13 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r14 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r14[0] = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r14[1] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo SHORT_TYPE_INFO>;

        $r14[2] = $r17;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r14);

        $r9[3] = $r13;

        $r18 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/LegacyRowSerializerTest$MyPojo;");

        $r9[4] = $r18;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r9);

        $r19 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo;

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: void <init>()>();

        $r19.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: java.lang.String name> = null;

        $r20 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: void <init>()>();

        $r20.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: java.lang.String name> = "Test1";

        $r21 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: void <init>()>();

        $r21.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$MyPojo: java.lang.String name> = "Test2";

        $r22 = newarray (org.apache.flink.types.Row)[14];

        $r23 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(null, null, null, null, null);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r25 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r24, null, null, null, null);

        $r22[1] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r28 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r26, $r27, null, null, null);

        $r22[2] = $r28;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r29, $r30, "a", null, null);

        $r22[3] = $r31;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r34 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r32, $r33, "a", null, null);

        $r22[4] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r36 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r37 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r35, $r36, "a", null, null);

        $r22[5] = $r37;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r40 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r38, $r39, "b", null, null);

        $r22[6] = $r40;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r43 = new org.apache.flink.api.java.tuple.Tuple3;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r46 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r43.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r44, $r45, $r46);

        $r47 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r41, $r42, "b", $r43, null);

        $r22[7] = $r47;

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r49 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r50 = new org.apache.flink.api.java.tuple.Tuple3;

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r52 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r53 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r50.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r51, $r52, $r53);

        $r54 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r48, $r49, "b", $r50, null);

        $r22[8] = $r54;

        $r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r56 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r57 = new org.apache.flink.api.java.tuple.Tuple3;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r59 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r60 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(2);

        specialinvoke $r57.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r58, $r59, $r60);

        $r61 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r55, $r56, "b", $r57, null);

        $r22[9] = $r61;

        $r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r63 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r64 = new org.apache.flink.api.java.tuple.Tuple3;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r66 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r67 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r64.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r65, $r66, $r67);

        $r68 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r62, $r63, "b", $r64, null);

        $r22[10] = $r68;

        $r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r70 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r71 = new org.apache.flink.api.java.tuple.Tuple3;

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r73 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r74 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r71.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r72, $r73, $r74);

        $r75 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r69, $r70, "b", $r71, $r19);

        $r22[11] = $r75;

        $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r77 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r78 = new org.apache.flink.api.java.tuple.Tuple3;

        $r79 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r80 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r81 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r78.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r79, $r80, $r81);

        $r82 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r76, $r77, "b", $r78, $r20);

        $r22[12] = $r82;

        $r83 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r84 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r85 = new org.apache.flink.api.java.tuple.Tuple3;

        $r86 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r87 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r88 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(3);

        specialinvoke $r85.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r86, $r87, $r88);

        $r89 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest: org.apache.flink.types.Row createRow(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r83, $r84, "b", $r85, $r21);

        $r22[13] = $r89;

        $r90 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r90.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r6 = virtualinvoke $r8.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createLegacySerializer(org.apache.flink.api.common.ExecutionConfig)>($r90);

        $r91 = new org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance;

        specialinvoke $r91.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.types.Row[])>(r0, r6, $r22);

        virtualinvoke $r91.<org.apache.flink.api.java.typeutils.runtime.LegacyRowSerializerTest$RowSerializerTestInstance: void testAll()>();

        return;
    }

    private static org.apache.flink.types.Row createRow(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, r2, r3, r4;
        org.apache.flink.types.Row $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        $r6 = new org.apache.flink.types.Row;

        specialinvoke $r6.<org.apache.flink.types.Row: void <init>(int)>(5);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, r0);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, r1);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, r2);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, r3);

        virtualinvoke $r6.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(4, r4);

        return $r6;
    }
}
