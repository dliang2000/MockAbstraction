public abstract class org.apache.flink.api.common.typeutils.ComparatorTestBase extends org.apache.flink.util.TestLogger
{
    private static final int DEFAULT_MAX_NORMALIZED_KEY_LEN;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.operators.Order[] getTestedOrder()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.operators.Order[] $r1;
        org.apache.flink.api.common.operators.Order $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r1 = newarray (org.apache.flink.api.common.operators.Order)[2];

        $r2 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ASCENDING>;

        $r1[0] = $r2;

        $r3 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order DESCENDING>;

        $r1[1] = $r3;

        return $r1;
    }

    protected abstract org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean);

    protected abstract org.apache.flink.api.common.typeutils.TypeSerializer createSerializer();

    protected abstract java.lang.Object[] getSortedTestData();

    public void testDuplicate()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1, r2;
        java.lang.Object[] r3;
        org.apache.flink.api.common.operators.Order[] $r4;
        org.apache.flink.api.common.operators.Order $r5;
        java.lang.Object $r6, $r7, $r8, $r9;
        boolean $z0, $z1, z2, $z3;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

     label1:
        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r5 = $r4[0];

        z2 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r5);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z2);

        r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        $r6 = r3[0];

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r6);

        $r7 = r3[1];

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r7);

        $r8 = r3[0];

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        $r9 = r3[1];

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Comparator duplication does not work: Altering the reference in a duplicated comparator alters the original comparator\'s reference.", $z3);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public void testEquality()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.operators.Order[] r1;
        int i0, i1;
        org.apache.flink.api.common.operators.Order r2;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>(r2);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testEquals(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void testEquals(boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView r2, r3;
        org.apache.flink.api.common.typeutils.TypeComparator r4;
        java.lang.Object[] r5;
        int i0, $i1, i2;
        java.lang.Object r7;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView $r8, $r9;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r15, $r17;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

     label1:
        r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        i0 = lengthof r5;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r7 = r5[i2];

        $r8 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void writeSortedData(java.lang.Object,org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView)>(r7, $r8);

        r3 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        $r9 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void writeSortedData(java.lang.Object,org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView)>(r7, $r9);

        r2 = virtualinvoke $r9.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        $i1 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.TypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r2, r3);

        if $i1 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        i2 = i2 + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testEqualityWithReference()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeComparator r1, r2;
        java.lang.Object[] r3;
        int i0, $i1, i2;
        java.lang.Object r5, r6, $r9;
        org.apache.flink.api.common.operators.Order[] $r7;
        org.apache.flink.api.common.operators.Order $r8;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r15, $r17;
        java.lang.StringBuilder $r13, $r14, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer r18;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

     label1:
        r18 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()>();

        $r7 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r8 = $r7[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r8);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        i0 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        r5 = r3[i2];

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r5);

        $r9 = virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r6 = virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r5, $r9);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>(r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r6);

        $i1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r2);

        if $i1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        i2 = i2 + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testInequality()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.operators.Order[] r1;
        int i0, i1;
        org.apache.flink.api.common.operators.Order r2;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>(r2);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testGreatSmallAscDesc(boolean,boolean)>(z0, 1);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testGreatSmallAscDesc(boolean,boolean)>(z0, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void testGreatSmallAscDesc(boolean, boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView $r6, $r8;
        java.lang.Object $r7, $r9;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r15, $r17;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.Object[] r18;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

     label01:
        r18 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        i7 = 0;

     label02:
        $i0 = lengthof r18;

        $i1 = $i0 - 1;

        if i7 >= $i1 goto label17;

        i8 = i7 + 1;

     label03:
        $i2 = lengthof r18;

        if i8 >= $i2 goto label16;

        $r6 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        $r7 = r18[i7];

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void writeSortedData(java.lang.Object,org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView)>($r7, $r6);

        r4 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        $r8 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        $r9 = r18[i8];

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void writeSortedData(java.lang.Object,org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView)>($r9, $r8);

        r5 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        if z1 == 0 goto label06;

        if z0 == 0 goto label06;

        $i6 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r4, r5);

        if $i6 >= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label06:
        if z1 == 0 goto label09;

        if z0 != 0 goto label09;

        $i5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r4, r5);

        if $i5 <= 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label09:
        if z1 != 0 goto label12;

        if z0 == 0 goto label12;

        $i4 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r5, r4);

        if $i4 <= 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label12:
        if z1 != 0 goto label15;

        if z0 != 0 goto label15;

        $i3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareSerialized(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView)>(r5, r4);

        if $i3 >= 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label15:
        i8 = i8 + 1;

        goto label03;

     label16:
        i7 = i7 + 1;

        goto label02;

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label19:
        return;

        catch java.lang.Exception from label01 to label17 with label18;
    }

    public void testInequalityWithReference()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.operators.Order[] r1;
        int i0, i1;
        org.apache.flink.api.common.operators.Order r2;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>(r2);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testGreatSmallAscDescWithReference(boolean,boolean)>(z0, 1);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testGreatSmallAscDescWithReference(boolean,boolean)>(z0, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void testGreatSmallAscDescWithReference(boolean, boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.common.typeutils.TypeComparator r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.Object $r3, $r4;
        java.lang.Exception $r5;
        java.io.PrintStream $r6;
        java.lang.String $r7, $r10, $r12;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.Object[] r13;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

     label01:
        r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        i7 = 0;

     label02:
        $i0 = lengthof r13;

        $i1 = $i0 - 1;

        if i7 >= $i1 goto label17;

        i8 = i7 + 1;

     label03:
        $i2 = lengthof r13;

        if i8 >= $i2 goto label16;

        $r3 = r13[i7];

        virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r3);

        $r4 = r13[i8];

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r4);

        if z1 == 0 goto label06;

        if z0 == 0 goto label06;

        $i6 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r2);

        if $i6 <= 0 goto label04;

        $z2 = 1;

        goto label05;

     label04:
        $z2 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label06:
        if z1 == 0 goto label09;

        if z0 != 0 goto label09;

        $i5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r2);

        if $i5 >= 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label09:
        if z1 != 0 goto label12;

        if z0 == 0 goto label12;

        $i4 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r1);

        if $i4 >= 0 goto label10;

        $z4 = 1;

        goto label11;

     label10:
        $z4 = 0;

     label11:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

     label12:
        if z1 != 0 goto label15;

        if z0 != 0 goto label15;

        $i3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r1);

        if $i3 <= 0 goto label13;

        $z5 = 1;

        goto label14;

     label13:
        $z5 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label15:
        i8 = i8 + 1;

        goto label03;

     label16:
        i7 = i7 + 1;

        goto label02;

     label17:
        goto label19;

     label18:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r10 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label19:
        return;

        catch java.lang.Exception from label01 to label17 with label18;
    }

    public org.apache.flink.core.memory.MemorySegment setupNormalizedKeysMemSegment(java.lang.Object[], int, org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        org.apache.flink.api.common.typeutils.TypeComparator r2;
        org.apache.flink.core.memory.MemorySegment r3;
        java.lang.Object r5;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeComparator;

        r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledSegment(int)>(2048);

        i2 = 0;

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        r5 = r1[i3];

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void putNormalizedKey(java.lang.Object,org.apache.flink.core.memory.MemorySegment,int,int)>(r5, r3, i2, i0);

        i2 = i2 + i0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r3;
    }

    private int getNormKeyLen(boolean, java.lang.Object[], org.apache.flink.api.common.typeutils.TypeComparator) throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1, $z2;
        java.lang.Object[] r1;
        org.apache.flink.api.common.typeutils.TypeComparator r2;
        int $i0, $i1, i2;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeComparator;

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: int getNormalizeKeyLen()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 8);

        $i1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: int getNormalizeKeyLen()>();

        if i2 >= $i1 goto label1;

        $z2 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: boolean isNormalizedKeyPrefixOnly(int)>(i2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label1:
        if z0 == 0 goto label2;

        i2 = i2 / 2;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: boolean isNormalizedKeyPrefixOnly(int)>(i2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label2:
        return i2;
    }

    public void testNormalizedKeysEqualsFullLength()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.operators.Order[] $r2;
        org.apache.flink.api.common.operators.Order $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r3 = $r2[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r3);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysEquals(boolean)>(0);

        return;
    }

    public void testNormalizedKeysEqualsHalfLength()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.operators.Order[] $r2;
        org.apache.flink.api.common.operators.Order $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r3 = $r2[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r3);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysEquals(boolean)>(1);

        return;
    }

    public void testNormalizedKeysEquals(boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, z1, $z2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.apache.flink.core.memory.MemorySegment r3, r4;
        org.apache.flink.api.common.operators.Order[] $r5;
        org.apache.flink.api.common.operators.Order $r6;
        java.lang.Exception $r7;
        java.io.PrintStream $r8;
        java.lang.String $r9, $r12, $r14;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

     label1:
        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r6 = $r5[0];

        z1 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r6);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z1);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: int getNormKeyLen(boolean,java.lang.Object[],org.apache.flink.api.common.typeutils.TypeComparator)>(z0, r2, r1);

        r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.core.memory.MemorySegment setupNormalizedKeysMemSegment(java.lang.Object[],int,org.apache.flink.api.common.typeutils.TypeComparator)>(r2, i0, r1);

        r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.core.memory.MemorySegment setupNormalizedKeysMemSegment(java.lang.Object[],int,org.apache.flink.api.common.typeutils.TypeComparator)>(r2, i0, r1);

        i5 = 0;

     label2:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label5;

        $i3 = i5 * i0;

        $i2 = i5 * i0;

        $i4 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r4, $i3, $i2, i0);

        if $i4 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        i5 = i5 + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r9 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r12 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r14);

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testNormalizedKeysGreatSmallFullLength()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.operators.Order[] $r2;
        org.apache.flink.api.common.operators.Order $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r3 = $r2[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r3);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysGreatSmall(boolean,org.apache.flink.api.common.typeutils.TypeComparator,boolean)>(1, r1, 0);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysGreatSmall(boolean,org.apache.flink.api.common.typeutils.TypeComparator,boolean)>(0, r1, 0);

        return;
    }

    public void testNormalizedKeysGreatSmallAscDescHalfLength()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.operators.Order[] $r2;
        org.apache.flink.api.common.operators.Order $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r3 = $r2[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r3);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysGreatSmall(boolean,org.apache.flink.api.common.typeutils.TypeComparator,boolean)>(1, r1, 1);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void testNormalizedKeysGreatSmall(boolean,org.apache.flink.api.common.typeutils.TypeComparator,boolean)>(0, r1, 1);

        return;
    }

    protected void testNormalizedKeysGreatSmall(boolean, org.apache.flink.api.common.typeutils.TypeComparator, boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, i10, i11;
        org.apache.flink.core.memory.MemorySegment r2, r3;
        java.lang.Exception $r4;
        java.io.PrintStream $r5;
        java.lang.String $r6, $r9, $r11;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.Object[] r12;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        z1 := @parameter2: boolean;

     label01:
        r12 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: int getNormKeyLen(boolean,java.lang.Object[],org.apache.flink.api.common.typeutils.TypeComparator)>(z1, r12, r1);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.core.memory.MemorySegment setupNormalizedKeysMemSegment(java.lang.Object[],int,org.apache.flink.api.common.typeutils.TypeComparator)>(r12, i0, r1);

        r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.core.memory.MemorySegment setupNormalizedKeysMemSegment(java.lang.Object[],int,org.apache.flink.api.common.typeutils.TypeComparator)>(r12, i0, r1);

        $z3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean isNormalizedKeyPrefixOnly(int)>(i0);

        if $z3 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z2 = $z4;

        i6 = 0;

     label04:
        $i7 = lengthof r12;

        $i8 = $i7 - 1;

        if i6 >= $i8 goto label19;

        i9 = i6 + 1;

     label05:
        $i1 = lengthof r12;

        if i9 >= $i1 goto label18;

        if z0 == 0 goto label11;

        $i5 = i6 * i0;

        $i4 = i9 * i0;

        i10 = virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r3, $i5, $i4, i0);

        if z2 == 0 goto label08;

        if i10 >= 0 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        goto label17;

     label08:
        if i10 > 0 goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        goto label17;

     label11:
        $i3 = i9 * i0;

        $i2 = i6 * i0;

        i11 = virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, $i3, $i2, i0);

        if z2 == 0 goto label14;

        if i11 <= 0 goto label12;

        $z7 = 1;

        goto label13;

     label12:
        $z7 = 0;

     label13:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        goto label17;

     label14:
        if i11 < 0 goto label15;

        $z8 = 1;

        goto label16;

     label15:
        $z8 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

     label17:
        i9 = i9 + 1;

        goto label05;

     label18:
        i6 = i6 + 1;

        goto label04;

     label19:
        goto label21;

     label20:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label21:
        return;

        catch java.lang.Exception from label01 to label19 with label20;
    }

    public void testNormalizedKeyReadWriter()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        java.lang.Object r1, r7;
        boolean z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeComparator r2, r3;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView r5;
        int i0, $i1, i2;
        java.lang.Object[] $r8, r21;
        org.apache.flink.api.common.operators.Order[] $r9;
        org.apache.flink.api.common.operators.Order $r10;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView $r11;
        java.lang.Exception $r13;
        java.io.PrintStream $r14;
        java.lang.String $r15, $r18, $r20;
        java.lang.StringBuilder $r16, $r17, $r19;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

     label1:
        r21 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        r1 = $r8[0];

        $r9 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r10 = $r9[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r10);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsSerializationWithKeyNormalization()>();

        if $z1 != 0 goto label3;

     label2:
        return;

     label3:
        r3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r1);

        $r11 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r11.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        i0 = lengthof r21;

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        r7 = r21[i2];

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r7);

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: void writeWithKeyNormalization(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r7, $r11);

        r5 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: java.lang.Object readWithKeyDenormalization(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r1, r5);

        $i1 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>(r3);

        if $i1 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        i2 = i2 + 1;

        goto label4;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r15 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r18 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r20);

     label9:
        return;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Exception from label3 to label7 with label8;
    }

    public void testKeyExtraction()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeComparator r1, $r11;
        java.lang.Object[] r2, r6;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object r4, $r9, $r10, $r12;
        org.apache.flink.api.common.typeutils.TypeComparator[] r5;
        org.apache.flink.api.common.operators.Order[] $r7;
        org.apache.flink.api.common.operators.Order $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        $r7 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.operators.Order[] getTestedOrder()>();

        $r8 = $r7[0];

        z0 = staticinvoke <org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean isAscending(org.apache.flink.api.common.operators.Order)>($r8);

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)>(z0);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedData()>();

        i0 = lengthof r2;

        i5 = 0;

     label1:
        if i5 >= i0 goto label9;

        r4 = r2[i5];

        r5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        $i2 = lengthof r5;

        r6 = newarray (java.lang.Object)[$i2];

        i1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r4, r6, 0);

        $i3 = lengthof r5;

        if i1 != $i3 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        i6 = 0;

     label4:
        if i6 >= i1 goto label8;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: boolean supportsNullKeys()>();

        if $z1 != 0 goto label5;

        $r12 = r6[i6];

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r12);

     label5:
        $r11 = r5[i6];

        $r10 = r6[i6];

        $r9 = r6[i6];

        $i4 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $i4 != 0 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        i6 = i6 + 1;

        goto label4;

     label8:
        i5 = i5 + 1;

        goto label1;

     label9:
        return;
    }

    protected void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        java.lang.String r1;
        java.lang.Object r2, r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator getComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)>(z0);

        if r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as comparator.");

        throw $r2;

     label1:
        return r1;
    }

    protected java.lang.Object[] getSortedData()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        java.lang.Object[] r1;
        int $i0;
        java.lang.RuntimeException $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: java.lang.Object[] getSortedTestData()>();

        if r1 != null goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as test data.");

        throw $r3;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case does not provide enough sorted test data.");

        throw $r2;

     label2:
        return r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()>();

        if r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as serializer.");

        throw $r2;

     label1:
        return r1;
    }

    protected void writeSortedData(java.lang.Object, org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;
        java.lang.Object r1, r5, $r7;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView r2;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView r4;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        r4 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        $i0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView: int available()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("No data available during deserialization.", $z0);

        $r7 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r5 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r7, r4);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value is wrong.", r1, r5);

        return;
    }

    protected boolean supportsNullKeys()
    {
        org.apache.flink.api.common.typeutils.ComparatorTestBase r0;

        r0 := @this: org.apache.flink.api.common.typeutils.ComparatorTestBase;

        return 0;
    }

    private static boolean isAscending(org.apache.flink.api.common.operators.Order)
    {
        org.apache.flink.api.common.operators.Order r0, $r1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.common.operators.Order;

        $r1 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ASCENDING>;

        if r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.ComparatorTestBase: int DEFAULT_MAX_NORMALIZED_KEY_LEN> = 8;

        return;
    }
}
