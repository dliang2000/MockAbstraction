public class org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void singleImmediateWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        org.apache.flink.api.common.eventtime.Watermark $r5, $r6;
        org.hamcrest.Matcher $r7, $r8, $r11;
        boolean $z0;
        java.lang.Boolean $r9, $r10;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        $r5 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(0L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r5);

        $r6 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r7 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(0L);

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        return;
    }

    public void singleImmediateIdleness()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        org.apache.flink.api.common.eventtime.Watermark $r5;
        org.hamcrest.Matcher $r6, $r9;
        boolean $z0;
        java.lang.Boolean $r7, $r8;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void singleImmediateWatermarkAfterIdleness()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        boolean $z0, $z1;
        java.lang.Boolean $r5, $r6, $r12, $r13;
        org.hamcrest.Matcher $r7, $r10, $r11, $r14;
        org.apache.flink.api.common.eventtime.Watermark $r8, $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        $r8 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(0L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r8);

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r10 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(0L);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        return;
    }

    public void multipleImmediateWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4, r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7, $r8, $r9;
        org.hamcrest.Matcher $r10, $r11, $r14;
        boolean $z0;
        java.lang.Boolean $r12, $r13;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        r5 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r8);

        interfaceinvoke r5.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r10 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(2L);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        return;
    }

    public void whenImmediateOutputBecomesIdleWatermarkAdvances()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6, $r7, $r8, $r11;
        org.hamcrest.Matcher $r9, $r10, $r12, $r13;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r5 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        $r6 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r6);

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r9 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(2L);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        $r11 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r12 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r12);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r13);

        return;
    }

    public void combinedWatermarkDoesNotRegressWhenIdleOutputRegresses()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6, $r7, $r8, $r11, $r12;
        org.hamcrest.Matcher $r9, $r10, $r13, $r14;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r5 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        $r6 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r6);

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r9 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        $r11 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r11.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(3L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r11);

        $r12 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r13 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        return;
    }

    public void noCombinedDeferredUpdateWhenWeHaveZeroOutputs()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;
        org.apache.flink.api.common.eventtime.Watermark $r4;
        org.hamcrest.Matcher $r5, $r6;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r4 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r6);

        return;
    }

    public void deferredOutputDoesNotImmediatelyAdvanceWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6, $r7, $r8, $r10;
        org.hamcrest.Matcher $r9, $r11, $r12;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r5 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        $r6 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(0L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r6);

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(1L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        virtualinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r11 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(0L);

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        return;
    }

    public void singleDeferredWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        org.apache.flink.api.common.eventtime.Watermark $r5, $r6;
        org.hamcrest.Matcher $r7, $r8, $r11;
        boolean $z0;
        java.lang.Boolean $r9, $r10;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        $r5 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(0L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r5);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r6 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r7 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(0L);

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        return;
    }

    public void singleDeferredIdleness()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        org.apache.flink.api.common.eventtime.Watermark $r5;
        org.hamcrest.Matcher $r6, $r9;
        boolean $z0;
        java.lang.Boolean $r7, $r8;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r6 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void singleDeferredWatermarkAfterIdleness()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r4;
        boolean $z0, $z1;
        java.lang.Boolean $r5, $r6, $r12, $r13;
        org.hamcrest.Matcher $r7, $r10, $r11, $r14;
        org.apache.flink.api.common.eventtime.Watermark $r8, $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r4);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        $r8 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(0L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r8);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r10 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(0L);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        return;
    }

    public void multipleDeferredWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4, r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7, $r8, $r9;
        org.hamcrest.Matcher $r10, $r11, $r14;
        boolean $z0;
        java.lang.Boolean $r12, $r13;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        r5 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r6);

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r8);

        interfaceinvoke r5.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r10 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(2L);

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: boolean isIdle()>();

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        return;
    }

    public void immediateUpdatesTakeDeferredUpdatesIntoAccount()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r3, r4;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6, $r7, $r10, $r11;
        org.hamcrest.Matcher $r8, $r9, $r12, $r13;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r5 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)>($r5);

        $r6 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r6);

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r8 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $r10 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r10.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r3.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r10);

        $r11 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r12 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(2L);

        $r13 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r12);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r13);

        return;
    }

    public void immediateUpdateOnSameOutputAsDeferredUpdateDoesNotRegress()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r4, r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7, $r8, $r11, $r12, $r15;
        org.hamcrest.Matcher $r9, $r10, $r13, $r14, $r16, $r17;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("test-id");

        r4 = virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("test-id");

        r5 = virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getDeferredOutput(java.lang.String)>("test-id");

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r5.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r9 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        $r11 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r11.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r11);

        $r12 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r13 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r14 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r13);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r12, $r14);

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void onPeriodicEmit()>();

        $r15 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r16 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkMatchers: org.hamcrest.Matcher watermark(long)>(5L);

        $r17 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r16);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r15, $r17);

        return;
    }

    public void lowerImmediateUpdateOnSameOutputDoesNotEmitCombinedUpdate()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutput r4, r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7, $r8, $r9;
        org.hamcrest.Matcher $r10, $r11;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("1234-test");

        r4 = virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("1234-test");

        r5 = virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getDeferredOutput(java.lang.String)>("1234-test");

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(5L);

        interfaceinvoke r5.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r8);

        $r9 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher nullValue()>();

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        return;
    }

    public void testRemoveUnblocksWatermarks()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r4, $r6;
        org.apache.flink.api.common.eventtime.Watermark $r5, $r7, $r8;
        long $l2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("lower");

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("higher");

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("lower");

        $r5 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(156765L);

        interfaceinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r5);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: boolean unregisterOutput(java.lang.String)>("lower");

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("higher");

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(156775L);

        interfaceinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l2 = virtualinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(156775L, $l2);

        return;
    }

    public void testRemoveOfLowestDoesNotImmediatelyAdvanceWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r4, $r6;
        org.apache.flink.api.common.eventtime.Watermark $r5, $r7, $r8;
        long $l2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("lower");

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("higher");

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("lower");

        $r5 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(-4343L);

        interfaceinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r5);

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("higher");

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(-4333L);

        interfaceinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: boolean unregisterOutput(java.lang.String)>("lower");

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l2 = virtualinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-4343L, $l2);

        return;
    }

    public void testRemoveOfHighestDoesNotRetractWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r4, $r6;
        org.apache.flink.api.common.eventtime.Watermark $r5, $r7, $r8;
        long $l2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("higher");

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("higher");

        $r5 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r5.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(2L);

        interfaceinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r5);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: boolean unregisterOutput(java.lang.String)>("higher");

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("lower");

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>("lower");

        $r7 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(1L);

        interfaceinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r7);

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l2 = virtualinvoke $r8.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l2);

        return;
    }

    public void testRemoveRegisteredReturnValue()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        boolean z0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>("does-exist");

        z0 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: boolean unregisterOutput(java.lang.String)>("does-exist");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>(z0);

        return;
    }

    public void testRemoveNotRegisteredReturnValue()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput r1;
        boolean z0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()>();

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

        z0 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: boolean unregisterOutput(java.lang.String)>("does-not-exist");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>(z0);

        return;
    }

    private static org.apache.flink.api.common.eventtime.WatermarkOutput createImmediateOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        java.util.UUID $r2;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r3;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        $r2 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r1 = virtualinvoke $r2.<java.util.UUID: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)>(r1);

        return $r3;
    }

    private static org.apache.flink.api.common.eventtime.WatermarkOutput createDeferredOutput(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        java.util.UUID $r2;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r3;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        $r2 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r1 = virtualinvoke $r2.<java.util.UUID: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void registerNewOutput(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput getDeferredOutput(java.lang.String)>(r1);

        return $r3;
    }

    private static org.apache.flink.api.common.eventtime.TestingWatermarkOutput createTestingWatermarkOutput()
    {
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r0;

        $r0 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r0.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        return $r0;
    }
}
