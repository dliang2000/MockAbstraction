public class org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDirectlyCreateTypeInfo()
    {
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r2;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoParametrizedTypeExtractionTest$ParameterizedParentImpl;");

        $r2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation getParameterizedParentTypeInformation()>();

        $r3 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r1, $r3);

        return;
    }

    public void testMapReturnTypeInfo()
    {
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r4;
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest$ConcreteMapFunction $r3;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest;

        r1 = specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest: org.apache.flink.api.common.typeinfo.TypeInformation getParameterizedParentTypeInformation()>();

        $r3 = new org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest$ConcreteMapFunction;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest$ConcreteMapFunction: void <init>()>();

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r4);

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>(r1);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r5);

        return;
    }

    private org.apache.flink.api.common.typeinfo.TypeInformation getParameterizedParentTypeInformation()
    {
        org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest r0;
        java.util.HashMap $r3, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r6, $r9, $r11, $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoParametrizedTypeExtractionTest;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation INT>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("digits", $r4);

        $r6 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation STRING>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("letters", $r6);

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation DOUBLE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("precise", $r9);

        $r11 = staticinvoke <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation POJO(java.lang.Class,java.util.Map)>(class "Lorg/apache/flink/api/java/typeutils/PojoParametrizedTypeExtractionTest$Pojo;", $r3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pojoField", $r11);

        $r13 = staticinvoke <org.apache.flink.api.common.typeinfo.Types: org.apache.flink.api.common.typeinfo.TypeInformation POJO(java.lang.Class,java.util.Map)>(class "Lorg/apache/flink/api/java/typeutils/PojoParametrizedTypeExtractionTest$ParameterizedParentImpl;", $r8);

        return $r13;
    }
}
