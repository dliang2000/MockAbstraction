public class org.apache.flink.api.common.accumulators.AverageAccumulatorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGet()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;
        org.apache.flink.api.common.accumulators.AverageAccumulator $r2;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        $r2 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $d0, 0.0);

        return;
    }

    public void testAdd()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;
        org.apache.flink.api.common.accumulators.AverageAccumulator $r6;
        java.lang.Double $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        int $i0, $i9, $i10, $i11, i12;
        byte $b1, $b3, $b4, $b5;
        long $l2, $l6, $l7, $l8, l13;
        java.lang.Long $r15, r19;
        java.lang.Integer $r16, r17;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        $r6 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        i12 = 0;

     label01:
        if i12 >= 10 goto label02;

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>(i12);

        i12 = i12 + 1;

        goto label01;

     label02:
        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d0 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d0, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label03:
        $i0 = virtualinvoke r17.<java.lang.Integer: int intValue()>();

        if $i0 >= 10 goto label04;

        $i9 = virtualinvoke r17.<java.lang.Integer: int intValue()>();

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>($i9);

        $i10 = virtualinvoke r17.<java.lang.Integer: int intValue()>();

        $i11 = $i10 + 1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        r17 = $r16;

        goto label03;

     label04:
        $r8 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d1, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        l13 = 0L;

     label05:
        $b1 = l13 cmp 10L;

        if $b1 >= 0 goto label06;

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(long)>(l13);

        l13 = l13 + 1L;

        goto label05;

     label06:
        $r9 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d2 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d2, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

     label07:
        $l2 = virtualinvoke r19.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 10L;

        if $b3 >= 0 goto label08;

        $l6 = virtualinvoke r19.<java.lang.Long: long longValue()>();

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(long)>($l6);

        $l7 = virtualinvoke r19.<java.lang.Long: long longValue()>();

        $l8 = $l7 + 1L;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        r19 = $r15;

        goto label07;

     label08:
        $r10 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d3 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d3, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        d10 = 0.0;

     label09:
        $b4 = d10 cmpg 10.0;

        if $b4 >= 0 goto label10;

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(double)>(d10);

        d10 = d10 + 1.0;

        goto label09;

     label10:
        $r11 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d4 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d4, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

     label11:
        $d5 = virtualinvoke r21.<java.lang.Double: double doubleValue()>();

        $b5 = $d5 cmpg 10.0;

        if $b5 >= 0 goto label12;

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(java.lang.Double)>(r21);

        $d8 = virtualinvoke r21.<java.lang.Double: double doubleValue()>();

        $d9 = $d8 + 1.0;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        r21 = $r14;

        goto label11;

     label12:
        $r12 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d6 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d6, 0.0);

        virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: void resetLocal()>();

        $r13 = virtualinvoke $r6.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d7 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(0.0, $d7, 0.0);

        return;
    }

    public void testMergeSuccess()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;
        org.apache.flink.api.common.accumulators.AverageAccumulator $r2, $r3;
        java.lang.Double $r4;
        double $d0;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        $r2 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        i0 = 0;

     label1:
        if i0 >= 5 goto label2;

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>(i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r3 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r3.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        i1 = 5;

     label3:
        if i1 >= 10 goto label4;

        virtualinvoke $r3.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>(i1);

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void merge(org.apache.flink.api.common.accumulators.Accumulator)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(4.5, $d0, 0.0);

        return;
    }

    public void testMergeFailed()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;
        org.apache.flink.api.common.accumulators.AverageAccumulator $r2;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;
        java.lang.String $r7, $r9, $r11, $r12;
        java.lang.IllegalArgumentException $r10;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        $r2 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>(1);

     label1:
        virtualinvoke $r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: void merge(org.apache.flink.api.common.accumulators.Accumulator)>(null);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("The merged accumulator must be AverageAccumulator.");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrong exception; expected IllegalArgumentException but found ");

        $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label5:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void testClone()
    {
        org.apache.flink.api.common.accumulators.AverageAccumulatorTest r0;
        org.apache.flink.api.common.accumulators.AverageAccumulator r2, $r3;
        java.lang.Double $r4;
        double $d0;

        r0 := @this: org.apache.flink.api.common.accumulators.AverageAccumulatorTest;

        $r3 = new org.apache.flink.api.common.accumulators.AverageAccumulator;

        specialinvoke $r3.<org.apache.flink.api.common.accumulators.AverageAccumulator: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.accumulators.AverageAccumulator: void add(int)>(1);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.accumulators.AverageAccumulator: org.apache.flink.api.common.accumulators.AverageAccumulator clone()>();

        $r4 = virtualinvoke r2.<org.apache.flink.api.common.accumulators.AverageAccumulator: java.lang.Double getLocalValue()>();

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>(1.0, $d0, 0.0);

        return;
    }
}
