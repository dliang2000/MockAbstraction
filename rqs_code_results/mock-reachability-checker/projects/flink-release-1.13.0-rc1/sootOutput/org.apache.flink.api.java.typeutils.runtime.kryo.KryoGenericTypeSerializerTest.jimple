public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest extends org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest
{
    org.apache.flink.api.common.ExecutionConfig ec;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.AbstractGenericTypeSerializerTest: void <init>()>();

        $r1 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: org.apache.flink.api.common.ExecutionConfig ec> = $r1;

        return;
    }

    public void testJavaList()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.util.ArrayList $r2;
        java.util.Collection[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void fillCollection(java.util.Collection)>($r2);

        $r3 = newarray (java.util.Collection)[1];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void runTests(java.lang.Object[])>($r3);

        return;
    }

    public void testJavaSet()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.util.HashSet $r2;
        java.util.Collection[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void fillCollection(java.util.Collection)>($r2);

        $r3 = newarray (java.util.Collection)[1];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void runTests(java.lang.Object[])>($r3);

        return;
    }

    public void testJavaDequeue()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.util.LinkedList $r2;
        java.util.Collection[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void fillCollection(java.util.Collection)>($r2);

        $r3 = newarray (java.util.Collection)[1];

        $r3[0] = $r2;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void runTests(java.lang.Object[])>($r3);

        return;
    }

    private void fillCollection(java.util.Collection)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.util.Collection r1;
        java.lang.Integer $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        r1 := @parameter0: java.util.Collection;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(42);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1337);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r3);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(49);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.lang.Class r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r2;
        org.apache.flink.api.common.ExecutionConfig $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        r1 := @parameter0: java.lang.Class;

        $r2 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: org.apache.flink.api.common.ExecutionConfig ec>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(r1, $r3);

        return $r2;
    }

    public void testForwardEOFExceptionWhileSerializing()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        java.util.Random $r1;
        int $i0, $i1, i3;
        java.lang.String $r2, $r10, $r12, $r15;
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer $r3;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r4;
        org.apache.flink.api.common.ExecutionConfig $r5;
        char $c2;
        java.lang.Exception $r6, $r14;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.Class $r9;
        java.io.EOFException $r13;
        char[] r16;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

     label01:
        r16 = newarray (char)[40000];

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        i3 = 0;

     label02:
        $i0 = lengthof r16;

        if i3 >= $i0 goto label03;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(10000);

        $c2 = (char) $i1;

        r16[i3] = $c2;

        i3 = i3 + 1;

        goto label02;

     label03:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r16);

        $r3 = new org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void <init>(int,int)>(10000, 30000);

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r5);

     label04:
        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r2, $r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw a java.io.EOFException");

     label05:
        goto label08;

     label06:
        $r13 := @caughtexception;

        goto label08;

     label07:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws wrong exception: should throw a java.io.EOFException, has thrown a ");

        $r9 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label08:
        goto label10;

     label09:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        $r15 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r15);

     label10:
        return;

        catch java.io.EOFException from label04 to label05 with label06;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Exception from label01 to label08 with label09;
    }

    public void testForwardEOFExceptionWhileDeserializing()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        int i0, $i1, $i2, i6, i7;
        org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer $r3;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r4;
        org.apache.flink.api.common.ExecutionConfig $r5;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView $r6;
        byte[] $r7;
        java.lang.Object $r9;
        java.lang.Integer $r10, $r11;
        long $l3, $l4;
        java.lang.Exception $r12, $r15;
        java.lang.String $r13, $r19, $r21;
        java.io.EOFException $r14;
        java.lang.StringBuilder $r16, $r17, $r20;
        java.lang.Class $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

     label01:
        $r3 = new org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer;

        $i2 = 5 * 100;

        $i1 = 5 * 100;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: void <init>(int,int)>($i2, $i1);

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/Integer;", $r5);

        i6 = 0;

     label02:
        if i6 >= 100 goto label03;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r11, $r3);

        i6 = i6 + 1;

        goto label02;

     label03:
        $r6 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView;

        $r7 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.TestDataOutputSerializer: byte[] copyByteBuffer()>();

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView: void <init>(byte[])>($r7);

        i7 = 0;

     label04:
        if i7 >= 100 goto label05;

        $r9 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r6);

        $r10 = (java.lang.Integer) $r9;

        i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $l4 = (long) i7;

        $l3 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l4, $l3);

        i7 = i7 + 1;

        goto label04;

     label05:
        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw a java.io.EOFException");

     label06:
        goto label09;

     label07:
        $r14 := @caughtexception;

        goto label09;

     label08:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("throws wrong exception: should throw a java.io.EOFException, has thrown a ");

        $r18 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        $r13 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label11:
        return;

        catch java.io.EOFException from label05 to label06 with label07;
        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Exception from label01 to label09 with label10;
    }

    public void validateReferenceMappingEnabled()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest r0;
        com.esotericsoftware.kryo.Kryo r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r3;
        org.apache.flink.api.common.ExecutionConfig $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r4);

        r2 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $z0 = virtualinvoke r2.<com.esotericsoftware.kryo.Kryo: boolean getReferences()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
