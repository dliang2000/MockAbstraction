public class org.apache.flink.util.IOUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.IOUtilsTest r0;

        r0 := @this: org.apache.flink.util.IOUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testTryReadFullyFromLongerStream() throws java.io.IOException
    {
        org.apache.flink.util.IOUtilsTest r0;
        byte[] r2, $r5, $r7, $r8;
        int i0;
        java.io.ByteArrayInputStream $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.apache.flink.util.IOUtilsTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = "test-data";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        r2 = newarray (byte)[4];

        i0 = staticinvoke <org.apache.flink.util.IOUtils: int tryReadFully(java.io.InputStream,byte[])>($r3, r2);

        $r6 = "test";

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r7, $r8);

        return;
    }

    public void testTryReadFullyFromShorterStream() throws java.io.IOException
    {
        org.apache.flink.util.IOUtilsTest r0;
        byte[] r2, $r5, $r7, $r8;
        int i0;
        java.io.ByteArrayInputStream $r3;
        java.lang.String $r4, $r6;

        r0 := @this: org.apache.flink.util.IOUtilsTest;

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = "t";

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        r2 = newarray (byte)[4];

        i0 = staticinvoke <org.apache.flink.util.IOUtils: int tryReadFully(java.io.InputStream,byte[])>($r3, r2);

        $r6 = "t";

        $r7 = virtualinvoke $r6.<java.lang.String: byte[] getBytes()>();

        $r8 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r2, 0, i0);

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r7, $r8);

        return;
    }
}
