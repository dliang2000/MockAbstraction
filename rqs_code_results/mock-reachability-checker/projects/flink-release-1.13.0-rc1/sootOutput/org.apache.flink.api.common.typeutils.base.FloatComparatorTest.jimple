public class org.apache.flink.api.common.typeutils.base.FloatComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.FloatComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.FloatComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.FloatComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.FloatComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.FloatComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.FloatComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.FloatSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.FloatSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.FloatSerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Float[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.FloatComparatorTest r0;
        java.util.Random $r2;
        byte $b0, $b1, $b2;
        java.lang.Float[] $r3;
        float $f0, f1;
        java.lang.Float $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatComparatorTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412338L);

        f1 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        $b0 = f1 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        f1 = neg f1;

     label1:
        $b1 = f1 cmpl 3.4028235E38F;

        if $b1 != 0 goto label2;

        f1 = f1 - 3.0F;

     label2:
        $b2 = f1 cmpg 2.0F;

        if $b2 > 0 goto label3;

        f1 = f1 + 3.0F;

     label3:
        $r3 = newarray (java.lang.Float)[6];

        $f0 = neg f1;

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(-1.0F);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(2.0F);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r3[4] = $r8;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        $r3[5] = $r9;

        return $r3;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.FloatComparatorTest r0;
        java.lang.Float[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatComparatorTest: java.lang.Float[] getSortedTestData()>();

        return $r1;
    }
}
