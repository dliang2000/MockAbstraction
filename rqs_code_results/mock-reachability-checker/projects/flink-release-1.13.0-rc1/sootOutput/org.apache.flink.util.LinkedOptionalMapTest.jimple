public class org.apache.flink.util.LinkedOptionalMapTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void usageExample()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;
        java.util.Set $r3, $r6;
        java.lang.String[] $r4, $r7;
        org.hamcrest.Matcher $r5, $r8;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", class "Ljava/lang/String;", "a string class");

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("scala.Option", null, "a scala Option");

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.Boolean", class "Ljava/lang/Boolean;", null);

        $r3 = virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.Set keyNames()>();

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "java.lang.String";

        $r4[1] = "scala.Option";

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItems(java.lang.Object[])>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r5);

        $r6 = virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "scala.Option";

        $r7[1] = "java.lang.Boolean";

        $r8 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItems(java.lang.Object[])>($r7);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r8);

        return;
    }

    public void overridingKeyWithTheSameKeyName()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;
        java.util.Set $r3;
        org.hamcrest.Matcher $r4, $r5;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", null, "a string class");

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", class "Ljava/lang/String;", "a string class");

        $r3 = virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r5);

        return;
    }

    public void overridingKeysAndValuesWithTheSameKeyName()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;
        java.util.Set $r3;
        org.hamcrest.Matcher $r4, $r5;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", null, null);

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", class "Ljava/lang/String;", "a string class");

        $r3 = virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r5);

        return;
    }

    public void overridingAValueWithMissingKeyShouldBeConsideredAsAbsent()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;
        java.util.Set $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", null, null);

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("java.lang.String", null, "a string class");

        $r3 = virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher hasItem(java.lang.Object)>("java.lang.String");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r4);

        return;
    }

    public void mergingMapsWithPresentEntriesLeavesNoAbsentKeyNames()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r3, $r4;
        java.util.Set $r5;
        org.hamcrest.Matcher $r6, $r7;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", null, null);

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/String;", null);

        $r4 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/String;", "bbb");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Void;", "ccc");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("d", class "Ljava/lang/String;", "ddd");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void putAll(org.apache.flink.util.LinkedOptionalMap)>($r4);

        $r5 = virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        return;
    }

    public void mergingMapsPreserversTheOrderOfTheOriginalMap()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r3, $r4;
        java.util.Set $r5;
        java.lang.String[] $r6;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", null, null);

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/String;", null);

        $r4 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/String;", "bbb");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Void;", "ccc");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("d", class "Ljava/lang/String;", "ddd");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void putAll(org.apache.flink.util.LinkedOptionalMap)>($r4);

        $r5 = virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: java.util.Set keyNames()>();

        $r6 = newarray (java.lang.String)[4];

        $r6[0] = "b";

        $r6[1] = "c";

        $r6[2] = "a";

        $r6[3] = "d";

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        return;
    }

    public void mergingToEmpty()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r3, $r4;
        java.util.Set $r5;
        java.lang.String[] $r6;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        $r4 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/String;", "bbb");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Void;", "ccc");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("d", class "Ljava/lang/String;", "ddd");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void putAll(org.apache.flink.util.LinkedOptionalMap)>($r4);

        $r5 = virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: java.util.Set keyNames()>();

        $r6 = newarray (java.lang.String)[4];

        $r6[0] = "a";

        $r6[1] = "b";

        $r6[2] = "c";

        $r6[3] = "d";

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        return;
    }

    public void unwrapOptionalsWithMissingValueThrows()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", null);

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        return;
    }

    public void unwrapOptionalsWithMissingKeyThrows()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r2;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r2 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", null, "blabla");

        virtualinvoke $r2.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        return;
    }

    public void unwrapOptionalsPreservesOrder()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        java.util.LinkedHashMap r2;
        org.apache.flink.util.LinkedOptionalMap $r3;
        java.util.Set $r4;
        java.lang.Class[] $r5;
        org.hamcrest.Matcher $r6, $r9;
        java.util.Collection $r7;
        java.lang.String[] $r8;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/Boolean;", "bbb");

        r2 = virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        $r4 = virtualinvoke r2.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Ljava/lang/String;";

        $r5[1] = class "Ljava/lang/Boolean;";

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r6);

        $r7 = virtualinvoke r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "aaa";

        $r8[1] = "bbb";

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testPrefix()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/String;", "aaa");

        $r4 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void <init>(org.apache.flink.util.LinkedOptionalMap)>($r3);

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Boolean;", "bbb");

        $z0 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: boolean isLeftPrefixOfRight(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testNonPrefix()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r3 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/String;", "aaa");

        virtualinvoke $r3.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/String;", "aaa");

        $r4 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/Boolean;", "bbb");

        virtualinvoke $r4.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Boolean;", "bbb");

        $z0 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: boolean isLeftPrefixOfRight(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r3, $r4);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void demoMergeResult()
    {
        org.apache.flink.util.LinkedOptionalMapTest r0;
        org.apache.flink.util.LinkedOptionalMap$MergeResult r3;
        java.util.LinkedHashMap r4;
        org.apache.flink.util.LinkedOptionalMap $r5, $r6;
        boolean $z0, $z1;
        java.lang.Boolean $r7, $r8, $r10, $r11;
        org.hamcrest.Matcher $r9, $r12, $r14, $r15, $r18;
        java.util.Set $r13, $r16;
        java.lang.Class[] $r17;

        r0 := @this: org.apache.flink.util.LinkedOptionalMapTest;

        $r5 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r5.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", null, null);

        virtualinvoke $r5.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/String;", null);

        $r6 = new org.apache.flink.util.LinkedOptionalMap;

        specialinvoke $r6.<org.apache.flink.util.LinkedOptionalMap: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("b", class "Ljava/lang/String;", "bbb");

        virtualinvoke $r6.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("c", class "Ljava/lang/Void;", "ccc");

        virtualinvoke $r6.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("a", class "Ljava/lang/Boolean;", "aaa");

        virtualinvoke $r6.<org.apache.flink.util.LinkedOptionalMap: void put(java.lang.String,java.lang.Object,java.lang.Object)>("d", class "Ljava/lang/Long;", "ddd");

        r3 = staticinvoke <org.apache.flink.util.LinkedOptionalMap: org.apache.flink.util.LinkedOptionalMap$MergeResult mergeRightIntoLeft(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>($r5, $r6);

        $z0 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean hasMissingKeys()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        $z1 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: boolean isOrderedSubset()>();

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r12 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r10, $r12);

        $r13 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.Set missingKeys()>();

        $r14 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher empty()>();

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        r4 = virtualinvoke r3.<org.apache.flink.util.LinkedOptionalMap$MergeResult: java.util.LinkedHashMap getMerged()>();

        $r16 = virtualinvoke r4.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r17 = newarray (java.lang.Class)[4];

        $r17[0] = class "Ljava/lang/String;";

        $r17[1] = class "Ljava/lang/Void;";

        $r17[2] = class "Ljava/lang/Boolean;";

        $r17[3] = class "Ljava/lang/Long;";

        $r18 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r17);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r16, $r18);

        return;
    }
}
