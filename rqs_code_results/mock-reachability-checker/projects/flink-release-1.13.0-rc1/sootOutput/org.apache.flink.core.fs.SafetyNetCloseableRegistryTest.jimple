public class org.apache.flink.core.fs.SafetyNetCloseableRegistryTest extends org.apache.flink.core.fs.AbstractCloseableRegistryTest
{
    public final org.junit.rules.TemporaryFolder tmpFolder;

    public void <init>()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        specialinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: org.junit.rules.TemporaryFolder tmpFolder> = $r1;

        return;
    }

    protected void registerCloseable(java.io.Closeable) throws java.io.IOException
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        java.io.Closeable r1;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$1 $r3;
        org.apache.flink.util.AbstractCloseableRegistry $r4;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        r1 := @parameter0: java.io.Closeable;

        $r3 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$1;

        specialinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$1: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest,java.io.Closeable)>(r0, r1);

        $r4 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        virtualinvoke $r4.<org.apache.flink.util.AbstractCloseableRegistry: void registerCloseable(java.io.Closeable)>($r3);

        return;
    }

    protected org.apache.flink.util.AbstractCloseableRegistry createRegistry()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r1;
        java.util.function.Supplier $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        $r1 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        $r2 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$lambda_createRegistry_0__455: java.util.function.Supplier bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>(java.util.function.Supplier)>($r2);

        return $r1;
    }

    protected org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread createProducerThread(org.apache.flink.util.AbstractCloseableRegistry, java.util.concurrent.atomic.AtomicInteger, int)
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        org.apache.flink.util.AbstractCloseableRegistry r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        int i0;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$2 $r3;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        r1 := @parameter0: org.apache.flink.util.AbstractCloseableRegistry;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter2: int;

        $r3 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$2;

        specialinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$2: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest,org.apache.flink.util.AbstractCloseableRegistry,java.util.concurrent.atomic.AtomicInteger,int)>(r0, r1, r2, i0);

        return $r3;
    }

    public void tearDown()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        $z0 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testCorrectScopesForSafetyNet() throws java.lang.Exception
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3 $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        $r2 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3;

        specialinvoke $r2.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest)>(r0);

        virtualinvoke $r2.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r2.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        return;
    }

    public void testSafetyNetClose() throws java.lang.Exception
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r3;
        int $i0, $i2, i3;
        long $l1;
        org.apache.flink.util.AbstractCloseableRegistry $r2;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        virtualinvoke r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void setup(int)>(20);

        virtualinvoke r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void startThreads()>();

        virtualinvoke r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: void joinThreads()>();

        i3 = 0;

     label1:
        if i3 >= 5 goto label2;

        $r3 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter>;

        $i2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 <= 0 goto label2;

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r2 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        virtualinvoke $r2.<org.apache.flink.util.AbstractCloseableRegistry: void close()>();

        return;
    }

    public void testReaperThreadSpawnAndStop() throws java.lang.Exception
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r6, $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, $r12, $r13, r16, r18;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        $z0 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        specialinvoke $r6.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>()>();

        r16 = null;

     label01:
        $z1 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        specialinvoke $r7.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>()>();

        r18 = null;

     label02:
        $z2 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label03:
        if $r7 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r7.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

        goto label13;

     label05:
        $r10 := @caughtexception;

        r18 = $r10;

        throw $r10;

     label06:
        $r9 := @caughtexception;

     label07:
        if $r7 == null goto label12;

        if r18 == null goto label11;

     label08:
        virtualinvoke $r7.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label12;

     label11:
        virtualinvoke $r7.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

     label12:
        throw $r9;

     label13:
        $z3 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

     label14:
        if $r6 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r6.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

        goto label24;

     label16:
        $r11 := @caughtexception;

        r16 = $r11;

        throw $r11;

     label17:
        $r13 := @caughtexception;

     label18:
        if $r6 == null goto label23;

        if r16 == null goto label22;

     label19:
        virtualinvoke $r6.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

     label20:
        goto label23;

     label21:
        $r8 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label23;

     label22:
        virtualinvoke $r6.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

     label23:
        throw $r13;

     label24:
        $z4 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z4);

        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReaperThreadStartFailed() throws java.lang.Exception
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r0;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry $r1, $r3;
        java.util.function.Supplier $r2;
        boolean $z0, $z1;
        java.lang.OutOfMemoryError $r4;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

     label1:
        $r1 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        $r2 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$lambda_testReaperThreadStartFailed_1__456: java.util.function.Supplier bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>(java.util.function.Supplier)>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $z0 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r3 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        specialinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>()>();

        $z1 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        virtualinvoke $r3.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void close()>();

        return;

        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public static org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread lambda$testReaperThreadStartFailed$1()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$OutOfMemoryReaperThread $r0;

        $r0 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$OutOfMemoryReaperThread;

        specialinvoke $r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$OutOfMemoryReaperThread: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$1)>(null);

        return $r0;
    }

    public static org.apache.flink.core.fs.SafetyNetCloseableRegistry$CloseableReaperThread lambda$createRegistry$0()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$JoinOnInterruptReaperThread $r0;

        $r0 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$JoinOnInterruptReaperThread;

        specialinvoke $r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$JoinOnInterruptReaperThread: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$1)>(null);

        return $r0;
    }
}
