public class org.apache.flink.util.ExceptionUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testStringifyNullException()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>("(null)");

        $r1 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.String stringifyException(java.lang.Throwable)>(null);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("(null)", $r1);

        return;
    }

    public void testJvmFatalError()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.Error $r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.LinkageError $r2;
        java.lang.InternalError $r3;
        java.lang.UnknownError $r4;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r1 = new java.lang.Error;

        specialinvoke $r1.<java.lang.Error: void <init>()>();

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>($r1);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r2 = new java.lang.LinkageError;

        specialinvoke $r2.<java.lang.LinkageError: void <init>()>();

        $z1 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>($r2);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r3 = new java.lang.InternalError;

        specialinvoke $r3.<java.lang.InternalError: void <init>()>();

        $z2 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r4 = new java.lang.UnknownError;

        specialinvoke $r4.<java.lang.UnknownError: void <init>()>();

        $z3 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testRethrowFatalError()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.InternalError $r2, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

     label1:
        $r2 = new java.lang.InternalError;

        specialinvoke $r2.<java.lang.InternalError: void <init>()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrowIfFatalError(java.lang.Throwable)>($r2);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrowIfFatalError(java.lang.Throwable)>($r3);

        return;

        catch java.lang.InternalError from label1 to label2 with label3;
    }

    public void testFindThrowableByType()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.RuntimeException $r1;
        java.lang.IllegalStateException $r2;
        java.util.Optional $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        $r3 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.util.Optional findThrowable(java.lang.Throwable,java.lang.Class)>($r1, class "Ljava/lang/IllegalStateException;");

        $z0 = virtualinvoke $r3.<java.util.Optional: boolean isPresent()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testExceptionStripping()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.Throwable r2;
        org.apache.flink.util.FlinkException $r3;
        java.lang.RuntimeException $r4, $r5;
        org.hamcrest.Matcher $r6, $r7;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r3 = new org.apache.flink.util.FlinkException;

        specialinvoke $r3.<org.apache.flink.util.FlinkException: void <init>(java.lang.String)>("test exception");

        $r4 = new java.lang.RuntimeException;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        r2 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable stripException(java.lang.Throwable,java.lang.Class)>($r4, class "Ljava/lang/RuntimeException;");

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r3);

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r7);

        return;
    }

    public void testInvalidExceptionStripping()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.Throwable r2;
        org.apache.flink.util.FlinkException $r3, $r5;
        java.lang.RuntimeException $r4;
        org.hamcrest.Matcher $r6, $r7;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r3 = new org.apache.flink.util.FlinkException;

        $r4 = new java.lang.RuntimeException;

        $r5 = new org.apache.flink.util.FlinkException;

        specialinvoke $r5.<org.apache.flink.util.FlinkException: void <init>(java.lang.String)>("inner exception");

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        specialinvoke $r3.<org.apache.flink.util.FlinkException: void <init>(java.lang.Throwable)>($r4);

        r2 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable stripException(java.lang.Throwable,java.lang.Class)>($r3, class "Ljava/lang/RuntimeException;");

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r3);

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(org.hamcrest.Matcher)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r2, $r7);

        return;
    }

    public void testTryEnrichTaskExecutorErrorCanHandleNullValueWithoutCausingException()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void tryEnrichOutOfMemoryError(java.lang.Throwable,java.lang.String,java.lang.String,java.lang.String)>(null, "", "", "");

        return;
    }

    public void testUpdateDetailMessageOfBasicThrowable()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.OutOfMemoryError $r2;
        java.util.function.Function $r3;
        java.lang.String $r4;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r2 = new java.lang.OutOfMemoryError;

        specialinvoke $r2.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("old message");

        $r3 = staticinvoke <org.apache.flink.util.ExceptionUtilsTest$lambda_testUpdateDetailMessageOfBasicThrowable_0__179: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>($r2, $r3);

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("new message");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r5);

        return;
    }

    public void testUpdateDetailMessageOfRelevantThrowableAsCause()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.Throwable r2, $r11, $r13, $r16, $r20, $r24, $r25;
        java.lang.IllegalArgumentException $r4;
        java.lang.OutOfMemoryError $r5;
        java.lang.StackTraceElement[] $r6, $r17, $r18;
        java.lang.StackTraceElement $r7;
        java.lang.NullPointerException $r8;
        java.lang.IllegalStateException $r9;
        java.util.function.Function $r10;
        org.hamcrest.Matcher $r12, $r15, $r19, $r23, $r26;
        java.lang.String $r14;
        java.lang.Throwable[] $r21, $r22;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("another message deep down in the cause tree");

        $r5 = new java.lang.OutOfMemoryError;

        specialinvoke $r5.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("old message");

        r2 = virtualinvoke $r5.<java.lang.OutOfMemoryError: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        $r6 = newarray (java.lang.StackTraceElement)[1];

        $r7 = new java.lang.StackTraceElement;

        specialinvoke $r7.<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>("class", "method", "file", 1);

        $r6[0] = $r7;

        virtualinvoke r2.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r6);

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        virtualinvoke r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("another message", r2);

        $r10 = staticinvoke <org.apache.flink.util.ExceptionUtilsTest$lambda_testUpdateDetailMessageOfRelevantThrowableAsCause_1__180: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>($r9, $r10);

        $r11 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r11, $r12);

        $r13 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r14 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>();

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("new message");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r15);

        $r16 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r17 = virtualinvoke $r16.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r18 = virtualinvoke r2.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r19 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r18);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r17, $r19);

        $r20 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r21 = virtualinvoke $r20.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        $r22 = virtualinvoke r2.<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>();

        $r23 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r22);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r21, $r23);

        $r24 = virtualinvoke $r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r25 = virtualinvoke $r24.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r26 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r25, $r26);

        return;
    }

    public void testUpdateDetailMessageWithoutRelevantThrowable()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.IllegalStateException $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.function.Function $r4;
        java.lang.String $r5, $r8;
        org.hamcrest.Matcher $r6, $r9;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r2 = new java.lang.IllegalStateException;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cause message");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("root message", $r3);

        $r4 = staticinvoke <org.apache.flink.util.ExceptionUtilsTest$lambda_testUpdateDetailMessageWithoutRelevantThrowable_2__181: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>($r2, $r4);

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r6 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("root message");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        $r7 = virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r8 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("cause message");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r9);

        return;
    }

    public void testUpdateDetailMessageOfNullWithoutException()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.util.function.Function $r1;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r1 = staticinvoke <org.apache.flink.util.ExceptionUtilsTest$lambda_testUpdateDetailMessageOfNullWithoutException_3__182: java.util.function.Function bootstrap$()>();

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>(null, $r1);

        return;
    }

    public void testUpdateDetailMessageWithMissingPredicate()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        java.lang.Exception $r2;
        java.lang.String $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String)>("old message");

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>($r2, null);

        $r3 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>("old message");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r4);

        return;
    }

    public void testIsMetaspaceOutOfMemoryErrorCanHandleNullValue()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isMetaspaceOutOfMemoryError(java.lang.Throwable)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testIsDirectOutOfMemoryErrorCanHandleNullValue()
    {
        org.apache.flink.util.ExceptionUtilsTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.ExceptionUtilsTest;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isDirectOutOfMemoryError(java.lang.Throwable)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public static java.lang.String lambda$testUpdateDetailMessageOfNullWithoutException$3(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        return "new message";
    }

    public static java.lang.String lambda$testUpdateDetailMessageWithoutRelevantThrowable$2(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        return null;
    }

    public static java.lang.String lambda$testUpdateDetailMessageOfRelevantThrowableAsCause$1(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.Class $r1;
        boolean $z0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/OutOfMemoryError;");

        if $z0 == 0 goto label1;

        $r2 = "new message";

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static java.lang.String lambda$testUpdateDetailMessageOfBasicThrowable$0(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        return "new message";
    }
}
