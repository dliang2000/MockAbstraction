final class org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer extends java.lang.Object implements org.apache.flink.core.io.SimpleVersionedSerializer
{
    private static final int VERSION;

    private void <init>()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        return 1;
    }

    public byte[] serialize(java.lang.String)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        return $r3;
    }

    public java.lang.String deserialize(int, byte[])
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        int i0;
        byte[] r1;
        long $l1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r2 = new java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r3);

        return $r2;
    }

    public int hashCode()
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        return $z0;
    }

    public volatile java.lang.Object deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        int i0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer: java.lang.String deserialize(int,byte[])>(i0, r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        java.lang.Object r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer: byte[] serialize(java.lang.String)>($r2);

        return $r3;
    }

    void <init>(org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$1)
    {
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer r0;
        org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$1 r1;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer;

        r1 := @parameter0: org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$1;

        specialinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.core.io.SimpleVersionedSerializerTypeSerializerProxyTest$TestStringSerializer: int VERSION> = 1;

        return;
    }
}
