public abstract class org.apache.flink.api.common.typeutils.SerializerTestBase extends org.apache.flink.util.TestLogger
{
    private final org.apache.flink.testutils.DeeplyEqualsChecker checker;

    protected void <init>()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.testutils.DeeplyEqualsChecker $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new org.apache.flink.testutils.DeeplyEqualsChecker;

        specialinvoke $r1.<org.apache.flink.testutils.DeeplyEqualsChecker: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.testutils.DeeplyEqualsChecker checker> = $r1;

        return;
    }

    protected void <init>(org.apache.flink.testutils.DeeplyEqualsChecker)
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.testutils.DeeplyEqualsChecker r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 := @parameter0: org.apache.flink.testutils.DeeplyEqualsChecker;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.testutils.DeeplyEqualsChecker checker> = r1;

        return;
    }

    protected abstract org.apache.flink.api.common.typeutils.TypeSerializer createSerializer();

    protected abstract int getLength();

    protected abstract java.lang.Class getTypeClass();

    protected abstract java.lang.Object[] getTestData();

    protected boolean allowNullInstances(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("KryoSerializer");

        return $z0;
    }

    public void testInstantiate()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object r1;
        java.lang.Class r2, $r3, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r14, $r15, $r17;
        java.lang.String $r10, $r13, $r16, $r18;
        java.lang.Exception $r11;
        java.io.PrintStream $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer r19;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r19 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        if r1 != null goto label3;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: boolean allowNullInstances(org.apache.flink.api.common.typeutils.TypeSerializer)>(r19);

        if $z1 == 0 goto label3;

     label2:
        return;

     label3:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The created instance must not be null.", r1);

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The test is corrupt: type class is null.", r2);

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type of the instantiated object is wrong. Expected Type: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" present type ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r13 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r16 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public void testConfigSnapshotInstantiation()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class)>($r3);

        return;
    }

    public void testSnapshotConfigurationAndReconfigure() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r35, $r39, r41;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r2, r36;
        byte[] r3;
        java.io.ByteArrayOutputStream $r7;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r8;
        boolean $z0, $z1;
        java.lang.AssertionError $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        java.lang.Class $r14, $r15;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22, r25, r31;
        java.io.ByteArrayInputStream $r29;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r32;
        java.lang.Thread $r33;
        java.lang.ClassLoader $r34;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r40;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        r25 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r7);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, r2, r1);

        r3 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r22 := @caughtexception;

        r25 = $r22;

        throw $r22;

     label05:
        $r19 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r25 == null goto label10;

     label07:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r7.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r19;

     label12:
        $r29 = new java.io.ByteArrayInputStream;

        specialinvoke $r29.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        r31 = null;

     label13:
        $r32 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r32.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r29);

        $r33 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r34 = virtualinvoke $r33.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r35 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r36 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r32, $r34, $r35);

     label14:
        if $r29 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r20 := @caughtexception;

        r31 = $r20;

        throw $r20;

     label17:
        $r18 := @caughtexception;

     label18:
        if $r29 == null goto label23;

        if r31 == null goto label22;

     label19:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r21 := @caughtexception;

        virtualinvoke r31.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label23;

     label22:
        virtualinvoke $r29.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r18;

     label24:
        $r39 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r40 = interfaceinvoke r36.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r39);

        $z1 = virtualinvoke r40.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        if $z1 == 0 goto label25;

        r41 = interfaceinvoke r36.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        goto label27;

     label25:
        $z0 = virtualinvoke r40.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z0 == 0 goto label26;

        r41 = virtualinvoke r40.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        goto label27;

     label26:
        $r9 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to restore serializer with ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        throw $r9;

     label27:
        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke r41.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testGetLength()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        int i0, $i2;
        long $l1, $l3;
        java.lang.Exception $r1;
        java.io.PrintStream $r2;
        java.lang.String $r3, $r6, $r8;
        java.lang.StringBuilder $r4, $r5, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r9;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: int getLength()>();

        if i0 != 0 goto label1;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Broken serializer test base - zero length cannot be the expected length");

     label1:
        r9 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $l1 = (long) i0;

        $i2 = virtualinvoke r9.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = virtualinvoke $r1.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.Exception: void printStackTrace()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r6 = virtualinvoke $r1.<java.lang.Exception: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testCopy()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3, r4;
        java.lang.Exception $r5;
        java.io.PrintStream $r6;
        java.lang.String $r7, $r10, $r12;
        java.lang.StringBuilder $r8, $r9, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        r4 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r3);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r4);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Copied element is not equal to the original element.", r3, r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r10 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testCopyIntoNewElements()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3, r4, $r5;
        java.lang.Exception $r6;
        java.io.PrintStream $r7;
        java.lang.String $r8, $r11, $r13;
        java.lang.StringBuilder $r9, $r10, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer r14;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r14 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r5 = virtualinvoke r14.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r4 = virtualinvoke r14.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r3, $r5);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r4);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Copied element is not equal to the original element.", r3, r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r11 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testCopyIntoReusedElements()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3, r4, r14;
        java.lang.Exception $r5;
        java.io.PrintStream $r6;
        java.lang.String $r7, $r10, $r12;
        java.lang.StringBuilder $r8, $r9, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        r14 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        r4 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r3, r14);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r4);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Copied element is not equal to the original element.", r3, r4);

        r14 = r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r10 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public void testSerializeIndividually()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, $i1, $i2, i3;
        java.lang.Object r3, r6, $r9;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r5;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r7;
        java.lang.Exception $r11;
        java.io.PrintStream $r12;
        java.lang.String $r13, $r16, $r18;
        java.lang.StringBuilder $r14, $r15, $r17;
        org.apache.flink.api.common.typeutils.TypeSerializer r19;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r19 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label7;

        r3 = r1[i3];

        $r7 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, $r7);

        r5 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        $i1 = virtualinvoke r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i1 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("No data available during deserialization.", $z0);

        $r9 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r6 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r9, r5);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r6);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", r3, r6);

        $i2 = virtualinvoke r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i2 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Trailing data available after deserialization.", $z1);

        i3 = i3 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        $r13 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r16 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testSerializeIndividuallyReusingValues()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, $i1, $i2, i3;
        java.lang.Object r3, r6, r19;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r5;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r7;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.String $r12, $r15, $r17;
        java.lang.StringBuilder $r13, $r14, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer r18;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r18 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        r19 = virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label7;

        r3 = r1[i3];

        $r7 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, $r7);

        r5 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        $i1 = virtualinvoke r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i1 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("No data available during deserialization.", $z0);

        r6 = virtualinvoke r18.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r19, r5);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r6);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", r3, r6);

        $i2 = virtualinvoke r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i2 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Trailing data available after deserialization.", $z1);

        r19 = r6;

        i3 = i3 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testSerializeAsSequenceNoReuse()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        java.lang.Object r3, $r5, r17;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r4;
        int $i0, $i1, i4, i5, i6;
        long $l2, $l3;
        java.lang.Exception $r6;
        java.io.PrintStream $r7;
        java.lang.String $r8, $r11, $r13;
        java.lang.StringBuilder $r9, $r10, $r12;
        org.apache.flink.api.common.typeutils.TypeSerializer r14;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r16;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r14 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        $r4 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        i4 = lengthof r1;

        i5 = 0;

     label2:
        if i5 >= i4 goto label3;

        r3 = r1[i5];

        virtualinvoke r14.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, $r4);

        i5 = i5 + 1;

        goto label2;

     label3:
        r16 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        i6 = 0;

     label4:
        $i0 = virtualinvoke r16.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i0 <= 0 goto label5;

        r17 = virtualinvoke r14.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r16);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r17);

        $r5 = r1[i6];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", $r5, r17);

        i6 = i6 + 1;

        goto label4;

     label5:
        $i1 = lengthof r1;

        $l3 = (long) $i1;

        $l2 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of elements deserialized.", $l3, $l2);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = <java.lang.System: java.io.PrintStream err>;

        $r8 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.Exception: void printStackTrace()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r11 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testSerializeAsSequenceReusingValues()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r3;
        int $i0, $i1, i4, i5, i6;
        long $l2, $l3;
        java.lang.Object $r4, r15, r17, r18;
        java.lang.Exception $r5;
        java.io.PrintStream $r6;
        java.lang.String $r7, $r10, $r12;
        java.lang.StringBuilder $r8, $r9, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer r13;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r16;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        $r3 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        i4 = lengthof r1;

        i5 = 0;

     label2:
        if i5 >= i4 goto label3;

        r15 = r1[i5];

        virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r15, $r3);

        i5 = i5 + 1;

        goto label2;

     label3:
        r16 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        r17 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        i6 = 0;

     label4:
        $i0 = virtualinvoke r16.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i0 <= 0 goto label5;

        r18 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r17, r16);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r18);

        $r4 = r1[i6];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", $r4, r18);

        r17 = r18;

        i6 = i6 + 1;

        goto label4;

     label5:
        $i1 = lengthof r1;

        $l3 = (long) $i1;

        $l2 = (long) i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of elements deserialized.", $l3, $l2);

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r10 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testSerializedCopyIndividually()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        int i0, $i1, $i2, i3;
        java.lang.Object r3, r8, $r12;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r5, r7;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r9, $r10;
        java.lang.Exception $r14;
        java.io.PrintStream $r15;
        java.lang.String $r16, $r19, $r21;
        java.lang.StringBuilder $r17, $r18, $r20;
        org.apache.flink.api.common.typeutils.TypeSerializer r22;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r22 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label7;

        r3 = r1[i3];

        $r9 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        virtualinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, $r9);

        r5 = virtualinvoke $r9.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        $r10 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        virtualinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r5, $r10);

        r7 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        $i1 = virtualinvoke r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i1 <= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("No data available copying.", $z0);

        $r12 = virtualinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r8 = virtualinvoke r22.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r12, r7);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r8);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", r3, r8);

        $i2 = virtualinvoke r7.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i2 != 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Trailing data available after deserialization.", $z1);

        i3 = i3 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r14 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r19 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testSerializedCopyAsSequence()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        java.lang.Object r3, $r6, $r7, r18;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView $r4, $r5;
        int $i0, $i1, $i2, i5, i6, i7, i8;
        long $l3, $l4;
        java.lang.Exception $r8;
        java.io.PrintStream $r9;
        java.lang.String $r10, $r13, $r15;
        java.lang.StringBuilder $r11, $r12, $r14;
        org.apache.flink.api.common.typeutils.TypeSerializer r16;
        org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView r19, r21;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label01:
        r16 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        $r4 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        i5 = lengthof r1;

        i6 = 0;

     label02:
        if i6 >= i5 goto label03;

        r18 = r1[i6];

        virtualinvoke r16.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r18, $r4);

        i6 = i6 + 1;

        goto label02;

     label03:
        r19 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        $r5 = new org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: void <init>()>();

        i7 = 0;

     label04:
        $i0 = lengthof r1;

        if i7 >= $i0 goto label05;

        virtualinvoke r16.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r19, $r5);

        i7 = i7 + 1;

        goto label04;

     label05:
        r21 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestOutputView: org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView getInputView()>();

        i8 = 0;

     label06:
        $i1 = virtualinvoke r21.<org.apache.flink.api.common.typeutils.SerializerTestBase$TestInputView: int available()>();

        if $i1 <= 0 goto label07;

        $r6 = virtualinvoke r16.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        r3 = virtualinvoke r16.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r6, r21);

        staticinvoke <org.apache.flink.api.common.typeutils.SerializerTestBase: void checkToString(java.lang.Object)>(r3);

        $r7 = r1[i8];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void deepEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Deserialized value if wrong.", $r7, r3);

        i8 = i8 + 1;

        goto label06;

     label07:
        $i2 = lengthof r1;

        $l4 = (long) $i2;

        $l3 = (long) i8;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of elements copied.", $l4, $l3);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r10 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r13 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r15);

     label10:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }

    public void testSerializabilityAndEquals()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r17;
        java.io.Serializable $r3;
        org.apache.commons.lang3.SerializationException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r12, $r13, $r15;
        java.lang.String $r8, $r11, $r14, $r16;
        java.lang.Exception $r9;
        java.io.PrintStream $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

     label1:
        r17 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

     label2:
        $r3 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.io.Serializable clone(java.io.Serializable)>(r17);

        r1 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The serializer is not serializable: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label5:
        return;

     label6:
        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("The copy of the serializer is not equal to the original one.", r17, r1);

     label7:
        goto label9;

     label8:
        $r9 := @caughtexception;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r11 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r14 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r16);

     label9:
        return;

        catch org.apache.commons.lang3.SerializationException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label8;
        catch java.lang.Exception from label6 to label7 with label8;
    }

    public void testNullability()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Throwable $r3;
        java.io.PrintStream $r4;
        java.lang.String $r5, $r8, $r10;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

     label1:
        staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean checkIfNullSupported(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected failure of null value handling: ");

        $r8 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void testDuplicate() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r7, $r10;
        java.lang.Object[] r4;
        java.util.concurrent.CyclicBarrier $r5;
        java.util.ArrayList $r6;
        boolean $z0;
        java.lang.Object $r8;
        org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner $r9, r14;
        org.apache.flink.testutils.DeeplyEqualsChecker $r11;
        int i1;
        java.util.Iterator r13;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $r5 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r5.<java.util.concurrent.CyclicBarrier: void <init>(int)>(10);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(10);

        $r7 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r7);

        r4 = specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getData()>();

        i1 = 0;

     label1:
        if i1 >= 10 goto label2;

        $r9 = new org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner;

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r11 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.testutils.DeeplyEqualsChecker checker>;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: void <init>(java.util.concurrent.CyclicBarrier,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object[],long,org.apache.flink.testutils.DeeplyEqualsChecker)>($r5, $r10, r4, 120L, $r11);

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: void start()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r9);

        i1 = i1 + 1;

        goto label1;

     label2:
        r13 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner) $r8;

        virtualinvoke r14.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: void join()>();

        virtualinvoke r14.<org.apache.flink.api.common.typeutils.SerializerTestBase$SerializerRunner: void checkResult()>();

        goto label3;

     label4:
        return;
    }

    private void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        org.apache.flink.testutils.CustomEqualityMatcher $r4, $r6;
        org.apache.flink.testutils.DeeplyEqualsChecker $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r4 = staticinvoke <org.apache.flink.testutils.CustomEqualityMatcher: org.apache.flink.testutils.CustomEqualityMatcher deeplyEquals(java.lang.Object)>(r2);

        $r5 = r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.testutils.DeeplyEqualsChecker checker>;

        $r6 = virtualinvoke $r4.<org.apache.flink.testutils.CustomEqualityMatcher: org.apache.flink.testutils.CustomEqualityMatcher withChecker(org.apache.flink.testutils.DeeplyEqualsChecker)>($r5);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>(r1, r3, $r6);

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()>();

        if r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as serializer.");

        throw $r2;

     label1:
        return r1;
    }

    private java.lang.Object[] getData()
    {
        org.apache.flink.api.common.typeutils.SerializerTestBase r0;
        java.lang.Object[] r1;
        java.lang.RuntimeException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SerializerTestBase;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: java.lang.Object[] getTestData()>();

        if r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Test case corrupt. Returns null as test data.");

        throw $r2;

     label1:
        return r1;
    }

    private static void checkToString(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label1:
        return;
    }
}
