public class org.apache.flink.api.java.typeutils.PojoTypeExtractionTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDuplicateFieldException()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$HasDuplicateField;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testPojoWithGenericFields()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$PojoWithGenericFields;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testIncorrectPojos()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$IncorrectPojo;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$WrongCtorPojo;");

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testCorrectPojos()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$BeanStylePojo;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$TypedPojoGetterSetterCheck;");

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testPojoWC()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$WC $r4;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$ComplexNestedClass $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$WC;");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>(r1);

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$WC;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$WC: void <init>()>();

        $r5 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$ComplexNestedClass;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$ComplexNestedClass: void <init>()>();

        $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$WC: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$ComplexNestedClass complex> = $r5;

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r4);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>(r3);

        return;
    }

    private void checkWCPojoAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r20, $r22, $r23, $r26, $r27, $r29, $r30, $r32, $r34, $r36, $r38, $r40, $r41, $r44, $r45, $r48, $r49, $r52, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r76, $r78, $r80, r97, r99;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2, r98;
        org.apache.flink.api.java.typeutils.PojoField r6;
        java.lang.String r7, $r18, $r82, $r85, $r88;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, z22, z23, z24, z25, z26, z27, z28;
        int $i0, $i2, $i3, $i6, $i7, $i9, $i11, $i13, $i15, $i17, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i31, i33, i34, i35, i36;
        long $l1, $l4, $l5, $l8, $l10, $l12, $l14, $l16, $l18, $l21, $l28, $l30, $l32;
        java.util.ArrayList $r9;
        java.lang.String[] $r10;
        int[] $r11;
        java.lang.Class $r12, $r24, $r28, $r31, $r42, $r46, $r50, $r53, $r56, $r58, $r60, $r62, $r64, $r66, $r68, $r70, $r72, $r74, $r77, $r79, $r81;
        java.lang.reflect.Field $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r83, $r84, $r86, $r87;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r19, $r25;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r21;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r33, $r35, $r37, $r39, $r43, $r47;
        java.lang.Object $r51, $r54, $r75, $r89;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r90, r92, r94, r96;
        java.util.Iterator r91, r93, r95;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isBasicType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isTupleType()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $z2 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = newarray (java.lang.String)[10];

        $r10[0] = "count";

        $r10[1] = "complex.date";

        $r10[2] = "complex.collection";

        $r10[3] = "complex.nothing";

        $r10[4] = "complex.someFloat";

        $r10[5] = "complex.someNumberWith\u00dcnic\u00f6deN\u00e4me";

        $r10[6] = "complex.valueType";

        $r10[7] = "complex.word.f0";

        $r10[8] = "complex.word.f1";

        $r10[9] = "complex.word.f2";

        $r11 = newarray (int)[10];

        $r11[0] = 9;

        $r11[1] = 1;

        $r11[2] = 0;

        $r11[3] = 2;

        $r11[4] = 3;

        $r11[5] = 4;

        $r11[6] = 5;

        $r11[7] = 6;

        $r11[8] = 7;

        $r11[9] = 8;

        $i2 = lengthof $r10;

        $l5 = (long) $i2;

        $i3 = lengthof $r11;

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l4);

        i33 = 0;

     label01:
        $i6 = lengthof $r10;

        if i33 >= $i6 goto label02;

        $r82 = $r10[i33];

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>($r82, 0, $r9);

        $i27 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l28 = (long) $i27;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Too many keys returned", 1L, $l28);

        $r83 = new java.lang.StringBuilder;

        specialinvoke $r83.<java.lang.StringBuilder: void <init>()>();

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position of field ");

        $r85 = $r10[i33];

        $r86 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" wrong");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.String toString()>();

        $i29 = $r11[i33];

        $l30 = (long) $i29;

        $r89 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r90 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r89;

        $i31 = virtualinvoke $r90.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $l32 = (long) $i31;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r88, $l30, $l32);

        interfaceinvoke $r9.<java.util.List: void clear()>();

        i33 = i33 + 1;

        goto label01;

     label02:
        virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("complex.word.*", 0, $r9);

        $i7 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l8);

        r91 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r91.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r75 = interfaceinvoke r91.<java.util.Iterator: java.lang.Object next()>();

        r92 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r75;

        i34 = virtualinvoke r92.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if i34 > 8 goto label04;

        $z16 = 1;

        goto label05;

     label04:
        $z16 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        if 6 > i34 goto label06;

        $z17 = 1;

        goto label07;

     label06:
        $z17 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        if i34 != 6 goto label08;

        $r80 = virtualinvoke r92.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r81 = virtualinvoke $r80.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r81);

     label08:
        if i34 != 7 goto label09;

        $r78 = virtualinvoke r92.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r79 = virtualinvoke $r78.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r79);

     label09:
        if i34 != 8 goto label10;

        $r76 = virtualinvoke r92.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r77 = virtualinvoke $r76.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $r77);

     label10:
        goto label03;

     label11:
        interfaceinvoke $r9.<java.util.List: void clear()>();

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("complex.word._", 0, $r9);

        $i9 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l10);

        interfaceinvoke $r9.<java.util.List: void clear()>();

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("complex.*", 0, $r9);

        $i11 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l12 = (long) $i11;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l12);

        r93 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z4 = interfaceinvoke r93.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label27;

        $r54 = interfaceinvoke r93.<java.util.Iterator: java.lang.Object next()>();

        r94 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r54;

        i35 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        $i25 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if $i25 > 8 goto label13;

        $z18 = 1;

        goto label14;

     label13:
        $z18 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        $i26 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if 0 > $i26 goto label15;

        $z19 = 1;

        goto label16;

     label15:
        $z19 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        if i35 != 0 goto label17;

        $r73 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r74 = virtualinvoke $r73.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/util/List;", $r74);

     label17:
        if i35 != 1 goto label18;

        $r71 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r72 = virtualinvoke $r71.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/util/Date;", $r72);

     label18:
        if i35 != 2 goto label19;

        $r69 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r70 = virtualinvoke $r69.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $r70);

     label19:
        if i35 != 3 goto label20;

        $r67 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r68 = virtualinvoke $r67.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r68);

     label20:
        if i35 != 4 goto label21;

        $r65 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r66 = virtualinvoke $r65.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r66);

     label21:
        if i35 != 5 goto label22;

        $r63 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r64 = virtualinvoke $r63.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$MyValue;", $r64);

     label22:
        if i35 != 6 goto label23;

        $r61 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r62 = virtualinvoke $r61.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r62);

     label23:
        if i35 != 7 goto label24;

        $r59 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r60 = virtualinvoke $r59.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r60);

     label24:
        if i35 != 8 goto label25;

        $r57 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r58 = virtualinvoke $r57.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", $r58);

     label25:
        if i35 != 9 goto label26;

        $r55 = virtualinvoke r94.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r56 = virtualinvoke $r55.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r56);

     label26:
        goto label12;

     label27:
        interfaceinvoke $r9.<java.util.List: void clear()>();

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void getFlatFields(java.lang.String,int,java.util.List)>("*", 0, $r9);

        $i13 = interfaceinvoke $r9.<java.util.List: int size()>();

        $l14 = (long) $i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l14);

        r95 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label28:
        $z5 = interfaceinvoke r95.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label34;

        $r51 = interfaceinvoke r95.<java.util.Iterator: java.lang.Object next()>();

        r96 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r51;

        $i22 = virtualinvoke r96.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if $i22 > 9 goto label29;

        $z20 = 1;

        goto label30;

     label29:
        $z20 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z20);

        $i23 = virtualinvoke r96.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if 0 > $i23 goto label31;

        $z21 = 1;

        goto label32;

     label31:
        $z21 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        $i24 = virtualinvoke r96.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        if $i24 != 9 goto label33;

        $r52 = virtualinvoke r96.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        $r53 = virtualinvoke $r52.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r53);

     label33:
        goto label28;

     label34:
        interfaceinvoke $r9.<java.util.List: void clear()>();

        r97 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z6 = r97 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $i15 = virtualinvoke r97.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l16 = (long) $i15;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l16);

        $i17 = virtualinvoke r97.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $l18 = (long) $i17;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(9L, $l18);

        r98 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r97;

        z22 = 0;

        z23 = 0;

        z24 = 0;

        z25 = 0;

        z26 = 0;

        z27 = 0;

        z28 = 0;

        i36 = 0;

     label35:
        $i19 = virtualinvoke r98.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i36 >= $i19 goto label51;

        r6 = virtualinvoke r98.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i36);

        $r13 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r7 = virtualinvoke $r13.<java.lang.reflect.Field: java.lang.String getName()>();

        $z8 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("date");

        if $z8 == 0 goto label37;

        if z22 == 0 goto label36;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label36:
        z22 = 1;

        $r47 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DATE_TYPE_INFO>;

        $r48 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r47, $r48);

        $r49 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r50 = virtualinvoke $r49.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/util/Date;", $r50);

        goto label50;

     label37:
        $z9 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("someNumberWith\u00dcnic\u00f6deN\u00e4me");

        if $z9 == 0 goto label39;

        if z23 == 0 goto label38;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label38:
        z23 = 1;

        $r43 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r44 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r43, $r44);

        $r45 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r46 = virtualinvoke $r45.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r46);

        goto label50;

     label39:
        $z10 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("someFloat");

        if $z10 == 0 goto label41;

        if z24 == 0 goto label40;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label40:
        z24 = 1;

        $r39 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo FLOAT_TYPE_INFO>;

        $r40 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r39, $r40);

        $r41 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r42 = virtualinvoke $r41.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r42);

        goto label50;

     label41:
        $z11 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("word");

        if $z11 == 0 goto label43;

        if z25 == 0 goto label42;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label42:
        z25 = 1;

        $r29 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z15 = $r29 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $r30 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r31 = virtualinvoke $r30.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r31);

        $r32 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        r8 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r32;

        $r33 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r34 = virtualinvoke r8.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r33, $r34);

        $r35 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r36 = virtualinvoke r8.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r35, $r36);

        $r37 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r38 = virtualinvoke r8.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r37, $r38);

        goto label50;

     label43:
        $z12 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("nothing");

        if $z12 == 0 goto label45;

        if z26 == 0 goto label44;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label44:
        z26 = 1;

        $r25 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r25.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        $r26 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r27 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r28 = virtualinvoke $r27.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Object;", $r28);

        goto label50;

     label45:
        $z13 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("valueType");

        if $z13 == 0 goto label47;

        if z27 == 0 goto label46;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label46:
        z27 = 1;

        $r21 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$MyValue;");

        $r22 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r24 = virtualinvoke $r23.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$MyValue;", $r24);

        goto label50;

     label47:
        $z14 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("collection");

        if $z14 == 0 goto label49;

        if z28 == 0 goto label48;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label48:
        z28 = 1;

        $r19 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/util/List;");

        $r20 = virtualinvoke r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r20);

        goto label50;

     label49:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not expected");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label50:
        i36 = i36 + 1;

        goto label35;

     label51:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z22);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z23);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z24);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z25);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z26);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z27);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z28);

        r99 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z7 = r99 instanceof org.apache.flink.api.common.typeinfo.BasicTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $r12 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$WC;");

        $i20 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l21, 2L);

        return;
    }

    public void testPojoAllPublic()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$AllPublic $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$AllPublic;");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>(r1);

        $r3 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$AllPublic;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$AllPublic: void <init>()>();

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r3);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)>(r2);

        return;
    }

    private void checkAllPublicAsserts(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r14, $r15, $r17, $r18, $r20, $r21;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.lang.String r4, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        int $i0, $i2, $i4, i5;
        long $l1, $l3;
        java.lang.reflect.Field $r5;
        java.lang.String[] $r6;
        java.util.List $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo $r13;
        java.lang.Class $r16, $r19, $r22;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getArity()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $i2 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12L, $l3);

        z7 = 0;

        z8 = 0;

        z9 = 0;

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        i5 = 0;

     label01:
        $i4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i5 >= $i4 goto label10;

        r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i5);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r4 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("somethingFancy");

        if $z1 == 0 goto label03;

        if z7 == 0 goto label02;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label02:
        z7 = 1;

        $r20 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z6 = $r20 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $r21 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Ljava/util/ArrayList;", $r22);

        goto label09;

     label03:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("fancyIds");

        if $z2 == 0 goto label05;

        if z8 == 0 goto label04;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label04:
        z8 = 1;

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z5 = $r17 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $r18 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$FancyCollectionSubtype;", $r19);

        goto label09;

     label05:
        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("fancyArray");

        if $z3 == 0 goto label07;

        if z9 == 0 goto label06;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("already seen");

     label06:
        z9 = 1;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo: org.apache.flink.api.common.typeinfo.BasicArrayTypeInfo STRING_ARRAY_TYPE_INFO>;

        $r14 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r14);

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.typeinfo.TypeInformation: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "[Ljava/lang/String;", $r16);

        goto label09;

     label07:
        $r6 = newarray (java.lang.String)[7];

        $r6[0] = "date";

        $r6[1] = "someNumberWith\u00dcnic\u00f6deN\u00e4me";

        $r6[2] = "someFloat";

        $r6[3] = "word";

        $r6[4] = "nothing";

        $r6[5] = "valueType";

        $r6[6] = "collection";

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $z4 = interfaceinvoke $r7.<java.util.List: boolean contains(java.lang.Object)>(r4);

        if $z4 == 0 goto label08;

        goto label09;

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not expected");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label09:
        i5 = i5 + 1;

        goto label01;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z7);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z8);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Field was not present", z9);

        return;
    }

    public void testPojoExtendingTuple()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple $r4;
        java.lang.Long $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$FromTuple;");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>(r1);

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple: void <init>()>();

        $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple: java.lang.Object f0> = "";

        $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple: java.lang.Object f1> = "";

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$FromTuple: java.lang.Object f2> = $r5;

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForObject(java.lang.Object)>($r4);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest: void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)>(r3);

        return;
    }

    private void checkFromTuplePojo(org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r7, $r9, $r11;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.lang.String r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i2, i3;
        long $l1;
        java.lang.reflect.Field $r5;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r8, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int getTotalFields()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(4L, $l1);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        i3 = 0;

     label1:
        $i2 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i3 >= $i2 goto label7;

        r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i3);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r4 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("special");

        if $z1 == 0 goto label2;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label6;

     label2:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("f0");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("f1");

        if $z3 == 0 goto label4;

     label3:
        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label6;

     label4:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("f2");

        if $z4 == 0 goto label5;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r9 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label6;

     label5:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("unexpected field");

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;
    }

    public void testPojoWithGenerics()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r11, $r13, $r15, $r17;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.lang.String r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, i1;
        java.lang.reflect.Field $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r12, $r14, $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$ParentSettingGenerics;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i1 >= $i0 goto label7;

        r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r4 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field1");

        if $z1 == 0 goto label2;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        goto label6;

     label2:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field2");

        if $z2 == 0 goto label3;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label6;

     label3:
        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field3");

        if $z3 == 0 goto label4;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label6;

     label4:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("key");

        if $z4 == 0 goto label5;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label6;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected field ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;
    }

    public void testPojoWithGenericsSomeFieldsGeneric()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r11, $r13, $r15;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.lang.String r4, $r9;
        boolean $z0, $z1, $z2, $z3;
        int $i0, i1;
        java.lang.reflect.Field $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r12, $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$PojoWithGenerics;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i1 >= $i0 goto label6;

        r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r4 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field1");

        if $z1 == 0 goto label2;

        $r14 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        $r15 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label5;

     label2:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field2");

        if $z2 == 0 goto label3;

        $r12 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label5;

     label3:
        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("key");

        if $z3 == 0 goto label4;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected field ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    public void testPojoWithComplexHierarchy()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r11, $r12, $r13, $r15, $r17;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        org.apache.flink.api.java.typeutils.PojoField r3;
        java.lang.String r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, i1;
        java.lang.reflect.Field $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r10, $r16;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r14;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$ComplexHierarchyTop;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i1 >= $i0 goto label6;

        r3 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r5 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r4 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field1");

        if $z1 == 0 goto label2;

        $r17 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z6 = $r17 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        goto label5;

     label2:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("field2");

        if $z2 == 0 goto label3;

        $r12 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z4 = $r12 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r13 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r14 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r13;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $z5 = virtualinvoke $r15.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        goto label5;

     label3:
        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("key");

        if $z3 == 0 goto label4;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r11 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected field ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    public void testGenericPojoTypeInference1()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r8, $r15, $r17, $r19;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r3;
        org.apache.flink.api.java.typeutils.PojoField r4;
        java.lang.String r5, $r13;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper $r6;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$1 $r7;
        boolean $z0, $z1, $z2, $z3;
        int $i0, i1;
        java.lang.reflect.Field $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r14, $r16, $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r6 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper: void <init>()>();

        $r7 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$1;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$1: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r8 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r7);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r8);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r2;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i1 >= $i0 goto label6;

        r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r9 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r5 = virtualinvoke $r9.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("field1");

        if $z1 == 0 goto label2;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r19 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        goto label5;

     label2:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("field2");

        if $z2 == 0 goto label3;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r17 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        goto label5;

     label3:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("key");

        if $z3 == 0 goto label4;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r15 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label5;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected field ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    public void testGenericPojoTypeInference2()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r8, $r15, $r17, $r19, $r21;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r3;
        org.apache.flink.api.java.typeutils.PojoField r4;
        java.lang.String r5, $r13;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper2 $r6;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$2 $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, i1;
        java.lang.reflect.Field $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r14, $r16, $r18, $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r6 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper2;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper2: void <init>()>();

        $r7 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$2;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$2: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r8 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r7);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r8);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r2;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: int getArity()>();

        if i1 >= $i0 goto label7;

        r4 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(i1);

        $r9 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: java.lang.reflect.Field getField()>();

        r5 = virtualinvoke $r9.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("extraField");

        if $z1 == 0 goto label2;

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        $r21 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r20, $r21);

        goto label6;

     label2:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("f0");

        if $z2 == 0 goto label3;

        $r18 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r19 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r18, $r19);

        goto label6;

     label3:
        $z3 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("f1");

        if $z3 == 0 goto label4;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r17 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r17);

        goto label6;

     label4:
        $z4 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("f2");

        if $z4 == 0 goto label5;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r15 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label6;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected field ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;
    }

    public void testGenericPojoTypeInference3()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r6, $r8, $r10;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper3 $r4;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$3 $r5;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper3;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper3: void <init>()>();

        $r5 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$3;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$3: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r6 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r5);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r6);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo CHAR_TYPE_INFO>;

        $r8 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r10 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r9, $r10);

        return;
    }

    public void testGenericPojoTypeInference4()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper4 $r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$4 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r3 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper4;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper4: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$4;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$4: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testGenericPojoTypeInference5()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper5 $r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$5 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r3 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper5;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper5: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$5;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$5: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BYTE_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testGenericPojoTypeInference6()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper6 $r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$6 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r3 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper6;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper6: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$6;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$6: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testGenericPojoTypeInference7()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper7 $r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$7 $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r3 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper7;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$MyMapper7: void <init>()>();

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$7;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$7: void <init>(org.apache.flink.api.java.typeutils.PojoTypeExtractionTest)>(r0);

        $r5 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r3, $r5);

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r2);

        return;
    }

    public void testRecursivePojo1()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        boolean $z0;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r2;
        org.apache.flink.api.java.typeutils.PojoField $r3;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$RecursivePojo1;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r5);

        return;
    }

    public void testRecursivePojo2()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4, $r5, $r7;
        org.apache.flink.api.java.typeutils.PojoField r2;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r3;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$RecursivePojo2;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        r2 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z1 = $r4 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r6 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r8);

        return;
    }

    public void testRecursivePojo3()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4, $r5, $r8;
        org.apache.flink.api.java.typeutils.PojoField r2, $r7;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r3, $r6;
        java.lang.Class $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$RecursivePojo3;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        r2 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z1 = $r4 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r6 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r9);

        return;
    }

    public void testDualUseOfPojo()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5, $r6, $r7;
        org.apache.flink.api.java.typeutils.TupleTypeInfo r3;
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$DuplicateMapper $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        $r4 = new org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$DuplicateMapper;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.PojoTypeExtractionTest$DuplicateMapper: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$FooBarPojo;");

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getMapReturnTypes(org.apache.flink.api.common.functions.MapFunction,org.apache.flink.api.common.typeinfo.TypeInformation)>($r4, $r5);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.TupleTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r3 = (org.apache.flink.api.java.typeutils.TupleTypeInfo) r2;

        $r6 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        $z1 = $r6 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = virtualinvoke r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        $z2 = $r7 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testPojoWithRecursiveGenericField()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4;
        boolean $z0;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r2;
        org.apache.flink.api.java.typeutils.PojoField $r3;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$PojoWithRecursiveGenericField;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r5);

        return;
    }

    public void testPojosWithMutualRecursion()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r7;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r3, $r5;
        org.apache.flink.api.java.typeutils.PojoField $r4, $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$MutualPojoB;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        r2 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r2;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r8);

        return;
    }

    public void testRecursivePojoWithTypeVariable()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r7;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r3, $r5;
        org.apache.flink.api.java.typeutils.PojoField $r4, $r6;
        java.lang.Class $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$MyType;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r3 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        r2 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r2;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.java.typeutils.PojoField getPojoFieldAt(int)>(0);

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.PojoField: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInformation()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/api/java/typeutils/GenericTypeInfo;", $r8);

        return;
    }

    public void testLombokPojo()
    {
        org.apache.flink.api.java.typeutils.PojoTypeExtractionTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, $r4, $r6;
        org.apache.flink.api.java.typeutils.PojoTypeInfo r2;
        boolean $z0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.PojoTypeExtractionTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$TestLombok;");

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.PojoTypeInfo;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        r2 = (org.apache.flink.api.java.typeutils.PojoTypeInfo) r1;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r4 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(0);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.PojoTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(1);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }
}
