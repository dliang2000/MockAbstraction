public class org.apache.flink.util.ArrayUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.ArrayUtilsTest r0;

        r0 := @this: org.apache.flink.util.ArrayUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void concatWithEmptyArray()
    {
        org.apache.flink.util.ArrayUtilsTest r0;
        java.lang.String[] r1, $r3, $r4, $r6;
        org.hamcrest.Matcher $r5, $r7;

        r0 := @this: org.apache.flink.util.ArrayUtilsTest;

        r1 = newarray (java.lang.String)[0];

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "some value";

        $r4 = staticinvoke <org.apache.flink.util.ArrayUtils: java.lang.String[] concat(java.lang.String[],java.lang.String[])>(r1, $r3);

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Should return the non empty array", $r4, $r5);

        $r6 = staticinvoke <org.apache.flink.util.ArrayUtils: java.lang.String[] concat(java.lang.String[],java.lang.String[])>($r3, r1);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher sameInstance(java.lang.Object)>($r3);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("Should return the non empty array", $r6, $r7);

        return;
    }

    public void concatArrays()
    {
        org.apache.flink.util.ArrayUtilsTest r0;
        java.lang.String[] $r3, $r4, $r5, $r6, $r8, $r9;
        org.hamcrest.Matcher $r7, $r10;

        r0 := @this: org.apache.flink.util.ArrayUtilsTest;

        $r3 = newarray (java.lang.String)[7];

        $r3[0] = "A";

        $r3[1] = "B";

        $r3[2] = "C";

        $r3[3] = "D";

        $r3[4] = "E";

        $r3[5] = "F";

        $r3[6] = "G";

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "1";

        $r4[1] = "2";

        $r4[2] = "3";

        $r5 = staticinvoke <org.apache.flink.util.ArrayUtils: java.lang.String[] concat(java.lang.String[],java.lang.String[])>($r3, $r4);

        $r6 = newarray (java.lang.String)[10];

        $r6[0] = "A";

        $r6[1] = "B";

        $r6[2] = "C";

        $r6[3] = "D";

        $r6[4] = "E";

        $r6[5] = "F";

        $r6[6] = "G";

        $r6[7] = "1";

        $r6[8] = "2";

        $r6[9] = "3";

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

        $r8 = staticinvoke <org.apache.flink.util.ArrayUtils: java.lang.String[] concat(java.lang.String[],java.lang.String[])>($r4, $r3);

        $r9 = newarray (java.lang.String)[10];

        $r9[0] = "1";

        $r9[1] = "2";

        $r9[2] = "3";

        $r9[3] = "A";

        $r9[4] = "B";

        $r9[5] = "C";

        $r9[6] = "D";

        $r9[7] = "E";

        $r9[8] = "F";

        $r9[9] = "G";

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        return;
    }
}
