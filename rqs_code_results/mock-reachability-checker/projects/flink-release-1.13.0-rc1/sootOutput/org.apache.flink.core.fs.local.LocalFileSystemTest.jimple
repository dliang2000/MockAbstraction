public class org.apache.flink.core.fs.local.LocalFileSystemTest extends org.apache.flink.util.TestLogger
{
    public final org.junit.rules.TemporaryFolder temporaryFolder;

    public void <init>()
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r1;

        return;
    }

    public void testLocalFilesystem() throws java.lang.Exception
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileStatus r8, $r47, $r49, $r55;
        org.apache.flink.core.fs.FileStatus[] r9, $r48, $r54;
        org.apache.flink.core.fs.FSDataOutputStream r10;
        java.io.File $r14, $r16, $r19, $r22;
        org.junit.rules.TemporaryFolder $r15;
        java.util.UUID $r17, $r20, $r23;
        java.lang.String $r18, $r21, $r24, $r27, $r30, $r34;
        org.apache.flink.core.fs.Path $r25, $r28, $r32;
        java.net.URI $r26, $r29, $r33;
        org.apache.flink.core.fs.local.LocalFileSystem $r31;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        int $i0, $i2, $i4, $i10, $i12, $i14;
        org.apache.flink.core.fs.FileSystem$WriteMode $r35;
        byte[] $r36, r42, r52;
        long $l1, $l3, $l5, $l6, $l7, $l8, $l9, $l11, $l13, $l15;
        java.io.FileInputStream $r37;
        java.lang.Throwable $r38, $r39, $r40, r44;
        java.io.FileOutputStream $r50;
        org.apache.flink.core.fs.FSDataInputStream r53;
        org.apache.flink.core.fs.BlockLocation[] $r56;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        $r14 = new java.io.File;

        $r15 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r16 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        $r17 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r18 = virtualinvoke $r17.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, $r18);

        $r19 = new java.io.File;

        $r20 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r21 = virtualinvoke $r20.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, $r21);

        $r22 = new java.io.File;

        $r23 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r24 = virtualinvoke $r23.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, $r24);

        $r25 = new org.apache.flink.core.fs.Path;

        $r26 = virtualinvoke $r19.<java.io.File: java.net.URI toURI()>();

        $r27 = virtualinvoke $r26.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r25.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r27);

        $r28 = new org.apache.flink.core.fs.Path;

        $r29 = virtualinvoke $r22.<java.io.File: java.net.URI toURI()>();

        $r30 = virtualinvoke $r29.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r28.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r30);

        $r31 = new org.apache.flink.core.fs.local.LocalFileSystem;

        specialinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: void <init>()>();

        $r32 = new org.apache.flink.core.fs.Path;

        $r33 = virtualinvoke $r14.<java.io.File: java.net.URI toURI()>();

        $r34 = virtualinvoke $r33.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r32.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r34);

        $z0 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke $r14.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r32);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        r8 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r32);

        $z3 = interfaceinvoke r8.<org.apache.flink.core.fs.FileStatus: boolean isDir()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        r9 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>($r32);

        $i0 = lengthof r9;

        if $i0 != 0 goto label01;

        $z12 = 1;

        goto label02;

     label01:
        $z12 = 0;

     label02:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r32, 1);

        $z5 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r32);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $z6 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r32);

        $z8 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $r35 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r10 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r25, $r35);

        $z9 = virtualinvoke $r22.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $z11 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r28);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $r36 = newarray (byte)[5];

        $r36[0] = 1;

        $r36[1] = 2;

        $r36[2] = 3;

        $r36[3] = 4;

        $r36[4] = 5;

        virtualinvoke r10.<org.apache.flink.core.fs.FSDataOutputStream: void write(byte[])>($r36);

        virtualinvoke r10.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        $l1 = virtualinvoke $r19.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 5L);

        r42 = newarray (byte)[5];

        $r37 = new java.io.FileInputStream;

        specialinvoke $r37.<java.io.FileInputStream: void <init>(java.io.File)>($r19);

        r44 = null;

     label03:
        $i2 = lengthof r42;

        $l3 = (long) $i2;

        $i4 = virtualinvoke $r37.<java.io.FileInputStream: int read(byte[])>(r42);

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

     label04:
        if $r37 == null goto label14;

        goto label05;

     label05:
        virtualinvoke $r37.<java.io.FileInputStream: void close()>();

        goto label14;

     label06:
        $r39 := @caughtexception;

        r44 = $r39;

        throw $r39;

     label07:
        $r38 := @caughtexception;

     label08:
        if $r37 == null goto label13;

        if r44 == null goto label12;

     label09:
        virtualinvoke $r37.<java.io.FileInputStream: void close()>();

     label10:
        goto label13;

     label11:
        $r40 := @caughtexception;

        virtualinvoke r44.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r40);

        goto label13;

     label12:
        virtualinvoke $r37.<java.io.FileInputStream: void close()>();

     label13:
        throw $r38;

     label14:
        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>($r36, r42);

        $r47 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r25);

        $l6 = interfaceinvoke $r47.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $l7 = virtualinvoke $r19.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l7);

        $r48 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>($r25);

        $r49 = $r48[0];

        $l8 = interfaceinvoke $r49.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $l9 = virtualinvoke $r19.<java.io.File: long length()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l8, $l9);

        $r50 = new java.io.FileOutputStream;

        specialinvoke $r50.<java.io.FileOutputStream: void <init>(java.io.File)>($r22);

        virtualinvoke $r50.<java.io.FileOutputStream: void write(byte[])>($r36);

        virtualinvoke $r50.<java.io.FileOutputStream: void close()>();

        r52 = newarray (byte)[5];

        r53 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r28);

        $i10 = virtualinvoke r53.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[])>(r52);

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l11, 5L);

        virtualinvoke r53.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        $z13 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r36, r52);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $r54 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>($r32);

        $i12 = lengthof $r54;

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l13, 2L);

        $r55 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r25);

        $r56 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus,long,long)>($r55, 0L, 0L);

        $i14 = lengthof $r56;

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l15, 1L);

        $z14 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r25, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z14);

        $z15 = virtualinvoke $r31.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r32, 1);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $z16 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z16 != 0 goto label15;

        $z17 = 1;

        goto label16;

     label15:
        $z17 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    public void testDeletePathIfEmpty() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        java.io.File r1, r2, $r10;
        org.apache.flink.core.fs.FileSystem r7;
        org.junit.rules.TemporaryFolder $r8, $r9;
        java.util.UUID $r11;
        java.lang.String $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.flink.core.fs.Path $r13, $r15, $r17;
        java.net.URI $r14, $r16, $r18;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        $r8 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r9 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r10 = new java.io.File;

        $r11 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r12 = virtualinvoke $r11.<java.util.UUID: java.lang.String toString()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r12);

        $z0 = virtualinvoke $r10.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r13 = new org.apache.flink.core.fs.Path;

        $r14 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r14);

        $r15 = new org.apache.flink.core.fs.Path;

        $r16 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r16);

        $r17 = new org.apache.flink.core.fs.Path;

        $r18 = virtualinvoke $r10.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r18);

        r7 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $z1 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z2 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r17);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r7, $r13);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $z4 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r13);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r7, $r15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z5);

        $z6 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        $z7 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r17, 0);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = staticinvoke <org.apache.flink.util.FileUtils: boolean deletePathIfEmpty(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.Path)>(r7, $r15);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = virtualinvoke r7.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r15);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z9);

        return;
    }

    public void testRenamePath() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        java.io.File r1, $r12, $r13, $r14, $r15, $r16, $r17;
        org.apache.flink.core.fs.FileSystem r10;
        org.junit.rules.TemporaryFolder $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.apache.flink.core.fs.Path $r18, $r20, $r22, $r24;
        java.net.URI $r19, $r21, $r23, $r25;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        $r11 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r1 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r12 = new java.io.File;

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "src");

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "B");

        $z0 = virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "test.csv");

        $z1 = virtualinvoke $r14.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r15 = new java.io.File;

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "dst");

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "B");

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "test.csv");

        $r18 = new org.apache.flink.core.fs.Path;

        $r19 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r18.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r19);

        $r20 = new org.apache.flink.core.fs.Path;

        $r21 = virtualinvoke $r14.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r20.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r21);

        $r22 = new org.apache.flink.core.fs.Path;

        $r23 = virtualinvoke $r15.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r22.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r23);

        $r24 = new org.apache.flink.core.fs.Path;

        $r25 = virtualinvoke $r17.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r24.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r25);

        r10 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $z2 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z3 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r22);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $z4 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r18, $r22);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z5 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        $z6 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r18);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z6);

        $z7 = virtualinvoke $r12.<java.io.File: boolean mkdirs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        $z8 = virtualinvoke $r14.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        $z9 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r20, $r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z10 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r20);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z10);

        $z11 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r18);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z11);

        $z12 = virtualinvoke r10.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r24);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        return;
    }

    public void testRenameNonExistingFile() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File $r6, $r8, $r9, $r11;
        org.junit.rules.TemporaryFolder $r7, $r10;
        org.apache.flink.core.fs.Path $r12, $r14;
        java.net.URI $r13, $r15;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r6 = new java.io.File;

        $r7 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "someFile.txt");

        $r9 = new java.io.File;

        $r10 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r11 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "target");

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = virtualinvoke $r6.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke $r9.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $z0 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r12, $r14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testRenameFileWithNoAccess() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File r2, $r8, $r10, $r11, $r16, $r18;
        org.junit.rules.TemporaryFolder $r7, $r9;
        boolean $z0, $z1, $z2;
        org.apache.flink.core.fs.Path $r12, $r14;
        java.net.URI $r13, $r15;
        java.lang.Throwable $r17;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r7 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("someFile.txt");

        $r8 = new java.io.File;

        $r9 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r10 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "target");

        $r11 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        $z0 = virtualinvoke $r11.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z0);

        $z1 = virtualinvoke r2.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0);

        staticinvoke <org.junit.Assume: void assumeTrue(boolean)>($z1);

     label1:
        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke $r8.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $z2 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r12, $r14);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

     label2:
        $r16 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r16.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        virtualinvoke r2.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        goto label5;

     label3:
        $r17 := @caughtexception;

     label4:
        $r18 = virtualinvoke r2.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r18.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        virtualinvoke r2.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);

        throw $r17;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testRenameToNonEmptyTargetDir() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File r2, r4, $r7, $r9, $r18;
        org.junit.rules.TemporaryFolder $r6, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.core.fs.Path $r10, $r12, $r14, $r16;
        java.net.URI $r11, $r13, $r15, $r17;
        java.lang.String $r19;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r6 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "someFile.txt");

        $z0 = virtualinvoke $r7.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r8 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r4 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, "target");

        $z1 = virtualinvoke $r9.<java.io.File: boolean createNewFile()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = new org.apache.flink.core.fs.Path;

        $r11 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r11);

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = virtualinvoke r4.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $z2 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r10, $r12);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $z3 = virtualinvoke $r9.<java.io.File: boolean delete()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $r16 = new org.apache.flink.core.fs.Path;

        $r17 = virtualinvoke r4.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r16.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r17);

        $z4 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean rename(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r14, $r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r18 = new java.io.File;

        $r19 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>(r4, $r19);

        $z5 = virtualinvoke $r18.<java.io.File: boolean exists()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testKind()
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        org.apache.flink.core.fs.FileSystemKind $r2, $r3;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r2 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind FILE_SYSTEM>;

        $r3 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void testConcurrentMkdirs() throws java.lang.Exception
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File r2, r6;
        java.util.Collection r3;
        java.util.concurrent.ExecutorService r4;
        java.util.concurrent.CompletableFuture r7, r25;
        org.junit.rules.TemporaryFolder $r9;
        java.util.concurrent.CyclicBarrier $r10;
        java.util.ArrayList $r11;
        boolean $z0;
        java.util.concurrent.CompletableFuture[] $r12, $r14;
        java.lang.Object[] $r13;
        java.util.concurrent.ExecutorService[] $r16, $r21;
        java.util.concurrent.TimeUnit $r17, $r22;
        java.lang.Object $r18;
        java.lang.Runnable $r19;
        java.lang.Throwable $r20;
        java.util.Iterator r24;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r9 = r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        r2 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>();

        r3 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystemTest: java.util.Collection createTargetDirectories(java.io.File,int,int)>(r2, 10, 10);

        r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(10);

        $r10 = new java.util.concurrent.CyclicBarrier;

        specialinvoke $r10.<java.util.concurrent.CyclicBarrier: void <init>(int)>(10);

     label1:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(10);

        r24 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r18 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.io.File) $r18;

        $r19 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystemTest$lambda_testConcurrentMkdirs_0__460: java.lang.Runnable bootstrap$(java.util.concurrent.CyclicBarrier,org.apache.flink.core.fs.FileSystem,java.io.File)>($r10, r1, r6);

        r7 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture runAsync(java.lang.Runnable,java.util.concurrent.Executor)>($r19, r4);

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>(r7);

        goto label2;

     label3:
        $r12 = newarray (java.util.concurrent.CompletableFuture)[10];

        $r13 = interfaceinvoke $r11.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (java.util.concurrent.CompletableFuture[]) $r13;

        r25 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture allOf(java.util.concurrent.CompletableFuture[])>($r14);

        virtualinvoke r25.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

     label4:
        $r17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r16 = newarray (java.util.concurrent.ExecutorService)[1];

        $r16[0] = r4;

        staticinvoke <org.apache.flink.util.ExecutorUtils: void gracefulShutdown(long,java.util.concurrent.TimeUnit,java.util.concurrent.ExecutorService[])>(10000L, $r17, $r16);

        goto label7;

     label5:
        $r20 := @caughtexception;

     label6:
        $r22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r21 = newarray (java.util.concurrent.ExecutorService)[1];

        $r21[0] = r4;

        staticinvoke <org.apache.flink.util.ExecutorUtils: void gracefulShutdown(long,java.util.concurrent.TimeUnit,java.util.concurrent.ExecutorService[])>(10000L, $r22, $r21);

        throw $r20;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void testCreatingFileInCurrentDirectoryWithRelativePath() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        org.apache.flink.core.fs.FileSystem r1;
        org.apache.flink.core.fs.Path $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        org.apache.flink.core.fs.FileSystem$WriteMode $r10;
        boolean $z0, $z1;
        java.lang.Throwable $r11;
        org.apache.flink.core.fs.FSDataOutputStream r13;
        int i0, i1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $r4 = new org.apache.flink.core.fs.Path;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("local_fs_test_");

        $r7 = staticinvoke <org.apache.commons.lang3.RandomStringUtils: java.lang.String randomAlphanumeric(int)>(16);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r9);

     label01:
        $r10 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        r13 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r4, $r10);

        if r13 == null goto label03;

        goto label02;

     label02:
        virtualinvoke r13.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label03:
        i0 = 0;

     label04:
        if i0 >= 10 goto label05;

        $z0 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r4);

        if $z0 == 0 goto label05;

        virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r4, 1);

        i0 = i0 + 1;

        goto label04;

     label05:
        goto label10;

     label06:
        $r11 := @caughtexception;

     label07:
        i1 = 0;

     label08:
        if i1 >= 10 goto label09;

        $z1 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r4);

        if $z1 == 0 goto label09;

        virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r4, 1);

        i1 = i1 + 1;

        goto label08;

     label09:
        throw $r11;

     label10:
        return;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    private java.util.Collection createTargetDirectories(java.io.File, int, int)
    {
        org.apache.flink.core.fs.local.LocalFileSystemTest r0;
        java.io.File r1, $r5;
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r3, $r6, $r8, $r9, $r10, $r12;
        java.util.ArrayList $r4;
        java.lang.String $r7, $r11;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystemTest;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i1);

        i3 = 0;

     label3:
        if i3 >= i1 goto label4;

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r11);

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        i3 = i3 + 1;

        goto label3;

     label4:
        return $r4;
    }

    public static void lambda$testConcurrentMkdirs$0(java.util.concurrent.CyclicBarrier, org.apache.flink.core.fs.FileSystem, java.io.File)
    {
        java.util.concurrent.CyclicBarrier r0;
        org.apache.flink.core.fs.FileSystem r1;
        java.io.File r2;
        org.apache.flink.core.fs.Path $r4;
        boolean $z0;
        java.lang.Boolean $r5, $r6;
        org.hamcrest.Matcher $r7;
        java.lang.Exception $r8;
        java.util.concurrent.CompletionException $r9;

        r0 := @parameter0: java.util.concurrent.CyclicBarrier;

        r1 := @parameter1: org.apache.flink.core.fs.FileSystem;

        r2 := @parameter2: java.io.File;

     label1:
        virtualinvoke r0.<java.util.concurrent.CyclicBarrier: int await()>();

        $r4 = staticinvoke <org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path fromLocalFile(java.io.File)>(r2);

        $z0 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r7 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.util.concurrent.CompletionException;

        specialinvoke $r9.<java.util.concurrent.CompletionException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
