public class org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{
    private static final org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer;
    public boolean padNullValue;
    private org.apache.flink.api.common.typeutils.TypeSerializer nullableSerializer;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    public static java.util.List whetherToPadNullValue()
    {
        java.lang.Boolean[] $r0;
        java.lang.Boolean $r1, $r2;
        java.util.List $r3;

        $r0 = newarray (java.lang.Boolean)[2];

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r0[1] = $r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r3;
    }

    public void init()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: boolean padNullValue>;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrapIfNullIsNotSupported(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r1, $z0);

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer nullableSerializer> = $r2;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: boolean padNullValue>;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrapIfNullIsNotSupported(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r1, $z0);

        return $r2;
    }

    protected int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: boolean padNullValue>;

        if $z0 == 0 goto label1;

        $b0 = 5;

        goto label2;

     label1:
        $b0 = -1;

     label2:
        return $b0;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        return class "Ljava/lang/Integer;";
    }

    protected java.lang.Integer[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        java.lang.Integer[] $r1;
        java.lang.Integer $r2, $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = newarray (java.lang.Integer)[4];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r1[1] = $r3;

        $r1[2] = null;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r1[3] = $r4;

        return $r1;
    }

    public void testWrappingNotNeeded()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r1, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: boolean padNullValue>;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrapIfNullIsNotSupported(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r1, $z0);

        $r3 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void testWrappingNeeded()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer nullableSerializer>;

        $z0 = $r1 instanceof org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer nullableSerializer>;

        $z1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: boolean padNullValue>;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrapIfNullIsNotSupported(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r2, $z1);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer nullableSerializer>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        return;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest r0;
        java.lang.Integer[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: java.lang.Integer[] getTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.IntSerializer $r0;

        $r0 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        <org.apache.flink.api.java.typeutils.runtime.NullableSerializerTest: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer> = $r0;

        return;
    }
}
