public class org.apache.flink.api.common.io.BinaryInputFormatTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCreateInputSplitsWithOneFile() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;
        java.io.File r1;
        int i0, i1, $i3, $i4, $i7, i15;
        org.apache.flink.core.fs.FileInputSplit[] r4;
        org.apache.flink.api.common.io.BlockInfo $r5;
        java.io.FileOutputStream $r6;
        org.apache.flink.configuration.Configuration $r7;
        long $l5, $l6, $l8, $l9, $l10, $l11, $l12, $l13, $l14;
        org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat $r8;
        java.net.URI $r9;
        java.lang.String $r10;
        org.apache.flink.core.fs.FileInputSplit $r11, $r12, $r13;
        byte[] $r14;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("binary_input_format_test", "tmp");

        virtualinvoke r1.<java.io.File: void deleteOnExit()>();

        $r5 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r5.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        i0 = virtualinvoke $r5.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        i1 = i0 + 8;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        i15 = 0;

     label1:
        $i3 = i1 * 3;

        if i15 >= $i3 goto label2;

        $r14 = newarray (byte)[1];

        $r14[0] = 1;

        virtualinvoke $r6.<java.io.FileOutputStream: void write(byte[])>($r14);

        i15 = i15 + 1;

        goto label1;

     label2:
        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

        $r7 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r7.<org.apache.flink.configuration.Configuration: void <init>()>();

        $i4 = i1 + 10;

        $l5 = (long) $i4;

        virtualinvoke $r7.<org.apache.flink.configuration.Configuration: void setLong(java.lang.String,long)>("input.block_size", $l5);

        $r8 = new org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat;

        specialinvoke $r8.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void <init>(org.apache.flink.api.common.io.BinaryInputFormatTest$1)>(null);

        $r9 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.BinaryInputFormat: void setFilePath(java.lang.String)>($r10);

        $l6 = (long) i1;

        virtualinvoke $r8.<org.apache.flink.api.common.io.BinaryInputFormat: void setBlockSize(long)>($l6);

        virtualinvoke $r8.<org.apache.flink.api.common.io.BinaryInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r7);

        r4 = virtualinvoke $r8.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(3);

        $i7 = lengthof r4;

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Returns requested numbers of splits.", 3L, $l8);

        $l9 = (long) i1;

        $r11 = r4[0];

        $l10 = virtualinvoke $r11.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("1. split has block size length.", $l9, $l10);

        $l11 = (long) i1;

        $r12 = r4[1];

        $l12 = virtualinvoke $r12.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("2. split has block size length.", $l11, $l12);

        $l13 = (long) i1;

        $r13 = r4[2];

        $l14 = virtualinvoke $r13.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("3. split has block size length.", $l13, $l14);

        return;
    }

    public void testCreateInputSplitsWithMulitpleFiles() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;
        int i0, i1, $i6, $i8, i13, i14, i15;
        java.io.File r1, r2;
        java.lang.String r3, r4, $r14, $r18, $r21;
        org.apache.flink.core.fs.FileInputSplit[] r6;
        org.apache.flink.api.common.io.BlockInfo $r7;
        java.net.URI $r8, $r9;
        org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat $r10;
        java.lang.String[] $r11;
        long $l5, $l7, $l9, $l10, $l11, $l12;
        java.lang.Object[] $r12;
        java.lang.Integer $r13;
        org.apache.flink.core.fs.FileInputSplit $r15, $r16, $r19;
        org.apache.flink.core.fs.Path $r17, $r20;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        $r7 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r7.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        i0 = virtualinvoke $r7.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        i1 = i0 + 8;

        r1 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormatTest: java.io.File createBinaryInputFile(java.lang.String,int,int)>("binary_input_format_test", i1, 3);

        r2 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormatTest: java.io.File createBinaryInputFile(java.lang.String,int,int)>("binary_input_format_test_2", i1, 5);

        $r8 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        r3 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r9 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        r4 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        $r10 = new org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat;

        specialinvoke $r10.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void <init>(org.apache.flink.api.common.io.BinaryInputFormatTest$1)>(null);

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = r3;

        $r11[1] = r4;

        virtualinvoke $r10.<org.apache.flink.api.common.io.BinaryInputFormat: void setFilePaths(java.lang.String[])>($r11);

        $l5 = (long) i1;

        virtualinvoke $r10.<org.apache.flink.api.common.io.BinaryInputFormat: void setBlockSize(long)>($l5);

        r6 = virtualinvoke $r10.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.core.fs.FileInputSplit[] createInputSplits(int)>(8);

        i13 = 0;

        i14 = 0;

        $i6 = lengthof r6;

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Returns requested numbers of splits.", 8L, $l7);

        i15 = 0;

     label1:
        $i8 = lengthof r6;

        if i15 >= $i8 goto label5;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        $r12[0] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d. split has block size length.", $r12);

        $l11 = (long) i1;

        $r15 = r6[i15];

        $l12 = virtualinvoke $r15.<org.apache.flink.core.fs.FileInputSplit: long getLength()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r14, $l11, $l12);

        $r16 = r6[i15];

        $r17 = virtualinvoke $r16.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        i13 = i13 + 1;

        goto label4;

     label2:
        $r19 = r6[i15];

        $r20 = virtualinvoke $r19.<org.apache.flink.core.fs.FileInputSplit: org.apache.flink.core.fs.Path getPath()>();

        $r21 = virtualinvoke $r20.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        i14 = i14 + 1;

        goto label4;

     label3:
        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Split does not belong to any input file.");

     label4:
        i15 = i15 + 1;

        goto label1;

     label5:
        $l9 = (long) i13;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l9);

        $l10 = (long) i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(5L, $l10);

        return;
    }

    public void testGetStatisticsNonExistingFiles()
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics r2;
        org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat $r3;
        java.lang.String[] $r4;
        org.apache.flink.configuration.Configuration $r5;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        $r3 = new org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void <init>(org.apache.flink.api.common.io.BinaryInputFormatTest$1)>(null);

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "file:///some/none/existing/directory/";

        $r4[1] = "file:///another/none/existing/directory/";

        virtualinvoke $r3.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void setFilePaths(java.lang.String[])>($r4);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r3.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        r2 = virtualinvoke $r3.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("The file statistics should be null.", r2);

        return;
    }

    public void testGetStatisticsMultiplePaths() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;
        int i0, i1, $i5;
        java.io.File r1, r2;
        org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics r4;
        org.apache.flink.api.common.io.BlockInfo $r5;
        org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat $r6;
        java.lang.String[] $r7;
        java.net.URI $r8, $r10;
        java.lang.String $r9, $r11;
        long $l4, $l6, $l7;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        $r5 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r5.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        i0 = virtualinvoke $r5.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        i1 = i0 + 8;

        r1 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormatTest: java.io.File createBinaryInputFile(java.lang.String,int,int)>("binary_input_format_test", i1, 3);

        r2 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormatTest: java.io.File createBinaryInputFile(java.lang.String,int,int)>("binary_input_format_test_2", i1, 5);

        $r6 = new org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat;

        specialinvoke $r6.<org.apache.flink.api.common.io.BinaryInputFormatTest$MyBinaryInputFormat: void <init>(org.apache.flink.api.common.io.BinaryInputFormatTest$1)>(null);

        $r7 = newarray (java.lang.String)[2];

        $r8 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r7[0] = $r9;

        $r10 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

        $r7[1] = $r11;

        virtualinvoke $r6.<org.apache.flink.api.common.io.BinaryInputFormat: void setFilePaths(java.lang.String[])>($r7);

        $l4 = (long) i1;

        virtualinvoke $r6.<org.apache.flink.api.common.io.BinaryInputFormat: void setBlockSize(long)>($l4);

        r4 = virtualinvoke $r6.<org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BinaryInputFormat$SequentialStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i5 = i1 * 8;

        $l6 = (long) $i5;

        $l7 = interfaceinvoke r4.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getTotalInputSize()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("The file size statistics is wrong", $l6, $l7);

        return;
    }

    private java.io.File createBinaryInputFile(java.lang.String, int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormatTest r0;
        java.lang.String r1;
        int i0, i1, $i2, i3;
        java.io.File r2;
        java.io.FileOutputStream $r6;
        byte[] $r7;
        java.lang.Throwable $r8, $r9, $r10, r12;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormatTest;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>(r1, "tmp");

        virtualinvoke r2.<java.io.File: void deleteOnExit()>();

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        r12 = null;

     label01:
        i3 = 0;

     label02:
        $i2 = i0 * i1;

        if i3 >= $i2 goto label03;

        $r7 = newarray (byte)[1];

        $r7[0] = 1;

        virtualinvoke $r6.<java.io.FileOutputStream: void write(byte[])>($r7);

        i3 = i3 + 1;

        goto label02;

     label03:
        if $r6 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

        goto label13;

     label05:
        $r10 := @caughtexception;

        r12 = $r10;

        throw $r10;

     label06:
        $r8 := @caughtexception;

     label07:
        if $r6 == null goto label12;

        if r12 == null goto label11;

     label08:
        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

        goto label12;

     label11:
        virtualinvoke $r6.<java.io.FileOutputStream: void close()>();

     label12:
        throw $r8;

     label13:
        return r2;

        catch java.lang.Throwable from label01 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }
}
