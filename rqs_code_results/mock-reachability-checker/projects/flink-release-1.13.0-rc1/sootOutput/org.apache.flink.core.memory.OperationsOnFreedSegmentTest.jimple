public class org.apache.flink.core.memory.OperationsOnFreedSegmentTest extends java.lang.Object
{
    private static final int PAGE_SIZE;

    public void <init>()
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSingleSegmentOperationsHeapSegment() throws java.lang.Exception
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment[] r1;
        int i0, i1;
        org.apache.flink.core.memory.MemorySegment r2;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        r1 = staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: org.apache.flink.core.memory.MemorySegment[] createTestSegments()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        specialinvoke r0.<org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testOpsOnFreedSegment(org.apache.flink.core.memory.MemorySegment)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testCompare()
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2, r3, r4, r12, r14, r16, r18, r20, r22;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        byte[] $r7, $r8;
        org.apache.flink.core.memory.MemorySegment[] $r9, $r10;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        $i0 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        $r7 = newarray (byte)[$i0];

        r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>($r7);

        $i1 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>($i1);

        $i2 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        $r8 = newarray (byte)[$i2];

        r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>($r8);

        $i3 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        r4 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>($i3);

        virtualinvoke r3.<org.apache.flink.core.memory.MemorySegment: void free()>();

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void free()>();

        $r9 = newarray (org.apache.flink.core.memory.MemorySegment)[2];

        $r9[0] = r1;

        $r9[1] = r2;

        $r10 = newarray (org.apache.flink.core.memory.MemorySegment)[2];

        $r10[0] = r3;

        $r10[1] = r4;

        i4 = lengthof $r9;

        i5 = 0;

     label01:
        if i5 >= i4 goto label04;

        r12 = $r9[i5];

        i6 = lengthof $r10;

        i7 = 0;

     label02:
        if i7 >= i6 goto label03;

        r14 = $r10[i7];

        specialinvoke r0.<org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testCompare(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment)>(r12, r14);

        i7 = i7 + 1;

        goto label02;

     label03:
        i5 = i5 + 1;

        goto label01;

     label04:
        i8 = lengthof $r10;

        i9 = 0;

     label05:
        if i9 >= i8 goto label08;

        r16 = $r10[i9];

        i10 = lengthof $r9;

        i11 = 0;

     label06:
        if i11 >= i10 goto label07;

        r18 = $r9[i11];

        specialinvoke r0.<org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testCompare(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment)>(r16, r18);

        i11 = i11 + 1;

        goto label06;

     label07:
        i9 = i9 + 1;

        goto label05;

     label08:
        i12 = lengthof $r10;

        i13 = 0;

     label09:
        if i13 >= i12 goto label12;

        r20 = $r10[i13];

        i14 = lengthof $r10;

        i15 = 0;

     label10:
        if i15 >= i14 goto label11;

        r22 = $r10[i15];

        specialinvoke r0.<org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testCompare(org.apache.flink.core.memory.MemorySegment,org.apache.flink.core.memory.MemorySegment)>(r20, r22);

        i15 = i15 + 1;

        goto label10;

     label11:
        i13 = i13 + 1;

        goto label09;

     label12:
        return;
    }

    public void testCopyTo()
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        java.util.function.BiConsumer $r1;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        $r1 = staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest$testCopy__360: java.util.function.BiConsumer bootstrap$(org.apache.flink.core.memory.OperationsOnFreedSegmentTest)>(r0);

        staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testAliveVsFree(java.util.function.BiConsumer)>($r1);

        return;
    }

    public void testSwap()
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        java.util.function.BiConsumer $r1;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        $r1 = staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest$testSwap__359: java.util.function.BiConsumer bootstrap$(org.apache.flink.core.memory.OperationsOnFreedSegmentTest)>(r0);

        staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: void testAliveVsFree(java.util.function.BiConsumer)>($r1);

        return;
    }

    private static void testAliveVsFree(java.util.function.BiConsumer)
    {
        java.util.function.BiConsumer r0;
        org.apache.flink.core.memory.MemorySegment[] r1, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        org.apache.flink.core.memory.MemorySegment r4, r6, r8, r10, r12, r14, r16;

        r0 := @parameter0: java.util.function.BiConsumer;

        r1 = staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: org.apache.flink.core.memory.MemorySegment[] createTestSegments()>();

        r2 = staticinvoke <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: org.apache.flink.core.memory.MemorySegment[] createTestSegments()>();

        i0 = lengthof r2;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r4 = r2[i1];

        virtualinvoke r4.<org.apache.flink.core.memory.MemorySegment: void free()>();

        i1 = i1 + 1;

        goto label01;

     label02:
        i2 = lengthof r1;

        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

        r6 = r1[i3];

        i4 = lengthof r2;

        i5 = 0;

     label04:
        if i5 >= i4 goto label05;

        r8 = r2[i5];

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r6, r8);

        i5 = i5 + 1;

        goto label04;

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        i6 = lengthof r2;

        i7 = 0;

     label07:
        if i7 >= i6 goto label10;

        r10 = r2[i7];

        i8 = lengthof r1;

        i9 = 0;

     label08:
        if i9 >= i8 goto label09;

        r12 = r1[i9];

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r10, r12);

        i9 = i9 + 1;

        goto label08;

     label09:
        i7 = i7 + 1;

        goto label07;

     label10:
        i10 = lengthof r2;

        i11 = 0;

     label11:
        if i11 >= i10 goto label14;

        r14 = r2[i11];

        i12 = lengthof r2;

        i13 = 0;

     label12:
        if i13 >= i12 goto label13;

        r16 = r2[i13];

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r14, r16);

        i13 = i13 + 1;

        goto label12;

     label13:
        i11 = i11 + 1;

        goto label11;

     label14:
        return;
    }

    private static org.apache.flink.core.memory.MemorySegment[] createTestSegments()
    {
        org.apache.flink.core.memory.MemorySegment r0, r1, r2;
        int $i0, $i1, $i2;
        byte[] $r4;
        org.apache.flink.core.memory.MemorySegment[] $r5;

        $i0 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        $r4 = newarray (byte)[$i0];

        r0 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>($r4);

        $i1 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>($i1);

        $i2 = <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE>;

        r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int)>($i2);

        $r5 = newarray (org.apache.flink.core.memory.MemorySegment)[3];

        $r5[0] = r0;

        $r5[1] = r1;

        $r5[2] = r2;

        return $r5;
    }

    private void testOpsOnFreedSegment(org.apache.flink.core.memory.MemorySegment) throws java.lang.Exception
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.nio.ByteBuffer r2, $r4, $r5;
        boolean $z0;
        int $i3, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i24, $i25, $i29, $i30, $i31, $i35, $i37, $i38, $i42, $i43, $i44, $i48, $i50, $i51, $i55, $i56, $i57, $i61, $i63, $i64, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, i101, i102;
        java.nio.ByteBuffer[] $r3;
        java.io.DataInputStream $r6;
        java.io.ByteArrayInputStream $r7;
        byte[] $r8, r277;
        java.io.DataOutputStream $r9;
        java.io.ByteArrayOutputStream $r10;
        java.lang.RuntimeException $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r24, $r26, $r27, $r32, $r33, $r34, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r54, $r55, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r77, $r80, $r86, $r88, $r90, $r92, $r94, $r95, $r96, $r98, $r99, $r100, $r104, $r106, $r108, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r121, $r123, $r124, $r125, $r126, $r128, $r129, $r130, $r131, $r137, $r138, $r141, $r143, $r144, $r147, $r148, $r150, $r151, $r152, $r154, $r155, $r156, $r157, $r158, $r159, $r163, $r164;
        java.lang.IllegalStateException $r13, $r18, $r19, $r21, $r22, $r23, $r25, $r28, $r29, $r30, $r31, $r35, $r36, $r37, $r43, $r53, $r56, $r57, $r64, $r67, $r76, $r78, $r79, $r81, $r82, $r83, $r84, $r85, $r87, $r89, $r91, $r93, $r97, $r101, $r102, $r103, $r105, $r107, $r109, $r110, $r111, $r119, $r120, $r122, $r127, $r132, $r133, $r134, $r135, $r136, $r139, $r140, $r142, $r145, $r146, $r149, $r153, $r160, $r161, $r162;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void free()>();

        $z0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean isFreed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label001:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label002:
        goto label004;

     label003:
        $r26 := @caughtexception;

     label004:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label005:
        goto label007;

     label006:
        $r33 := @caughtexception;

     label007:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label008:
        goto label010;

     label009:
        $r148 := @caughtexception;

     label010:
        $i3 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label011:
        goto label013;

     label012:
        $r38 := @caughtexception;

     label013:
        $i5 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i6 = neg $i5;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>($i6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label014:
        goto label016;

     label015:
        $r41 := @caughtexception;

     label016:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label017:
        goto label019;

     label018:
        $r138 := @caughtexception;

     label019:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte get(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label020:
        goto label022;

     label021:
        $r155 := @caughtexception;

     label022:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(0, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label023:
        goto label025;

     label024:
        $r48 := @caughtexception;

     label025:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(-1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label026:
        goto label028;

     label027:
        $r156 := @caughtexception;

     label028:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(1, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label029:
        goto label031;

     label030:
        $r40 := @caughtexception;

     label031:
        $i10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label032:
        goto label034;

     label033:
        $r96 := @caughtexception;

     label034:
        $i11 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i12 = neg $i11;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i12, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label035:
        goto label037;

     label036:
        $r158 := @caughtexception;

     label037:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(2147483647, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label038:
        goto label040;

     label039:
        $r147 := @caughtexception;

     label040:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(-2147483648, 0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label041:
        goto label043;

     label042:
        $r163 := @caughtexception;

     label043:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label044:
        goto label046;

     label045:
        $r90 := @caughtexception;

     label046:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label047:
        goto label049;

     label048:
        $r137 := @caughtexception;

     label049:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label050:
        goto label052;

     label051:
        $r118 := @caughtexception;

     label052:
        $i13 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>($i13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label053:
        goto label055;

     label054:
        $r73 := @caughtexception;

     label055:
        $i14 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i15 = neg $i14;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>($i15);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label056:
        goto label058;

     label057:
        $r112 := @caughtexception;

     label058:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label059:
        goto label061;

     label060:
        $r27 := @caughtexception;

     label061:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean getBoolean(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label062:
        goto label064;

     label063:
        $r92 := @caughtexception;

     label064:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(0, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label065:
        goto label067;

     label066:
        $r94 := @caughtexception;

     label067:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(-1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label068:
        goto label070;

     label069:
        $r69 := @caughtexception;

     label070:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(1, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label071:
        goto label073;

     label072:
        $r50 := @caughtexception;

     label073:
        $i16 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>($i16, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label074:
        goto label076;

     label075:
        $r16 := @caughtexception;

     label076:
        $i17 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i18 = neg $i17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>($i18, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label077:
        goto label079;

     label078:
        $r114 := @caughtexception;

     label079:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(2147483647, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label080:
        goto label082;

     label081:
        $r58 := @caughtexception;

     label082:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(-2147483648, 1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label083:
        goto label085;

     label084:
        $r124 := @caughtexception;

     label085:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label086:
        goto label088;

     label087:
        $r107 := @caughtexception;

     label088:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label089:
        goto label091;

     label090:
        $r152 := @caughtexception;

     label091:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label092:
        goto label094;

     label093:
        $r119 := @caughtexception;

     label094:
        $i22 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>($i22);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label095:
        goto label097;

     label096:
        $r134 := @caughtexception;

     label097:
        $i24 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i25 = neg $i24;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>($i25);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label098:
        goto label100;

     label099:
        $r24 := @caughtexception;

     label100:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label101:
        goto label103;

     label102:
        $r25 := @caughtexception;

     label103:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: char getChar(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label104:
        goto label106;

     label105:
        $r103 := @caughtexception;

     label106:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(0, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label107:
        goto label109;

     label108:
        $r93 := @caughtexception;

     label109:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(-1, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label110:
        goto label112;

     label111:
        $r74 := @caughtexception;

     label112:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(1, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label113:
        goto label115;

     label114:
        $r81 := @caughtexception;

     label115:
        $i29 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>($i29, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label116:
        goto label118;

     label117:
        $r105 := @caughtexception;

     label118:
        $i30 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i31 = neg $i30;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>($i31, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label119:
        goto label121;

     label120:
        $r62 := @caughtexception;

     label121:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(2147483647, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label122:
        goto label124;

     label123:
        $r56 := @caughtexception;

     label124:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putChar(int,char)>(-2147483648, 97);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label125:
        goto label127;

     label126:
        $r101 := @caughtexception;

     label127:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label128:
        goto label130;

     label129:
        $r31 := @caughtexception;

     label130:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label131:
        goto label133;

     label132:
        $r80 := @caughtexception;

     label133:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label134:
        goto label136;

     label135:
        $r89 := @caughtexception;

     label136:
        $i35 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>($i35);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label137:
        goto label139;

     label138:
        $r145 := @caughtexception;

     label139:
        $i37 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i38 = neg $i37;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>($i38);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label140:
        goto label142;

     label141:
        $r45 := @caughtexception;

     label142:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label143:
        goto label145;

     label144:
        $r127 := @caughtexception;

     label145:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: short getShort(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label146:
        goto label148;

     label147:
        $r18 := @caughtexception;

     label148:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(0, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label149:
        goto label151;

     label150:
        $r37 := @caughtexception;

     label151:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(-1, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label152:
        goto label154;

     label153:
        $r68 := @caughtexception;

     label154:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(1, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label155:
        goto label157;

     label156:
        $r57 := @caughtexception;

     label157:
        $i42 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>($i42, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label158:
        goto label160;

     label159:
        $r162 := @caughtexception;

     label160:
        $i43 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i44 = neg $i43;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>($i44, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label161:
        goto label163;

     label162:
        $r159 := @caughtexception;

     label163:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(2147483647, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label164:
        goto label166;

     label165:
        $r79 := @caughtexception;

     label166:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putShort(int,short)>(-2147483648, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label167:
        goto label169;

     label168:
        $r135 := @caughtexception;

     label169:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label170:
        goto label172;

     label171:
        $r110 := @caughtexception;

     label172:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label173:
        goto label175;

     label174:
        $r15 := @caughtexception;

     label175:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label176:
        goto label178;

     label177:
        $r29 := @caughtexception;

     label178:
        $i48 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>($i48);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label179:
        goto label181;

     label180:
        $r82 := @caughtexception;

     label181:
        $i50 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i51 = neg $i50;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>($i51);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label182:
        goto label184;

     label183:
        $r72 := @caughtexception;

     label184:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label185:
        goto label187;

     label186:
        $r133 := @caughtexception;

     label187:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int getInt(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label188:
        goto label190;

     label189:
        $r91 := @caughtexception;

     label190:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(0, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label191:
        goto label193;

     label192:
        $r35 := @caughtexception;

     label193:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(-1, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label194:
        goto label196;

     label195:
        $r141 := @caughtexception;

     label196:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(1, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label197:
        goto label199;

     label198:
        $r109 := @caughtexception;

     label199:
        $i55 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>($i55, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label200:
        goto label202;

     label201:
        $r161 := @caughtexception;

     label202:
        $i56 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i57 = neg $i56;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>($i57, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label203:
        goto label205;

     label204:
        $r104 := @caughtexception;

     label205:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(2147483647, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label206:
        goto label208;

     label207:
        $r122 := @caughtexception;

     label208:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putInt(int,int)>(-2147483648, 42);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label209:
        goto label211;

     label210:
        $r76 := @caughtexception;

     label211:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label212:
        goto label214;

     label213:
        $r13 := @caughtexception;

     label214:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label215:
        goto label217;

     label216:
        $r86 := @caughtexception;

     label217:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label218:
        goto label220;

     label219:
        $r53 := @caughtexception;

     label220:
        $i61 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i61);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label221:
        goto label223;

     label222:
        $r120 := @caughtexception;

     label223:
        $i63 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i64 = neg $i63;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>($i64);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label224:
        goto label226;

     label225:
        $r55 := @caughtexception;

     label226:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label227:
        goto label229;

     label228:
        $r160 := @caughtexception;

     label229:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: long getLong(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label230:
        goto label232;

     label231:
        $r85 := @caughtexception;

     label232:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(0, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label233:
        goto label235;

     label234:
        $r22 := @caughtexception;

     label235:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(-1, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label236:
        goto label238;

     label237:
        $r17 := @caughtexception;

     label238:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(1, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label239:
        goto label241;

     label240:
        $r83 := @caughtexception;

     label241:
        $i68 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>($i68, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label242:
        goto label244;

     label243:
        $r146 := @caughtexception;

     label244:
        $i69 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i70 = neg $i69;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>($i70, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label245:
        goto label247;

     label246:
        $r108 := @caughtexception;

     label247:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(2147483647, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label248:
        goto label250;

     label249:
        $r19 := @caughtexception;

     label250:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putLong(int,long)>(-2147483648, 42L);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label251:
        goto label253;

     label252:
        $r36 := @caughtexception;

     label253:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label254:
        goto label256;

     label255:
        $r67 := @caughtexception;

     label256:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label257:
        goto label259;

     label258:
        $r100 := @caughtexception;

     label259:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label260:
        goto label262;

     label261:
        $r149 := @caughtexception;

     label262:
        $i71 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>($i71);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label263:
        goto label265;

     label264:
        $r132 := @caughtexception;

     label265:
        $i72 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i73 = neg $i72;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>($i73);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label266:
        goto label268;

     label267:
        $r98 := @caughtexception;

     label268:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label269:
        goto label271;

     label270:
        $r43 := @caughtexception;

     label271:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: float getFloat(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label272:
        goto label274;

     label273:
        $r28 := @caughtexception;

     label274:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(0, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label275:
        goto label277;

     label276:
        $r102 := @caughtexception;

     label277:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(-1, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label278:
        goto label280;

     label279:
        $r143 := @caughtexception;

     label280:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(1, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label281:
        goto label283;

     label282:
        $r78 := @caughtexception;

     label283:
        $i74 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>($i74, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label284:
        goto label286;

     label285:
        $r142 := @caughtexception;

     label286:
        $i75 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i76 = neg $i75;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>($i76, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label287:
        goto label289;

     label288:
        $r75 := @caughtexception;

     label289:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(2147483647, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label290:
        goto label292;

     label291:
        $r140 := @caughtexception;

     label292:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putFloat(int,float)>(-2147483648, 42.0F);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label293:
        goto label295;

     label294:
        $r87 := @caughtexception;

     label295:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label296:
        goto label298;

     label297:
        $r23 := @caughtexception;

     label298:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(-1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label299:
        goto label301;

     label300:
        $r128 := @caughtexception;

     label301:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(1);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label302:
        goto label304;

     label303:
        $r111 := @caughtexception;

     label304:
        $i77 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>($i77);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label305:
        goto label307;

     label306:
        $r136 := @caughtexception;

     label307:
        $i78 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i79 = neg $i78;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>($i79);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label308:
        goto label310;

     label309:
        $r99 := @caughtexception;

     label310:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(2147483647);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label311:
        goto label313;

     label312:
        $r153 := @caughtexception;

     label313:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: double getDouble(int)>(-2147483648);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label314:
        goto label316;

     label315:
        $r97 := @caughtexception;

     label316:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(0, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label317:
        goto label319;

     label318:
        $r139 := @caughtexception;

     label319:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(-1, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label320:
        goto label322;

     label321:
        $r151 := @caughtexception;

     label322:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(1, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label323:
        goto label325;

     label324:
        $r84 := @caughtexception;

     label325:
        $i80 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>($i80, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label326:
        goto label328;

     label327:
        $r30 := @caughtexception;

     label328:
        $i81 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i82 = neg $i81;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>($i82, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label329:
        goto label331;

     label330:
        $r88 := @caughtexception;

     label331:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(2147483647, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label332:
        goto label334;

     label333:
        $r21 := @caughtexception;

     label334:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putDouble(int,double)>(-2147483648, 42.0);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label335:
        goto label337;

     label336:
        $r64 := @caughtexception;

     label337:
        r277 = newarray (byte)[55];

     label338:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(0, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label339:
        goto label341;

     label340:
        $r11 := @caughtexception;

     label341:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(-1, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label342:
        goto label344;

     label343:
        $r60 := @caughtexception;

     label344:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(1, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label345:
        goto label347;

     label346:
        $r121 := @caughtexception;

     label347:
        $i83 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i83, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label348:
        goto label350;

     label349:
        $r32 := @caughtexception;

     label350:
        $i84 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i85 = neg $i84;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>($i85, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label351:
        goto label353;

     label352:
        $r71 := @caughtexception;

     label353:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(2147483647, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label354:
        goto label356;

     label355:
        $r66 := @caughtexception;

     label356:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,byte[],int,int)>(-2147483648, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label357:
        goto label359;

     label358:
        $r52 := @caughtexception;

     label359:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(0, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label360:
        goto label362;

     label361:
        $r131 := @caughtexception;

     label362:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(-1, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label363:
        goto label365;

     label364:
        $r77 := @caughtexception;

     label365:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(1, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label366:
        goto label368;

     label367:
        $r49 := @caughtexception;

     label368:
        $i86 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i86, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label369:
        goto label371;

     label370:
        $r95 := @caughtexception;

     label371:
        $i87 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i88 = neg $i87;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>($i88, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label372:
        goto label374;

     label373:
        $r126 := @caughtexception;

     label374:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(2147483647, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label375:
        goto label377;

     label376:
        $r117 := @caughtexception;

     label377:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte[],int,int)>(-2147483648, r277, 3, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label378:
        goto label380;

     label379:
        $r46 := @caughtexception;

     label380:
        $r3 = newarray (java.nio.ByteBuffer)[2];

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(55);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(55);

        $r3[1] = $r5;

        i101 = lengthof $r3;

        i102 = 0;

     label381:
        if i102 >= i101 goto label425;

        r2 = $r3[i102];

     label382:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(0, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label383:
        goto label385;

     label384:
        $r157 := @caughtexception;

     label385:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(-1, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label386:
        goto label388;

     label387:
        $r164 := @caughtexception;

     label388:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(1, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label389:
        goto label391;

     label390:
        $r51 := @caughtexception;

     label391:
        $i95 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>($i95, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label392:
        goto label394;

     label393:
        $r61 := @caughtexception;

     label394:
        $i96 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i97 = neg $i96;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>($i97, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label395:
        goto label397;

     label396:
        $r150 := @caughtexception;

     label397:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(2147483647, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label398:
        goto label400;

     label399:
        $r47 := @caughtexception;

     label400:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(int,java.nio.ByteBuffer,int)>(-2147483648, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label401:
        goto label403;

     label402:
        $r63 := @caughtexception;

     label403:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(0, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label404:
        goto label406;

     label405:
        $r115 := @caughtexception;

     label406:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(-1, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label407:
        goto label409;

     label408:
        $r130 := @caughtexception;

     label409:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(1, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label410:
        goto label412;

     label411:
        $r20 := @caughtexception;

     label412:
        $i98 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>($i98, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label413:
        goto label415;

     label414:
        $r42 := @caughtexception;

     label415:
        $i99 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i100 = neg $i99;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>($i100, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label416:
        goto label418;

     label417:
        $r144 := @caughtexception;

     label418:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(2147483647, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label419:
        goto label421;

     label420:
        $r129 := @caughtexception;

     label421:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,java.nio.ByteBuffer,int)>(-2147483648, r2, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label422:
        goto label424;

     label423:
        $r125 := @caughtexception;

     label424:
        i102 = i102 + 1;

        goto label381;

     label425:
        $r6 = new java.io.DataInputStream;

        $r7 = new java.io.ByteArrayInputStream;

        $r8 = newarray (byte)[100];

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r8);

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        $r9 = new java.io.DataOutputStream;

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        specialinvoke $r9.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r10);

     label426:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, 0, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label427:
        goto label429;

     label428:
        $r65 := @caughtexception;

     label429:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, -1, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label430:
        goto label432;

     label431:
        $r34 := @caughtexception;

     label432:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, 1, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label433:
        goto label435;

     label434:
        $r12 := @caughtexception;

     label435:
        $i89 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, $i89, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label436:
        goto label438;

     label437:
        $r44 := @caughtexception;

     label438:
        $i90 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i91 = neg $i90;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, $i91, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label439:
        goto label441;

     label440:
        $r54 := @caughtexception;

     label441:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, 2147483647, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label442:
        goto label444;

     label443:
        $r106 := @caughtexception;

     label444:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void get(java.io.DataOutput,int,int)>($r9, -2147483648, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label445:
        goto label447;

     label446:
        $r39 := @caughtexception;

     label447:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, 0, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label448:
        goto label450;

     label449:
        $r70 := @caughtexception;

     label450:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, -1, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label451:
        goto label453;

     label452:
        $r116 := @caughtexception;

     label453:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, 1, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label454:
        goto label456;

     label455:
        $r113 := @caughtexception;

     label456:
        $i92 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, $i92, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label457:
        goto label459;

     label458:
        $r123 := @caughtexception;

     label459:
        $i93 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i94 = neg $i93;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, $i94, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label460:
        goto label462;

     label461:
        $r59 := @caughtexception;

     label462:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, 2147483647, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label463:
        goto label465;

     label464:
        $r14 := @caughtexception;

     label465:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(java.io.DataInput,int,int)>($r6, -2147483648, 17);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label466:
        goto label468;

     label467:
        $r154 := @caughtexception;

     label468:
        return;

        catch java.lang.IllegalStateException from label001 to label002 with label003;
        catch java.lang.NullPointerException from label001 to label002 with label003;
        catch java.lang.IllegalStateException from label004 to label005 with label006;
        catch java.lang.NullPointerException from label004 to label005 with label006;
        catch java.lang.IndexOutOfBoundsException from label004 to label005 with label006;
        catch java.lang.IllegalStateException from label007 to label008 with label009;
        catch java.lang.NullPointerException from label007 to label008 with label009;
        catch java.lang.IllegalStateException from label010 to label011 with label012;
        catch java.lang.NullPointerException from label010 to label011 with label012;
        catch java.lang.IllegalStateException from label013 to label014 with label015;
        catch java.lang.NullPointerException from label013 to label014 with label015;
        catch java.lang.IndexOutOfBoundsException from label013 to label014 with label015;
        catch java.lang.IllegalStateException from label016 to label017 with label018;
        catch java.lang.NullPointerException from label016 to label017 with label018;
        catch java.lang.IllegalStateException from label019 to label020 with label021;
        catch java.lang.NullPointerException from label019 to label020 with label021;
        catch java.lang.IllegalStateException from label022 to label023 with label024;
        catch java.lang.NullPointerException from label022 to label023 with label024;
        catch java.lang.IllegalStateException from label025 to label026 with label027;
        catch java.lang.NullPointerException from label025 to label026 with label027;
        catch java.lang.IndexOutOfBoundsException from label025 to label026 with label027;
        catch java.lang.IllegalStateException from label028 to label029 with label030;
        catch java.lang.NullPointerException from label028 to label029 with label030;
        catch java.lang.IllegalStateException from label031 to label032 with label033;
        catch java.lang.NullPointerException from label031 to label032 with label033;
        catch java.lang.IllegalStateException from label034 to label035 with label036;
        catch java.lang.NullPointerException from label034 to label035 with label036;
        catch java.lang.IndexOutOfBoundsException from label034 to label035 with label036;
        catch java.lang.IllegalStateException from label037 to label038 with label039;
        catch java.lang.NullPointerException from label037 to label038 with label039;
        catch java.lang.IllegalStateException from label040 to label041 with label042;
        catch java.lang.NullPointerException from label040 to label041 with label042;
        catch java.lang.IllegalStateException from label043 to label044 with label045;
        catch java.lang.NullPointerException from label043 to label044 with label045;
        catch java.lang.IllegalStateException from label046 to label047 with label048;
        catch java.lang.NullPointerException from label046 to label047 with label048;
        catch java.lang.IndexOutOfBoundsException from label046 to label047 with label048;
        catch java.lang.IllegalStateException from label049 to label050 with label051;
        catch java.lang.NullPointerException from label049 to label050 with label051;
        catch java.lang.IllegalStateException from label052 to label053 with label054;
        catch java.lang.NullPointerException from label052 to label053 with label054;
        catch java.lang.IllegalStateException from label055 to label056 with label057;
        catch java.lang.NullPointerException from label055 to label056 with label057;
        catch java.lang.IndexOutOfBoundsException from label055 to label056 with label057;
        catch java.lang.IllegalStateException from label058 to label059 with label060;
        catch java.lang.NullPointerException from label058 to label059 with label060;
        catch java.lang.IllegalStateException from label061 to label062 with label063;
        catch java.lang.NullPointerException from label061 to label062 with label063;
        catch java.lang.IllegalStateException from label064 to label065 with label066;
        catch java.lang.NullPointerException from label064 to label065 with label066;
        catch java.lang.IllegalStateException from label067 to label068 with label069;
        catch java.lang.NullPointerException from label067 to label068 with label069;
        catch java.lang.IndexOutOfBoundsException from label067 to label068 with label069;
        catch java.lang.IllegalStateException from label070 to label071 with label072;
        catch java.lang.NullPointerException from label070 to label071 with label072;
        catch java.lang.IllegalStateException from label073 to label074 with label075;
        catch java.lang.NullPointerException from label073 to label074 with label075;
        catch java.lang.IllegalStateException from label076 to label077 with label078;
        catch java.lang.NullPointerException from label076 to label077 with label078;
        catch java.lang.IndexOutOfBoundsException from label076 to label077 with label078;
        catch java.lang.IllegalStateException from label079 to label080 with label081;
        catch java.lang.NullPointerException from label079 to label080 with label081;
        catch java.lang.IllegalStateException from label082 to label083 with label084;
        catch java.lang.NullPointerException from label082 to label083 with label084;
        catch java.lang.IllegalStateException from label085 to label086 with label087;
        catch java.lang.IllegalStateException from label088 to label089 with label090;
        catch java.lang.IndexOutOfBoundsException from label088 to label089 with label090;
        catch java.lang.IllegalStateException from label091 to label092 with label093;
        catch java.lang.IllegalStateException from label094 to label095 with label096;
        catch java.lang.IllegalStateException from label097 to label098 with label099;
        catch java.lang.IndexOutOfBoundsException from label097 to label098 with label099;
        catch java.lang.IllegalStateException from label100 to label101 with label102;
        catch java.lang.IllegalStateException from label103 to label104 with label105;
        catch java.lang.IllegalStateException from label106 to label107 with label108;
        catch java.lang.IllegalStateException from label109 to label110 with label111;
        catch java.lang.IndexOutOfBoundsException from label109 to label110 with label111;
        catch java.lang.IllegalStateException from label112 to label113 with label114;
        catch java.lang.IllegalStateException from label115 to label116 with label117;
        catch java.lang.IllegalStateException from label118 to label119 with label120;
        catch java.lang.IndexOutOfBoundsException from label118 to label119 with label120;
        catch java.lang.IllegalStateException from label121 to label122 with label123;
        catch java.lang.IllegalStateException from label124 to label125 with label126;
        catch java.lang.IllegalStateException from label127 to label128 with label129;
        catch java.lang.IllegalStateException from label130 to label131 with label132;
        catch java.lang.IndexOutOfBoundsException from label130 to label131 with label132;
        catch java.lang.IllegalStateException from label133 to label134 with label135;
        catch java.lang.IllegalStateException from label136 to label137 with label138;
        catch java.lang.IllegalStateException from label139 to label140 with label141;
        catch java.lang.IndexOutOfBoundsException from label139 to label140 with label141;
        catch java.lang.IllegalStateException from label142 to label143 with label144;
        catch java.lang.IllegalStateException from label145 to label146 with label147;
        catch java.lang.IllegalStateException from label148 to label149 with label150;
        catch java.lang.IllegalStateException from label151 to label152 with label153;
        catch java.lang.IndexOutOfBoundsException from label151 to label152 with label153;
        catch java.lang.IllegalStateException from label154 to label155 with label156;
        catch java.lang.IllegalStateException from label157 to label158 with label159;
        catch java.lang.IllegalStateException from label160 to label161 with label162;
        catch java.lang.IndexOutOfBoundsException from label160 to label161 with label162;
        catch java.lang.IllegalStateException from label163 to label164 with label165;
        catch java.lang.IllegalStateException from label166 to label167 with label168;
        catch java.lang.IllegalStateException from label169 to label170 with label171;
        catch java.lang.IllegalStateException from label172 to label173 with label174;
        catch java.lang.IndexOutOfBoundsException from label172 to label173 with label174;
        catch java.lang.IllegalStateException from label175 to label176 with label177;
        catch java.lang.IllegalStateException from label178 to label179 with label180;
        catch java.lang.IllegalStateException from label181 to label182 with label183;
        catch java.lang.IndexOutOfBoundsException from label181 to label182 with label183;
        catch java.lang.IllegalStateException from label184 to label185 with label186;
        catch java.lang.IllegalStateException from label187 to label188 with label189;
        catch java.lang.IllegalStateException from label190 to label191 with label192;
        catch java.lang.IllegalStateException from label193 to label194 with label195;
        catch java.lang.IndexOutOfBoundsException from label193 to label194 with label195;
        catch java.lang.IllegalStateException from label196 to label197 with label198;
        catch java.lang.IllegalStateException from label199 to label200 with label201;
        catch java.lang.IllegalStateException from label202 to label203 with label204;
        catch java.lang.IndexOutOfBoundsException from label202 to label203 with label204;
        catch java.lang.IllegalStateException from label205 to label206 with label207;
        catch java.lang.IllegalStateException from label208 to label209 with label210;
        catch java.lang.IllegalStateException from label211 to label212 with label213;
        catch java.lang.IllegalStateException from label214 to label215 with label216;
        catch java.lang.IndexOutOfBoundsException from label214 to label215 with label216;
        catch java.lang.IllegalStateException from label217 to label218 with label219;
        catch java.lang.IllegalStateException from label220 to label221 with label222;
        catch java.lang.IllegalStateException from label223 to label224 with label225;
        catch java.lang.IndexOutOfBoundsException from label223 to label224 with label225;
        catch java.lang.IllegalStateException from label226 to label227 with label228;
        catch java.lang.IllegalStateException from label229 to label230 with label231;
        catch java.lang.IllegalStateException from label232 to label233 with label234;
        catch java.lang.IllegalStateException from label235 to label236 with label237;
        catch java.lang.IndexOutOfBoundsException from label235 to label236 with label237;
        catch java.lang.IllegalStateException from label238 to label239 with label240;
        catch java.lang.IllegalStateException from label241 to label242 with label243;
        catch java.lang.IllegalStateException from label244 to label245 with label246;
        catch java.lang.IndexOutOfBoundsException from label244 to label245 with label246;
        catch java.lang.IllegalStateException from label247 to label248 with label249;
        catch java.lang.IllegalStateException from label250 to label251 with label252;
        catch java.lang.IllegalStateException from label253 to label254 with label255;
        catch java.lang.IllegalStateException from label256 to label257 with label258;
        catch java.lang.IndexOutOfBoundsException from label256 to label257 with label258;
        catch java.lang.IllegalStateException from label259 to label260 with label261;
        catch java.lang.IllegalStateException from label262 to label263 with label264;
        catch java.lang.IllegalStateException from label265 to label266 with label267;
        catch java.lang.IndexOutOfBoundsException from label265 to label266 with label267;
        catch java.lang.IllegalStateException from label268 to label269 with label270;
        catch java.lang.IllegalStateException from label271 to label272 with label273;
        catch java.lang.IllegalStateException from label274 to label275 with label276;
        catch java.lang.IllegalStateException from label277 to label278 with label279;
        catch java.lang.IndexOutOfBoundsException from label277 to label278 with label279;
        catch java.lang.IllegalStateException from label280 to label281 with label282;
        catch java.lang.IllegalStateException from label283 to label284 with label285;
        catch java.lang.IllegalStateException from label286 to label287 with label288;
        catch java.lang.IndexOutOfBoundsException from label286 to label287 with label288;
        catch java.lang.IllegalStateException from label289 to label290 with label291;
        catch java.lang.IllegalStateException from label292 to label293 with label294;
        catch java.lang.IllegalStateException from label295 to label296 with label297;
        catch java.lang.IllegalStateException from label298 to label299 with label300;
        catch java.lang.IndexOutOfBoundsException from label298 to label299 with label300;
        catch java.lang.IllegalStateException from label301 to label302 with label303;
        catch java.lang.IllegalStateException from label304 to label305 with label306;
        catch java.lang.IllegalStateException from label307 to label308 with label309;
        catch java.lang.IndexOutOfBoundsException from label307 to label308 with label309;
        catch java.lang.IllegalStateException from label310 to label311 with label312;
        catch java.lang.IllegalStateException from label313 to label314 with label315;
        catch java.lang.IllegalStateException from label316 to label317 with label318;
        catch java.lang.IllegalStateException from label319 to label320 with label321;
        catch java.lang.IndexOutOfBoundsException from label319 to label320 with label321;
        catch java.lang.IllegalStateException from label322 to label323 with label324;
        catch java.lang.IllegalStateException from label325 to label326 with label327;
        catch java.lang.IllegalStateException from label328 to label329 with label330;
        catch java.lang.IndexOutOfBoundsException from label328 to label329 with label330;
        catch java.lang.IllegalStateException from label331 to label332 with label333;
        catch java.lang.IllegalStateException from label334 to label335 with label336;
        catch java.lang.IllegalStateException from label338 to label339 with label340;
        catch java.lang.NullPointerException from label338 to label339 with label340;
        catch java.lang.IllegalStateException from label341 to label342 with label343;
        catch java.lang.NullPointerException from label341 to label342 with label343;
        catch java.lang.IndexOutOfBoundsException from label341 to label342 with label343;
        catch java.lang.IllegalStateException from label344 to label345 with label346;
        catch java.lang.NullPointerException from label344 to label345 with label346;
        catch java.lang.IllegalStateException from label347 to label348 with label349;
        catch java.lang.NullPointerException from label347 to label348 with label349;
        catch java.lang.IllegalStateException from label350 to label351 with label352;
        catch java.lang.NullPointerException from label350 to label351 with label352;
        catch java.lang.IndexOutOfBoundsException from label350 to label351 with label352;
        catch java.lang.IllegalStateException from label353 to label354 with label355;
        catch java.lang.NullPointerException from label353 to label354 with label355;
        catch java.lang.IllegalStateException from label356 to label357 with label358;
        catch java.lang.NullPointerException from label356 to label357 with label358;
        catch java.lang.IllegalStateException from label359 to label360 with label361;
        catch java.lang.NullPointerException from label359 to label360 with label361;
        catch java.lang.IllegalStateException from label362 to label363 with label364;
        catch java.lang.NullPointerException from label362 to label363 with label364;
        catch java.lang.IndexOutOfBoundsException from label362 to label363 with label364;
        catch java.lang.IllegalStateException from label365 to label366 with label367;
        catch java.lang.NullPointerException from label365 to label366 with label367;
        catch java.lang.IllegalStateException from label368 to label369 with label370;
        catch java.lang.NullPointerException from label368 to label369 with label370;
        catch java.lang.IllegalStateException from label371 to label372 with label373;
        catch java.lang.NullPointerException from label371 to label372 with label373;
        catch java.lang.IndexOutOfBoundsException from label371 to label372 with label373;
        catch java.lang.IllegalStateException from label374 to label375 with label376;
        catch java.lang.NullPointerException from label374 to label375 with label376;
        catch java.lang.IllegalStateException from label377 to label378 with label379;
        catch java.lang.NullPointerException from label377 to label378 with label379;
        catch java.lang.IllegalStateException from label382 to label383 with label384;
        catch java.lang.NullPointerException from label382 to label383 with label384;
        catch java.lang.IllegalStateException from label385 to label386 with label387;
        catch java.lang.NullPointerException from label385 to label386 with label387;
        catch java.lang.IndexOutOfBoundsException from label385 to label386 with label387;
        catch java.lang.IllegalStateException from label388 to label389 with label390;
        catch java.lang.NullPointerException from label388 to label389 with label390;
        catch java.lang.IllegalStateException from label391 to label392 with label393;
        catch java.lang.NullPointerException from label391 to label392 with label393;
        catch java.lang.IllegalStateException from label394 to label395 with label396;
        catch java.lang.NullPointerException from label394 to label395 with label396;
        catch java.lang.IndexOutOfBoundsException from label394 to label395 with label396;
        catch java.lang.IllegalStateException from label397 to label398 with label399;
        catch java.lang.NullPointerException from label397 to label398 with label399;
        catch java.lang.IndexOutOfBoundsException from label397 to label398 with label399;
        catch java.lang.IllegalStateException from label400 to label401 with label402;
        catch java.lang.NullPointerException from label400 to label401 with label402;
        catch java.lang.IndexOutOfBoundsException from label400 to label401 with label402;
        catch java.lang.IllegalStateException from label403 to label404 with label405;
        catch java.lang.NullPointerException from label403 to label404 with label405;
        catch java.lang.IndexOutOfBoundsException from label403 to label404 with label405;
        catch java.lang.IllegalStateException from label406 to label407 with label408;
        catch java.lang.NullPointerException from label406 to label407 with label408;
        catch java.lang.IndexOutOfBoundsException from label406 to label407 with label408;
        catch java.lang.IllegalStateException from label409 to label410 with label411;
        catch java.lang.NullPointerException from label409 to label410 with label411;
        catch java.lang.IllegalStateException from label412 to label413 with label414;
        catch java.lang.NullPointerException from label412 to label413 with label414;
        catch java.lang.IllegalStateException from label415 to label416 with label417;
        catch java.lang.NullPointerException from label415 to label416 with label417;
        catch java.lang.IndexOutOfBoundsException from label415 to label416 with label417;
        catch java.lang.IllegalStateException from label418 to label419 with label420;
        catch java.lang.NullPointerException from label418 to label419 with label420;
        catch java.lang.IndexOutOfBoundsException from label418 to label419 with label420;
        catch java.lang.IllegalStateException from label421 to label422 with label423;
        catch java.lang.NullPointerException from label421 to label422 with label423;
        catch java.lang.IndexOutOfBoundsException from label421 to label422 with label423;
        catch java.lang.IllegalStateException from label426 to label427 with label428;
        catch java.lang.NullPointerException from label426 to label427 with label428;
        catch java.lang.IllegalStateException from label429 to label430 with label431;
        catch java.lang.NullPointerException from label429 to label430 with label431;
        catch java.lang.IndexOutOfBoundsException from label429 to label430 with label431;
        catch java.lang.IllegalStateException from label432 to label433 with label434;
        catch java.lang.NullPointerException from label432 to label433 with label434;
        catch java.lang.IllegalStateException from label435 to label436 with label437;
        catch java.lang.NullPointerException from label435 to label436 with label437;
        catch java.lang.IllegalStateException from label438 to label439 with label440;
        catch java.lang.NullPointerException from label438 to label439 with label440;
        catch java.lang.IndexOutOfBoundsException from label438 to label439 with label440;
        catch java.lang.IllegalStateException from label441 to label442 with label443;
        catch java.lang.NullPointerException from label441 to label442 with label443;
        catch java.lang.IndexOutOfBoundsException from label441 to label442 with label443;
        catch java.lang.IllegalStateException from label444 to label445 with label446;
        catch java.lang.NullPointerException from label444 to label445 with label446;
        catch java.lang.IndexOutOfBoundsException from label444 to label445 with label446;
        catch java.lang.IllegalStateException from label447 to label448 with label449;
        catch java.lang.NullPointerException from label447 to label448 with label449;
        catch java.lang.IndexOutOfBoundsException from label447 to label448 with label449;
        catch java.lang.IllegalStateException from label450 to label451 with label452;
        catch java.lang.NullPointerException from label450 to label451 with label452;
        catch java.lang.IndexOutOfBoundsException from label450 to label451 with label452;
        catch java.lang.IllegalStateException from label453 to label454 with label455;
        catch java.lang.NullPointerException from label453 to label454 with label455;
        catch java.lang.IllegalStateException from label456 to label457 with label458;
        catch java.lang.NullPointerException from label456 to label457 with label458;
        catch java.lang.IllegalStateException from label459 to label460 with label461;
        catch java.lang.NullPointerException from label459 to label460 with label461;
        catch java.lang.IndexOutOfBoundsException from label459 to label460 with label461;
        catch java.lang.IllegalStateException from label462 to label463 with label464;
        catch java.lang.NullPointerException from label462 to label463 with label464;
        catch java.lang.IndexOutOfBoundsException from label462 to label463 with label464;
        catch java.lang.IllegalStateException from label465 to label466 with label467;
        catch java.lang.NullPointerException from label465 to label466 with label467;
        catch java.lang.IndexOutOfBoundsException from label465 to label466 with label467;
    }

    private void testCompare(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment)
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, i11, i12, i13;
        int[] $r9, $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        $r9 = newarray (int)[7];

        $r9[0] = 0;

        $r9[1] = 1;

        $r9[2] = -1;

        $i6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r9[3] = $i6;

        $i7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i8 = neg $i7;

        $r9[4] = $i8;

        $r9[5] = 2147483647;

        $r9[6] = -2147483648;

        $r10 = newarray (int)[3];

        $r10[0] = 1;

        $i9 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r10[1] = $i9;

        $r10[2] = 2147483647;

        i0 = lengthof $r9;

        i11 = 0;

     label01:
        if i11 >= i0 goto label10;

        i1 = $r9[i11];

        i2 = lengthof $r9;

        i12 = 0;

     label02:
        if i12 >= i2 goto label09;

        i3 = $r9[i12];

        i4 = lengthof $r10;

        i13 = 0;

     label03:
        if i13 >= i4 goto label08;

        i5 = $r10[i13];

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int compare(org.apache.flink.core.memory.MemorySegment,int,int,int)>(r2, i1, i3, i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

     label07:
        i13 = i13 + 1;

        goto label03;

     label08:
        i12 = i12 + 1;

        goto label02;

     label09:
        i11 = i11 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label04 to label05 with label06;
    }

    public void testCopy(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment)
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        int[] $r9, $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        $r9 = newarray (int)[7];

        $r9[0] = 0;

        $r9[1] = 1;

        $r9[2] = -1;

        $i6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r9[3] = $i6;

        $i7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i8 = neg $i7;

        $r9[4] = $i8;

        $r9[5] = 2147483647;

        $r9[6] = -2147483648;

        $r10 = newarray (int)[7];

        $r10[0] = 0;

        $r10[1] = 1;

        $r10[2] = -1;

        $i9 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r10[3] = $i9;

        $i10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i11 = neg $i10;

        $r10[4] = $i11;

        $r10[5] = 2147483647;

        $r10[6] = -2147483648;

        i0 = lengthof $r9;

        i12 = 0;

     label01:
        if i12 >= i0 goto label10;

        i1 = $r9[i12];

        i2 = lengthof $r9;

        i13 = 0;

     label02:
        if i13 >= i2 goto label09;

        i3 = $r9[i13];

        i4 = lengthof $r10;

        i14 = 0;

     label03:
        if i14 >= i4 goto label08;

        i5 = $r10[i14];

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void copyTo(int,org.apache.flink.core.memory.MemorySegment,int,int)>(i1, r2, i3, i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

     label07:
        i14 = i14 + 1;

        goto label03;

     label08:
        i13 = i13 + 1;

        goto label02;

     label09:
        i12 = i12 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label04 to label05 with label06;
    }

    public void testSwap(org.apache.flink.core.memory.MemorySegment, org.apache.flink.core.memory.MemorySegment)
    {
        org.apache.flink.core.memory.OperationsOnFreedSegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1, r2;
        byte[] r5;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15;
        int[] $r10, $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: org.apache.flink.core.memory.OperationsOnFreedSegmentTest;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        $r10 = newarray (int)[7];

        $r10[0] = 0;

        $r10[1] = 1;

        $r10[2] = -1;

        $i6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r10[3] = $i6;

        $i7 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i8 = neg $i7;

        $r10[4] = $i8;

        $r10[5] = 2147483647;

        $r10[6] = -2147483648;

        $r11 = newarray (int)[7];

        $r11[0] = 0;

        $r11[1] = 1;

        $r11[2] = -1;

        $i9 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $r11[3] = $i9;

        $i10 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $i11 = neg $i10;

        $r11[4] = $i11;

        $r11[5] = 2147483647;

        $r11[6] = -2147483648;

        $i12 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        r5 = newarray (byte)[$i12];

        i0 = lengthof $r10;

        i13 = 0;

     label01:
        if i13 >= i0 goto label10;

        i1 = $r10[i13];

        i2 = lengthof $r10;

        i14 = 0;

     label02:
        if i14 >= i2 goto label09;

        i3 = $r10[i14];

        i4 = lengthof $r11;

        i15 = 0;

     label03:
        if i15 >= i4 goto label08;

        i5 = $r11[i15];

     label04:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void swapBytes(byte[],org.apache.flink.core.memory.MemorySegment,int,int,int)>(r5, r2, i1, i3, i5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should fail with an exception");

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        i15 = i15 + 1;

        goto label03;

     label08:
        i14 = i14 + 1;

        goto label02;

     label09:
        i13 = i13 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label06;
        catch java.lang.NullPointerException from label04 to label05 with label06;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2;
        int $i0;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = $d0 * 10000.0;

        $d2 = $d1 + 1000.0;

        $i0 = (int) $d2;

        <org.apache.flink.core.memory.OperationsOnFreedSegmentTest: int PAGE_SIZE> = $i0;

        return;
    }
}
