public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{
    private static final org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING;
    private java.lang.ClassLoader originalClassLoader;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    public void setupClassLoader()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;
        java.lang.Thread $r1, $r3;
        java.lang.ClassLoader $r2, $r5;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: java.lang.ClassLoader originalClassLoader> = $r2;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING>;

        $r5 = virtualinvoke $r4.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r3.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r5);

        return;
    }

    public void restoreOriginalClassLoader()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;
        java.lang.Thread $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: java.lang.ClassLoader originalClassLoader>;

        virtualinvoke $r1.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r2);

        return;
    }

    public void guardTestAssumptions()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r2;
        java.lang.Object $r3;
        java.io.Serializable $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.lang.ClassNotFoundException $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

     label1:
        $r2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING>;

        $r3 = virtualinvoke $r2.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.Object getObject()>();

        $r4 = (java.io.Serializable) $r3;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("This test\'s assumptions are broken");

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r1;
        org.apache.flink.api.common.ExecutionConfig $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/Object;", $r2);

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        return class "Ljava/lang/Object;";
    }

    protected java.lang.Object[] getTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r3, $r6;
        java.lang.Object $r4, $r7;
        org.apache.flink.api.java.tuple.Tuple1 $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(7);

        $r1[0] = $r2;

        $r3 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING>;

        $r4 = virtualinvoke $r3.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.Object getObject()>();

        $r1[1] = $r4;

        $r5 = new org.apache.flink.api.java.tuple.Tuple1;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING>;

        $r7 = virtualinvoke $r6.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.Object getObject()>();

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple1: void <init>(java.lang.Object)>($r7);

        $r1[2] = $r5;

        return $r1;
    }

    public void testInstantiate()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createSerializableObjectFromNewClassLoader()>();

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader OUTSIDE_CLASS_LOADING> = $r0;

        return;
    }
}
