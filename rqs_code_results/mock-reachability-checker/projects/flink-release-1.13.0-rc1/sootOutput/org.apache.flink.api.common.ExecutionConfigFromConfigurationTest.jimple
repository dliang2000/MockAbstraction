public class org.apache.flink.api.common.ExecutionConfigFromConfigurationTest extends java.lang.Object
{
    public org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec;

    public void <init>()
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest r0;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection specs()
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec[] $r0;
        java.lang.Boolean $r1, $r10, $r12, $r21, $r41, $r50, $r52, $r61, $r63, $r72, $r92, $r101, $r103, $r110;
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec $r2, $r3, $r7, $r9, $r11, $r13, $r14, $r18, $r20, $r22, $r24, $r25, $r27, $r29, $r31, $r33, $r34, $r36, $r38, $r40, $r42, $r43, $r47, $r49, $r51, $r53, $r54, $r58, $r60, $r62, $r64, $r65, $r69, $r71, $r73, $r75, $r76, $r78, $r80, $r82, $r84, $r85, $r87, $r89, $r91, $r93, $r94, $r98, $r100, $r102, $r104, $r105, $r107, $r109, $r111, $r113, $r114, $r116, $r118, $r120, $r122, $r123, $r125, $r127, $r129, $r131, $r132, $r134, $r136, $r138, $r140, $r141, $r143, $r145, $r147;
        java.util.function.Consumer $r4, $r5, $r15, $r16, $r44, $r45, $r55, $r56, $r66, $r67, $r95, $r96;
        java.util.function.BiConsumer $r6, $r17, $r26, $r35, $r46, $r57, $r68, $r77, $r86, $r97, $r106, $r115, $r124, $r133, $r142;
        java.util.function.Function $r8, $r19, $r28, $r37, $r48, $r59, $r70, $r79, $r88, $r99, $r108, $r117, $r126, $r135, $r144;
        java.lang.Long $r23, $r30, $r121, $r128, $r130, $r137, $r139, $r146;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r32, $r39;
        org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters $r74, $r81;
        java.lang.Integer $r83, $r90, $r112, $r119;
        java.util.List $r148;

        $r0 = newarray (org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec)[15];

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.auto-generate-uids", "false");

        $r4 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$enableAutoGeneratedUIDs__239: java.util.function.Consumer bootstrap$()>();

        $r5 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableAutoGeneratedUIDs__240: java.util.function.Consumer bootstrap$()>();

        $r6 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r4, $r5);

        $r7 = virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r6);

        $r8 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$hasAutoGeneratedUIDsEnabled__241: java.util.function.Function bootstrap$()>();

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r8);

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r11 = virtualinvoke $r9.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r10);

        $r0[0] = $r11;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r13 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.auto-type-registration", "false");

        $r15 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$lambda_specs_0__242: java.util.function.Consumer bootstrap$()>();

        $r16 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableAutoTypeRegistration__243: java.util.function.Consumer bootstrap$()>();

        $r17 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r15, $r16);

        $r18 = virtualinvoke $r14.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r17);

        $r19 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$lambda_specs_1__244: java.util.function.Function bootstrap$()>();

        $r20 = virtualinvoke $r18.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r19);

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r22 = virtualinvoke $r20.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r21);

        $r0[1] = $r22;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(120000L);

        $r24 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r24.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.auto-watermark-interval", "2 min");

        $r26 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setAutoWatermarkInterval__245: java.util.function.BiConsumer bootstrap$()>();

        $r27 = virtualinvoke $r25.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r26);

        $r28 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getAutoWatermarkInterval__246: java.util.function.Function bootstrap$()>();

        $r29 = virtualinvoke $r27.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r28);

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(123L);

        $r31 = virtualinvoke $r29.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r30);

        $r0[2] = $r31;

        $r32 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel TOP_LEVEL>;

        $r33 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.closure-cleaner-level", "TOP_LEVEL");

        $r35 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setClosureCleanerLevel__247: java.util.function.BiConsumer bootstrap$()>();

        $r36 = virtualinvoke $r34.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r35);

        $r37 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getClosureCleanerLevel__248: java.util.function.Function bootstrap$()>();

        $r38 = virtualinvoke $r36.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r37);

        $r39 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel NONE>;

        $r40 = virtualinvoke $r38.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r39);

        $r0[3] = $r40;

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r42 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.force-avro", "true");

        $r44 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$enableForceAvro__249: java.util.function.Consumer bootstrap$()>();

        $r45 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableForceAvro__250: java.util.function.Consumer bootstrap$()>();

        $r46 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r44, $r45);

        $r47 = virtualinvoke $r43.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r46);

        $r48 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$isForceAvroEnabled__251: java.util.function.Function bootstrap$()>();

        $r49 = virtualinvoke $r47.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r48);

        $r50 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r51 = virtualinvoke $r49.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r50);

        $r0[4] = $r51;

        $r52 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r53 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r52);

        $r54 = virtualinvoke $r53.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.force-kryo", "false");

        $r55 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$enableForceKryo__252: java.util.function.Consumer bootstrap$()>();

        $r56 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableForceKryo__253: java.util.function.Consumer bootstrap$()>();

        $r57 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r55, $r56);

        $r58 = virtualinvoke $r54.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r57);

        $r59 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$isForceKryoEnabled__254: java.util.function.Function bootstrap$()>();

        $r60 = virtualinvoke $r58.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r59);

        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r62 = virtualinvoke $r60.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r61);

        $r0[5] = $r62;

        $r63 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r64 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r63);

        $r65 = virtualinvoke $r64.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.generic-types", "false");

        $r66 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$enableGenericTypes__255: java.util.function.Consumer bootstrap$()>();

        $r67 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableGenericTypes__256: java.util.function.Consumer bootstrap$()>();

        $r68 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r66, $r67);

        $r69 = virtualinvoke $r65.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r68);

        $r70 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$lambda_specs_2__257: java.util.function.Function bootstrap$()>();

        $r71 = virtualinvoke $r69.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r70);

        $r72 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r73 = virtualinvoke $r71.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r72);

        $r0[6] = $r73;

        $r74 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getTestGlobalJobParameters()>();

        $r75 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r74);

        $r76 = virtualinvoke $r75.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.global-job-parameters", "key1:value1,key2:value2");

        $r77 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setGlobalJobParameters__258: java.util.function.BiConsumer bootstrap$()>();

        $r78 = virtualinvoke $r76.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r77);

        $r79 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getGlobalJobParameters__259: java.util.function.Function bootstrap$()>();

        $r80 = virtualinvoke $r78.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r79);

        $r81 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getOtherTestGlobalJobParameters()>();

        $r82 = virtualinvoke $r80.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r81);

        $r0[7] = $r82;

        $r83 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        $r84 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r83);

        $r85 = virtualinvoke $r84.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.max-parallelism", "64");

        $r86 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setMaxParallelism__260: java.util.function.BiConsumer bootstrap$()>();

        $r87 = virtualinvoke $r85.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r86);

        $r88 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getMaxParallelism__261: java.util.function.Function bootstrap$()>();

        $r89 = virtualinvoke $r87.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r88);

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13);

        $r91 = virtualinvoke $r89.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r90);

        $r0[8] = $r91;

        $r92 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r93 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r92);

        $r94 = virtualinvoke $r93.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("pipeline.object-reuse", "true");

        $r95 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$enableObjectReuse__262: java.util.function.Consumer bootstrap$()>();

        $r96 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$disableObjectReuse__263: java.util.function.Consumer bootstrap$()>();

        $r97 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: java.util.function.BiConsumer booleanSetter(java.util.function.Consumer,java.util.function.Consumer)>($r95, $r96);

        $r98 = virtualinvoke $r94.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r97);

        $r99 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$isObjectReuseEnabled__264: java.util.function.Function bootstrap$()>();

        $r100 = virtualinvoke $r98.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r99);

        $r101 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r102 = virtualinvoke $r100.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r101);

        $r0[9] = $r102;

        $r103 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r104 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r103);

        $r105 = virtualinvoke $r104.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("execution.checkpointing.snapshot-compression", "true");

        $r106 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setUseSnapshotCompression__265: java.util.function.BiConsumer bootstrap$()>();

        $r107 = virtualinvoke $r105.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r106);

        $r108 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$isUseSnapshotCompression__266: java.util.function.Function bootstrap$()>();

        $r109 = virtualinvoke $r107.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r108);

        $r110 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r111 = virtualinvoke $r109.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r110);

        $r0[10] = $r111;

        $r112 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12);

        $r113 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r112);

        $r114 = virtualinvoke $r113.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("parallelism.default", "12");

        $r115 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setParallelism__267: java.util.function.BiConsumer bootstrap$()>();

        $r116 = virtualinvoke $r114.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r115);

        $r117 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getParallelism__268: java.util.function.Function bootstrap$()>();

        $r118 = virtualinvoke $r116.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r117);

        $r119 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(21);

        $r120 = virtualinvoke $r118.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r119);

        $r0[11] = $r120;

        $r121 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12000L);

        $r122 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r121);

        $r123 = virtualinvoke $r122.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("task.cancellation.interval", "12000");

        $r124 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setTaskCancellationInterval__269: java.util.function.BiConsumer bootstrap$()>();

        $r125 = virtualinvoke $r123.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r124);

        $r126 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getTaskCancellationInterval__270: java.util.function.Function bootstrap$()>();

        $r127 = virtualinvoke $r125.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r126);

        $r128 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(21L);

        $r129 = virtualinvoke $r127.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r128);

        $r0[12] = $r129;

        $r130 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12100L);

        $r131 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r130);

        $r132 = virtualinvoke $r131.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("task.cancellation.timeout", "12100");

        $r133 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setTaskCancellationTimeout__271: java.util.function.BiConsumer bootstrap$()>();

        $r134 = virtualinvoke $r132.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r133);

        $r135 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getTaskCancellationTimeout__272: java.util.function.Function bootstrap$()>();

        $r136 = virtualinvoke $r134.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r135);

        $r137 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(21L);

        $r138 = virtualinvoke $r136.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r137);

        $r0[13] = $r138;

        $r139 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12300L);

        $r140 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec testValue(java.lang.Object)>($r139);

        $r141 = virtualinvoke $r140.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec whenSetFromFile(java.lang.String,java.lang.String)>("metrics.latency.interval", "12300");

        $r142 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$setLatencyTrackingInterval__273: java.util.function.BiConsumer bootstrap$()>();

        $r143 = virtualinvoke $r141.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec viaSetter(java.util.function.BiConsumer)>($r142);

        $r144 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$getLatencyTrackingInterval__274: java.util.function.Function bootstrap$()>();

        $r145 = virtualinvoke $r143.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec getterVia(java.util.function.Function)>($r144);

        $r146 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(21L);

        $r147 = virtualinvoke $r145.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec nonDefaultValue(java.lang.Object)>($r146);

        $r0[14] = $r147;

        $r148 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r148;
    }

    public void testLoadingFromConfiguration()
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest r0;
        org.apache.flink.api.common.ExecutionConfig $r4, $r5;
        org.apache.flink.configuration.Configuration $r6;
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec $r7, $r9, $r13, $r14;
        java.lang.String $r8, $r10;
        java.lang.Class $r11;
        java.lang.ClassLoader $r12;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        $r8 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String access$000(org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec)>($r7);

        $r9 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        $r10 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: java.lang.String access$100(org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec)>($r9);

        virtualinvoke $r6.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r8, $r10);

        $r11 = class "Lorg/apache/flink/api/common/ExecutionConfigTest;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r6, $r12);

        $r13 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        virtualinvoke $r13.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: void setValue(org.apache.flink.api.common.ExecutionConfig)>($r4);

        $r14 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        virtualinvoke $r14.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: void assertEqual(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.ExecutionConfig)>($r5, $r4);

        return;
    }

    public void testNotOverridingIfNotSet()
    {
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest r0;
        org.apache.flink.api.common.ExecutionConfig $r3;
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec $r4, $r8;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Class $r6;
        java.lang.ClassLoader $r7;

        r0 := @this: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: void setNonDefaultValue(org.apache.flink.api.common.ExecutionConfig)>($r3);

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = class "Lorg/apache/flink/api/common/ExecutionConfigTest;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void configure(org.apache.flink.configuration.ReadableConfig,java.lang.ClassLoader)>($r5, $r7);

        $r8 = r0.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec spec>;

        virtualinvoke $r8.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$TestSpec: void assertEqualNonDefault(org.apache.flink.api.common.ExecutionConfig)>($r3);

        return;
    }

    private static org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getTestGlobalJobParameters()
    {
        org.apache.flink.configuration.Configuration $r1;

        $r1 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r1.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("key1", "value1");

        virtualinvoke $r1.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("key2", "value2");

        return $r1;
    }

    private static org.apache.flink.api.common.ExecutionConfig$GlobalJobParameters getOtherTestGlobalJobParameters()
    {
        org.apache.flink.configuration.Configuration $r1;

        $r1 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r1.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r1.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("key1", "value1");

        virtualinvoke $r1.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("key2", "value2");

        virtualinvoke $r1.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>("key3", "value3");

        return $r1;
    }

    private static java.util.function.BiConsumer booleanSetter(java.util.function.Consumer, java.util.function.Consumer)
    {
        java.util.function.Consumer r0, r1;
        java.util.function.BiConsumer $r2;

        r0 := @parameter0: java.util.function.Consumer;

        r1 := @parameter1: java.util.function.Consumer;

        $r2 = staticinvoke <org.apache.flink.api.common.ExecutionConfigFromConfigurationTest$lambda_booleanSetter_3__275: java.util.function.BiConsumer bootstrap$(java.util.function.Consumer,java.util.function.Consumer)>(r0, r1);

        return $r2;
    }

    public static void lambda$booleanSetter$3(java.util.function.Consumer, java.util.function.Consumer, org.apache.flink.api.common.ExecutionConfig, java.lang.Boolean)
    {
        java.util.function.Consumer r0, r1;
        org.apache.flink.api.common.ExecutionConfig r2;
        java.lang.Boolean r3;
        boolean $z0;

        r0 := @parameter0: java.util.function.Consumer;

        r1 := @parameter1: java.util.function.Consumer;

        r2 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        r3 := @parameter3: java.lang.Boolean;

        $z0 = virtualinvoke r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>(r2);

        goto label2;

     label1:
        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>(r2);

     label2:
        return;
    }

    public static java.lang.Boolean lambda$specs$2(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0, $z1;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: boolean hasGenericTypesDisabled()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r1;
    }

    public static java.lang.Boolean lambda$specs$1(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        boolean $z0, $z1;
        java.lang.Boolean $r1;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.ExecutionConfig: boolean isAutoTypeRegistrationDisabled()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r1;
    }

    public static void lambda$specs$0(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfig r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot enable auto type registration");

        throw $r1;
    }
}
