public abstract class org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread extends java.lang.Thread
{
    protected final org.apache.flink.util.AbstractCloseableRegistry registry;
    protected final java.util.concurrent.atomic.AtomicInteger refCount;
    protected final int maxStreams;
    protected int numStreams;

    public void <init>(org.apache.flink.util.AbstractCloseableRegistry, java.util.concurrent.atomic.AtomicInteger, int)
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread r0;
        org.apache.flink.util.AbstractCloseableRegistry r1;
        java.util.concurrent.atomic.AtomicInteger r2;
        int i0;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread;

        r1 := @parameter0: org.apache.flink.util.AbstractCloseableRegistry;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: org.apache.flink.util.AbstractCloseableRegistry registry> = r1;

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: java.util.concurrent.atomic.AtomicInteger refCount> = r2;

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int maxStreams> = i0;

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int numStreams> = 0;

        return;
    }

    protected abstract void createAndRegisterStream() throws java.io.IOException;

    public void run()
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Exception $r1;
        java.lang.InterruptedException $r2;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread;

     label1:
        $i3 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int numStreams>;

        $i4 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int maxStreams>;

        if $i3 >= $i4 goto label6;

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: void createAndRegisterStream()>();

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(0L);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        $i0 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int maxStreams>;

        if $i0 == 2147483647 goto label1;

        $i1 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int numStreams>;

        $i2 = $i1 + 1;

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: int numStreams> = $i2;

        goto label1;

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

     label8:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label6 with label7;
    }
}
