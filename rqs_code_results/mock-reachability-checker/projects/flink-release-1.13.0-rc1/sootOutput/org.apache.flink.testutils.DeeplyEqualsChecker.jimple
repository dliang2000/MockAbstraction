public class org.apache.flink.testutils.DeeplyEqualsChecker extends java.lang.Object
{
    private final java.util.List customCheckers;

    public void <init>()
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.testutils.DeeplyEqualsChecker: java.util.List customCheckers> = $r1;

        return;
    }

    public org.apache.flink.testutils.DeeplyEqualsChecker withCustomCheck(java.util.function.BiFunction, org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.util.function.BiFunction r1;
        org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker r2;
        java.util.List $r3;
        org.apache.flink.api.java.tuple.Tuple2 $r4;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.util.function.BiFunction;

        r2 := @parameter1: org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker;

        $r3 = r0.<org.apache.flink.testutils.DeeplyEqualsChecker: java.util.List customCheckers>;

        $r4 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        return r0;
    }

    public boolean deepEquals(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2, $r5;
        java.util.Optional $r3;
        java.util.function.Supplier $r4;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != r2 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        if r2 != null goto label3;

     label2:
        return 0;

     label3:
        $r3 = specialinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: java.util.Optional customCheck(java.lang.Object,java.lang.Object)>(r1, r2);

        $r4 = staticinvoke <org.apache.flink.testutils.DeeplyEqualsChecker$lambda_deepEquals_0__61: java.util.function.Supplier bootstrap$(org.apache.flink.testutils.DeeplyEqualsChecker,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        $r5 = virtualinvoke $r3.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private java.util.Optional customCheck(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2;
        java.util.List $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Predicate $r5;
        java.util.Optional $r7, $r9;
        java.util.function.Function $r8;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.flink.testutils.DeeplyEqualsChecker: java.util.List customCheckers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.testutils.DeeplyEqualsChecker$lambda_customCheck_1__107: java.util.function.Predicate bootstrap$(java.lang.Object,java.lang.Object)>(r1, r2);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r5);

        $r7 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.Optional findAny()>();

        $r8 = staticinvoke <org.apache.flink.testutils.DeeplyEqualsChecker$lambda_customCheck_2__108: java.util.function.Function bootstrap$(org.apache.flink.testutils.DeeplyEqualsChecker,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        $r9 = virtualinvoke $r7.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r8);

        return $r9;
    }

    private boolean deepEquals0(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Throwable $r4, $r6;
        java.lang.String $r5, $r7;
        org.apache.flink.api.java.tuple.Tuple $r8, $r9;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z8 = virtualinvoke $r10.<java.lang.Class: boolean isArray()>();

        if $z8 == 0 goto label1;

        $z9 = specialinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: boolean deepEqualsArray(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z9;

     label1:
        $z1 = r1 instanceof org.apache.flink.api.java.tuple.Tuple;

        if $z1 == 0 goto label2;

        $z6 = r2 instanceof org.apache.flink.api.java.tuple.Tuple;

        if $z6 == 0 goto label2;

        $r9 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r8 = (org.apache.flink.api.java.tuple.Tuple) r2;

        $z7 = specialinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: boolean deepEqualsTuple(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.api.java.tuple.Tuple)>($r9, $r8);

        return $z7;

     label2:
        $z2 = r1 instanceof java.lang.Throwable;

        if $z2 == 0 goto label3;

        $z4 = r2 instanceof java.lang.Throwable;

        if $z4 == 0 goto label3;

        $r4 = (java.lang.Throwable) r1;

        $r5 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        $r6 = (java.lang.Throwable) r2;

        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z5;

     label3:
        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z3;
    }

    private boolean deepEqualsTuple(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        org.apache.flink.api.java.tuple.Tuple r1, r2;
        java.lang.Object r3, r4;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        $i0 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: int getArity()>();

        $i1 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: int getArity()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: int getArity()>();

        if i3 >= $i2 goto label4;

        r3 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i3);

        r4 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>(i3);

        $z0 = virtualinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: boolean deepEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean deepEqualsArray(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2, r3, r4;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r2);

        if i0 == i1 goto label1;

        return 0;

     label1:
        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r1, i2);

        r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r2, i2);

        $z0 = virtualinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: boolean deepEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public java.lang.Boolean lambda$customCheck$2(java.lang.Object, java.lang.Object, org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2, $r4;
        org.apache.flink.api.java.tuple.Tuple2 r3;
        org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker $r5;
        boolean $z0;
        java.lang.Boolean $r6;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.apache.flink.api.java.tuple.Tuple2;

        $r4 = r3.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r5 = (org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker) $r4;

        $z0 = interfaceinvoke $r5.<org.apache.flink.testutils.DeeplyEqualsChecker$CustomEqualityChecker: boolean check(java.lang.Object,java.lang.Object,org.apache.flink.testutils.DeeplyEqualsChecker)>(r1, r2, r0);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r6;
    }

    public static boolean lambda$customCheck$1(java.lang.Object, java.lang.Object, org.apache.flink.api.java.tuple.Tuple2)
    {
        java.lang.Object r0, r1, $r3, $r5;
        org.apache.flink.api.java.tuple.Tuple2 r2;
        java.util.function.BiFunction $r4;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.apache.flink.api.java.tuple.Tuple2;

        $r3 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r4 = (java.util.function.BiFunction) $r3;

        $r5 = interfaceinvoke $r4.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(r0, r1);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public java.lang.Boolean lambda$deepEquals$0(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.testutils.DeeplyEqualsChecker r0;
        java.lang.Object r1, r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: org.apache.flink.testutils.DeeplyEqualsChecker;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.flink.testutils.DeeplyEqualsChecker: boolean deepEquals0(java.lang.Object,java.lang.Object)>(r1, r2);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }
}
