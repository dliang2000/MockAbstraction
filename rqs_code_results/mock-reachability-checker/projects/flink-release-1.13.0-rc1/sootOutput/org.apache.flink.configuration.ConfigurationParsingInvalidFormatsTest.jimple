public class org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest extends org.apache.flink.util.TestLogger
{
    public org.apache.flink.configuration.ConfigOption option;
    public java.lang.String invalidString;
    public org.junit.rules.ExpectedException thrown;

    public void <init>()
    {
        org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest r0;
        org.junit.rules.ExpectedException $r1;

        r0 := @this: org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.junit.rules.ExpectedException thrown> = $r1;

        return;
    }

    public static java.lang.Object[][] getSpecs()
    {
        java.lang.Object[][] $r0;
        java.lang.Object[] $r1, $r6, $r11, $r16, $r21, $r26, $r31, $r36, $r41, $r46, $r54;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r2, $r7, $r12, $r17, $r22, $r27, $r32, $r37, $r42, $r47, $r55;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r3, $r8, $r13, $r18, $r23, $r28, $r33, $r38, $r43, $r48, $r56;
        java.lang.Integer $r4, $r51, $r52;
        org.apache.flink.configuration.ConfigOption $r5, $r10, $r15, $r20, $r25, $r30, $r35, $r40, $r45, $r53, $r59;
        java.lang.Long $r9;
        java.lang.Float $r14;
        java.lang.Double $r19;
        java.lang.Boolean $r24;
        org.apache.flink.configuration.MemorySize $r29;
        java.time.Duration $r34;
        org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest$TestEnum $r39;
        java.util.Map $r44;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r49, $r57;
        java.lang.Integer[] $r50;
        java.lang.String[] $r58;

        $r0 = newarray (java.lang.Object[])[11];

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("int");

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r4);

        $r1[0] = $r5;

        $r1[1] = "ABC";

        $r0[0] = $r1;

        $r6 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("long");

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r6[0] = $r10;

        $r6[1] = "ABC";

        $r0[1] = $r6;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("float");

        $r13 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        $r15 = virtualinvoke $r13.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r14);

        $r11[0] = $r15;

        $r11[1] = "ABC";

        $r0[2] = $r11;

        $r16 = newarray (java.lang.Object)[2];

        $r17 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("double");

        $r18 = virtualinvoke $r17.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        $r20 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r19);

        $r16[0] = $r20;

        $r16[1] = "ABC";

        $r0[3] = $r16;

        $r21 = newarray (java.lang.Object)[2];

        $r22 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("boolean");

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r25 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r24);

        $r21[0] = $r25;

        $r21[1] = "ABC";

        $r0[4] = $r21;

        $r26 = newarray (java.lang.Object)[2];

        $r27 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("memory");

        $r28 = virtualinvoke $r27.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r29 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize parse(java.lang.String)>("1kB");

        $r30 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r29);

        $r26[0] = $r30;

        $r26[1] = "ABC";

        $r0[5] = $r26;

        $r31 = newarray (java.lang.Object)[2];

        $r32 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("duration");

        $r33 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r34 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(1L);

        $r35 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r34);

        $r31[0] = $r35;

        $r31[1] = "ABC";

        $r0[6] = $r31;

        $r36 = newarray (java.lang.Object)[2];

        $r37 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("enum");

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder enumType(java.lang.Class)>(class "Lorg/apache/flink/configuration/ConfigurationParsingInvalidFormatsTest$TestEnum;");

        $r39 = <org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest$TestEnum: org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest$TestEnum ENUM1>;

        $r40 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r39);

        $r36[0] = $r40;

        $r36[1] = "ABC";

        $r0[7] = $r36;

        $r41 = newarray (java.lang.Object)[2];

        $r42 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("map");

        $r43 = virtualinvoke $r42.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r44 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r45 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r44);

        $r41[0] = $r45;

        $r41[1] = "ABC";

        $r0[8] = $r41;

        $r46 = newarray (java.lang.Object)[2];

        $r47 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("list<int>");

        $r48 = virtualinvoke $r47.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r50 = newarray (java.lang.Integer)[2];

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r50[0] = $r51;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r50[1] = $r52;

        $r53 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r50);

        $r46[0] = $r53;

        $r46[1] = "A;B;C";

        $r0[9] = $r46;

        $r54 = newarray (java.lang.Object)[2];

        $r55 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("list<string>");

        $r56 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r57 = virtualinvoke $r56.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r58 = newarray (java.lang.String)[1];

        $r58[0] = "A";

        $r59 = virtualinvoke $r57.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r58);

        $r54[0] = $r59;

        $r54[1] = "\'A;B;C";

        $r0[10] = $r54;

        return $r0;
    }

    public void testInvalidStringParsingWithGetOptional()
    {
        org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest r0;
        org.apache.flink.configuration.Configuration $r2;
        org.apache.flink.configuration.ConfigOption $r3, $r9, $r13;
        java.lang.String $r4, $r5, $r8, $r11, $r12;
        org.junit.rules.ExpectedException $r6, $r10;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r3 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r5 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: java.lang.String invalidString>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r4, $r5);

        $r6 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r6.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r10 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.junit.rules.ExpectedException thrown>;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: java.lang.String invalidString>;

        $r7[0] = $r8;

        $r9 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        $r11 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r7[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse value \'%s\' for key \'%s\'", $r7);

        virtualinvoke $r10.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>($r12);

        $r13 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r13);

        return;
    }

    public void testInvalidStringParsingWithGet()
    {
        org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest r0;
        org.apache.flink.configuration.Configuration $r2;
        org.apache.flink.configuration.ConfigOption $r3, $r9, $r13;
        java.lang.String $r4, $r5, $r8, $r11, $r12;
        org.junit.rules.ExpectedException $r6, $r10;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest;

        $r2 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r2.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r3 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r5 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: java.lang.String invalidString>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r4, $r5);

        $r6 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r6.<org.junit.rules.ExpectedException: void expect(java.lang.Class)>(class "Ljava/lang/IllegalArgumentException;");

        $r10 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.junit.rules.ExpectedException thrown>;

        $r7 = newarray (java.lang.Object)[2];

        $r8 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: java.lang.String invalidString>;

        $r7[0] = $r8;

        $r9 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        $r11 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r7[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not parse value \'%s\' for key \'%s\'", $r7);

        virtualinvoke $r10.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>($r12);

        $r13 = r0.<org.apache.flink.configuration.ConfigurationParsingInvalidFormatsTest: org.apache.flink.configuration.ConfigOption option>;

        virtualinvoke $r2.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r13);

        return;
    }
}
