final class org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread extends org.apache.flink.core.testutils.CheckedThread
{
    private final org.apache.flink.core.fs.LimitedConnectionsFileSystem fs;
    private final org.apache.flink.core.fs.Path path;
    private final int maxConcurrentOutputStreams;
    private final int maxConcurrentStreamsTotal;

    void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem, org.apache.flink.core.fs.Path, int, int)
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem r1;
        org.apache.flink.core.fs.Path r2;
        int i0, i1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        r1 := @parameter0: org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        r2 := @parameter1: org.apache.flink.core.fs.Path;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.flink.core.testutils.CheckedThread: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs> = r1;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.Path path> = r2;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: int maxConcurrentOutputStreams> = i0;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: int maxConcurrentStreamsTotal> = i1;

        return;
    }

    public void go() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread r0;
        org.apache.flink.core.fs.FSDataOutputStream r1;
        byte[] r2;
        org.apache.flink.core.fs.FileSystem$WriteMode $r5;
        org.apache.flink.core.fs.Path $r6;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Random $r10;
        java.lang.Throwable $r11, $r12, $r14, r15;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        $r6 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.Path path>;

        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        r1 = virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r6, $r5);

        r15 = null;

     label01:
        $r8 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        $i0 = virtualinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getNumberOfOpenOutputStreams()>();

        $i1 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: int maxConcurrentOutputStreams>;

        if $i0 > $i1 goto label02;

        $z0 = 1;

        goto label03;

     label02:
        $z0 = 0;

     label03:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r9 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        $i2 = virtualinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getTotalNumberOfOpenStreams()>();

        $i3 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: int maxConcurrentStreamsTotal>;

        if $i2 > $i3 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r10 = new java.util.Random;

        specialinvoke $r10.<java.util.Random: void <init>()>();

        $i4 = virtualinvoke $r10.<java.util.Random: int nextInt(int)>(10000);

        $i5 = $i4 + 1;

        r2 = newarray (byte)[$i5];

        virtualinvoke $r10.<java.util.Random: void nextBytes(byte[])>(r2);

        virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: void write(byte[])>(r2);

     label06:
        if r1 == null goto label16;

        goto label07;

     label07:
        virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label16;

     label08:
        $r12 := @caughtexception;

        r15 = $r12;

        throw $r12;

     label09:
        $r14 := @caughtexception;

     label10:
        if r1 == null goto label15;

        if r15 == null goto label14;

     label11:
        virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label12:
        goto label15;

     label13:
        $r11 := @caughtexception;

        virtualinvoke r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label15;

     label14:
        virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label15:
        throw $r14;

     label16:
        return;

        catch java.lang.Throwable from label01 to label06 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
    }
}
