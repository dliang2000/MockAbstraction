public class org.apache.flink.api.common.typeutils.base.StringValueSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.StringValueSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        return class "Lorg/apache/flink/types/StringValue;";
    }

    protected org.apache.flink.types.StringValue[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;
        org.apache.flink.types.StringValue[] $r1;
        org.apache.flink.types.StringValue $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        $r1 = newarray (org.apache.flink.types.StringValue)[7];

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("a");

        $r1[0] = $r2;

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("");

        $r1[1] = $r3;

        $r4 = new org.apache.flink.types.StringValue;

        specialinvoke $r4.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("bcd");

        $r1[2] = $r4;

        $r5 = new org.apache.flink.types.StringValue;

        specialinvoke $r5.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("jbmbmner8 jhk hj \n \t \u00fc\u00e4\u00df\u00df@\u00b5");

        $r1[3] = $r5;

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("");

        $r1[4] = $r6;

        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("non-empty");

        $r1[5] = $r7;

        $r8 = new org.apache.flink.types.StringValue;

        specialinvoke $r8.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("http://some-uri.com/that/is/a/common/prefix/to/all(((cmNH`0R)H<tnLa:/;Q,igWY2EdwW^W7T3H6NMRoqR[O2TqQ@SbGKc(:0XOXq-5]ndm-R8?=,o?AW+9Pi_v4eON=Mpje7N4n*-nhFWKn>Sn0cGMlnDquY@-F:QY@-UZ.-//*OL*8\\SIpiZa)tefalZ99-P_-WFIaKPeGbkQ^iRgd,YYkn7:jBAW::PqAYtgl73dTaJ2CIT:11HJ70<ATOXZ]c6b_7EgQU,@uq+SMa=7Z]kg/OZ>TGduw>D7Lu[nEj_l=Ucwo5BQtBESh/4V>N9nj/pDLw[NM)a=ac6R-(FM2U+dwROMUH;);Y=");

        $r1[6] = $r8;

        return $r1;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializerTest r0;
        org.apache.flink.types.StringValue[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializerTest: org.apache.flink.types.StringValue[] getTestData()>();

        return $r1;
    }
}
