public class org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest extends java.lang.Object
{
    private static final java.lang.String TEST_DATA1;
    private static final java.lang.String TEST_DATA2;
    private static final int TEST_DATA_1_LINES;
    private static final int TEST_DATA_1_LINEWIDTH;
    private static final int TEST_DATA_2_LINEWIDTH;
    private static final int TOTAL_SIZE;
    private static final int DEFAULT_NUM_SAMPLES;
    private static org.apache.flink.configuration.Configuration CONFIG;
    public static org.junit.rules.TemporaryFolder tempFolder;
    private static java.io.File testTempFolder;

    public void <init>()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initialize()
    {
        org.junit.rules.TemporaryFolder $r1;
        java.io.File $r2, $r9;
        java.lang.String[] $r3, $r8;
        org.apache.flink.configuration.ConfigOption $r4, $r6;
        java.lang.String $r5, $r7;
        org.apache.flink.configuration.Configuration $r10;
        java.lang.Throwable $r11;

     label1:
        $r1 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r2 = virtualinvoke $r1.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.io.File testTempFolder> = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r4 = <org.apache.flink.configuration.OptimizerOptions: org.apache.flink.configuration.ConfigOption DELIMITED_FORMAT_MIN_LINE_SAMPLES>;

        $r5 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3[0] = $r5;

        $r6 = <org.apache.flink.configuration.OptimizerOptions: org.apache.flink.configuration.ConfigOption DELIMITED_FORMAT_MAX_LINE_SAMPLES>;

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r3[1] = $r7;

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "4";

        $r8[1] = "4";

        $r9 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.io.File testTempFolder>;

        $r10 = staticinvoke <org.apache.flink.testutils.TestConfigUtils: org.apache.flink.configuration.Configuration loadGlobalConf(java.lang.String[],java.lang.String[],java.io.File)>($r3, $r8, $r9);

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG> = $r10;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Could not load the global configuration.");

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void testNumSamplesOneFile()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        org.apache.flink.configuration.Configuration $r4, $r6, $r10;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r5, $r9;
        java.lang.String $r7, $r11, $r14, r15;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Exception $r13;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label1:
        r15 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>("123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r6 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r6);

        $r7 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file", "test");

        virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r7);

        virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i0 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of samples taken.", 4L, $l1);

        $r9 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r10 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r10);

        $r11 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file", "test");

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r11);

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setNumLineSamples(int)>(8);

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i2 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of samples taken.", 8L, $l3);

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        $r14 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r14);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testNumSamplesMultipleFiles()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        java.lang.String[] $r4;
        java.io.File $r5;
        org.apache.flink.configuration.Configuration $r6, $r8, $r12;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r7, $r11;
        java.lang.String $r9, $r13, $r16, r17;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Exception $r15;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label1:
        $r5 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.io.File testTempFolder>;

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r4[1] = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r4[2] = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r4[3] = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        r17 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDir(java.io.File,java.lang.String[])>($r5, $r4);

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r8 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r8);

        $r9 = virtualinvoke r17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file", "test");

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r9);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i0 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of samples taken.", 4L, $l1);

        $r11 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r12 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r12);

        $r13 = virtualinvoke r17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("file", "test");

        virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r13);

        virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setNumLineSamples(int)>(8);

        virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        virtualinvoke $r11.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i2 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of samples taken.", 8L, $l3);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

        $r16 = virtualinvoke $r15.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r16);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testSamplingOneFile()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3;
        int i0, $i1, $i2, $i4, $i8;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        org.apache.flink.configuration.Configuration $r4, $r6;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r5;
        java.lang.String $r7, $r9, r10;
        long $l3, $l5, $l7, $l9;
        byte $b6, $b10, $b11, $b12;
        java.lang.Exception $r8;
        boolean $z3, $z4, $z5, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label01:
        r10 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>("123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r6 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r6);

        virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>(r10);

        virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        i0 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINES>;

        $r7 = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $f2 = (float) $i1;

        $i2 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINES>;

        $f1 = (float) $i2;

        f0 = $f2 / $f1;

        $l3 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $i4 = i0 + 1;

        $l5 = (long) $i4;

        $b6 = $l3 cmp $l5;

        if $b6 >= 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $l7 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $i8 = i0 - 1;

        $l9 = (long) $i8;

        $b10 = $l7 cmp $l9;

        if $b10 <= 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $z5 = $z3 & $z4;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Wrong record count.", $z5);

        $f5 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $f6 = f0 + 1.0F;

        $b12 = $f5 cmpg $f6;

        if $b12 >= 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        $f3 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $f4 = f0 - 1.0F;

        $b11 = $f3 cmpl $f4;

        if $b11 <= 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        $z9 = $z7 & $z8;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Wrong avg record size.", $z9);

     label10:
        goto label12;

     label11:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label12:
        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    public void testSamplingDirectory()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.String[] $r4;
        java.io.File $r5;
        org.apache.flink.configuration.Configuration $r6, $r8;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l12, $l13, $l15, $l16, $l20;
        byte $b14, $b17, $b18, $b19;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.io.PrintStream $r10;
        java.lang.String $r18, $r20, r21;
        java.lang.Exception $r19;
        boolean $z3, $z4, $z5, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label01:
        $r5 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.io.File testTempFolder>;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r4[1] = "12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n";

        r21 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFileDir(java.io.File,java.lang.String[])>($r5, $r4);

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r8 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r8);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>(r21);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i2 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TOTAL_SIZE>;

        $d0 = (double) $i2;

        $i4 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINEWIDTH>;

        $i3 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_2_LINEWIDTH>;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        $d1 = (double) $i5;

        $d2 = $d0 / $d1;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        i0 = (int) $d3;

        $i6 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TOTAL_SIZE>;

        $d4 = (double) $i6;

        $i8 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINEWIDTH>;

        $i7 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_2_LINEWIDTH>;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i7);

        $d5 = (double) $i9;

        $d6 = $d4 / $d5;

        i1 = (int) $d6;

        $i10 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TOTAL_SIZE>;

        $f3 = (float) $i10;

        $f2 = (float) i1;

        f0 = $f3 / $f2;

        $i11 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TOTAL_SIZE>;

        $f5 = (float) $i11;

        $f4 = (float) i0;

        f1 = $f5 / $f4;

        $l12 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $l13 = (long) i0;

        $b14 = $l12 cmp $l13;

        if $b14 > 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $l15 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $l16 = (long) i1;

        $b17 = $l15 cmp $l16;

        if $b17 < 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $z5 = $z3 & $z4;

        if $z5 != 0 goto label06;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Records: ");

        $l20 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l20);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r18);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Wrong record count.");

     label06:
        $f6 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $b18 = $f6 cmpg f0;

        if $b18 > 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        $f7 = interfaceinvoke r3.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $b19 = $f7 cmpl f1;

        if $b19 < 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        $z9 = $z7 & $z8;

        if $z9 != 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Wrong avg record size.");

     label11:
        goto label13;

     label12:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

        $r20 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r20);

     label13:
        return;

        catch java.lang.Exception from label01 to label11 with label12;
    }

    public void testDifferentDelimiter()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        java.lang.String r1, r2, $r6, $r11;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r5;
        int i0, $i1, $i2, $i4, $i8;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        org.apache.flink.configuration.Configuration $r7, $r9;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r8;
        long $l3, $l5, $l7, $l9;
        byte $b6, $b10, $b11, $b12;
        java.lang.Exception $r10;
        boolean $z3, $z4, $z5, $z7, $z8, $z9;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label01:
        $r6 = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        r1 = virtualinvoke $r6.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "12345678-");

        r2 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>(r1);

        $r7 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r7.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r8 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r9 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r9);

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>(r2);

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setDelimiter(java.lang.String)>("12345678-");

        virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r7);

        r5 = virtualinvoke $r8.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        i0 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINES>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $f2 = (float) $i1;

        $i2 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINES>;

        $f1 = (float) $i2;

        f0 = $f2 / $f1;

        $l3 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $i4 = i0 + 1;

        $l5 = (long) $i4;

        $b6 = $l3 cmp $l5;

        if $b6 >= 0 goto label02;

        $z3 = 1;

        goto label03;

     label02:
        $z3 = 0;

     label03:
        $l7 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: long getNumberOfRecords()>();

        $i8 = i0 - 1;

        $l9 = (long) $i8;

        $b10 = $l7 cmp $l9;

        if $b10 <= 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        $z5 = $z3 & $z4;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Wrong record count.", $z5);

        $f5 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $f6 = f0 + 1.0F;

        $b12 = $f5 cmpg $f6;

        if $b12 >= 0 goto label06;

        $z7 = 1;

        goto label07;

     label06:
        $z7 = 0;

     label07:
        $f3 = interfaceinvoke r5.<org.apache.flink.api.common.io.statistics.BaseStatistics: float getAverageRecordWidth()>();

        $f4 = f0 - 1.0F;

        $b11 = $f3 cmpl $f4;

        if $b11 <= 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        $z9 = $z7 & $z8;

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Wrong avg record size.", $z9);

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r11 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label12:
        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    public void testSamplingOverlyLongRecord()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        org.apache.flink.configuration.ConfigOption $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0, $i1;
        long $l2;
        org.apache.flink.configuration.Configuration $r6, $r8;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r7;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics $r9;
        java.lang.Exception $r10;
        java.lang.String $r11, r12;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label1:
        $r3 = <org.apache.flink.configuration.OptimizerOptions: org.apache.flink.configuration.ConfigOption DELIMITED_FORMAT_MAX_SAMPLE_LEN>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i1 = 2 * $i0;

        $l2 = (long) $i1;

        r12 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(long)>($l2);

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r8 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r8);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>(r12);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.String,java.lang.Object)>("Expected exception due to overly long record.", $r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r11 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testCachedStatistics()
    {
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest r0;
        org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics r3, r5;
        org.apache.flink.configuration.Configuration $r6, $r8, $r14;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat $r7, $r13;
        java.lang.StringBuilder $r9, $r10, $r11, $r15, $r16, $r17;
        java.lang.String $r12, $r18, $r22, r23;
        int $i0, $i2;
        long $l1;
        java.lang.Exception $r21;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

     label1:
        r23 = staticinvoke <org.apache.flink.testutils.TestFileUtils: java.lang.String createTempFile(java.lang.String)>("123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n");

        $r6 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r6.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r7 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r8 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test://");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r12);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(null);

        $i0 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Wrong number of samples taken.", 4L, $l1);

        $r13 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat;

        $r14 = <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.apache.flink.configuration.Configuration CONFIG>;

        specialinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void <init>(org.apache.flink.configuration.Configuration)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test://");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void setFilePath(java.lang.String)>($r18);

        virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r6);

        staticinvoke <org.apache.flink.testutils.TestFileSystem: void resetStreamOpenCounter()>();

        r5 = virtualinvoke $r13.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest$TestDelimitedInputFormat: org.apache.flink.api.common.io.FileInputFormat$FileBaseStatistics getStatistics(org.apache.flink.api.common.io.statistics.BaseStatistics)>(r3);

        $i2 = staticinvoke <org.apache.flink.testutils.TestFileSystem: int getNumtimeStreamOpened()>();

        if 0 != $i2 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Using cached statistics should cicumvent sampling.", $z0);

        if r3 != r5 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Using cached statistics should cicumvent sampling.", $z1);

     label6:
        goto label8;

     label7:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r2, $r4, $r5, $r7, $r8, $r9;
        java.lang.String[] $r1, $r3, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.junit.rules.TemporaryFolder $r10;

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int DEFAULT_NUM_SAMPLES> = 4;

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.lang.String TEST_DATA2> = "12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n";

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: java.lang.String TEST_DATA1> = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r0 = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $i0 = lengthof $r1;

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINES> = $i0;

        $r2 = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $r4 = $r3[0];

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_1_LINEWIDTH> = $i1;

        $r5 = "12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n";

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $r7 = $r6[0];

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TEST_DATA_2_LINEWIDTH> = $i2;

        $r8 = "123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n";

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r9 = "12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n12345\n";

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: int TOTAL_SIZE> = $i5;

        $r10 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r10.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: org.junit.rules.TemporaryFolder tempFolder> = $r10;

        return;
    }
}
