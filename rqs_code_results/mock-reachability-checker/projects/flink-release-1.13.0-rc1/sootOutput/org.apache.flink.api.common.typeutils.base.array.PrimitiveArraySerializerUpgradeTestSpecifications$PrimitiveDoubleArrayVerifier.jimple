public final class org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r2;
        org.apache.flink.api.common.ExecutionConfig $r3;
        java.lang.Class $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Class)>(class "[D");

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r3);

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.junit.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r4, class "Lorg/apache/flink/api/common/typeutils/base/array/DoublePrimitiveArraySerializer;");

        return r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier r0;
        double[] r1;
        int $i0, i1;
        org.hamcrest.Matcher $r2;
        float $f0, $f1;
        double $d0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier;

        r1 = newarray (double)[10];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $f0 = (float) i1;

        $f1 = $f0 + 0.1F;

        $d0 = (double) $f1;

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>(r1);

        return $r2;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1;
        org.hamcrest.Matcher $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.PrimitiveArraySerializerUpgradeTestSpecifications$PrimitiveDoubleArrayVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r2;
    }
}
