final class org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1 extends org.hamcrest.TypeSafeMatcher
{
    final org.apache.flink.api.common.typeutils.base.TestEnum[] val$expectedEnumValues;

    void <init>(org.apache.flink.api.common.typeutils.base.TestEnum[])
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1 r0;
        org.apache.flink.api.common.typeutils.base.TestEnum[] r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.TestEnum[];

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1: org.apache.flink.api.common.typeutils.base.TestEnum[] val$expectedEnumValues> = r1;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        return;
    }

    protected boolean matchesSafely(org.apache.flink.api.common.typeutils.base.EnumSerializer)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1 r0;
        org.apache.flink.api.common.typeutils.base.EnumSerializer r1;
        java.lang.Enum[] $r2;
        org.apache.flink.api.common.typeutils.base.TestEnum[] $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.EnumSerializer: java.lang.Enum[] getValues()>();

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1: org.apache.flink.api.common.typeutils.base.TestEnum[] val$expectedEnumValues>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r3);

        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1 r0;
        org.hamcrest.Description r1, $r2;
        org.apache.flink.api.common.typeutils.base.TestEnum[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("EnumSerializer with values ");

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1: org.apache.flink.api.common.typeutils.base.TestEnum[] val$expectedEnumValues>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValueList(java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>("{", ", ", "}", $r3);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1 r0;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.common.typeutils.base.EnumSerializer) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializerUpgradeTest$1: boolean matchesSafely(org.apache.flink.api.common.typeutils.base.EnumSerializer)>($r2);

        return $z0;
    }
}
