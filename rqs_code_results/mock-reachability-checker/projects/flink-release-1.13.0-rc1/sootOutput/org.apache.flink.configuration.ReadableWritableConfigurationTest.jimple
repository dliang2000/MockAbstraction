public class org.apache.flink.configuration.ReadableWritableConfigurationTest extends java.lang.Object
{
    public org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec;

    public void <init>()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest r0;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Collection getSpecs()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec[] $r0;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec $r1, $r7, $r9, $r10, $r16, $r18, $r19, $r25, $r27, $r28, $r34, $r36, $r37, $r43, $r45, $r46, $r62, $r67, $r68, $r76, $r78, $r79, $r85, $r87, $r88, $r94, $r96, $r97, $r109, $r111, $r112, $r132, $r134;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r2, $r11, $r20, $r29, $r38, $r47, $r69, $r80, $r89, $r98, $r113;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r3, $r12, $r21, $r30, $r39, $r48, $r70, $r81, $r90, $r99, $r114;
        java.lang.Integer $r4, $r6, $r8, $r51, $r52, $r53, $r56, $r57, $r58, $r59, $r60, $r64, $r65;
        org.apache.flink.configuration.ConfigOption $r5, $r14, $r23, $r32, $r41, $r54, $r73, $r83, $r92, $r103, $r120;
        java.lang.Long $r13, $r15, $r17;
        java.lang.Float $r22, $r24, $r26;
        java.lang.Double $r31, $r33, $r35;
        java.lang.Boolean $r40, $r42, $r44;
        org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder $r49, $r71, $r115;
        java.lang.Integer[] $r50, $r55, $r63;
        java.util.List $r61, $r66, $r75, $r77, $r101, $r107, $r118, $r125, $r129, $r131, $r133, $r135;
        java.lang.String[] $r72, $r74;
        java.time.Duration $r82, $r84, $r86;
        org.apache.flink.configuration.MemorySize $r91, $r93, $r95;
        org.apache.flink.api.java.tuple.Tuple2 $r100, $r105, $r106, $r117, $r123, $r124, $r128;
        java.util.Map $r102, $r108, $r110, $r119, $r126, $r130;
        org.apache.flink.api.java.tuple.Tuple2[] $r104, $r122, $r127;
        java.util.Map[] $r116, $r121;

        $r0 = newarray (org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec)[11];

        $r1 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r2 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("int");

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r5 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r4);

        specialinvoke $r1.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r5, null);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12345);

        $r7 = virtualinvoke $r1.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r6, "12345");

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r9 = virtualinvoke $r7.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r8);

        $r0[0] = $r9;

        $r10 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r11 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("long");

        $r12 = virtualinvoke $r11.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder longType()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        specialinvoke $r10.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r14, null);

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12345L);

        $r16 = virtualinvoke $r10.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r15, "12345");

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r18 = virtualinvoke $r16.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r17);

        $r0[1] = $r18;

        $r19 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("float");

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder floatType()>();

        $r22 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.01F);

        $r23 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r22);

        specialinvoke $r19.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r23, null);

        $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.003F);

        $r25 = virtualinvoke $r19.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r24, "0.003");

        $r26 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.23F);

        $r27 = virtualinvoke $r25.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r26);

        $r0[2] = $r27;

        $r28 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r29 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("double");

        $r30 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder doubleType()>();

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.01);

        $r32 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r31);

        specialinvoke $r28.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r32, null);

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.003);

        $r34 = virtualinvoke $r28.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r33, "0.003");

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.23);

        $r36 = virtualinvoke $r34.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r35);

        $r0[3] = $r36;

        $r37 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r38 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("boolean");

        $r39 = virtualinvoke $r38.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r40 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r41 = virtualinvoke $r39.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r40);

        specialinvoke $r37.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r41, null);

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r43 = virtualinvoke $r37.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r42, "true");

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r45 = virtualinvoke $r43.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r44);

        $r0[4] = $r45;

        $r46 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r47 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("list<int>");

        $r48 = virtualinvoke $r47.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r49 = virtualinvoke $r48.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r50 = newarray (java.lang.Integer)[3];

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r50[0] = $r51;

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r50[1] = $r52;

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r50[2] = $r53;

        $r54 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r50);

        specialinvoke $r46.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r54, null);

        $r55 = newarray (java.lang.Integer)[5];

        $r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r55[0] = $r56;

        $r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r55[1] = $r57;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r55[2] = $r58;

        $r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r55[3] = $r59;

        $r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r55[4] = $r60;

        $r61 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r55);

        $r62 = virtualinvoke $r46.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r61, "1;2;3;4;5");

        $r63 = newarray (java.lang.Integer)[2];

        $r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r63[0] = $r64;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r63[1] = $r65;

        $r66 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r63);

        $r67 = virtualinvoke $r62.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r66);

        $r0[5] = $r67;

        $r68 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r69 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("list<string>");

        $r70 = virtualinvoke $r69.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r71 = virtualinvoke $r70.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r72 = newarray (java.lang.String)[3];

        $r72[0] = "A";

        $r72[1] = "B";

        $r72[2] = "C";

        $r73 = virtualinvoke $r71.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r72);

        specialinvoke $r68.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r73, null);

        $r74 = newarray (java.lang.String)[2];

        $r74[0] = "A;B";

        $r74[1] = "C";

        $r75 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r74);

        $r76 = virtualinvoke $r68.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r75, "\'A;B\';C");

        $r77 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("C");

        $r78 = virtualinvoke $r76.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r77);

        $r0[6] = $r78;

        $r79 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r80 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("interval");

        $r81 = virtualinvoke $r80.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder durationType()>();

        $r82 = staticinvoke <java.time.Duration: java.time.Duration ofHours(long)>(3L);

        $r83 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r82);

        specialinvoke $r79.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r83, null);

        $r84 = staticinvoke <java.time.Duration: java.time.Duration ofMinutes(long)>(3L);

        $r85 = virtualinvoke $r79.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r84, "3 min");

        $r86 = staticinvoke <java.time.Duration: java.time.Duration ofSeconds(long)>(1L);

        $r87 = virtualinvoke $r85.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r86);

        $r0[7] = $r87;

        $r88 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r89 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("memory");

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder memoryType()>();

        $r91 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r91.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1024L);

        $r92 = virtualinvoke $r90.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r91);

        specialinvoke $r88.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r92, null);

        $r93 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r93.<org.apache.flink.configuration.MemorySize: void <init>(long)>(1073741824L);

        $r94 = virtualinvoke $r88.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r93, "1g");

        $r95 = new org.apache.flink.configuration.MemorySize;

        specialinvoke $r95.<org.apache.flink.configuration.MemorySize: void <init>(long)>(2048L);

        $r96 = virtualinvoke $r94.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r95);

        $r0[8] = $r96;

        $r97 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r98 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("properties");

        $r99 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r100 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("prop1", "value1");

        $r101 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r100);

        $r102 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest: java.util.Map asMap(java.util.List)>($r101);

        $r103 = virtualinvoke $r99.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r102);

        specialinvoke $r97.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r103, null);

        $r104 = newarray (org.apache.flink.api.java.tuple.Tuple2)[2];

        $r105 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("key1", "value1");

        $r104[0] = $r105;

        $r106 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("key2", "value2");

        $r104[1] = $r106;

        $r107 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r104);

        $r108 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest: java.util.Map asMap(java.util.List)>($r107);

        $r109 = virtualinvoke $r97.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r108, "key1:value1,key2:value2");

        $r110 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r111 = virtualinvoke $r109.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r110);

        $r0[9] = $r111;

        $r112 = new org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec;

        $r113 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("list<properties>");

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder mapType()>();

        $r115 = virtualinvoke $r114.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder asList()>();

        $r116 = newarray (java.util.Map)[1];

        $r117 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("prop1", "value1");

        $r118 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r117);

        $r119 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest: java.util.Map asMap(java.util.List)>($r118);

        $r116[0] = $r119;

        $r120 = virtualinvoke $r115.<org.apache.flink.configuration.ConfigOptions$ListConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValues(java.lang.Object[])>($r116);

        specialinvoke $r112.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void <init>(org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ReadableWritableConfigurationTest$1)>($r120, null);

        $r121 = newarray (java.util.Map)[2];

        $r122 = newarray (org.apache.flink.api.java.tuple.Tuple2)[2];

        $r123 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("key1", "value1");

        $r122[0] = $r123;

        $r124 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("key2", "value2");

        $r122[1] = $r124;

        $r125 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r122);

        $r126 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest: java.util.Map asMap(java.util.List)>($r125);

        $r121[0] = $r126;

        $r127 = newarray (org.apache.flink.api.java.tuple.Tuple2)[1];

        $r128 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>("key3", "value3");

        $r127[0] = $r128;

        $r129 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r127);

        $r130 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest: java.util.Map asMap(java.util.List)>($r129);

        $r121[1] = $r130;

        $r131 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r121);

        $r132 = virtualinvoke $r112.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec valueEquals(java.lang.Object,java.lang.String)>($r131, "key1:value1,key2:value2;key3:value3");

        $r133 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r134 = virtualinvoke $r132.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec checkDefaultOverride(java.lang.Object)>($r133);

        $r0[10] = $r134;

        $r135 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        return $r135;
    }

    private static java.util.Map asMap(java.util.List)
    {
        java.util.List r0;
        java.util.stream.Stream $r1;
        java.util.function.Function $r2, $r3;
        java.util.stream.Collector $r4;
        java.lang.Object $r5;
        java.util.Map $r6;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest$lambda_asMap_0__340: java.util.function.Function bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.configuration.ReadableWritableConfigurationTest$lambda_asMap_1__341: java.util.function.Function bootstrap$()>();

        $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r2, $r3);

        $r5 = interfaceinvoke $r1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4);

        $r6 = (java.util.Map) $r5;

        return $r6;
    }

    public void testGetOptionalFromObject()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest r0;
        java.util.Optional r2;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec $r4, $r5, $r8;
        org.apache.flink.configuration.ConfigOption $r6;
        java.lang.Object $r7, $r9;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest;

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        virtualinvoke $r4.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: void setValue(org.apache.flink.configuration.Configuration)>($r3);

        $r5 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption getOption()>();

        r2 = virtualinvoke $r3.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r6);

        $r7 = virtualinvoke r2.<java.util.Optional: java.lang.Object get()>();

        $r8 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object getValue()>();

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r10);

        return;
    }

    public void testGetOptionalFromString()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r1;
        java.util.Optional r3;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec $r4, $r7, $r10;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.String $r6, $r8;
        java.lang.Object $r9, $r11;
        org.hamcrest.Matcher $r12;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest;

        $r4 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        r1 = virtualinvoke $r4.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption getOption()>();

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = virtualinvoke r1.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r7 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.String getStringValue()>();

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r6, $r8);

        r3 = virtualinvoke $r5.<org.apache.flink.configuration.Configuration: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r1);

        $r9 = virtualinvoke r3.<java.util.Optional: java.lang.Object get()>();

        $r10 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object getValue()>();

        $r12 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r12);

        return;
    }

    public void testGetDefaultValue()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2;
        java.lang.Object r3, $r6;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec $r5;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        r2 = virtualinvoke $r5.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption getOption()>();

        r3 = virtualinvoke $r4.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>(r2);

        $r6 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r7);

        return;
    }

    public void testGetOptionalDefaultValueOverride()
    {
        org.apache.flink.configuration.ReadableWritableConfigurationTest r0;
        org.apache.flink.configuration.ConfigOption r2;
        java.lang.Object r3, $r8, $r10;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec $r5, $r7, $r9;
        java.util.Optional $r6;
        org.hamcrest.Matcher $r11;

        r0 := @this: org.apache.flink.configuration.ReadableWritableConfigurationTest;

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        r2 = virtualinvoke $r5.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: org.apache.flink.configuration.ConfigOption getOption()>();

        $r6 = interfaceinvoke $r4.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>(r2);

        $r7 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object getDefaultValueOverride()>();

        r3 = virtualinvoke $r6.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r8);

        $r9 = r0.<org.apache.flink.configuration.ReadableWritableConfigurationTest: org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec testSpec>;

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.ReadableWritableConfigurationTest$TestSpec: java.lang.Object getDefaultValueOverride()>();

        $r11 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher equalTo(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>(r3, $r11);

        return;
    }

    public static java.lang.String lambda$asMap$1(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    public static java.lang.String lambda$asMap$0(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r2 = (java.lang.String) $r1;

        return $r2;
    }
}
