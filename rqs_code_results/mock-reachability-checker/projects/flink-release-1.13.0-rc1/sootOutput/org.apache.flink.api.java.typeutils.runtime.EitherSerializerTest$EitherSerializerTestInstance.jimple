class org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance extends org.apache.flink.api.common.typeutils.SerializerTestInstance
{
    final org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest this$0;

    public void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest, org.apache.flink.api.common.typeutils.TypeSerializer, java.lang.Class, int, java.lang.Object[])
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Class r3;
        int i0;
        java.lang.Object[] r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        r3 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.Object[];

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest this$0> = r1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r2, r3, i0, r4);

        return;
    }

    public void testInstantiate()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.Exception $r3;
        java.io.PrintStream $r4;
        java.lang.String $r5, $r8, $r10;
        java.lang.StringBuilder $r6, $r7, $r9;
        org.apache.flink.api.common.typeutils.TypeSerializer r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

     label1:
        r11 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r1 = virtualinvoke r11.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The created instance must not be null.", r1);

        r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("The test is corrupt: type class is null.", r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in test: ");

        $r8 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
