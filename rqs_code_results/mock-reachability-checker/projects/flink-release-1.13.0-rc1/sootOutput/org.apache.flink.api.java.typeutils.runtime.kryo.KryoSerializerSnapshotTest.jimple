public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest extends java.lang.Object
{
    private org.apache.flink.api.common.ExecutionConfig oldConfig;
    private org.apache.flink.api.common.ExecutionConfig newConfig;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        $r1 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig> = $r1;

        $r2 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig> = $r2;

        return;
    }

    public void sanityTest()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveKryoCompatibility(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.ExecutionConfig)>($r2, $r1);

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r3, $r4);

        return;
    }

    public void addingTypesIsCompatibleAfterReconfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2, $r3, $r4, $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r6;
        org.hamcrest.Matcher $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        virtualinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;");

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;");

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void registerTypeWithKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Dog;", class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$DogKryoSerializer;");

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveKryoCompatibility(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.ExecutionConfig)>($r5, $r4);

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r7);

        return;
    }

    public void replacingKryoSerializersIsCompatibleAsIs()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7;
        org.hamcrest.Matcher $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        virtualinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;");

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void registerTypeWithKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Dog;", class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$DogKryoSerializer;");

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;");

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerTypeWithKryoSerializer(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Dog;", class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$DogV2KryoSerializer;");

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveKryoCompatibility(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.ExecutionConfig)>($r6, $r5);

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        return;
    }

    public void reorderingIsCompatibleAfterReconfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.ExecutionConfig $r1, $r2, $r3, $r4, $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7;
        org.hamcrest.Matcher $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        virtualinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Parrot;");

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Dog;");

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Dog;");

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        virtualinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Parrot;");

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig oldConfig>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.ExecutionConfig newConfig>;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveKryoCompatibility(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.ExecutionConfig)>($r6, $r5);

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r8);

        return;
    }

    public void tryingToRestoreWithNonExistingClassShouldBeIncompatible() throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r3;
        org.apache.flink.api.common.ExecutionConfig $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r5;
        org.hamcrest.Matcher $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot kryoSnapshotWithMissingClass()>();

        $r3 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;", $r4);

        $r5 = interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r3);

        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isIncompatible()>();

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r5, $r6);

        return;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot kryoSnapshotWithMissingClass() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer $r1;
        byte[] $r2;
        java.lang.Class $r3;
        java.lang.ClassLoader $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r5;

        $r1 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: byte[] unLoadableSnapshotBytes()>();

        specialinvoke $r1.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>($r2);

        $r3 = class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerSnapshotTest;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r1, $r4);

        return $r5;
    }

    private static byte[] unLoadableSnapshotBytes() throws java.io.IOException
    {
        java.lang.ClassLoader r0, $r10;
        org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4;
        byte[] r6;
        java.lang.Thread $r8, $r9, $r17, $r19;
        org.apache.flink.api.common.ExecutionConfig $r11;
        java.lang.Object $r12;
        java.io.Serializable $r13;
        java.lang.Class $r14;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r15;
        org.apache.flink.core.memory.DataOutputSerializer $r16;
        java.lang.Throwable $r18;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r8.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r1 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader createSerializableObjectFromNewClassLoader()>();

     label1:
        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke r1.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r9.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r10);

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r12 = virtualinvoke r1.<org.apache.flink.testutils.ClassLoaderUtils$ObjectAndClassLoader: java.lang.Object getObject()>();

        $r13 = (java.io.Serializable) $r12;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>($r14);

        $r15 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;", $r11);

        r4 = virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r16 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r16.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(4096);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r16, r4);

        r6 = virtualinvoke $r16.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

     label2:
        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r17.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0);

        return r6;

     label3:
        $r18 := @caughtexception;

     label4:
        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r0);

        throw $r18;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveKryoCompatibility(org.apache.flink.api.common.ExecutionConfig, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.common.ExecutionConfig r0, r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r3;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r5, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7;

        r0 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;", r0);

        r3 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r6 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoPojosForMigrationTests$Animal;", r1);

        $r7 = interfaceinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r6);

        return $r7;
    }
}
