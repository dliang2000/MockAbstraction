public abstract class org.mockito.internal.stubbing.BaseStubbing extends java.lang.Object implements org.mockito.stubbing.OngoingStubbing
{

    public void <init>()
    {
        org.mockito.internal.stubbing.BaseStubbing r0;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Object r1;
        org.mockito.internal.stubbing.answers.Returns $r2;
        org.mockito.stubbing.OngoingStubbing $r3;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.mockito.internal.stubbing.answers.Returns;

        specialinvoke $r2.<org.mockito.internal.stubbing.answers.Returns: void <init>(java.lang.Object)>(r1);

        $r3 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($r2);

        return $r3;
    }

    public transient org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object, java.lang.Object[])
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Object r1, r4;
        java.lang.Object[] r2;
        int i0, i1;
        org.mockito.stubbing.OngoingStubbing $r5, r6;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        r6 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r5 = interfaceinvoke r6.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(null);

        return $r5;

     label1:
        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        r6 = interfaceinvoke r6.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r6;
    }

    private org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable)
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Throwable r1;
        org.mockito.internal.stubbing.answers.ThrowsException $r2;
        org.mockito.stubbing.OngoingStubbing $r3;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = new org.mockito.internal.stubbing.answers.ThrowsException;

        specialinvoke $r2.<org.mockito.internal.stubbing.answers.ThrowsException: void <init>(java.lang.Throwable)>(r1);

        $r3 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($r2);

        return $r3;
    }

    public transient org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable[])
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Throwable[] r1, $r4;
        int i0, i1;
        java.lang.Throwable r3, $r5;
        org.mockito.stubbing.OngoingStubbing $r6, r7;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Throwable[];

        if r1 != null goto label1;

        $r5 = (java.lang.Throwable) null;

        $r6 = specialinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable)>($r5);

        return $r6;

     label1:
        r7 = null;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        if r7 != null goto label3;

        r7 = specialinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable)>(r3);

        goto label4;

     label3:
        $r4 = newarray (java.lang.Throwable)[1];

        $r4[0] = r3;

        r7 = interfaceinvoke r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable[])>($r4);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return r7;
    }

    public org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class)
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Class r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        org.mockito.stubbing.OngoingStubbing $r4;
        org.mockito.internal.progress.MockingProgress $r5;
        org.mockito.exceptions.base.MockitoException $r6;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r5 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r5.<org.mockito.internal.progress.MockingProgress: void reset()>();

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAnException()>();

        throw $r6;

     label1:
        $r2 = staticinvoke <org.objenesis.ObjenesisHelper: java.lang.Object newInstance(java.lang.Class)>(r1);

        $r3 = (java.lang.Throwable) $r2;

        $r4 = specialinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Throwable)>($r3);

        return $r4;
    }

    public transient org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class, java.lang.Class[])
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        java.lang.Class r1, r4, $r5;
        java.lang.Class[] r2;
        int i0, i1;
        org.mockito.stubbing.OngoingStubbing $r6, r7;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        if r2 != null goto label1;

        $r5 = (java.lang.Class) null;

        $r6 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class)>($r5);

        return $r6;

     label1:
        r7 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class)>(r1);

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        r7 = interfaceinvoke r7.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenThrow(java.lang.Class)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r7;
    }

    public org.mockito.stubbing.OngoingStubbing thenCallRealMethod()
    {
        org.mockito.internal.stubbing.BaseStubbing r0;
        org.mockito.internal.stubbing.answers.CallsRealMethods $r1;
        org.mockito.stubbing.OngoingStubbing $r2;

        r0 := @this: org.mockito.internal.stubbing.BaseStubbing;

        $r1 = new org.mockito.internal.stubbing.answers.CallsRealMethods;

        specialinvoke $r1.<org.mockito.internal.stubbing.answers.CallsRealMethods: void <init>()>();

        $r2 = virtualinvoke r0.<org.mockito.internal.stubbing.BaseStubbing: org.mockito.stubbing.OngoingStubbing thenAnswer(org.mockito.stubbing.Answer)>($r1);

        return $r2;
    }
}
