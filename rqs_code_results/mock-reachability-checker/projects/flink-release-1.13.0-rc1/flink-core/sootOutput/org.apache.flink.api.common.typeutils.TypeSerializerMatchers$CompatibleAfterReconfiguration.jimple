final class org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private final org.hamcrest.Matcher reconfiguredSerializerMatcher;

    private void <init>(org.hamcrest.Matcher)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration r0;
        org.hamcrest.Matcher r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.hamcrest.Matcher) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: org.hamcrest.Matcher reconfiguredSerializerMatcher> = $r3;

        return;
    }

    protected boolean matchesSafely(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility, org.hamcrest.Description)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r1;
        org.hamcrest.Description r2;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        boolean $z0, $z1;
        org.hamcrest.Matcher $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        r2 := @parameter1: org.hamcrest.Description;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z0 != 0 goto label1;

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("serializer schema is not compatible with a reconfigured serializer");

        return 0;

     label1:
        r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: org.hamcrest.Matcher reconfiguredSerializerMatcher>;

        $z1 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r3);

        if $z1 != 0 goto label2;

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: org.hamcrest.Matcher reconfiguredSerializerMatcher>;

        interfaceinvoke $r5.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r3, r2);

        return 0;

     label2:
        return 1;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration r0;
        org.hamcrest.Description r1, $r2, $r3;
        org.hamcrest.Matcher $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("type serializer schema that is compatible after reconfiguration,");

        $r3 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("with a reconfigured serializer matching ");

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: org.hamcrest.Matcher reconfiguredSerializerMatcher>;

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r4);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: boolean matchesSafely(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

    void <init>(org.hamcrest.Matcher, org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration r0;
        org.hamcrest.Matcher r1;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1 r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$CompatibleAfterReconfiguration: void <init>(org.hamcrest.Matcher)>(r1);

        return;
    }
}
