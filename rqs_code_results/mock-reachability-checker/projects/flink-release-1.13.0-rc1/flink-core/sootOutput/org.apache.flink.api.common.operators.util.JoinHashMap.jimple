public class org.apache.flink.api.common.operators.util.JoinHashMap extends org.apache.commons.collections.map.AbstractHashedMap
{
    private final org.apache.flink.api.common.typeutils.TypeSerializer buildSerializer;
    private final org.apache.flink.api.common.typeutils.TypeComparator buildComparator;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeComparator r2;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractHashedMap: void <init>(int)>(64);

        r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeSerializer buildSerializer> = r1;

        r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeComparator buildComparator> = r2;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getBuildSerializer()
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap;

        $r1 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeSerializer buildSerializer>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator getBuildComparator()
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.flink.api.common.typeutils.TypeComparator $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap;

        $r1 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeComparator buildComparator>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.util.JoinHashMap$Prober createProber(org.apache.flink.api.common.typeutils.TypeComparator, org.apache.flink.api.common.typeutils.TypePairComparator)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.api.common.typeutils.TypePairComparator r2;
        org.apache.flink.api.common.operators.util.JoinHashMap$Prober $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypePairComparator;

        $r3 = new org.apache.flink.api.common.operators.util.JoinHashMap$Prober;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: void <init>(org.apache.flink.api.common.operators.util.JoinHashMap,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypePairComparator)>(r0, r1, r2);

        return $r3;
    }

    public void insertOrReplace(java.lang.Object)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        java.lang.Object r1, $r8;
        int i0, i1, $i2, $i3, $i4;
        org.apache.flink.api.common.typeutils.TypeComparator $r2, $r5, $r7;
        java.lang.Integer $r3;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r4, $r6;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r10;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeComparator buildComparator>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int hash(java.lang.Object)>($r3);

        $r4 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        $i3 = lengthof $r4;

        i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int hashIndex(int,int)>(i0, $i3);

        $r5 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeComparator buildComparator>;

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r1);

        $r6 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        r10 = $r6[i1];

     label1:
        if r10 == null goto label3;

        $i4 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int entryHashCode(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r10);

        if $i4 != i0 goto label2;

        $r7 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.flink.api.common.typeutils.TypeComparator buildComparator>;

        $r8 = virtualinvoke r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>($r8);

        if $z0 == 0 goto label2;

        virtualinvoke r10.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object setValue(java.lang.Object)>(r1);

        return;

     label2:
        r10 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry entryNext(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r10);

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: void addMapping(int,int,java.lang.Object,java.lang.Object)>(i1, i0, null, r1);

        return;
    }

    static int access$000(org.apache.flink.api.common.operators.util.JoinHashMap, java.lang.Object)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        java.lang.Object r1;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter1: java.lang.Object;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int hash(java.lang.Object)>(r1);

        return $i0;
    }

    static org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] access$100(org.apache.flink.api.common.operators.util.JoinHashMap)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        $r1 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        return $r1;
    }

    static int access$200(org.apache.flink.api.common.operators.util.JoinHashMap, int, int)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        int i0, i1, $i2;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int hashIndex(int,int)>(i0, i1);

        return $i2;
    }

    static org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] access$300(org.apache.flink.api.common.operators.util.JoinHashMap)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r1;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        $r1 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] data>;

        return $r1;
    }

    static int access$400(org.apache.flink.api.common.operators.util.JoinHashMap, org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter1: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: int entryHashCode(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r1);

        return $i0;
    }

    static org.apache.commons.collections.map.AbstractHashedMap$HashEntry access$500(org.apache.flink.api.common.operators.util.JoinHashMap, org.apache.commons.collections.map.AbstractHashedMap$HashEntry)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap r0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r1, $r2;

        r0 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        r1 := @parameter1: org.apache.commons.collections.map.AbstractHashedMap$HashEntry;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry entryNext(org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>(r1);

        return $r2;
    }
}
