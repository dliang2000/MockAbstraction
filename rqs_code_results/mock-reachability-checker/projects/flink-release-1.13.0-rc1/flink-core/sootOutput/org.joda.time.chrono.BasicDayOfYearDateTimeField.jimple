final class org.joda.time.chrono.BasicDayOfYearDateTimeField extends org.joda.time.field.PreciseDurationDateTimeField
{
    private static final long serialVersionUID;
    private final org.joda.time.chrono.BasicChronology iChronology;

    void <init>(org.joda.time.chrono.BasicChronology, org.joda.time.DurationField)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology r1;
        org.joda.time.DurationField r2;
        org.joda.time.DateTimeFieldType $r3;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        r2 := @parameter1: org.joda.time.DurationField;

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>();

        specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r3, r2);

        r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = r1;

        return;
    }

    public int get(long)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfYear(long)>(l0);

        return $i1;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        return 1;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>();

        return $i0;
    }

    public int getMaximumValue(long)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        long l0;
        int i1, $i2;
        org.joda.time.chrono.BasicChronology $r1, $r2;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>(i1);

        return $i2;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, $i1, $i2;
        org.joda.time.DateTimeFieldType $r2, $r4;
        boolean $z0;
        org.joda.time.chrono.BasicChronology $r3, $r5;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $z0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $r5 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>(i0);

        return $i2;

     label1:
        $r3 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>();

        return $i1;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        int i0, i1, $i2, $i3, i4;
        org.joda.time.chrono.BasicChronology $r3, $r6;
        org.joda.time.DateTimeFieldType $r4, $r5;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i4);

        $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        if $r4 != $r5 goto label2;

        i1 = r2[i4];

        $r6 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYear(int)>(i1);

        return $i3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>();

        return $i2;
    }

    protected int getMaximumValueForSet(long, int)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        long l0;
        int i1, i2, $i3, $i4;
        org.joda.time.chrono.BasicChronology $r1;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInYearMax()>();

        i2 = $i3 - 1;

        if i1 > i2 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: int getMaximumValue(long)>(l0);

        goto label3;

     label2:
        $i4 = i2;

     label3:
        return $i4;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1;
        boolean $z0;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $z0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: boolean isLeapDay(long)>(l0);

        return $z0;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicDayOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.BasicDayOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfYear()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.BasicDayOfYearDateTimeField: long serialVersionUID> = -6821236822336841037L;

        return;
    }
}
