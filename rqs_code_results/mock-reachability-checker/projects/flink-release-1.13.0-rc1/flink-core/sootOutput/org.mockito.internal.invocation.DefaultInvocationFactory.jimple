public class org.mockito.internal.invocation.DefaultInvocationFactory extends java.lang.Object implements org.mockito.invocation.InvocationFactory
{

    public void <init>()
    {
        org.mockito.internal.invocation.DefaultInvocationFactory r0;

        r0 := @this: org.mockito.internal.invocation.DefaultInvocationFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient org.mockito.invocation.Invocation createInvocation(java.lang.Object, org.mockito.mock.MockCreationSettings, java.lang.reflect.Method, java.util.concurrent.Callable, java.lang.Object[])
    {
        org.mockito.internal.invocation.DefaultInvocationFactory r0;
        java.lang.Object r1;
        org.mockito.mock.MockCreationSettings r2;
        java.lang.reflect.Method r3;
        java.util.concurrent.Callable r4;
        java.lang.Object[] r5;
        org.mockito.internal.invocation.RealMethod$FromCallable $r7;
        org.mockito.invocation.Invocation $r8;

        r0 := @this: org.mockito.internal.invocation.DefaultInvocationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.mockito.mock.MockCreationSettings;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: java.util.concurrent.Callable;

        r5 := @parameter4: java.lang.Object[];

        $r7 = new org.mockito.internal.invocation.RealMethod$FromCallable;

        specialinvoke $r7.<org.mockito.internal.invocation.RealMethod$FromCallable: void <init>(java.util.concurrent.Callable)>(r4);

        $r8 = specialinvoke r0.<org.mockito.internal.invocation.DefaultInvocationFactory: org.mockito.invocation.Invocation createInvocation(java.lang.Object,org.mockito.mock.MockCreationSettings,java.lang.reflect.Method,org.mockito.internal.invocation.RealMethod,java.lang.Object[])>(r1, r2, r3, $r7, r5);

        return $r8;
    }

    public transient org.mockito.invocation.Invocation createInvocation(java.lang.Object, org.mockito.mock.MockCreationSettings, java.lang.reflect.Method, org.mockito.invocation.InvocationFactory$RealMethodBehavior, java.lang.Object[])
    {
        org.mockito.internal.invocation.DefaultInvocationFactory r0;
        java.lang.Object r1;
        org.mockito.mock.MockCreationSettings r2;
        java.lang.reflect.Method r3;
        org.mockito.invocation.InvocationFactory$RealMethodBehavior r4;
        java.lang.Object[] r5;
        org.mockito.internal.invocation.RealMethod$FromBehavior $r7;
        org.mockito.invocation.Invocation $r8;

        r0 := @this: org.mockito.internal.invocation.DefaultInvocationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.mockito.mock.MockCreationSettings;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: org.mockito.invocation.InvocationFactory$RealMethodBehavior;

        r5 := @parameter4: java.lang.Object[];

        $r7 = new org.mockito.internal.invocation.RealMethod$FromBehavior;

        specialinvoke $r7.<org.mockito.internal.invocation.RealMethod$FromBehavior: void <init>(org.mockito.invocation.InvocationFactory$RealMethodBehavior)>(r4);

        $r8 = specialinvoke r0.<org.mockito.internal.invocation.DefaultInvocationFactory: org.mockito.invocation.Invocation createInvocation(java.lang.Object,org.mockito.mock.MockCreationSettings,java.lang.reflect.Method,org.mockito.internal.invocation.RealMethod,java.lang.Object[])>(r1, r2, r3, $r7, r5);

        return $r8;
    }

    private org.mockito.invocation.Invocation createInvocation(java.lang.Object, org.mockito.mock.MockCreationSettings, java.lang.reflect.Method, org.mockito.internal.invocation.RealMethod, java.lang.Object[])
    {
        org.mockito.internal.invocation.DefaultInvocationFactory r0;
        java.lang.Object r1;
        org.mockito.mock.MockCreationSettings r2;
        java.lang.reflect.Method r3;
        org.mockito.internal.invocation.RealMethod r4;
        java.lang.Object[] r5;
        org.mockito.internal.invocation.InterceptedInvocation $r6;

        r0 := @this: org.mockito.internal.invocation.DefaultInvocationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.mockito.mock.MockCreationSettings;

        r3 := @parameter2: java.lang.reflect.Method;

        r4 := @parameter3: org.mockito.internal.invocation.RealMethod;

        r5 := @parameter4: java.lang.Object[];

        $r6 = staticinvoke <org.mockito.internal.invocation.DefaultInvocationFactory: org.mockito.internal.invocation.InterceptedInvocation createInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.mockito.internal.invocation.RealMethod,org.mockito.mock.MockCreationSettings)>(r1, r3, r5, r4, r2);

        return $r6;
    }

    public static org.mockito.internal.invocation.InterceptedInvocation createInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.internal.invocation.RealMethod, org.mockito.mock.MockCreationSettings, org.mockito.invocation.Location)
    {
        java.lang.Object r0;
        java.lang.reflect.Method r1;
        java.lang.Object[] r2;
        org.mockito.internal.invocation.RealMethod r3;
        org.mockito.mock.MockCreationSettings r4;
        org.mockito.invocation.Location r5;
        org.mockito.internal.invocation.InterceptedInvocation $r6;
        org.mockito.internal.invocation.mockref.MockWeakReference $r7;
        org.mockito.internal.invocation.MockitoMethod $r8;
        int $i0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: org.mockito.internal.invocation.RealMethod;

        r4 := @parameter4: org.mockito.mock.MockCreationSettings;

        r5 := @parameter5: org.mockito.invocation.Location;

        $r6 = new org.mockito.internal.invocation.InterceptedInvocation;

        $r7 = new org.mockito.internal.invocation.mockref.MockWeakReference;

        specialinvoke $r7.<org.mockito.internal.invocation.mockref.MockWeakReference: void <init>(java.lang.Object)>(r0);

        $r8 = staticinvoke <org.mockito.internal.invocation.DefaultInvocationFactory: org.mockito.internal.invocation.MockitoMethod createMockitoMethod(java.lang.reflect.Method,org.mockito.mock.MockCreationSettings)>(r1, r4);

        $i0 = staticinvoke <org.mockito.internal.progress.SequenceNumber: int next()>();

        specialinvoke $r6.<org.mockito.internal.invocation.InterceptedInvocation: void <init>(org.mockito.internal.invocation.mockref.MockReference,org.mockito.internal.invocation.MockitoMethod,java.lang.Object[],org.mockito.internal.invocation.RealMethod,org.mockito.invocation.Location,int)>($r7, $r8, r2, r3, r5, $i0);

        return $r6;
    }

    private static org.mockito.internal.invocation.InterceptedInvocation createInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[], org.mockito.internal.invocation.RealMethod, org.mockito.mock.MockCreationSettings)
    {
        java.lang.Object r0;
        java.lang.reflect.Method r1;
        java.lang.Object[] r2;
        org.mockito.internal.invocation.RealMethod r3;
        org.mockito.mock.MockCreationSettings r4;
        org.mockito.internal.debugging.LocationImpl $r5;
        org.mockito.internal.invocation.InterceptedInvocation $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

        r3 := @parameter3: org.mockito.internal.invocation.RealMethod;

        r4 := @parameter4: org.mockito.mock.MockCreationSettings;

        $r5 = new org.mockito.internal.debugging.LocationImpl;

        specialinvoke $r5.<org.mockito.internal.debugging.LocationImpl: void <init>()>();

        $r6 = staticinvoke <org.mockito.internal.invocation.DefaultInvocationFactory: org.mockito.internal.invocation.InterceptedInvocation createInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],org.mockito.internal.invocation.RealMethod,org.mockito.mock.MockCreationSettings,org.mockito.invocation.Location)>(r0, r1, r2, r3, r4, $r5);

        return $r6;
    }

    private static org.mockito.internal.invocation.MockitoMethod createMockitoMethod(java.lang.reflect.Method, org.mockito.mock.MockCreationSettings)
    {
        java.lang.reflect.Method r0;
        org.mockito.mock.MockCreationSettings r1;
        boolean $z0;
        org.mockito.internal.creation.DelegatingMethod $r2;
        org.mockito.internal.invocation.SerializableMethod $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: org.mockito.mock.MockCreationSettings;

        $z0 = interfaceinvoke r1.<org.mockito.mock.MockCreationSettings: boolean isSerializable()>();

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.internal.invocation.SerializableMethod;

        specialinvoke $r3.<org.mockito.internal.invocation.SerializableMethod: void <init>(java.lang.reflect.Method)>(r0);

        return $r3;

     label1:
        $r2 = new org.mockito.internal.creation.DelegatingMethod;

        specialinvoke $r2.<org.mockito.internal.creation.DelegatingMethod: void <init>(java.lang.reflect.Method)>(r0);

        return $r2;
    }
}
