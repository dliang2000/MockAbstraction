class org.powermock.configuration.support.ConfigurationMapper extends java.lang.Object
{
    private final java.lang.Class configurationClass;
    private final org.powermock.configuration.Configuration configuration;
    private final org.powermock.configuration.support.ValueAliases aliases;

    void <init>(java.lang.Class, org.powermock.configuration.Configuration, org.powermock.configuration.support.ValueAliases)
    {
        org.powermock.configuration.support.ConfigurationMapper r0;
        java.lang.Class r1;
        org.powermock.configuration.Configuration r2;
        org.powermock.configuration.support.ValueAliases r3;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.powermock.configuration.Configuration;

        r3 := @parameter2: org.powermock.configuration.support.ValueAliases;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.configuration.support.ConfigurationMapper: java.lang.Class configurationClass> = r1;

        r0.<org.powermock.configuration.support.ConfigurationMapper: org.powermock.configuration.Configuration configuration> = r2;

        r0.<org.powermock.configuration.support.ConfigurationMapper: org.powermock.configuration.support.ValueAliases aliases> = r3;

        return;
    }

    public void map(java.util.Properties)
    {
        org.powermock.configuration.support.ConfigurationMapper r0;
        java.util.Properties r1;
        java.beans.PropertyDescriptor[] r2;
        int i0, i1;
        java.beans.PropertyDescriptor r4;
        java.lang.Class $r5;
        java.lang.reflect.Method $r6;
        java.lang.Exception $r7;
        org.powermock.PowerMockInternalException $r8;
        java.beans.BeanInfo r9;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper;

        r1 := @parameter0: java.util.Properties;

     label1:
        $r5 = r0.<org.powermock.configuration.support.ConfigurationMapper: java.lang.Class configurationClass>;

        r9 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>($r5, class "Ljava/lang/Object;");

        r2 = interfaceinvoke r9.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r2[i1];

        $r6 = virtualinvoke r4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r6 == null goto label3;

        specialinvoke r0.<org.powermock.configuration.support.ConfigurationMapper: void mapProperty(java.beans.PropertyDescriptor,java.util.Properties)>(r4, r1);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        $r8 = new org.powermock.PowerMockInternalException;

        specialinvoke $r8.<org.powermock.PowerMockInternalException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    private void mapProperty(java.beans.PropertyDescriptor, java.util.Properties)
    {
        org.powermock.configuration.support.ConfigurationMapper r0;
        java.beans.PropertyDescriptor r1;
        java.util.Properties r2;
        java.lang.String r4, $r8, $r10, $r12;
        org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey $r5;
        java.lang.Class $r6;
        org.powermock.configuration.ConfigurationType $r7;
        org.powermock.configuration.support.ValueAliases $r9;
        java.lang.Object $r11;
        org.powermock.configuration.support.ConfigurationMapper$PropertyWriter $r13;
        org.powermock.configuration.Configuration $r14;

        r0 := @this: org.powermock.configuration.support.ConfigurationMapper;

        r1 := @parameter0: java.beans.PropertyDescriptor;

        r2 := @parameter1: java.util.Properties;

        $r5 = new org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey;

        $r6 = r0.<org.powermock.configuration.support.ConfigurationMapper: java.lang.Class configurationClass>;

        $r7 = staticinvoke <org.powermock.configuration.ConfigurationType: org.powermock.configuration.ConfigurationType forClass(java.lang.Class)>($r6);

        $r8 = virtualinvoke r1.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        specialinvoke $r5.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: void <init>(org.powermock.configuration.ConfigurationType,java.lang.String,org.powermock.configuration.support.ConfigurationMapper$1)>($r7, $r8, null);

        $r9 = r0.<org.powermock.configuration.support.ConfigurationMapper: org.powermock.configuration.support.ValueAliases aliases>;

        $r10 = virtualinvoke $r5.<org.powermock.configuration.support.ConfigurationMapper$ConfigurationKey: java.lang.String toString()>();

        $r11 = virtualinvoke r2.<java.util.Properties: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.String) $r11;

        r4 = virtualinvoke $r9.<org.powermock.configuration.support.ValueAliases: java.lang.String findValue(java.lang.String)>($r12);

        $r13 = staticinvoke <org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: org.powermock.configuration.support.ConfigurationMapper$PropertyWriter access$100(java.beans.PropertyDescriptor)>(r1);

        $r14 = r0.<org.powermock.configuration.support.ConfigurationMapper: org.powermock.configuration.Configuration configuration>;

        virtualinvoke $r13.<org.powermock.configuration.support.ConfigurationMapper$PropertyWriter: void writeProperty(java.beans.PropertyDescriptor,java.lang.Object,java.lang.String)>(r1, $r14, r4);

        return;
    }
}
