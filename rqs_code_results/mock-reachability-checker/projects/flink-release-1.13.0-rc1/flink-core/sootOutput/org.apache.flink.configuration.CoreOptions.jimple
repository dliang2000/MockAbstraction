public class org.apache.flink.configuration.CoreOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption CLASSLOADER_RESOLVE_ORDER;
    public static final org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS;
    public static final org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL;
    public static final org.apache.flink.configuration.ConfigOption FAIL_ON_USER_CLASS_LOADING_METASPACE_OOM;
    public static final org.apache.flink.configuration.ConfigOption CHECK_LEAKED_CLASSLOADER;
    public static final org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS;
    public static final org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL;
    public static final org.apache.flink.configuration.ConfigOption FLINK_JVM_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_JM_JVM_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_TM_JVM_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_HS_JVM_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_CLI_JVM_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_LOG_DIR;
    public static final org.apache.flink.configuration.ConfigOption FLINK_PID_DIR;
    public static final org.apache.flink.configuration.ConfigOption FLINK_LOG_MAX;
    public static final org.apache.flink.configuration.ConfigOption FLINK_SSH_OPTIONS;
    public static final org.apache.flink.configuration.ConfigOption FLINK_HADOOP_CONF_DIR;
    public static final org.apache.flink.configuration.ConfigOption FLINK_YARN_CONF_DIR;
    public static final org.apache.flink.configuration.ConfigOption FLINK_HBASE_CONF_DIR;
    public static final org.apache.flink.configuration.ConfigOption TMP_DIRS;
    public static final org.apache.flink.configuration.ConfigOption DEFAULT_PARALLELISM;
    public static final org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME;
    public static final org.apache.flink.configuration.ConfigOption ALLOWED_FALLBACK_FILESYSTEMS;
    public static final org.apache.flink.configuration.ConfigOption FILESYTEM_DEFAULT_OVERRIDE;
    public static final org.apache.flink.configuration.ConfigOption FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY;

    public void <init>()
    {
        org.apache.flink.configuration.CoreOptions r0;

        r0 := @this: org.apache.flink.configuration.CoreOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] getParentFirstLoaderPatterns(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, r2;
        org.apache.flink.configuration.ConfigOption $r3, $r4;
        java.lang.String[] $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r3 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r3);

        $r4 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL>;

        r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r4);

        $r5 = staticinvoke <org.apache.flink.configuration.CoreOptions: java.lang.String[] parseParentFirstLoaderPatterns(java.lang.String,java.lang.String)>(r1, r2);

        return $r5;
    }

    public static java.lang.String[] getPluginParentFirstLoaderPatterns(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1, r2;
        org.apache.flink.configuration.ConfigOption $r3, $r4;
        java.lang.String[] $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r3 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        r1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r3);

        $r4 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL>;

        r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(org.apache.flink.configuration.ConfigOption)>($r4);

        $r5 = staticinvoke <org.apache.flink.configuration.CoreOptions: java.lang.String[] parseParentFirstLoaderPatterns(java.lang.String,java.lang.String)>(r1, r2);

        return $r5;
    }

    private static java.lang.String[] parseParentFirstLoaderPatterns(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter r2, $r3;
        java.lang.Iterable $r4, $r5, $r6;
        java.lang.Object[] $r7;
        java.lang.String[] $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter on(char)>(59);

        r2 = virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter omitEmptyStrings()>();

        $r4 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r0);

        $r5 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r1);

        $r6 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable,java.lang.Iterable)>($r4, $r5);

        $r7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.collect.Iterables: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Class)>($r6, class "Ljava/lang/String;");

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static org.apache.flink.configuration.ConfigOption fileSystemConnectionLimit(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6;
        java.lang.Integer $r7;
        org.apache.flink.configuration.ConfigOption $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fs.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit.total");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        return $r8;
    }

    public static org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitIn(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6;
        java.lang.Integer $r7;
        org.apache.flink.configuration.ConfigOption $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fs.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit.input");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        return $r8;
    }

    public static org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitOut(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6;
        java.lang.Integer $r7;
        org.apache.flink.configuration.ConfigOption $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fs.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit.output");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        return $r8;
    }

    public static org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitTimeout(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6;
        java.lang.Long $r7;
        org.apache.flink.configuration.ConfigOption $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fs.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit.timeout");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>($r5);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        return $r8;
    }

    public static org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitStreamInactivityTimeout(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r6;
        java.lang.Long $r7;
        org.apache.flink.configuration.ConfigOption $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fs.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit.stream-timeout");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>($r5);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        $r8 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r7);

        return $r8;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r3, $r8, $r18, $r23, $r28, $r32, $r43, $r50, $r57, $r64, $r71, $r78, $r81, $r84, $r88, $r91, $r94, $r97, $r100, $r106, $r110, $r113, $r117, $r121;
        org.apache.flink.configuration.ConfigOption $r1, $r2, $r4, $r6, $r7, $r9, $r12, $r17, $r21, $r22, $r26, $r27, $r30, $r31, $r34, $r37, $r42, $r45, $r49, $r52, $r56, $r59, $r63, $r66, $r70, $r73, $r77, $r79, $r80, $r82, $r83, $r86, $r87, $r89, $r90, $r92, $r93, $r95, $r96, $r98, $r99, $r102, $r104, $r105, $r108, $r109, $r111, $r112, $r115, $r116, $r119, $r120, $r123, $r124;
        java.lang.String[] $r5, $r103;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r35, $r36, $r39, $r40;
        java.lang.String $r13, $r16, $r38, $r41, $r101;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r19, $r24, $r29, $r33, $r44, $r51, $r58, $r65, $r72, $r114;
        java.lang.Boolean $r20, $r25, $r118, $r122;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r46, $r47, $r53, $r54, $r60, $r61, $r67, $r68, $r74, $r75;
        org.apache.flink.configuration.description.Description $r48, $r55, $r62, $r69, $r76;
        java.lang.Integer $r85, $r107;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("classloader.resolve-order");

        $r1 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("child-first");

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the class resolution strategy when loading classes from user code, meaning whether to first check the user code jar (\"child-first\") or the application classpath (\"parent-first\"). The default settings indicate to load classes first from the user code jar, which means that user code jars can include and load different dependencies than Flink uses (transitively).");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption CLASSLOADER_RESOLVE_ORDER> = $r2;

        $r3 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("classloader.parent-first-patterns.default");

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("java.;scala.;org.apache.flink.;com.esotericsoftware.kryo;org.apache.hadoop.;javax.annotation.;org.slf4j;org.apache.log4j;org.apache.logging;org.apache.commons.logging;ch.qos.logback;org.xml;javax.xml;org.apache.xerces;org.w3c");

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "classloader.parent-first-patterns";

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r5);

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A (semicolon-separated) list of patterns that specifies which classes should always be resolved through the parent ClassLoader first. A pattern is a simple prefix that is checked against the fully qualified class name. This setting should generally not be modified. To add another pattern we recommend to use \"classloader.parent-first-patterns.additional\" instead.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS> = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("classloader.parent-first-patterns.additional");

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A (semicolon-separated) list of patterns that specifies which classes should always be resolved through the parent ClassLoader first. A pattern is a simple prefix that is checked against the fully qualified class name. These patterns are appended to \"");

        $r12 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        $r13 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = virtualinvoke $r9.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r16);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL> = $r17;

        $r18 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("classloader.fail-on-metaspace-oom-error");

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r21 = virtualinvoke $r19.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fail Flink JVM processes if \'OutOfMemoryError: Metaspace\' is thrown while trying to load a user code class.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FAIL_ON_USER_CLASS_LOADING_METASPACE_OOM> = $r22;

        $r23 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("classloader.check-leaked-classloader");

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r26 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Fails attempts at loading classes if the user classloader of a job is used after it has terminated.\nThis is usually caused by the classloader being leaked by lingering threads or misbehaving libraries, which may also result in the classloader being used by other jobs.\nThis check should only be disabled if such a leak prevents further jobs from running.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption CHECK_LEAKED_CLASSLOADER> = $r27;

        $r28 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("plugin.classloader.parent-first-patterns.default");

        $r29 = virtualinvoke $r28.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r30 = virtualinvoke $r29.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("java.;scala.;org.apache.flink.;javax.annotation.;org.slf4j;org.apache.log4j;org.apache.logging;org.apache.commons.logging;ch.qos.logback");

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A (semicolon-separated) list of patterns that specifies which classes should always be resolved through the plugin parent ClassLoader first. A pattern is a simple prefix that is checked  against the fully qualified class name. This setting should generally not be modified. To add another  pattern we recommend to use \"plugin.classloader.parent-first-patterns.additional\" instead.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS> = $r31;

        $r32 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("plugin.classloader.parent-first-patterns.additional");

        $r33 = virtualinvoke $r32.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r34 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A (semicolon-separated) list of patterns that specifies which classes should always be resolved through the plugin parent ClassLoader first. A pattern is a simple prefix that is checked  against the fully qualified class name. These patterns are appended to \"");

        $r37 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        $r38 = virtualinvoke $r37.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>($r41);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL> = $r42;

        $r43 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.java.opts");

        $r44 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r45 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r46 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r47 = virtualinvoke $r46.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Java options to start the JVM of all Flink processes with.");

        $r48 = virtualinvoke $r47.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r49 = virtualinvoke $r45.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r48);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_JVM_OPTIONS> = $r49;

        $r50 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.java.opts.jobmanager");

        $r51 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r52 = virtualinvoke $r51.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r53 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r54 = virtualinvoke $r53.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Java options to start the JVM of the JobManager with.");

        $r55 = virtualinvoke $r54.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r56 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r55);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_JM_JVM_OPTIONS> = $r56;

        $r57 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.java.opts.taskmanager");

        $r58 = virtualinvoke $r57.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r59 = virtualinvoke $r58.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r60 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r61 = virtualinvoke $r60.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Java options to start the JVM of the TaskManager with.");

        $r62 = virtualinvoke $r61.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r63 = virtualinvoke $r59.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r62);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_TM_JVM_OPTIONS> = $r63;

        $r64 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.java.opts.historyserver");

        $r65 = virtualinvoke $r64.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r66 = virtualinvoke $r65.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r67 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r68 = virtualinvoke $r67.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Java options to start the JVM of the HistoryServer with.");

        $r69 = virtualinvoke $r68.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r70 = virtualinvoke $r66.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r69);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_HS_JVM_OPTIONS> = $r70;

        $r71 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.java.opts.client");

        $r72 = virtualinvoke $r71.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r73 = virtualinvoke $r72.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r74 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r75 = virtualinvoke $r74.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String)>("Java options to start the JVM of the Flink Client with.");

        $r76 = virtualinvoke $r75.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r77 = virtualinvoke $r73.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r76);

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_CLI_JVM_OPTIONS> = $r77;

        $r78 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.log.dir");

        $r79 = virtualinvoke $r78.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r80 = virtualinvoke $r79.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the directory where the Flink logs are saved. It has to be an absolute path. (Defaults to the log directory under Flink\u2019s home)");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_LOG_DIR> = $r80;

        $r81 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.pid.dir");

        $r82 = virtualinvoke $r81.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("/tmp");

        $r83 = virtualinvoke $r82.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines the directory where the flink-<host>-<process>.pid files are saved.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_PID_DIR> = $r83;

        $r84 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.log.max");

        $r85 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r86 = virtualinvoke $r84.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r85);

        $r87 = virtualinvoke $r86.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The maximum number of old log files to keep.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_LOG_MAX> = $r87;

        $r88 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.ssh.opts");

        $r89 = virtualinvoke $r88.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r90 = virtualinvoke $r89.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Additional command line options passed to SSH clients when starting or stopping JobManager, TaskManager, and Zookeeper services (start-cluster.sh, stop-cluster.sh, start-zookeeper-quorum.sh, stop-zookeeper-quorum.sh).");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_SSH_OPTIONS> = $r90;

        $r91 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.hadoop.conf.dir");

        $r92 = virtualinvoke $r91.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r93 = virtualinvoke $r92.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Path to hadoop configuration directory. It is required to read HDFS and/or YARN configuration. You can also set it via environment variable.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_HADOOP_CONF_DIR> = $r93;

        $r94 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.yarn.conf.dir");

        $r95 = virtualinvoke $r94.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r96 = virtualinvoke $r95.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Path to yarn configuration directory. It is required to run flink on YARN. You can also set it via environment variable.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_YARN_CONF_DIR> = $r96;

        $r97 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("env.hbase.conf.dir");

        $r98 = virtualinvoke $r97.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r99 = virtualinvoke $r98.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Path to hbase configuration directory. It is required to read HBASE configuration. You can also set it via environment variable.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FLINK_HBASE_CONF_DIR> = $r99;

        $r100 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("io.tmp.dirs");

        $r101 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        $r102 = virtualinvoke $r100.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r101);

        $r103 = newarray (java.lang.String)[1];

        $r103[0] = "taskmanager.tmp.dirs";

        $r104 = virtualinvoke $r102.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDeprecatedKeys(java.lang.String[])>($r103);

        $r105 = virtualinvoke $r104.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Directories for temporary files, separated by\",\", \"|\", or the system\'s java.io.File.pathSeparator.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption TMP_DIRS> = $r105;

        $r106 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("parallelism.default");

        $r107 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r108 = virtualinvoke $r106.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r107);

        $r109 = virtualinvoke $r108.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Default parallelism for jobs.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_PARALLELISM> = $r109;

        $r110 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("fs.default-scheme");

        $r111 = virtualinvoke $r110.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r112 = virtualinvoke $r111.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The default filesystem scheme, used for paths that do not declare a scheme explicitly. May contain an authority, e.g. host:port in case of an HDFS NameNode.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption DEFAULT_FILESYSTEM_SCHEME> = $r112;

        $r113 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("fs.allowed-fallback-filesystems");

        $r114 = virtualinvoke $r113.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder stringType()>();

        $r115 = virtualinvoke $r114.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>("");

        $r116 = virtualinvoke $r115.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("A (semicolon-separated) list of file schemes, for which Hadoop can be used instead of an appropriate Flink plugin. (example: s3;wasb)");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALLOWED_FALLBACK_FILESYSTEMS> = $r116;

        $r117 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("fs.overwrite-files");

        $r118 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r119 = virtualinvoke $r117.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r118);

        $r120 = virtualinvoke $r119.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Specifies whether file output writers should overwrite existing files by default. Set to \"true\" to overwrite by default,\"false\" otherwise.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FILESYTEM_DEFAULT_OVERRIDE> = $r120;

        $r121 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("fs.output.always-create-directory");

        $r122 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r123 = virtualinvoke $r121.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r122);

        $r124 = virtualinvoke $r123.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("File writers running with a parallelism larger than one create a directory for the output file path and put the different result files (one per parallel writer task) into that directory. If this option is set to \"true\", writers with a parallelism of 1 will also create a directory and place a single result file into it. If the option is set to \"false\", the writer will directly create the file directly at the output path, without creating a containing directory.");

        <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY> = $r124;

        return;
    }
}
