public class org.apache.flink.types.DoubleValue extends java.lang.Object implements java.lang.Comparable, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue, org.apache.flink.types.Key
{
    private static final long serialVersionUID;
    private double value;

    public void <init>()
    {
        org.apache.flink.types.DoubleValue r0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.DoubleValue: double value> = 0.0;

        return;
    }

    public void <init>(double)
    {
        org.apache.flink.types.DoubleValue r0;
        double d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.DoubleValue: double value> = d0;

        return;
    }

    public double getValue()
    {
        org.apache.flink.types.DoubleValue r0;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        return $d0;
    }

    public void setValue(double)
    {
        org.apache.flink.types.DoubleValue r0;
        double d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        d0 := @parameter0: double;

        r0.<org.apache.flink.types.DoubleValue: double value> = d0;

        return;
    }

    public void setValue(org.apache.flink.types.DoubleValue)
    {
        org.apache.flink.types.DoubleValue r0, r1;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.types.DoubleValue;

        $d0 = r1.<org.apache.flink.types.DoubleValue: double value>;

        r0.<org.apache.flink.types.DoubleValue: double value> = $d0;

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.DoubleValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $d0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: double readDouble()>();

        r0.<org.apache.flink.types.DoubleValue: double value> = $d0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.DoubleValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeDouble(double)>($d0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.DoubleValue r0;
        double $d0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.DoubleValue;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        return $r1;
    }

    public int compareTo(org.apache.flink.types.DoubleValue)
    {
        org.apache.flink.types.DoubleValue r0, r1;
        double d0, $d1, $d2;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.types.DoubleValue;

        d0 = r1.<org.apache.flink.types.DoubleValue: double value>;

        $d1 = r0.<org.apache.flink.types.DoubleValue: double value>;

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $b2 = -1;

        goto label3;

     label1:
        $d2 = r0.<org.apache.flink.types.DoubleValue: double value>;

        $b1 = $d2 cmpl d0;

        if $b1 <= 0 goto label2;

        $b2 = 1;

        goto label3;

     label2:
        $b2 = 0;

     label3:
        return $b2;
    }

    public int hashCode()
    {
        org.apache.flink.types.DoubleValue r0;
        long l0, $l1, $l2;
        double $d0;
        int $i3, $i4;

        r0 := @this: org.apache.flink.types.DoubleValue;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        $i4 = 31 + $i3;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.DoubleValue r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.DoubleValue;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.types.DoubleValue) r1;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<org.apache.flink.types.DoubleValue: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.DoubleValue r0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        return 8;
    }

    public void copyTo(org.apache.flink.types.DoubleValue)
    {
        org.apache.flink.types.DoubleValue r0, r1;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.types.DoubleValue;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        r1.<org.apache.flink.types.DoubleValue: double value> = $d0;

        return;
    }

    public org.apache.flink.types.DoubleValue copy()
    {
        org.apache.flink.types.DoubleValue r0, $r1;
        double $d0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        $r1 = new org.apache.flink.types.DoubleValue;

        $d0 = r0.<org.apache.flink.types.DoubleValue: double value>;

        specialinvoke $r1.<org.apache.flink.types.DoubleValue: void <init>(double)>($d0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.DoubleValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 8);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.DoubleValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.DoubleValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.DoubleValue: int compareTo(org.apache.flink.types.DoubleValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.DoubleValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.DoubleValue) r1;

        virtualinvoke r0.<org.apache.flink.types.DoubleValue: void setValue(org.apache.flink.types.DoubleValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.DoubleValue r0, $r1;

        r0 := @this: org.apache.flink.types.DoubleValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.DoubleValue: org.apache.flink.types.DoubleValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.DoubleValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.DoubleValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.DoubleValue) r1;

        virtualinvoke r0.<org.apache.flink.types.DoubleValue: void copyTo(org.apache.flink.types.DoubleValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.DoubleValue: long serialVersionUID> = 1L;

        return;
    }
}
