public class org.apache.flink.api.java.typeutils.ValueTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation implements org.apache.flink.api.common.typeinfo.AtomicType
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo BOOLEAN_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo BYTE_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo CHAR_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo FLOAT_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo INT_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo NULL_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo SHORT_VALUE_TYPE_INFO;
    public static final org.apache.flink.api.java.typeutils.ValueTypeInfo STRING_VALUE_TYPE_INFO;
    private final java.lang.Class type;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Class r1, $r3, $r4, $r6;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r5;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type> = $r3;

        $r4 = class "Lorg/apache/flink/types/Value;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/Value;");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = class "Lorg/apache/flink/types/Value;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r5[0] = $r7;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "ValueTypeInfo can only be used for subclasses of %s", $r5);

        return;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        return $r1;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        return 0;
    }

    public boolean isBasicValueType()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/StringValue;");

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/ByteValue;");

        if $z1 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/ShortValue;");

        if $z2 != 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/CharValue;");

        if $z3 != 0 goto label1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/DoubleValue;");

        if $z4 != 0 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/FloatValue;");

        if $z5 != 0 goto label1;

        $r7 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z6 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/IntValue;");

        if $z6 != 0 goto label1;

        $r8 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z7 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/LongValue;");

        if $z7 != 0 goto label1;

        $r9 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z8 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/NullValue;");

        if $z8 != 0 goto label1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z9 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/BooleanValue;");

        if $z9 == 0 goto label2;

     label1:
        $z10 = 1;

        goto label3;

     label2:
        $z10 = 0;

     label3:
        return $z10;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        return 0;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        $r2 = class "Ljava/lang/Comparable;";

        $r1 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer $r24;
        org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer $r28;
        org.apache.flink.api.common.typeutils.base.StringValueSerializer $r29;
        org.apache.flink.api.common.typeutils.base.ShortValueSerializer $r30;
        org.apache.flink.api.common.typeutils.base.NullValueSerializer $r31;
        org.apache.flink.api.common.typeutils.base.LongValueSerializer $r32;
        org.apache.flink.api.common.typeutils.base.IntValueSerializer $r33;
        org.apache.flink.api.common.typeutils.base.FloatValueSerializer $r34;
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializer $r35;
        org.apache.flink.api.common.typeutils.base.CharValueSerializer $r36;
        org.apache.flink.api.common.typeutils.base.ByteValueSerializer $r37;
        org.apache.flink.api.common.typeutils.base.BooleanValueSerializer $r38;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = class "Lorg/apache/flink/types/BooleanValue;";

        $r2 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label01;

        $r38 = <org.apache.flink.api.common.typeutils.base.BooleanValueSerializer: org.apache.flink.api.common.typeutils.base.BooleanValueSerializer INSTANCE>;

        return $r38;

     label01:
        $r5 = class "Lorg/apache/flink/types/ByteValue;";

        $r4 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label02;

        $r37 = <org.apache.flink.api.common.typeutils.base.ByteValueSerializer: org.apache.flink.api.common.typeutils.base.ByteValueSerializer INSTANCE>;

        return $r37;

     label02:
        $r7 = class "Lorg/apache/flink/types/CharValue;";

        $r6 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z2 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z2 == 0 goto label03;

        $r36 = <org.apache.flink.api.common.typeutils.base.CharValueSerializer: org.apache.flink.api.common.typeutils.base.CharValueSerializer INSTANCE>;

        return $r36;

     label03:
        $r9 = class "Lorg/apache/flink/types/DoubleValue;";

        $r8 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z3 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z3 == 0 goto label04;

        $r35 = <org.apache.flink.api.common.typeutils.base.DoubleValueSerializer: org.apache.flink.api.common.typeutils.base.DoubleValueSerializer INSTANCE>;

        return $r35;

     label04:
        $r11 = class "Lorg/apache/flink/types/FloatValue;";

        $r10 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z4 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z4 == 0 goto label05;

        $r34 = <org.apache.flink.api.common.typeutils.base.FloatValueSerializer: org.apache.flink.api.common.typeutils.base.FloatValueSerializer INSTANCE>;

        return $r34;

     label05:
        $r13 = class "Lorg/apache/flink/types/IntValue;";

        $r12 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z5 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z5 == 0 goto label06;

        $r33 = <org.apache.flink.api.common.typeutils.base.IntValueSerializer: org.apache.flink.api.common.typeutils.base.IntValueSerializer INSTANCE>;

        return $r33;

     label06:
        $r15 = class "Lorg/apache/flink/types/LongValue;";

        $r14 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z6 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14);

        if $z6 == 0 goto label07;

        $r32 = <org.apache.flink.api.common.typeutils.base.LongValueSerializer: org.apache.flink.api.common.typeutils.base.LongValueSerializer INSTANCE>;

        return $r32;

     label07:
        $r17 = class "Lorg/apache/flink/types/NullValue;";

        $r16 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z7 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z7 == 0 goto label08;

        $r31 = <org.apache.flink.api.common.typeutils.base.NullValueSerializer: org.apache.flink.api.common.typeutils.base.NullValueSerializer INSTANCE>;

        return $r31;

     label08:
        $r19 = class "Lorg/apache/flink/types/ShortValue;";

        $r18 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z8 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r18);

        if $z8 == 0 goto label09;

        $r30 = <org.apache.flink.api.common.typeutils.base.ShortValueSerializer: org.apache.flink.api.common.typeutils.base.ShortValueSerializer INSTANCE>;

        return $r30;

     label09:
        $r21 = class "Lorg/apache/flink/types/StringValue;";

        $r20 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z9 = virtualinvoke $r21.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r20);

        if $z9 == 0 goto label10;

        $r29 = <org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.api.common.typeutils.base.StringValueSerializer INSTANCE>;

        return $r29;

     label10:
        $r23 = class "Lorg/apache/flink/types/CopyableValue;";

        $r22 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z10 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r22);

        if $z10 == 0 goto label11;

        $r26 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Lorg/apache/flink/types/CopyableValue;");

        $r28 = staticinvoke <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer createCopyableValueSerializer(java.lang.Class)>($r27);

        return $r28;

     label11:
        $r24 = new org.apache.flink.api.java.typeutils.runtime.ValueSerializer;

        $r25 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        specialinvoke $r24.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer: void <init>(java.lang.Class)>($r25);

        return $r24;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r27, $r41;
        org.apache.flink.api.java.typeutils.runtime.ValueComparator $r24;
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator $r26;
        org.apache.flink.api.common.typeutils.base.StringValueComparator $r28;
        org.apache.flink.api.common.typeutils.base.ShortValueComparator $r29;
        org.apache.flink.api.common.typeutils.base.NullValueComparator $r30;
        org.apache.flink.api.common.typeutils.base.LongValueComparator $r31;
        org.apache.flink.api.common.typeutils.base.IntValueComparator $r32;
        org.apache.flink.api.common.typeutils.base.FloatValueComparator $r33;
        org.apache.flink.api.common.typeutils.base.DoubleValueComparator $r34;
        org.apache.flink.api.common.typeutils.base.CharValueComparator $r35;
        org.apache.flink.api.common.typeutils.base.ByteValueComparator $r36;
        org.apache.flink.api.common.typeutils.base.BooleanValueComparator $r37;
        java.lang.RuntimeException $r38;
        java.lang.StringBuilder $r39, $r40, $r43, $r44;
        java.lang.String $r42, $r45;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $z1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: boolean isKeyType()>();

        if $z1 != 0 goto label01;

        $r38 = new java.lang.RuntimeException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The type ");

        $r41 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.String getName()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not Comparable.");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.RuntimeException: void <init>(java.lang.String)>($r45);

        throw $r38;

     label01:
        $r3 = class "Lorg/apache/flink/types/BooleanValue;";

        $r2 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z2 == 0 goto label02;

        $r37 = new org.apache.flink.api.common.typeutils.base.BooleanValueComparator;

        specialinvoke $r37.<org.apache.flink.api.common.typeutils.base.BooleanValueComparator: void <init>(boolean)>(z0);

        return $r37;

     label02:
        $r5 = class "Lorg/apache/flink/types/ByteValue;";

        $r4 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z3 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z3 == 0 goto label03;

        $r36 = new org.apache.flink.api.common.typeutils.base.ByteValueComparator;

        specialinvoke $r36.<org.apache.flink.api.common.typeutils.base.ByteValueComparator: void <init>(boolean)>(z0);

        return $r36;

     label03:
        $r7 = class "Lorg/apache/flink/types/CharValue;";

        $r6 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z4 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z4 == 0 goto label04;

        $r35 = new org.apache.flink.api.common.typeutils.base.CharValueComparator;

        specialinvoke $r35.<org.apache.flink.api.common.typeutils.base.CharValueComparator: void <init>(boolean)>(z0);

        return $r35;

     label04:
        $r9 = class "Lorg/apache/flink/types/DoubleValue;";

        $r8 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z5 = virtualinvoke $r9.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z5 == 0 goto label05;

        $r34 = new org.apache.flink.api.common.typeutils.base.DoubleValueComparator;

        specialinvoke $r34.<org.apache.flink.api.common.typeutils.base.DoubleValueComparator: void <init>(boolean)>(z0);

        return $r34;

     label05:
        $r11 = class "Lorg/apache/flink/types/FloatValue;";

        $r10 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z6 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z6 == 0 goto label06;

        $r33 = new org.apache.flink.api.common.typeutils.base.FloatValueComparator;

        specialinvoke $r33.<org.apache.flink.api.common.typeutils.base.FloatValueComparator: void <init>(boolean)>(z0);

        return $r33;

     label06:
        $r13 = class "Lorg/apache/flink/types/IntValue;";

        $r12 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z7 = virtualinvoke $r13.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z7 == 0 goto label07;

        $r32 = new org.apache.flink.api.common.typeutils.base.IntValueComparator;

        specialinvoke $r32.<org.apache.flink.api.common.typeutils.base.IntValueComparator: void <init>(boolean)>(z0);

        return $r32;

     label07:
        $r15 = class "Lorg/apache/flink/types/LongValue;";

        $r14 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z8 = virtualinvoke $r15.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r14);

        if $z8 == 0 goto label08;

        $r31 = new org.apache.flink.api.common.typeutils.base.LongValueComparator;

        specialinvoke $r31.<org.apache.flink.api.common.typeutils.base.LongValueComparator: void <init>(boolean)>(z0);

        return $r31;

     label08:
        $r17 = class "Lorg/apache/flink/types/NullValue;";

        $r16 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z9 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z9 == 0 goto label09;

        $r30 = staticinvoke <org.apache.flink.api.common.typeutils.base.NullValueComparator: org.apache.flink.api.common.typeutils.base.NullValueComparator getInstance()>();

        return $r30;

     label09:
        $r19 = class "Lorg/apache/flink/types/ShortValue;";

        $r18 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z10 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r18);

        if $z10 == 0 goto label10;

        $r29 = new org.apache.flink.api.common.typeutils.base.ShortValueComparator;

        specialinvoke $r29.<org.apache.flink.api.common.typeutils.base.ShortValueComparator: void <init>(boolean)>(z0);

        return $r29;

     label10:
        $r21 = class "Lorg/apache/flink/types/StringValue;";

        $r20 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z11 = virtualinvoke $r21.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r20);

        if $z11 == 0 goto label11;

        $r28 = new org.apache.flink.api.common.typeutils.base.StringValueComparator;

        specialinvoke $r28.<org.apache.flink.api.common.typeutils.base.StringValueComparator: void <init>(boolean)>(z0);

        return $r28;

     label11:
        $r23 = class "Lorg/apache/flink/types/CopyableValue;";

        $r22 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $z12 = virtualinvoke $r23.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r22);

        if $z12 == 0 goto label12;

        $r26 = new org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $r27 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        specialinvoke $r26.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void <init>(boolean,java.lang.Class)>(z0, $r27);

        return $r26;

     label12:
        $r24 = new org.apache.flink.api.java.typeutils.runtime.ValueComparator;

        $r25 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        specialinvoke $r24.<org.apache.flink.api.java.typeutils.runtime.ValueComparator: void <init>(boolean,java.lang.Class)>(z0, $r25);

        return $r24;
    }

    private static org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer createCopyableValueSerializer(java.lang.Class)
    {
        java.lang.Class r0;
        org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.CopyableValueSerializer: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.ValueTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        if $r4 != $r3 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.ValueTypeInfo;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ValueType<");

        $r3 = r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: java.lang.Class type>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r5;
        boolean $z0, $z1;
        org.apache.flink.api.common.functions.InvalidTypesException $r2;
        java.lang.StringBuilder $r3, $r4, $r7;
        java.lang.String $r6, $r8;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r9;

        r0 := @parameter0: java.lang.Class;

        $r1 = class "Lorg/apache/flink/types/Value;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/apache/flink/types/Value;");

        if $z1 != 0 goto label1;

        $r9 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(r0);

        return $r9;

     label1:
        $r2 = new org.apache.flink.api.common.functions.InvalidTypesException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given class is no subclass of ");

        $r5 = class "Lorg/apache/flink/types/Value;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>($r8);

        throw $r2;
    }

    static void <clinit>()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r0.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/BooleanValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo BOOLEAN_VALUE_TYPE_INFO> = $r0;

        $r1 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/ByteValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo BYTE_VALUE_TYPE_INFO> = $r1;

        $r2 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/CharValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo CHAR_VALUE_TYPE_INFO> = $r2;

        $r3 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/DoubleValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO> = $r3;

        $r4 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/FloatValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo FLOAT_VALUE_TYPE_INFO> = $r4;

        $r5 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/IntValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo INT_VALUE_TYPE_INFO> = $r5;

        $r6 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/LongValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO> = $r6;

        $r7 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/NullValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo NULL_VALUE_TYPE_INFO> = $r7;

        $r8 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/ShortValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo SHORT_VALUE_TYPE_INFO> = $r8;

        $r9 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;");

        <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo STRING_VALUE_TYPE_INFO> = $r9;

        return;
    }
}
