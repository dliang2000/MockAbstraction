public class org.apache.logging.slf4j.Log4jLoggerFactory extends org.apache.logging.log4j.spi.AbstractLoggerAdapter implements org.slf4j.ILoggerFactory
{
    private static final java.lang.String FQCN;
    private static final java.lang.String PACKAGE;
    private static final java.lang.String TO_SLF4J_CONTEXT;

    public void <init>()
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        specialinvoke r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: void <init>()>();

        return;
    }

    protected org.slf4j.Logger newLogger(java.lang.String, org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;
        java.lang.String r1, $r4, $r8;
        org.apache.logging.log4j.spi.LoggerContext r2, $r6;
        boolean $z0;
        org.apache.logging.slf4j.Log4jLogger $r5;
        org.apache.logging.log4j.spi.ExtendedLogger $r7;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.spi.LoggerContext;

        $r4 = "ROOT";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = "";

        goto label2;

     label1:
        $r8 = r1;

     label2:
        $r5 = new org.apache.logging.slf4j.Log4jLogger;

        $r6 = specialinvoke r0.<org.apache.logging.slf4j.Log4jLoggerFactory: org.apache.logging.log4j.spi.LoggerContext validateContext(org.apache.logging.log4j.spi.LoggerContext)>(r2);

        $r7 = interfaceinvoke $r6.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)>($r8);

        specialinvoke $r5.<org.apache.logging.slf4j.Log4jLogger: void <init>(org.apache.logging.log4j.spi.ExtendedLogger,java.lang.String)>($r7, r1);

        return $r5;
    }

    protected org.apache.logging.log4j.spi.LoggerContext getContext()
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;
        java.lang.Class r1, $r3;
        java.lang.String $r2;
        org.apache.logging.log4j.spi.LoggerContext $r4;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        $r2 = <org.apache.logging.slf4j.Log4jLoggerFactory: java.lang.String FQCN>;

        r1 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(java.lang.String,java.lang.String)>($r2, "org.slf4j");

        if r1 != null goto label1;

        $r4 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext()>();

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(java.lang.Class)>(r1);

        $r4 = virtualinvoke r0.<org.apache.logging.slf4j.Log4jLoggerFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.Class)>($r3);

     label2:
        return $r4;
    }

    private org.apache.logging.log4j.spi.LoggerContext validateContext(org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;
        org.apache.logging.log4j.spi.LoggerContext r1;
        java.lang.String $r2, $r4;
        java.lang.Class $r3;
        boolean $z0;
        org.apache.logging.log4j.LoggingException $r5;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        r1 := @parameter0: org.apache.logging.log4j.spi.LoggerContext;

        $r2 = "org.apache.logging.slf4j.SLF4JLoggerContext";

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = new org.apache.logging.log4j.LoggingException;

        specialinvoke $r5.<org.apache.logging.log4j.LoggingException: void <init>(java.lang.String)>("log4j-slf4j-impl cannot be present with log4j-to-slf4j");

        throw $r5;

     label1:
        return r1;
    }

    protected volatile java.lang.Object newLogger(java.lang.String, org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;
        java.lang.String r1;
        org.apache.logging.log4j.spi.LoggerContext r2;
        org.slf4j.Logger $r3;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.logging.log4j.spi.LoggerContext;

        $r3 = virtualinvoke r0.<org.apache.logging.slf4j.Log4jLoggerFactory: org.slf4j.Logger newLogger(java.lang.String,org.apache.logging.log4j.spi.LoggerContext)>(r1, r2);

        return $r3;
    }

    public volatile org.slf4j.Logger getLogger(java.lang.String)
    {
        org.apache.logging.slf4j.Log4jLoggerFactory r0;
        java.lang.String r1;
        java.lang.Object $r2;
        org.slf4j.Logger $r3;

        r0 := @this: org.apache.logging.slf4j.Log4jLoggerFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.logging.log4j.spi.AbstractLoggerAdapter: java.lang.Object getLogger(java.lang.String)>(r1);

        $r3 = (org.slf4j.Logger) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <org.apache.logging.slf4j.Log4jLoggerFactory: java.lang.String TO_SLF4J_CONTEXT> = "org.apache.logging.slf4j.SLF4JLoggerContext";

        <org.apache.logging.slf4j.Log4jLoggerFactory: java.lang.String PACKAGE> = "org.slf4j";

        $r0 = class "Lorg/apache/logging/slf4j/Log4jLoggerFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <org.apache.logging.slf4j.Log4jLoggerFactory: java.lang.String FQCN> = $r1;

        return;
    }
}
