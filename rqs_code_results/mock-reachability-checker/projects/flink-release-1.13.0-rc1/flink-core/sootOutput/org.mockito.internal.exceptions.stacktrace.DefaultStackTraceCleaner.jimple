public class org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner extends java.lang.Object implements org.mockito.exceptions.stacktrace.StackTraceCleaner
{

    public void <init>()
    {
        org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner r0;

        r0 := @this: org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isIn(java.lang.StackTraceElement)
    {
        org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner r0;
        java.lang.StackTraceElement r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner;

        r1 := @parameter0: java.lang.StackTraceElement;

        $r2 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = staticinvoke <org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner: boolean isFromMockitoRunner(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = staticinvoke <org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner: boolean isFromMockitoRule(java.lang.String)>($r3);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        $r4 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z2 = staticinvoke <org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner: boolean isMockDispatcher(java.lang.String)>($r4);

        if $z2 != 0 goto label3;

        $r5 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z3 = staticinvoke <org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleaner: boolean isFromMockito(java.lang.String)>($r5);

        if $z3 == 0 goto label4;

     label3:
        return 0;

     label4:
        return 1;
    }

    private static boolean isMockDispatcher(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$EnhancerByMockitoWithCGLIB$$");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("$MockitoMock$");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isFromMockito(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.");

        return $z0;
    }

    private static boolean isFromMockitoRule(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.internal.junit.JUnitRule");

        return $z0;
    }

    private static boolean isFromMockitoRunner(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.internal.runners.");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.runners.");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("org.mockito.junit.");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
