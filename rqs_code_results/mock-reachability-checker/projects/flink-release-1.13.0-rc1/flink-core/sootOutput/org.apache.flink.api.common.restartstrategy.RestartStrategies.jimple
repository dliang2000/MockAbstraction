public class org.apache.flink.api.common.restartstrategy.RestartStrategies extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies r0;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration noRestart()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$NoRestartStrategyConfiguration $r0;

        $r0 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$NoRestartStrategyConfiguration;

        specialinvoke $r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$NoRestartStrategyConfiguration: void <init>()>();

        return $r0;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fallBackRestart()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration $r0;

        $r0 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration;

        specialinvoke $r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$FallbackRestartStrategyConfiguration: void <init>()>();

        return $r0;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int, long)
    {
        int i0;
        long l1;
        java.util.concurrent.TimeUnit $r0;
        org.apache.flink.api.common.time.Time $r1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r2;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time of(long,java.util.concurrent.TimeUnit)>(l1, $r0);

        $r2 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int,org.apache.flink.api.common.time.Time)>(i0, $r1);

        return $r2;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int, org.apache.flink.api.common.time.Time)
    {
        int i0;
        org.apache.flink.api.common.time.Time r0;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$FixedDelayRestartStrategyConfiguration $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.api.common.time.Time;

        $r1 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$FixedDelayRestartStrategyConfiguration;

        specialinvoke $r1.<org.apache.flink.api.common.restartstrategy.RestartStrategies$FixedDelayRestartStrategyConfiguration: void <init>(int,org.apache.flink.api.common.time.Time)>(i0, r0);

        return $r1;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration failureRateRestart(int, org.apache.flink.api.common.time.Time, org.apache.flink.api.common.time.Time)
    {
        int i0;
        org.apache.flink.api.common.time.Time r0, r1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.api.common.time.Time;

        r1 := @parameter2: org.apache.flink.api.common.time.Time;

        $r2 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration;

        specialinvoke $r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration: void <init>(int,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.time.Time)>(i0, r0, r1);

        return $r2;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration exponentialDelayRestart(org.apache.flink.api.common.time.Time, org.apache.flink.api.common.time.Time, double, org.apache.flink.api.common.time.Time, double)
    {
        org.apache.flink.api.common.time.Time r0, r1, r2;
        double d0, d1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration $r3;

        r0 := @parameter0: org.apache.flink.api.common.time.Time;

        r1 := @parameter1: org.apache.flink.api.common.time.Time;

        d0 := @parameter2: double;

        r2 := @parameter3: org.apache.flink.api.common.time.Time;

        d1 := @parameter4: double;

        $r3 = new org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        specialinvoke $r3.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: void <init>(org.apache.flink.api.common.time.Time,org.apache.flink.api.common.time.Time,double,org.apache.flink.api.common.time.Time,double)>(r0, r1, d0, r2, d1);

        return $r3;
    }

    public static java.util.Optional fromConfiguration(org.apache.flink.configuration.ReadableConfig)
    {
        org.apache.flink.configuration.ReadableConfig r0;
        org.apache.flink.configuration.ConfigOption $r1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;

        r0 := @parameter0: org.apache.flink.configuration.ReadableConfig;

        $r1 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY>;

        $r2 = interfaceinvoke r0.<org.apache.flink.configuration.ReadableConfig: java.util.Optional getOptional(org.apache.flink.configuration.ConfigOption)>($r1);

        $r3 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies$lambda_fromConfiguration_0__241: java.util.function.Function bootstrap$(org.apache.flink.configuration.ReadableConfig)>(r0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        return $r4;
    }

    private static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration parseConfiguration(java.lang.String, org.apache.flink.configuration.ReadableConfig)
    {
        java.lang.String r0, r2, $r47;
        org.apache.flink.configuration.ReadableConfig r1;
        int i0, i1, $i2;
        java.time.Duration r3, r4, r5, r6, r7, r8;
        double d0, d1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        org.apache.flink.configuration.ConfigOption $r9, $r12, $r14, $r19, $r21, $r23, $r26, $r28, $r35, $r38;
        java.lang.Object $r10, $r13, $r15, $r20, $r22, $r24, $r27, $r29, $r36, $r39;
        java.lang.Integer $r11, $r37;
        long $l3, $l4, $l5, $l6, $l7, $l8;
        org.apache.flink.api.common.time.Time $r16, $r17, $r31, $r32, $r33;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration $r18;
        java.lang.Double $r25, $r30;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration $r34;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r40, $r41;
        java.lang.IllegalArgumentException $r42;
        java.lang.StringBuilder $r43, $r44, $r45, $r46;
        byte b9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.configuration.ReadableConfig;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        b9 = -1;

        $i2 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i2)
        {
            case -813961477: goto label07;
            case -252521634: goto label06;
            case -236543165: goto label09;
            case -40677910: goto label05;
            case 109935: goto label02;
            case 3387192: goto label01;
            case 1671308008: goto label03;
            case 1712085647: goto label04;
            case 2072619370: goto label08;
            default: goto label10;
        };

     label01:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z3 == 0 goto label10;

        b9 = 0;

        goto label10;

     label02:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z4 == 0 goto label10;

        b9 = 1;

        goto label10;

     label03:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("disable");

        if $z2 == 0 goto label10;

        b9 = 2;

        goto label10;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("fixeddelay");

        if $z1 == 0 goto label10;

        b9 = 3;

        goto label10;

     label05:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("fixed-delay");

        if $z5 == 0 goto label10;

        b9 = 4;

        goto label10;

     label06:
        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("exponentialdelay");

        if $z7 == 0 goto label10;

        b9 = 5;

        goto label10;

     label07:
        $z8 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("exponential-delay");

        if $z8 == 0 goto label10;

        b9 = 6;

        goto label10;

     label08:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("failurerate");

        if $z0 == 0 goto label10;

        b9 = 7;

        goto label10;

     label09:
        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("failure-rate");

        if $z6 == 0 goto label10;

        b9 = 8;

     label10:
        tableswitch(b9)
        {
            case 0: goto label11;
            case 1: goto label11;
            case 2: goto label11;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label13;
            case 6: goto label13;
            case 7: goto label14;
            case 8: goto label14;
            default: goto label15;
        };

     label11:
        $r41 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration noRestart()>();

        return $r41;

     label12:
        $r35 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_FIXED_DELAY_ATTEMPTS>;

        $r36 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r35);

        $r37 = (java.lang.Integer) $r36;

        i0 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        $r38 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_FIXED_DELAY_DELAY>;

        $r39 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r38);

        r3 = (java.time.Duration) $r39;

        $l8 = virtualinvoke r3.<java.time.Duration: long toMillis()>();

        $r40 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration fixedDelayRestart(int,long)>(i0, $l8);

        return $r40;

     label13:
        $r19 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_EXPONENTIAL_DELAY_INITIAL_BACKOFF>;

        $r20 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r19);

        r4 = (java.time.Duration) $r20;

        $r21 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_EXPONENTIAL_DELAY_MAX_BACKOFF>;

        $r22 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r21);

        r5 = (java.time.Duration) $r22;

        $r23 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_EXPONENTIAL_DELAY_BACKOFF_MULTIPLIER>;

        $r24 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r23);

        $r25 = (java.lang.Double) $r24;

        d0 = virtualinvoke $r25.<java.lang.Double: double doubleValue()>();

        $r26 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_EXPONENTIAL_DELAY_RESET_BACKOFF_THRESHOLD>;

        $r27 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r26);

        r6 = (java.time.Duration) $r27;

        $r28 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_EXPONENTIAL_DELAY_JITTER_FACTOR>;

        $r29 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r28);

        $r30 = (java.lang.Double) $r29;

        d1 = virtualinvoke $r30.<java.lang.Double: double doubleValue()>();

        $l5 = virtualinvoke r4.<java.time.Duration: long toMillis()>();

        $r31 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l5);

        $l6 = virtualinvoke r5.<java.time.Duration: long toMillis()>();

        $r32 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l6);

        $l7 = virtualinvoke r6.<java.time.Duration: long toMillis()>();

        $r33 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l7);

        $r34 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration exponentialDelayRestart(org.apache.flink.api.common.time.Time,org.apache.flink.api.common.time.Time,double,org.apache.flink.api.common.time.Time,double)>($r31, $r32, d0, $r33, d1);

        return $r34;

     label14:
        $r9 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_FAILURE_RATE_MAX_FAILURES_PER_INTERVAL>;

        $r10 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r9);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_FAILURE_RATE_FAILURE_RATE_INTERVAL>;

        $r13 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r12);

        r7 = (java.time.Duration) $r13;

        $r14 = <org.apache.flink.configuration.RestartStrategyOptions: org.apache.flink.configuration.ConfigOption RESTART_STRATEGY_FAILURE_RATE_DELAY>;

        $r15 = interfaceinvoke r1.<org.apache.flink.configuration.ReadableConfig: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r14);

        r8 = (java.time.Duration) $r15;

        $l3 = virtualinvoke r7.<java.time.Duration: long toMillis()>();

        $r16 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l3);

        $l4 = virtualinvoke r8.<java.time.Duration: long toMillis()>();

        $r17 = staticinvoke <org.apache.flink.api.common.time.Time: org.apache.flink.api.common.time.Time milliseconds(long)>($l4);

        $r18 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$FailureRateRestartStrategyConfiguration failureRateRestart(int,org.apache.flink.api.common.time.Time,org.apache.flink.api.common.time.Time)>(i1, $r16, $r17);

        return $r18;

     label15:
        $r42 = new java.lang.IllegalArgumentException;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown restart strategy ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r42;
    }

    public static org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration lambda$fromConfiguration$0(org.apache.flink.configuration.ReadableConfig, java.lang.String)
    {
        org.apache.flink.configuration.ReadableConfig r0;
        java.lang.String r1;
        org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration $r2;

        r0 := @parameter0: org.apache.flink.configuration.ReadableConfig;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.flink.api.common.restartstrategy.RestartStrategies: org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration parseConfiguration(java.lang.String,org.apache.flink.configuration.ReadableConfig)>(r1, r0);

        return $r2;
    }
}
