public final class org.apache.flink.api.common.typeutils.base.SqlDateSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.SqlDateSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        return 0;
    }

    public java.sql.Date createInstance()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        $r1 = new java.sql.Date;

        specialinvoke $r1.<java.sql.Date: void <init>(long)>(0L);

        return $r1;
    }

    public java.sql.Date copy(java.sql.Date)
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date r1, $r2;
        long $l0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.sql.Date;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.sql.Date;

        $l0 = virtualinvoke r1.<java.sql.Date: long getTime()>();

        specialinvoke $r2.<java.sql.Date: void <init>(long)>($l0);

        return $r2;
    }

    public java.sql.Date copy(java.sql.Date, java.sql.Date)
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date r1, r2;
        long $l0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.sql.Date;

        r2 := @parameter1: java.sql.Date;

        if r1 != null goto label1;

        return null;

     label1:
        $l0 = virtualinvoke r1.<java.sql.Date: long getTime()>();

        virtualinvoke r2.<java.sql.Date: void setTime(long)>($l0);

        return r2;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        return 8;
    }

    public void serialize(java.sql.Date, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date r1;
        org.apache.flink.core.memory.DataOutputView r2;
        long $l0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.sql.Date;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>(-9223372036854775808L);

        goto label2;

     label1:
        $l0 = virtualinvoke r1.<java.sql.Date: long getTime()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

     label2:
        return;
    }

    public java.sql.Date deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        long l0;
        byte $b1;
        java.sql.Date $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.sql.Date;

        specialinvoke $r2.<java.sql.Date: void <init>(long)>(l0);

        return $r2;
    }

    public java.sql.Date deserialize(java.sql.Date, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date r1;
        org.apache.flink.core.memory.DataInputView r2;
        long l0;
        byte $b1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.sql.Date;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        l0 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $b1 = l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        return null;

     label1:
        virtualinvoke r1.<java.sql.Date: void setTime(long)>(l0);

        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        long $l0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeLong(long)>($l0);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer$SqlDateSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.SqlDateSerializer$SqlDateSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer$SqlDateSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.sql.Date $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.sql.Date) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: java.sql.Date deserialize(java.sql.Date,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.sql.Date $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: java.sql.Date deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.sql.Date $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.sql.Date) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: void serialize(java.sql.Date,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.lang.Object r1, r2;
        java.sql.Date $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.sql.Date) r1;

        $r3 = (java.sql.Date) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: java.sql.Date copy(java.sql.Date,java.sql.Date)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.lang.Object r1;
        java.sql.Date $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.sql.Date) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: java.sql.Date copy(java.sql.Date)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer r0;
        java.sql.Date $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: java.sql.Date createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.SqlDateSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.SqlDateSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.SqlDateSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.SqlDateSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.SqlDateSerializer: org.apache.flink.api.common.typeutils.base.SqlDateSerializer INSTANCE> = $r0;

        return;
    }
}
