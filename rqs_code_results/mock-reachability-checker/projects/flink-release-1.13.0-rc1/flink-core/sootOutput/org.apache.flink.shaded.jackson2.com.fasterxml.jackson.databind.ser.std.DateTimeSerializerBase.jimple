public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ContextualSerializer
{
    protected final java.lang.Boolean _useTimestamp;
    protected final java.text.DateFormat _customFormat;
    protected final java.util.concurrent.atomic.AtomicReference _reusedCustomFormat;

    protected void <init>(java.lang.Class, java.lang.Boolean, java.text.DateFormat)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        java.lang.Class r1;
        java.lang.Boolean r2;
        java.text.DateFormat r3;
        java.util.concurrent.atomic.AtomicReference $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.text.DateFormat;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(r1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat> = r3;

        if r3 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat> = $r5;

        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean, java.text.DateFormat);

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer createContextual(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0, $r11, $r23, $r29, $r31;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape r4, $r8;
        java.text.DateFormat r5;
        java.util.TimeZone r6, $r12, $r24, $r35;
        java.lang.Class $r7, $r16, $r18;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, $z11, $z13, $z14;
        java.lang.Object $r9;
        java.lang.Boolean $r10, $r22, $r28, $r30;
        java.text.SimpleDateFormat $r13, $r26, r39, r40;
        java.lang.String $r14, $r19, $r20, $r27;
        java.util.Locale $r15, $r25, $r32;
        java.lang.Object[] $r17;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig $r37;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat r38;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(r1, r2, $r7);

        if r3 != null goto label01;

        return r0;

     label01:
        r4 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();

        $z1 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape: boolean isNumeric()>();

        if $z1 == 0 goto label02;

        $r30 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r31 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>($r30, null);

        return $r31;

     label02:
        $z2 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasPattern()>();

        if $z2 == 0 goto label07;

        $z7 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();

        if $z7 == 0 goto label03;

        $r32 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();

        goto label04;

     label03:
        $r32 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: java.util.Locale getLocale()>();

     label04:
        $r26 = new java.text.SimpleDateFormat;

        $r27 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String getPattern()>();

        specialinvoke $r26.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r27, $r32);

        $z8 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();

        if $z8 == 0 goto label05;

        $r35 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();

        goto label06;

     label05:
        $r35 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: java.util.TimeZone getTimeZone()>();

     label06:
        virtualinvoke $r26.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r35);

        $r28 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r29 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>($r28, $r26);

        return $r29;

     label07:
        z9 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();

        z10 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING>;

        if r4 != $r8 goto label08;

        $z11 = 1;

        goto label09;

     label08:
        $z11 = 0;

     label09:
        if z9 != 0 goto label10;

        if z10 != 0 goto label10;

        if $z11 != 0 goto label10;

        return r0;

     label10:
        $r37 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig getConfig()>();

        r5 = virtualinvoke $r37.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationConfig: java.text.DateFormat getDateFormat()>();

        $z13 = r5 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat;

        if $z13 == 0 goto label13;

        r38 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat) r5;

        $z5 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();

        if $z5 == 0 goto label11;

        $r25 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();

        r38 = virtualinvoke r38.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)>($r25);

     label11:
        $z6 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();

        if $z6 == 0 goto label12;

        $r24 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();

        r38 = virtualinvoke r38.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>($r24);

     label12:
        $r22 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r23 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>($r22, r38);

        return $r23;

     label13:
        $z3 = r5 instanceof java.text.SimpleDateFormat;

        if $z3 != 0 goto label14;

        $r16 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();

        $r17 = newarray (java.lang.Object)[1];

        $r18 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r17[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`", $r17);

        virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>($r16, $r20);

     label14:
        r39 = (java.text.SimpleDateFormat) r5;

        if z9 == 0 goto label15;

        $r13 = new java.text.SimpleDateFormat;

        $r14 = virtualinvoke r39.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        $r15 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();

        specialinvoke $r13.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r14, $r15);

        r40 = $r13;

        goto label16;

     label15:
        $r9 = virtualinvoke r39.<java.text.SimpleDateFormat: java.lang.Object clone()>();

        r40 = (java.text.SimpleDateFormat) $r9;

     label16:
        r6 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();

        if r6 == null goto label17;

        $r12 = virtualinvoke r40.<java.text.SimpleDateFormat: java.util.TimeZone getTimeZone()>();

        $z4 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z4 != 0 goto label17;

        $z14 = 1;

        goto label18;

     label17:
        $z14 = 0;

     label18:
        if $z14 == 0 goto label19;

        virtualinvoke r40.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(r6);

     label19:
        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>($r10, r40);

        return $r11;
    }

    public boolean isEmpty(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Object r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.Object;

        return 0;
    }

    protected abstract long _timestamp(java.lang.Object);

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode getSchema(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.reflect.Type r2;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>(r1);

        if $z0 == 0 goto label1;

        $r5 = "number";

        goto label2;

     label1:
        $r5 = "string";

     label2:
        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>($r5, 1);

        return $r3;
    }

    public void acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        $r3 = interfaceinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider getProvider()>();

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>($r3);

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void _acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r1, r2, $z0);

        return;
    }

    public abstract void serialize(java.lang.Object, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;

    protected boolean _asTimestamp(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r1;
        java.lang.Boolean $r2, $r12;
        java.text.DateFormat $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.Class $r7;
        java.lang.String $r8, $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature $r11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp>;

        if $r2 == null goto label1;

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp>;

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;

        if $r3 != null goto label3;

        if r1 == null goto label2;

        $r11 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature WRITE_DATES_AS_TIMESTAMPS>;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializationFeature)>($r11);

        return $z0;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null SerializerProvider passed for ");

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        return 0;
    }

    protected void _acceptJsonFormatVisitor(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, boolean) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        boolean z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat $r3, $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UTC_MILLISEC>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void visitIntFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(r1, r2, $r5, $r4);

        goto label2;

     label1:
        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat DATE_TIME>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void visitStringFormat(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(r1, r2, $r3);

     label2:
        return;
    }

    protected void _serializeAsString(java.util.Date, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase r0;
        java.util.Date r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r3;
        java.text.DateFormat $r4, $r9, r11;
        java.util.concurrent.atomic.AtomicReference $r5, $r8;
        java.lang.Object $r6, $r10;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;

        if $r4 != null goto label1;

        virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateValue(java.util.Date,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator)>(r1, r2);

        return;

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);

        r11 = (java.text.DateFormat) $r6;

        if r11 != null goto label2;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;

        $r10 = virtualinvoke $r9.<java.text.DateFormat: java.lang.Object clone()>();

        r11 = (java.text.DateFormat) $r10;

     label2:
        $r7 = virtualinvoke r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r1);

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r7);

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat>;

        virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, r11);

        return;
    }
}
