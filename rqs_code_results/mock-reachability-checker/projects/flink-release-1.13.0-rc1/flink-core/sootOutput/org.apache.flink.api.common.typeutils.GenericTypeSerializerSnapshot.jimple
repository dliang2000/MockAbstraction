public abstract class org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int VERSION;
    private java.lang.Class typeClass;

    protected void <init>()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "type class can not be NULL");

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass> = $r3;

        return;
    }

    protected abstract org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(java.lang.Class);

    protected abstract java.lang.Class getTypeClass(org.apache.flink.api.common.typeutils.TypeSerializer);

    protected abstract java.lang.Class serializerClass();

    public final int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        return 2;
    }

    public final void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "type class can not be NULL");

        $r3 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r4);

        return;
    }

    public final void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass> = $r3;

        return;
    }

    public final org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;
        java.lang.Class $r1, $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "type class can not be NULL");

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass>;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(java.lang.Class)>($r2);

        return $r3;
    }

    public final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class $r3, $r4, $r5;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class serializerClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r8;

     label1:
        $r4 = r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class typeClass>;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: java.lang.Class getTypeClass(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        if $r4 != $r5 goto label2;

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r7;

     label2:
        $r6 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.GenericTypeSerializerSnapshot: int VERSION> = 2;

        return;
    }
}
