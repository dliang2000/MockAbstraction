public class org.apache.flink.api.java.typeutils.ValueTypeInfoTest extends org.apache.flink.api.common.typeutils.TypeInformationTestBase
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfoTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfoTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeInformationTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.java.typeutils.ValueTypeInfo[] getTestData()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.ValueTypeInfo[] $r1;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r2, $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfoTest;

        $r1 = newarray (org.apache.flink.api.java.typeutils.ValueTypeInfo)[3];

        $r2 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/ValueTypeInfoTest$TestClass;");

        $r1[0] = $r2;

        $r3 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/ValueTypeInfoTest$AlternativeClass;");

        $r1[1] = $r3;

        $r4 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/Record;");

        $r1[2] = $r4;

        return $r1;
    }

    public void testValueTypeEqualsWithNull() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfoTest;

        $r2 = new org.apache.flink.api.java.typeutils.ValueTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/types/Record;");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.ValueTypeInfo: boolean equals(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    protected volatile org.apache.flink.api.common.typeinfo.TypeInformation[] getTestData()
    {
        org.apache.flink.api.java.typeutils.ValueTypeInfoTest r0;
        org.apache.flink.api.java.typeutils.ValueTypeInfo[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.ValueTypeInfoTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.ValueTypeInfoTest: org.apache.flink.api.java.typeutils.ValueTypeInfo[] getTestData()>();

        return $r1;
    }
}
