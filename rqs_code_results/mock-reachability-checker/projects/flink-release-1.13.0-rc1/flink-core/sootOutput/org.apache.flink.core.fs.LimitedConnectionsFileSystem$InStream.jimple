final class org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream extends org.apache.flink.core.fs.FSDataInputStream implements org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamWithTimeout
{
    private final org.apache.flink.core.fs.FSDataInputStream originalStream;
    private final org.apache.flink.core.fs.LimitedConnectionsFileSystem fs;
    private volatile org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException timeoutException;
    private final org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker progressTracker;
    private final java.util.concurrent.atomic.AtomicBoolean closed;

    void <init>(org.apache.flink.core.fs.FSDataInputStream, org.apache.flink.core.fs.LimitedConnectionsFileSystem)
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream r1, $r5;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem r2, $r7;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        java.lang.Object $r4, $r6;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker $r8;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        r1 := @parameter0: org.apache.flink.core.fs.FSDataInputStream;

        r2 := @parameter1: org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        specialinvoke r0.<org.apache.flink.core.fs.FSDataInputStream: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: java.util.concurrent.atomic.AtomicBoolean closed> = $r3;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (org.apache.flink.core.fs.FSDataInputStream) $r4;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream> = $r5;

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r7 = (org.apache.flink.core.fs.LimitedConnectionsFileSystem) $r6;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs> = $r7;

        $r8 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker;

        specialinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamWithTimeout)>(r0);

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker progressTracker> = $r8;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        int $i0;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $i0 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        byte[] r1;
        org.apache.flink.core.fs.FSDataInputStream $r3;
        int $i0;
        java.io.IOException $r4;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        r1 := @parameter0: byte[];

     label1:
        $r3 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $i0 = virtualinvoke $r3.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[])>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r4);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        byte[] r1;
        int i0, i1, $i2;
        org.apache.flink.core.fs.FSDataInputStream $r3;
        java.io.IOException $r4;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r3 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $i2 = virtualinvoke $r3.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[],int,int)>(r1, i0, i1);

     label2:
        return $i2;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r4);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        long l0, $l1;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $l1 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: long skip(long)>(l0);

     label2:
        return $l1;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

        return 0L;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int available() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        int $i0;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $i0 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: int available()>();

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void mark(int)
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        int i0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: void mark(int)>(i0);

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: void reset()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        $r1 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $z0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: boolean markSupported()>();

        return $z0;
    }

    public void seek(long) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        long l0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>(l0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public long getPos() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        long $l0;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        $l0 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: long getPos()>();

     label2:
        return $l0;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r3);

        return 0L;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        org.apache.flink.core.fs.FSDataInputStream $r4;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r5, $r7, $r9;
        java.lang.Throwable $r6;
        java.io.IOException $r8;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        $r3 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label6;

     label1:
        $r4 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.FSDataInputStream originalStream>;

        virtualinvoke $r4.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label2:
        $r5 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        virtualinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void unregisterInputStream(org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream)>(r0);

        goto label6;

     label3:
        $r8 := @caughtexception;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void handleIOException(java.io.IOException)>($r8);

     label4:
        $r9 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        virtualinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void unregisterInputStream(org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream)>(r0);

        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem fs>;

        virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void unregisterInputStream(org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream)>(r0);

        throw $r6;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void closeDueToTimeout() throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        $r1 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException;

        specialinvoke $r1.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException timeoutException> = $r1;

        virtualinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: void close()>();

        return;
    }

    public boolean isClosed()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        $r1 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker getProgressTracker()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        $r1 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamProgressTracker progressTracker>;

        return $r1;
    }

    private void handleIOException(java.io.IOException) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream r0;
        java.io.IOException r1;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException $r3, $r4, $r5;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream;

        r1 := @parameter0: java.io.IOException;

        $r3 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException timeoutException>;

        if $r3 != null goto label1;

        throw r1;

     label1:
        $r4 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException;

        $r5 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$InStream: org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException timeoutException>;

        specialinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException)>($r5);

        virtualinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException: void addSuppressed(java.lang.Throwable)>(r1);

        throw $r4;
    }
}
