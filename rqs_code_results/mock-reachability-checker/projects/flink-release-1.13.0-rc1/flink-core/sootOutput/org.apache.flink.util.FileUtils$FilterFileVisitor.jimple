final class org.apache.flink.util.FileUtils$FilterFileVisitor extends java.nio.file.SimpleFileVisitor
{
    private final java.util.function.Predicate fileFilter;
    private final java.util.List files;

    void <init>(java.util.function.Predicate)
    {
        org.apache.flink.util.FileUtils$FilterFileVisitor r0;
        java.util.function.Predicate r1, $r3;
        java.lang.Object $r2;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.flink.util.FileUtils$FilterFileVisitor;

        r1 := @parameter0: java.util.function.Predicate;

        specialinvoke r0.<java.nio.file.SimpleFileVisitor: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.function.Predicate) $r2;

        r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.function.Predicate fileFilter> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.List files> = $r4;

        return;
    }

    public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        org.apache.flink.util.FileUtils$FilterFileVisitor r0;
        java.nio.file.Path r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.nio.file.FileVisitResult r3;
        java.util.function.Predicate $r4;
        boolean $z0;
        java.util.List $r5;

        r0 := @this: org.apache.flink.util.FileUtils$FilterFileVisitor;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        r3 = specialinvoke r0.<java.nio.file.SimpleFileVisitor: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>(r1, r2);

        $r4 = r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.function.Predicate fileFilter>;

        $z0 = interfaceinvoke $r4.<java.util.function.Predicate: boolean test(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.List files>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return r3;
    }

    java.util.Collection getFiles()
    {
        org.apache.flink.util.FileUtils$FilterFileVisitor r0;
        java.util.List $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.flink.util.FileUtils$FilterFileVisitor;

        $r1 = r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.util.List files>;

        $r2 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public volatile java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        org.apache.flink.util.FileUtils$FilterFileVisitor r0;
        java.lang.Object r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.nio.file.Path $r3;
        java.nio.file.FileVisitResult $r4;

        r0 := @this: org.apache.flink.util.FileUtils$FilterFileVisitor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r3 = (java.nio.file.Path) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.util.FileUtils$FilterFileVisitor: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r3, r2);

        return $r4;
    }
}
