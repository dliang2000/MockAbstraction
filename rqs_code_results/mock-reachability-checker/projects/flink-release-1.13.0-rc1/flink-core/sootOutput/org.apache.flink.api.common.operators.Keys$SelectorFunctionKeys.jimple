public class org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys extends org.apache.flink.api.common.operators.Keys
{
    private final org.apache.flink.api.java.functions.KeySelector keyExtractor;
    private final org.apache.flink.api.common.typeinfo.TypeInformation inputType;
    private final org.apache.flink.api.common.typeinfo.TypeInformation keyType;
    private final java.util.List keyFields;
    private final org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes;

    public void <init>(org.apache.flink.api.java.functions.KeySelector, org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.java.functions.KeySelector r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, r3;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4;
        java.util.ArrayList $r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r6;
        java.util.List $r7, $r9;
        org.apache.flink.api.common.typeutils.CompositeType $r8;
        org.apache.flink.api.common.InvalidProgramException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16, $r17;
        java.lang.Class $r15;
        java.lang.String $r18;
        java.lang.NullPointerException $r19, $r20;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        r1 := @parameter0: org.apache.flink.api.java.functions.KeySelector;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.operators.Keys: void <init>()>();

        if r1 != null goto label1;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key extractor must not be null.");

        throw $r20;

     label1:
        if r3 != null goto label2;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("Key type must not be null.");

        throw $r19;

     label2:
        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean isKeyType()>();

        if $z0 != 0 goto label3;

        $r10 = new org.apache.flink.api.common.InvalidProgramException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Return type ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of KeySelector ");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid key type");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label3:
        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.java.functions.KeySelector keyExtractor> = r1;

        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation inputType> = r2;

        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation keyType> = r3;

        $r4 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r4[0] = r3;

        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes> = $r4;

        $z1 = r3 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label4;

        $r8 = (org.apache.flink.api.common.typeutils.CompositeType) r3;

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeType: java.util.List getFlatFields(java.lang.String)>("*");

        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields> = $r9;

        goto label5;

     label4:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields> = $r5;

        $r7 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $r6 = new org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, r3);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

     label5:
        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getKeyType()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation keyType>;

        return $r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getInputType()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation inputType>;

        return $r1;
    }

    public org.apache.flink.api.java.functions.KeySelector getKeyExtractor()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.java.functions.KeySelector $r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.java.functions.KeySelector keyExtractor>;

        return $r1;
    }

    public int getNumberOfKeyFields()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public int[] computeLogicalKeyPositions()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        int[] r1;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r6;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r2 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r5;

        $i2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: int getPosition()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation[] getKeyFieldTypes()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] r1;
        java.util.List $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation $r7;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r2 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        r1 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        $r6 = (org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor) $r5;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeType$FlatFieldDescriptor: org.apache.flink.api.common.typeinfo.TypeInformation getType()>();

        r1[i2] = $r7;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r1;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] originalKeyTypes>;

        return $r1;
    }

    public void validateCustomPartitioner(org.apache.flink.api.common.functions.Partitioner, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        org.apache.flink.api.common.functions.Partitioner r1;
        java.util.List $r3;
        int $i0;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r10, r15;
        org.apache.flink.api.common.InvalidProgramException $r5, $r13;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r12;
        java.lang.Throwable $r14;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        r15 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        $r3 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: java.util.List keyFields>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 == 1 goto label1;

        $r13 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r13.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Custom partitioners can only be used with keys that have one key field.");

        throw $r13;

     label1:
        if r15 != null goto label5;

     label2:
        r15 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getPartitionerTypes(org.apache.flink.api.common.functions.Partitioner)>(r1);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

     label5:
        if r15 == null goto label6;

        $z0 = r15 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z0 != 0 goto label6;

        $r4 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation keyType>;

        $z1 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>(r15);

        if $z1 != 0 goto label6;

        $r5 = new org.apache.flink.api.common.InvalidProgramException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The partitioner is incompatible with the key type. Partitioner type: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , key type: ");

        $r10 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation keyType>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>($r12);

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key function (Type: ");

        $r3 = r0.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: org.apache.flink.api.common.typeinfo.TypeInformation keyType>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
