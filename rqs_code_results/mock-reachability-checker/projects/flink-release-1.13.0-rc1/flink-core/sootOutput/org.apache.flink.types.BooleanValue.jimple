public class org.apache.flink.types.BooleanValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    public static final org.apache.flink.types.BooleanValue TRUE;
    public static final org.apache.flink.types.BooleanValue FALSE;
    private boolean value;

    public void <init>()
    {
        org.apache.flink.types.BooleanValue r0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.apache.flink.types.BooleanValue r0;
        boolean z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.BooleanValue: boolean value> = z0;

        return;
    }

    public boolean get()
    {
        org.apache.flink.types.BooleanValue r0;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        return $z0;
    }

    public void set(boolean)
    {
        org.apache.flink.types.BooleanValue r0;
        boolean z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.types.BooleanValue: boolean value> = z0;

        return;
    }

    public boolean getValue()
    {
        org.apache.flink.types.BooleanValue r0;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        return $z0;
    }

    public void setValue(boolean)
    {
        org.apache.flink.types.BooleanValue r0;
        boolean z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.types.BooleanValue: boolean value> = z0;

        return;
    }

    public void setValue(org.apache.flink.types.BooleanValue)
    {
        org.apache.flink.types.BooleanValue r0, r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.types.BooleanValue;

        $z0 = r1.<org.apache.flink.types.BooleanValue: boolean value>;

        r0.<org.apache.flink.types.BooleanValue: boolean value> = $z0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.BooleanValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>($z0);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.BooleanValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        r0.<org.apache.flink.types.BooleanValue: boolean value> = $z0;

        return;
    }

    public int hashCode()
    {
        org.apache.flink.types.BooleanValue r0;
        boolean $z0;
        byte $b0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.BooleanValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.BooleanValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.BooleanValue) r1;

        $z2 = $r2.<org.apache.flink.types.BooleanValue: boolean value>;

        $z1 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z2 != $z1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int compareTo(org.apache.flink.types.BooleanValue)
    {
        org.apache.flink.types.BooleanValue r0, r1;
        byte b0, $b3, $b4;
        boolean $z0, $z1;
        int $i2;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.types.BooleanValue;

        $z0 = r1.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z0 == 0 goto label1;

        $b3 = 1;

        goto label2;

     label1:
        $b3 = 0;

     label2:
        b0 = $b3;

        $z1 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z1 == 0 goto label3;

        $b4 = 1;

        goto label4;

     label3:
        $b4 = 0;

     label4:
        $i2 = $b4 - b0;

        return $i2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.BooleanValue r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z0 == 0 goto label1;

        $r1 = "true";

        goto label2;

     label1:
        $r1 = "false";

     label2:
        return $r1;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.BooleanValue r0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        return 1;
    }

    public void copyTo(org.apache.flink.types.BooleanValue)
    {
        org.apache.flink.types.BooleanValue r0, r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        r1.<org.apache.flink.types.BooleanValue: boolean value> = $z0;

        return;
    }

    public org.apache.flink.types.BooleanValue copy()
    {
        org.apache.flink.types.BooleanValue r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $r1 = new org.apache.flink.types.BooleanValue;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        specialinvoke $r1.<org.apache.flink.types.BooleanValue: void <init>(boolean)>($z0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.BooleanValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 1);

        return;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.BooleanValue r0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        return 1;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.BooleanValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        boolean $z0, $z1;
        byte $b0;
        int $i1, i3, i4, i5;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        if i4 <= 0 goto label4;

        $z0 = r0.<org.apache.flink.types.BooleanValue: boolean value>;

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $b0 = (byte) $z1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i3, $b0);

        i5 = i3 + 1;

     label3:
        if i4 <= 1 goto label4;

        $i1 = i5;

        i5 = i5 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i1, 0);

        i4 = i4 + -1;

        goto label3;

     label4:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.BooleanValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.BooleanValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.BooleanValue: int compareTo(org.apache.flink.types.BooleanValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.BooleanValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.BooleanValue) r1;

        virtualinvoke r0.<org.apache.flink.types.BooleanValue: void setValue(org.apache.flink.types.BooleanValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.BooleanValue r0, $r1;

        r0 := @this: org.apache.flink.types.BooleanValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.BooleanValue: org.apache.flink.types.BooleanValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.BooleanValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.BooleanValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.BooleanValue) r1;

        virtualinvoke r0.<org.apache.flink.types.BooleanValue: void copyTo(org.apache.flink.types.BooleanValue)>($r2);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.types.BooleanValue $r0, $r1;

        <org.apache.flink.types.BooleanValue: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r0.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(1);

        <org.apache.flink.types.BooleanValue: org.apache.flink.types.BooleanValue TRUE> = $r0;

        $r1 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r1.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(0);

        <org.apache.flink.types.BooleanValue: org.apache.flink.types.BooleanValue FALSE> = $r1;

        return;
    }
}
