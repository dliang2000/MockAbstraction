public class org.apache.flink.api.java.typeutils.runtime.kryo.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.Driver r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.Driver r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest $r7;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoClearedBufferTest $r8;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoWithCustomSerializersTest $r9;
        org.apache.flink.api.java.typeutils.runtime.kryo.SerializersTest $r10;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest $r11;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest $r12;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest $r13;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest $r14;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase $r15;
        java.lang.Exception $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25;
        java.io.IOException $r19;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.Driver;

        $r7 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testDuplicateSerializerWithDefaultSerializerClass()>();

        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testDuplicateSerializerWithDefaultSerializerInstance()>();

        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testDuplicateSerializerWithRegisteredSerializerClass()>();

        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testDuplicateSerializerWithRegisteredSerializerInstance()>();

     label01:
        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyTest: void testConcurrentUseOfSerializer()>();

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label04:
        $r8 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoClearedBufferTest;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoClearedBufferTest: void <init>()>();

     label05:
        virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoClearedBufferTest: void testOutputBufferedBeingClearedInCaseOfException()>();

     label06:
        goto label08;

     label07:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.lang.Exception: void printStackTrace()>();

     label08:
        $r9 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoWithCustomSerializersTest;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoWithCustomSerializersTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoWithCustomSerializersTest: void testJodaTime()>();

        $r10 = new org.apache.flink.api.java.typeutils.runtime.kryo.SerializersTest;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.kryo.SerializersTest: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.kryo.SerializersTest: void testTypeRegistration()>();

        virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.kryo.SerializersTest: void testTypeRegistrationFromTypeInfo()>();

        $r11 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void setup()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void sanityTest()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void addingTypesIsCompatibleAfterReconfiguration()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void replacingKryoSerializersIsCompatibleAsIs()>();

        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void reorderingIsCompatibleAfterReconfiguration()>();

     label09:
        virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotTest: void tryingToRestoreWithNonExistingClassShouldBeIncompatible()>();

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.io.IOException: void printStackTrace()>();

     label12:
        $r12 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void testJavaList()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void testJavaSet()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void testJavaDequeue()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void testForwardEOFExceptionWhileSerializing()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void testForwardEOFExceptionWhileDeserializing()>();

        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoGenericTypeSerializerTest: void validateReferenceMappingEnabled()>();

        $r13 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void <init>()>();

     label13:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyForRemovedAvroDependency()>();

     label14:
        goto label16;

     label15:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label16:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testDeserializingKryoSerializerWithoutAvro()>();

     label17:
        goto label19;

     label18:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

     label19:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyWithDifferentKryoType()>();

     label20:
        goto label22;

     label21:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label22:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationOfTypeWithAvroType()>();

     label23:
        goto label25;

     label24:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label25:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationWithTypeDevoidOfAvroTypes()>();

     label26:
        goto label28;

     label27:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

     label28:
        virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: void testMigrationStrategyForDifferentRegistrationOrder()>();

     label29:
        goto label31;

     label30:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

     label31:
        $r14 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: void setupClassLoader()>();

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: void restoreOriginalClassLoader()>();

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: void guardTestAssumptions()>();

        virtualinvoke $r14.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerClassLoadingTest: void testInstantiate()>();

        $r15 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase;

        specialinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase: void <init>()>();

     label32:
        virtualinvoke $r15.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerConcurrencyCheckInactiveITCase: void testWithNoConcurrencyCheck()>();

     label33:
        goto label35;

     label34:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

     label35:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label32 to label33 with label34;
    }
}
