public class org.hamcrest.core.IsNot extends org.hamcrest.BaseMatcher
{
    private final org.hamcrest.Matcher matcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.core.IsNot r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.core.IsNot;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        r0.<org.hamcrest.core.IsNot: org.hamcrest.Matcher matcher> = r1;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.hamcrest.core.IsNot r0;
        java.lang.Object r1;
        org.hamcrest.Matcher $r2;
        boolean $z0, $z1;

        r0 := @this: org.hamcrest.core.IsNot;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.hamcrest.core.IsNot: org.hamcrest.Matcher matcher>;

        $z0 = interfaceinvoke $r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.core.IsNot r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.hamcrest.core.IsNot;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("not ");

        $r3 = r0.<org.hamcrest.core.IsNot: org.hamcrest.Matcher matcher>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r3);

        return;
    }

    public static org.hamcrest.Matcher not(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.hamcrest.core.IsNot $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.core.IsNot;

        specialinvoke $r1.<org.hamcrest.core.IsNot: void <init>(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static org.hamcrest.Matcher not(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.hamcrest.core.IsNot: org.hamcrest.Matcher not(org.hamcrest.Matcher)>($r1);

        return $r2;
    }
}
