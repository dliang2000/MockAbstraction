public class org.apache.flink.core.fs.FileSystemSafetyNet extends java.lang.Object
{
    private static final java.lang.ThreadLocal REGISTRIES;

    public void <init>()
    {
        org.apache.flink.core.fs.FileSystemSafetyNet r0;

        r0 := @this: org.apache.flink.core.fs.FileSystemSafetyNet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initializeSafetyNetForThread()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry r0, $r5;
        java.lang.ThreadLocal $r2, $r6;
        java.lang.Object $r3;
        java.lang.Object[] $r4;
        boolean $z0;

        $r2 = <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (org.apache.flink.core.fs.SafetyNetCloseableRegistry) $r3;

        if null != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "Found an existing FileSystem safety net for this thread: %s This may indicate an accidental repeated initialization, or a leak of the(Inheritable)ThreadLocal through a ThreadPool.", $r4);

        $r5 = new org.apache.flink.core.fs.SafetyNetCloseableRegistry;

        specialinvoke $r5.<org.apache.flink.core.fs.SafetyNetCloseableRegistry: void <init>()>();

        $r6 = <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES>;

        virtualinvoke $r6.<java.lang.ThreadLocal: void set(java.lang.Object)>($r5);

        return;
    }

    public static void closeSafetyNetAndGuardedResourcesForThread()
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistry r0;
        java.lang.ThreadLocal $r1, $r3;
        java.lang.Object $r2;

        $r1 = <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (org.apache.flink.core.fs.SafetyNetCloseableRegistry) $r2;

        if null == r0 goto label1;

        $r3 = <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void remove()>();

        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

     label1:
        return;
    }

    static org.apache.flink.core.fs.FileSystem wrapWithSafetyNetWhenActivated(org.apache.flink.core.fs.FileSystem)
    {
        org.apache.flink.core.fs.FileSystem r0, $r4;
        org.apache.flink.core.fs.SafetyNetCloseableRegistry r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        org.apache.flink.core.fs.SafetyNetWrapperFileSystem r5;

        r0 := @parameter0: org.apache.flink.core.fs.FileSystem;

        $r2 = <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (org.apache.flink.core.fs.SafetyNetCloseableRegistry) $r3;

        if r1 == null goto label1;

        r5 = new org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        $r4 = r5;

        specialinvoke r5.<org.apache.flink.core.fs.SafetyNetWrapperFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,org.apache.flink.core.fs.SafetyNetCloseableRegistry)>(r0, r1);

        goto label2;

     label1:
        $r4 = r0;

     label2:
        return $r4;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <org.apache.flink.core.fs.FileSystemSafetyNet: java.lang.ThreadLocal REGISTRIES> = $r0;

        return;
    }
}
