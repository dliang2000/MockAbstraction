public class org.apache.flink.api.dag.TransformationTest extends org.apache.flink.util.TestLogger
{
    private org.apache.flink.api.dag.Transformation transformation;

    public void <init>()
    {
        org.apache.flink.api.dag.TransformationTest r0;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void setUp()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.api.dag.TransformationTest$TestTransformation $r1;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r1 = new org.apache.flink.api.dag.TransformationTest$TestTransformation;

        specialinvoke $r1.<org.apache.flink.api.dag.TransformationTest$TestTransformation: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation,int)>("t", null, 1);

        r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation> = $r1;

        return;
    }

    public void testDeclareManagedMemoryUseCase()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1, $r4, $r8, $r15;
        org.apache.flink.api.dag.Transformation $r2, $r5, $r6, $r12;
        java.util.Map $r7;
        java.lang.Object $r9;
        java.lang.Integer $r10;
        org.hamcrest.Matcher $r11, $r16;
        java.util.Set $r13;
        org.apache.flink.core.memory.ManagedMemoryUseCase[] $r14;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r2 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase OPERATOR>;

        virtualinvoke $r2.<org.apache.flink.api.dag.Transformation: java.util.Optional declareManagedMemoryUseCaseAtOperatorScope(org.apache.flink.core.memory.ManagedMemoryUseCase,int)>($r1, 123);

        $r5 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r4 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase STATE_BACKEND>;

        virtualinvoke $r5.<org.apache.flink.api.dag.Transformation: void declareManagedMemoryUseCaseAtSlotScope(org.apache.flink.core.memory.ManagedMemoryUseCase)>($r4);

        $r6 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.dag.Transformation: java.util.Map getManagedMemoryOperatorScopeUseCaseWeights()>();

        $r8 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase OPERATOR>;

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(123);

        $r11 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r11);

        $r12 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r13 = virtualinvoke $r12.<org.apache.flink.api.dag.Transformation: java.util.Set getManagedMemorySlotScopeUseCases()>();

        $r14 = newarray (org.apache.flink.core.memory.ManagedMemoryUseCase)[1];

        $r15 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase STATE_BACKEND>;

        $r14[0] = $r15;

        $r16 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher contains(java.lang.Object[])>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r16);

        return;
    }

    public void testDeclareManagedMemoryOperatorScopeUseCaseFailWrongScope()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1;
        org.apache.flink.api.dag.Transformation $r2;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r2 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase PYTHON>;

        virtualinvoke $r2.<org.apache.flink.api.dag.Transformation: java.util.Optional declareManagedMemoryUseCaseAtOperatorScope(org.apache.flink.core.memory.ManagedMemoryUseCase,int)>($r1, 123);

        return;
    }

    public void testDeclareManagedMemoryOperatorScopeUseCaseFailZeroWeight()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1;
        org.apache.flink.api.dag.Transformation $r2;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r2 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase OPERATOR>;

        virtualinvoke $r2.<org.apache.flink.api.dag.Transformation: java.util.Optional declareManagedMemoryUseCaseAtOperatorScope(org.apache.flink.core.memory.ManagedMemoryUseCase,int)>($r1, 0);

        return;
    }

    public void testDeclareManagedMemoryOperatorScopeUseCaseFailNegativeWeight()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1;
        org.apache.flink.api.dag.Transformation $r2;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r2 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase OPERATOR>;

        virtualinvoke $r2.<org.apache.flink.api.dag.Transformation: java.util.Optional declareManagedMemoryUseCaseAtOperatorScope(org.apache.flink.core.memory.ManagedMemoryUseCase,int)>($r1, -1);

        return;
    }

    public void testDeclareManagedMemorySlotScopeUseCaseFailWrongScope()
    {
        org.apache.flink.api.dag.TransformationTest r0;
        org.apache.flink.core.memory.ManagedMemoryUseCase $r1;
        org.apache.flink.api.dag.Transformation $r2;

        r0 := @this: org.apache.flink.api.dag.TransformationTest;

        $r2 = r0.<org.apache.flink.api.dag.TransformationTest: org.apache.flink.api.dag.Transformation transformation>;

        $r1 = <org.apache.flink.core.memory.ManagedMemoryUseCase: org.apache.flink.core.memory.ManagedMemoryUseCase OPERATOR>;

        virtualinvoke $r2.<org.apache.flink.api.dag.Transformation: void declareManagedMemoryUseCaseAtSlotScope(org.apache.flink.core.memory.ManagedMemoryUseCase)>($r1);

        return;
    }
}
