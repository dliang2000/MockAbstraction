public final class org.apache.logging.log4j.util.LoaderUtil extends java.lang.Object
{
    public static final java.lang.String IGNORE_TCCL_PROPERTY;
    private static final java.lang.SecurityManager SECURITY_MANAGER;
    private static java.lang.Boolean ignoreTCCL;
    private static final boolean GET_CLASS_LOADER_DISABLED;
    private static final java.security.PrivilegedAction TCCL_GETTER;

    private void <init>()
    {
        org.apache.logging.log4j.util.LoaderUtil r0;

        r0 := @this: org.apache.logging.log4j.util.LoaderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.ClassLoader getThreadContextClassLoader()
    {
        boolean $z0;
        java.lang.SecurityManager $r0;
        java.security.PrivilegedAction $r1, $r3;
        java.lang.Object $r2, $r4;
        java.lang.Class $r5;
        java.lang.ClassLoader $r6, $r7;

        $z0 = <org.apache.logging.log4j.util.LoaderUtil: boolean GET_CLASS_LOADER_DISABLED>;

        if $z0 == 0 goto label1;

        $r5 = class "Lorg/apache/logging/log4j/util/LoaderUtil;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        return $r6;

     label1:
        $r0 = <org.apache.logging.log4j.util.LoaderUtil: java.lang.SecurityManager SECURITY_MANAGER>;

        if $r0 != null goto label2;

        $r3 = <org.apache.logging.log4j.util.LoaderUtil: java.security.PrivilegedAction TCCL_GETTER>;

        $r4 = interfaceinvoke $r3.<java.security.PrivilegedAction: java.lang.Object run()>();

        $r7 = (java.lang.ClassLoader) $r4;

        goto label3;

     label2:
        $r1 = <org.apache.logging.log4j.util.LoaderUtil: java.security.PrivilegedAction TCCL_GETTER>;

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r7 = (java.lang.ClassLoader) $r2;

     label3:
        return $r7;
    }

    public static java.lang.ClassLoader[] getClassLoaders()
    {
        java.lang.ClassLoader r1, r2, r3, r9, $r10, r11;
        java.util.ArrayList $r4;
        java.lang.Class $r5;
        boolean $z1, $z3, $z6;
        int $i0;
        java.lang.ClassLoader[] $r6, $r8;
        java.lang.Object[] $r7;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader getThreadContextClassLoader()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = class "Lorg/apache/logging/log4j/util/LoaderUtil;";

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r2 == null goto label2;

        if r2 == r1 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        r9 = virtualinvoke r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label1:
        if r9 == null goto label2;

        $z6 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r9);

        if $z6 != 0 goto label2;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label1;

     label2:
        if r1 != null goto label3;

        $r10 = null;

        goto label4;

     label3:
        $r10 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label4:
        r11 = $r10;

     label5:
        if r11 == null goto label6;

        $z3 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r11);

        if $z3 != 0 goto label6;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r11);

        r11 = virtualinvoke r11.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label5;

     label6:
        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $z1 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label7;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label7:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r6 = newarray (java.lang.ClassLoader)[$i0];

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.ClassLoader[]) $r7;

        return $r8;
    }

    public static boolean isClassAvailable(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.Throwable $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.Class r7;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        r7 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Class loadClass(java.lang.String)>(r0);

        if r7 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r6 := @caughtexception;

        return 0;

     label5:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown error checking for existence of class: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.String,java.lang.Throwable)>($r5, $r1);

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label3 with label4;
        catch java.lang.LinkageError from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
    }

    public static java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3, $r4, $r6;
        java.lang.Throwable $r5;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: boolean isIgnoreTccl()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r4;

     label1:
        $r2 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader getThreadContextClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Object newInstanceOf(java.lang.Class) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Class r0;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5, $r7;
        java.lang.NoSuchMethodException $r6;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r4 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        return $r7;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.Object newInstanceOf(java.lang.String) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Class loadClass(java.lang.String)>(r0);

        $r2 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Object newInstanceOf(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.lang.Object newCheckedInstanceOf(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.String r0;
        java.lang.Class r1;
        java.lang.Object $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Object newInstanceOf(java.lang.String)>(r0);

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2);

        return $r3;
    }

    public static java.lang.Object newCheckedInstanceOfProperty(java.lang.String, java.lang.Class) throws java.lang.ClassNotFoundException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException, java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.String r0, r2;
        java.lang.Class r1;
        org.apache.logging.log4j.util.PropertiesUtil $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        $r3 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        r2 = virtualinvoke $r3.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>(r0);

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Object newCheckedInstanceOf(java.lang.String,java.lang.Class)>(r2, r1);

        return $r4;
    }

    private static boolean isIgnoreTccl()
    {
        java.lang.String r0, $r3, $r4;
        java.lang.Boolean $r1, $r5, $r6;
        org.apache.logging.log4j.util.PropertiesUtil $r2;
        boolean $z0, $z1, $z2;

        $r1 = <org.apache.logging.log4j.util.LoaderUtil: java.lang.Boolean ignoreTCCL>;

        if $r1 != null goto label3;

        $r2 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        r0 = virtualinvoke $r2.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("log4j.ignoreTCL", null);

        if r0 == null goto label1;

        $r3 = "false";

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        <org.apache.logging.log4j.util.LoaderUtil: java.lang.Boolean ignoreTCCL> = $r5;

     label3:
        $r6 = <org.apache.logging.log4j.util.LoaderUtil: java.lang.Boolean ignoreTCCL>;

        $z2 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;
    }

    public static java.util.Collection findResources(java.lang.String)
    {
        java.lang.String r0;
        java.util.Collection r1;
        java.util.Iterator r3;
        org.apache.logging.log4j.util.LoaderUtil$UrlResource r4;
        java.util.LinkedHashSet $r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r6;
        java.net.URL $r7;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.util.Collection findUrlResources(java.lang.String)>(r0);

        $r5 = new java.util.LinkedHashSet;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>(int)>($i0);

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.logging.log4j.util.LoaderUtil$UrlResource) $r6;

        $r7 = virtualinvoke r4.<org.apache.logging.log4j.util.LoaderUtil$UrlResource: java.net.URL getUrl()>();

        interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r5;
    }

    static java.util.Collection findUrlResources(java.lang.String)
    {
        java.lang.String r0;
        int i0, i2;
        java.lang.ClassLoader r4, $r6, $r8, $r14;
        java.lang.ClassLoader[] $r5;
        java.lang.Class $r7;
        boolean $z0, $z1;
        java.util.LinkedHashSet $r9;
        org.apache.logging.log4j.util.LoaderUtil$UrlResource $r10;
        java.lang.Object $r11;
        java.net.URL $r12;
        java.io.IOException $r13;
        java.util.Enumeration r15;

        r0 := @parameter0: java.lang.String;

        $r5 = newarray (java.lang.ClassLoader)[3];

        $r6 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader getThreadContextClassLoader()>();

        $r5[0] = $r6;

        $r7 = class "Lorg/apache/logging/log4j/util/LoaderUtil;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5[1] = $r8;

        $z0 = <org.apache.logging.log4j.util.LoaderUtil: boolean GET_CLASS_LOADER_DISABLED>;

        if $z0 == 0 goto label1;

        $r14 = null;

        goto label2;

     label1:
        $r14 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label2:
        $r5[2] = $r14;

        $r9 = new java.util.LinkedHashSet;

        specialinvoke $r9.<java.util.LinkedHashSet: void <init>()>();

        i0 = lengthof $r5;

        i2 = 0;

     label3:
        if i2 >= i0 goto label9;

        r4 = $r5[i2];

        if r4 == null goto label8;

     label4:
        r15 = virtualinvoke r4.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r0);

     label5:
        $z1 = interfaceinvoke r15.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label6;

        $r10 = new org.apache.logging.log4j.util.LoaderUtil$UrlResource;

        $r11 = interfaceinvoke r15.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r12 = (java.net.URL) $r11;

        specialinvoke $r10.<org.apache.logging.log4j.util.LoaderUtil$UrlResource: void <init>(java.lang.ClassLoader,java.net.URL)>(r4, $r12);

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>($r10);

        goto label5;

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.Throwable)>($r13);

     label8:
        i2 = i2 + 1;

        goto label3;

     label9:
        return $r9;

        catch java.io.IOException from label4 to label6 with label7;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <org.apache.logging.log4j.util.LoaderUtil: boolean GET_CLASS_LOADER_DISABLED>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.SecurityManager $r1, $r3, $r5;
        org.apache.logging.log4j.util.LoaderUtil$ThreadContextClassLoaderGetter $r2;
        java.lang.RuntimePermission $r4;
        java.lang.SecurityException $r6;
        boolean z0;

        <org.apache.logging.log4j.util.LoaderUtil: java.lang.String IGNORE_TCCL_PROPERTY> = "log4j.ignoreTCL";

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        <org.apache.logging.log4j.util.LoaderUtil: java.lang.SecurityManager SECURITY_MANAGER> = $r1;

        $r2 = new org.apache.logging.log4j.util.LoaderUtil$ThreadContextClassLoaderGetter;

        specialinvoke $r2.<org.apache.logging.log4j.util.LoaderUtil$ThreadContextClassLoaderGetter: void <init>(org.apache.logging.log4j.util.LoaderUtil$1)>(null);

        <org.apache.logging.log4j.util.LoaderUtil: java.security.PrivilegedAction TCCL_GETTER> = $r2;

        $r3 = <org.apache.logging.log4j.util.LoaderUtil: java.lang.SecurityManager SECURITY_MANAGER>;

        if $r3 == null goto label5;

     label1:
        $r5 = <org.apache.logging.log4j.util.LoaderUtil: java.lang.SecurityManager SECURITY_MANAGER>;

        $r4 = new java.lang.RuntimePermission;

        specialinvoke $r4.<java.lang.RuntimePermission: void <init>(java.lang.String)>("getClassLoader");

        virtualinvoke $r5.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r4);

        z0 = 0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        z0 = 1;

     label4:
        <org.apache.logging.log4j.util.LoaderUtil: boolean GET_CLASS_LOADER_DISABLED> = z0;

        goto label6;

     label5:
        <org.apache.logging.log4j.util.LoaderUtil: boolean GET_CLASS_LOADER_DISABLED> = 0;

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
