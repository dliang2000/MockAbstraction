public abstract class org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot extends org.apache.flink.core.io.VersionedIOReadableWritable implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    static final int ADAPTER_VERSION;
    private java.lang.ClassLoader userCodeClassLoader;
    private org.apache.flink.api.common.typeutils.TypeSerializer serializer;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void <init>()>();

        return;
    }

    public final void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r3;

        return;
    }

    public final void setUserCodeClassLoader(java.lang.ClassLoader)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        java.lang.ClassLoader r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.ClassLoader) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: java.lang.ClassLoader userCodeClassLoader> = $r3;

        return;
    }

    public final java.lang.ClassLoader getUserCodeClassLoader()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        java.lang.ClassLoader $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: java.lang.ClassLoader userCodeClassLoader>;

        return $r1;
    }

    public final int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        return 2052310256;
    }

    public final void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "the prior serializer has not been set on this");

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r3);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public final void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        if i0 == 2052310256 goto label1;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong/unexpected version for the TypeSerializerConfigSnapshot: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>(r1, r2, 1);

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer> = $r3;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setUserCodeClassLoader(java.lang.ClassLoader)>(r2);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        return;
    }

    public final org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        java.lang.Throwable r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2, $r3, $r4, $r5;
        boolean $z0;
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer $r6;
        java.lang.IllegalStateException $r7, $r15;
        java.lang.StringBuilder $r8, $r9, $r12, $r13;
        java.lang.Class $r10;
        java.lang.String $r11, $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        if $r2 != null goto label1;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to restore the prior serializer via TypeSerializerConfigSnapshot, but the prior serializer has not been set.");

        throw $r15;

     label1:
        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $z0 = $r3 instanceof org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        $r6 = (org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer) $r5;

        r1 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: java.lang.Throwable getOriginalError()>();

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not Java-deserialize TypeSerializer while restoring checkpoint metadata for serializer snapshot \'");

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Please update to the TypeSerializerSnapshot interface that removes Java Serialization to avoid this problem in the future.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r14, r1);

        throw $r7;

     label2:
        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer serializer>;

        return $r4;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot$SelfResolvingTypeSerializer r2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.Class $r6;
        java.lang.String $r7, $r10;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r11;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot$SelfResolvingTypeSerializer;

        if $z0 == 0 goto label1;

        r2 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot$SelfResolvingTypeSerializer) r1;

        $r11 = interfaceinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot$SelfResolvingTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibilityViaRedirectingToNewSnapshotClass(org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot)>(r0);

        return $r11;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Serializer snapshot ");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is still implementing the deprecated TypeSerializerConfigSnapshot class.\nPlease update it to implement the TypeSerializerSnapshot interface, to enable state evolution as well as being future-proof.\n\n- If possible, you should try to perform the update in-place, i.e. use the same snapshot class under the same name, but change it to implement TypeSerializerSnapshot instead.\n\n- Otherwise, if the above isn\'t possible (perhaps because the new snapshot is intended to have completely\n  different written contents or intended to have a different class name),\n  retain the old serializer snapshot class (extending TypeSerializerConfigSnapshot) under the same name\n  and give the updated serializer snapshot class (the one extending TypeSerializerSnapshot) a new name.\n  Afterwards, override the TypeSerializerConfigSnapshot#resolveSchemaCompatibility(TypeSerializer)\n  method on the old snapshot to perform the compatibility check based on configuration written by  the old serializer snapshot class.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r10);

        throw $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: int ADAPTER_VERSION> = 2052310256;

        return;
    }
}
