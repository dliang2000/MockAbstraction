public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializable$Base implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode, java.lang.Iterable
{

    protected void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializable$Base: void <init>()>();

        return;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode deepCopy();

    public int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isEmpty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isValueNode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        int[] $r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode$1: int[] $SwitchMap$com$fasterxml$jackson$databind$node$JsonNodeType>;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $i0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            default: goto label2;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public final boolean isContainerNode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType r1, $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType OBJECT>;

        if r1 == $r2 goto label1;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType ARRAY>;

        if r1 != $r3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isMissingNode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isArray()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isObject()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(int);

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode path(java.lang.String);

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode path(int);

    public java.util.Iterator fieldNames()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();

        return $r1;
    }

    public final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, r2, $r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer r1, $r3;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.MissingNode $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: boolean matches()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>(r1);

        if r2 != null goto label2;

        $r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.MissingNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.MissingNode getInstance()>();

        return $r5;

     label2:
        $r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer tail()>();

        $r4 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>($r3);

        return $r4;
    }

    public final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r3;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>($r2);

        return $r3;
    }

    protected abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer);

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType();

    public final boolean isPojo()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType POJO>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isNumber()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType NUMBER>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isIntegralNumber()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isFloatingPointNumber()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isShort()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isInt()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isLong()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isFloat()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isDouble()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isBigDecimal()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean isBigInteger()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public final boolean isTextual()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType STRING>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isBoolean()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType BOOLEAN>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isNull()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType NULL>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isBinary()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.node.JsonNodeType BINARY>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean canConvertToInt()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean canConvertToLong()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public boolean canConvertToExactIntegral()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: boolean isIntegralNumber()>();

        return $z0;
    }

    public java.lang.String textValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return null;
    }

    public byte[] binaryValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return null;
    }

    public boolean booleanValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public java.lang.Number numberValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return null;
    }

    public short shortValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public int intValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0;
    }

    public long longValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0L;
    }

    public float floatValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0.0F;
    }

    public double doubleValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return 0.0;
    }

    public java.math.BigDecimal decimalValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        return $r1;
    }

    public java.math.BigInteger bigIntegerValue()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.math.BigInteger $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r1;
    }

    public abstract java.lang.String asText();

    public java.lang.String asText(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1, r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();

        if r2 != null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = r2;

     label2:
        return $r3;
    }

    public int asInt()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: int asInt(int)>(0);

        return $i0;
    }

    public int asInt(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        return i0;
    }

    public long asLong()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        long $l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $l0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: long asLong(long)>(0L);

        return $l0;
    }

    public long asLong(long)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        long l0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        l0 := @parameter0: long;

        return l0;
    }

    public double asDouble()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $d0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: double asDouble(double)>(0.0);

        return $d0;
    }

    public double asDouble(double)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        double d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        d0 := @parameter0: double;

        return d0;
    }

    public boolean asBoolean()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: boolean asBoolean(boolean)>(0);

        return $z0;
    }

    public boolean asBoolean(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        boolean z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        z0 := @parameter0: boolean;

        return z0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode require() throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _this()>();

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode requireNonNull() throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _this()>();

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode required(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r6;
        java.lang.String r1, $r4;
        java.lang.Object[] $r2;
        java.lang.Class $r3;
        java.lang.Object $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no fields", $r2);

        $r6 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode) $r5;

        return $r6;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode required(int) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r5;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no indexed values", $r1);

        $r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode) $r4;

        return $r5;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode requiredAt(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r3;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(r1);

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode requiredAt(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>($r2);

        return $r3;
    }

    public final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode requiredAt(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer r1, r4;
        boolean $z0;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer;

        r4 = r1;

        r5 = r0;

     label1:
        $z0 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: boolean matches()>();

        if $z0 == 0 goto label2;

        return r5;

     label2:
        r5 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>(r4);

        if r5 != null goto label3;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r2[1] = r4;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("No node at \'%s\' (unmatched part: \'%s\')", $r2);

     label3:
        r4 = virtualinvoke r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer tail()>();

        goto label1;
    }

    public boolean has(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean has(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r1;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(int)>(i0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasNonNull(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, r2;
        java.lang.String r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: boolean isNull()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean hasNonNull(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, r1;
        int i0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(int)>(i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: boolean isNull()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final java.util.Iterator iterator()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.util.Iterator elements()>();

        return $r1;
    }

    public java.util.Iterator elements()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();

        return $r1;
    }

    public java.util.Iterator fields()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.util.Iterator $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();

        return $r1;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode findValue(java.lang.String);

    public final java.util.List findValues(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1;
        java.util.List r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>(r1, null);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        return r2;
    }

    public final java.util.List findValuesAsText(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1;
        java.util.List r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>(r1, null);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        return r2;
    }

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode findPath(java.lang.String);

    public abstract org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode findParent(java.lang.String);

    public final java.util.List findParents(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1;
        java.util.List r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>(r1, null);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        return r2;
    }

    public abstract java.util.List findValues(java.lang.String, java.util.List);

    public abstract java.util.List findValuesAsText(java.lang.String, java.util.List);

    public abstract java.util.List findParents(java.lang.String, java.util.List);

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode 'with'(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1, $r6, $r9;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonNode not of type ObjectNode (but ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), cannot call with() on it");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode withArray(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1, $r6, $r9;
        java.lang.UnsupportedOperationException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JsonNode not of type ObjectNode (but ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), cannot call withArray() on it");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r2;
    }

    public boolean equals(java.util.Comparator, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, r2;
        java.util.Comparator r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.util.Comparator;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r2);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract java.lang.String toString();

    public java.lang.String toPrettyString()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: java.lang.String toString()>();

        return $r1;
    }

    public abstract boolean equals(java.lang.Object);

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode _this()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        return r0;
    }

    protected transient java.lang.Object _reportRequiredViolation(java.lang.String, java.lang.Object[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode at(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode at(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonPointer)>(r1);

        return $r2;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode path(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode path(int)>(i0);

        return $r1;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode path(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode path(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode get(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r1;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(int)>(i0);

        return $r1;
    }

    public volatile org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.TreeNode get(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode r0, $r2;
        java.lang.String r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(r1);

        return $r2;
    }
}
