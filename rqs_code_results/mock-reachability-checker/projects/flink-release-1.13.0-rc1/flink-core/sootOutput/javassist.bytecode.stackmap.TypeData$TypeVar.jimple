public class javassist.bytecode.stackmap.TypeData$TypeVar extends javassist.bytecode.stackmap.TypeData$AbsTypeVar
{
    protected java.util.List lowers;
    protected java.util.List usedBy;
    protected java.util.List uppers;
    protected java.lang.String fixedType;
    private boolean is2WordType;
    private int visited;
    private int smallest;
    private boolean inList;
    private int dimension;

    public void <init>(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        javassist.bytecode.stackmap.TypeData r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited> = 0;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest> = 0;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean inList> = 0;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int dimension> = 0;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers> = null;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(2);

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(2);

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List usedBy> = $r3;

        virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: void merge(javassist.bytecode.stackmap.TypeData)>(r1);

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType> = null;

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean is2WordType> = $z0;

        return;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1, $r2, $r6;
        java.util.List $r3;
        java.lang.Object $r4;
        javassist.bytecode.stackmap.TypeData $r5;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (javassist.bytecode.stackmap.TypeData) $r4;

        $r6 = virtualinvoke $r5.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        return $r6;

     label1:
        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        return $r2;
    }

    public javassist.bytecode.stackmap.TypeData$BasicType isBasicType()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        javassist.bytecode.stackmap.TypeData $r4;
        javassist.bytecode.stackmap.TypeData$BasicType $r5;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (javassist.bytecode.stackmap.TypeData) $r3;

        $r5 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        return $r5;

     label1:
        return null;
    }

    public boolean is2WordType()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $z0 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean is2WordType>;

        return $z0;

     label1:
        return 0;
    }

    public boolean isNullType()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        javassist.bytecode.stackmap.TypeData $r4;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (javassist.bytecode.stackmap.TypeData) $r3;

        $z0 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isUninit()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1;
        java.util.List $r2;
        java.lang.Object $r3;
        javassist.bytecode.stackmap.TypeData $r4;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (javassist.bytecode.stackmap.TypeData) $r3;

        $z0 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: boolean isUninit()>();

        return $z0;

     label1:
        return 0;
    }

    public void merge(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0, $r3;
        javassist.bytecode.stackmap.TypeData r1;
        java.util.List $r2, $r4;
        boolean $z1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $z1 = r1 instanceof javassist.bytecode.stackmap.TypeData$TypeVar;

        if $z1 == 0 goto label1;

        $r3 = (javassist.bytecode.stackmap.TypeData$TypeVar) r1;

        $r4 = $r3.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List usedBy>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    public int getTypeTag()
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        javassist.bytecode.stackmap.TypeData $r4;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r1 != null goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (javassist.bytecode.stackmap.TypeData) $r3;

        $i1 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        return $i1;

     label1:
        $i0 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: int getTypeTag()>();

        return $i0;
    }

    public int getTypeData(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String $r2;
        int $i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        javassist.bytecode.stackmap.TypeData $r5;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType>;

        if $r2 != null goto label1;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (javassist.bytecode.stackmap.TypeData) $r4;

        $i1 = virtualinvoke $r5.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>(r1);

        return $i1;

     label1:
        $i0 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: int getTypeData(javassist.bytecode.ConstPool)>(r1);

        return $i0;
    }

    public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.lang.String r1;
        javassist.ClassPool r2;
        java.util.List $r3, $r4;
        java.util.ArrayList $r5;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers>;

        if $r3 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers> = $r5;

     label1:
        $r4 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        int i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int dimension> = i0;

        return r0;
    }

    public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        int i0;
        javassist.bytecode.stackmap.TypeData$BasicType r1;
        javassist.bytecode.stackmap.TypeData $r2, $r5;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$ClassName $r3;
        java.lang.String $r4;
        javassist.bytecode.stackmap.TypeData$NullType $r6;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        r1 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        if r1 != null goto label3;

        $z0 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean isNullType()>();

        if $z0 == 0 goto label2;

        $r6 = new javassist.bytecode.stackmap.TypeData$NullType;

        specialinvoke $r6.<javassist.bytecode.stackmap.TypeData$NullType: void <init>()>();

        return $r6;

     label2:
        $r3 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r4 = virtualinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String getName()>();

        specialinvoke $r3.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData$ClassName: javassist.bytecode.stackmap.TypeData getArrayType(int)>(i0);

        return $r5;

     label3:
        $r2 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData$BasicType: javassist.bytecode.stackmap.TypeData getArrayType(int)>(i0);

        return $r2;
    }

    public int dfs(java.util.List, int, javassist.ClassPool) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0, r9, r11;
        java.util.List r1, $r3, $r6;
        javassist.ClassPool r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.util.ArrayList $r4;
        java.lang.Object $r5, $r7;
        javassist.bytecode.stackmap.TypeData $r8;
        boolean $z2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.List;

        i14 := @parameter1: int;

        r2 := @parameter2: javassist.ClassPool;

        $i1 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited>;

        if $i1 <= 0 goto label1;

        return i14;

     label1:
        i15 = i14 + 1;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest> = i15;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited> = i15;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean inList> = 1;

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i16 = 0;

     label2:
        if i16 >= i0 goto label5;

        $r6 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i16);

        $r8 = (javassist.bytecode.stackmap.TypeData) $r7;

        $i6 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int dimension>;

        r9 = virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$TypeVar toTypeVar(int)>($i6);

        if r9 == null goto label4;

        $i7 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited>;

        if $i7 != 0 goto label3;

        i15 = virtualinvoke r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int dfs(java.util.List,int,javassist.ClassPool)>(r1, i15, r2);

        $i12 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest>;

        $i11 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest>;

        if $i12 >= $i11 goto label4;

        $i13 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest>;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest> = $i13;

        goto label4;

     label3:
        $z2 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean inList>;

        if $z2 == 0 goto label4;

        $i9 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited>;

        $i8 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest>;

        if $i9 >= $i8 goto label4;

        $i10 = r9.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited>;

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest> = $i10;

     label4:
        i16 = i16 + 1;

        goto label2;

     label5:
        $i3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int visited>;

        $i2 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: int smallest>;

        if $i3 != $i2 goto label7;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label6:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>($i5);

        r11 = (javassist.bytecode.stackmap.TypeData$TypeVar) $r5;

        r11.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean inList> = 0;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r11);

        if r11 != r0 goto label6;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: void fixTypes(java.util.List,javassist.ClassPool)>($r4, r2);

     label7:
        return i15;
    }

    private void fixTypes(java.util.List, javassist.ClassPool) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0, r4;
        java.util.List r1, r5;
        javassist.ClassPool r2;
        int i0, i1, $i2, i3, i4;
        javassist.bytecode.stackmap.TypeData r6, r7, r14;
        javassist.bytecode.stackmap.TypeData$BasicType r8;
        java.util.HashSet $r9;
        javassist.bytecode.stackmap.TypeData$ClassName $r10;
        boolean $z0, $z1, $z3, z4;
        java.lang.Object $r11, $r12;
        java.lang.String $r13, r15;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: javassist.ClassPool;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        z4 = 0;

        r14 = null;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label01:
        if i3 >= i0 goto label10;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r4 = (javassist.bytecode.stackmap.TypeData$TypeVar) $r11;

        r5 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        i1 = interfaceinvoke r5.<java.util.List: int size()>();

        i4 = 0;

     label02:
        if i4 >= i1 goto label09;

        $r12 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i4);

        r6 = (javassist.bytecode.stackmap.TypeData) $r12;

        $i2 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: int dimension>;

        r7 = virtualinvoke r6.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData getArrayType(int)>($i2);

        r8 = virtualinvoke r7.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        if r14 != null goto label04;

        if r8 != null goto label03;

        z4 = 0;

        r14 = r7;

        $z3 = virtualinvoke r7.<javassist.bytecode.stackmap.TypeData: boolean isUninit()>();

        if $z3 == 0 goto label07;

        goto label09;

     label03:
        z4 = 1;

        r14 = r8;

        goto label07;

     label04:
        if r8 != null goto label05;

        if z4 != 0 goto label06;

     label05:
        if r8 == null goto label07;

        if r14 == r8 goto label07;

     label06:
        z4 = 1;

        r14 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        goto label09;

     label07:
        if r8 != null goto label08;

        $z1 = virtualinvoke r7.<javassist.bytecode.stackmap.TypeData: boolean isNullType()>();

        if $z1 != 0 goto label08;

        $r13 = virtualinvoke r7.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label08:
        i4 = i4 + 1;

        goto label02;

     label09:
        i3 = i3 + 1;

        goto label01;

     label10:
        if z4 == 0 goto label11;

        $z0 = virtualinvoke r14.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        r0.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean is2WordType> = $z0;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: void fixTypes1(java.util.List,javassist.bytecode.stackmap.TypeData)>(r1, r14);

        goto label12;

     label11:
        r15 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixTypes2(java.util.List,java.util.Set,javassist.ClassPool)>(r1, $r9, r2);

        $r10 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r10.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r15);

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: void fixTypes1(java.util.List,javassist.bytecode.stackmap.TypeData)>(r1, $r10);

     label12:
        return;
    }

    private void fixTypes1(java.util.List, javassist.bytecode.stackmap.TypeData) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0, r3;
        java.util.List r1, $r7, $r8;
        javassist.bytecode.stackmap.TypeData r2, r4;
        int i0, $i1, $i2, i3;
        java.lang.Object $r5;
        javassist.bytecode.stackmap.TypeData$BasicType $r6;
        boolean $z1;
        java.lang.String $r9;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: javassist.bytecode.stackmap.TypeData;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (javassist.bytecode.stackmap.TypeData$TypeVar) $r5;

        $i1 = r3.<javassist.bytecode.stackmap.TypeData$TypeVar: int dimension>;

        $i2 = neg $i1;

        r4 = virtualinvoke r2.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData getArrayType(int)>($i2);

        $r6 = virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData$BasicType isBasicType()>();

        if $r6 != null goto label2;

        $r9 = virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: java.lang.String getName()>();

        r3.<javassist.bytecode.stackmap.TypeData$TypeVar: java.lang.String fixedType> = $r9;

        goto label3;

     label2:
        $r7 = r3.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        $r8 = r3.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r4);

        $z1 = virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        r3.<javassist.bytecode.stackmap.TypeData$TypeVar: boolean is2WordType> = $z1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return;
    }

    private java.lang.String fixTypes2(java.util.List, java.util.Set, javassist.ClassPool) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.util.List r1;
        java.util.Set r2;
        javassist.ClassPool r3;
        java.util.Iterator r4;
        int $i0, $i1;
        java.lang.Object $r5, $r11, $r14;
        java.lang.String $r6, $r9, $r10, $r12, $r15;
        boolean $z0, $z1, $z2;
        javassist.CtClass $r7, $r13, r16;
        java.util.HashSet $r8;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: javassist.ClassPool;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = interfaceinvoke r2.<java.util.Set: int size()>();

        if $i1 != 1 goto label2;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (java.lang.String) $r14;

        return $r15;

     label2:
        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        r16 = virtualinvoke r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r6);

     label3:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r12);

        r16 = staticinvoke <javassist.bytecode.stackmap.TypeData$TypeVar: javassist.CtClass commonSuperClassEx(javassist.CtClass,javassist.CtClass)>(r16, $r13);

        goto label3;

     label4:
        $r7 = virtualinvoke r16.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if $r7 == null goto label5;

        $z1 = staticinvoke <javassist.bytecode.stackmap.TypeData$TypeVar: boolean isObjectArray(javassist.CtClass)>(r16);

        if $z1 == 0 goto label6;

     label5:
        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r16 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: javassist.CtClass fixByUppers(java.util.List,javassist.ClassPool,java.util.Set,javassist.CtClass)>(r1, r3, $r8, r16);

     label6:
        $z2 = virtualinvoke r16.<javassist.CtClass: boolean isArray()>();

        if $z2 == 0 goto label7;

        $r10 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(javassist.CtClass)>(r16);

        return $r10;

     label7:
        $r9 = virtualinvoke r16.<javassist.CtClass: java.lang.String getName()>();

        return $r9;
    }

    private static boolean isObjectArray(javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClass r0, $r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtClass;

        $z0 = virtualinvoke r0.<javassist.CtClass: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<javassist.CtClass: javassist.CtClass getComponentType()>();

        $r2 = virtualinvoke $r1.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if $r2 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private javassist.CtClass fixByUppers(java.util.List, javassist.ClassPool, java.util.Set, javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0, r4;
        java.util.List r1, $r7, $r8, $r9, $r10;
        javassist.ClassPool r2;
        java.util.Set r3;
        int i0, i1, i2, i3;
        javassist.CtClass r5, r13;
        java.lang.Object $r6, $r11;
        boolean $z0, $z1;
        java.lang.String $r12;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: javassist.ClassPool;

        r3 := @parameter2: java.util.Set;

        r13 := @parameter3: javassist.CtClass;

        if r1 != null goto label1;

        return r13;

     label1:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (javassist.bytecode.stackmap.TypeData$TypeVar) $r6;

        $z0 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r4);

        if $z0 != 0 goto label3;

        return r13;

     label3:
        $r7 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers>;

        if $r7 == null goto label6;

        $r9 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers>;

        i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        i3 = 0;

     label4:
        if i3 >= i1 goto label6;

        $r10 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List uppers>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i3);

        $r12 = (java.lang.String) $r11;

        r5 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r12);

        $z1 = virtualinvoke r5.<javassist.CtClass: boolean subtypeOf(javassist.CtClass)>(r13);

        if $z1 == 0 goto label5;

        r13 = r5;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        $r8 = r4.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List usedBy>;

        r13 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData$TypeVar: javassist.CtClass fixByUppers(java.util.List,javassist.ClassPool,java.util.Set,javassist.CtClass)>($r8, r2, r3, r13);

        i2 = i2 + 1;

        goto label2;

     label7:
        return r13;
    }

    java.lang.String toString2(java.util.Set)
    {
        javassist.bytecode.stackmap.TypeData$TypeVar r0;
        java.util.Set r1;
        javassist.bytecode.stackmap.TypeData r2;
        java.util.List $r3, $r4;
        int $i0;
        java.lang.Object $r5;
        boolean $z1;
        java.lang.String $r6;

        r0 := @this: javassist.bytecode.stackmap.TypeData$TypeVar;

        r1 := @parameter0: java.util.Set;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        $r3 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r4 = r0.<javassist.bytecode.stackmap.TypeData$TypeVar: java.util.List lowers>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (javassist.bytecode.stackmap.TypeData) $r5;

        if r2 == null goto label1;

        $z1 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label1;

        $r6 = virtualinvoke r2.<javassist.bytecode.stackmap.TypeData: java.lang.String toString2(java.util.Set)>(r1);

        return $r6;

     label1:
        return "?";
    }
}
