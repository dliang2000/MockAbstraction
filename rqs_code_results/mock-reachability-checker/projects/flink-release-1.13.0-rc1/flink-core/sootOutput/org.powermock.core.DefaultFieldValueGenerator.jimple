public class org.powermock.core.DefaultFieldValueGenerator extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.core.DefaultFieldValueGenerator r0;

        r0 := @this: org.powermock.core.DefaultFieldValueGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Object fillWithDefaultValues(java.lang.Object)
    {
        java.lang.Object r0, $r6, r12;
        java.util.Set r1;
        java.util.Iterator r2;
        java.lang.reflect.Field r3;
        java.lang.Class r4, $r7;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r9;
        java.lang.Exception $r10;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object to fill cannot be null");

        throw $r9;

     label1:
        r1 = staticinvoke <org.powermock.reflect.Whitebox: java.util.Set getAllInstanceFields(java.lang.Object)>(r0);

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Field) $r6;

        r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        r12 = staticinvoke <org.powermock.reflect.internal.TypeUtils: java.lang.Object getDefaultValue(java.lang.Class)>(r4);

        if r12 != null goto label3;

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r4 == $r7 goto label3;

        $z1 = virtualinvoke r3.<java.lang.reflect.Field: boolean isSynthetic()>();

        if $z1 != 0 goto label3;

        r12 = staticinvoke <org.powermock.core.DefaultFieldValueGenerator: java.lang.Object instantiateFieldType(java.lang.reflect.Field)>(r3);

        if r12 == null goto label3;

        staticinvoke <org.powermock.core.DefaultFieldValueGenerator: java.lang.Object fillWithDefaultValues(java.lang.Object)>(r12);

     label3:
        virtualinvoke r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r12);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to set field.", $r10);

        throw $r11;

     label6:
        goto label2;

     label7:
        return r0;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static java.lang.Object instantiateFieldType(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        int i0;
        java.lang.Class r1, r3, r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.powermock.core.ConcreteClassGenerator $r2;
        java.lang.Object r4, $r5;

        r0 := @parameter0: java.lang.reflect.Field;

        r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        i0 = virtualinvoke r3.<java.lang.Class: int getModifiers()>();

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/ClassLoader;");

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.powermock.core.DefaultFieldValueGenerator: boolean isClass(java.lang.Class)>(r3);

        if $z1 == 0 goto label2;

     label1:
        r4 = null;

        goto label6;

     label2:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z2 == 0 goto label5;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i0);

        if $z3 != 0 goto label5;

        $z4 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z4 != 0 goto label5;

        $r2 = new org.powermock.core.ConcreteClassGenerator;

        specialinvoke $r2.<org.powermock.core.ConcreteClassGenerator: void <init>()>();

        r1 = virtualinvoke $r2.<org.powermock.core.ConcreteClassGenerator: java.lang.Class createConcreteSubClass(java.lang.Class)>(r3);

        if r1 != null goto label3;

        $r5 = null;

        goto label4;

     label3:
        $r5 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object newInstance(java.lang.Class)>(r1);

     label4:
        r4 = $r5;

        goto label6;

     label5:
        r6 = staticinvoke <org.powermock.core.DefaultFieldValueGenerator: java.lang.Class substituteKnownProblemTypes(java.lang.Class)>(r3);

        r4 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object newInstance(java.lang.Class)>(r6);

     label6:
        return r4;
    }

    private static boolean isClass(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljava/lang/Class;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.lang.Class substituteKnownProblemTypes(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        if r0 != class "Ljava/net/InetAddress;" goto label1;

        return class "Ljava/net/Inet4Address;";

     label1:
        return r0;
    }
}
