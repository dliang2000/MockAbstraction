public class javassist.CtNewMethod extends java.lang.Object
{

    public void <init>()
    {
        javassist.CtNewMethod r0;

        r0 := @this: javassist.CtNewMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static javassist.CtMethod make(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        java.lang.String r0;
        javassist.CtClass r1;
        javassist.CtMethod $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtClass;

        $r2 = staticinvoke <javassist.CtNewMethod: javassist.CtMethod make(java.lang.String,javassist.CtClass,java.lang.String,java.lang.String)>(r0, r1, null, null);

        return $r2;
    }

    public static javassist.CtMethod make(java.lang.String, javassist.CtClass, java.lang.String, java.lang.String) throws javassist.CannotCompileException
    {
        java.lang.String r0, r2, r3;
        javassist.CtClass r1;
        javassist.compiler.Javac $r5;
        boolean $z0;
        javassist.CannotCompileException $r6, $r9;
        javassist.CtMethod $r7;
        javassist.compiler.CompileError $r8;
        javassist.CtMember r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtClass;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r5 = new javassist.compiler.Javac;

        specialinvoke $r5.<javassist.compiler.Javac: void <init>(javassist.CtClass)>(r1);

     label1:
        if r3 == null goto label2;

        virtualinvoke $r5.<javassist.compiler.Javac: void recordProceed(java.lang.String,java.lang.String)>(r2, r3);

     label2:
        r10 = virtualinvoke $r5.<javassist.compiler.Javac: javassist.CtMember compile(java.lang.String)>(r0);

        $z0 = r10 instanceof javassist.CtMethod;

        if $z0 == 0 goto label4;

        $r7 = (javassist.CtMethod) r10;

     label3:
        return $r7;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new javassist.CannotCompileException;

        specialinvoke $r9.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r8);

        throw $r9;

     label6:
        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.String)>("not a method");

        throw $r6;

        catch javassist.compiler.CompileError from label1 to label3 with label5;
    }

    public static javassist.CtMethod make(javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass[], java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r5;
        java.lang.String r1, r4;
        javassist.CtClass[] r2, r3;
        javassist.CtMethod $r6;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.CtClass[];

        r3 := @parameter3: javassist.CtClass[];

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: javassist.CtClass;

        $r6 = staticinvoke <javassist.CtNewMethod: javassist.CtMethod make(int,javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>(1, r0, r1, r2, r3, r4, r5);

        return $r6;
    }

    public static javassist.CtMethod make(int, javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass[], java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        int i0;
        javassist.CtClass r0, r5;
        java.lang.String r1, r4;
        javassist.CtClass[] r2, r3;
        javassist.CtMethod $r6;
        javassist.NotFoundException $r7;
        javassist.CannotCompileException $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: javassist.CtClass;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: javassist.CtClass[];

        r3 := @parameter4: javassist.CtClass[];

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: javassist.CtClass;

     label1:
        $r6 = new javassist.CtMethod;

        specialinvoke $r6.<javassist.CtMethod: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass)>(r0, r1, r2, r5);

        virtualinvoke $r6.<javassist.CtMethod: void setModifiers(int)>(i0);

        virtualinvoke $r6.<javassist.CtMethod: void setExceptionTypes(javassist.CtClass[])>(r3);

        virtualinvoke $r6.<javassist.CtMethod: void setBody(java.lang.String)>(r4);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new javassist.CannotCompileException;

        specialinvoke $r8.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r7);

        throw $r8;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    public static javassist.CtMethod copy(javassist.CtMethod, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, $r3;
        javassist.CtClass r1;
        javassist.ClassMap r2;

        r0 := @parameter0: javassist.CtMethod;

        r1 := @parameter1: javassist.CtClass;

        r2 := @parameter2: javassist.ClassMap;

        $r3 = new javassist.CtMethod;

        specialinvoke $r3.<javassist.CtMethod: void <init>(javassist.CtMethod,javassist.CtClass,javassist.ClassMap)>(r0, r1, r2);

        return $r3;
    }

    public static javassist.CtMethod copy(javassist.CtMethod, java.lang.String, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, $r5;
        java.lang.String r1;
        javassist.CtClass r2;
        javassist.ClassMap r3;

        r0 := @parameter0: javassist.CtMethod;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.ClassMap;

        $r5 = new javassist.CtMethod;

        specialinvoke $r5.<javassist.CtMethod: void <init>(javassist.CtMethod,javassist.CtClass,javassist.ClassMap)>(r0, r2, r3);

        virtualinvoke $r5.<javassist.CtMethod: void setName(java.lang.String)>(r1);

        return $r5;
    }

    public static javassist.CtMethod abstractMethod(javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass[], javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClass r0, r4;
        java.lang.String r1;
        javassist.CtClass[] r2, r3;
        javassist.CtMethod $r6;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.CtClass[];

        r3 := @parameter3: javassist.CtClass[];

        r4 := @parameter4: javassist.CtClass;

        $r6 = new javassist.CtMethod;

        specialinvoke $r6.<javassist.CtMethod: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass)>(r0, r1, r2, r4);

        virtualinvoke $r6.<javassist.CtMethod: void setExceptionTypes(javassist.CtClass[])>(r3);

        return $r6;
    }

    public static javassist.CtMethod getter(java.lang.String, javassist.CtField) throws javassist.CannotCompileException
    {
        java.lang.String r0, r3, r4, r20;
        javassist.CtField r1;
        javassist.bytecode.FieldInfo r2;
        javassist.bytecode.ConstPool r5;
        java.lang.StringBuilder $r8, $r9, $r10;
        javassist.bytecode.MethodInfo $r11;
        javassist.bytecode.Bytecode $r12;
        int $i0, $i1;
        javassist.CtClass $r13, $r14, $r17, r22;
        javassist.bytecode.CodeAttribute $r15;
        javassist.CtMethod $r16;
        javassist.NotFoundException $r18;
        javassist.CannotCompileException $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtField;

        r2 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke r2.<javassist.bytecode.FieldInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r11 = new javassist.bytecode.MethodInfo;

        specialinvoke $r11.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>(r5, r0, r4);

        virtualinvoke $r11.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>(1);

        $r12 = new javassist.bytecode.Bytecode;

        specialinvoke $r12.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r5, 2, 1);

     label1:
        r20 = virtualinvoke r2.<javassist.bytecode.FieldInfo: java.lang.String getName()>();

        $i0 = virtualinvoke r2.<javassist.bytecode.FieldInfo: int getAccessFlags()>();

        $i1 = $i0 & 8;

        if $i1 != 0 goto label2;

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void addAload(int)>(0);

        $r17 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void addGetfield(javassist.CtClass,java.lang.String,java.lang.String)>($r17, r20, r3);

        goto label3;

     label2:
        $r13 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void addGetstatic(javassist.CtClass,java.lang.String,java.lang.String)>($r13, r20, r3);

     label3:
        $r14 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getType()>();

        virtualinvoke $r12.<javassist.bytecode.Bytecode: void addReturn(javassist.CtClass)>($r14);

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

        $r19 = new javassist.CannotCompileException;

        specialinvoke $r19.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r18);

        throw $r19;

     label6:
        $r15 = virtualinvoke $r12.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r11.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r15);

        r22 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getDeclaringClass()>();

        $r16 = new javassist.CtMethod;

        specialinvoke $r16.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r11, r22);

        return $r16;

        catch javassist.NotFoundException from label1 to label4 with label5;
    }

    public static javassist.CtMethod setter(java.lang.String, javassist.CtField) throws javassist.CannotCompileException
    {
        java.lang.String r0, r3, r4, r22;
        javassist.CtField r1;
        javassist.bytecode.FieldInfo r2;
        javassist.bytecode.ConstPool r5;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        javassist.bytecode.MethodInfo $r12;
        javassist.bytecode.Bytecode $r13;
        int $i0, $i1;
        javassist.CtClass $r14, $r15, $r18, $r19, r24;
        javassist.bytecode.CodeAttribute $r16;
        javassist.CtMethod $r17;
        javassist.NotFoundException $r20;
        javassist.CannotCompileException $r21;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.CtField;

        r2 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        r4 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r5 = virtualinvoke r2.<javassist.bytecode.FieldInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r12 = new javassist.bytecode.MethodInfo;

        specialinvoke $r12.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>(r5, r0, r4);

        virtualinvoke $r12.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>(1);

        $r13 = new javassist.bytecode.Bytecode;

        specialinvoke $r13.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r5, 3, 3);

     label1:
        r22 = virtualinvoke r2.<javassist.bytecode.FieldInfo: java.lang.String getName()>();

        $i0 = virtualinvoke r2.<javassist.bytecode.FieldInfo: int getAccessFlags()>();

        $i1 = $i0 & 8;

        if $i1 != 0 goto label2;

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addAload(int)>(0);

        $r18 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getType()>();

        virtualinvoke $r13.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(1, $r18);

        $r19 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addPutfield(javassist.CtClass,java.lang.String,java.lang.String)>($r19, r22, r3);

        goto label3;

     label2:
        $r14 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getType()>();

        virtualinvoke $r13.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(1, $r14);

        $r15 = <javassist.bytecode.Bytecode: javassist.CtClass THIS>;

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addPutstatic(javassist.CtClass,java.lang.String,java.lang.String)>($r15, r22, r3);

     label3:
        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addReturn(javassist.CtClass)>(null);

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        $r21 = new javassist.CannotCompileException;

        specialinvoke $r21.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r20);

        throw $r21;

     label6:
        $r16 = virtualinvoke $r13.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r12.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r16);

        r24 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getDeclaringClass()>();

        $r17 = new javassist.CtMethod;

        specialinvoke $r17.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r12, r24);

        return $r17;

        catch javassist.NotFoundException from label1 to label4 with label5;
    }

    public static javassist.CtMethod delegator(javassist.CtMethod, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtMethod r0, $r3;
        javassist.CtClass r1;
        javassist.NotFoundException $r4;
        javassist.CannotCompileException $r5;

        r0 := @parameter0: javassist.CtMethod;

        r1 := @parameter1: javassist.CtClass;

     label1:
        $r3 = staticinvoke <javassist.CtNewMethod: javassist.CtMethod delegator0(javassist.CtMethod,javassist.CtClass)>(r0, r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new javassist.CannotCompileException;

        specialinvoke $r5.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r4);

        throw $r5;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    private static javassist.CtMethod delegator0(javassist.CtMethod, javassist.CtClass) throws javassist.CannotCompileException, javassist.NotFoundException
    {
        javassist.CtMethod r0, $r16;
        javassist.CtClass r1, r9, $r14;
        javassist.bytecode.MethodInfo r2, $r12;
        java.lang.String r3, r4;
        javassist.bytecode.ConstPool r5;
        javassist.bytecode.ExceptionsAttribute r7, $r19;
        boolean z0;
        javassist.CtClass[] r10;
        javassist.bytecode.ClassFile $r11;
        int $i0, $i1, i3, i4, $i5;
        javassist.bytecode.Bytecode $r13;
        javassist.bytecode.CodeAttribute $r15;
        javassist.bytecode.AttributeInfo $r18;

        r0 := @parameter0: javassist.CtMethod;

        r1 := @parameter1: javassist.CtClass;

        r2 = virtualinvoke r0.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        r4 = virtualinvoke r2.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r11 = virtualinvoke r1.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r5 = virtualinvoke $r11.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r12 = new javassist.bytecode.MethodInfo;

        specialinvoke $r12.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>(r5, r3, r4);

        $i0 = virtualinvoke r2.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        virtualinvoke $r12.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>($i0);

        r7 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.ExceptionsAttribute getExceptionsAttribute()>();

        if r7 == null goto label1;

        $r18 = virtualinvoke r7.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r5, null);

        $r19 = (javassist.bytecode.ExceptionsAttribute) $r18;

        virtualinvoke $r12.<javassist.bytecode.MethodInfo: void setExceptionsAttribute(javassist.bytecode.ExceptionsAttribute)>($r19);

     label1:
        $r13 = new javassist.bytecode.Bytecode;

        specialinvoke $r13.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r5, 0, 0);

        $i1 = virtualinvoke r0.<javassist.CtMethod: int getModifiers()>();

        z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i1);

        r9 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        r10 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        if z0 == 0 goto label2;

        i3 = virtualinvoke $r13.<javassist.bytecode.Bytecode: int addLoadParameters(javassist.CtClass[],int)>(r10, 0);

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addInvokestatic(javassist.CtClass,java.lang.String,java.lang.String)>(r9, r3, r4);

        goto label3;

     label2:
        virtualinvoke $r13.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(0, r9);

        i3 = virtualinvoke $r13.<javassist.bytecode.Bytecode: int addLoadParameters(javassist.CtClass[],int)>(r10, 1);

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addInvokespecial(javassist.CtClass,java.lang.String,java.lang.String)>(r9, r3, r4);

     label3:
        $r14 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void addReturn(javassist.CtClass)>($r14);

        i4 = i3 + 1;

        virtualinvoke $r13.<javassist.bytecode.Bytecode: void setMaxLocals(int)>(i4);

        if i4 >= 2 goto label4;

        $i5 = 2;

        goto label5;

     label4:
        $i5 = i4;

     label5:
        virtualinvoke $r13.<javassist.bytecode.Bytecode: void setMaxStack(int)>($i5);

        $r15 = virtualinvoke $r13.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r12.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r15);

        $r16 = new javassist.CtMethod;

        specialinvoke $r16.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r12, r1);

        return $r16;
    }

    public static javassist.CtMethod wrapped(javassist.CtClass, java.lang.String, javassist.CtClass[], javassist.CtClass[], javassist.CtMethod, javassist.CtMethod$ConstParameter, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClass r0, r6;
        java.lang.String r1;
        javassist.CtClass[] r2, r3;
        javassist.CtMethod r4, $r7;
        javassist.CtMethod$ConstParameter r5;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: javassist.CtClass[];

        r3 := @parameter3: javassist.CtClass[];

        r4 := @parameter4: javassist.CtMethod;

        r5 := @parameter5: javassist.CtMethod$ConstParameter;

        r6 := @parameter6: javassist.CtClass;

        $r7 = staticinvoke <javassist.CtNewWrappedMethod: javassist.CtMethod wrapped(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],javassist.CtMethod,javassist.CtMethod$ConstParameter,javassist.CtClass)>(r0, r1, r2, r3, r4, r5, r6);

        return $r7;
    }
}
