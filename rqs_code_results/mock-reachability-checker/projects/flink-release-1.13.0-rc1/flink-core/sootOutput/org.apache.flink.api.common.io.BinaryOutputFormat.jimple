public abstract class org.apache.flink.api.common.io.BinaryOutputFormat extends org.apache.flink.api.common.io.FileOutputFormat
{
    private static final long serialVersionUID;
    public static final java.lang.String BLOCK_SIZE_PARAMETER_KEY;
    public static final long NATIVE_BLOCK_SIZE;
    private long blockSize;
    private transient org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput blockBasedOutput;
    private transient org.apache.flink.core.memory.DataOutputViewStreamWrapper outView;

    public void <init>()
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize> = -9223372036854775808L;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper r1;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

     label1:
        r1 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.core.memory.DataOutputViewStreamWrapper outView>;

        if r1 == null goto label2;

        virtualinvoke r1.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label2:
        specialinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void close()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void close()>();

        throw $r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void complementBlockInfo(org.apache.flink.api.common.io.BlockInfo)
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        org.apache.flink.api.common.io.BlockInfo r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.BlockInfo;

        return;
    }

    public void configure(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        org.apache.flink.configuration.Configuration r1;
        long $l0, $l1, $l3, $l5;
        byte $b2, $b4, $b6;
        java.lang.UnsupportedOperationException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        specialinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>(r1);

        $l0 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: long getLong(java.lang.String,long)>("output.block_size", -9223372036854775808L);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize> = $l0;

        $l1 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize>;

        $b2 = $l1 cmp 1L;

        if $b2 >= 0 goto label1;

        $l5 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize>;

        $b6 = $l5 cmp -9223372036854775808L;

        if $b6 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The block size parameter must be set and larger than 0.");

        throw $r3;

     label1:
        $l3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize>;

        $b4 = $l3 cmp 2147483647L;

        if $b4 <= 0 goto label2;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Currently only block size up to Integer.MAX_VALUE are supported");

        throw $r2;

     label2:
        return;
    }

    protected org.apache.flink.api.common.io.BlockInfo createBlockInfo()
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        org.apache.flink.api.common.io.BlockInfo $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        $r1 = new org.apache.flink.api.common.io.BlockInfo;

        specialinvoke $r1.<org.apache.flink.api.common.io.BlockInfo: void <init>()>();

        return $r1;
    }

    public void open(int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        int i0, i1, $i5;
        long $l3, $l6;
        byte $b4;
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput $r1, $r4;
        org.apache.flink.core.fs.FSDataOutputStream $r2;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r3;
        org.apache.flink.core.fs.Path $r5;
        org.apache.flink.core.fs.FileSystem $r6;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void open(int,int)>(i0, i1);

        $l3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize>;

        $b4 = $l3 cmp -9223372036854775808L;

        if $b4 != 0 goto label1;

        $r5 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.core.fs.Path outputFilePath>;

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $l6 = virtualinvoke $r6.<org.apache.flink.core.fs.FileSystem: long getDefaultBlockSize()>();

        goto label2;

     label1:
        $l6 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: long blockSize>;

     label2:
        $r1 = new org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput;

        $r2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.core.fs.FSDataOutputStream stream>;

        $i5 = (int) $l6;

        specialinvoke $r1.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void <init>(org.apache.flink.api.common.io.BinaryOutputFormat,java.io.OutputStream,int)>(r0, $r2, $i5);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput blockBasedOutput> = $r1;

        $r3 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        $r4 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput blockBasedOutput>;

        specialinvoke $r3.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r4);

        r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.core.memory.DataOutputViewStreamWrapper outView> = $r3;

        return;
    }

    protected abstract void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException;

    public void writeRecord(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryOutputFormat r0;
        java.lang.Object r1;
        org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput $r2;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r3;

        r0 := @this: org.apache.flink.api.common.io.BinaryOutputFormat;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput blockBasedOutput>;

        virtualinvoke $r2.<org.apache.flink.api.common.io.BinaryOutputFormat$BlockBasedOutput: void startRecord()>();

        $r3 = r0.<org.apache.flink.api.common.io.BinaryOutputFormat: org.apache.flink.core.memory.DataOutputViewStreamWrapper outView>;

        virtualinvoke r0.<org.apache.flink.api.common.io.BinaryOutputFormat: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.io.BinaryOutputFormat: long NATIVE_BLOCK_SIZE> = -9223372036854775808L;

        <org.apache.flink.api.common.io.BinaryOutputFormat: java.lang.String BLOCK_SIZE_PARAMETER_KEY> = "output.block_size";

        <org.apache.flink.api.common.io.BinaryOutputFormat: long serialVersionUID> = 1L;

        return;
    }
}
