public final class org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot
{
    private static final int VERSION;
    private java.lang.Class tupleClass;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;
        java.lang.Class r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r2);

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass> = $r4;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream $r5;
        java.lang.Class $r6;
        java.lang.Throwable $r8, $r9, $r10, r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r5 = new org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void <init>(org.apache.flink.core.memory.DataOutputView)>(r1);

        r11 = null;

     label01:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass>;

        staticinvoke <org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>($r5, $r6);

     label02:
        if $r5 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

        goto label12;

     label04:
        $r10 := @caughtexception;

        r11 = $r10;

        throw $r10;

     label05:
        $r9 := @caughtexception;

     label06:
        if $r5 == null goto label11;

        if r11 == null goto label10;

     label07:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

        goto label11;

     label10:
        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label11:
        throw $r9;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r4;
        java.lang.ClassLoader $r5;
        java.lang.Object $r6;
        java.lang.Class $r7;
        java.lang.ClassNotFoundException $r8;
        java.io.IOException $r9;
        java.lang.Throwable $r10, $r11, $r13, r15;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

     label01:
        $r4 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r1);

        r15 = null;

     label02:
        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        $r6 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader,boolean)>($r4, $r5, 1);

        $r7 = (java.lang.Class) $r6;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass> = $r7;

     label03:
        if $r4 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

        goto label13;

     label05:
        $r10 := @caughtexception;

        r15 = $r10;

        throw $r10;

     label06:
        $r13 := @caughtexception;

     label07:
        if $r4 == null goto label12;

        if r15 == null goto label11;

     label08:
        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

        virtualinvoke r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label12;

     label11:
        virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label12:
        throw $r13;

     label13:
        goto label15;

     label14:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Could not find requested tuple class in classpath.", $r8);

        throw $r9;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.ClassNotFoundException from label01 to label13 with label14;
    }

    public int getVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        return 1;
    }

    public java.lang.Class getTupleClass()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        if $z1 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass>;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class getTupleClass()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: int hashCode()>();

        $i1 = $i0 * 31;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: java.lang.Class tupleClass>;

        $i2 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.TupleSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
