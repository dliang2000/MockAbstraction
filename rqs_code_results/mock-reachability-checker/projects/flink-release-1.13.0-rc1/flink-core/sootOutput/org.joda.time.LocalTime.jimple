public final class org.joda.time.LocalTime extends org.joda.time.base.BaseLocal implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.joda.time.LocalTime MIDNIGHT;
    private static final int HOUR_OF_DAY;
    private static final int MINUTE_OF_HOUR;
    private static final int SECOND_OF_MINUTE;
    private static final int MILLIS_OF_SECOND;
    private static final java.util.Set TIME_DURATION_TYPES;
    private final long iLocalMillis;
    private final org.joda.time.Chronology iChronology;

    public static org.joda.time.LocalTime now()
    {
        org.joda.time.LocalTime $r0;

        $r0 = new org.joda.time.LocalTime;

        specialinvoke $r0.<org.joda.time.LocalTime: void <init>()>();

        return $r0;
    }

    public static org.joda.time.LocalTime now(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        org.joda.time.LocalTime $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Zone must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalTime;

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(org.joda.time.DateTimeZone)>(r0);

        return $r1;
    }

    public static org.joda.time.LocalTime now(org.joda.time.Chronology)
    {
        org.joda.time.Chronology r0;
        org.joda.time.LocalTime $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: org.joda.time.Chronology;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Chronology must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalTime;

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(org.joda.time.Chronology)>(r0);

        return $r1;
    }

    public static org.joda.time.LocalTime parse(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter $r1;
        org.joda.time.LocalTime $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>();

        $r2 = staticinvoke <org.joda.time.LocalTime: org.joda.time.LocalTime parse(java.lang.String,org.joda.time.format.DateTimeFormatter)>(r0, $r1);

        return $r2;
    }

    public static org.joda.time.LocalTime parse(java.lang.String, org.joda.time.format.DateTimeFormatter)
    {
        java.lang.String r0;
        org.joda.time.format.DateTimeFormatter r1;
        org.joda.time.LocalTime $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.joda.time.format.DateTimeFormatter;

        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalTime parseLocalTime(java.lang.String)>(r0);

        return $r2;
    }

    public static org.joda.time.LocalTime fromMillisOfDay(long)
    {
        long l0;
        org.joda.time.LocalTime $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <org.joda.time.LocalTime: org.joda.time.LocalTime fromMillisOfDay(long,org.joda.time.Chronology)>(l0, null);

        return $r0;
    }

    public static org.joda.time.LocalTime fromMillisOfDay(long, org.joda.time.Chronology)
    {
        long l0;
        org.joda.time.Chronology $r0, r2, r3;
        org.joda.time.LocalTime $r1;

        l0 := @parameter0: long;

        r2 := @parameter1: org.joda.time.Chronology;

        $r0 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        r3 = virtualinvoke $r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r1 = new org.joda.time.LocalTime;

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, r3);

        return $r1;
    }

    public static org.joda.time.LocalTime fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar r0;
        org.joda.time.LocalTime $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalTime;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r1;
    }

    public static org.joda.time.LocalTime fromDateFields(java.util.Date)
    {
        java.util.Date r0;
        org.joda.time.LocalTime $r1;
        int $i0, $i1, $i2, $i5, $i6, $i7;
        long $l3, $l4;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.LocalTime;

        $i0 = virtualinvoke r0.<java.util.Date: int getHours()>();

        $i1 = virtualinvoke r0.<java.util.Date: int getMinutes()>();

        $i2 = virtualinvoke r0.<java.util.Date: int getSeconds()>();

        $l3 = virtualinvoke r0.<java.util.Date: long getTime()>();

        $l4 = $l3 % 1000L;

        $i5 = (int) $l4;

        $i6 = $i5 + 1000;

        $i7 = $i6 % 1000;

        specialinvoke $r1.<org.joda.time.LocalTime: void <init>(int,int,int,int)>($i0, $i1, $i2, $i7);

        return $r1;
    }

    public void <init>()
    {
        org.joda.time.LocalTime r0;
        long $l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, $r1);

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTimeZone r1;
        long $l0;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, $r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology r1;
        long $l0;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.Chronology;

        $l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.LocalTime r0;
        long l0;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        l0 := @parameter0: long;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

        return;
    }

    public void <init>(long, org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalTime r0;
        long l0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.LocalTime;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, $r2);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.LocalTime r0;
        long l0, l1, $l3;
        org.joda.time.DateTimeZone $r1, $r2;
        org.joda.time.DateTimeField $r3;
        int $i2;
        org.joda.time.Chronology r4, r5, r6;

        r0 := @this: org.joda.time.LocalTime;

        l0 := @parameter0: long;

        r4 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4);

        $r1 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long getMillisKeepLocal(org.joda.time.DateTimeZone,long)>($r2, l0);

        r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r3 = virtualinvoke r6.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l1);

        $l3 = (long) $i2;

        r0.<org.joda.time.LocalTime: long iLocalMillis> = $l3;

        r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> = r6;

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.LocalTime r0;
        java.lang.Object r1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.Chronology) null;

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalTime r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.convert.PartialConverter r3;
        int[] r4;
        org.joda.time.convert.ConverterManager $r5;
        org.joda.time.Chronology $r6, $r8, r9, r10;
        org.joda.time.format.DateTimeFormatter $r7;
        int $i0, $i1, $i2, $i3;
        long $l4;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r5 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r3 = virtualinvoke $r5.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>(r1);

        r9 = interfaceinvoke r3.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.DateTimeZone)>(r1, r2);

        r10 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r9);

        $r6 = virtualinvoke r10.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> = $r6;

        $r7 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>();

        r4 = interfaceinvoke r3.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, r1, r10, $r7);

        $r8 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $i3 = r4[0];

        $i2 = r4[1];

        $i1 = r4[2];

        $i0 = r4[3];

        $l4 = virtualinvoke $r8.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(0L, $i3, $i2, $i1, $i0);

        r0.<org.joda.time.LocalTime: long iLocalMillis> = $l4;

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.LocalTime r0;
        java.lang.Object r1;
        org.joda.time.convert.PartialConverter r2;
        int[] r3;
        org.joda.time.convert.ConverterManager $r4;
        org.joda.time.Chronology $r5, $r7, r8, r9, r10;
        org.joda.time.format.DateTimeFormatter $r6;
        int $i0, $i1, $i2, $i3;
        long $l4;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.Object;

        r8 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r4 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>();

        r2 = virtualinvoke $r4.<org.joda.time.convert.ConverterManager: org.joda.time.convert.PartialConverter getPartialConverter(java.lang.Object)>(r1);

        r9 = interfaceinvoke r2.<org.joda.time.convert.PartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, r8);

        r10 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r9);

        $r5 = virtualinvoke r10.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> = $r5;

        $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localTimeParser()>();

        r3 = interfaceinvoke r2.<org.joda.time.convert.PartialConverter: int[] getPartialValues(org.joda.time.ReadablePartial,java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r0, r1, r10, $r6);

        $r7 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $i3 = r3[0];

        $i2 = r3[1];

        $i1 = r3[2];

        $i0 = r3[3];

        $l4 = virtualinvoke $r7.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(0L, $i3, $i2, $i1, $i0);

        r0.<org.joda.time.LocalTime: long iLocalMillis> = $l4;

        return;
    }

    public void <init>(int, int)
    {
        org.joda.time.LocalTime r0;
        int i0, i1;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, 0, 0, $r1);

        return;
    }

    public void <init>(int, int, int)
    {
        org.joda.time.LocalTime r0;
        int i0, i1, i2;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, 0, $r1);

        return;
    }

    public void <init>(int, int, int, int)
    {
        org.joda.time.LocalTime r0;
        int i0, i1, i2, i3;
        org.joda.time.chrono.ISOChronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke r0.<org.joda.time.LocalTime: void <init>(int,int,int,int,org.joda.time.Chronology)>(i0, i1, i2, i3, $r1);

        return;
    }

    public void <init>(int, int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.LocalTime r0;
        int i0, i1, i2, i3;
        long l4;
        org.joda.time.Chronology $r1, r2, r3;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r2 := @parameter4: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseLocal: void <init>()>();

        $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        r3 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        l4 = virtualinvoke r3.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(0L, i0, i1, i2, i3);

        r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> = r3;

        r0.<org.joda.time.LocalTime: long iLocalMillis> = l4;

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.LocalTime r0, $r5, $r8;
        org.joda.time.Chronology $r1, $r2, $r6, $r7;
        org.joda.time.DateTimeZone $r3, $r4;
        boolean $z0;
        long $l0, $l1;
        org.joda.time.chrono.ISOChronology $r9;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        if $r1 != null goto label1;

        $r8 = new org.joda.time.LocalTime;

        $l1 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        specialinvoke $r8.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l1, $r9);

        return $r8;

     label1:
        $r3 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $r4 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $z0 = virtualinvoke $r3.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = new org.joda.time.LocalTime;

        $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        $r6 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        specialinvoke $r5.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>($l0, $r7);

        return $r5;

     label2:
        return r0;
    }

    public int size()
    {
        org.joda.time.LocalTime r0;

        r0 := @this: org.joda.time.LocalTime;

        return 4;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.LocalTime r0;
        int i0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeField $r2, $r3, $r4, $r5;
        java.lang.IndexOutOfBoundsException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.Chronology;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        return $r5;

     label2:
        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        return $r4;

     label3:
        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        return $r3;

     label4:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        return $r2;

     label5:
        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    public int getValue(int)
    {
        org.joda.time.LocalTime r0;
        int i0, $i2, $i4, $i6, $i8;
        org.joda.time.Chronology $r1, $r3, $r5, $r7;
        org.joda.time.DateTimeField $r2, $r4, $r6, $r8;
        long $l1, $l3, $l5, $l7;
        java.lang.IndexOutOfBoundsException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        $r7 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l7 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i8 = virtualinvoke $r8.<org.joda.time.DateTimeField: int get(long)>($l7);

        return $i8;

     label2:
        $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l5 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i6 = virtualinvoke $r6.<org.joda.time.DateTimeField: int get(long)>($l5);

        return $i6;

     label3:
        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l3 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i4 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l3);

        return $i4;

     label4:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l1);

        return $i2;

     label5:
        $r9 = new java.lang.IndexOutOfBoundsException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTimeFieldType r1;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r10;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1);

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public boolean isSupported(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.DurationFieldType r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>($r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $z1 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r2);

        if $z1 != 0 goto label3;

        $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        if r2 != $r4 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public boolean isSupported(org.joda.time.DurationFieldType)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DurationFieldType r1;
        org.joda.time.DurationField r2, $r6;
        org.joda.time.Chronology $r3, $r5;
        java.util.Set $r4;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3);

        $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $l0 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>();

        $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField days()>();

        $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label3;

     label2:
        $z1 = virtualinvoke r2.<org.joda.time.DurationField: boolean isSupported()>();

        return $z1;

     label3:
        return 0;
    }

    protected long getLocalMillis()
    {
        org.joda.time.LocalTime r0;
        long $l0;

        r0 := @this: org.joda.time.LocalTime;

        $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        return $l0;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.LocalTime r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        org.joda.time.Chronology $r3, $r4;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.LocalTime;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.LocalTime) r1;

        $r4 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $r3 = r2.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label4;

        $l1 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        $l0 = r2.<org.joda.time.LocalTime: long iLocalMillis>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        $z1 = specialinvoke r0.<org.joda.time.base.BaseLocal: boolean equals(java.lang.Object)>(r1);

        return $z1;
    }

    public int compareTo(org.joda.time.ReadablePartial)
    {
        org.joda.time.LocalTime r0, r2;
        org.joda.time.ReadablePartial r1;
        boolean $z0, $z1;
        int $i0;
        org.joda.time.Chronology $r3, $r4;
        long $l1, $l2, $l4, $l5;
        byte $b3, $b6, $b7;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        if r0 != r1 goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof org.joda.time.LocalTime;

        if $z0 == 0 goto label5;

        r2 = (org.joda.time.LocalTime) r1;

        $r4 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $r3 = r2.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label5;

        $l2 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        $l1 = r2.<org.joda.time.LocalTime: long iLocalMillis>;

        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label2;

        $b7 = -1;

        goto label4;

     label2:
        $l5 = r0.<org.joda.time.LocalTime: long iLocalMillis>;

        $l4 = r2.<org.joda.time.LocalTime: long iLocalMillis>;

        $b6 = $l5 cmp $l4;

        if $b6 != 0 goto label3;

        $b7 = 0;

        goto label4;

     label3:
        $b7 = 1;

     label4:
        return $b7;

     label5:
        $i0 = specialinvoke r0.<org.joda.time.base.BaseLocal: int compareTo(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    org.joda.time.LocalTime withLocalMillis(long)
    {
        org.joda.time.LocalTime r0, $r2;
        long l0, $l1;
        byte $b2;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.LocalTime;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = new org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        specialinvoke $r2.<org.joda.time.LocalTime: void <init>(long,org.joda.time.Chronology)>(l0, $r1);

     label2:
        return $r2;
    }

    public org.joda.time.LocalTime withFields(org.joda.time.ReadablePartial)
    {
        org.joda.time.LocalTime r0, $r3;
        org.joda.time.ReadablePartial r1;
        org.joda.time.Chronology $r2;
        long $l0, $l1;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        if r1 != null goto label1;

        return r0;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, $l0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l1);

        return $r3;
    }

    public org.joda.time.LocalTime withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.LocalTime r0, $r4;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        long l1, $l2;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r11;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>($l2, i0);

        $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r4;
    }

    public org.joda.time.LocalTime withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.LocalTime r0, $r4;
        org.joda.time.DurationFieldType r1;
        int i0;
        long l1, $l2;
        boolean $z0;
        org.joda.time.Chronology $r2;
        org.joda.time.DurationField $r3;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null");

        throw $r11;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r1);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        if i0 != 0 goto label3;

        return r0;

     label3:
        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r2);

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r3.<org.joda.time.DurationField: long add(long,int)>($l2, i0);

        $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r4;
    }

    public org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.LocalTime r0, $r3;
        org.joda.time.ReadablePeriod r1;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.LocalTime r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.LocalTime plusHours(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime plusMinutes(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime plusSeconds(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime plusMillis(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long add(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.LocalTime r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, -1);

        return $r2;
    }

    public org.joda.time.LocalTime minusHours(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime minusMinutes(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime minusSeconds(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime minusMillis(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        long l1, $l2;
        org.joda.time.Chronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>();

        $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        l1 = virtualinvoke $r2.<org.joda.time.DurationField: long subtract(long,int)>($l2, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1);

        return $r3;
    }

    public org.joda.time.LocalTime$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTimeFieldType r1;
        boolean $z0;
        org.joda.time.LocalTime$Property $r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeField $r4;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r11;

     label1:
        $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        $r2 = new org.joda.time.LocalTime$Property;

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3);

        specialinvoke $r2.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r4);

        return $r2;
    }

    public int getHourOfDay()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMinuteOfHour()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getSecondOfMinute()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfSecond()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfDay()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public org.joda.time.LocalTime withHourOfDay(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalTime withMinuteOfHour(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalTime withSecondOfMinute(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalTime withMillisOfSecond(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalTime withMillisOfDay(int)
    {
        org.joda.time.LocalTime r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l1, $l2;

        r0 := @this: org.joda.time.LocalTime;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>();

        $l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>($l1, i0);

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>($l2);

        return $r3;
    }

    public org.joda.time.LocalTime$Property hourOfDay()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.LocalTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = new org.joda.time.LocalTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        specialinvoke $r1.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.LocalTime$Property minuteOfHour()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.LocalTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = new org.joda.time.LocalTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        specialinvoke $r1.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.LocalTime$Property secondOfMinute()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.LocalTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = new org.joda.time.LocalTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        specialinvoke $r1.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.LocalTime$Property millisOfSecond()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.LocalTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = new org.joda.time.LocalTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        specialinvoke $r1.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.LocalTime$Property millisOfDay()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.LocalTime$Property $r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = new org.joda.time.LocalTime$Property;

        $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        specialinvoke $r1.<org.joda.time.LocalTime$Property: void <init>(org.joda.time.LocalTime,org.joda.time.DateTimeField)>(r0, $r3);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeToday()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeToday(org.joda.time.DateTimeZone)
    {
        org.joda.time.LocalTime r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology r2, $r3;
        long l0, l1;
        org.joda.time.DateTime $r4;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0);

        $r4 = new org.joda.time.DateTime;

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2);

        return $r4;
    }

    public java.lang.String toString()
    {
        org.joda.time.LocalTime r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.LocalTime;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.LocalTime r0;
        java.lang.String r1, $r3, $r4;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.joda.time.LocalTime: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.LocalTime r0;
        java.lang.String r1, $r5, $r6;
        java.util.Locale r2;
        org.joda.time.format.DateTimeFormatter $r3, $r4;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 != null goto label1;

        $r6 = virtualinvoke r0.<org.joda.time.LocalTime: java.lang.String toString()>();

        return $r6;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r5;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.joda.time.LocalTime r0;
        java.lang.Object r1;
        org.joda.time.ReadablePartial $r2;
        int $i0;

        r0 := @this: org.joda.time.LocalTime;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.joda.time.ReadablePartial) r1;

        $i0 = virtualinvoke r0.<org.joda.time.LocalTime: int compareTo(org.joda.time.ReadablePartial)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        org.joda.time.LocalTime $r0;
        java.util.HashSet $r1;
        java.util.Set $r2, $r4, $r6, $r8;
        org.joda.time.DurationFieldType $r3, $r5, $r7, $r9;

        <org.joda.time.LocalTime: int MILLIS_OF_SECOND> = 3;

        <org.joda.time.LocalTime: int SECOND_OF_MINUTE> = 2;

        <org.joda.time.LocalTime: int MINUTE_OF_HOUR> = 1;

        <org.joda.time.LocalTime: int HOUR_OF_DAY> = 0;

        <org.joda.time.LocalTime: long serialVersionUID> = -12873158713873L;

        $r0 = new org.joda.time.LocalTime;

        specialinvoke $r0.<org.joda.time.LocalTime: void <init>(int,int,int,int)>(0, 0, 0, 0);

        <org.joda.time.LocalTime: org.joda.time.LocalTime MIDNIGHT> = $r0;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES> = $r1;

        $r2 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>;

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3);

        $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>;

        $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r5);

        $r6 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>;

        $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

        $r8 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>;

        $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r9);

        return;
    }
}
