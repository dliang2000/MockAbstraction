public final class org.apache.logging.log4j.util.ProviderUtil extends java.lang.Object
{
    protected static final java.lang.String PROVIDER_RESOURCE;
    protected static final java.util.Collection PROVIDERS;
    protected static final java.util.concurrent.locks.Lock STARTUP_LOCK;
    private static final java.lang.String API_VERSION;
    private static final java.lang.String[] COMPATIBLE_API_VERSIONS;
    private static final org.apache.logging.log4j.Logger LOGGER;
    private static volatile org.apache.logging.log4j.util.ProviderUtil instance;

    private void <init>()
    {
        org.apache.logging.log4j.util.ProviderUtil r0;
        java.lang.ClassLoader r1, $r6;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.net.URL $r5;
        java.lang.Throwable $r7;
        org.apache.logging.log4j.Logger $r8;
        java.lang.ClassLoader[] r9;
        int i0, i1;
        java.util.Iterator r10;
        org.apache.logging.log4j.util.LoaderUtil$UrlResource r11;

        r0 := @this: org.apache.logging.log4j.util.ProviderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r9 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader[] getClassLoaders()>();

        i0 = lengthof r9;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r1 = r9[i1];

     label2:
        staticinvoke <org.apache.logging.log4j.util.ProviderUtil: void loadProviders(java.lang.ClassLoader)>(r1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r8.<org.apache.logging.log4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to retrieve provider from ClassLoader {}", r1, $r7);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r3 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.util.Collection findUrlResources(java.lang.String)>("META-INF/log4j-provider.properties");

        r10 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.logging.log4j.util.LoaderUtil$UrlResource) $r4;

        $r5 = virtualinvoke r11.<org.apache.logging.log4j.util.LoaderUtil$UrlResource: java.net.URL getUrl()>();

        $r6 = virtualinvoke r11.<org.apache.logging.log4j.util.LoaderUtil$UrlResource: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.logging.log4j.util.ProviderUtil: void loadProvider(java.net.URL,java.lang.ClassLoader)>($r5, $r6);

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected static void addProvider(org.apache.logging.log4j.spi.Provider)
    {
        org.apache.logging.log4j.spi.Provider r0;
        java.util.Collection $r1;
        org.apache.logging.log4j.Logger $r2;

        r0 := @parameter0: org.apache.logging.log4j.spi.Provider;

        $r1 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        $r2 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r2.<org.apache.logging.log4j.Logger: void debug(java.lang.String,java.lang.Object)>("Loaded Provider {}", r0);

        return;
    }

    protected static void loadProvider(java.net.URL, java.lang.ClassLoader)
    {
        java.net.URL r0;
        java.lang.ClassLoader r1;
        java.io.InputStream $r3;
        java.lang.String $r4;
        boolean $z0;
        org.apache.logging.log4j.spi.Provider $r5;
        java.util.Collection $r6;
        org.apache.logging.log4j.Logger $r7, $r9;
        java.io.IOException $r8;
        java.util.Properties r10;

        r0 := @parameter0: java.net.URL;

        r1 := @parameter1: java.lang.ClassLoader;

     label1:
        $r3 = virtualinvoke r0.<java.net.URL: java.io.InputStream openStream()>();

        r10 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: java.util.Properties loadClose(java.io.InputStream,java.lang.Object)>($r3, r0);

        $r4 = virtualinvoke r10.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("Log4jAPIVersion");

        $z0 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: boolean validVersion(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        $r5 = new org.apache.logging.log4j.spi.Provider;

        specialinvoke $r5.<org.apache.logging.log4j.spi.Provider: void <init>(java.util.Properties,java.net.URL,java.lang.ClassLoader)>(r10, r0, r1);

        $r6 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        $r7 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r7.<org.apache.logging.log4j.Logger: void debug(java.lang.String,java.lang.Object)>("Loaded Provider {}", $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r9.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to open {}", r0, $r8);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected static void loadProviders(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.ServiceLoader r1;
        java.util.Iterator r2;
        org.apache.logging.log4j.spi.Provider r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.util.Collection $r6, $r7;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/apache/logging/log4j/spi/Provider;", r0);

        r2 = virtualinvoke r1.<java.util.ServiceLoader: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.logging.log4j.spi.Provider) $r4;

        $r5 = virtualinvoke r3.<org.apache.logging.log4j.spi.Provider: java.lang.String getVersions()>();

        $z1 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: boolean validVersion(java.lang.String)>($r5);

        if $z1 == 0 goto label2;

        $r6 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        $z2 = interfaceinvoke $r6.<java.util.Collection: boolean contains(java.lang.Object)>(r3);

        if $z2 != 0 goto label2;

        $r7 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        return;
    }

    protected static void loadProviders(java.util.Enumeration, java.lang.ClassLoader)
    {
        java.util.Enumeration r0;
        java.lang.ClassLoader r1;
        boolean $z0;
        java.lang.Object $r2;
        java.net.URL $r3;

        r0 := @parameter0: java.util.Enumeration;

        r1 := @parameter1: java.lang.ClassLoader;

        if r0 == null goto label2;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r0.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r3 = (java.net.URL) $r2;

        staticinvoke <org.apache.logging.log4j.util.ProviderUtil: void loadProvider(java.net.URL,java.lang.ClassLoader)>($r3, r1);

        goto label1;

     label2:
        return;
    }

    public static java.lang.Iterable getProviders()
    {
        java.util.Collection $r0;

        staticinvoke <org.apache.logging.log4j.util.ProviderUtil: void lazyInit()>();

        $r0 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        return $r0;
    }

    public static boolean hasProviders()
    {
        java.util.Collection $r0;
        boolean $z0, $z1;

        staticinvoke <org.apache.logging.log4j.util.ProviderUtil: void lazyInit()>();

        $r0 = <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS>;

        $z0 = interfaceinvoke $r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    protected static void lazyInit()
    {
        org.apache.logging.log4j.util.ProviderUtil $r0, $r2, $r4;
        java.util.concurrent.locks.Lock $r1, $r3, $r9;
        java.lang.InterruptedException $r5;
        org.apache.logging.log4j.Logger $r6;
        java.lang.Thread $r7;
        java.lang.Throwable $r8;

        $r0 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.util.ProviderUtil instance>;

        if $r0 != null goto label7;

     label1:
        $r1 = <org.apache.logging.log4j.util.ProviderUtil: java.util.concurrent.locks.Lock STARTUP_LOCK>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lockInterruptibly()>();

     label2:
        $r2 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.util.ProviderUtil instance>;

        if $r2 != null goto label3;

        $r4 = new org.apache.logging.log4j.util.ProviderUtil;

        specialinvoke $r4.<org.apache.logging.log4j.util.ProviderUtil: void <init>()>();

        <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.util.ProviderUtil instance> = $r4;

     label3:
        $r3 = <org.apache.logging.log4j.util.ProviderUtil: java.util.concurrent.locks.Lock STARTUP_LOCK>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = <org.apache.logging.log4j.util.ProviderUtil: java.util.concurrent.locks.Lock STARTUP_LOCK>;

        interfaceinvoke $r9.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r8;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r6.<org.apache.logging.log4j.Logger: void fatal(java.lang.String,java.lang.Throwable)>("Interrupted before Log4j Providers could be loaded.", $r5);

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.InterruptedException from label1 to label5 with label6;
    }

    public static java.lang.ClassLoader findClassLoader()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.ClassLoader getThreadContextClassLoader()>();

        return $r0;
    }

    private static boolean validVersion(java.lang.String)
    {
        java.lang.String r0, r2;
        java.lang.String[] r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = <org.apache.logging.log4j.util.ProviderUtil: java.lang.String[] COMPATIBLE_API_VERSIONS>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.lang.String[] $r2;
        org.apache.logging.log4j.status.StatusLogger $r3;

        <org.apache.logging.log4j.util.ProviderUtil: java.lang.String API_VERSION> = "Log4jAPIVersion";

        <org.apache.logging.log4j.util.ProviderUtil: java.lang.String PROVIDER_RESOURCE> = "META-INF/log4j-provider.properties";

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <org.apache.logging.log4j.util.ProviderUtil: java.util.Collection PROVIDERS> = $r0;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        <org.apache.logging.log4j.util.ProviderUtil: java.util.concurrent.locks.Lock STARTUP_LOCK> = $r1;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "2.6.0";

        <org.apache.logging.log4j.util.ProviderUtil: java.lang.String[] COMPATIBLE_API_VERSIONS> = $r2;

        $r3 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        <org.apache.logging.log4j.util.ProviderUtil: org.apache.logging.log4j.Logger LOGGER> = $r3;

        return;
    }
}
