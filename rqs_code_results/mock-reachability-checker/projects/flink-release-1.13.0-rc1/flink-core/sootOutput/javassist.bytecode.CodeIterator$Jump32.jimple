class javassist.bytecode.CodeIterator$Jump32 extends javassist.bytecode.CodeIterator$Branch
{
    int offset;

    void <init>(int, int)
    {
        javassist.bytecode.CodeIterator$Jump32 r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.CodeIterator$Jump32;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void <init>(int)>(i0);

        r0.<javassist.bytecode.CodeIterator$Jump32: int offset> = i1;

        return;
    }

    void shift(int, int, boolean)
    {
        javassist.bytecode.CodeIterator$Jump32 r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: javassist.bytecode.CodeIterator$Jump32;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i3 = r0.<javassist.bytecode.CodeIterator$Jump32: int pos>;

        $i2 = r0.<javassist.bytecode.CodeIterator$Jump32: int offset>;

        $i4 = staticinvoke <javassist.bytecode.CodeIterator$Jump32: int shiftOffset(int,int,int,int,boolean)>($i3, $i2, i0, i1, z0);

        r0.<javassist.bytecode.CodeIterator$Jump32: int offset> = $i4;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i0, i1, z0);

        return;
    }

    int write(int, byte[], int, byte[])
    {
        javassist.bytecode.CodeIterator$Jump32 r0;
        int i0, i1, $i3, $i4;
        byte[] r1, r2;
        byte $b2;

        r0 := @this: javassist.bytecode.CodeIterator$Jump32;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        $b2 = r1[i0];

        r2[i1] = $b2;

        $i4 = r0.<javassist.bytecode.CodeIterator$Jump32: int offset>;

        $i3 = i1 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>($i4, r2, $i3);

        return 5;
    }
}
