public final class org.powermock.configuration.GlobalConfiguration extends java.lang.Object
{
    private static org.powermock.configuration.ConfigurationFactory configurationFactory;
    private static final java.lang.ThreadLocal MOCKITO_CONFIGURATION;
    private static final java.lang.ThreadLocal POWER_MOCK_CONFIGURATION;

    public static org.powermock.configuration.MockitoConfiguration mockitoConfiguration()
    {
        org.powermock.configuration.GlobalConfiguration $r0;
        org.powermock.configuration.MockitoConfiguration $r1;

        $r0 = new org.powermock.configuration.GlobalConfiguration;

        specialinvoke $r0.<org.powermock.configuration.GlobalConfiguration: void <init>()>();

        $r1 = specialinvoke $r0.<org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.MockitoConfiguration getMockitoConfiguration()>();

        return $r1;
    }

    public static org.powermock.configuration.PowerMockConfiguration powerMockConfiguration()
    {
        org.powermock.configuration.GlobalConfiguration $r0;
        org.powermock.configuration.PowerMockConfiguration $r1;

        $r0 = new org.powermock.configuration.GlobalConfiguration;

        specialinvoke $r0.<org.powermock.configuration.GlobalConfiguration: void <init>()>();

        $r1 = specialinvoke $r0.<org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.PowerMockConfiguration getPowerMockConfiguration()>();

        return $r1;
    }

    public static void clear()
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl $r0;
        java.lang.ThreadLocal $r1, $r2;

        $r0 = new org.powermock.configuration.support.ConfigurationFactoryImpl;

        specialinvoke $r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: void <init>()>();

        <org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.ConfigurationFactory configurationFactory> = $r0;

        $r1 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal MOCKITO_CONFIGURATION>;

        virtualinvoke $r1.<java.lang.ThreadLocal: void remove()>();

        $r2 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal POWER_MOCK_CONFIGURATION>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void remove()>();

        return;
    }

    public static void setConfigurationFactory(org.powermock.configuration.ConfigurationFactory)
    {
        org.powermock.configuration.ConfigurationFactory r0;

        r0 := @parameter0: org.powermock.configuration.ConfigurationFactory;

        <org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.ConfigurationFactory configurationFactory> = r0;

        return;
    }

    private void <init>()
    {
        org.powermock.configuration.GlobalConfiguration r0;
        java.lang.ThreadLocal $r1, $r3, $r5, $r7;
        java.lang.Object $r2, $r4;
        org.powermock.configuration.Configuration $r6, $r8;

        r0 := @this: org.powermock.configuration.GlobalConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal MOCKITO_CONFIGURATION>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r2 != null goto label1;

        $r7 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal MOCKITO_CONFIGURATION>;

        $r8 = specialinvoke r0.<org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.Configuration createConfig(java.lang.Class)>(class "Lorg/powermock/configuration/MockitoConfiguration;");

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

     label1:
        $r3 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal POWER_MOCK_CONFIGURATION>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r4 != null goto label2;

        $r5 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal POWER_MOCK_CONFIGURATION>;

        $r6 = specialinvoke r0.<org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.Configuration createConfig(java.lang.Class)>(class "Lorg/powermock/configuration/PowerMockConfiguration;");

        virtualinvoke $r5.<java.lang.ThreadLocal: void set(java.lang.Object)>($r6);

     label2:
        return;
    }

    private org.powermock.configuration.PowerMockConfiguration getPowerMockConfiguration()
    {
        org.powermock.configuration.GlobalConfiguration r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        org.powermock.configuration.PowerMockConfiguration $r3;

        r0 := @this: org.powermock.configuration.GlobalConfiguration;

        $r1 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal POWER_MOCK_CONFIGURATION>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (org.powermock.configuration.PowerMockConfiguration) $r2;

        return $r3;
    }

    private org.powermock.configuration.MockitoConfiguration getMockitoConfiguration()
    {
        org.powermock.configuration.GlobalConfiguration r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        org.powermock.configuration.MockitoConfiguration $r3;

        r0 := @this: org.powermock.configuration.GlobalConfiguration;

        $r1 = <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal MOCKITO_CONFIGURATION>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (org.powermock.configuration.MockitoConfiguration) $r2;

        return $r3;
    }

    private org.powermock.configuration.Configuration createConfig(java.lang.Class)
    {
        org.powermock.configuration.GlobalConfiguration r0;
        java.lang.Class r1;
        org.powermock.configuration.ConfigurationFactory $r2;
        org.powermock.configuration.Configuration $r3;

        r0 := @this: org.powermock.configuration.GlobalConfiguration;

        r1 := @parameter0: java.lang.Class;

        $r2 = <org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.ConfigurationFactory configurationFactory>;

        $r3 = interfaceinvoke $r2.<org.powermock.configuration.ConfigurationFactory: org.powermock.configuration.Configuration create(java.lang.Class)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.powermock.configuration.support.ConfigurationFactoryImpl $r0;
        java.lang.ThreadLocal $r1, $r2;

        $r0 = new org.powermock.configuration.support.ConfigurationFactoryImpl;

        specialinvoke $r0.<org.powermock.configuration.support.ConfigurationFactoryImpl: void <init>()>();

        <org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.ConfigurationFactory configurationFactory> = $r0;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal MOCKITO_CONFIGURATION> = $r1;

        $r2 = new java.lang.ThreadLocal;

        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();

        <org.powermock.configuration.GlobalConfiguration: java.lang.ThreadLocal POWER_MOCK_CONFIGURATION> = $r2;

        return;
    }
}
