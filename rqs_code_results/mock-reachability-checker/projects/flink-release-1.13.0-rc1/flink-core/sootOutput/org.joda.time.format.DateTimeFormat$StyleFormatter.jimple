class org.joda.time.format.DateTimeFormat$StyleFormatter extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private static final java.util.concurrent.ConcurrentHashMap cCache;
    private final int iDateStyle;
    private final int iTimeStyle;
    private final int iType;

    void <init>(int, int, int)
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        int i0, i1, i2;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle> = i0;

        r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle> = i1;

        r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType> = i2;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        return 40;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        org.joda.time.format.InternalPrinter r5;
        org.joda.time.format.DateTimeFormatter $r6;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>(r4);

        r5 = virtualinvoke $r6.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>();

        interfaceinvoke r5.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;
        org.joda.time.format.InternalPrinter r4;
        org.joda.time.format.DateTimeFormatter $r5;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>(r3);

        r4 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter getPrinter0()>();

        interfaceinvoke r4.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3);

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        return 40;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2;
        int i0, $i1;
        org.joda.time.format.InternalParser r3;
        java.util.Locale $r4;
        org.joda.time.format.DateTimeFormatter $r5;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>();

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)>($r4);

        r3 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser getParser0()>();

        $i1 = interfaceinvoke r3.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>(r1, r2, i0);

        return $i1;
    }

    private org.joda.time.format.DateTimeFormatter getFormatter(java.util.Locale)
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        org.joda.time.format.DateTimeFormatter r2, r12;
        org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey $r3;
        int $i0, $i1, $i2;
        java.util.concurrent.ConcurrentHashMap $r4, $r7;
        java.lang.Object $r5, $r8;
        java.lang.String $r6;
        java.util.Locale r9, $r10;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        r9 := @parameter0: java.util.Locale;

        if r9 != null goto label1;

        $r10 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        goto label2;

     label1:
        $r10 = r9;

     label2:
        $r3 = new org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey;

        $i2 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType>;

        $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>;

        $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey: void <init>(int,int,int,java.util.Locale)>($i2, $i1, $i0, $r10);

        $r4 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.concurrent.ConcurrentHashMap cCache>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r12 = (org.joda.time.format.DateTimeFormatter) $r5;

        if r12 != null goto label3;

        $r6 = virtualinvoke r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: java.lang.String getPattern(java.util.Locale)>($r10);

        r12 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>($r6);

        $r7 = <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.concurrent.ConcurrentHashMap cCache>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, r12);

        r2 = (org.joda.time.format.DateTimeFormatter) $r8;

        if r2 == null goto label3;

        r12 = r2;

     label3:
        return r12;
    }

    java.lang.String getPattern(java.util.Locale)
    {
        org.joda.time.format.DateTimeFormat$StyleFormatter r0;
        java.util.Locale r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.text.SimpleDateFormat $r2;
        java.lang.String $r3, $r8;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.text.DateFormat r9;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormat$StyleFormatter;

        r1 := @parameter0: java.util.Locale;

        r9 = null;

        $i0 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iType>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $i4 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>;

        r9 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>($i4, r1);

        goto label4;

     label2:
        $i3 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle>;

        r9 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>($i3, r1);

        goto label4;

     label3:
        $i2 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iDateStyle>;

        $i1 = r0.<org.joda.time.format.DateTimeFormat$StyleFormatter: int iTimeStyle>;

        r9 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>($i2, $i1, r1);

     label4:
        $z0 = r9 instanceof java.text.SimpleDateFormat;

        if $z0 != 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No datetime pattern for locale: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        $r2 = (java.text.SimpleDateFormat) r9;

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        return $r3;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormat$StyleFormatter: java.util.concurrent.ConcurrentHashMap cCache> = $r0;

        return;
    }
}
