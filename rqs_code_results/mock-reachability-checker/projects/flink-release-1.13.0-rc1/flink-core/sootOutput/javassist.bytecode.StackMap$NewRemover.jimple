class javassist.bytecode.StackMap$NewRemover extends javassist.bytecode.StackMap$SimpleCopy
{
    int posOfNew;

    void <init>(javassist.bytecode.StackMap, int)
    {
        javassist.bytecode.StackMap$NewRemover r0;
        javassist.bytecode.StackMap r1;
        int i0;

        r0 := @this: javassist.bytecode.StackMap$NewRemover;

        r1 := @parameter0: javassist.bytecode.StackMap;

        i0 := @parameter1: int;

        specialinvoke r0.<javassist.bytecode.StackMap$SimpleCopy: void <init>(javassist.bytecode.StackMap)>(r1);

        r0.<javassist.bytecode.StackMap$NewRemover: int posOfNew> = i0;

        return;
    }

    public int stack(int, int, int)
    {
        javassist.bytecode.StackMap$NewRemover r0;
        int i0, i1, i2, $i3;

        r0 := @this: javassist.bytecode.StackMap$NewRemover;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = specialinvoke r0.<javassist.bytecode.StackMap$NewRemover: int stackTypeInfoArray(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    private int stackTypeInfoArray(int, int, int)
    {
        javassist.bytecode.StackMap$NewRemover r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i13, i14, i16, i17;
        javassist.bytecode.StackMap$Writer $r1;
        byte[] $r2, $r3, $r4, $r5, $r6;
        byte b12, b15;

        r0 := @this: javassist.bytecode.StackMap$NewRemover;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i9 = i8;

        i10 = 0;

        i11 = 0;

     label01:
        if i11 >= i1 goto label06;

        $r5 = r0.<javassist.bytecode.StackMap$NewRemover: byte[] info>;

        b12 = $r5[i9];

        if b12 != 7 goto label02;

        i9 = i9 + 3;

        goto label05;

     label02:
        if b12 != 8 goto label04;

        $r6 = r0.<javassist.bytecode.StackMap$NewRemover: byte[] info>;

        $i6 = i9 + 1;

        i13 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r6, $i6);

        $i7 = r0.<javassist.bytecode.StackMap$NewRemover: int posOfNew>;

        if i13 != $i7 goto label03;

        i10 = i10 + 1;

     label03:
        i9 = i9 + 3;

        goto label05;

     label04:
        i9 = i9 + 1;

     label05:
        i11 = i11 + 1;

        goto label01;

     label06:
        $r1 = r0.<javassist.bytecode.StackMap$NewRemover: javassist.bytecode.StackMap$Writer writer>;

        $i2 = i1 - i10;

        virtualinvoke $r1.<javassist.bytecode.StackMap$Writer: void write16bit(int)>($i2);

        i14 = 0;

     label07:
        if i14 >= i1 goto label12;

        $r2 = r0.<javassist.bytecode.StackMap$NewRemover: byte[] info>;

        b15 = $r2[i8];

        if b15 != 7 goto label08;

        $r4 = r0.<javassist.bytecode.StackMap$NewRemover: byte[] info>;

        $i5 = i8 + 1;

        i16 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r4, $i5);

        virtualinvoke r0.<javassist.bytecode.StackMap$NewRemover: void objectVariable(int,int)>(i8, i16);

        i8 = i8 + 3;

        goto label11;

     label08:
        if b15 != 8 goto label10;

        $r3 = r0.<javassist.bytecode.StackMap$NewRemover: byte[] info>;

        $i3 = i8 + 1;

        i17 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r3, $i3);

        $i4 = r0.<javassist.bytecode.StackMap$NewRemover: int posOfNew>;

        if i17 == $i4 goto label09;

        virtualinvoke r0.<javassist.bytecode.StackMap$NewRemover: void uninitialized(int,int)>(i8, i17);

     label09:
        i8 = i8 + 3;

        goto label11;

     label10:
        virtualinvoke r0.<javassist.bytecode.StackMap$NewRemover: void typeInfo(int,byte)>(i8, b15);

        i8 = i8 + 1;

     label11:
        i14 = i14 + 1;

        goto label07;

     label12:
        return i8;
    }
}
