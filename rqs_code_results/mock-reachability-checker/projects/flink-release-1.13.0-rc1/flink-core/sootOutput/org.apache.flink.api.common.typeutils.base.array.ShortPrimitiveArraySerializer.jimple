public final class org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    private static final short[] EMPTY;
    public static final org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        return 0;
    }

    public short[] createInstance()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        $r1 = <org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] EMPTY>;

        return $r1;
    }

    public short[] copy(short[])
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] r1, r2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: short[];

        $i0 = lengthof r1;

        r2 = newarray (short)[$i0];

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i1);

        return r2;
    }

    public short[] copy(short[], short[])
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] r1, r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: short[];

        r2 := @parameter1: short[];

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] copy(short[])>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        return -1;
    }

    public void serialize(short[], org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i2;
        short $s1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: short[];

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The record must not be null.");

        throw $r3;

     label1:
        i0 = lengthof r1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $s1 = r1[i2];

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>($s1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public short[] deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i2;
        short[] r2;
        short $s1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = newarray (short)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $s1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        r2[i2] = $s1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public short[] deserialize(short[], org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: short[];

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, $i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        $i1 = i0 * 2;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, $i1);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer$ShortPrimitiveArraySerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer$ShortPrimitiveArraySerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer$ShortPrimitiveArraySerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        short[] $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (short[]) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] deserialize(short[],org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        short[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        short[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (short[]) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: void serialize(short[],org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        java.lang.Object r1, r2;
        short[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (short[]) r1;

        $r3 = (short[]) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] copy(short[],short[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        java.lang.Object r1;
        short[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (short[]) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] copy(short[])>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer r0;
        short[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        short[] $r0;
        org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer $r1;

        <org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: long serialVersionUID> = 1L;

        $r0 = newarray (short)[0];

        <org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: short[] EMPTY> = $r0;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer: org.apache.flink.api.common.typeutils.base.array.ShortPrimitiveArraySerializer INSTANCE> = $r1;

        return;
    }
}
