public class org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification extends java.lang.Object
{
    private final java.lang.String name;
    private final org.apache.flink.testutils.migration.MigrationVersion migrationVersion;
    private final org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup setup;
    private final org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier verifier;

    public void <init>(java.lang.String, org.apache.flink.testutils.migration.MigrationVersion, java.lang.Class, java.lang.Class) throws java.lang.Exception
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        java.lang.String r1, $r6;
        org.apache.flink.testutils.migration.MigrationVersion r2, $r8;
        java.lang.Class r3, r4;
        java.lang.Object $r5, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup $r9;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.testutils.migration.MigrationVersion;

        r3 := @parameter2: java.lang.Class;

        r4 := @parameter3: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String name> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (org.apache.flink.testutils.migration.MigrationVersion) $r7;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion migrationVersion> = $r8;

        $r9 = new org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup: void <init>(java.lang.Class)>(r3);

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup setup> = $r9;

        $r10 = new org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier: void <init>(java.lang.Class)>(r4);

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier verifier> = $r10;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r7;
        org.apache.flink.testutils.migration.MigrationVersion $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String name>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / ");

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion migrationVersion>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup access$000(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafePreUpgradeSetup setup>;

        return $r1;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier access$200(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$ClassLoaderSafeUpgradeVerifier verifier>;

        return $r1;
    }

    static org.apache.flink.testutils.migration.MigrationVersion access$400(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        org.apache.flink.testutils.migration.MigrationVersion $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: org.apache.flink.testutils.migration.MigrationVersion migrationVersion>;

        return $r1;
    }

    static java.lang.String access$500(org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$TestSpecification: java.lang.String name>;

        return $r1;
    }
}
