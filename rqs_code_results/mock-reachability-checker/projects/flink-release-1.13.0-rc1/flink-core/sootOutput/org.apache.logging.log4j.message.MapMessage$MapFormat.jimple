public final enum class org.apache.logging.log4j.message.MapMessage$MapFormat extends java.lang.Enum
{
    public static final enum org.apache.logging.log4j.message.MapMessage$MapFormat XML;
    public static final enum org.apache.logging.log4j.message.MapMessage$MapFormat JSON;
    public static final enum org.apache.logging.log4j.message.MapMessage$MapFormat JAVA;
    public static final enum org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED;
    private static final org.apache.logging.log4j.message.MapMessage$MapFormat[] $VALUES;

    public static org.apache.logging.log4j.message.MapMessage$MapFormat[] values()
    {
        org.apache.logging.log4j.message.MapMessage$MapFormat[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.logging.log4j.message.MapMessage$MapFormat[]) $r1;

        return $r2;
    }

    public static org.apache.logging.log4j.message.MapMessage$MapFormat valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/logging/log4j/message/MapMessage$MapFormat;", r0);

        $r2 = (org.apache.logging.log4j.message.MapMessage$MapFormat) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.apache.logging.log4j.message.MapMessage$MapFormat r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.MapMessage$MapFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static org.apache.logging.log4j.message.MapMessage$MapFormat lookupIgnoreCase(java.lang.String)
    {
        java.lang.String r0, $r2, $r4, $r6, $r8;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r1, $r3, $r5, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat XML>;

        $r2 = virtualinvoke $r1.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r9 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat XML>;

        goto label5;

     label1:
        $r3 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JSON>;

        $r4 = virtualinvoke $r3.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r9 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JSON>;

        goto label5;

     label2:
        $r5 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA>;

        $r6 = virtualinvoke $r5.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        $r9 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA>;

        goto label5;

     label3:
        $r7 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED>;

        $r8 = virtualinvoke $r7.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        $r9 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED>;

        goto label5;

     label4:
        $r9 = null;

     label5:
        return $r9;
    }

    public static java.lang.String[] names()
    {
        java.lang.String[] $r0;
        org.apache.logging.log4j.message.MapMessage$MapFormat $r1, $r3, $r5, $r7;
        java.lang.String $r2, $r4, $r6, $r8;

        $r0 = newarray (java.lang.String)[4];

        $r1 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat XML>;

        $r2 = virtualinvoke $r1.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $r0[0] = $r2;

        $r3 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JSON>;

        $r4 = virtualinvoke $r3.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $r0[1] = $r4;

        $r5 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA>;

        $r6 = virtualinvoke $r5.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $r0[2] = $r6;

        $r7 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED>;

        $r8 = virtualinvoke $r7.<org.apache.logging.log4j.message.MapMessage$MapFormat: java.lang.String name()>();

        $r0[3] = $r8;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.message.MapMessage$MapFormat $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        org.apache.logging.log4j.message.MapMessage$MapFormat[] $r4;

        $r0 = new org.apache.logging.log4j.message.MapMessage$MapFormat;

        specialinvoke $r0.<org.apache.logging.log4j.message.MapMessage$MapFormat: void <init>(java.lang.String,int)>("XML", 0);

        <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat XML> = $r0;

        $r1 = new org.apache.logging.log4j.message.MapMessage$MapFormat;

        specialinvoke $r1.<org.apache.logging.log4j.message.MapMessage$MapFormat: void <init>(java.lang.String,int)>("JSON", 1);

        <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JSON> = $r1;

        $r2 = new org.apache.logging.log4j.message.MapMessage$MapFormat;

        specialinvoke $r2.<org.apache.logging.log4j.message.MapMessage$MapFormat: void <init>(java.lang.String,int)>("JAVA", 2);

        <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA> = $r2;

        $r3 = new org.apache.logging.log4j.message.MapMessage$MapFormat;

        specialinvoke $r3.<org.apache.logging.log4j.message.MapMessage$MapFormat: void <init>(java.lang.String,int)>("JAVA_UNQUOTED", 3);

        <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED> = $r3;

        $r4 = newarray (org.apache.logging.log4j.message.MapMessage$MapFormat)[4];

        $r5 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat XML>;

        $r4[0] = $r5;

        $r6 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JSON>;

        $r4[1] = $r6;

        $r7 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA>;

        $r4[2] = $r7;

        $r8 = <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat JAVA_UNQUOTED>;

        $r4[3] = $r8;

        <org.apache.logging.log4j.message.MapMessage$MapFormat: org.apache.logging.log4j.message.MapMessage$MapFormat[] $VALUES> = $r4;

        return;
    }
}
