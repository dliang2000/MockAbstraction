public abstract class org.apache.flink.shaded.guava18.com.google.common.hash.HashCode extends java.lang.Object
{
    private static final char[] hexDigits;

    void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int bits();

    public abstract int asInt();

    public abstract long asLong();

    public abstract long padToLong();

    public abstract byte[] asBytes();

    public int writeBytesTo(byte[], int, int)
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        int[] $r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i5 := @parameter2: int;

        $r2 = newarray (int)[2];

        $r2[0] = i5;

        $i1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int bits()>();

        $i2 = $i1 / 8;

        $r2[1] = $i2;

        i6 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.primitives.Ints: int min(int[])>($r2);

        $i4 = i0 + i6;

        $i3 = lengthof r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)>(i0, $i4, $i3);

        virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: void writeBytesToImpl(byte[],int,int)>(r1, i0, i6);

        return i6;
    }

    abstract void writeBytesToImpl(byte[], int, int);

    byte[] getBytesInternal()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: byte[] asBytes()>();

        return $r1;
    }

    abstract boolean equalsSameBits(org.apache.flink.shaded.guava18.com.google.common.hash.HashCode);

    public static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromInt(int)
    {
        int i0;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$IntHashCode $r0;

        i0 := @parameter0: int;

        $r0 = new org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$IntHashCode;

        specialinvoke $r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$IntHashCode: void <init>(int)>(i0);

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromLong(long)
    {
        long l0;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$LongHashCode $r0;

        l0 := @parameter0: long;

        $r0 = new org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$LongHashCode;

        specialinvoke $r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$LongHashCode: void <init>(long)>(l0);

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromBytes(byte[])
    {
        byte[] r0, $r2;
        int $i0;
        java.lang.Object $r1;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode $r3;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 < 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "A HashCode must contain at least 1 byte.");

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (byte[]) $r1;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromBytesNoCopy(byte[])>($r2);

        return $r3;
    }

    static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromBytesNoCopy(byte[])
    {
        byte[] r0;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode $r1;

        r0 := @parameter0: byte[];

        $r1 = new org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: void <init>(byte[])>(r0);

        return $r1;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromString(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i11, $i13, i14, $i15;
        java.lang.Object[] $r2, $r3;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode $r4;
        char $c7, $c10;
        byte $b12;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 < 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "input string (%s) must have at least 2 characters", $r2);

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i4 = $i3 % 2;

        if $i4 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "input string (%s) must have an even number of characters", $r3);

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        $i6 = $i5 / 2;

        r1 = newarray (byte)[$i6];

        i14 = 0;

     label5:
        $i15 = virtualinvoke r0.<java.lang.String: int length()>();

        if i14 >= $i15 goto label6;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        $i8 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int decode(char)>($c7);

        i0 = $i8 << 4;

        $i9 = i14 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        i1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int decode(char)>($c10);

        $i13 = i14 / 2;

        $i11 = i0 + i1;

        $b12 = (byte) $i11;

        r1[$i13] = $b12;

        i14 = i14 + 2;

        goto label5;

     label6:
        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode fromBytesNoCopy(byte[])>(r1);

        return $r4;
    }

    private static int decode(char)
    {
        char c0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        int $i2, $i3, $i4;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        $i4 = c0 - 48;

        return $i4;

     label1:
        if c0 < 97 goto label2;

        if c0 > 102 goto label2;

        $i2 = c0 - 97;

        $i3 = $i2 + 10;

        return $i3;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(32);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal hexadecimal character: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.shaded.guava18.com.google.common.hash.HashCode) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int bits()>();

        $i1 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int bits()>();

        if $i0 != $i1 goto label1;

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: boolean equalsSameBits(org.apache.flink.shaded.guava18.com.google.common.hash.HashCode)>(r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public final int hashCode()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0;
        byte[] r1;
        int $i0, $i2, $i4, $i6, $i7, i8, i9;
        byte $b1, $b3;
        short $s5;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int bits()>();

        if $i0 < 32 goto label1;

        $i7 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: int asInt()>();

        return $i7;

     label1:
        r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: byte[] asBytes()>();

        $b1 = r1[0];

        i8 = $b1 & 255;

        i9 = 1;

     label2:
        $i2 = lengthof r1;

        if i9 >= $i2 goto label3;

        $b3 = r1[i9];

        $s5 = $b3 & 255;

        $i4 = i9 * 8;

        $i6 = $s5 << $i4;

        i8 = i8 | $i6;

        i9 = i9 + 1;

        goto label2;

     label3:
        return i8;
    }

    public final java.lang.String toString()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r0;
        byte[] r1;
        int i0, $i2, $i3, i9;
        byte b1, $b4, $b5, $b7;
        java.lang.StringBuilder $r4, $r7;
        java.lang.String $r5;
        char[] $r6, $r8;
        char $c6, $c8;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: byte[] asBytes()>();

        $r4 = new java.lang.StringBuilder;

        $i2 = lengthof r1;

        $i3 = 2 * $i2;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i3);

        i0 = lengthof r1;

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        b1 = r1[i9];

        $r6 = <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: char[] hexDigits>;

        $b4 = b1 >> 4;

        $b5 = $b4 & 15;

        $c6 = $r6[$b5];

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r8 = <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: char[] hexDigits>;

        $b7 = b1 & 15;

        $c8 = $r8[$b7];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.String $r0;
        char[] $r1;

        $r0 = "0123456789abcdef";

        $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>();

        <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: char[] hexDigits> = $r1;

        return;
    }
}
