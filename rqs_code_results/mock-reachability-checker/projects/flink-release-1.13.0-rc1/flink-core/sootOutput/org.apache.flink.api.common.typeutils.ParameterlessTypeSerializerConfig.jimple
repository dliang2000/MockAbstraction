public final class org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig extends org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot
{
    private static final int VERSION;
    private java.lang.String serializationFormatIdentifier;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier> = $r3;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r2 = r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier> = $r2;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton r2;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3, $r5;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton) r1;

        $r4 = r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier>;

        $z1 = staticinvoke <org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: boolean isCompatibleSerializationFormatIdentifier(java.lang.String,org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton)>($r4, r2);

        if $z1 == 0 goto label1;

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        goto label2;

     label1:
        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

     label2:
        return $r5;

     label3:
        $r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r3;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        return 1;
    }

    public java.lang.String getSerializationFormatIdentifier()
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        if $z0 == 0 goto label3;

        $r3 = r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier>;

        $r2 = (org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String getSerializationFormatIdentifier()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig;

        $r1 = r0.<org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: java.lang.String serializationFormatIdentifier>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    private static boolean isCompatibleSerializationFormatIdentifier(java.lang.String, org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton)
    {
        java.lang.String r0, r2, r3;
        org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton r1;
        java.lang.Class $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.ParameterlessTypeSerializerConfig: int VERSION> = 1;

        return;
    }
}
