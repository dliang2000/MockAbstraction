public abstract class org.apache.flink.api.common.operators.AbstractUdfOperator extends org.apache.flink.api.common.operators.Operator
{
    protected final org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction;
    protected final java.util.Map broadcastInputs;

    protected void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.OperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.AbstractUdfOperator r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.OperatorInformation r2;
        java.lang.String r3;
        java.util.HashMap $r4;

        r0 := @this: org.apache.flink.api.common.operators.AbstractUdfOperator;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.OperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, r3);

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: java.util.Map broadcastInputs> = $r4;

        r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getUserCodeWrapper()
    {
        org.apache.flink.api.common.operators.AbstractUdfOperator r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;

        r0 := @this: org.apache.flink.api.common.operators.AbstractUdfOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        return $r1;
    }

    public java.util.Map getBroadcastInputs()
    {
        org.apache.flink.api.common.operators.AbstractUdfOperator r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.common.operators.AbstractUdfOperator;

        $r1 = r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: java.util.Map broadcastInputs>;

        return $r1;
    }

    public void setBroadcastVariable(java.lang.String, org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.AbstractUdfOperator r0;
        java.lang.String r1;
        org.apache.flink.api.common.operators.Operator r2;
        java.util.Map $r3;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: org.apache.flink.api.common.operators.AbstractUdfOperator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.operators.Operator;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The broadcast input name may not be null.");

        throw $r6;

     label1:
        if r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The broadcast input root operator may not be null.");

        throw $r5;

     label2:
        $r3 = r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: java.util.Map broadcastInputs>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setBroadcastVariables(java.util.Map)
    {
        org.apache.flink.api.common.operators.AbstractUdfOperator r0;
        java.util.Map r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.AbstractUdfOperator;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: java.util.Map broadcastInputs>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.flink.api.common.operators.AbstractUdfOperator: java.util.Map broadcastInputs>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public abstract int getNumberOfInputs();

    public abstract int[] getKeyColumns(int);

    protected static java.lang.Class[] asArray(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r2;

        r0 := @parameter0: java.lang.Class;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r0;

        return $r2;
    }

    protected static java.lang.Class[] emptyClassArray()
    {
        java.lang.Class[] r0;

        r0 = newarray (java.lang.Class)[0];

        return r0;
    }
}
