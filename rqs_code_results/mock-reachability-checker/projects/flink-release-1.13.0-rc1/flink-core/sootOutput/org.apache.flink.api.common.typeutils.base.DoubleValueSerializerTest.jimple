public class org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.DoubleValueSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.DoubleValueSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        return 8;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        return class "Lorg/apache/flink/types/DoubleValue;";
    }

    protected org.apache.flink.types.DoubleValue[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;
        java.lang.Double r2;
        java.util.Random $r3;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.flink.types.DoubleValue[] $r4;
        org.apache.flink.types.DoubleValue $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>(long)>(874597969123412341L);

        $d0 = virtualinvoke $r3.<java.util.Random: double nextDouble()>();

        $d1 = $d0 * 1.7976931348623157E308;

        r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r4 = newarray (org.apache.flink.types.DoubleValue)[10];

        $r5 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r5.<org.apache.flink.types.DoubleValue: void <init>(double)>(0.0);

        $r4[0] = $r5;

        $r6 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r6.<org.apache.flink.types.DoubleValue: void <init>(double)>(1.0);

        $r4[1] = $r6;

        $r7 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r7.<org.apache.flink.types.DoubleValue: void <init>(double)>(-1.0);

        $r4[2] = $r7;

        $r8 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r8.<org.apache.flink.types.DoubleValue: void <init>(double)>(1.7976931348623157E308);

        $r4[3] = $r8;

        $r9 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r9.<org.apache.flink.types.DoubleValue: void <init>(double)>(4.9E-324);

        $r4[4] = $r9;

        $r10 = new org.apache.flink.types.DoubleValue;

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        specialinvoke $r10.<org.apache.flink.types.DoubleValue: void <init>(double)>($d2);

        $r4[5] = $r10;

        $r11 = new org.apache.flink.types.DoubleValue;

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = neg $d3;

        specialinvoke $r11.<org.apache.flink.types.DoubleValue: void <init>(double)>($d4);

        $r4[6] = $r11;

        $r12 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r12.<org.apache.flink.types.DoubleValue: void <init>(double)>(#NaN);

        $r4[7] = $r12;

        $r13 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r13.<org.apache.flink.types.DoubleValue: void <init>(double)>(#-Infinity);

        $r4[8] = $r13;

        $r14 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r14.<org.apache.flink.types.DoubleValue: void <init>(double)>(#Infinity);

        $r4[9] = $r14;

        return $r4;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest r0;
        org.apache.flink.types.DoubleValue[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.DoubleValueSerializerTest: org.apache.flink.types.DoubleValue[] getTestData()>();

        return $r1;
    }
}
