final enum class org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type extends java.lang.Enum
{
    public static final enum org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS;
    public static final enum org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION;
    public static final enum org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER;
    public static final enum org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE;
    private static final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] $VALUES;

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] values()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[]) $r1;

        return $r2;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/api/common/typeutils/TypeSerializerSchemaCompatibility$Type;", r0);

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] $r4;

        $r0 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: void <init>(java.lang.String,int)>("COMPATIBLE_AS_IS", 0);

        <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS> = $r0;

        $r1 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: void <init>(java.lang.String,int)>("COMPATIBLE_AFTER_MIGRATION", 1);

        <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION> = $r1;

        $r2 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: void <init>(java.lang.String,int)>("COMPATIBLE_WITH_RECONFIGURED_SERIALIZER", 2);

        <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER> = $r2;

        $r3 = new org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: void <init>(java.lang.String,int)>("INCOMPATIBLE", 3);

        <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE> = $r3;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type)[4];

        $r5 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AS_IS>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_AFTER_MIGRATION>;

        $r4[1] = $r6;

        $r7 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        $r4[2] = $r7;

        $r8 = <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type INCOMPATIBLE>;

        $r4[3] = $r8;

        <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility$Type[] $VALUES> = $r4;

        return;
    }
}
