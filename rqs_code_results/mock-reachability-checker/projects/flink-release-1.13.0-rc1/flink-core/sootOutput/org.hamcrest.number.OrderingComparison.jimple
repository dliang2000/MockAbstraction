public class org.hamcrest.number.OrderingComparison extends org.hamcrest.TypeSafeMatcher
{
    private static final int LESS_THAN;
    private static final int GREATER_THAN;
    private static final int EQUAL;
    private final java.lang.Comparable expected;
    private final int minCompare;
    private final int maxCompare;
    private static final java.lang.String[] comparisonDescriptions;

    private void <init>(java.lang.Comparable, int, int)
    {
        org.hamcrest.number.OrderingComparison r0;
        java.lang.Comparable r1;
        int i0, i1;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: java.lang.Comparable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.number.OrderingComparison: java.lang.Comparable expected> = r1;

        r0.<org.hamcrest.number.OrderingComparison: int minCompare> = i0;

        r0.<org.hamcrest.number.OrderingComparison: int maxCompare> = i1;

        return;
    }

    public boolean matchesSafely(java.lang.Comparable)
    {
        org.hamcrest.number.OrderingComparison r0;
        java.lang.Comparable r1, $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: java.lang.Comparable;

        $r2 = r0.<org.hamcrest.number.OrderingComparison: java.lang.Comparable expected>;

        $i1 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        i0 = staticinvoke <java.lang.Integer: int signum(int)>($i1);

        $i2 = r0.<org.hamcrest.number.OrderingComparison: int minCompare>;

        if $i2 > i0 goto label1;

        $i3 = r0.<org.hamcrest.number.OrderingComparison: int maxCompare>;

        if i0 > $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void describeMismatchSafely(java.lang.Comparable, org.hamcrest.Description)
    {
        org.hamcrest.number.OrderingComparison r0;
        java.lang.Comparable r1, $r5, $r9;
        org.hamcrest.Description r2, $r3, $r4, $r7, $r8;
        int $i0;
        java.lang.String $r6;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: java.lang.Comparable;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" was ");

        $r5 = r0.<org.hamcrest.number.OrderingComparison: java.lang.Comparable expected>;

        $i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        $r6 = staticinvoke <org.hamcrest.number.OrderingComparison: java.lang.String asText(int)>($i0);

        $r7 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r9 = r0.<org.hamcrest.number.OrderingComparison: java.lang.Comparable expected>;

        interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r9);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.number.OrderingComparison r0;
        org.hamcrest.Description r1, $r2, $r5, $r8;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r3, $r9;
        java.lang.Comparable $r6;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a value ");

        $i0 = r0.<org.hamcrest.number.OrderingComparison: int minCompare>;

        $r3 = staticinvoke <org.hamcrest.number.OrderingComparison: java.lang.String asText(int)>($i0);

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r3);

        $i2 = r0.<org.hamcrest.number.OrderingComparison: int minCompare>;

        $i1 = r0.<org.hamcrest.number.OrderingComparison: int maxCompare>;

        if $i2 == $i1 goto label1;

        $r8 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" or ");

        $i3 = r0.<org.hamcrest.number.OrderingComparison: int maxCompare>;

        $r9 = staticinvoke <org.hamcrest.number.OrderingComparison: java.lang.String asText(int)>($i3);

        interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

     label1:
        $r5 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r6 = r0.<org.hamcrest.number.OrderingComparison: java.lang.Comparable expected>;

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return;
    }

    private static java.lang.String asText(int)
    {
        int i0, $i1, $i2;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = <org.hamcrest.number.OrderingComparison: java.lang.String[] comparisonDescriptions>;

        $i1 = staticinvoke <java.lang.Integer: int signum(int)>(i0);

        $i2 = $i1 + 1;

        $r1 = $r0[$i2];

        return $r1;
    }

    public static org.hamcrest.Matcher comparesEqualTo(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.hamcrest.number.OrderingComparison $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.hamcrest.number.OrderingComparison;

        specialinvoke $r1.<org.hamcrest.number.OrderingComparison: void <init>(java.lang.Comparable,int,int)>(r0, 0, 0);

        return $r1;
    }

    public static org.hamcrest.Matcher greaterThan(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.hamcrest.number.OrderingComparison $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.hamcrest.number.OrderingComparison;

        specialinvoke $r1.<org.hamcrest.number.OrderingComparison: void <init>(java.lang.Comparable,int,int)>(r0, 1, 1);

        return $r1;
    }

    public static org.hamcrest.Matcher greaterThanOrEqualTo(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.hamcrest.number.OrderingComparison $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.hamcrest.number.OrderingComparison;

        specialinvoke $r1.<org.hamcrest.number.OrderingComparison: void <init>(java.lang.Comparable,int,int)>(r0, 0, 1);

        return $r1;
    }

    public static org.hamcrest.Matcher lessThan(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.hamcrest.number.OrderingComparison $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.hamcrest.number.OrderingComparison;

        specialinvoke $r1.<org.hamcrest.number.OrderingComparison: void <init>(java.lang.Comparable,int,int)>(r0, -1, -1);

        return $r1;
    }

    public static org.hamcrest.Matcher lessThanOrEqualTo(java.lang.Comparable)
    {
        java.lang.Comparable r0;
        org.hamcrest.number.OrderingComparison $r1;

        r0 := @parameter0: java.lang.Comparable;

        $r1 = new org.hamcrest.number.OrderingComparison;

        specialinvoke $r1.<org.hamcrest.number.OrderingComparison: void <init>(java.lang.Comparable,int,int)>(r0, -1, 0);

        return $r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.number.OrderingComparison r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Comparable $r3;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.hamcrest.number.OrderingComparison: void describeMismatchSafely(java.lang.Comparable,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.number.OrderingComparison r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.number.OrderingComparison;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.number.OrderingComparison: boolean matchesSafely(java.lang.Comparable)>($r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.hamcrest.number.OrderingComparison: int EQUAL> = 0;

        <org.hamcrest.number.OrderingComparison: int GREATER_THAN> = 1;

        <org.hamcrest.number.OrderingComparison: int LESS_THAN> = -1;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "less than";

        $r0[1] = "equal to";

        $r0[2] = "greater than";

        <org.hamcrest.number.OrderingComparison: java.lang.String[] comparisonDescriptions> = $r0;

        return;
    }
}
