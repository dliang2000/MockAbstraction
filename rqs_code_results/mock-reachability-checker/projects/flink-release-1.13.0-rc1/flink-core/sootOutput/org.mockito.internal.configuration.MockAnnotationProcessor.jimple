public class org.mockito.internal.configuration.MockAnnotationProcessor extends java.lang.Object implements org.mockito.internal.configuration.FieldAnnotationProcessor
{

    public void <init>()
    {
        org.mockito.internal.configuration.MockAnnotationProcessor r0;

        r0 := @this: org.mockito.internal.configuration.MockAnnotationProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object process(org.mockito.Mock, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.MockAnnotationProcessor r0;
        org.mockito.Mock r1;
        java.lang.reflect.Field r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.Object $r5;

        r0 := @this: org.mockito.internal.configuration.MockAnnotationProcessor;

        r1 := @parameter0: org.mockito.Mock;

        r2 := @parameter1: java.lang.reflect.Field;

        $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r5 = staticinvoke <org.mockito.internal.configuration.MockAnnotationProcessor: java.lang.Object processAnnotationForMock(org.mockito.Mock,java.lang.Class,java.lang.String)>(r1, $r3, $r4);

        return $r5;
    }

    public static java.lang.Object processAnnotationForMock(org.mockito.Mock, java.lang.Class, java.lang.String)
    {
        org.mockito.Mock r0;
        java.lang.Class r1;
        java.lang.String r2, $r5, $r6, $r7;
        org.mockito.MockSettings r3;
        java.lang.Class[] $r4, $r15;
        int $i0;
        boolean $z0, $z1, $z2;
        org.mockito.Answers $r9;
        java.lang.Object $r11;

        r0 := @parameter0: org.mockito.Mock;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r4 = interfaceinvoke r0.<org.mockito.Mock: java.lang.Class[] extraInterfaces()>();

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label1;

        $r15 = interfaceinvoke r0.<org.mockito.Mock: java.lang.Class[] extraInterfaces()>();

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings extraInterfaces(java.lang.Class[])>($r15);

     label1:
        $r5 = "";

        $r6 = interfaceinvoke r0.<org.mockito.Mock: java.lang.String name()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>(r2);

        goto label3;

     label2:
        $r7 = interfaceinvoke r0.<org.mockito.Mock: java.lang.String name()>();

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>($r7);

     label3:
        $z1 = interfaceinvoke r0.<org.mockito.Mock: boolean serializable()>();

        if $z1 == 0 goto label4;

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings serializable()>();

     label4:
        $z2 = interfaceinvoke r0.<org.mockito.Mock: boolean stubOnly()>();

        if $z2 == 0 goto label5;

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings stubOnly()>();

     label5:
        $r9 = interfaceinvoke r0.<org.mockito.Mock: org.mockito.Answers answer()>();

        interfaceinvoke r3.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r9);

        $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r1, r3);

        return $r11;
    }

    public volatile java.lang.Object process(java.lang.'annotation'.Annotation, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.MockAnnotationProcessor r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.reflect.Field r2;
        org.mockito.Mock $r3;
        java.lang.Object $r4;

        r0 := @this: org.mockito.internal.configuration.MockAnnotationProcessor;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        r2 := @parameter1: java.lang.reflect.Field;

        $r3 = (org.mockito.Mock) r1;

        $r4 = virtualinvoke r0.<org.mockito.internal.configuration.MockAnnotationProcessor: java.lang.Object process(org.mockito.Mock,java.lang.reflect.Field)>($r3, r2);

        return $r4;
    }
}
