public class org.powermock.core.IdentityHashSet extends java.util.AbstractSet
{
    protected final java.util.Map backedMap;

    public void <init>()
    {
        org.powermock.core.IdentityHashSet r0;
        org.powermock.core.ListMap $r1;

        r0 := @this: org.powermock.core.IdentityHashSet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r1 = new org.powermock.core.ListMap;

        specialinvoke $r1.<org.powermock.core.ListMap: void <init>()>();

        r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap> = $r1;

        return;
    }

    public int size()
    {
        org.powermock.core.IdentityHashSet r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.powermock.core.IdentityHashSet;

        $r1 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        org.powermock.core.IdentityHashSet r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.IdentityHashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        org.powermock.core.IdentityHashSet r0;
        java.lang.Object r1, $r4;
        java.lang.Boolean $r2;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: org.powermock.core.IdentityHashSet;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.powermock.core.IdentityHashSet r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.powermock.core.IdentityHashSet;

        $r1 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        org.powermock.core.IdentityHashSet r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.IdentityHashSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clear()
    {
        org.powermock.core.IdentityHashSet r0;
        java.util.Map $r1;

        r0 := @this: org.powermock.core.IdentityHashSet;

        $r1 = r0.<org.powermock.core.IdentityHashSet: java.util.Map backedMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }
}
