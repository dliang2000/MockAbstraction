public class org.mockito.internal.stubbing.StubberImpl extends java.lang.Object implements org.mockito.stubbing.Stubber
{
    private final org.mockito.quality.Strictness strictness;
    private final java.util.List answers;

    public void <init>(org.mockito.quality.Strictness)
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        org.mockito.quality.Strictness r1;
        java.util.LinkedList $r2;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: org.mockito.quality.Strictness;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers> = $r2;

        r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.quality.Strictness strictness> = r1;

        return;
    }

    public java.lang.Object when(java.lang.Object)
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.lang.Object r1;
        boolean $z0;
        org.mockito.internal.stubbing.InvocationContainerImpl $r2;
        org.mockito.quality.Strictness $r3;
        java.util.List $r4;
        org.mockito.exceptions.base.MockitoException $r5, $r6;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException nullPassedToWhenMethod()>();

        throw $r6;

     label1:
        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r5 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAMockPassedToWhenMethod()>();

        throw $r5;

     label2:
        $r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>(r1);

        $r4 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r3 = r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.quality.Strictness strictness>;

        virtualinvoke $r2.<org.mockito.internal.stubbing.InvocationContainerImpl: void setAnswersForStubbing(java.util.List,org.mockito.quality.Strictness)>($r4, $r3);

        return r1;
    }

    public org.mockito.stubbing.Stubber doReturn(java.lang.Object)
    {
        org.mockito.internal.stubbing.StubberImpl r0, $r3;
        java.lang.Object r1;
        java.lang.Object[] $r2;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = specialinvoke r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.internal.stubbing.StubberImpl doReturnValues(java.lang.Object[])>($r2);

        return $r3;
    }

    public transient org.mockito.stubbing.Stubber doReturn(java.lang.Object, java.lang.Object[])
    {
        org.mockito.internal.stubbing.StubberImpl r0, $r4, $r5;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r4 = specialinvoke r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.internal.stubbing.StubberImpl doReturnValues(java.lang.Object[])>($r3);

        $r5 = specialinvoke $r4.<org.mockito.internal.stubbing.StubberImpl: org.mockito.internal.stubbing.StubberImpl doReturnValues(java.lang.Object[])>(r2);

        return $r5;
    }

    private transient org.mockito.internal.stubbing.StubberImpl doReturnValues(java.lang.Object[])
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3;
        org.mockito.internal.stubbing.answers.Returns $r4, $r6;
        java.util.List $r5, $r7;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Object[];

        if r1 != null goto label1;

        $r7 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r6 = new org.mockito.internal.stubbing.answers.Returns;

        specialinvoke $r6.<org.mockito.internal.stubbing.answers.Returns: void <init>(java.lang.Object)>(null);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        return r0;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r5 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r4 = new org.mockito.internal.stubbing.answers.Returns;

        specialinvoke $r4.<org.mockito.internal.stubbing.answers.Returns: void <init>(java.lang.Object)>(r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r0;
    }

    public transient org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.lang.Throwable[] r1;
        int i0, i1;
        java.lang.Throwable r3;
        org.mockito.internal.stubbing.answers.ThrowsException $r4, $r6;
        java.util.List $r5, $r7;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Throwable[];

        if r1 != null goto label1;

        $r7 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r6 = new org.mockito.internal.stubbing.answers.ThrowsException;

        specialinvoke $r6.<org.mockito.internal.stubbing.answers.ThrowsException: void <init>(java.lang.Throwable)>(null);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        return r0;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r5 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r4 = new org.mockito.internal.stubbing.answers.ThrowsException;

        specialinvoke $r4.<org.mockito.internal.stubbing.answers.ThrowsException: void <init>(java.lang.Throwable)>(r3);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r0;
    }

    public org.mockito.stubbing.Stubber doThrow(java.lang.Class)
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.lang.Class r1;
        java.lang.Throwable r2;
        java.lang.Object $r4;
        java.lang.Throwable[] $r5;
        org.mockito.stubbing.Stubber $r6;
        org.mockito.internal.progress.MockingProgress $r7, $r10;
        org.mockito.exceptions.base.MockitoException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r7 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r7.<org.mockito.internal.progress.MockingProgress: void reset()>();

        $r8 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAnException()>();

        throw $r8;

     label1:
        $r4 = staticinvoke <org.objenesis.ObjenesisHelper: java.lang.Object newInstance(java.lang.Class)>(r1);

        r2 = (java.lang.Throwable) $r4;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r10.<org.mockito.internal.progress.MockingProgress: void reset()>();

        throw $r9;

     label4:
        $r5 = newarray (java.lang.Throwable)[1];

        $r5[0] = r2;

        $r6 = virtualinvoke r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>($r5);

        return $r6;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public transient org.mockito.stubbing.Stubber doThrow(java.lang.Class, java.lang.Class[])
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.lang.Class r1, r4;
        java.lang.Class[] r2;
        int i0, i1;
        org.mockito.internal.progress.MockingProgress $r5;
        org.mockito.exceptions.base.MockitoException $r6;
        org.mockito.stubbing.Stubber r7;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r7 = virtualinvoke r0.<org.mockito.internal.stubbing.StubberImpl: org.mockito.stubbing.Stubber doThrow(java.lang.Class)>(r1);

        if r2 != null goto label1;

        $r5 = staticinvoke <org.mockito.internal.progress.ThreadSafeMockingProgress: org.mockito.internal.progress.MockingProgress mockingProgress()>();

        interfaceinvoke $r5.<org.mockito.internal.progress.MockingProgress: void reset()>();

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException notAnException()>();

        throw $r6;

     label1:
        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        r7 = interfaceinvoke r7.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doThrow(java.lang.Class)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r7;
    }

    public org.mockito.stubbing.Stubber doNothing()
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        java.util.List $r1;
        org.mockito.internal.stubbing.answers.DoesNothing $r2;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        $r1 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r2 = staticinvoke <org.mockito.internal.stubbing.answers.DoesNothing: org.mockito.internal.stubbing.answers.DoesNothing doesNothing()>();

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public org.mockito.stubbing.Stubber doAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        org.mockito.stubbing.Answer r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        $r2 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.mockito.stubbing.Stubber doCallRealMethod()
    {
        org.mockito.internal.stubbing.StubberImpl r0;
        org.mockito.internal.stubbing.answers.CallsRealMethods $r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.stubbing.StubberImpl;

        $r2 = r0.<org.mockito.internal.stubbing.StubberImpl: java.util.List answers>;

        $r1 = new org.mockito.internal.stubbing.answers.CallsRealMethods;

        specialinvoke $r1.<org.mockito.internal.stubbing.answers.CallsRealMethods: void <init>()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return r0;
    }
}
