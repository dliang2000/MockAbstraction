public class org.apache.flink.api.common.operators.Ordering extends java.lang.Object implements java.lang.Cloneable
{
    protected org.apache.flink.api.common.operators.util.FieldList indexes;
    protected final java.util.ArrayList types;
    protected final java.util.ArrayList orders;

    public void <init>()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        org.apache.flink.api.common.operators.util.FieldList $r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders> = $r3;

        return;
    }

    public void <init>(int, java.lang.Class, org.apache.flink.api.common.operators.Order)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        int i0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.Order r2;
        org.apache.flink.api.common.operators.util.FieldList $r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.apache.flink.api.common.operators.Order;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders> = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer,java.lang.Class,org.apache.flink.api.common.operators.Order)>($r6, r1, r2);

        return;
    }

    public org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer, java.lang.Class, org.apache.flink.api.common.operators.Order)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        java.lang.Integer r1;
        java.lang.Class r2;
        org.apache.flink.api.common.operators.Order r3, $r4;
        int $i0;
        org.apache.flink.api.common.operators.util.FieldList $r5, $r6, $r7;
        boolean $z0;
        java.util.ArrayList $r8, $r9;
        java.lang.IllegalArgumentException $r10, $r12;
        java.lang.NullPointerException $r11;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: org.apache.flink.api.common.operators.Order;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i0 >= 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key index must not be negative.");

        throw $r12;

     label1:
        if r3 != null goto label2;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();

        throw $r11;

     label2:
        $r4 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order NONE>;

        if r3 != $r4 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("An ordering must not be created with a NONE order.");

        throw $r10;

     label3:
        $r5 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: boolean contains(java.lang.Integer)>(r1);

        if $z0 != 0 goto label4;

        $r6 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: org.apache.flink.api.common.operators.util.FieldList addField(java.lang.Integer)>(r1);

        r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes> = $r7;

        $r8 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r9 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label4:
        return r0;
    }

    public int getNumberOfFields()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        org.apache.flink.api.common.operators.util.FieldList $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r1 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        return $i0;
    }

    public org.apache.flink.api.common.operators.util.FieldList getInvolvedIndexes()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        org.apache.flink.api.common.operators.util.FieldList $r1;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r1 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        return $r1;
    }

    public java.lang.Integer getFieldNumber(int)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;
        org.apache.flink.api.common.operators.util.FieldList $r3, $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i1 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i0);

        return $r5;
    }

    public java.lang.Class getType(int)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        java.lang.Class $r6;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (java.lang.Class) $r5;

        return $r6;
    }

    public org.apache.flink.api.common.operators.Order getOrder(int)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.String $r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        org.apache.flink.api.common.operators.Order $r6;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (org.apache.flink.api.common.operators.Order) $r5;

        return $r6;
    }

    public java.lang.Class[] getTypes()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        java.lang.Class[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r1 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.Class)[$i0];

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.Class[]) $r4;

        return $r5;
    }

    public int[] getFieldPositions()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        int[] r1;
        org.apache.flink.api.common.operators.util.FieldList $r2, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        r1 = newarray (int)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        r1[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.flink.api.common.operators.Order[] getFieldOrders()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        java.util.ArrayList $r1, $r2;
        int $i0;
        org.apache.flink.api.common.operators.Order[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r1 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (org.apache.flink.api.common.operators.Order)[$i0];

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.flink.api.common.operators.Order[]) $r4;

        return $r5;
    }

    public boolean[] getFieldSortDirections()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        boolean[] r1;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;
        org.apache.flink.api.common.operators.Order $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        r1 = newarray (boolean)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $i2 = i3;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r5 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order DESCENDING>;

        if $r4 == $r5 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r1[$i2] = $z0;

        i3 = i3 + 1;

        goto label1;

     label4:
        return r1;
    }

    public boolean isMetBy(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.Ordering r0, r1;
        org.apache.flink.api.common.operators.util.FieldList $r2, $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r6, $r8;
        boolean $z0;
        java.util.ArrayList $r9, $r12, $r15, $r17, $r19;
        java.lang.Object $r10, $r13, $r16, $r18, $r20;
        org.apache.flink.api.common.operators.Order $r11, $r14, $r21;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        if r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        $r3 = r1.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i1 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 <= $i1 goto label2;

     label1:
        return 0;

     label2:
        i3 = 0;

     label3:
        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i2 = virtualinvoke $r4.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if i3 >= $i2 goto label7;

        $r5 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $r7 = r1.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $z0 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $r9 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r11 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order NONE>;

        if $r10 == $r11 goto label6;

        $r12 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r14 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ANY>;

        if $r13 != $r14 goto label5;

        $r19 = r1.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r20 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r21 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order NONE>;

        if $r20 != $r21 goto label6;

        return 0;

     label5:
        $r15 = r1.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r17 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r18 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        if $r16 == $r18 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return 1;
    }

    public boolean isOrderEqualOnFirstNFields(org.apache.flink.api.common.operators.Ordering, int)
    {
        org.apache.flink.api.common.operators.Ordering r0, r1;
        int i0, $i1, $i2, i3;
        org.apache.flink.api.common.operators.Order r2, $r6, $r7;
        java.lang.IndexOutOfBoundsException $r3;
        java.util.ArrayList $r4, $r8;
        java.lang.Object $r5, $r9;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        if i0 > $i1 goto label1;

        $i2 = virtualinvoke r1.<org.apache.flink.api.common.operators.Ordering: int getNumberOfFields()>();

        if i0 <= $i2 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r2 = (org.apache.flink.api.common.operators.Order) $r5;

        $r6 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order NONE>;

        if r2 == $r6 goto label4;

        $r7 = <org.apache.flink.api.common.operators.Order: org.apache.flink.api.common.operators.Order ANY>;

        if r2 == $r7 goto label4;

        $r8 = r1.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        if r2 == $r9 goto label5;

     label4:
        return 0;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return 1;
    }

    public org.apache.flink.api.common.operators.Ordering createNewOrderingUpToIndex(int)
    {
        org.apache.flink.api.common.operators.Ordering r0, $r2;
        int i0, i1;
        org.apache.flink.api.common.operators.util.FieldList $r3;
        java.lang.Integer $r4;
        java.util.ArrayList $r5, $r7;
        java.lang.Object $r6, $r9;
        java.lang.Class $r8;
        org.apache.flink.api.common.operators.Order $r10;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r2 = new org.apache.flink.api.common.operators.Ordering;

        specialinvoke $r2.<org.apache.flink.api.common.operators.Ordering: void <init>()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i1);

        $r5 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r8 = (java.lang.Class) $r6;

        $r7 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r9 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r10 = (org.apache.flink.api.common.operators.Order) $r9;

        virtualinvoke $r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering appendOrdering(java.lang.Integer,java.lang.Class,org.apache.flink.api.common.operators.Order)>($r4, $r8, $r10);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r2;
    }

    public boolean groupsFields(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.Ordering r0;
        org.apache.flink.api.common.operators.util.FieldSet r1;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.common.operators.util.FieldList $r2, $r3;
        java.lang.Integer $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if i3 >= $i2 goto label4;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i3);

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>($r4);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public org.apache.flink.api.common.operators.Ordering clone()
    {
        org.apache.flink.api.common.operators.Ordering r0, $r2;
        org.apache.flink.api.common.operators.util.FieldList $r3;
        java.util.ArrayList $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = new org.apache.flink.api.common.operators.Ordering;

        specialinvoke $r2.<org.apache.flink.api.common.operators.Ordering: void <init>()>();

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes> = $r3;

        $r5 = $r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r7 = $r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r6 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        virtualinvoke $r7.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        return $r2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        org.apache.flink.api.common.operators.util.FieldList $r1, $r2;
        int $i1, $i2, $i3, $i5, i6, $i7, i8, $i9, i10;
        java.util.ArrayList $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $i1 = 31 * 1;

        $r1 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        if $r1 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i5 = virtualinvoke $r2.<org.apache.flink.api.common.operators.util.FieldList: int hashCode()>();

     label2:
        i6 = $i1 + $i5;

        $i2 = 31 * i6;

        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        if $r3 != null goto label3;

        $i7 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $i7 = virtualinvoke $r4.<java.util.ArrayList: int hashCode()>();

     label4:
        i8 = $i2 + $i7;

        $i3 = 31 * i8;

        $r5 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        if $r5 != null goto label5;

        $i9 = 0;

        goto label6;

     label5:
        $r6 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $i9 = virtualinvoke $r6.<java.util.ArrayList: int hashCode()>();

     label6:
        i10 = $i3 + $i9;

        return i10;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.operators.Ordering r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.operators.util.FieldList $r5, $r6, $r7, $r16;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (org.apache.flink.api.common.operators.Ordering) r1;

        $r5 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        if $r5 != null goto label4;

        $r16 = r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        if $r16 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r6 = r2.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $z0 = virtualinvoke $r7.<org.apache.flink.api.common.operators.util.FieldList: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        $r8 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        if $r8 != null goto label6;

        $r15 = r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        if $r15 == null goto label7;

        return 0;

     label6:
        $r10 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r9 = r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $z1 = virtualinvoke $r10.<java.util.ArrayList: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label7;

        return 0;

     label7:
        $r11 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        if $r11 != null goto label8;

        $r14 = r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        if $r14 == null goto label9;

        return 0;

     label8:
        $r13 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r12 = r2.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $z2 = virtualinvoke $r13.<java.util.ArrayList: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.Ordering r0;
        java.lang.StringBuilder $r2;
        org.apache.flink.api.common.operators.util.FieldList $r3, $r6;
        int $i0, i1;
        java.lang.String $r5, $r15, $r21;
        java.lang.Integer $r7;
        java.util.ArrayList $r9, $r12, $r18;
        java.lang.Object $r10, $r13, $r19;
        org.apache.flink.api.common.operators.Order $r14;
        java.lang.Class $r20;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.operators.util.FieldList: int size()>();

        if i1 >= $i0 goto label4;

        if i1 == 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r6 = r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.util.FieldList indexes>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.operators.util.FieldList: java.lang.Integer get(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        if $r10 == null goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r18 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList types>;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r20 = (java.lang.Class) $r19;

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r12 = r0.<org.apache.flink.api.common.operators.Ordering: java.util.ArrayList orders>;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r14 = (org.apache.flink.api.common.operators.Order) $r13;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.operators.Order: java.lang.String getShortName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.flink.api.common.operators.Ordering r0, $r1;

        r0 := @this: org.apache.flink.api.common.operators.Ordering;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.Ordering: org.apache.flink.api.common.operators.Ordering clone()>();

        return $r1;
    }
}
