public final class org.apache.logging.log4j.util.StackLocator extends java.lang.Object
{
    static final int JDK_7u25_OFFSET;
    private static final java.lang.reflect.Method GET_CALLER_CLASS;
    private static final org.apache.logging.log4j.util.StackLocator INSTANCE;

    public static org.apache.logging.log4j.util.StackLocator getInstance()
    {
        org.apache.logging.log4j.util.StackLocator $r0;

        $r0 = <org.apache.logging.log4j.util.StackLocator: org.apache.logging.log4j.util.StackLocator INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        org.apache.logging.log4j.util.StackLocator r0;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Class getCallerClass(int)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;
        java.lang.reflect.Method $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        java.lang.Class $r6;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.String $r8;
        java.lang.Exception $r9;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label1:
        $r3 = <org.apache.logging.log4j.util.StackLocator: java.lang.reflect.Method GET_CALLER_CLASS>;

        $r2 = newarray (java.lang.Object)[1];

        $i2 = i0 + 1;

        $i1 = <org.apache.logging.log4j.util.StackLocator: int JDK_7u25_OFFSET>;

        $i3 = $i2 + $i1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r2[0] = $r4;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r6 = (java.lang.Class) $r5;

     label2:
        return $r6;

     label3:
        $r9 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.Class getCallerClass(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        java.lang.String r1, r2, $r5, $r6;
        java.lang.Class $r4;
        boolean $z0, $z1, z2;
        int i0;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z2 = 0;

        i0 = 2;

     label1:
        $r4 = virtualinvoke r0.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(int)>(i0);

        if null == $r4 goto label4;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        if z2 == 0 goto label3;

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>(r2);

        if $z1 == 0 goto label3;

        return $r4;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return null;
    }

    public java.lang.Class getCallerClass(java.lang.Class)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        java.lang.Class r1, $r3;
        boolean $z0, z1;
        int i0;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        r1 := @parameter0: java.lang.Class;

        z1 = 0;

        i0 = 2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(int)>(i0);

        if null == $r3 goto label4;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        if z1 == 0 goto label3;

        return $r3;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return class "Ljava/lang/Object;";
    }

    public java.util.Stack getCurrentStackTrace()
    {
        org.apache.logging.log4j.util.StackLocator r0;
        boolean $z0;
        java.util.Stack $r3, $r6;
        java.lang.Class $r4;
        int i0;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        $z0 = staticinvoke <org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <org.apache.logging.log4j.util.PrivateSecurityManagerStackTraceUtil: java.util.Stack getCurrentStackTrace()>();

        return $r6;

     label1:
        $r3 = new java.util.Stack;

        specialinvoke $r3.<java.util.Stack: void <init>()>();

        i0 = 1;

     label2:
        $r4 = virtualinvoke r0.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(int)>(i0);

        if null == $r4 goto label3;

        virtualinvoke $r3.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r4);

        i0 = i0 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public java.lang.StackTraceElement calcLocation(java.lang.String)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        java.lang.String r1, r3;
        java.lang.StackTraceElement[] r2;
        java.lang.Throwable $r4;
        int $i0, i1;
        java.lang.StackTraceElement $r5, $r6;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        z2 = 0;

        i1 = 0;

     label2:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label5;

        $r5 = r2[i1];

        r3 = virtualinvoke $r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        if z2 == 0 goto label4;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label4;

        $r6 = r2[i1];

        return $r6;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;
    }

    public java.lang.StackTraceElement getStackTraceElement(int)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        int i0, i1, i2, i3;
        java.lang.StackTraceElement[] r1;
        java.lang.StackTraceElement r3;
        java.lang.Throwable $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        i0 := @parameter0: int;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        r1 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i2 = 0;

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label4;

        r3 = r1[i3];

        $z0 = specialinvoke r0.<org.apache.logging.log4j.util.StackLocator: boolean isValid(java.lang.StackTraceElement)>(r3);

        if $z0 == 0 goto label3;

        if i2 != i0 goto label2;

        return r3;

     label2:
        i2 = i2 + 1;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private boolean isValid(java.lang.StackTraceElement)
    {
        org.apache.logging.log4j.util.StackLocator r0;
        java.lang.StackTraceElement r1;
        java.lang.String r2, r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @this: org.apache.logging.log4j.util.StackLocator;

        r1 := @parameter0: java.lang.StackTraceElement;

        $z0 = virtualinvoke r1.<java.lang.StackTraceElement: boolean isNativeMethod()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("sun.reflect.");

        if $z1 == 0 goto label2;

        return 0;

     label2:
        r3 = virtualinvoke r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("java.lang.reflect.");

        if $z2 == 0 goto label4;

        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("invoke");

        if $z8 != 0 goto label3;

        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("newInstance");

        if $z9 == 0 goto label4;

     label3:
        return 0;

     label4:
        $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("jdk.internal.reflect.");

        if $z3 == 0 goto label5;

        return 0;

     label5:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Class");

        if $z4 == 0 goto label6;

        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("newInstance");

        if $z7 == 0 goto label6;

        return 0;

     label6:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.invoke.MethodHandle");

        if $z5 == 0 goto label7;

        $z6 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("invoke");

        if $z6 == 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, r13;
        java.lang.Object[] $r2, $r4, $r8;
        java.lang.Integer $r3, $r5, $r9;
        org.apache.logging.log4j.util.StackLocator $r7;
        java.io.PrintStream $r10, $r12;
        java.lang.Throwable $r11;
        byte b0;
        java.lang.reflect.Method r14;
        java.lang.Object r15, r16;

        b0 = 0;

     label1:
        r13 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Class loadClass(java.lang.String)>("sun.reflect.Reflection");

        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        r14 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getCallerClass", $r0);

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[0] = $r3;

        r15 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4[0] = $r5;

        virtualinvoke r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        if r15 == null goto label2;

        if r15 == r13 goto label3;

     label2:
        r14 = null;

        b0 = -1;

        goto label4;

     label3:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8[0] = $r9;

        r16 = virtualinvoke r14.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        if r16 != r13 goto label4;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("WARNING: Java 1.7.0_25 is in use which has a broken implementation of Reflection.getCallerClass().  Please consider upgrading to Java 1.7.0_40 or later.");

        b0 = 1;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.");

        r14 = null;

        b0 = -1;

     label6:
        <org.apache.logging.log4j.util.StackLocator: java.lang.reflect.Method GET_CALLER_CLASS> = r14;

        <org.apache.logging.log4j.util.StackLocator: int JDK_7u25_OFFSET> = b0;

        $r7 = new org.apache.logging.log4j.util.StackLocator;

        specialinvoke $r7.<org.apache.logging.log4j.util.StackLocator: void <init>()>();

        <org.apache.logging.log4j.util.StackLocator: org.apache.logging.log4j.util.StackLocator INSTANCE> = $r7;

        return;

        catch java.lang.Exception from label1 to label4 with label5;
        catch java.lang.LinkageError from label1 to label4 with label5;
    }
}
