public class javassist.expr.FieldAccess extends javassist.expr.Expr
{
    int opcode;

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo, int)
    {
        javassist.expr.FieldAccess r0;
        int i0, i1;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;

        r0 := @this: javassist.expr.FieldAccess;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        i1 := @parameter4: int;

        specialinvoke r0.<javassist.expr.Expr: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>(i0, r1, r2, r3);

        r0.<javassist.expr.FieldAccess: int opcode> = i1;

        return;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.FieldAccess r0;
        javassist.CtBehavior $r1;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtBehavior where()>();

        return $r1;
    }

    public int getLineNumber()
    {
        javassist.expr.FieldAccess r0;
        int $i0;

        r0 := @this: javassist.expr.FieldAccess;

        $i0 = specialinvoke r0.<javassist.expr.Expr: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.FieldAccess r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = specialinvoke r0.<javassist.expr.Expr: java.lang.String getFileName()>();

        return $r1;
    }

    public boolean isStatic()
    {
        javassist.expr.FieldAccess r0;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.expr.FieldAccess;

        $i0 = r0.<javassist.expr.FieldAccess: int opcode>;

        $z0 = staticinvoke <javassist.expr.FieldAccess: boolean isStatic(int)>($i0);

        return $z0;
    }

    static boolean isStatic(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 178 goto label1;

        if i0 != 179 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isReader()
    {
        javassist.expr.FieldAccess r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.expr.FieldAccess;

        $i0 = r0.<javassist.expr.FieldAccess: int opcode>;

        if $i0 == 180 goto label1;

        $i1 = r0.<javassist.expr.FieldAccess: int opcode>;

        if $i1 != 178 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isWriter()
    {
        javassist.expr.FieldAccess r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.expr.FieldAccess;

        $i0 = r0.<javassist.expr.FieldAccess: int opcode>;

        if $i0 == 181 goto label1;

        $i1 = r0.<javassist.expr.FieldAccess: int opcode>;

        if $i1 != 179 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private javassist.CtClass getCtClass() throws javassist.NotFoundException
    {
        javassist.expr.FieldAccess r0;
        javassist.CtClass $r1, $r4;
        javassist.ClassPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = r0.<javassist.expr.FieldAccess: javassist.CtClass thisClass>;

        $r2 = virtualinvoke $r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r3 = virtualinvoke r0.<javassist.expr.FieldAccess: java.lang.String getClassName()>();

        $r4 = virtualinvoke $r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getClassName()
    {
        javassist.expr.FieldAccess r0;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator $r1;
        javassist.bytecode.ConstPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.FieldAccess: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r2 = virtualinvoke r0.<javassist.expr.FieldAccess: javassist.bytecode.ConstPool getConstPool()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefClassName(int)>(i0);

        return $r3;
    }

    public java.lang.String getFieldName()
    {
        javassist.expr.FieldAccess r0;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator $r1;
        javassist.bytecode.ConstPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.FieldAccess: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r2 = virtualinvoke r0.<javassist.expr.FieldAccess: javassist.bytecode.ConstPool getConstPool()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefName(int)>(i0);

        return $r3;
    }

    public javassist.CtField getField() throws javassist.NotFoundException
    {
        javassist.expr.FieldAccess r0;
        javassist.CtClass r1;
        int i0, $i1, $i2;
        javassist.bytecode.ConstPool r2;
        javassist.bytecode.CodeIterator $r3;
        java.lang.String $r4, $r5;
        javassist.CtField $r6;

        r0 := @this: javassist.expr.FieldAccess;

        r1 = specialinvoke r0.<javassist.expr.FieldAccess: javassist.CtClass getCtClass()>();

        $r3 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.FieldAccess: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        r2 = virtualinvoke r0.<javassist.expr.FieldAccess: javassist.bytecode.ConstPool getConstPool()>();

        $r4 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefName(int)>(i0);

        $r5 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>(i0);

        $r6 = virtualinvoke r1.<javassist.CtClass: javassist.CtField getField(java.lang.String,java.lang.String)>($r4, $r5);

        return $r6;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.FieldAccess r0;
        javassist.CtClass[] $r1;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtClass[] mayThrow()>();

        return $r1;
    }

    public java.lang.String getSignature()
    {
        javassist.expr.FieldAccess r0;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator $r1;
        javassist.bytecode.ConstPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.FieldAccess;

        $r1 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.FieldAccess: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r2 = virtualinvoke r0.<javassist.expr.FieldAccess: javassist.bytecode.ConstPool getConstPool()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>(i0);

        return $r3;
    }

    public void replace(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.FieldAccess r0;
        java.lang.String r1, $r13, $r16;
        javassist.bytecode.ConstPool r2;
        int i0, i1, i2, i3, $i4, $i6, $i9;
        javassist.bytecode.CodeAttribute r4;
        javassist.CtClass r5, $r7, $r11, $r14, $r18, $r19, r28;
        boolean z0, $z1, $z2, z4;
        javassist.bytecode.Bytecode r6;
        javassist.bytecode.CodeIterator $r9, $r12;
        javassist.compiler.Javac $r10;
        javassist.ClassPool $r15;
        javassist.expr.FieldAccess$ProceedForWrite $r17;
        javassist.expr.FieldAccess$ProceedForRead $r20;
        javassist.NotFoundException $r21;
        javassist.CannotCompileException $r22, $r24, $r26;
        javassist.bytecode.BadBytecode $r23;
        javassist.compiler.CompileError $r25;
        javassist.CtClass[] r27;

        r0 := @this: javassist.expr.FieldAccess;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<javassist.expr.FieldAccess: javassist.CtClass thisClass>;

        virtualinvoke $r7.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile()>();

        r2 = virtualinvoke r0.<javassist.expr.FieldAccess: javassist.bytecode.ConstPool getConstPool()>();

        i0 = r0.<javassist.expr.FieldAccess: int currentPos>;

        $r9 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        $i4 = i0 + 1;

        i1 = virtualinvoke $r9.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i4);

        $r10 = new javassist.compiler.Javac;

        $r11 = r0.<javassist.expr.FieldAccess: javassist.CtClass thisClass>;

        specialinvoke $r10.<javassist.compiler.Javac: void <init>(javassist.CtClass)>($r11);

        $r12 = r0.<javassist.expr.FieldAccess: javassist.bytecode.CodeIterator iterator>;

        r4 = virtualinvoke $r12.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

     label01:
        $r13 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>(i1);

        $r14 = r0.<javassist.expr.FieldAccess: javassist.CtClass thisClass>;

        $r15 = virtualinvoke $r14.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        r5 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass toCtClass(java.lang.String,javassist.ClassPool)>($r13, $r15);

        z0 = virtualinvoke r0.<javassist.expr.FieldAccess: boolean isReader()>();

        if z0 == 0 goto label02;

        r27 = newarray (javassist.CtClass)[0];

        r28 = r5;

        goto label03;

     label02:
        r27 = newarray (javassist.CtClass)[1];

        r27[0] = r5;

        r28 = <javassist.CtClass: javassist.CtClass voidType>;

     label03:
        i2 = virtualinvoke r4.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $r16 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefClassName(int)>(i1);

        $z1 = virtualinvoke r0.<javassist.expr.FieldAccess: boolean withinStatic()>();

        virtualinvoke $r10.<javassist.compiler.Javac: int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean)>($r16, r27, 1, i2, $z1);

        z4 = staticinvoke <javassist.expr.FieldAccess: boolean checkResultValue(javassist.CtClass,java.lang.String)>(r28, r1);

        if z0 == 0 goto label04;

        z4 = 1;

     label04:
        i3 = virtualinvoke $r10.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r28, z4);

        if z0 == 0 goto label05;

        $r20 = new javassist.expr.FieldAccess$ProceedForRead;

        $i9 = r0.<javassist.expr.FieldAccess: int opcode>;

        specialinvoke $r20.<javassist.expr.FieldAccess$ProceedForRead: void <init>(javassist.CtClass,int,int,int)>(r28, $i9, i1, i2);

        virtualinvoke $r10.<javassist.compiler.Javac: void recordProceed(javassist.compiler.ProceedHandler)>($r20);

        goto label06;

     label05:
        virtualinvoke $r10.<javassist.compiler.Javac: void recordType(javassist.CtClass)>(r5);

        $r17 = new javassist.expr.FieldAccess$ProceedForWrite;

        $r18 = r27[0];

        $i6 = r0.<javassist.expr.FieldAccess: int opcode>;

        specialinvoke $r17.<javassist.expr.FieldAccess$ProceedForWrite: void <init>(javassist.CtClass,int,int,int)>($r18, $i6, i1, i2);

        virtualinvoke $r10.<javassist.compiler.Javac: void recordProceed(javassist.compiler.ProceedHandler)>($r17);

     label06:
        r6 = virtualinvoke $r10.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        $z2 = virtualinvoke r0.<javassist.expr.FieldAccess: boolean isStatic()>();

        staticinvoke <javassist.expr.FieldAccess: void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode)>(r27, $z2, i2, r6);

        virtualinvoke $r10.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r4, i0);

        if z4 == 0 goto label08;

        $r19 = <javassist.CtClass: javassist.CtClass voidType>;

        if r28 != $r19 goto label07;

        virtualinvoke r6.<javassist.bytecode.Bytecode: void addOpcode(int)>(1);

        virtualinvoke r6.<javassist.bytecode.Bytecode: void addAstore(int)>(i3);

        goto label08;

     label07:
        virtualinvoke r6.<javassist.bytecode.Bytecode: void addConstZero(javassist.CtClass)>(r28);

        virtualinvoke r6.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i3, r28);

     label08:
        virtualinvoke $r10.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        if z0 == 0 goto label09;

        virtualinvoke r6.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(i3, r28);

     label09:
        virtualinvoke r0.<javassist.expr.FieldAccess: void replace0(int,javassist.bytecode.Bytecode,int)>(i0, r6, 3);

     label10:
        goto label14;

     label11:
        $r25 := @caughtexception;

        $r26 = new javassist.CannotCompileException;

        specialinvoke $r26.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r25);

        throw $r26;

     label12:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r21);

        throw $r22;

     label13:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(java.lang.String)>("broken method");

        throw $r24;

     label14:
        return;

        catch javassist.compiler.CompileError from label01 to label10 with label11;
        catch javassist.NotFoundException from label01 to label10 with label12;
        catch javassist.bytecode.BadBytecode from label01 to label10 with label13;
    }
}
