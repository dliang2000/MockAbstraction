public final class org.apache.flink.shaded.guava18.com.google.common.io.Files extends java.lang.Object
{
    private static final int TEMP_DIR_ATTEMPTS;
    private static final org.apache.flink.shaded.guava18.com.google.common.collect.TreeTraverser FILE_TREE_TRAVERSER;

    private void <init>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.Files r0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.io.Files;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.BufferedReader newReader(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        java.io.BufferedReader $r4;
        java.io.InputStreamReader $r5;
        java.io.FileInputStream $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new java.io.BufferedReader;

        $r5 = new java.io.InputStreamReader;

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r6, r1);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);

        return $r4;
    }

    public static java.io.BufferedWriter newWriter(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        java.io.BufferedWriter $r4;
        java.io.OutputStreamWriter $r5;
        java.io.FileOutputStream $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new java.io.BufferedWriter;

        $r5 = new java.io.OutputStreamWriter;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>($r6, r1);

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);

        return $r4;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)
    {
        java.io.File r0;
        org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSource $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSource;

        specialinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSource: void <init>(java.io.File,org.apache.flink.shaded.guava18.com.google.common.io.Files$1)>(r0, null);

        return $r1;
    }

    static byte[] readFile(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0;
        byte $b2, $b3;
        int $i4;
        java.lang.OutOfMemoryError $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        byte[] $r7;

        r0 := @parameter0: java.io.InputStream;

        l0 := @parameter1: long;

        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label1;

        $r1 = new java.lang.OutOfMemoryError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(68);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file is too large to fit in a byte array: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label2;

        $r7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>(r0);

        goto label3;

     label2:
        $i4 = (int) l0;

        $r7 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream,int)>(r0, $i4);

     label3:
        return $r7;
    }

    public static transient org.apache.flink.shaded.guava18.com.google.common.io.ByteSink asByteSink(java.io.File, org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])
    {
        java.io.File r0;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] r1;
        org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSink $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[];

        $r2 = new org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSink;

        specialinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.Files$FileByteSink: void <init>(java.io.File,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[],org.apache.flink.shaded.guava18.com.google.common.io.Files$1)>(r0, r1, null);

        return $r2;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.io.File, java.nio.charset.Charset)
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.nio.charset.Charset)>(r1);

        return $r3;
    }

    public static transient org.apache.flink.shaded.guava18.com.google.common.io.CharSink asCharSink(java.io.File, java.nio.charset.Charset, org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] r2;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSink $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSink $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[];

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSink asByteSink(java.io.File,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])>(r0, r2);

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSink: org.apache.flink.shaded.guava18.com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>(r1);

        return $r4;
    }

    private static org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] modes(boolean)
    {
        boolean z0;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode $r0;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] $r1;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = newarray (org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode)[1];

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode: org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode APPEND>;

        $r1[0] = $r0;

        goto label2;

     label1:
        $r1 = newarray (org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode)[0];

     label2:
        return $r1;
    }

    public static byte[] toByteArray(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r1;
        byte[] $r2;

        r0 := @parameter0: java.io.File;

        $r1 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: byte[] read()>();

        return $r2;
    }

    public static java.lang.String toString(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.CharSource: java.lang.String read()>();

        return $r3;
    }

    public static void write(byte[], java.io.File) throws java.io.IOException
    {
        byte[] r0;
        java.io.File r1;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSink $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.File;

        $r2 = newarray (org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode)[0];

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSink asByteSink(java.io.File,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])>(r1, $r2);

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSink: void write(byte[])>(r0);

        return;
    }

    public static void copy(java.io.File, java.io.OutputStream) throws java.io.IOException
    {
        java.io.File r0;
        java.io.OutputStream r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r2;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: long copyTo(java.io.OutputStream)>(r1);

        return;
    }

    public static void copy(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        java.lang.Object[] $r2;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] $r4;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSink $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r0;

        $r2[1] = r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Source %s and destination %s must be different", $r2);

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r4 = newarray (org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode)[0];

        $r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSink asByteSink(java.io.File,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])>(r1, $r4);

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: long copyTo(org.apache.flink.shaded.guava18.com.google.common.io.ByteSink)>($r5);

        return;
    }

    public static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.io.File r1;
        java.nio.charset.Charset r2;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSink $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        $r3 = newarray (org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode)[0];

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])>(r1, r2, $r3);

        virtualinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.CharSink: void write(java.lang.CharSequence)>(r0);

        return;
    }

    public static void append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.io.File r1;
        java.nio.charset.Charset r2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: void write(java.lang.CharSequence,java.io.File,java.nio.charset.Charset,boolean)>(r0, r1, r2, 1);

        return;
    }

    private static void write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset, boolean) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.io.File r1;
        java.nio.charset.Charset r2;
        boolean z0;
        org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] $r3;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSink $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.nio.charset.Charset;

        z0 := @parameter3: boolean;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[] modes(boolean)>(z0);

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSink asCharSink(java.io.File,java.nio.charset.Charset,org.apache.flink.shaded.guava18.com.google.common.io.FileWriteMode[])>(r1, r2, $r3);

        virtualinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.CharSink: void write(java.lang.CharSequence)>(r0);

        return;
    }

    public static void copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        java.lang.Appendable r2;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: java.lang.Appendable;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>(r0, r1);

        virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.CharSource: long copyTo(java.lang.Appendable)>(r2);

        return;
    }

    public static boolean equal(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        long l0, l1;
        boolean $z0, $z1;
        byte $b2, $b3, $b4;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r4, $r5;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if r0 == r1 goto label1;

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        l0 = virtualinvoke r0.<java.io.File: long length()>();

        l1 = virtualinvoke r1.<java.io.File: long length()>();

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label3;

        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label3;

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label3;

        return 0;

     label3:
        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r1);

        $z1 = virtualinvoke $r4.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: boolean contentEquals(org.apache.flink.shaded.guava18.com.google.common.io.ByteSource)>($r5);

        return $z1;
    }

    public static java.io.File createTempDir()
    {
        java.lang.String r1, $r3, $r8, $r9, $r10, $r18, $r20, $r24, r25, r27, r28, r29;
        long l0;
        java.io.File $r2, $r19;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r21, $r22, $r23;
        java.lang.IllegalStateException $r7;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0;

        $r2 = new java.io.File;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(21);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i9 = 0;

     label1:
        if i9 >= 10000 goto label3;

        $r19 = new java.io.File;

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20);

        $r21 = new java.lang.StringBuilder;

        $i7 = virtualinvoke r25.<java.lang.String: int length()>();

        $i8 = 11 + $i7;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(int)>($i8);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r24);

        $z0 = virtualinvoke $r19.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label2;

        return $r19;

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        $r7 = new java.lang.IllegalStateException;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("Failed to create directory within 10000 attempts (tried ");

        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        $r11 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r27.<java.lang.String: int length()>();

        $i2 = 17 + $i1;

        $i3 = virtualinvoke r28.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        $i5 = virtualinvoke r29.<java.lang.String: int length()>();

        $i6 = $i4 + $i5;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0 to ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(9999);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18);

        throw $r7;
    }

    public static void touch(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, $r4, $r8;
        boolean $z0, $z1;
        long $l0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r5, $r6, $r7;
        int $i1, $i2;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = virtualinvoke r0.<java.io.File: boolean createNewFile()>();

        if $z0 != 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z1 = virtualinvoke r0.<java.io.File: boolean setLastModified(long)>($l0);

        if $z1 != 0 goto label1;

        $r3 = new java.io.IOException;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        $r5 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = 38 + $i1;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update modification time of ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;
    }

    public static void createParentDirs(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, $r4;
        java.lang.String r2, $r6, $r10;
        boolean $z1;
        java.io.IOException $r5;
        java.lang.StringBuilder $r7, $r8, $r9;
        int $i0, $i1;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r4 = virtualinvoke r0.<java.io.File: java.io.File getCanonicalFile()>();

        r1 = virtualinvoke $r4.<java.io.File: java.io.File getParentFile()>();

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<java.io.File: boolean mkdirs()>();

        $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label2;

        $r5 = new java.io.IOException;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        $i1 = 39 + $i0;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to create parent directories of ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        return;
    }

    public static void move(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object[] $r4;
        java.io.IOException $r5, $r11;
        java.lang.String $r6, $r10, $r12, $r16, r17, r18;
        java.lang.StringBuilder $r7, $r8, $r9, $r13, $r14, $r15;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r0;

        $r4[1] = r1;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "Source %s and destination %s must be different", $r4);

        $z1 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z1 != 0 goto label4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: void copy(java.io.File,java.io.File)>(r0, r1);

        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z3 != 0 goto label3;

        $r11 = new java.io.IOException;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        $r13 = new java.lang.StringBuilder;

        $i2 = virtualinvoke r17.<java.lang.String: int length()>();

        $i3 = 17 + $i2;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label3:
        $r5 = new java.io.IOException;

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);

        $r7 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r18.<java.lang.String: int length()>();

        $i1 = 17 + $i0;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        return;
    }

    public static java.lang.String readFirstLine(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.CharSource: java.lang.String readFirstLine()>();

        return $r3;
    }

    public static java.util.List readLines(java.io.File, java.nio.charset.Charset) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.Files$1 $r2;
        java.lang.Object $r3;
        java.util.List $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = new org.apache.flink.shaded.guava18.com.google.common.io.Files$1;

        specialinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.Files$1: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.lang.Object readLines(java.io.File,java.nio.charset.Charset,org.apache.flink.shaded.guava18.com.google.common.io.LineProcessor)>(r0, r1, $r2);

        $r4 = (java.util.List) $r3;

        return $r4;
    }

    public static java.lang.Object readLines(java.io.File, java.nio.charset.Charset, org.apache.flink.shaded.guava18.com.google.common.io.LineProcessor) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.charset.Charset r1;
        org.apache.flink.shaded.guava18.com.google.common.io.LineProcessor r2;
        org.apache.flink.shaded.guava18.com.google.common.io.CharSource $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.charset.Charset;

        r2 := @parameter2: org.apache.flink.shaded.guava18.com.google.common.io.LineProcessor;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.CharSource asCharSource(java.io.File,java.nio.charset.Charset)>(r0, r1);

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.guava18.com.google.common.io.CharSource: java.lang.Object readLines(org.apache.flink.shaded.guava18.com.google.common.io.LineProcessor)>(r2);

        return $r4;
    }

    public static java.lang.Object readBytes(java.io.File, org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: java.lang.Object read(org.apache.flink.shaded.guava18.com.google.common.io.ByteProcessor)>(r1);

        return $r3;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.hash.HashCode hash(java.io.File, org.apache.flink.shaded.guava18.com.google.common.hash.HashFunction) throws java.io.IOException
    {
        java.io.File r0;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashFunction r1;
        org.apache.flink.shaded.guava18.com.google.common.io.ByteSource $r2;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode $r3;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.hash.HashFunction;

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.io.ByteSource asByteSource(java.io.File)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.guava18.com.google.common.io.ByteSource: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode hash(org.apache.flink.shaded.guava18.com.google.common.hash.HashFunction)>(r1);

        return $r3;
    }

    public static java.nio.MappedByteBuffer map(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.channels.FileChannel$MapMode $r2;
        java.nio.MappedByteBuffer $r3;

        r0 := @parameter0: java.io.File;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r2 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode)>(r0, $r2);

        return $r3;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode) throws java.io.IOException
    {
        java.io.File r0;
        java.nio.channels.FileChannel$MapMode r1;
        boolean $z0;
        long $l0;
        java.nio.MappedByteBuffer $r4;
        java.io.FileNotFoundException $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $r5 = new java.io.FileNotFoundException;

        $r6 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $l0 = virtualinvoke r0.<java.io.File: long length()>();

        $r4 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.File,java.nio.channels.FileChannel$MapMode,long)>(r0, r1, $l0);

        return $r4;
    }

    public static java.nio.MappedByteBuffer map(java.io.File, java.nio.channels.FileChannel$MapMode, long) throws java.io.FileNotFoundException, java.io.IOException
    {
        java.io.File r0;
        java.nio.channels.FileChannel$MapMode r1, $r8;
        long l0;
        org.apache.flink.shaded.guava18.com.google.common.io.Closer r2;
        java.nio.MappedByteBuffer r3;
        java.io.RandomAccessFile $r7, r16;
        java.io.Closeable $r9;
        java.lang.Throwable $r12, $r13;
        java.lang.RuntimeException $r14;
        java.lang.String $r15;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter2: long;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Closer: org.apache.flink.shaded.guava18.com.google.common.io.Closer create()>();

     label1:
        $r7 = new java.io.RandomAccessFile;

        $r8 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        if r1 != $r8 goto label2;

        $r15 = "r";

        goto label3;

     label2:
        $r15 = "rw";

     label3:
        specialinvoke $r7.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r0, $r15);

        $r9 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r7);

        r16 = (java.io.RandomAccessFile) $r9;

        r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Files: java.nio.MappedByteBuffer map(java.io.RandomAccessFile,java.nio.channels.FileChannel$MapMode,long)>(r16, r1, l0);

     label4:
        virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: void close()>();

        return r3;

     label5:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r13);

        throw $r14;

     label6:
        $r12 := @caughtexception;

     label7:
        virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: void close()>();

        throw $r12;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private static java.nio.MappedByteBuffer map(java.io.RandomAccessFile, java.nio.channels.FileChannel$MapMode, long) throws java.io.IOException
    {
        java.io.RandomAccessFile r0;
        java.nio.channels.FileChannel$MapMode r1;
        long l0;
        org.apache.flink.shaded.guava18.com.google.common.io.Closer r2;
        java.nio.MappedByteBuffer r3;
        java.nio.channels.FileChannel $r5, r10;
        java.io.Closeable $r6;
        java.lang.Throwable $r7, $r8;
        java.lang.RuntimeException $r9;

        r0 := @parameter0: java.io.RandomAccessFile;

        r1 := @parameter1: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter2: long;

        r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.io.Closer: org.apache.flink.shaded.guava18.com.google.common.io.Closer create()>();

     label1:
        $r5 = virtualinvoke r0.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        $r6 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: java.io.Closeable register(java.io.Closeable)>($r5);

        r10 = (java.nio.channels.FileChannel) $r6;

        r3 = virtualinvoke r10.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>(r1, 0L, l0);

     label2:
        virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: void close()>();

        return r3;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: java.lang.RuntimeException rethrow(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke r2.<org.apache.flink.shaded.guava18.com.google.common.io.Closer: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static java.lang.String simplifyPath(java.lang.String)
    {
        java.lang.String r0, r3, $r9, $r10, $r11, $r14, r17, $r18;
        java.lang.Iterable r1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter $r5, $r6;
        java.util.ArrayList $r7;
        org.apache.flink.shaded.guava18.com.google.common.base.Joiner $r8;
        char $c1;
        boolean $z0, $z1, $z2, $z3, $z6, $z7, $z8;
        java.lang.Object $r12, $r13;
        java.util.Iterator r16;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        return ".";

     label01:
        $r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter on(char)>(47);

        $r6 = virtualinvoke $r5.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter omitEmptyStrings()>();

        r1 = virtualinvoke $r6.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r0);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r16 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z7 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label07;

        $r12 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r12;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(".");

        if $z2 == 0 goto label03;

        goto label02;

     label03:
        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z3 == 0 goto label05;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i3 <= 0 goto label04;

        $i4 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r13 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i5);

        $r14 = (java.lang.String) $r13;

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("..");

        if $z6 != 0 goto label04;

        $i6 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>($i7);

        goto label06;

     label04:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("..");

        goto label06;

     label05:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label06:
        goto label02;

     label07:
        $r8 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Joiner: org.apache.flink.shaded.guava18.com.google.common.base.Joiner on(char)>(47);

        r17 = virtualinvoke $r8.<org.apache.flink.shaded.guava18.com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>($r7);

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c1 != 47 goto label10;

        $r10 = "/";

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r17);

        $i2 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i2 == 0 goto label08;

        $r18 = virtualinvoke $r10.<java.lang.String: java.lang.String concat(java.lang.String)>($r11);

        goto label09;

     label08:
        $r18 = new java.lang.String;

        specialinvoke $r18.<java.lang.String: void <init>(java.lang.String)>("/");

     label09:
        r17 = $r18;

     label10:
        $z8 = virtualinvoke r17.<java.lang.String: boolean startsWith(java.lang.String)>("/../");

        if $z8 == 0 goto label11;

        r17 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int)>(3);

        goto label10;

     label11:
        $z0 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("/..");

        if $z0 == 0 goto label12;

        r17 = "/";

        goto label13;

     label12:
        $r9 = "";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z1 == 0 goto label13;

        r17 = ".";

     label13:
        return r17;
    }

    public static java.lang.String getFileExtension(java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        int i0, $i1;
        java.io.File $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r0);

        r1 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 != -1 goto label1;

        $r4 = "";

        goto label2;

     label1:
        $i1 = i0 + 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r4;
    }

    public static java.lang.String getNameWithoutExtension(java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        int i0;
        java.io.File $r3;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r0);

        r1 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 != -1 goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        return $r4;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.collect.TreeTraverser fileTreeTraverser()
    {
        org.apache.flink.shaded.guava18.com.google.common.collect.TreeTraverser $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.collect.TreeTraverser FILE_TREE_TRAVERSER>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.base.Predicate isDirectory()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate: org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate IS_DIRECTORY>;

        return $r0;
    }

    public static org.apache.flink.shaded.guava18.com.google.common.base.Predicate isFile()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate $r0;

        $r0 = <org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate: org.apache.flink.shaded.guava18.com.google.common.io.Files$FilePredicate IS_FILE>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.flink.shaded.guava18.com.google.common.io.Files$2 $r0;

        <org.apache.flink.shaded.guava18.com.google.common.io.Files: int TEMP_DIR_ATTEMPTS> = 10000;

        $r0 = new org.apache.flink.shaded.guava18.com.google.common.io.Files$2;

        specialinvoke $r0.<org.apache.flink.shaded.guava18.com.google.common.io.Files$2: void <init>()>();

        <org.apache.flink.shaded.guava18.com.google.common.io.Files: org.apache.flink.shaded.guava18.com.google.common.collect.TreeTraverser FILE_TREE_TRAVERSER> = $r0;

        return;
    }
}
