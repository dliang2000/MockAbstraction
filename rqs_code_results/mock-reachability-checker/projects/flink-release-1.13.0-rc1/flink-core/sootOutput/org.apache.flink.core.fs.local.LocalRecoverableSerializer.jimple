class org.apache.flink.core.fs.local.LocalRecoverableSerializer extends java.lang.Object implements org.apache.flink.core.io.SimpleVersionedSerializer
{
    static final org.apache.flink.core.fs.local.LocalRecoverableSerializer INSTANCE;
    private static final java.nio.charset.Charset CHARSET;
    private static final int MAGIC_NUMBER;

    private void <init>()
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        return 1;
    }

    public byte[] serialize(org.apache.flink.core.fs.local.LocalRecoverable) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;
        org.apache.flink.core.fs.local.LocalRecoverable r1;
        byte[] r2, r3, r4;
        java.nio.ByteBuffer r5, $r12;
        java.io.File $r6, $r9;
        java.lang.String $r7, $r10;
        java.nio.charset.Charset $r8, $r11;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.nio.ByteOrder $r13;
        long $l4;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        r1 := @parameter0: org.apache.flink.core.fs.local.LocalRecoverable;

        $r6 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File targetFile()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>();

        $r8 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: java.nio.charset.Charset CHARSET>;

        r2 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        $r9 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File tempFile()>();

        $r10 = virtualinvoke $r9.<java.io.File: java.lang.String toString()>();

        $r11 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: java.nio.charset.Charset CHARSET>;

        r3 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        $i0 = lengthof r2;

        $i2 = 20 + $i0;

        $i1 = lengthof r3;

        $i3 = $i2 + $i1;

        r4 = newarray (byte)[$i3];

        $r12 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4);

        $r13 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r5 = virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r13);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(510937943);

        $l4 = virtualinvoke r1.<org.apache.flink.core.fs.local.LocalRecoverable: long offset()>();

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l4);

        $i5 = lengthof r2;

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i5);

        $i6 = lengthof r3;

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i6);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r2);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r3);

        return r4;
    }

    public org.apache.flink.core.fs.local.LocalRecoverable deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;
        int i0;
        byte[] r1;
        org.apache.flink.core.fs.local.LocalRecoverable $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        lookupswitch(i0)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        $r2 = staticinvoke <org.apache.flink.core.fs.local.LocalRecoverableSerializer: org.apache.flink.core.fs.local.LocalRecoverable deserializeV1(byte[])>(r1);

        return $r2;

     label2:
        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version or corrupt state: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    private static org.apache.flink.core.fs.local.LocalRecoverable deserializeV1(byte[]) throws java.io.IOException
    {
        byte[] r0, r2, r3;
        java.nio.ByteBuffer r1, $r6;
        long l0;
        java.nio.ByteOrder $r7;
        int $i1, $i2, $i3;
        java.lang.String $r10, $r12;
        java.nio.charset.Charset $r11, $r13;
        org.apache.flink.core.fs.local.LocalRecoverable $r14;
        java.io.File $r15, $r16;
        java.io.IOException $r17;

        r0 := @parameter0: byte[];

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r1 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        if $i1 == 510937943 goto label1;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Corrupt data: Unexpected magic number.");

        throw $r17;

     label1:
        l0 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong()>();

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        r2 = newarray (byte)[$i2];

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        r3 = newarray (byte)[$i3];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r3);

        $r10 = new java.lang.String;

        $r11 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: java.nio.charset.Charset CHARSET>;

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r2, $r11);

        $r12 = new java.lang.String;

        $r13 = <org.apache.flink.core.fs.local.LocalRecoverableSerializer: java.nio.charset.Charset CHARSET>;

        specialinvoke $r12.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r3, $r13);

        $r14 = new org.apache.flink.core.fs.local.LocalRecoverable;

        $r15 = new java.io.File;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r10);

        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r12);

        specialinvoke $r14.<org.apache.flink.core.fs.local.LocalRecoverable: void <init>(java.io.File,java.io.File,long)>($r15, $r16, l0);

        return $r14;
    }

    public volatile java.lang.Object deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;
        int i0;
        byte[] r1;
        org.apache.flink.core.fs.local.LocalRecoverable $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableSerializer: org.apache.flink.core.fs.local.LocalRecoverable deserialize(int,byte[])>(i0, r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.fs.local.LocalRecoverable $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.core.fs.local.LocalRecoverable) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalRecoverableSerializer: byte[] serialize(org.apache.flink.core.fs.local.LocalRecoverable)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.flink.core.fs.local.LocalRecoverableSerializer $r0;
        java.nio.charset.Charset $r1;

        <org.apache.flink.core.fs.local.LocalRecoverableSerializer: int MAGIC_NUMBER> = 510937943;

        $r0 = new org.apache.flink.core.fs.local.LocalRecoverableSerializer;

        specialinvoke $r0.<org.apache.flink.core.fs.local.LocalRecoverableSerializer: void <init>()>();

        <org.apache.flink.core.fs.local.LocalRecoverableSerializer: org.apache.flink.core.fs.local.LocalRecoverableSerializer INSTANCE> = $r0;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        <org.apache.flink.core.fs.local.LocalRecoverableSerializer: java.nio.charset.Charset CHARSET> = $r1;

        return;
    }
}
