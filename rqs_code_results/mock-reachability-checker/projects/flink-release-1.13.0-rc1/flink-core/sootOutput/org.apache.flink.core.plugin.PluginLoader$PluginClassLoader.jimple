final class org.apache.flink.core.plugin.PluginLoader$PluginClassLoader extends java.net.URLClassLoader
{
    private static final java.lang.ClassLoader PLATFORM_OR_BOOTSTRAP_LOADER;
    private final java.lang.ClassLoader flinkClassLoader;
    private final java.lang.String[] allowedFlinkPackages;
    private final java.lang.String[] allowedResourcePrefixes;

    void <init>(java.net.URL[], java.lang.ClassLoader, java.lang.String[])
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.net.URL[] r1;
        java.lang.ClassLoader r2, $r4;
        java.lang.String[] r3, $r10;
        java.util.stream.Stream $r5, $r7;
        java.util.function.Function $r6;
        java.util.function.IntFunction $r8;
        java.lang.Object[] $r9;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.net.URL[];

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.lang.String[];

        $r4 = <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader PLATFORM_OR_BOOTSTRAP_LOADER>;

        specialinvoke r0.<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)>(r1, $r4);

        r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader flinkClassLoader> = r2;

        r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.String[] allowedFlinkPackages> = r3;

        $r5 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r3);

        $r6 = staticinvoke <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader$lambda_new_0__397: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader$lambda_new_1__398: java.util.function.IntFunction bootstrap$()>();

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r8);

        $r10 = (java.lang.String[]) $r9;

        r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.String[] allowedResourcePrefixes> = $r10;

        return;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Class r3, $r7, $r9, $r10, $r11;
        java.lang.Object $r6;
        java.lang.ClassLoader $r8;
        java.lang.Throwable $r12;
        java.lang.ClassNotFoundException $r13;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r6 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.Object getClassLoadingLock(java.lang.String)>(r1);

        entermonitor $r6;

     label01:
        r3 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if r3 == null goto label03;

        $r11 = specialinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.Class resolveIfNeeded(boolean,java.lang.Class)>(z0, r3);

        exitmonitor $r6;

     label02:
        return $r11;

     label03:
        $z1 = specialinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: boolean isAllowedFlinkClass(java.lang.String)>(r1);

        if $z1 == 0 goto label08;

     label04:
        $r8 = r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader flinkClassLoader>;

        $r9 = virtualinvoke $r8.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        $r10 = specialinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.Class resolveIfNeeded(boolean,java.lang.Class)>(z0, $r9);

     label05:
        exitmonitor $r6;

     label06:
        return $r10;

     label07:
        $r13 := @caughtexception;

     label08:
        $r7 = specialinvoke r0.<java.net.URLClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, z0);

        exitmonitor $r6;

     label09:
        return $r7;

     label10:
        $r12 := @caughtexception;

        exitmonitor $r6;

     label11:
        throw $r12;

        catch java.lang.ClassNotFoundException from label04 to label05 with label07;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label07 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private java.lang.Class resolveIfNeeded(boolean, java.lang.Class)
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        boolean z0;
        java.lang.Class r1;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: void resolveClass(java.lang.Class)>(r1);

     label1:
        return r1;
    }

    public java.net.URL getResource(java.lang.String)
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.lang.String r1;
        boolean $z0;
        java.net.URL $r2, $r4;
        java.lang.ClassLoader $r3;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: boolean isAllowedFlinkResource(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader flinkClassLoader>;

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<java.net.URLClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r2;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.lang.String r1;
        boolean $z0;
        java.util.Enumeration $r2, $r4;
        java.lang.ClassLoader $r3;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: boolean isAllowedFlinkResource(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader flinkClassLoader>;

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<java.net.URLClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r2;
    }

    private boolean isAllowedFlinkClass(java.lang.String)
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        java.util.stream.Stream $r3;
        java.util.function.Predicate $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.String[] allowedFlinkPackages>;

        $r3 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r2);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader$startsWith__272: java.util.function.Predicate bootstrap$(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r5);

        return $z0;
    }

    private boolean isAllowedFlinkResource(java.lang.String)
    {
        org.apache.flink.core.plugin.PluginLoader$PluginClassLoader r0;
        java.lang.String r1;
        java.lang.String[] $r2;
        java.util.stream.Stream $r3;
        java.util.function.Predicate $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.core.plugin.PluginLoader$PluginClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.String[] allowedResourcePrefixes>;

        $r3 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r2);

        virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader$startsWith__267: java.util.function.Predicate bootstrap$(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r5);

        return $z0;
    }

    public static java.lang.String[] lambda$new$1(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    public static java.lang.String lambda$new$0(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.NoSuchMethodException $r5;
        java.lang.Exception $r6;
        java.lang.IllegalStateException $r7;
        java.lang.ClassLoader r8;

        r8 = null;

     label1:
        $r1 = class "Ljava/lang/ClassLoader;";

        $r0 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getPlatformClassLoader", $r0);

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        r8 = (java.lang.ClassLoader) $r4;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot retrieve platform classloader on Java 9+", $r6);

        throw $r7;

     label5:
        <org.apache.flink.core.plugin.PluginLoader$PluginClassLoader: java.lang.ClassLoader PLATFORM_OR_BOOTSTRAP_LOADER> = r8;

        staticinvoke <java.lang.ClassLoader: boolean registerAsParallelCapable()>();

        return;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }
}
