public class org.apache.flink.api.common.typeutils.GenericPairComparator extends org.apache.flink.api.common.typeutils.TypePairComparator implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeComparator comparator1;
    private final org.apache.flink.api.common.typeutils.TypeComparator comparator2;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators1;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators2;
    private final java.lang.Object[] referenceKeyFields;
    private final java.lang.Object[] candidateKeyFields;

    public void <init>(org.apache.flink.api.common.typeutils.TypeComparator, org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.GenericPairComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1, r2, $r11, $r13, $r15, $r17;
        int i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r4, $r5, $r6, $r7, $r10, $r12, $r14, $r16;
        java.lang.Object[] $r8, $r9;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericPairComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypePairComparator: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator comparator1> = r1;

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator comparator2> = r2;

        $r3 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1> = $r3;

        $r4 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators2> = $r4;

        $r5 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $i2 = lengthof $r5;

        $r6 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators2>;

        $i1 = lengthof $r6;

        if $i2 == $i1 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of key fields and comparators differ.");

        throw $r18;

     label1:
        $r7 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        i0 = lengthof $r7;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r12 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $r10 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $r11 = $r10[i3];

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $r12[i3] = $r13;

        $r16 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators2>;

        $r14 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators2>;

        $r15 = $r14[i3];

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $r16[i3] = $r17;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r8 = newarray (java.lang.Object)[i0];

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] referenceKeyFields> = $r8;

        $r9 = newarray (java.lang.Object)[i0];

        r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] candidateKeyFields> = $r9;

        return;
    }

    public void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.GenericPairComparator r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        org.apache.flink.api.common.typeutils.TypeComparator $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericPairComparator;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator comparator1>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] referenceKeyFields>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r1, $r2, 0);

        return;
    }

    public boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.GenericPairComparator r0;
        java.lang.Object r1, $r8, $r9;
        java.lang.Object[] $r2, $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeComparator $r3, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4, $r5;
        int $i1, $i2, i3;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericPairComparator;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator comparator2>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] candidateKeyFields>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r1, $r2, 0);

        i3 = 0;

     label1:
        $r4 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $i1 = lengthof $r4;

        if i3 >= $i1 goto label3;

        $r5 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $r10 = $r5[i3];

        $r6 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] referenceKeyFields>;

        $r9 = $r6[i3];

        $r7 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] candidateKeyFields>;

        $r8 = $r7[i3];

        $i2 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r8);

        if $i2 == 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public int compareToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.GenericPairComparator r0;
        java.lang.Object r1, $r8, $r9;
        int i0, $i2, i3;
        java.lang.Object[] $r2, $r6, $r7;
        org.apache.flink.api.common.typeutils.TypeComparator $r3, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.GenericPairComparator;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator comparator2>;

        $r2 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] candidateKeyFields>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r1, $r2, 0);

        i3 = 0;

     label1:
        $r4 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $i2 = lengthof $r4;

        if i3 >= $i2 goto label3;

        $r5 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators1>;

        $r10 = $r5[i3];

        $r6 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] candidateKeyFields>;

        $r9 = $r6[i3];

        $r7 = r0.<org.apache.flink.api.common.typeutils.GenericPairComparator: java.lang.Object[] referenceKeyFields>;

        $r8 = $r7[i3];

        i0 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r8);

        if i0 == 0 goto label2;

        return i0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.GenericPairComparator: long serialVersionUID> = 1L;

        return;
    }
}
