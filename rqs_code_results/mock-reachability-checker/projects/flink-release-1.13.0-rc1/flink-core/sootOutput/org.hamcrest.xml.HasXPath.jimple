public class org.hamcrest.xml.HasXPath extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    public static final javax.xml.namespace.NamespaceContext NO_NAMESPACE_CONTEXT;
    private static final org.hamcrest.core.IsAnything WITH_ANY_CONTENT;
    private static final org.hamcrest.Condition$Step NODE_EXISTS;
    private final org.hamcrest.Matcher valueMatcher;
    private final javax.xml.xpath.XPathExpression compiledXPath;
    private final java.lang.String xpathString;
    private final javax.xml.namespace.QName evaluationMode;

    public void <init>(java.lang.String, org.hamcrest.Matcher)
    {
        org.hamcrest.xml.HasXPath r0;
        java.lang.String r1;
        org.hamcrest.Matcher r2;
        javax.xml.namespace.NamespaceContext $r3;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Matcher;

        $r3 = <org.hamcrest.xml.HasXPath: javax.xml.namespace.NamespaceContext NO_NAMESPACE_CONTEXT>;

        specialinvoke r0.<org.hamcrest.xml.HasXPath: void <init>(java.lang.String,javax.xml.namespace.NamespaceContext,org.hamcrest.Matcher)>(r1, $r3, r2);

        return;
    }

    public void <init>(java.lang.String, javax.xml.namespace.NamespaceContext, org.hamcrest.Matcher)
    {
        org.hamcrest.xml.HasXPath r0;
        java.lang.String r1;
        javax.xml.namespace.NamespaceContext r2;
        org.hamcrest.Matcher r3;
        javax.xml.namespace.QName $r4;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.xml.namespace.NamespaceContext;

        r3 := @parameter2: org.hamcrest.Matcher;

        $r4 = <javax.xml.xpath.XPathConstants: javax.xml.namespace.QName STRING>;

        specialinvoke r0.<org.hamcrest.xml.HasXPath: void <init>(java.lang.String,javax.xml.namespace.NamespaceContext,org.hamcrest.Matcher,javax.xml.namespace.QName)>(r1, r2, r3, $r4);

        return;
    }

    private void <init>(java.lang.String, javax.xml.namespace.NamespaceContext, org.hamcrest.Matcher, javax.xml.namespace.QName)
    {
        org.hamcrest.xml.HasXPath r0;
        java.lang.String r1;
        javax.xml.namespace.NamespaceContext r2;
        org.hamcrest.Matcher r3;
        javax.xml.namespace.QName r4;
        javax.xml.xpath.XPathExpression $r5;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javax.xml.namespace.NamespaceContext;

        r3 := @parameter2: org.hamcrest.Matcher;

        r4 := @parameter3: javax.xml.namespace.QName;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>()>();

        $r5 = staticinvoke <org.hamcrest.xml.HasXPath: javax.xml.xpath.XPathExpression compiledXPath(java.lang.String,javax.xml.namespace.NamespaceContext)>(r1, r2);

        r0.<org.hamcrest.xml.HasXPath: javax.xml.xpath.XPathExpression compiledXPath> = $r5;

        r0.<org.hamcrest.xml.HasXPath: java.lang.String xpathString> = r1;

        r0.<org.hamcrest.xml.HasXPath: org.hamcrest.Matcher valueMatcher> = r3;

        r0.<org.hamcrest.xml.HasXPath: javax.xml.namespace.QName evaluationMode> = r4;

        return;
    }

    public boolean matchesSafely(org.w3c.dom.Node, org.hamcrest.Description)
    {
        org.hamcrest.xml.HasXPath r0;
        org.w3c.dom.Node r1;
        org.hamcrest.Description r2;
        org.hamcrest.Condition $r3, $r5;
        org.hamcrest.Condition$Step $r4;
        org.hamcrest.Matcher $r6;
        boolean $z0;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = specialinvoke r0.<org.hamcrest.xml.HasXPath: org.hamcrest.Condition evaluated(org.w3c.dom.Node,org.hamcrest.Description)>(r1, r2);

        $r4 = <org.hamcrest.xml.HasXPath: org.hamcrest.Condition$Step NODE_EXISTS>;

        $r5 = virtualinvoke $r3.<org.hamcrest.Condition: org.hamcrest.Condition and(org.hamcrest.Condition$Step)>($r4);

        $r6 = r0.<org.hamcrest.xml.HasXPath: org.hamcrest.Matcher valueMatcher>;

        $z0 = virtualinvoke $r5.<org.hamcrest.Condition: boolean matching(org.hamcrest.Matcher)>($r6);

        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.xml.HasXPath r0;
        org.hamcrest.Description r1, $r2, $r6;
        java.lang.String $r3;
        org.hamcrest.Matcher $r5, $r7;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("an XML document with XPath ");

        $r3 = r0.<org.hamcrest.xml.HasXPath: java.lang.String xpathString>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r3);

        $r5 = r0.<org.hamcrest.xml.HasXPath: org.hamcrest.Matcher valueMatcher>;

        if $r5 == null goto label1;

        $r6 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r7 = r0.<org.hamcrest.xml.HasXPath: org.hamcrest.Matcher valueMatcher>;

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r7);

     label1:
        return;
    }

    private org.hamcrest.Condition evaluated(org.w3c.dom.Node, org.hamcrest.Description)
    {
        org.hamcrest.xml.HasXPath r0;
        org.w3c.dom.Node r1;
        org.hamcrest.Description r2;
        javax.xml.namespace.QName $r4;
        javax.xml.xpath.XPathExpression $r5;
        java.lang.Object $r6;
        org.hamcrest.Condition $r7, $r11;
        javax.xml.xpath.XPathExpressionException $r8;
        java.lang.String $r9;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.hamcrest.Description;

     label1:
        $r5 = r0.<org.hamcrest.xml.HasXPath: javax.xml.xpath.XPathExpression compiledXPath>;

        $r4 = r0.<org.hamcrest.xml.HasXPath: javax.xml.namespace.QName evaluationMode>;

        $r6 = interfaceinvoke $r5.<javax.xml.xpath.XPathExpression: java.lang.Object evaluate(java.lang.Object,javax.xml.namespace.QName)>(r1, $r4);

        $r7 = staticinvoke <org.hamcrest.Condition: org.hamcrest.Condition matched(java.lang.Object,org.hamcrest.Description)>($r6, r2);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<javax.xml.xpath.XPathExpressionException: java.lang.String getMessage()>();

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r9);

        $r11 = staticinvoke <org.hamcrest.Condition: org.hamcrest.Condition notMatched()>();

        return $r11;

        catch javax.xml.xpath.XPathExpressionException from label1 to label2 with label3;
    }

    private static org.hamcrest.Condition$Step nodeExists()
    {
        org.hamcrest.xml.HasXPath$1 $r0;

        $r0 = new org.hamcrest.xml.HasXPath$1;

        specialinvoke $r0.<org.hamcrest.xml.HasXPath$1: void <init>()>();

        return $r0;
    }

    private static javax.xml.xpath.XPathExpression compiledXPath(java.lang.String, javax.xml.namespace.NamespaceContext)
    {
        java.lang.String r0, $r9;
        javax.xml.namespace.NamespaceContext r1;
        javax.xml.xpath.XPathFactory $r2;
        javax.xml.xpath.XPathExpression $r3;
        javax.xml.xpath.XPathExpressionException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        javax.xml.xpath.XPath r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

     label1:
        $r2 = staticinvoke <javax.xml.xpath.XPathFactory: javax.xml.xpath.XPathFactory newInstance()>();

        r10 = virtualinvoke $r2.<javax.xml.xpath.XPathFactory: javax.xml.xpath.XPath newXPath()>();

        if r1 == null goto label2;

        interfaceinvoke r10.<javax.xml.xpath.XPath: void setNamespaceContext(javax.xml.namespace.NamespaceContext)>(r1);

     label2:
        $r3 = interfaceinvoke r10.<javax.xml.xpath.XPath: javax.xml.xpath.XPathExpression compile(java.lang.String)>(r0);

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid XPath : ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

        catch javax.xml.xpath.XPathExpressionException from label1 to label3 with label4;
    }

    public static org.hamcrest.Matcher hasXPath(java.lang.String, org.hamcrest.Matcher)
    {
        java.lang.String r0;
        org.hamcrest.Matcher r1, $r3;
        javax.xml.namespace.NamespaceContext $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.hamcrest.Matcher;

        $r2 = <org.hamcrest.xml.HasXPath: javax.xml.namespace.NamespaceContext NO_NAMESPACE_CONTEXT>;

        $r3 = staticinvoke <org.hamcrest.xml.HasXPath: org.hamcrest.Matcher hasXPath(java.lang.String,javax.xml.namespace.NamespaceContext,org.hamcrest.Matcher)>(r0, $r2, r1);

        return $r3;
    }

    public static org.hamcrest.Matcher hasXPath(java.lang.String, javax.xml.namespace.NamespaceContext, org.hamcrest.Matcher)
    {
        java.lang.String r0;
        javax.xml.namespace.NamespaceContext r1;
        org.hamcrest.Matcher r2;
        org.hamcrest.xml.HasXPath $r3;
        javax.xml.namespace.QName $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

        r2 := @parameter2: org.hamcrest.Matcher;

        $r3 = new org.hamcrest.xml.HasXPath;

        $r4 = <javax.xml.xpath.XPathConstants: javax.xml.namespace.QName STRING>;

        specialinvoke $r3.<org.hamcrest.xml.HasXPath: void <init>(java.lang.String,javax.xml.namespace.NamespaceContext,org.hamcrest.Matcher,javax.xml.namespace.QName)>(r0, r1, r2, $r4);

        return $r3;
    }

    public static org.hamcrest.Matcher hasXPath(java.lang.String)
    {
        java.lang.String r0;
        javax.xml.namespace.NamespaceContext $r1;
        org.hamcrest.Matcher $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.hamcrest.xml.HasXPath: javax.xml.namespace.NamespaceContext NO_NAMESPACE_CONTEXT>;

        $r2 = staticinvoke <org.hamcrest.xml.HasXPath: org.hamcrest.Matcher hasXPath(java.lang.String,javax.xml.namespace.NamespaceContext)>(r0, $r1);

        return $r2;
    }

    public static org.hamcrest.Matcher hasXPath(java.lang.String, javax.xml.namespace.NamespaceContext)
    {
        java.lang.String r0;
        javax.xml.namespace.NamespaceContext r1;
        org.hamcrest.xml.HasXPath $r2;
        javax.xml.namespace.QName $r3;
        org.hamcrest.core.IsAnything $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javax.xml.namespace.NamespaceContext;

        $r2 = new org.hamcrest.xml.HasXPath;

        $r4 = <org.hamcrest.xml.HasXPath: org.hamcrest.core.IsAnything WITH_ANY_CONTENT>;

        $r3 = <javax.xml.xpath.XPathConstants: javax.xml.namespace.QName NODE>;

        specialinvoke $r2.<org.hamcrest.xml.HasXPath: void <init>(java.lang.String,javax.xml.namespace.NamespaceContext,org.hamcrest.Matcher,javax.xml.namespace.QName)>(r0, r1, $r4, $r3);

        return $r2;
    }

    public volatile boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.xml.HasXPath r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        org.w3c.dom.Node $r3;
        boolean $z0;

        r0 := @this: org.hamcrest.xml.HasXPath;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (org.w3c.dom.Node) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.xml.HasXPath: boolean matchesSafely(org.w3c.dom.Node,org.hamcrest.Description)>($r3, r2);

        return $z0;
    }

    static void <clinit>()
    {
        org.hamcrest.core.IsAnything $r0;
        org.hamcrest.Condition$Step $r1;

        <org.hamcrest.xml.HasXPath: javax.xml.namespace.NamespaceContext NO_NAMESPACE_CONTEXT> = null;

        $r0 = new org.hamcrest.core.IsAnything;

        specialinvoke $r0.<org.hamcrest.core.IsAnything: void <init>(java.lang.String)>("");

        <org.hamcrest.xml.HasXPath: org.hamcrest.core.IsAnything WITH_ANY_CONTENT> = $r0;

        $r1 = staticinvoke <org.hamcrest.xml.HasXPath: org.hamcrest.Condition$Step nodeExists()>();

        <org.hamcrest.xml.HasXPath: org.hamcrest.Condition$Step NODE_EXISTS> = $r1;

        return;
    }
}
