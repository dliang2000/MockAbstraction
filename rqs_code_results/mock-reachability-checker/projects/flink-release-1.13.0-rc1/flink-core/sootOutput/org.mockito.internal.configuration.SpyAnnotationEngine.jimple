public class org.mockito.internal.configuration.SpyAnnotationEngine extends java.lang.Object implements org.mockito.plugins.AnnotationEngine, org.mockito.configuration.AnnotationEngine
{

    public void <init>()
    {
        org.mockito.internal.configuration.SpyAnnotationEngine r0;

        r0 := @this: org.mockito.internal.configuration.SpyAnnotationEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.configuration.SpyAnnotationEngine r0;
        java.lang.Class r1;
        java.lang.Object r2, r6, $r9, $r10;
        java.lang.reflect.Field[] r3;
        int i0, i1;
        java.lang.reflect.Field r5;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r8;
        java.lang.Object[] $r11;
        java.lang.Exception $r12;
        org.mockito.exceptions.base.MockitoException $r13;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r20;
        java.lang.String $r16, $r19, $r21;

        r0 := @this: org.mockito.internal.configuration.SpyAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label8;

        r5 = r3[i1];

        $z0 = virtualinvoke r5.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/mockito/Spy;");

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke r5.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/mockito/InjectMocks;");

        if $z1 != 0 goto label7;

        $r8 = newarray (java.lang.Class)[2];

        $r8[0] = class "Lorg/mockito/Mock;";

        $r8[1] = class "Lorg/mockito/Captor;";

        staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: void assertNoIncompatibleAnnotations(java.lang.Class,java.lang.reflect.Field,java.lang.Class[])>(class "Lorg/mockito/Spy;", r5, $r8);

        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2);

        $z2 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>(r6);

        if $z2 == 0 goto label3;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r6;

        staticinvoke <org.mockito.Mockito: void reset(java.lang.Object[])>($r11);

        goto label5;

     label3:
        if r6 == null goto label4;

        $r10 = staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: java.lang.Object spyInstance(java.lang.reflect.Field,java.lang.Object)>(r5, r6);

        virtualinvoke r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, $r10);

        goto label5;

     label4:
        $r9 = staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: java.lang.Object spyNewInstance(java.lang.Object,java.lang.reflect.Field)>(r2, r5);

        virtualinvoke r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, $r9);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.mockito.exceptions.base.MockitoException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to initialize @Spy annotated field \'");

        $r16 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.\n");

        $r19 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r12);

        throw $r13;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    private static java.lang.Object spyInstance(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, $r9;
        java.lang.Class $r2;
        org.mockito.MockSettings $r3, $r4, $r6, $r8;
        org.mockito.stubbing.Answer $r5;
        java.lang.String $r7;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r4 = interfaceinvoke $r3.<org.mockito.MockSettings: org.mockito.MockSettings spiedInstance(java.lang.Object)>(r1);

        $r5 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        $r6 = interfaceinvoke $r4.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r5);

        $r7 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $r8 = interfaceinvoke $r6.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>($r7);

        $r9 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>($r2, $r8);

        return $r9;
    }

    private static java.lang.Object spyNewInstance(java.lang.Object, java.lang.reflect.Field) throws java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException
    {
        java.lang.Object r0, $r10, $r12, $r14, $r18, $r52;
        java.lang.reflect.Field r1;
        org.mockito.MockSettings r2, $r4, $r6, $r9, $r13, $r16, $r17, $r51;
        java.lang.Class r3, $r44, r53;
        int i0, $i1;
        org.mockito.stubbing.Answer $r5;
        java.lang.String $r7, $r23, $r26, $r29, $r32, $r33, $r38, $r41, $r45, $r48, $r49;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object[] $r8, $r11, $r15, $r20, $r35, $r50;
        org.mockito.exceptions.base.MockitoException $r19, $r34;
        java.lang.StringBuilder $r21, $r22, $r24, $r25, $r27, $r28, $r30, $r31, $r36, $r37, $r39, $r40, $r42, $r43, $r46, $r47;
        java.lang.reflect.Constructor r54;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Field;

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r5 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        $r6 = interfaceinvoke $r4.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r5);

        $r7 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.String getName()>();

        r2 = interfaceinvoke $r6.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>($r7);

        r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke r3.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r50 = newarray (java.lang.Object)[0];

        $r51 = interfaceinvoke r2.<org.mockito.MockSettings: org.mockito.MockSettings useConstructor(java.lang.Object[])>($r50);

        $r52 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r3, $r51);

        return $r52;

     label1:
        i0 = virtualinvoke r3.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: boolean typeIsPrivateAbstractInnerClass(java.lang.Class,int)>(r3, i0);

        if $z1 == 0 goto label2;

        $r34 = new org.mockito.exceptions.base.MockitoException;

        $r35 = newarray (java.lang.Object)[5];

        $r35[0] = "@Spy annotation can\'t initialize private abstract inner classes.";

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  inner class: \'");

        $r38 = virtualinvoke r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35[1] = $r41;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  outer class: \'");

        $r44 = virtualinvoke r3.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getSimpleName()>();

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35[2] = $r48;

        $r35[3] = "";

        $r35[4] = "You should augment the visibility of this inner class";

        $r49 = staticinvoke <org.mockito.internal.util.StringUtil: java.lang.String join(java.lang.Object[])>($r35);

        specialinvoke $r34.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r49);

        throw $r34;

     label2:
        $z2 = staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: boolean typeIsNonStaticInnerClass(java.lang.Class,int)>(r3, i0);

        if $z2 == 0 goto label4;

        r53 = virtualinvoke r3.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        $z4 = virtualinvoke r53.<java.lang.Class: boolean isInstance(java.lang.Object)>(r0);

        if $z4 != 0 goto label3;

        $r19 = new org.mockito.exceptions.base.MockitoException;

        $r20 = newarray (java.lang.Object)[4];

        $r20[0] = "@Spy annotation can only initialize inner classes declared in the test.";

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  inner class: \'");

        $r23 = virtualinvoke r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[1] = $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  outer class: \'");

        $r29 = virtualinvoke r53.<java.lang.Class: java.lang.String getSimpleName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[2] = $r32;

        $r20[3] = "";

        $r33 = staticinvoke <org.mockito.internal.util.StringUtil: java.lang.String join(java.lang.Object[])>($r20);

        specialinvoke $r19.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r33);

        throw $r19;

     label3:
        $r15 = newarray (java.lang.Object)[0];

        $r16 = interfaceinvoke r2.<org.mockito.MockSettings: org.mockito.MockSettings useConstructor(java.lang.Object[])>($r15);

        $r17 = interfaceinvoke $r16.<org.mockito.MockSettings: org.mockito.MockSettings outerInstance(java.lang.Object)>(r0);

        $r18 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r3, $r17);

        return $r18;

     label4:
        r54 = staticinvoke <org.mockito.internal.configuration.SpyAnnotationEngine: java.lang.reflect.Constructor noArgConstructorOf(java.lang.Class)>(r3);

        $i1 = virtualinvoke r54.<java.lang.reflect.Constructor: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i1);

        if $z3 == 0 goto label5;

        virtualinvoke r54.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        $r11 = newarray (java.lang.Object)[0];

        $r12 = virtualinvoke r54.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r11);

        $r13 = interfaceinvoke r2.<org.mockito.MockSettings: org.mockito.MockSettings spiedInstance(java.lang.Object)>($r12);

        $r14 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r3, $r13);

        return $r14;

     label5:
        $r8 = newarray (java.lang.Object)[0];

        $r9 = interfaceinvoke r2.<org.mockito.MockSettings: org.mockito.MockSettings useConstructor(java.lang.Object[])>($r8);

        $r10 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r3, $r9);

        return $r10;
    }

    private static java.lang.reflect.Constructor noArgConstructorOf(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor r1;
        java.lang.Class[] $r3;
        java.lang.NoSuchMethodException $r4;
        org.mockito.exceptions.base.MockitoException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.mockito.exceptions.base.MockitoException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Please ensure that the type \'");

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has a no-arg constructor.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label4:
        return r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean typeIsNonStaticInnerClass(java.lang.Class, int)
    {
        java.lang.Class r0, $r1;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean typeIsPrivateAbstractInnerClass(java.lang.Class, int)
    {
        java.lang.Class r0, $r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z1 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r1 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static transient void assertNoIncompatibleAnnotations(java.lang.Class, java.lang.reflect.Field, java.lang.Class[])
    {
        java.lang.Class r0, r4;
        java.lang.reflect.Field r1;
        java.lang.Class[] r2;
        int i0, i1;
        boolean $z0;
        java.lang.String $r5, $r6;
        org.mockito.exceptions.base.MockitoException $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field;

        r2 := @parameter2: java.lang.Class[];

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(r4);

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r6 = virtualinvoke r4.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException unsupportedCombinationOfAnnotations(java.lang.String,java.lang.String)>($r5, $r6);

        throw $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
}
