public class javassist.expr.NewExpr extends javassist.expr.Expr
{
    java.lang.String newTypeName;
    int newPos;

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo, java.lang.String, int)
    {
        javassist.expr.NewExpr r0;
        int i0, i1;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;
        java.lang.String r4;

        r0 := @this: javassist.expr.NewExpr;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        r4 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        specialinvoke r0.<javassist.expr.Expr: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>(i0, r1, r2, r3);

        r0.<javassist.expr.NewExpr: java.lang.String newTypeName> = r4;

        r0.<javassist.expr.NewExpr: int newPos> = i1;

        return;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.NewExpr r0;
        javassist.CtBehavior $r1;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtBehavior where()>();

        return $r1;
    }

    public int getLineNumber()
    {
        javassist.expr.NewExpr r0;
        int $i0;

        r0 := @this: javassist.expr.NewExpr;

        $i0 = specialinvoke r0.<javassist.expr.Expr: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.NewExpr r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = specialinvoke r0.<javassist.expr.Expr: java.lang.String getFileName()>();

        return $r1;
    }

    private javassist.CtClass getCtClass() throws javassist.NotFoundException
    {
        javassist.expr.NewExpr r0;
        javassist.CtClass $r1, $r4;
        javassist.ClassPool $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = r0.<javassist.expr.NewExpr: javassist.CtClass thisClass>;

        $r2 = virtualinvoke $r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r3 = r0.<javassist.expr.NewExpr: java.lang.String newTypeName>;

        $r4 = virtualinvoke $r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r3);

        return $r4;
    }

    public java.lang.String getClassName()
    {
        javassist.expr.NewExpr r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = r0.<javassist.expr.NewExpr: java.lang.String newTypeName>;

        return $r1;
    }

    public java.lang.String getSignature()
    {
        javassist.expr.NewExpr r0;
        javassist.bytecode.ConstPool r1;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator $r2;
        java.lang.String $r3;

        r0 := @this: javassist.expr.NewExpr;

        r1 = virtualinvoke r0.<javassist.expr.NewExpr: javassist.bytecode.ConstPool getConstPool()>();

        $r2 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.NewExpr: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r3 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i0);

        return $r3;
    }

    public javassist.CtConstructor getConstructor() throws javassist.NotFoundException
    {
        javassist.expr.NewExpr r0;
        javassist.bytecode.ConstPool r1;
        int i0, $i1, $i2;
        java.lang.String r2;
        javassist.bytecode.CodeIterator $r3;
        javassist.CtClass $r4;
        javassist.CtConstructor $r5;

        r0 := @this: javassist.expr.NewExpr;

        r1 = virtualinvoke r0.<javassist.expr.NewExpr: javassist.bytecode.ConstPool getConstPool()>();

        $r3 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.NewExpr: int currentPos>;

        $i2 = $i1 + 1;

        i0 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i0);

        $r4 = specialinvoke r0.<javassist.expr.NewExpr: javassist.CtClass getCtClass()>();

        $r5 = virtualinvoke $r4.<javassist.CtClass: javassist.CtConstructor getConstructor(java.lang.String)>(r2);

        return $r5;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.NewExpr r0;
        javassist.CtClass[] $r1;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtClass[] mayThrow()>();

        return $r1;
    }

    private int canReplace() throws javassist.CannotCompileException
    {
        javassist.expr.NewExpr r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        javassist.bytecode.CodeIterator $r1, $r2, $r3, $r4;
        byte $b12;

        r0 := @this: javassist.expr.NewExpr;

        $r1 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i1 = r0.<javassist.expr.NewExpr: int newPos>;

        $i2 = $i1 + 3;

        i0 = virtualinvoke $r1.<javassist.bytecode.CodeIterator: int byteAt(int)>($i2);

        if i0 != 89 goto label3;

        $r3 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i6 = r0.<javassist.expr.NewExpr: int newPos>;

        $i7 = $i6 + 4;

        $i8 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int byteAt(int)>($i7);

        if $i8 != 94 goto label1;

        $r4 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i9 = r0.<javassist.expr.NewExpr: int newPos>;

        $i10 = $i9 + 5;

        $i11 = virtualinvoke $r4.<javassist.bytecode.CodeIterator: int byteAt(int)>($i10);

        if $i11 != 88 goto label1;

        $b12 = 6;

        goto label2;

     label1:
        $b12 = 4;

     label2:
        return $b12;

     label3:
        if i0 != 90 goto label4;

        $r2 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i3 = r0.<javassist.expr.NewExpr: int newPos>;

        $i4 = $i3 + 4;

        $i5 = virtualinvoke $r2.<javassist.bytecode.CodeIterator: int byteAt(int)>($i4);

        if $i5 != 95 goto label4;

        return 5;

     label4:
        return 3;
    }

    public void replace(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.NewExpr r0;
        java.lang.String r1, r2, $r16, $r17;
        int i1, i2, i3, i4, i5, i6, $i7, $i8, i11, i12, i13;
        javassist.ClassPool r4;
        javassist.bytecode.CodeAttribute r5;
        javassist.CtClass r6, $r8, $r13, $r14;
        javassist.bytecode.Bytecode r7;
        javassist.bytecode.CodeIterator $r10, $r11, $r15, $r19;
        javassist.compiler.Javac $r12;
        boolean $z0;
        javassist.expr.NewExpr$ProceedForNew $r18;
        javassist.NotFoundException $r20;
        javassist.CannotCompileException $r21, $r23, $r25;
        javassist.bytecode.BadBytecode $r22;
        javassist.compiler.CompileError $r24;
        javassist.bytecode.ConstPool r26;
        javassist.CtClass[] r27;

        r0 := @this: javassist.expr.NewExpr;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<javassist.expr.NewExpr: javassist.CtClass thisClass>;

        virtualinvoke $r8.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile()>();

        i11 = r0.<javassist.expr.NewExpr: int newPos>;

        $r10 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i7 = i11 + 1;

        i1 = virtualinvoke $r10.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i7);

        i2 = specialinvoke r0.<javassist.expr.NewExpr: int canReplace()>();

        i3 = i11 + i2;

        i12 = i11;

     label1:
        if i12 >= i3 goto label2;

        $r19 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        virtualinvoke $r19.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, i12);

        i12 = i12 + 1;

        goto label1;

     label2:
        r26 = virtualinvoke r0.<javassist.expr.NewExpr: javassist.bytecode.ConstPool getConstPool()>();

        i13 = r0.<javassist.expr.NewExpr: int currentPos>;

        $r11 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        $i8 = i13 + 1;

        i4 = virtualinvoke $r11.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i8);

        r2 = virtualinvoke r26.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i4);

        $r12 = new javassist.compiler.Javac;

        $r13 = r0.<javassist.expr.NewExpr: javassist.CtClass thisClass>;

        specialinvoke $r12.<javassist.compiler.Javac: void <init>(javassist.CtClass)>($r13);

        $r14 = r0.<javassist.expr.NewExpr: javassist.CtClass thisClass>;

        r4 = virtualinvoke $r14.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r15 = r0.<javassist.expr.NewExpr: javassist.bytecode.CodeIterator iterator>;

        r5 = virtualinvoke $r15.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

     label3:
        r27 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool)>(r2, r4);

        $r16 = r0.<javassist.expr.NewExpr: java.lang.String newTypeName>;

        r6 = virtualinvoke r4.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r16);

        i5 = virtualinvoke r5.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $r17 = r0.<javassist.expr.NewExpr: java.lang.String newTypeName>;

        $z0 = virtualinvoke r0.<javassist.expr.NewExpr: boolean withinStatic()>();

        virtualinvoke $r12.<javassist.compiler.Javac: int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean)>($r17, r27, 1, i5, $z0);

        i6 = virtualinvoke $r12.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r6, 1);

        $r18 = new javassist.expr.NewExpr$ProceedForNew;

        specialinvoke $r18.<javassist.expr.NewExpr$ProceedForNew: void <init>(javassist.CtClass,int,int)>(r6, i1, i4);

        virtualinvoke $r12.<javassist.compiler.Javac: void recordProceed(javassist.compiler.ProceedHandler)>($r18);

        staticinvoke <javassist.expr.NewExpr: boolean checkResultValue(javassist.CtClass,java.lang.String)>(r6, r1);

        r7 = virtualinvoke $r12.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        staticinvoke <javassist.expr.NewExpr: void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode)>(r27, 1, i5, r7);

        virtualinvoke $r12.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r5, i13);

        virtualinvoke r7.<javassist.bytecode.Bytecode: void addConstZero(javassist.CtClass)>(r6);

        virtualinvoke r7.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i6, r6);

        virtualinvoke $r12.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        if i2 <= 3 goto label4;

        virtualinvoke r7.<javassist.bytecode.Bytecode: void addAload(int)>(i6);

     label4:
        virtualinvoke r0.<javassist.expr.NewExpr: void replace0(int,javassist.bytecode.Bytecode,int)>(i13, r7, 3);

     label5:
        goto label9;

     label6:
        $r24 := @caughtexception;

        $r25 = new javassist.CannotCompileException;

        specialinvoke $r25.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r24);

        throw $r25;

     label7:
        $r20 := @caughtexception;

        $r21 = new javassist.CannotCompileException;

        specialinvoke $r21.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r20);

        throw $r21;

     label8:
        $r22 := @caughtexception;

        $r23 = new javassist.CannotCompileException;

        specialinvoke $r23.<javassist.CannotCompileException: void <init>(java.lang.String)>("broken method");

        throw $r23;

     label9:
        return;

        catch javassist.compiler.CompileError from label3 to label5 with label6;
        catch javassist.NotFoundException from label3 to label5 with label7;
        catch javassist.bytecode.BadBytecode from label3 to label5 with label8;
    }
}
