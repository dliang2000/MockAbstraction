public class org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate extends java.lang.Object
{
    private static final int MAGIC_NUMBER;
    private static final int VERSION;
    private final org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots;

    public transient void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerUtils: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] snapshotBackwardsCompatible(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots> = $r2;

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r2;

        r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots> = $r3;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer[] getRestoredNestedSerializers()
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r1 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer[] snapshotsToRestoreSerializers(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getRestoredNestedSerializer(int)
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        int i0, $i1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r2, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        r1 = $r3[i0];

        $r4 = interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        return $r4;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r1 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        return $r1;
    }

    public transient org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveCompatibilityWithNested(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r1, r3, $r9, $r10, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r4, $r5, $r6;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $i1 = lengthof r2;

        $r4 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $i0 = lengthof $r4;

        if $i1 != $i0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "Different number of new serializers and existing serializer configuration snapshots");

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        if $z0 == 0 goto label03;

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r10;

     label03:
        z5 = 0;

        i3 = 0;

     label04:
        $r5 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $i2 = lengthof $r5;

        if i3 >= $i2 goto label07;

        $r8 = r2[i3];

        $r6 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $r7 = $r6[i3];

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r8, $r7);

        $z2 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        if $z2 == 0 goto label05;

        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r9;

     label05:
        $z3 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        if $z3 == 0 goto label06;

        z5 = 1;

     label06:
        i3 = i3 + 1;

        goto label04;

     label07:
        if z5 != 0 goto label08;

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        if $z1 != 0 goto label09;

     label08:
        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        goto label10;

     label09:
        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

     label10:
        return $r11;
    }

    public final void writeNestedSerializerSnapshots(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2, $r4;
        int i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r3;

        r0 := @this: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(1333245);

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        $i1 = lengthof $r4;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        r2 = r0.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] nestedSnapshots>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r2[i2];

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>(r1, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate readNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        int i0, i1, i2, i3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r4;
        java.io.IOException $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9, $r14;
        java.lang.Object[] $r11;
        java.lang.Integer $r12, $r13;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 == 1333245 goto label1;

        $r10 = new java.io.IOException;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1333245);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Corrupt data, magic number mismatch. Expected %8x, found %8x", $r11);

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        i1 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i1 == 1 goto label2;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        i2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i2];

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        r2[i3] = $r4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r3 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r2);

        return $r3;
    }

    public static org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate legacyReadNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.util.List r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.function.IntFunction $r7;
        java.lang.Object[] $r8;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r9;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: java.util.List readSerializersAndConfigsWithResilience(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r0, r1);

        $r4 = interfaceinvoke r2.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate$lambda_legacyReadNestedSerializerSnapshots_0__301: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate$lambda_legacyReadNestedSerializerSnapshots_1__302: java.util.function.IntFunction bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r7);

        r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r8;

        $r9 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r3);

        return $r9;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        $r4 = interfaceinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r0);

        return $r4;
    }

    private static transient org.apache.flink.api.common.typeutils.TypeSerializer[] snapshotsToRestoreSerializers(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r0;
        java.util.stream.Stream $r1, $r3;
        java.util.function.Function $r2;
        java.util.function.IntFunction $r4;
        java.lang.Object[] $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r6;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        $r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate$restoreSerializer__319: java.util.function.Function bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate$lambda_snapshotsToRestoreSerializers_2__320: java.util.function.IntFunction bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r4);

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r5;

        return $r6;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer[] lambda$snapshotsToRestoreSerializers$2(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] lambda$legacyReadNestedSerializerSnapshots$1(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSnapshot lambda$legacyReadNestedSerializerSnapshots$0(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r1;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: int VERSION> = 1;

        <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: int MAGIC_NUMBER> = 1333245;

        return;
    }
}
