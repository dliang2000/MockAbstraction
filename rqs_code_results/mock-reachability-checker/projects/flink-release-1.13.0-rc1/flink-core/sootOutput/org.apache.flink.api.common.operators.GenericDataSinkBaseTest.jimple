public class org.apache.flink.api.common.operators.GenericDataSinkBaseTest extends java.lang.Object implements java.io.Serializable
{
    private static org.apache.flink.api.common.operators.util.TestNonRichInputFormat in;
    org.apache.flink.api.common.operators.GenericDataSourceBase source;

    public void <init>()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBaseTest r0;
        org.apache.flink.api.common.operators.GenericDataSourceBase $r1;
        org.apache.flink.api.common.operators.OperatorInformation $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;
        org.apache.flink.api.common.operators.util.TestNonRichInputFormat $r4;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBaseTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.flink.api.common.operators.GenericDataSourceBase;

        $r4 = <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in>;

        $r2 = new org.apache.flink.api.common.operators.OperatorInformation;

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r2.<org.apache.flink.api.common.operators.OperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation)>($r3);

        specialinvoke $r1.<org.apache.flink.api.common.operators.GenericDataSourceBase: void <init>(org.apache.flink.api.common.io.InputFormat,org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>($r4, $r2, "testSource");

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.GenericDataSourceBase source> = $r1;

        return;
    }

    public void testDataSourcePlain()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBaseTest r0;
        org.apache.flink.api.common.operators.util.TestNonRichOutputFormat $r3;
        org.apache.flink.api.common.operators.GenericDataSinkBase $r4;
        org.apache.flink.api.common.operators.UnaryOperatorInformation $r5;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r6, $r7;
        org.apache.flink.api.common.operators.GenericDataSourceBase $r8;
        org.apache.flink.api.common.ExecutionConfig $r9;
        org.apache.flink.api.common.operators.util.TestNonRichInputFormat $r11, $r18;
        java.lang.String[] $r12, $r14, $r19, $r21;
        java.util.List $r13, $r15, $r16, $r20, $r22, $r23;
        java.lang.Exception $r24;
        java.lang.String $r25;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBaseTest;

     label1:
        $r3 = new org.apache.flink.api.common.operators.util.TestNonRichOutputFormat;

        specialinvoke $r3.<org.apache.flink.api.common.operators.util.TestNonRichOutputFormat: void <init>()>();

        $r4 = new org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r5 = new org.apache.flink.api.common.operators.UnaryOperatorInformation;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(class "Lorg/apache/flink/types/Nothing;");

        specialinvoke $r5.<org.apache.flink.api.common.operators.UnaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r6, $r7);

        specialinvoke $r4.<org.apache.flink.api.common.operators.GenericDataSinkBase: void <init>(org.apache.flink.api.common.io.OutputFormat,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r3, $r5, "test_sink");

        $r8 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.GenericDataSourceBase source>;

        virtualinvoke $r4.<org.apache.flink.api.common.operators.GenericDataSinkBase: void setInput(org.apache.flink.api.common.operators.Operator)>($r8);

        $r9 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r11 = <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in>;

        virtualinvoke $r11.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void reset()>();

        $r12 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.GenericDataSinkBase: void executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r13, null, $r9);

        $r15 = $r3.<org.apache.flink.api.common.operators.util.TestNonRichOutputFormat: java.util.List output>;

        $r14 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r16 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r15, $r16);

        virtualinvoke $r9.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        virtualinvoke $r3.<org.apache.flink.api.common.operators.util.TestNonRichOutputFormat: void clear()>();

        $r18 = <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in>;

        virtualinvoke $r18.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void reset()>();

        $r19 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        virtualinvoke $r4.<org.apache.flink.api.common.operators.GenericDataSinkBase: void executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r20, null, $r9);

        $r22 = $r3.<org.apache.flink.api.common.operators.util.TestNonRichOutputFormat: java.util.List output>;

        $r21 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r23 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r21);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r23);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

        $r25 = virtualinvoke $r24.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r25);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testDataSourceWithRuntimeContext()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBaseTest r0;
        org.apache.flink.api.common.operators.util.TestRichOutputFormat $r6;
        org.apache.flink.api.common.operators.GenericDataSinkBase $r7;
        org.apache.flink.api.common.operators.UnaryOperatorInformation $r8;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r9, $r10;
        org.apache.flink.api.common.operators.GenericDataSourceBase $r11;
        org.apache.flink.api.common.ExecutionConfig $r12;
        java.util.HashMap $r13, $r14;
        org.apache.flink.api.common.TaskInfo $r15;
        org.apache.flink.api.common.operators.util.TestNonRichInputFormat $r17, $r26;
        java.lang.String[] $r18, $r22, $r27, $r31;
        java.util.List $r19, $r23, $r24, $r28, $r32, $r33;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r20, $r29;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r21, $r30;
        java.lang.Exception $r34;
        java.lang.String $r35;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBaseTest;

     label1:
        $r6 = new org.apache.flink.api.common.operators.util.TestRichOutputFormat;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.TestRichOutputFormat: void <init>()>();

        $r7 = new org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r8 = new org.apache.flink.api.common.operators.UnaryOperatorInformation;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(class "Lorg/apache/flink/types/Nothing;");

        specialinvoke $r8.<org.apache.flink.api.common.operators.UnaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r9, $r10);

        specialinvoke $r7.<org.apache.flink.api.common.operators.GenericDataSinkBase: void <init>(org.apache.flink.api.common.io.OutputFormat,org.apache.flink.api.common.operators.UnaryOperatorInformation,java.lang.String)>($r6, $r8, "test_sink");

        $r11 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.GenericDataSourceBase source>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.GenericDataSinkBase: void setInput(org.apache.flink.api.common.operators.Operator)>($r11);

        $r12 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r13 = new java.util.HashMap;

        specialinvoke $r13.<java.util.HashMap: void <init>()>();

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        $r15 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r15.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("test_sink", 1, 0, 1, 0);

        virtualinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r17 = <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in>;

        virtualinvoke $r17.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void reset()>();

        $r18 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        $r20 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r21 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r21.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r20.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r15, null, $r12, $r14, $r13, $r21);

        virtualinvoke $r7.<org.apache.flink.api.common.operators.GenericDataSinkBase: void executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r19, $r20, $r12);

        $r23 = $r6.<org.apache.flink.api.common.operators.util.TestRichOutputFormat: java.util.List output>;

        $r22 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] RICH_NAMES>;

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r22);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r23, $r24);

        virtualinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        virtualinvoke $r6.<org.apache.flink.api.common.operators.util.TestRichOutputFormat: void clear()>();

        $r26 = <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in>;

        virtualinvoke $r26.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void reset()>();

        $r27 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        $r29 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r30 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r30.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r29.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r15, null, $r12, $r14, $r13, $r30);

        virtualinvoke $r7.<org.apache.flink.api.common.operators.GenericDataSinkBase: void executeOnCollections(java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r28, $r29, $r12);

        $r32 = $r6.<org.apache.flink.api.common.operators.util.TestRichOutputFormat: java.util.List output>;

        $r31 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] RICH_NAMES>;

        $r33 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r32, $r33);

     label2:
        goto label4;

     label3:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>();

        $r35 = virtualinvoke $r34.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r35);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.operators.util.TestNonRichInputFormat $r0;

        $r0 = new org.apache.flink.api.common.operators.util.TestNonRichInputFormat;

        specialinvoke $r0.<org.apache.flink.api.common.operators.util.TestNonRichInputFormat: void <init>()>();

        <org.apache.flink.api.common.operators.GenericDataSinkBaseTest: org.apache.flink.api.common.operators.util.TestNonRichInputFormat in> = $r0;

        return;
    }
}
