abstract class org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter extends org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter
{
    double storedPermits;
    double maxPermits;
    double stableIntervalMicros;
    private long nextFreeTicketMicros;

    private void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter: void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)>(r1);

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros> = 0L;

        return;
    }

    final void doSetRate(double, long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        double d0, d1, $d2;
        long l0, $l1;
        java.util.concurrent.TimeUnit $r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        d0 := @parameter0: double;

        l0 := @parameter1: long;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: void resync(long)>(l0);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMicros(long)>(1L);

        $d2 = (double) $l1;

        d1 = $d2 / d0;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros> = d1;

        virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: void doSetRate(double,double)>(d0, d1);

        return;
    }

    abstract void doSetRate(double, double);

    final double doGetRate()
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        java.util.concurrent.TimeUnit $r1;
        long $l0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMicros(long)>(1L);

        $d1 = (double) $l0;

        $d0 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        $d2 = $d1 / $d0;

        return $d2;
    }

    final long queryEarliestAvailable(long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        long l0, $l1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros>;

        return $l1;
    }

    final long reserveEarliestAvailable(int, long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        int i0;
        long l1, l2, l3, $l4, $l5, $l6, $l7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: void resync(long)>(l1);

        l2 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros>;

        $d3 = (double) i0;

        $d2 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        d0 = staticinvoke <java.lang.Math: double min(double,double)>($d3, $d2);

        $d4 = (double) i0;

        d1 = $d4 - d0;

        $d5 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        $l4 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long storedPermitsToWaitTime(double,double)>($d5, d0);

        $d6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        $d7 = d1 * $d6;

        $l5 = (long) $d7;

        l3 = $l4 + $l5;

        $l6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros>;

        $l7 = $l6 + l3;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros> = $l7;

        $d8 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        $d9 = $d8 - d0;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = $d9;

        return l2;
    }

    abstract long storedPermitsToWaitTime(double, double);

    private void resync(long)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        long l0, $l1, $l3, $l4;
        byte $b2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        l0 := @parameter0: long;

        $l1 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros>;

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $d5 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double maxPermits>;

        $d3 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits>;

        $l3 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros>;

        $l4 = l0 - $l3;

        $d1 = (double) $l4;

        $d0 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double stableIntervalMicros>;

        $d2 = $d1 / $d0;

        $d4 = $d3 + $d2;

        $d6 = staticinvoke <java.lang.Math: double min(double,double)>($d5, $d4);

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: double storedPermits> = $d6;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: long nextFreeTicketMicros> = l0;

     label1:
        return;
    }

    void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$1)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter r0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r1;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$1 r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        r2 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$1;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch)>(r1);

        return;
    }
}
