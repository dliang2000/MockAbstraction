public final class org.apache.flink.api.common.typeutils.base.LocalDateComparator extends org.apache.flink.api.common.typeutils.TypeComparator implements java.io.Serializable
{
    private transient java.time.LocalDate reference;
    protected final boolean ascendingComparison;
    private final org.apache.flink.api.common.typeutils.base.LocalDateComparator[] comparators;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r1 = newarray (org.apache.flink.api.common.typeutils.base.LocalDateComparator)[1];

        $r1[0] = r0;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator[] comparators> = $r1;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison> = z0;

        return;
    }

    public int hash(java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        $i0 = virtualinvoke r1.<java.time.LocalDate: int hashCode()>();

        return $i0;
    }

    public void setReference(java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: java.time.LocalDate reference> = r1;

        return;
    }

    public boolean equalToReference(java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: java.time.LocalDate reference>;

        $z0 = virtualinvoke r1.<java.time.LocalDate: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0, $r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        int i0, $i1;
        java.time.LocalDate $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = (org.apache.flink.api.common.typeutils.base.LocalDateComparator) r1;

        $r4 = $r2.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: java.time.LocalDate reference>;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: java.time.LocalDate reference>;

        i0 = virtualinvoke $r4.<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>($r3);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(java.time.LocalDate, java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1, r2;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: java.time.LocalDate;

        i0 = virtualinvoke r1.<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>(r2);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        return 0;
    }

    public void writeWithKeyNormalization(java.time.LocalDate, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        org.apache.flink.api.common.typeutils.base.LocalDateComparator[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator[] comparators>;

        return $r1;
    }

    public java.time.LocalDate readWithKeyDenormalization(java.time.LocalDate, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison>;

        $i0 = staticinvoke <org.apache.flink.api.common.typeutils.base.LocalDateComparator: int compareSerializedLocalDate(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataInputView,boolean)>(r1, r2, $z0);

        return $i0;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        return 6;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.time.LocalDate, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.time.LocalDate r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        staticinvoke <org.apache.flink.api.common.typeutils.base.LocalDateComparator: void putNormalizedKeyLocalDate(java.time.LocalDate,org.apache.flink.core.memory.MemorySegment,int,int)>(r1, r2, i0, i1);

        return;
    }

    public org.apache.flink.api.common.typeutils.base.LocalDateComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public static int compareSerializedLocalDate(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView, boolean) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0, r1;
        boolean z0;
        int $i0, $i1, i6, $i7;
        byte $b2, $b3, $b4, $b5;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        z0 := @parameter2: boolean;

        $i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i6 = $i0 - $i1;

        if i6 != 0 goto label1;

        $b2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        i6 = $b2 - $b3;

        if i6 != 0 goto label1;

        $b4 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b5 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        i6 = $b4 - $b5;

     label1:
        if z0 == 0 goto label2;

        $i7 = i6;

        goto label3;

     label2:
        $i7 = neg i6;

     label3:
        return $i7;
    }

    public static void putNormalizedKeyLocalDate(java.time.LocalDate, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        java.time.LocalDate r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, i2, $i3, $i4, $i6, $i8, $i9, $i10, $i12, i13, i14, i15, i16, i17;
        byte $b5, $b7, $b11;

        r0 := @parameter0: java.time.LocalDate;

        r1 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i13 := @parameter2: int;

        i14 := @parameter3: int;

        i0 = virtualinvoke r0.<java.time.LocalDate: int getYear()>();

        i1 = i0 - -2147483648;

        if i14 < 4 goto label1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i13, i1);

        i14 = i14 + -4;

        i13 = i13 + 4;

        goto label4;

     label1:
        if i14 <= 0 goto label4;

        i15 = 0;

     label2:
        if i14 <= 0 goto label3;

        $i12 = i13 + i15;

        $i8 = 3 - i15;

        $i9 = $i8 << 3;

        $i10 = i1 >>> $i9;

        $b11 = (byte) $i10;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i12, $b11);

        i14 = i14 + -1;

        i15 = i15 + 1;

        goto label2;

     label3:
        return;

     label4:
        i16 = virtualinvoke r0.<java.time.LocalDate: int getMonthValue()>();

        if i14 <= 0 goto label5;

        $i6 = i16 & 383;

        $b7 = (byte) $i6;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i13, $b7);

        i14 = i14 + -1;

        i13 = i13 + 1;

     label5:
        i2 = virtualinvoke r0.<java.time.LocalDate: int getDayOfMonth()>();

        if i14 <= 0 goto label6;

        $i4 = i2 & 383;

        $b5 = (byte) $i4;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i13, $b5);

        i14 = i14 + -1;

        i13 = i13 + 1;

     label6:
        i17 = 0;

     label7:
        if i17 >= i14 goto label8;

        $i3 = i13 + i17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i3, 0);

        i17 = i17 + 1;

        goto label7;

     label8:
        return;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: org.apache.flink.api.common.typeutils.base.LocalDateComparator duplicate()>();

        return $r1;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.time.LocalDate $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.time.LocalDate) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: java.time.LocalDate readWithKeyDenormalization(java.time.LocalDate,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.time.LocalDate $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.time.LocalDate) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void writeWithKeyNormalization(java.time.LocalDate,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.time.LocalDate $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.time.LocalDate) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void putNormalizedKey(java.time.LocalDate,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1, r2;
        java.time.LocalDate $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.time.LocalDate) r1;

        $r3 = (java.time.LocalDate) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int compare(java.time.LocalDate,java.time.LocalDate)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        java.time.LocalDate $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDate) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: boolean equalToReference(java.time.LocalDate)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        java.time.LocalDate $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDate) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: void setReference(java.time.LocalDate)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateComparator r0;
        java.lang.Object r1;
        java.time.LocalDate $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDate) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateComparator: int hash(java.time.LocalDate)>($r2);

        return $i0;
    }
}
