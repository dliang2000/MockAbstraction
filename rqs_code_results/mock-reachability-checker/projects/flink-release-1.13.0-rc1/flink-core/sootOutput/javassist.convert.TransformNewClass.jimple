public final class javassist.convert.TransformNewClass extends javassist.convert.Transformer
{
    private int nested;
    private java.lang.String classname;
    private java.lang.String newClassName;
    private int newClassIndex;
    private int newMethodNTIndex;
    private int newMethodIndex;

    public void <init>(javassist.convert.Transformer, java.lang.String, java.lang.String)
    {
        javassist.convert.TransformNewClass r0;
        javassist.convert.Transformer r1;
        java.lang.String r2, r3;

        r0 := @this: javassist.convert.TransformNewClass;

        r1 := @parameter0: javassist.convert.Transformer;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<javassist.convert.Transformer: void <init>(javassist.convert.Transformer)>(r1);

        r0.<javassist.convert.TransformNewClass: java.lang.String classname> = r2;

        r0.<javassist.convert.TransformNewClass: java.lang.String newClassName> = r3;

        return;
    }

    public void initialize(javassist.bytecode.ConstPool, javassist.bytecode.CodeAttribute)
    {
        javassist.convert.TransformNewClass r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.CodeAttribute r2;

        r0 := @this: javassist.convert.TransformNewClass;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        r0.<javassist.convert.TransformNewClass: int nested> = 0;

        r0.<javassist.convert.TransformNewClass: int newMethodIndex> = 0;

        r0.<javassist.convert.TransformNewClass: int newMethodNTIndex> = 0;

        r0.<javassist.convert.TransformNewClass: int newClassIndex> = 0;

        return;
    }

    public int transform(javassist.CtClass, int, javassist.bytecode.CodeIterator, javassist.bytecode.ConstPool) throws javassist.CannotCompileException
    {
        javassist.convert.TransformNewClass r0;
        javassist.CtClass r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.ConstPool r3;
        java.lang.String $r4, $r6, $r7, $r8;
        boolean $z0;
        javassist.CannotCompileException $r10;

        r0 := @this: javassist.convert.TransformNewClass;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.CodeIterator;

        r3 := @parameter3: javassist.bytecode.ConstPool;

        i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        if i1 != 187 goto label3;

        $i13 = i0 + 1;

        i22 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i13);

        $r6 = virtualinvoke r3.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i22);

        $r7 = r0.<javassist.convert.TransformNewClass: java.lang.String classname>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        $i14 = i0 + 3;

        $i15 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int byteAt(int)>($i14);

        if $i15 == 89 goto label1;

        $r10 = new javassist.CannotCompileException;

        specialinvoke $r10.<javassist.CannotCompileException: void <init>(java.lang.String)>("NEW followed by no DUP was found");

        throw $r10;

     label1:
        $i16 = r0.<javassist.convert.TransformNewClass: int newClassIndex>;

        if $i16 != 0 goto label2;

        $r8 = r0.<javassist.convert.TransformNewClass: java.lang.String newClassName>;

        $i21 = virtualinvoke r3.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r8);

        r0.<javassist.convert.TransformNewClass: int newClassIndex> = $i21;

     label2:
        $i18 = r0.<javassist.convert.TransformNewClass: int newClassIndex>;

        $i17 = i0 + 1;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i18, $i17);

        $i19 = r0.<javassist.convert.TransformNewClass: int nested>;

        $i20 = $i19 + 1;

        r0.<javassist.convert.TransformNewClass: int nested> = $i20;

        goto label5;

     label3:
        if i1 != 183 goto label5;

        $i4 = i0 + 1;

        i23 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i4);

        $r4 = r0.<javassist.convert.TransformNewClass: java.lang.String classname>;

        i2 = virtualinvoke r3.<javassist.bytecode.ConstPool: int isConstructor(java.lang.String,int)>($r4, i23);

        if i2 == 0 goto label5;

        $i5 = r0.<javassist.convert.TransformNewClass: int nested>;

        if $i5 <= 0 goto label5;

        i3 = virtualinvoke r3.<javassist.bytecode.ConstPool: int getMethodrefNameAndType(int)>(i23);

        $i6 = r0.<javassist.convert.TransformNewClass: int newMethodNTIndex>;

        if $i6 == i3 goto label4;

        r0.<javassist.convert.TransformNewClass: int newMethodNTIndex> = i3;

        $i11 = r0.<javassist.convert.TransformNewClass: int newClassIndex>;

        $i12 = virtualinvoke r3.<javassist.bytecode.ConstPool: int addMethodrefInfo(int,int)>($i11, i3);

        r0.<javassist.convert.TransformNewClass: int newMethodIndex> = $i12;

     label4:
        $i8 = r0.<javassist.convert.TransformNewClass: int newMethodIndex>;

        $i7 = i0 + 1;

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void write16bit(int,int)>($i8, $i7);

        $i9 = r0.<javassist.convert.TransformNewClass: int nested>;

        $i10 = $i9 - 1;

        r0.<javassist.convert.TransformNewClass: int nested> = $i10;

     label5:
        return i0;
    }
}
