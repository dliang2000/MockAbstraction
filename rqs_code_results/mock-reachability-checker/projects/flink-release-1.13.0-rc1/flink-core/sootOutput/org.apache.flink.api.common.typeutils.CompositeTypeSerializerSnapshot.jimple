public abstract class org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int MAGIC_NUMBER;
    private static final int VERSION;
    private static final int HIGHEST_LEGACY_READ_VERSION;
    private org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate;
    private final java.lang.Class correspondingSerializerClass;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: java.lang.Class correspondingSerializerClass> = $r3;

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r4);

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate> = $r3;

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: java.lang.Class correspondingSerializerClass> = $r5;

        return;
    }

    public final int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        return 3;
    }

    public final void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void internalWriteOuterSnapshot(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate>;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void writeNestedSerializerSnapshots(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public final void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        if i0 <= 2 goto label1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void internalReadOuterSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        goto label2;

     label1:
        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void legacyInternalReadOuterSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(i0, r1, r2);

     label2:
        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate readNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate> = $r3;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()>();

        return $r2;
    }

    public final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()>();

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility internalResolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r3);

        return $r4;
    }

    org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility internalResolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r5;
        java.lang.Class $r6, $r7, $r8;
        java.lang.Object $r9;
        int $i0, $i1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r10, $r11, $r12;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: java.lang.Class correspondingSerializerClass>;

        if $r6 == $r7 goto label1;

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r12;

     label1:
        $r8 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: java.lang.Class correspondingSerializerClass>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r9;

        r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r3);

        r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)>(r3);

        $i1 = lengthof r5;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label2;

        $r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r11;

     label2:
        $r10 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility constructFinalSchemaCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>(r5, r2, r4);

        return $r10;
    }

    void setNestedSerializersSnapshotDelegate(org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate) $r2;

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate> = $r3;

        return;
    }

    public final org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSerializersSnapshotDelegate>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer[] getRestoredNestedSerializers()>();

        r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3);

        return r1;
    }

    protected abstract int getCurrentOuterSnapshotVersion();

    protected abstract org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer);

    protected abstract org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[]);

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        return;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        return;
    }

    protected boolean isOuterSnapshotCompatible(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        return 1;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        boolean $z0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: boolean isOuterSnapshotCompatible(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        if $z0 == 0 goto label1;

        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        goto label2;

     label1:
        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility INCOMPATIBLE>;

     label2:
        return $r2;
    }

    private void internalWriteOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(911108);

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: int getCurrentOuterSnapshotVersion()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    private void internalReadOuterSnapshot(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        int i0, i1;
        java.io.IOException $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.ClassLoader;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 == 911108 goto label1;

        $r3 = new java.io.IOException;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(911108);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Corrupt data, magic number mismatch. Expected %8x, found %8x", $r4);

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void readOuterSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(i1, r1, r2);

        return;
    }

    private void legacyInternalReadOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void readOuterSnapshot(int,org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(i0, r1, r2);

        return;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility constructFinalSchemaCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[], org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[], org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility r3, $r6, $r8;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7, $r9, $r10, $r12;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility;

        r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, r2);

        $r6 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility INCOMPATIBLE>;

        if r3 == $r6 goto label1;

        $z0 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        if $z0 == 0 goto label2;

     label1:
        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r7;

     label2:
        $r8 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AFTER_MIGRATION>;

        if r3 == $r8 goto label3;

        $z1 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        if $z1 == 0 goto label4;

     label3:
        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        return $r9;

     label4:
        $z2 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z2 == 0 goto label5;

        $r11 = virtualinvoke r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r11);

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>(r5);

        return $r12;

     label5:
        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: int HIGHEST_LEGACY_READ_VERSION> = 2;

        <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: int VERSION> = 3;

        <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: int MAGIC_NUMBER> = 911108;

        return;
    }
}
