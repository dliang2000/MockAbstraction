public class org.apache.flink.api.java.typeutils.runtime.EitherSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer;
    private final org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer> = r2;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getRightSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getLeftSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2, $r3, $r4, $r5, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        if $r5 != r1 goto label1;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        if $r7 == r2 goto label2;

     label1:
        $r6 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r2);

        return $r6;

     label2:
        return r0;
    }

    public org.apache.flink.types.Either createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        java.lang.Object $r2;
        org.apache.flink.types.Either $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        $r3 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r2);

        return $r3;
    }

    public org.apache.flink.types.Either copy(org.apache.flink.types.Either)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.types.Either r1, $r3, $r5;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2, $r4;
        java.lang.Object r6, r7, r8, r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.types.Either;

        $z0 = virtualinvoke r1.<org.apache.flink.types.Either: boolean isLeft()>();

        if $z0 == 0 goto label1;

        r6 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object left()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        r7 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r6);

        $r5 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>(r7);

        return $r5;

     label1:
        r8 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object right()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        r9 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r8);

        $r3 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>(r9);

        return $r3;
    }

    public org.apache.flink.types.Either copy(org.apache.flink.types.Either, org.apache.flink.types.Either)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.types.Either r1, r2;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4, $r7, $r8;
        java.lang.Object $r5, $r6, $r9, $r10, r12, r14;
        org.apache.flink.types.Either$Left r11;
        org.apache.flink.types.Either$Right r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.types.Either;

        r2 := @parameter1: org.apache.flink.types.Either;

        $z0 = virtualinvoke r1.<org.apache.flink.types.Either: boolean isLeft()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        r11 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either$Left obtainLeft(org.apache.flink.types.Either,org.apache.flink.api.common.typeutils.TypeSerializer)>(r2, $r7);

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $r9 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object left()>();

        $r10 = virtualinvoke r11.<org.apache.flink.types.Either$Left: java.lang.Object left()>();

        r12 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>($r9, $r10);

        virtualinvoke r11.<org.apache.flink.types.Either$Left: void setValue(java.lang.Object)>(r12);

        return r11;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        r13 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either$Right obtainRight(org.apache.flink.types.Either,org.apache.flink.api.common.typeutils.TypeSerializer)>(r2, $r3);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r5 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object right()>();

        $r6 = virtualinvoke r13.<org.apache.flink.types.Either$Right: java.lang.Object right()>();

        r14 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>($r5, $r6);

        virtualinvoke r13.<org.apache.flink.types.Either$Right: void setValue(java.lang.Object)>(r14);

        return r13;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        return -1;
    }

    public void serialize(org.apache.flink.types.Either, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.types.Either r1;
        org.apache.flink.core.memory.DataOutputView r2;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.types.Either;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $z0 = virtualinvoke r1.<org.apache.flink.types.Either: boolean isLeft()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $r6 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object left()>();

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r6, r2);

        goto label2;

     label1:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r4 = virtualinvoke r1.<org.apache.flink.types.Either: java.lang.Object right()>();

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r4, r2);

     label2:
        return;
    }

    public org.apache.flink.types.Either deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2, $r5;
        java.lang.Object $r3, $r6;
        org.apache.flink.types.Either $r4, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        $r7 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r6);

        return $r7;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        $r4 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r3);

        return $r4;
    }

    public org.apache.flink.types.Either deserialize(org.apache.flink.types.Either, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.types.Either r1;
        org.apache.flink.core.memory.DataInputView r2;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4, $r6, $r7;
        java.lang.Object $r5, $r8, r10, r12;
        org.apache.flink.types.Either$Left r9;
        org.apache.flink.types.Either$Right r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.types.Either;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        z0 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        r9 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either$Left obtainLeft(org.apache.flink.types.Either,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r6);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $r8 = virtualinvoke r9.<org.apache.flink.types.Either$Left: java.lang.Object left()>();

        r10 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r8, r2);

        virtualinvoke r9.<org.apache.flink.types.Either$Left: void setValue(java.lang.Object)>(r10);

        return r9;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        r11 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either$Right obtainRight(org.apache.flink.types.Either,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, $r3);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r5 = virtualinvoke r11.<org.apache.flink.types.Either$Right: java.lang.Object right()>();

        r12 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r5, r2);

        virtualinvoke r11.<org.apache.flink.types.Either$Right: void setValue(java.lang.Object)>(r12);

        return r11;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(z0);

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $z1 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $z2 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer leftSerializer>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        $i1 = 17 * $i0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.common.typeutils.TypeSerializer rightSerializer>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializer)>(r0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot snapshotConfiguration()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.Either $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.Either) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either deserialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.Either $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.Either $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.Either) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void serialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Either $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Either) r1;

        $r3 = (org.apache.flink.types.Either) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either copy(org.apache.flink.types.Either,org.apache.flink.types.Either)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.Either $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Either) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either copy(org.apache.flink.types.Either)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r0;
        org.apache.flink.types.Either $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either createInstance()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.EitherSerializer: long serialVersionUID> = 1L;

        return;
    }
}
