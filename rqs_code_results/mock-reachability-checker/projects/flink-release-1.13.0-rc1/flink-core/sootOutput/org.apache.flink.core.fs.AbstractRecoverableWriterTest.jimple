public abstract class org.apache.flink.core.fs.AbstractRecoverableWriterTest extends org.apache.flink.util.TestLogger
{
    private static final java.util.Random RND;
    private static final java.lang.String testData1;
    private static final java.lang.String testData2;
    private static final java.lang.String testData3;
    private org.apache.flink.core.fs.Path basePathForTest;
    private static org.apache.flink.core.fs.FileSystem fileSystem;
    private static final java.lang.String INIT_EMPTY_PERSIST;
    private static final java.lang.String INTERM_WITH_STATE_PERSIST;
    private static final java.lang.String INTERM_WITH_NO_ADDITIONAL_STATE_PERSIST;
    private static final java.lang.String FINAL_WITH_EXTRA_STATE;

    public void <init>()
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public abstract org.apache.flink.core.fs.Path getBasePath() throws java.lang.Exception;

    public abstract org.apache.flink.core.fs.FileSystem initializeFileSystem() throws java.lang.Exception;

    public org.apache.flink.core.fs.Path getBasePathForTest()
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path $r1;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        $r1 = r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path basePathForTest>;

        return $r1;
    }

    private org.apache.flink.core.fs.FileSystem getFileSystem() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.FileSystem $r1, $r2, $r3;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        $r1 = <org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem fileSystem>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem initializeFileSystem()>();

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem fileSystem> = $r3;

     label1:
        $r2 = <org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem fileSystem>;

        return $r2;
    }

    private org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.RecoverableWriter $r2;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        $r1 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.RecoverableWriter createRecoverableWriter()>();

        return $r2;
    }

    public void prepare() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path $r1, $r2, $r5;
        java.lang.String $r3;
        org.apache.flink.core.fs.FileSystem $r4;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        $r1 = new org.apache.flink.core.fs.Path;

        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePath()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String randomName()>();

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r2, $r3);

        r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path basePathForTest> = $r1;

        $r4 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r5 = r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path basePathForTest>;

        virtualinvoke $r4.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r5);

        return;
    }

    public void cleanup() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.FileSystem $r1;
        org.apache.flink.core.fs.Path $r2;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        $r1 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r2 = r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path basePathForTest>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r2, 1);

        return;
    }

    public void testCloseWithNoData() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.RecoverableWriter r1;
        org.apache.flink.core.fs.Path r2, $r5, $r13, $r19;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r4;
        java.util.Map $r6, $r9;
        java.util.Set $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r8;
        java.lang.Object $r11, $r12, $r15, $r17, $r18, $r21;
        java.lang.String $r14, $r16, $r20, $r22;
        java.util.Iterator r23, r25;
        java.util.Map$Entry r24, r26;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r2, "part-0");

        r4 = interfaceinvoke r1.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r5);

        $r6 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r2);

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r17 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (org.apache.flink.core.fs.Path) $r18;

        $r20 = virtualinvoke $r19.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>(".part-0.inprogress.");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r21 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (java.lang.String) $r21;

        $z4 = virtualinvoke $r22.<java.lang.String: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        goto label1;

     label2:
        $r8 = virtualinvoke r4.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r8.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commit()>();

        $r9 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r2);

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (org.apache.flink.core.fs.Path) $r12;

        $r14 = virtualinvoke $r13.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("part-0", $r14);

        $r15 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.lang.String) $r15;

        $z2 = virtualinvoke $r16.<java.lang.String: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        goto label3;

     label4:
        return;
    }

    public void testCommitAfterNormalClose() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.RecoverableWriter r1;
        org.apache.flink.core.fs.Path r2, $r7, $r16;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.nio.charset.Charset $r8;
        java.lang.String $r9, $r17;
        byte[] $r10;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r11;
        java.util.Map $r12;
        java.util.Set $r13;
        boolean $z0;
        java.lang.Object $r14, $r15, $r18;
        java.lang.Throwable $r19;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r20;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r2, "part-0");

        r20 = null;

     label1:
        r20 = interfaceinvoke r1.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r7);

        $r9 = "THIS IS A TEST 1.";

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        virtualinvoke r20.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r10);

        $r11 = virtualinvoke r20.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r11.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commit()>();

        $r12 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r2);

        $r13 = interfaceinvoke $r12.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (org.apache.flink.core.fs.Path) $r15;

        $r17 = virtualinvoke $r16.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("part-0", $r17);

        $r18 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("THIS IS A TEST 1.", $r18);

        goto label2;

     label3:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r20);

        goto label6;

     label4:
        $r19 := @caughtexception;

     label5:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r20);

        throw $r19;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void testCommitAfterPersist() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.RecoverableWriter r1;
        org.apache.flink.core.fs.Path r2, $r7, $r20;
        java.util.Iterator r4;
        java.util.Map$Entry r5;
        java.nio.charset.Charset $r8, $r12;
        java.lang.String $r9, $r13, $r21;
        byte[] $r10, $r14;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r15;
        java.util.Map $r16;
        java.util.Set $r17;
        boolean $z0;
        java.lang.Object $r18, $r19, $r22;
        java.lang.Throwable $r23;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r24;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r2, "part-0");

        r24 = null;

     label1:
        r24 = interfaceinvoke r1.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r7);

        $r9 = "THIS IS A TEST 1.";

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        virtualinvoke r24.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r10);

        virtualinvoke r24.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        $r13 = "THIS IS A TEST 2.";

        $r12 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        virtualinvoke r24.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r14);

        $r15 = virtualinvoke r24.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r15.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commit()>();

        $r16 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r2);

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (org.apache.flink.core.fs.Path) $r19;

        $r21 = virtualinvoke $r20.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("part-0", $r21);

        $r22 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("THIS IS A TEST 1.THIS IS A TEST 2.", $r22);

        goto label2;

     label3:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r24);

        goto label6;

     label4:
        $r23 := @caughtexception;

     label5:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r24);

        throw $r23;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void testRecoverWithEmptyState() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: void testResumeAfterMultiplePersist(java.lang.String,java.lang.String,java.lang.String)>("EMPTY", "", "THIS IS A TEST 3.");

        return;
    }

    public void testRecoverWithState() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: void testResumeAfterMultiplePersist(java.lang.String,java.lang.String,java.lang.String)>("INTERM-STATE", "THIS IS A TEST 1.", "THIS IS A TEST 1.THIS IS A TEST 3.");

        return;
    }

    public void testRecoverFromIntermWithoutAdditionalState() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: void testResumeAfterMultiplePersist(java.lang.String,java.lang.String,java.lang.String)>("INTERM-IMEDIATE", "THIS IS A TEST 1.", "THIS IS A TEST 1.THIS IS A TEST 3.");

        return;
    }

    public void testRecoverAfterMultiplePersistsState() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: void testResumeAfterMultiplePersist(java.lang.String,java.lang.String,java.lang.String)>("FINAL", "THIS IS A TEST 1.THIS IS A TEST 2.", "THIS IS A TEST 1.THIS IS A TEST 2.THIS IS A TEST 3.");

        return;
    }

    private void testResumeAfterMultiplePersist(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        java.lang.String r1, r2, r3, $r18, $r25, $r33, $r40, $r45;
        org.apache.flink.core.fs.Path r4, $r13, $r39, $r44;
        org.apache.flink.core.fs.RecoverableWriter r6, r9;
        byte[] r8, $r19, $r26, $r34;
        org.apache.flink.core.io.SimpleVersionedSerializer r10, r51;
        org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable r11, $r15, $r20, $r22, $r27;
        java.util.HashMap $r14;
        java.nio.charset.Charset $r17, $r24, $r32;
        java.lang.Object $r29, $r30, $r37, $r38, $r41, $r42, $r43, $r46;
        int $i0, $i1, $i3;
        long $l2, $l4;
        java.util.Set $r31, $r36;
        boolean $z0, $z1, $z2;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r35;
        java.lang.Throwable $r47, $r48;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r49, r52;
        java.util.Map r53, r56;
        java.util.Iterator r54, r57;
        java.util.Map$Entry r55, r58;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        $r13 = new org.apache.flink.core.fs.Path;

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r4, "part-0");

        r6 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>(int)>(4);

        r49 = null;

     label01:
        r49 = interfaceinvoke r6.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r13);

        $r15 = virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EMPTY", $r15);

        $r18 = "THIS IS A TEST 1.";

        $r17 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r19 = virtualinvoke $r18.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17);

        virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r19);

        $r20 = virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("INTERM-STATE", $r20);

        $r22 = virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("INTERM-IMEDIATE", $r22);

        $r25 = "THIS IS A TEST 2.";

        $r24 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r26 = virtualinvoke $r25.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r24);

        virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r26);

        $r27 = virtualinvoke r49.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("FINAL", $r27);

     label02:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r49);

        goto label05;

     label03:
        $r47 := @caughtexception;

     label04:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r49);

        throw $r47;

     label05:
        r51 = interfaceinvoke r6.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.io.SimpleVersionedSerializer getResumeRecoverableSerializer()>();

        $r29 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r8 = interfaceinvoke r51.<org.apache.flink.core.io.SimpleVersionedSerializer: byte[] serialize(java.lang.Object)>($r29);

        r9 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r10 = interfaceinvoke r9.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.io.SimpleVersionedSerializer getResumeRecoverableSerializer()>();

        $i0 = interfaceinvoke r51.<org.apache.flink.core.io.SimpleVersionedSerializer: int getVersion()>();

        $r30 = interfaceinvoke r10.<org.apache.flink.core.io.SimpleVersionedSerializer: java.lang.Object deserialize(int,byte[])>($i0, r8);

        r11 = (org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable) $r30;

        r52 = null;

     label06:
        r52 = interfaceinvoke r9.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream recover(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable)>(r11);

        r53 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r4);

        $i1 = interfaceinvoke r53.<java.util.Map: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l2);

        $r31 = interfaceinvoke r53.<java.util.Map: java.util.Set entrySet()>();

        r54 = interfaceinvoke $r31.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r42 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.util.Map$Entry) $r42;

        $r43 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r44 = (org.apache.flink.core.fs.Path) $r43;

        $r45 = virtualinvoke $r44.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        $z2 = virtualinvoke $r45.<java.lang.String: boolean startsWith(java.lang.String)>(".part-0.inprogress.");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r46 = interfaceinvoke r55.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, $r46);

        goto label07;

     label08:
        $r33 = "THIS IS A TEST 3.";

        $r32 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r34 = virtualinvoke $r33.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r32);

        virtualinvoke r52.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r34);

        $r35 = virtualinvoke r52.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r35.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commit()>();

        r56 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r4);

        $i3 = interfaceinvoke r56.<java.util.Map: int size()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l4);

        $r36 = interfaceinvoke r56.<java.util.Map: java.util.Set entrySet()>();

        r57 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r37 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (java.util.Map$Entry) $r37;

        $r38 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r39 = (org.apache.flink.core.fs.Path) $r38;

        $r40 = virtualinvoke $r39.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("part-0", $r40);

        $r41 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, $r41);

        goto label09;

     label10:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r52);

        goto label13;

     label11:
        $r48 := @caughtexception;

     label12:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r52);

        throw $r48;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void testCommitAfterRecovery() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path r1, $r12, $r27;
        org.apache.flink.core.fs.RecoverableWriter r3, r5;
        org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable r4, r7;
        org.apache.flink.core.io.SimpleVersionedSerializer r6, $r22;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer r8, $r21;
        java.util.Map r9;
        java.util.Iterator r10;
        java.util.Map$Entry r11;
        java.nio.charset.Charset $r13, $r18;
        java.lang.String $r14, $r19, $r28;
        byte[] $r15, $r20, r33;
        int $i0, $i1;
        java.lang.Object $r23, $r25, $r26, $r29;
        long $l2;
        java.util.Set $r24;
        boolean $z0;
        java.lang.Throwable $r30;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r31;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        $r12 = new org.apache.flink.core.fs.Path;

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, "part-0");

        r3 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r31 = null;

     label1:
        r31 = interfaceinvoke r3.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r12);

        $r14 = "THIS IS A TEST 1.";

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r15 = virtualinvoke $r14.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13);

        virtualinvoke r31.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r15);

        virtualinvoke r31.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        virtualinvoke r31.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        $r19 = "THIS IS A TEST 2.";

        $r18 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r18);

        virtualinvoke r31.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r20);

        $r21 = virtualinvoke r31.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        r4 = interfaceinvoke $r21.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable getRecoverable()>();

     label2:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r31);

        goto label5;

     label3:
        $r30 := @caughtexception;

     label4:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r31);

        throw $r30;

     label5:
        $r22 = interfaceinvoke r3.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.io.SimpleVersionedSerializer getCommitRecoverableSerializer()>();

        r33 = interfaceinvoke $r22.<org.apache.flink.core.io.SimpleVersionedSerializer: byte[] serialize(java.lang.Object)>(r4);

        r5 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        r6 = interfaceinvoke r5.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.io.SimpleVersionedSerializer getCommitRecoverableSerializer()>();

        $i0 = interfaceinvoke r6.<org.apache.flink.core.io.SimpleVersionedSerializer: int getVersion()>();

        $r23 = interfaceinvoke r6.<org.apache.flink.core.io.SimpleVersionedSerializer: java.lang.Object deserialize(int,byte[])>($i0, r33);

        r7 = (org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable) $r23;

        r8 = interfaceinvoke r5.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer recoverForCommit(org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable)>(r7);

        interfaceinvoke r8.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commitAfterRecovery()>();

        r9 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path)>(r1);

        $i1 = interfaceinvoke r9.<java.util.Map: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l2);

        $r24 = interfaceinvoke r9.<java.util.Map: java.util.Set entrySet()>();

        r10 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r25 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r25;

        $r26 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r27 = (org.apache.flink.core.fs.Path) $r26;

        $r28 = virtualinvoke $r27.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("part-0", $r28);

        $r29 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("THIS IS A TEST 1.THIS IS A TEST 2.", $r29);

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testExceptionWritingAfterCloseForCommit() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path r1, $r5;
        org.apache.flink.core.fs.RecoverableWriter r2;
        java.nio.charset.Charset $r6, $r11;
        java.lang.String $r7, $r12;
        byte[] $r8, $r13;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r9;
        java.lang.Throwable $r14;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r15;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        r2 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, "part-0");

        r15 = null;

     label1:
        r15 = interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r5);

        $r7 = "THIS IS A TEST 1.";

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        virtualinvoke r15.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r8);

        $r9 = virtualinvoke r15.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r9.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable getRecoverable()>();

        $r12 = "THIS IS A TEST 2.";

        $r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        virtualinvoke r15.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r13);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        goto label5;

     label3:
        $r14 := @caughtexception;

     label4:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r15);

        throw $r14;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testResumeAfterCommit() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path r1, $r6;
        org.apache.flink.core.fs.RecoverableWriter r2;
        org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable r4;
        java.nio.charset.Charset $r7, $r10;
        java.lang.String $r8, $r11;
        byte[] $r9, $r12;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer $r13;
        java.lang.Throwable $r15;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r16;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        r2 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, "part-0");

        r16 = null;

     label1:
        r16 = interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r6);

        $r8 = "THIS IS A TEST 1.";

        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7);

        virtualinvoke r16.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r9);

        r4 = virtualinvoke r16.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        $r11 = "THIS IS A TEST 2.";

        $r10 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10);

        virtualinvoke r16.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r12);

        $r13 = virtualinvoke r16.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer closeForCommit()>();

        interfaceinvoke $r13.<org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer: void commit()>();

     label2:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        goto label5;

     label3:
        $r15 := @caughtexception;

     label4:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        throw $r15;

     label5:
        interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream recover(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable)>(r4);

        staticinvoke <org.junit.Assert: void fail()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void testResumeWithWrongOffset() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path r1, $r8;
        org.apache.flink.core.fs.RecoverableWriter r2;
        org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable r4, r5;
        java.nio.charset.Charset $r9, $r12, $r15;
        java.lang.String $r10, $r13, $r16;
        byte[] $r11, $r14, $r17;
        java.io.IOException $r20;
        java.lang.Throwable $r21, $r22, $r24, $r25, r30;
        java.lang.Exception $r23;
        org.apache.flink.core.fs.RecoverableFsDataOutputStream r26, r28, r29;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.Path getBasePathForTest()>();

        r2 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.RecoverableWriter getNewFileSystemWriter()>();

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, "part-0");

        r26 = null;

     label01:
        r26 = interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream open(org.apache.flink.core.fs.Path)>($r8);

        $r10 = "THIS IS A TEST 1.";

        $r9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);

        virtualinvoke r26.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r11);

        r4 = virtualinvoke r26.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        $r13 = "THIS IS A TEST 2.";

        $r12 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        virtualinvoke r26.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r14);

        r5 = virtualinvoke r26.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable persist()>();

        $r16 = "THIS IS A TEST 3.";

        $r15 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r17 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        virtualinvoke r26.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void write(byte[])>($r17);

     label02:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r26);

        goto label05;

     label03:
        $r22 := @caughtexception;

     label04:
        staticinvoke <org.apache.flink.util.IOUtils: void closeQuietly(java.lang.AutoCloseable)>(r26);

        throw $r22;

     label05:
        r28 = interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream recover(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable)>(r4);

        if r28 == null goto label07;

        goto label06;

     label06:
        virtualinvoke r28.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r23 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label09:
        r29 = interfaceinvoke r2.<org.apache.flink.core.fs.RecoverableWriter: org.apache.flink.core.fs.RecoverableFsDataOutputStream recover(org.apache.flink.core.fs.RecoverableWriter$ResumeRecoverable)>(r5);

        r30 = null;

     label10:
        staticinvoke <org.junit.Assert: void fail()>();

     label11:
        if r29 == null goto label21;

        goto label12;

     label12:
        virtualinvoke r29.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void close()>();

        goto label21;

     label13:
        $r21 := @caughtexception;

        r30 = $r21;

        throw $r21;

     label14:
        $r25 := @caughtexception;

     label15:
        if r29 == null goto label20;

        if r30 == null goto label19;

     label16:
        virtualinvoke r29.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void close()>();

     label17:
        goto label20;

     label18:
        $r24 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

        goto label20;

     label19:
        virtualinvoke r29.<org.apache.flink.core.fs.RecoverableFsDataOutputStream: void close()>();

     label20:
        throw $r25;

     label21:
        goto label23;

     label22:
        $r20 := @caughtexception;

        return;

     label23:
        staticinvoke <org.junit.Assert: void fail()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Exception from label05 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
        catch java.io.IOException from label09 to label21 with label22;
    }

    private java.util.Map getFileContentByPath(org.apache.flink.core.fs.Path) throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractRecoverableWriterTest r0;
        org.apache.flink.core.fs.Path r1, $r11, $r12;
        org.apache.flink.core.fs.FileStatus[] r3;
        int i0, $i2, i4;
        org.apache.flink.core.fs.FileStatus r5;
        long l1;
        byte[] r6;
        org.apache.flink.core.fs.FSDataInputStream r7;
        java.util.HashMap $r8;
        org.apache.flink.core.fs.FileSystem $r9, $r10;
        java.lang.String $r13;
        java.nio.charset.Charset $r14;

        r0 := @this: org.apache.flink.core.fs.AbstractRecoverableWriterTest;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r9 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r3 = virtualinvoke $r9.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path)>(r1);

        i0 = lengthof r3;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r5 = r3[i4];

        l1 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: long getLen()>();

        $i2 = (int) l1;

        r6 = newarray (byte)[$i2];

        $r10 = specialinvoke r0.<org.apache.flink.core.fs.AbstractRecoverableWriterTest: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r11 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        r7 = virtualinvoke $r10.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r11);

        virtualinvoke r7.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[])>(r6);

        $r12 = interfaceinvoke r5.<org.apache.flink.core.fs.FileStatus: org.apache.flink.core.fs.Path getPath()>();

        $r13 = new java.lang.String;

        $r14 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r13.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r6, $r14);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r8;
    }

    private static java.lang.String randomName()
    {
        java.util.Random $r0;
        java.lang.String $r1;

        $r0 = <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Random RND>;

        $r1 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r0, 16, 16, 97, 122);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String FINAL_WITH_EXTRA_STATE> = "FINAL";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String INTERM_WITH_NO_ADDITIONAL_STATE_PERSIST> = "INTERM-IMEDIATE";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String INTERM_WITH_STATE_PERSIST> = "INTERM-STATE";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String INIT_EMPTY_PERSIST> = "EMPTY";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String testData3> = "THIS IS A TEST 3.";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String testData2> = "THIS IS A TEST 2.";

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.lang.String testData1> = "THIS IS A TEST 1.";

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.flink.core.fs.AbstractRecoverableWriterTest: java.util.Random RND> = $r0;

        return;
    }
}
