public interface  org.apache.flink.util.concurrent.FutureConsumerWithException extends java.lang.Object implements java.util.function.Consumer
{

    public abstract void acceptWithException(java.lang.Object) throws java.lang.Throwable;

    public void accept(java.lang.Object)
    {
        org.apache.flink.util.concurrent.FutureConsumerWithException r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        java.util.concurrent.CompletionException $r4;

        r0 := @this: org.apache.flink.util.concurrent.FutureConsumerWithException;

        r1 := @parameter0: java.lang.Object;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.concurrent.FutureConsumerWithException: void acceptWithException(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.util.concurrent.CompletionException;

        specialinvoke $r4.<java.util.concurrent.CompletionException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
