public final class org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private static final int VERSION;
    private java.lang.Class tupleClass;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/TupleSerializer;");

        return;
    }

    void <init>(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r1;
        java.lang.Class $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        $r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: java.lang.Class getTupleClass()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r2, "tuple class can not be NULL");

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass> = $r4;

        return;
    }

    void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/TupleSerializer;");

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "tuple class can not be NULL");

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass> = $r3;

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        return 2;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        return $r2;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        java.lang.Class $r2, $r4;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "tuple class can not be NULL");

        $r3 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass>;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r4, r1);

        return $r3;
    }

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "tuple class can not be NULL");

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r4);

        return;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: java.lang.Class tupleClass> = $r3;

        return;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.TupleSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.TupleSerializer)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.TupleSerializerSnapshot: int VERSION> = 2;

        return;
    }
}
