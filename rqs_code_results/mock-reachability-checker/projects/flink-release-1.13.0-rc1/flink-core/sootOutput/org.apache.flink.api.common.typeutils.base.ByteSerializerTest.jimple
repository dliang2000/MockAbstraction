public class org.apache.flink.api.common.typeutils.base.ByteSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.ByteSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.ByteSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.ByteSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        return 1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        return class "Ljava/lang/Byte;";
    }

    protected java.lang.Byte[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;
        byte[] r2;
        java.util.Random $r3;
        java.lang.Byte[] $r4;
        java.lang.Byte $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        $r3 = new java.util.Random;

        specialinvoke $r3.<java.util.Random: void <init>(long)>(874597969123412341L);

        r2 = newarray (byte)[1];

        virtualinvoke $r3.<java.util.Random: void nextBytes(byte[])>(r2);

        $r4 = newarray (java.lang.Byte)[7];

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-1);

        $r4[2] = $r7;

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(127);

        $r4[3] = $r8;

        $r9 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(-128);

        $r4[4] = $r9;

        $b0 = r2[0];

        $r10 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        $r4[5] = $r10;

        $b1 = r2[0];

        $b2 = neg $b1;

        $b3 = (byte) $b2;

        $r11 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r4[6] = $r11;

        return $r4;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.ByteSerializerTest r0;
        java.lang.Byte[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.ByteSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.ByteSerializerTest: java.lang.Byte[] getTestData()>();

        return $r1;
    }
}
