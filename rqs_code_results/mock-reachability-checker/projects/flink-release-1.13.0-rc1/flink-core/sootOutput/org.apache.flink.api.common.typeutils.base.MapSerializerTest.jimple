public class org.apache.flink.api.common.typeutils.base.MapSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r1;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r2;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r3 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r2 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r3, $r2);

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        return -1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        return class "Ljava/util/Map;";
    }

    protected java.util.Map[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;
        java.util.Map r2, r5, r39;
        java.util.Random $r11;
        java.util.HashMap $r12, $r15, $r21, $r24;
        java.util.TreeMap $r13, $r18, $r22, $r27;
        java.lang.Long $r14, $r16, $r19, $r23, $r25, $r28, $r32, $r35;
        int $i0, $i1, i6, i7;
        java.util.Map[] $r30, $r31;
        long $l2, $l3, $l4, $l5;
        java.lang.String $r33, $r36;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        $r11 = new java.util.Random;

        specialinvoke $r11.<java.util.Random: void <init>(long)>(123654789L);

        r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        $r13 = new java.util.TreeMap;

        specialinvoke $r13.<java.util.TreeMap: void <init>()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        r5 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r14, "hello");

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(12345L);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "12345L");

        $r18 = new java.util.TreeMap;

        specialinvoke $r18.<java.util.TreeMap: void <init>()>();

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(777888L);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, "777888L");

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        i6 = 0;

     label1:
        $i0 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>(200);

        if i6 >= $i0 goto label2;

        $l4 = virtualinvoke $r11.<java.util.Random: long nextLong()>();

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $l5 = virtualinvoke $r11.<java.util.Random: long nextLong()>();

        $r36 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l5);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r36);

        i6 = i6 + 1;

        goto label1;

     label2:
        $r22 = new java.util.TreeMap;

        specialinvoke $r22.<java.util.TreeMap: void <init>()>();

        i7 = 0;

     label3:
        $i1 = virtualinvoke $r11.<java.util.Random: int nextInt(int)>(200);

        if i7 >= $i1 goto label4;

        $l2 = virtualinvoke $r11.<java.util.Random: long nextLong()>();

        $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $l3 = virtualinvoke $r11.<java.util.Random: long nextLong()>();

        $r33 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l3);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r33);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        r39 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r23, null);

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(999L);

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, null);

        $r27 = new java.util.TreeMap;

        specialinvoke $r27.<java.util.TreeMap: void <init>()>();

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(666L);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, null);

        $r30 = newarray (java.util.Map)[11];

        $r30[0] = r2;

        $r30[1] = $r12;

        $r30[2] = $r13;

        $r30[3] = r5;

        $r30[4] = $r15;

        $r30[5] = $r18;

        $r30[6] = $r21;

        $r30[7] = $r22;

        $r30[8] = r39;

        $r30[9] = $r24;

        $r30[10] = $r27;

        $r31 = (java.util.Map[]) $r30;

        return $r31;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerTest r0;
        java.util.Map[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializerTest: java.util.Map[] getTestData()>();

        return $r1;
    }
}
