public class org.apache.logging.log4j.message.SimpleMessage extends java.lang.Object implements org.apache.logging.log4j.message.Message, org.apache.logging.log4j.util.StringBuilderFormattable, java.lang.CharSequence
{
    private static final long serialVersionUID;
    private java.lang.String message;
    private transient java.lang.CharSequence charSequence;

    public void <init>()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        specialinvoke r0.<org.apache.logging.log4j.message.SimpleMessage: void <init>(java.lang.String)>(null);

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message> = r1;

        r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence> = r1;

        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.CharSequence r1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence> = r1;

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.String $r1, $r4;
        java.lang.CharSequence $r2;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r4 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

     label2:
        r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message> = $r4;

        return $r4;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2;
        java.lang.CharSequence $r5;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

        if $r2 == null goto label1;

        $r5 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

        goto label2;

     label1:
        $r5 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        return;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

        return $r1;
    }

    public java.lang.Object[] getParameters()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        return null;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.message.SimpleMessage r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.CharSequence $r5, $r6, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.logging.log4j.message.SimpleMessage) r1;

        $r5 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        if $r5 == null goto label4;

        $r8 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $r7 = r2.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        goto label6;

     label4:
        $r6 = r2.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        if $r6 != null goto label6;

     label5:
        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.CharSequence $r1, $r2;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String getFormattedMessage()>();

        return $r1;
    }

    public java.lang.Throwable getThrowable()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        return null;
    }

    public int length()
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.lang.CharSequence $r1, $r2;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

     label2:
        return $i0;
    }

    public char charAt(int)
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        int i0;
        java.lang.CharSequence $r1;
        char $c1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i0);

        return $c1;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        int i0, i1;
        java.lang.CharSequence $r1, $r2;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence>;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String getFormattedMessage()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.logging.log4j.message.SimpleMessage r0;
        java.io.ObjectInputStream r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.message.SimpleMessage;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.String message>;

        r0.<org.apache.logging.log4j.message.SimpleMessage: java.lang.CharSequence charSequence> = $r2;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.message.SimpleMessage: long serialVersionUID> = -8398002534962715992L;

        return;
    }
}
