public class org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit extends java.lang.Object implements org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit
{
    private final java.lang.String splitId;
    private final long 'from';
    private final long 'to';

    public void <init>(java.lang.String, long, long)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        java.lang.String r1, $r3;
        long l0, l1;
        byte $b2;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b2 = l0 cmp l1;

        if $b2 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "\'from\' must be <= \'to\'");

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId> = $r3;

        r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'from'> = l0;

        r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'to'> = l1;

        return;
    }

    public java.lang.String splitId()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId>;

        return $r1;
    }

    public long 'from'()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        long $l0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'from'>;

        return $l0;
    }

    public long 'to'()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        long $l0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'to'>;

        return $l0;
    }

    public org.apache.flink.util.NumberSequenceIterator getIterator()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        org.apache.flink.util.NumberSequenceIterator $r1;
        long $l0, $l1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r1 = new org.apache.flink.util.NumberSequenceIterator;

        $l1 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'from'>;

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'to'>;

        specialinvoke $r1.<org.apache.flink.util.NumberSequenceIterator: void <init>(long,long)>($l1, $l0);

        return $r1;
    }

    public org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit getUpdatedSplitForIterator(org.apache.flink.util.NumberSequenceIterator)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0, $r2;
        org.apache.flink.util.NumberSequenceIterator r1;
        java.lang.String $r3;
        long $l0, $l1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        r1 := @parameter0: org.apache.flink.util.NumberSequenceIterator;

        $r2 = new org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r3 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId>;

        $l0 = virtualinvoke r1.<org.apache.flink.util.NumberSequenceIterator: long getCurrent()>();

        $l1 = virtualinvoke r1.<org.apache.flink.util.NumberSequenceIterator: long getTo()>();

        specialinvoke $r2.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: void <init>(java.lang.String,long,long)>($r3, $l0, $l1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        java.lang.Object[] $r1;
        long $l0, $l1;
        java.lang.Long $r2, $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r1 = newarray (java.lang.Object)[3];

        $l0 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'from'>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[0] = $r2;

        $l1 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: long 'to'>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[1] = $r3;

        $r4 = r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: java.lang.String splitId>;

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("NumberSequenceSplit [%d, %d] (%s)", $r1);

        return $r5;
    }

    public volatile org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit getUpdatedSplitForIterator(java.util.Iterator)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        java.util.Iterator r1;
        org.apache.flink.util.NumberSequenceIterator $r2;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        r1 := @parameter0: java.util.Iterator;

        $r2 = (org.apache.flink.util.NumberSequenceIterator) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit getUpdatedSplitForIterator(org.apache.flink.util.NumberSequenceIterator)>($r2);

        return $r3;
    }

    public volatile java.util.Iterator getIterator()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r0;
        org.apache.flink.util.NumberSequenceIterator $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit;

        $r1 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit: org.apache.flink.util.NumberSequenceIterator getIterator()>();

        return $r1;
    }
}
