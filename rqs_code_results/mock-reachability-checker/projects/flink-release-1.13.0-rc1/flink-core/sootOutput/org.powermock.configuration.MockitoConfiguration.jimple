public class org.powermock.configuration.MockitoConfiguration extends java.lang.Object implements org.powermock.configuration.Configuration
{
    private java.lang.String mockMakerClass;

    public void <init>()
    {
        org.powermock.configuration.MockitoConfiguration r0;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void <init>(java.lang.String)
    {
        org.powermock.configuration.MockitoConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.configuration.MockitoConfiguration: java.lang.String mockMakerClass> = r1;

        return;
    }

    public java.lang.String getMockMakerClass()
    {
        org.powermock.configuration.MockitoConfiguration r0;
        java.lang.String $r1;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        $r1 = r0.<org.powermock.configuration.MockitoConfiguration: java.lang.String mockMakerClass>;

        return $r1;
    }

    public void setMockMakerClass(java.lang.String)
    {
        org.powermock.configuration.MockitoConfiguration r0;
        java.lang.String r1;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        r1 := @parameter0: java.lang.String;

        r0.<org.powermock.configuration.MockitoConfiguration: java.lang.String mockMakerClass> = r1;

        return;
    }

    public org.powermock.configuration.MockitoConfiguration merge(org.powermock.configuration.MockitoConfiguration)
    {
        org.powermock.configuration.MockitoConfiguration r0, r1, $r3;
        java.lang.String $r2, $r4;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        r1 := @parameter0: org.powermock.configuration.MockitoConfiguration;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<org.powermock.configuration.MockitoConfiguration: java.lang.String getMockMakerClass()>();

        if $r2 == null goto label1;

        $r3 = new org.powermock.configuration.MockitoConfiguration;

        $r4 = virtualinvoke r1.<org.powermock.configuration.MockitoConfiguration: java.lang.String getMockMakerClass()>();

        specialinvoke $r3.<org.powermock.configuration.MockitoConfiguration: void <init>(java.lang.String)>($r4);

        return $r3;

     label1:
        return r0;
    }

    public volatile org.powermock.configuration.Configuration merge(org.powermock.configuration.Configuration)
    {
        org.powermock.configuration.MockitoConfiguration r0, $r2, $r3;
        org.powermock.configuration.Configuration r1;

        r0 := @this: org.powermock.configuration.MockitoConfiguration;

        r1 := @parameter0: org.powermock.configuration.Configuration;

        $r2 = (org.powermock.configuration.MockitoConfiguration) r1;

        $r3 = virtualinvoke r0.<org.powermock.configuration.MockitoConfiguration: org.powermock.configuration.MockitoConfiguration merge(org.powermock.configuration.MockitoConfiguration)>($r2);

        return $r3;
    }
}
