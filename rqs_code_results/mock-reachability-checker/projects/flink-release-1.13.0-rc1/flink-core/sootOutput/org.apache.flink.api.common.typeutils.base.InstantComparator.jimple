public final class org.apache.flink.api.common.typeutils.base.InstantComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;
    private static final long SECONDS_MIN_VALUE;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        long l0, l1;
        int i2, i3;
        byte $b4, $b5, $b6, b7, $b8, $b9;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        l0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        l1 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: long readLong()>();

        $b4 = l0 cmp l1;

        if $b4 != 0 goto label4;

        i2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i3 = interfaceinvoke r2.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i2 >= i3 goto label1;

        $b6 = -1;

        goto label3;

     label1:
        if i2 != i3 goto label2;

        $b6 = 0;

        goto label3;

     label2:
        $b6 = 1;

     label3:
        b7 = $b6;

        goto label7;

     label4:
        $b5 = l0 cmp l1;

        if $b5 >= 0 goto label5;

        $b8 = -1;

        goto label6;

     label5:
        $b8 = 1;

     label6:
        b7 = $b8;

     label7:
        $z0 = r0.<org.apache.flink.api.common.typeutils.base.InstantComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label8;

        $b9 = b7;

        goto label9;

     label8:
        $b9 = neg b7;

     label9:
        return $b9;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        return 1;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        return 12;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(java.time.Instant, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;
        java.time.Instant r1;
        org.apache.flink.core.memory.MemorySegment r2;
        long l1, $l2, $l3, $l6;
        int $i4, $i5, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, i17, i18, i19, i20, i22, i23, i24, i25, i26, i27;
        byte $b8, $b13;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        r1 := @parameter0: java.time.Instant;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i17 := @parameter2: int;

        i18 := @parameter3: int;

        $l2 = virtualinvoke r1.<java.time.Instant: long getEpochSecond()>();

        $l3 = <org.apache.flink.api.common.typeutils.base.InstantComparator: long SECONDS_MIN_VALUE>;

        l1 = $l2 - $l3;

        if i18 < 8 goto label6;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void putLongBigEndian(int,long)>(i17, l1);

        i19 = i17 + 8;

        i20 = i18 + -8;

        if i20 < 4 goto label3;

        $i15 = virtualinvoke r1.<java.time.Instant: int getNano()>();

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i19, $i15);

        i22 = i19 + 4;

        i23 = i20 + -4;

        i24 = 0;

     label1:
        if i24 >= i23 goto label2;

        $i16 = i22 + i24;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i16, 0);

        i24 = i24 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        i25 = virtualinvoke r1.<java.time.Instant: int getNano()>();

        i26 = 0;

     label4:
        if i26 >= i20 goto label5;

        $i14 = i19 + i26;

        $i10 = 3 - i26;

        $i11 = $i10 << 3;

        $i12 = i25 >>> $i11;

        $b13 = (byte) $i12;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i14, $b13);

        i26 = i26 + 1;

        goto label4;

     label5:
        goto label8;

     label6:
        i27 = 0;

     label7:
        if i27 >= i18 goto label8;

        $i9 = i17 + i27;

        $i4 = 7 - i27;

        $i5 = $i4 << 3;

        $l6 = l1 >>> $i5;

        $i7 = (int) $l6;

        $b8 = (byte) $i7;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i9, $b8);

        i27 = i27 + 1;

        goto label7;

     label8:
        return;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.InstantComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.InstantComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.InstantComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.InstantComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.time.Instant $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.InstantComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.time.Instant) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.InstantComparator: void putNormalizedKey(java.time.Instant,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    static void <clinit>()
    {
        java.time.Instant $r0;
        long $l0;

        <org.apache.flink.api.common.typeutils.base.InstantComparator: long serialVersionUID> = 1L;

        $r0 = <java.time.Instant: java.time.Instant MIN>;

        $l0 = virtualinvoke $r0.<java.time.Instant: long getEpochSecond()>();

        <org.apache.flink.api.common.typeutils.base.InstantComparator: long SECONDS_MIN_VALUE> = $l0;

        return;
    }
}
