abstract class org.powermock.core.classloader.DeferSupportingClassLoader extends java.lang.ClassLoader
{
    private final java.util.concurrent.ConcurrentMap classes;
    private final java.util.concurrent.ConcurrentMap parallelLockMap;
    private final org.powermock.core.classloader.MockClassLoaderConfiguration configuration;
    java.lang.ClassLoader deferTo;

    void <init>(java.lang.ClassLoader, org.powermock.core.classloader.MockClassLoaderConfiguration)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.ClassLoader r1, $r5;
        org.powermock.core.classloader.MockClassLoaderConfiguration r2;
        java.util.concurrent.ConcurrentHashMap $r3, $r4;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.powermock.core.classloader.MockClassLoaderConfiguration;

        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();

        r0.<org.powermock.core.classloader.DeferSupportingClassLoader: org.powermock.core.classloader.MockClassLoaderConfiguration configuration> = r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap classes> = $r3;

        if r1 != null goto label1;

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo> = $r5;

        goto label2;

     label1:
        r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo> = r1;

     label2:
        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap parallelLockMap> = $r4;

        return;
    }

    public java.net.URL getResource(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        java.net.URL $r3;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        return $r3;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2;
        java.io.InputStream $r3;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.ClassLoader $r2, $r3, $r5;
        boolean $z0;
        java.util.Enumeration $r4, $r6;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r3 = virtualinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader getParent()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r5 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r6;

     label1:
        $r4 = specialinvoke r0.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        return $r4;
    }

    public org.powermock.core.classloader.MockClassLoaderConfiguration getConfiguration()
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r1;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        $r1 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: org.powermock.core.classloader.MockClassLoaderConfiguration configuration>;

        return $r1;
    }

    public void cache(java.lang.Class)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.Class r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.String $r3;
        java.lang.ref.SoftReference $r4;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.Class;

        if r1 == null goto label1;

        $r2 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap classes>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = new java.lang.ref.SoftReference;

        specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r1);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label1:
        return;
    }

    protected abstract java.lang.Class loadClassByThisClassLoader(java.lang.String) throws java.lang.ClassFormatError, java.lang.ClassNotFoundException;

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object $r4;
        java.lang.Throwable $r6;
        java.lang.Class r7;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r4 = virtualinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Object getClassLoadingLock(java.lang.String)>(r1);

        entermonitor $r4;

     label1:
        r7 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Class findLoadedClass1(java.lang.String)>(r1);

        if r7 != null goto label2;

        r7 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Class loadClass1(java.lang.String,boolean)>(r1, z0);

     label2:
        exitmonitor $r4;

     label3:
        return r7;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.lang.Object getClassLoadingLock(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentMap $r3, $r5;
        java.lang.Object $r4, r6;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        r6 = r0;

        $r3 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap parallelLockMap>;

        if $r3 == null goto label1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r5 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap parallelLockMap>;

        r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4);

        if r6 != null goto label1;

        r6 = $r4;

     label1:
        return r6;
    }

    protected java.net.URL findResource(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.Object[] $r3;
        java.lang.ClassLoader $r4;
        java.lang.Object $r5;
        java.net.URL $r6;
        java.lang.Exception $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r5 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>($r4, "findResource", $r3);

        $r6 = (java.net.URL) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.util.Enumeration findResources(java.lang.String) throws java.io.IOException
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.Object[] $r3;
        java.lang.ClassLoader $r4;
        java.lang.Object $r5;
        java.util.Enumeration $r6;
        java.lang.Exception $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

     label1:
        $r4 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        $r5 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[])>($r4, "findResources", $r3);

        $r6 = (java.util.Enumeration) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.Class loadClass1(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.ref.SoftReference $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Class r5;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: boolean shouldDefer(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        r5 = specialinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Class loadByDeferClassLoader(java.lang.String)>(r1);

        goto label2;

     label1:
        r5 = virtualinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Class loadClassByThisClassLoader(java.lang.String)>(r1);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: void resolveClass(java.lang.Class)>(r5);

     label3:
        $r3 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap classes>;

        $r2 = new java.lang.ref.SoftReference;

        specialinvoke $r2.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r5);

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r5;
    }

    private java.lang.Class loadByDeferClassLoader(java.lang.String) throws java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.ClassLoader $r3;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.ClassLoader deferTo>;

        r2 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return r2;
    }

    private boolean shouldDefer(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r2;
        boolean $z0;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: org.powermock.core.classloader.MockClassLoaderConfiguration configuration>;

        $z0 = virtualinvoke $r2.<org.powermock.core.classloader.MockClassLoaderConfiguration: boolean shouldDefer(java.lang.String)>(r1);

        return $z0;
    }

    private java.lang.Class findLoadedClass1(java.lang.String)
    {
        org.powermock.core.classloader.DeferSupportingClassLoader r0;
        java.lang.String r1;
        java.lang.ref.SoftReference r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4, $r5;
        java.lang.Class r6;

        r0 := @this: org.powermock.core.classloader.DeferSupportingClassLoader;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.util.concurrent.ConcurrentMap classes>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.ref.SoftReference) $r4;

        r6 = null;

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r6 = (java.lang.Class) $r5;

     label1:
        if r6 != null goto label2;

        r6 = virtualinvoke r0.<org.powermock.core.classloader.DeferSupportingClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

     label2:
        return r6;
    }
}
