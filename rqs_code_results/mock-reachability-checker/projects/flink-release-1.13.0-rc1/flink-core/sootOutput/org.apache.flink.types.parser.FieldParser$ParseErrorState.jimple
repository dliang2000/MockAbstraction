public final enum class org.apache.flink.types.parser.FieldParser$ParseErrorState extends java.lang.Enum
{
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState NONE;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState UNTERMINATED_QUOTED_STRING;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState UNQUOTED_CHARS_AFTER_QUOTED_STRING;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN;
    public static final enum org.apache.flink.types.parser.FieldParser$ParseErrorState BOOLEAN_INVALID;
    private static final org.apache.flink.types.parser.FieldParser$ParseErrorState[] $VALUES;

    public static org.apache.flink.types.parser.FieldParser$ParseErrorState[] values()
    {
        org.apache.flink.types.parser.FieldParser$ParseErrorState[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.types.parser.FieldParser$ParseErrorState[]) $r1;

        return $r2;
    }

    public static org.apache.flink.types.parser.FieldParser$ParseErrorState valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/types/parser/FieldParser$ParseErrorState;", r0);

        $r2 = (org.apache.flink.types.parser.FieldParser$ParseErrorState) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.apache.flink.types.parser.FieldParser$ParseErrorState r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.flink.types.parser.FieldParser$ParseErrorState;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        org.apache.flink.types.parser.FieldParser$ParseErrorState[] $r9;

        $r0 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r0.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("NONE", 0);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NONE> = $r0;

        $r1 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r1.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("NUMERIC_VALUE_OVERFLOW_UNDERFLOW", 1);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW> = $r1;

        $r2 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r2.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("NUMERIC_VALUE_ORPHAN_SIGN", 2);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN> = $r2;

        $r3 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r3.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("NUMERIC_VALUE_ILLEGAL_CHARACTER", 3);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER> = $r3;

        $r4 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r4.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("NUMERIC_VALUE_FORMAT_ERROR", 4);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR> = $r4;

        $r5 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r5.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("UNTERMINATED_QUOTED_STRING", 5);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNTERMINATED_QUOTED_STRING> = $r5;

        $r6 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r6.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("UNQUOTED_CHARS_AFTER_QUOTED_STRING", 6);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNQUOTED_CHARS_AFTER_QUOTED_STRING> = $r6;

        $r7 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r7.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("EMPTY_COLUMN", 7);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN> = $r7;

        $r8 = new org.apache.flink.types.parser.FieldParser$ParseErrorState;

        specialinvoke $r8.<org.apache.flink.types.parser.FieldParser$ParseErrorState: void <init>(java.lang.String,int)>("BOOLEAN_INVALID", 8);

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState BOOLEAN_INVALID> = $r8;

        $r9 = newarray (org.apache.flink.types.parser.FieldParser$ParseErrorState)[9];

        $r10 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NONE>;

        $r9[0] = $r10;

        $r11 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW>;

        $r9[1] = $r11;

        $r12 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN>;

        $r9[2] = $r12;

        $r13 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        $r9[3] = $r13;

        $r14 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR>;

        $r9[4] = $r14;

        $r15 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNTERMINATED_QUOTED_STRING>;

        $r9[5] = $r15;

        $r16 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState UNQUOTED_CHARS_AFTER_QUOTED_STRING>;

        $r9[6] = $r16;

        $r17 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        $r9[7] = $r17;

        $r18 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState BOOLEAN_INVALID>;

        $r9[8] = $r18;

        <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState[] $VALUES> = $r9;

        return;
    }
}
