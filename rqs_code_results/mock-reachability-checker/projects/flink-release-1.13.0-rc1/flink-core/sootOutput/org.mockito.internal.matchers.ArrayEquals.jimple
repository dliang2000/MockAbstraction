public class org.mockito.internal.matchers.ArrayEquals extends org.mockito.internal.matchers.Equals
{

    public void <init>(java.lang.Object)
    {
        org.mockito.internal.matchers.ArrayEquals r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.matchers.ArrayEquals;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.mockito.internal.matchers.Equals: void <init>(java.lang.Object)>(r1);

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.mockito.internal.matchers.ArrayEquals r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27;
        java.lang.Object[] $r3, $r4;
        short[] $r5, $r6;
        long[] $r7, $r8;
        int[] $r9, $r10;
        float[] $r11, $r12;
        double[] $r13, $r14;
        char[] $r15, $r16;
        byte[] $r17, $r18;
        boolean[] $r19, $r20;

        r0 := @this: org.mockito.internal.matchers.ArrayEquals;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<org.mockito.internal.matchers.ArrayEquals: java.lang.Object getWanted()>();

        if r2 == null goto label01;

        if r1 != null goto label02;

     label01:
        $z0 = specialinvoke r0.<org.mockito.internal.matchers.Equals: boolean matches(java.lang.Object)>(r1);

        return $z0;

     label02:
        $z1 = r2 instanceof boolean[];

        if $z1 == 0 goto label03;

        $z26 = r1 instanceof boolean[];

        if $z26 == 0 goto label03;

        $r20 = (boolean[]) r2;

        $r19 = (boolean[]) r1;

        $z27 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r20, $r19);

        return $z27;

     label03:
        $z2 = r2 instanceof byte[];

        if $z2 == 0 goto label04;

        $z24 = r1 instanceof byte[];

        if $z24 == 0 goto label04;

        $r18 = (byte[]) r2;

        $r17 = (byte[]) r1;

        $z25 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r18, $r17);

        return $z25;

     label04:
        $z3 = r2 instanceof char[];

        if $z3 == 0 goto label05;

        $z22 = r1 instanceof char[];

        if $z22 == 0 goto label05;

        $r16 = (char[]) r2;

        $r15 = (char[]) r1;

        $z23 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r16, $r15);

        return $z23;

     label05:
        $z4 = r2 instanceof double[];

        if $z4 == 0 goto label06;

        $z20 = r1 instanceof double[];

        if $z20 == 0 goto label06;

        $r14 = (double[]) r2;

        $r13 = (double[]) r1;

        $z21 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r14, $r13);

        return $z21;

     label06:
        $z5 = r2 instanceof float[];

        if $z5 == 0 goto label07;

        $z18 = r1 instanceof float[];

        if $z18 == 0 goto label07;

        $r12 = (float[]) r2;

        $r11 = (float[]) r1;

        $z19 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r12, $r11);

        return $z19;

     label07:
        $z6 = r2 instanceof int[];

        if $z6 == 0 goto label08;

        $z16 = r1 instanceof int[];

        if $z16 == 0 goto label08;

        $r10 = (int[]) r2;

        $r9 = (int[]) r1;

        $z17 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r10, $r9);

        return $z17;

     label08:
        $z7 = r2 instanceof long[];

        if $z7 == 0 goto label09;

        $z14 = r1 instanceof long[];

        if $z14 == 0 goto label09;

        $r8 = (long[]) r2;

        $r7 = (long[]) r1;

        $z15 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r8, $r7);

        return $z15;

     label09:
        $z8 = r2 instanceof short[];

        if $z8 == 0 goto label10;

        $z12 = r1 instanceof short[];

        if $z12 == 0 goto label10;

        $r6 = (short[]) r2;

        $r5 = (short[]) r1;

        $z13 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r5);

        return $z13;

     label10:
        $z9 = r2 instanceof java.lang.Object[];

        if $z9 == 0 goto label11;

        $z10 = r1 instanceof java.lang.Object[];

        if $z10 == 0 goto label11;

        $r4 = (java.lang.Object[]) r2;

        $r3 = (java.lang.Object[]) r1;

        $z11 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        return $z11;

     label11:
        return 0;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.matchers.ArrayEquals r0;
        java.lang.Object $r1, $r3, $r5;
        java.lang.String $r2, $r7;
        java.lang.Class $r4;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @this: org.mockito.internal.matchers.ArrayEquals;

        $r1 = virtualinvoke r0.<org.mockito.internal.matchers.ArrayEquals: java.lang.Object getWanted()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke r0.<org.mockito.internal.matchers.ArrayEquals: java.lang.Object getWanted()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<org.mockito.internal.matchers.ArrayEquals: java.lang.Object getWanted()>();

        $r6 = staticinvoke <org.mockito.internal.matchers.ArrayEquals: java.lang.Object[] createObjectArray(java.lang.Object)>($r5);

        $r7 = specialinvoke r0.<org.mockito.internal.matchers.ArrayEquals: java.lang.String appendArray(java.lang.Object[])>($r6);

        return $r7;

     label1:
        $r2 = specialinvoke r0.<org.mockito.internal.matchers.Equals: java.lang.String toString()>();

        return $r2;
    }

    private java.lang.String appendArray(java.lang.Object[])
    {
        org.mockito.internal.matchers.ArrayEquals r0;
        java.lang.Object[] r1;
        java.lang.StringBuilder $r3;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5, $r8;
        org.mockito.internal.matchers.Equals $r6;
        java.lang.Object $r7;

        r0 := @this: org.mockito.internal.matchers.ArrayEquals;

        r1 := @parameter0: java.lang.Object[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r6 = new org.mockito.internal.matchers.Equals;

        $r7 = r1[i3];

        specialinvoke $r6.<org.mockito.internal.matchers.Equals: void <init>(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r6.<org.mockito.internal.matchers.Equals: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i3 == $i2 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.Object[] createObjectArray(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        java.lang.Object[] r1, $r3;
        boolean $z0;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Object[];

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Object[]) r0;

        return $r3;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        r1 = newarray (java.lang.Object)[$i0];

        i2 = 0;

     label2:
        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if i2 >= $i1 goto label3;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i2);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }
}
