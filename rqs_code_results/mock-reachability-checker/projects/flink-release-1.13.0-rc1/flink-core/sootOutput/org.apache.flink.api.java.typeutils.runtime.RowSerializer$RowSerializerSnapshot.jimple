public final class org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private static final int VERSION;
    private static final int LAST_VERSION_WITHOUT_ROW_KIND;
    private int readVersion;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/RowSerializer;");

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int readVersion> = 3;

        return;
    }

    void <init>(org.apache.flink.api.java.typeutils.runtime.RowSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int readVersion> = 3;

        return;
    }

    protected int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        return 3;
    }

    protected void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int readVersion> = i0;

        return;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.RowSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r1;
        int $i0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int readVersion>;

        if $i0 > 2 goto label1;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AFTER_MIGRATION>;

        return $r3;

     label1:
        $r2 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        return $r2;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.RowSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] access$000(org.apache.flink.api.java.typeutils.runtime.RowSerializer)>(r1);

        return $r2;
    }

    protected org.apache.flink.api.java.typeutils.runtime.RowSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = new org.apache.flink.api.java.typeutils.runtime.RowSerializer;

        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int readVersion>;

        if $i0 > 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.RowSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,boolean)>(r1, null, $z0);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.RowSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.java.typeutils.runtime.RowSerializer)>($r2);

        return $r3;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.RowSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.RowSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.RowSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.java.typeutils.runtime.RowSerializer)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int LAST_VERSION_WITHOUT_ROW_KIND> = 2;

        <org.apache.flink.api.java.typeutils.runtime.RowSerializer$RowSerializerSnapshot: int VERSION> = 3;

        return;
    }
}
