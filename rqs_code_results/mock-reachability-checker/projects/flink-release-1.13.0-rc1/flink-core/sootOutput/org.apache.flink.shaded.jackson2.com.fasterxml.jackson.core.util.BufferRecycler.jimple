public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler extends java.lang.Object
{
    public static final int BYTE_READ_IO_BUFFER;
    public static final int BYTE_WRITE_ENCODING_BUFFER;
    public static final int BYTE_WRITE_CONCAT_BUFFER;
    public static final int BYTE_BASE64_CODEC_BUFFER;
    public static final int CHAR_TOKEN_BUFFER;
    public static final int CHAR_CONCAT_BUFFER;
    public static final int CHAR_TEXT_BUFFER;
    public static final int CHAR_NAME_COPY_BUFFER;
    private static final int[] BYTE_BUFFER_LENGTHS;
    private static final int[] CHAR_BUFFER_LENGTHS;
    protected final java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers;
    protected final java.util.concurrent.atomic.AtomicReferenceArray _charBuffers;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: void <init>(int,int)>(4, 4);

        return;
    }

    protected void <init>(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0, i1;
        java.util.concurrent.atomic.AtomicReferenceArray $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReferenceArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers> = $r2;

        return;
    }

    public final byte[] allocByteBuffer(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        byte[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int,int)>(i0, 0);

        return $r1;
    }

    public byte[] allocByteBuffer(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0, i1, $i2, i3;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        java.lang.Object $r2;
        byte[] r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int byteBufferLength(int)>(i0);

        if i3 >= i1 goto label1;

        i3 = i1;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>(i0, null);

        r3 = (byte[]) $r2;

        if r3 == null goto label2;

        $i2 = lengthof r3;

        if $i2 >= i3 goto label3;

     label2:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: byte[] balloc(int)>(i3);

     label3:
        return r3;
    }

    public void releaseByteBuffer(int, byte[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        byte[] r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i0, r1);

        return;
    }

    public final char[] allocCharBuffer(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        char[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int,int)>(i0, 0);

        return $r1;
    }

    public char[] allocCharBuffer(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0, i1, $i2, i3;
        java.util.concurrent.atomic.AtomicReferenceArray $r1;
        java.lang.Object $r2;
        char[] r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int charBufferLength(int)>(i0);

        if i3 >= i1 goto label1;

        i3 = i1;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>(i0, null);

        r3 = (char[]) $r2;

        if r3 == null goto label2;

        $i2 = lengthof r3;

        if $i2 >= i3 goto label3;

     label2:
        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: char[] calloc(int)>(i3);

     label3:
        return r3;
    }

    public void releaseCharBuffer(int, char[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        char[] r1;
        java.util.concurrent.atomic.AtomicReferenceArray $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(i0, r1);

        return;
    }

    protected int byteBufferLength(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int[] BYTE_BUFFER_LENGTHS>;

        $i1 = $r1[i0];

        return $i1;
    }

    protected int charBufferLength(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int[] CHAR_BUFFER_LENGTHS>;

        $i1 = $r1[i0];

        return $i1;
    }

    protected byte[] balloc(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        byte[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[i0];

        return $r1;
    }

    protected char[] calloc(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler r0;
        int i0;
        char[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler;

        i0 := @parameter0: int;

        $r1 = newarray (char)[i0];

        return $r1;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int CHAR_NAME_COPY_BUFFER> = 3;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int CHAR_TEXT_BUFFER> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int CHAR_CONCAT_BUFFER> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int CHAR_TOKEN_BUFFER> = 0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int BYTE_BASE64_CODEC_BUFFER> = 3;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int BYTE_WRITE_CONCAT_BUFFER> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int BYTE_WRITE_ENCODING_BUFFER> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int BYTE_READ_IO_BUFFER> = 0;

        $r0 = newarray (int)[4];

        $r0[0] = 8000;

        $r0[1] = 8000;

        $r0[2] = 2000;

        $r0[3] = 2000;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int[] BYTE_BUFFER_LENGTHS> = $r0;

        $r1 = newarray (int)[4];

        $r1[0] = 4000;

        $r1[1] = 4000;

        $r1[2] = 200;

        $r1[3] = 200;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.BufferRecycler: int[] CHAR_BUFFER_LENGTHS> = $r1;

        return;
    }
}
