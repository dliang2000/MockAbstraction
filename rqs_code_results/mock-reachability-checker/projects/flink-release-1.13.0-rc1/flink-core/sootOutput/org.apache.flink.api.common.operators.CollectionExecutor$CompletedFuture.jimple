final class org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture extends java.lang.Object implements java.util.concurrent.Future
{
    private final org.apache.flink.core.fs.Path result;

    public void <init>(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        org.apache.flink.core.fs.Path r1, $r4, $r11;
        java.net.URI $r2, $r5;
        org.apache.flink.core.fs.FileSystem $r3;
        boolean $z0;
        java.lang.String $r6;
        java.lang.Exception $r8;
        java.lang.RuntimeException $r9;
        org.apache.flink.core.fs.local.LocalFileSystem r10;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getUnguardedFileSystem(java.net.URI)>($r2);

        r10 = (org.apache.flink.core.fs.local.LocalFileSystem) $r3;

        $z0 = virtualinvoke r1.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        if $z0 == 0 goto label2;

        $r11 = new org.apache.flink.core.fs.Path;

        $r5 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getPath()>();

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r6);

        goto label3;

     label2:
        $r11 = new org.apache.flink.core.fs.Path;

        $r4 = virtualinvoke r10.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r4, r1);

     label3:
        r0.<org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture: org.apache.flink.core.fs.Path result> = $r11;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("DistributedCache supports only local files for Collection Environments");

        throw $r9;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public boolean cancel(boolean)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        z0 := @parameter0: boolean;

        return 0;
    }

    public boolean isCancelled()
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        return 0;
    }

    public boolean isDone()
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        return 1;
    }

    public org.apache.flink.core.fs.Path get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        org.apache.flink.core.fs.Path $r1;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        $r1 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture: org.apache.flink.core.fs.Path result>;

        return $r1;
    }

    public org.apache.flink.core.fs.Path get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        org.apache.flink.core.fs.Path $r2;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture: org.apache.flink.core.fs.Path get()>();

        return $r2;
    }

    public volatile java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        org.apache.flink.core.fs.Path $r2;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture: org.apache.flink.core.fs.Path get(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r2;
    }

    public volatile java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture r0;
        org.apache.flink.core.fs.Path $r1;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.CollectionExecutor$CompletedFuture: org.apache.flink.core.fs.Path get()>();

        return $r1;
    }
}
