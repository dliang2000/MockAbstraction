public final enum class org.apache.flink.util.OperatingSystem extends java.lang.Enum
{
    public static final enum org.apache.flink.util.OperatingSystem LINUX;
    public static final enum org.apache.flink.util.OperatingSystem WINDOWS;
    public static final enum org.apache.flink.util.OperatingSystem MAC_OS;
    public static final enum org.apache.flink.util.OperatingSystem FREE_BSD;
    public static final enum org.apache.flink.util.OperatingSystem SOLARIS;
    public static final enum org.apache.flink.util.OperatingSystem UNKNOWN;
    private static final org.apache.flink.util.OperatingSystem os;
    private static final java.lang.String OS_KEY;
    private static final java.lang.String LINUX_OS_PREFIX;
    private static final java.lang.String WINDOWS_OS_PREFIX;
    private static final java.lang.String MAC_OS_PREFIX;
    private static final java.lang.String FREEBSD_OS_PREFIX;
    private static final java.lang.String SOLARIS_OS_INFIX_1;
    private static final java.lang.String SOLARIS_OS_INFIX_2;
    private static final org.apache.flink.util.OperatingSystem[] $VALUES;

    public static org.apache.flink.util.OperatingSystem[] values()
    {
        org.apache.flink.util.OperatingSystem[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.util.OperatingSystem[]) $r1;

        return $r2;
    }

    public static org.apache.flink.util.OperatingSystem valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.util.OperatingSystem $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/util/OperatingSystem;", r0);

        $r2 = (org.apache.flink.util.OperatingSystem) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.apache.flink.util.OperatingSystem r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.flink.util.OperatingSystem;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()
    {
        org.apache.flink.util.OperatingSystem $r0;

        $r0 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem os>;

        return $r0;
    }

    public static boolean isWindows()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()>();

        $r1 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem WINDOWS>;

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isLinux()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()>();

        $r1 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem LINUX>;

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isMac()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()>();

        $r1 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem MAC_OS>;

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isFreeBSD()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()>();

        $r1 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem FREE_BSD>;

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isSolaris()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1;
        boolean $z0;

        $r0 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem getCurrentOperatingSystem()>();

        $r1 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem SOLARIS>;

        if $r0 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static org.apache.flink.util.OperatingSystem readOSFromSystemProperties()
    {
        java.lang.String r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.util.OperatingSystem $r2, $r3, $r4, $r5, $r6, $r7;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("Linux");

        if $z0 == 0 goto label1;

        $r7 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem LINUX>;

        return $r7;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        if $z1 == 0 goto label2;

        $r6 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem WINDOWS>;

        return $r6;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("Mac");

        if $z2 == 0 goto label3;

        $r5 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem MAC_OS>;

        return $r5;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("FreeBSD");

        if $z3 == 0 goto label4;

        $r4 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem FREE_BSD>;

        return $r4;

     label4:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z4 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("sunos");

        if $z4 != 0 goto label5;

        $z5 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("solaris");

        if $z5 == 0 goto label6;

     label5:
        $r2 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem SOLARIS>;

        return $r2;

     label6:
        $r3 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem UNKNOWN>;

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.flink.util.OperatingSystem $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.apache.flink.util.OperatingSystem[] $r6;

        <org.apache.flink.util.OperatingSystem: java.lang.String SOLARIS_OS_INFIX_2> = "solaris";

        <org.apache.flink.util.OperatingSystem: java.lang.String SOLARIS_OS_INFIX_1> = "sunos";

        <org.apache.flink.util.OperatingSystem: java.lang.String FREEBSD_OS_PREFIX> = "FreeBSD";

        <org.apache.flink.util.OperatingSystem: java.lang.String MAC_OS_PREFIX> = "Mac";

        <org.apache.flink.util.OperatingSystem: java.lang.String WINDOWS_OS_PREFIX> = "Windows";

        <org.apache.flink.util.OperatingSystem: java.lang.String LINUX_OS_PREFIX> = "Linux";

        <org.apache.flink.util.OperatingSystem: java.lang.String OS_KEY> = "os.name";

        $r0 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r0.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("LINUX", 0);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem LINUX> = $r0;

        $r1 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r1.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("WINDOWS", 1);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem WINDOWS> = $r1;

        $r2 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r2.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("MAC_OS", 2);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem MAC_OS> = $r2;

        $r3 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r3.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("FREE_BSD", 3);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem FREE_BSD> = $r3;

        $r4 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r4.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("SOLARIS", 4);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem SOLARIS> = $r4;

        $r5 = new org.apache.flink.util.OperatingSystem;

        specialinvoke $r5.<org.apache.flink.util.OperatingSystem: void <init>(java.lang.String,int)>("UNKNOWN", 5);

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem UNKNOWN> = $r5;

        $r6 = newarray (org.apache.flink.util.OperatingSystem)[6];

        $r7 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem LINUX>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem WINDOWS>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem MAC_OS>;

        $r6[2] = $r9;

        $r10 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem FREE_BSD>;

        $r6[3] = $r10;

        $r11 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem SOLARIS>;

        $r6[4] = $r11;

        $r12 = <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem UNKNOWN>;

        $r6[5] = $r12;

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem[] $VALUES> = $r6;

        $r13 = staticinvoke <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem readOSFromSystemProperties()>();

        <org.apache.flink.util.OperatingSystem: org.apache.flink.util.OperatingSystem os> = $r13;

        return;
    }
}
