public final class org.joda.time.Minutes extends org.joda.time.base.BaseSingleFieldPeriod
{
    public static final org.joda.time.Minutes ZERO;
    public static final org.joda.time.Minutes ONE;
    public static final org.joda.time.Minutes TWO;
    public static final org.joda.time.Minutes THREE;
    public static final org.joda.time.Minutes MAX_VALUE;
    public static final org.joda.time.Minutes MIN_VALUE;
    private static final org.joda.time.format.PeriodFormatter PARSER;
    private static final long serialVersionUID;

    public static org.joda.time.Minutes minutes(int)
    {
        int i0;
        org.joda.time.Minutes $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case -2147483648: goto label6;
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 2147483647: goto label5;
            default: goto label7;
        };

     label1:
        $r4 = <org.joda.time.Minutes: org.joda.time.Minutes ZERO>;

        return $r4;

     label2:
        $r3 = <org.joda.time.Minutes: org.joda.time.Minutes ONE>;

        return $r3;

     label3:
        $r2 = <org.joda.time.Minutes: org.joda.time.Minutes TWO>;

        return $r2;

     label4:
        $r1 = <org.joda.time.Minutes: org.joda.time.Minutes THREE>;

        return $r1;

     label5:
        $r0 = <org.joda.time.Minutes: org.joda.time.Minutes MAX_VALUE>;

        return $r0;

     label6:
        $r5 = <org.joda.time.Minutes: org.joda.time.Minutes MIN_VALUE>;

        return $r5;

     label7:
        $r6 = new org.joda.time.Minutes;

        specialinvoke $r6.<org.joda.time.Minutes: void <init>(int)>(i0);

        return $r6;
    }

    public static org.joda.time.Minutes minutesBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.ReadableInstant r0, r1;
        int i0;
        org.joda.time.DurationFieldType $r2;
        org.joda.time.Minutes $r3;

        r0 := @parameter0: org.joda.time.ReadableInstant;

        r1 := @parameter1: org.joda.time.ReadableInstant;

        $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>(r0, r1, $r2);

        $r3 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>(i0);

        return $r3;
    }

    public static org.joda.time.Minutes minutesBetween(org.joda.time.ReadablePartial, org.joda.time.ReadablePartial)
    {
        org.joda.time.ReadablePartial r0, r1;
        int i0, i3;
        boolean $z0, $z1;
        org.joda.time.Minutes $r2, $r3, $r8;
        org.joda.time.Chronology $r4, r9;
        org.joda.time.DurationField $r5;
        org.joda.time.LocalTime $r6, $r7;
        long $l1, $l2;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        r1 := @parameter1: org.joda.time.ReadablePartial;

        $z0 = r0 instanceof org.joda.time.LocalTime;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.joda.time.LocalTime;

        if $z1 == 0 goto label1;

        $r4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        r9 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r4);

        $r5 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>();

        $r6 = (org.joda.time.LocalTime) r1;

        $l1 = virtualinvoke $r6.<org.joda.time.LocalTime: long getLocalMillis()>();

        $r7 = (org.joda.time.LocalTime) r0;

        $l2 = virtualinvoke $r7.<org.joda.time.LocalTime: long getLocalMillis()>();

        i0 = virtualinvoke $r5.<org.joda.time.DurationField: int getDifference(long,long)>($l1, $l2);

        $r8 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>(i0);

        return $r8;

     label1:
        $r2 = <org.joda.time.Minutes: org.joda.time.Minutes ZERO>;

        i3 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadablePartial,org.joda.time.ReadablePartial,org.joda.time.ReadablePeriod)>(r0, r1, $r2);

        $r3 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>(i3);

        return $r3;
    }

    public static org.joda.time.Minutes minutesIn(org.joda.time.ReadableInterval)
    {
        org.joda.time.ReadableInterval r0;
        int i0;
        org.joda.time.DateTime $r1, $r2;
        org.joda.time.DurationFieldType $r3;
        org.joda.time.Minutes $r4, $r5;

        r0 := @parameter0: org.joda.time.ReadableInterval;

        if r0 != null goto label1;

        $r5 = <org.joda.time.Minutes: org.joda.time.Minutes ZERO>;

        return $r5;

     label1:
        $r1 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>();

        $r2 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getEnd()>();

        $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int between(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant,org.joda.time.DurationFieldType)>($r1, $r2, $r3);

        $r4 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>(i0);

        return $r4;
    }

    public static org.joda.time.Minutes standardMinutesIn(org.joda.time.ReadablePeriod)
    {
        org.joda.time.ReadablePeriod r0;
        int i0;
        org.joda.time.Minutes $r1;

        r0 := @parameter0: org.joda.time.ReadablePeriod;

        i0 = staticinvoke <org.joda.time.base.BaseSingleFieldPeriod: int standardPeriodIn(org.joda.time.ReadablePeriod,long)>(r0, 60000L);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>(i0);

        return $r1;
    }

    public static org.joda.time.Minutes parseMinutes(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.Period r1;
        org.joda.time.format.PeriodFormatter $r2;
        int $i0;
        org.joda.time.Minutes $r3, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r4 = <org.joda.time.Minutes: org.joda.time.Minutes ZERO>;

        return $r4;

     label1:
        $r2 = <org.joda.time.Minutes: org.joda.time.format.PeriodFormatter PARSER>;

        r1 = virtualinvoke $r2.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0);

        $i0 = virtualinvoke r1.<org.joda.time.Period: int getMinutes()>();

        $r3 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i0);

        return $r3;
    }

    private void <init>(int)
    {
        org.joda.time.Minutes r0;
        int i0;

        r0 := @this: org.joda.time.Minutes;

        i0 := @parameter0: int;

        specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: void <init>(int)>(i0);

        return;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.Minutes r0, $r1;
        int $i0;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i0);

        return $r1;
    }

    public org.joda.time.DurationFieldType getFieldType()
    {
        org.joda.time.Minutes r0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.Minutes;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();

        return $r1;
    }

    public org.joda.time.PeriodType getPeriodType()
    {
        org.joda.time.Minutes r0;
        org.joda.time.PeriodType $r1;

        r0 := @this: org.joda.time.Minutes;

        $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>();

        return $r1;
    }

    public org.joda.time.Weeks toStandardWeeks()
    {
        org.joda.time.Minutes r0;
        int $i0, $i1;
        org.joda.time.Weeks $r1;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = $i0 / 10080;

        $r1 = staticinvoke <org.joda.time.Weeks: org.joda.time.Weeks weeks(int)>($i1);

        return $r1;
    }

    public org.joda.time.Days toStandardDays()
    {
        org.joda.time.Minutes r0;
        int $i0, $i1;
        org.joda.time.Days $r1;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = $i0 / 1440;

        $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i1);

        return $r1;
    }

    public org.joda.time.Hours toStandardHours()
    {
        org.joda.time.Minutes r0;
        int $i0, $i1;
        org.joda.time.Hours $r1;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = $i0 / 60;

        $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i1);

        return $r1;
    }

    public org.joda.time.Seconds toStandardSeconds()
    {
        org.joda.time.Minutes r0;
        int $i0, $i1;
        org.joda.time.Seconds $r1;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 60);

        $r1 = staticinvoke <org.joda.time.Seconds: org.joda.time.Seconds seconds(int)>($i1);

        return $r1;
    }

    public org.joda.time.Duration toStandardDuration()
    {
        org.joda.time.Minutes r0;
        long l0, $l2;
        int $i1;
        org.joda.time.Duration $r1;

        r0 := @this: org.joda.time.Minutes;

        $i1 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        l0 = (long) $i1;

        $r1 = new org.joda.time.Duration;

        $l2 = l0 * 60000L;

        specialinvoke $r1.<org.joda.time.Duration: void <init>(long)>($l2);

        return $r1;
    }

    public int getMinutes()
    {
        org.joda.time.Minutes r0;
        int $i0;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        return $i0;
    }

    public org.joda.time.Minutes plus(int)
    {
        org.joda.time.Minutes r0, $r1;
        int i0, $i1, $i2;

        r0 := @this: org.joda.time.Minutes;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i2);

        return $r1;
    }

    public org.joda.time.Minutes plus(org.joda.time.Minutes)
    {
        org.joda.time.Minutes r0, r1, $r2;
        int $i0;

        r0 := @this: org.joda.time.Minutes;

        r1 := @parameter0: org.joda.time.Minutes;

        if r1 != null goto label1;

        return r0;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.Minutes: int getValue()>();

        $r2 = virtualinvoke r0.<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>($i0);

        return $r2;
    }

    public org.joda.time.Minutes minus(int)
    {
        org.joda.time.Minutes r0, $r1;
        int i0, $i1;

        r0 := @this: org.joda.time.Minutes;

        i0 := @parameter0: int;

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r1 = virtualinvoke r0.<org.joda.time.Minutes: org.joda.time.Minutes plus(int)>($i1);

        return $r1;
    }

    public org.joda.time.Minutes minus(org.joda.time.Minutes)
    {
        org.joda.time.Minutes r0, r1, $r2;
        int $i0;

        r0 := @this: org.joda.time.Minutes;

        r1 := @parameter0: org.joda.time.Minutes;

        if r1 != null goto label1;

        return r0;

     label1:
        $i0 = virtualinvoke r1.<org.joda.time.Minutes: int getValue()>();

        $r2 = virtualinvoke r0.<org.joda.time.Minutes: org.joda.time.Minutes minus(int)>($i0);

        return $r2;
    }

    public org.joda.time.Minutes multipliedBy(int)
    {
        org.joda.time.Minutes r0, $r1;
        int i0, $i1, $i2;

        r0 := @this: org.joda.time.Minutes;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, i0);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i2);

        return $r1;
    }

    public org.joda.time.Minutes dividedBy(int)
    {
        org.joda.time.Minutes r0, $r1;
        int i0, $i1, $i2;

        r0 := @this: org.joda.time.Minutes;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i2 = $i1 / i0;

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i2);

        return $r1;
    }

    public org.joda.time.Minutes negated()
    {
        org.joda.time.Minutes r0, $r1;
        int $i0, $i1;

        r0 := @this: org.joda.time.Minutes;

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>($i0);

        $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i1);

        return $r1;
    }

    public boolean isGreaterThan(org.joda.time.Minutes)
    {
        org.joda.time.Minutes r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.Minutes;

        r1 := @parameter0: org.joda.time.Minutes;

        if r1 != null goto label3;

        $i2 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = virtualinvoke r1.<org.joda.time.Minutes: int getValue()>();

        if $i0 <= $i1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public boolean isLessThan(org.joda.time.Minutes)
    {
        org.joda.time.Minutes r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.Minutes;

        r1 := @parameter0: org.joda.time.Minutes;

        if r1 != null goto label3;

        $i2 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        if $i2 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $i1 = virtualinvoke r1.<org.joda.time.Minutes: int getValue()>();

        if $i0 >= $i1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    public java.lang.String toString()
    {
        org.joda.time.Minutes r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        int $i0;
        java.lang.String $r3, $r6;

        r0 := @this: org.joda.time.Minutes;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PT");

        $i0 = virtualinvoke r0.<org.joda.time.Minutes: int getValue()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("M");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    static void <clinit>()
    {
        org.joda.time.Minutes $r0, $r1, $r2, $r3, $r4, $r5;
        org.joda.time.format.PeriodFormatter $r6, $r8;
        org.joda.time.PeriodType $r7;

        <org.joda.time.Minutes: long serialVersionUID> = 87525275727380863L;

        $r0 = new org.joda.time.Minutes;

        specialinvoke $r0.<org.joda.time.Minutes: void <init>(int)>(0);

        <org.joda.time.Minutes: org.joda.time.Minutes ZERO> = $r0;

        $r1 = new org.joda.time.Minutes;

        specialinvoke $r1.<org.joda.time.Minutes: void <init>(int)>(1);

        <org.joda.time.Minutes: org.joda.time.Minutes ONE> = $r1;

        $r2 = new org.joda.time.Minutes;

        specialinvoke $r2.<org.joda.time.Minutes: void <init>(int)>(2);

        <org.joda.time.Minutes: org.joda.time.Minutes TWO> = $r2;

        $r3 = new org.joda.time.Minutes;

        specialinvoke $r3.<org.joda.time.Minutes: void <init>(int)>(3);

        <org.joda.time.Minutes: org.joda.time.Minutes THREE> = $r3;

        $r4 = new org.joda.time.Minutes;

        specialinvoke $r4.<org.joda.time.Minutes: void <init>(int)>(2147483647);

        <org.joda.time.Minutes: org.joda.time.Minutes MAX_VALUE> = $r4;

        $r5 = new org.joda.time.Minutes;

        specialinvoke $r5.<org.joda.time.Minutes: void <init>(int)>(-2147483648);

        <org.joda.time.Minutes: org.joda.time.Minutes MIN_VALUE> = $r5;

        $r6 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>();

        $r7 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>();

        $r8 = virtualinvoke $r6.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r7);

        <org.joda.time.Minutes: org.joda.time.format.PeriodFormatter PARSER> = $r8;

        return;
    }
}
