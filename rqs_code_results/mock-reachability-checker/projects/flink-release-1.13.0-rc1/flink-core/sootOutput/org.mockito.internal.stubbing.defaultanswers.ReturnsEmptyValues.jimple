public class org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues extends java.lang.Object implements org.mockito.stubbing.Answer, java.io.Serializable
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues r0;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object answer(org.mockito.invocation.InvocationOnMock)
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues r0;
        org.mockito.invocation.InvocationOnMock r1;
        org.mockito.mock.MockName r2;
        java.lang.reflect.Method $r3, $r4, $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r7, $r8, r20;
        java.lang.Integer $r9;
        java.lang.String $r10, $r15, $r19;
        java.lang.StringBuilder $r11, $r12, $r16, $r17, $r18;
        org.mockito.mock.MockCreationSettings $r13;
        java.lang.Class $r14, r21;
        int $i0;
        byte $b1;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;

        r1 := @parameter0: org.mockito.invocation.InvocationOnMock;

        $r3 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.mockito.internal.util.ObjectMethodsGuru: boolean isToStringMethod(java.lang.reflect.Method)>($r3);

        if $z0 == 0 goto label2;

        r20 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object getMock()>();

        r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>(r20);

        $z2 = interfaceinvoke r2.<org.mockito.mock.MockName: boolean isDefault()>();

        if $z2 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mock for ");

        $r13 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockCreationSettings getMockSettings(java.lang.Object)>(r20);

        $r14 = interfaceinvoke $r13.<org.mockito.mock.MockCreationSettings: java.lang.Class getTypeToMock()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hashCode: ");

        $i0 = virtualinvoke r20.<java.lang.Object: int hashCode()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label1:
        $r10 = interfaceinvoke r2.<org.mockito.mock.MockName: java.lang.String toString()>();

        return $r10;

     label2:
        $r4 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.reflect.Method getMethod()>();

        $z1 = staticinvoke <org.mockito.internal.util.ObjectMethodsGuru: boolean isCompareToMethod(java.lang.reflect.Method)>($r4);

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object getMock()>();

        $r8 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object getArgument(int)>(0);

        if $r7 != $r8 goto label3;

        $b1 = 0;

        goto label4;

     label3:
        $b1 = 1;

     label4:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b1);

        return $r9;

     label5:
        $r5 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.reflect.Method getMethod()>();

        r21 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = virtualinvoke r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues: java.lang.Object returnValueFor(java.lang.Class)>(r21);

        return $r6;
    }

    java.lang.Object returnValueFor(java.lang.Class)
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues r0;
        java.lang.Class r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r41;
        java.util.LinkedHashMap $r26;
        java.util.TreeMap $r27, $r28;
        java.util.HashMap $r29, $r30;
        java.util.ArrayList $r31, $r40;
        java.util.LinkedList $r32, $r33, $r39;
        java.util.LinkedHashSet $r34;
        java.util.TreeSet $r35, $r36;
        java.util.HashSet $r37, $r38;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues;

        r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.mockito.internal.util.Primitives: boolean isPrimitiveOrWrapper(java.lang.Class)>(r1);

        if $z0 == 0 goto label01;

        $r41 = staticinvoke <org.mockito.internal.util.Primitives: java.lang.Object defaultValue(java.lang.Class)>(r1);

        return $r41;

     label01:
        if r1 != class "Ljava/lang/Iterable;" goto label02;

        $r40 = new java.util.ArrayList;

        specialinvoke $r40.<java.util.ArrayList: void <init>(int)>(0);

        return $r40;

     label02:
        if r1 != class "Ljava/util/Collection;" goto label03;

        $r39 = new java.util.LinkedList;

        specialinvoke $r39.<java.util.LinkedList: void <init>()>();

        return $r39;

     label03:
        if r1 != class "Ljava/util/Set;" goto label04;

        $r38 = new java.util.HashSet;

        specialinvoke $r38.<java.util.HashSet: void <init>()>();

        return $r38;

     label04:
        if r1 != class "Ljava/util/HashSet;" goto label05;

        $r37 = new java.util.HashSet;

        specialinvoke $r37.<java.util.HashSet: void <init>()>();

        return $r37;

     label05:
        if r1 != class "Ljava/util/SortedSet;" goto label06;

        $r36 = new java.util.TreeSet;

        specialinvoke $r36.<java.util.TreeSet: void <init>()>();

        return $r36;

     label06:
        if r1 != class "Ljava/util/TreeSet;" goto label07;

        $r35 = new java.util.TreeSet;

        specialinvoke $r35.<java.util.TreeSet: void <init>()>();

        return $r35;

     label07:
        if r1 != class "Ljava/util/LinkedHashSet;" goto label08;

        $r34 = new java.util.LinkedHashSet;

        specialinvoke $r34.<java.util.LinkedHashSet: void <init>()>();

        return $r34;

     label08:
        if r1 != class "Ljava/util/List;" goto label09;

        $r33 = new java.util.LinkedList;

        specialinvoke $r33.<java.util.LinkedList: void <init>()>();

        return $r33;

     label09:
        if r1 != class "Ljava/util/LinkedList;" goto label10;

        $r32 = new java.util.LinkedList;

        specialinvoke $r32.<java.util.LinkedList: void <init>()>();

        return $r32;

     label10:
        if r1 != class "Ljava/util/ArrayList;" goto label11;

        $r31 = new java.util.ArrayList;

        specialinvoke $r31.<java.util.ArrayList: void <init>()>();

        return $r31;

     label11:
        if r1 != class "Ljava/util/Map;" goto label12;

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>()>();

        return $r30;

     label12:
        if r1 != class "Ljava/util/HashMap;" goto label13;

        $r29 = new java.util.HashMap;

        specialinvoke $r29.<java.util.HashMap: void <init>()>();

        return $r29;

     label13:
        if r1 != class "Ljava/util/SortedMap;" goto label14;

        $r28 = new java.util.TreeMap;

        specialinvoke $r28.<java.util.TreeMap: void <init>()>();

        return $r28;

     label14:
        if r1 != class "Ljava/util/TreeMap;" goto label15;

        $r27 = new java.util.TreeMap;

        specialinvoke $r27.<java.util.TreeMap: void <init>()>();

        return $r27;

     label15:
        if r1 != class "Ljava/util/LinkedHashMap;" goto label16;

        $r26 = new java.util.LinkedHashMap;

        specialinvoke $r26.<java.util.LinkedHashMap: void <init>()>();

        return $r26;

     label16:
        $r2 = "java.util.Optional";

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label17;

        $r25 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyOptional()>();

        return $r25;

     label17:
        $r4 = "java.util.OptionalDouble";

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label18;

        $r24 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyOptionalDouble()>();

        return $r24;

     label18:
        $r6 = "java.util.OptionalInt";

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label19;

        $r23 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyOptionalInt()>();

        return $r23;

     label19:
        $r8 = "java.util.OptionalLong";

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label20;

        $r22 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyOptionalLong()>();

        return $r22;

     label20:
        $r10 = "java.util.stream.Stream";

        $r11 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label21;

        $r21 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyStream()>();

        return $r21;

     label21:
        $r12 = "java.util.stream.DoubleStream";

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z6 == 0 goto label22;

        $r20 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyDoubleStream()>();

        return $r20;

     label22:
        $r14 = "java.util.stream.IntStream";

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z7 == 0 goto label23;

        $r19 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyIntStream()>();

        return $r19;

     label23:
        $r16 = "java.util.stream.LongStream";

        $r17 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z8 == 0 goto label24;

        $r18 = staticinvoke <org.mockito.internal.util.JavaEightUtil: java.lang.Object emptyLongStream()>();

        return $r18;

     label24:
        return null;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValues: long serialVersionUID> = 1998191268711234347L;

        return;
    }
}
