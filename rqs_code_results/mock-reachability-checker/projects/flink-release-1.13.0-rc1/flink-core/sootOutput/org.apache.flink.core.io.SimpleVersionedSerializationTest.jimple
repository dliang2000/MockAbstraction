public class org.apache.flink.core.io.SimpleVersionedSerializationTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.SimpleVersionedSerializationTest r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSerializationRoundTrip() throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializationTest r0;
        byte[] r4, r5;
        java.lang.String r7, r8;
        org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer $r9;
        org.apache.flink.core.memory.DataOutputSerializer $r10;
        org.apache.flink.core.memory.DataInputDeserializer $r11;
        java.lang.Object $r12, $r13;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializationTest;

        $r9 = new org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer;

        specialinvoke $r9.<org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer: void <init>(org.apache.flink.core.io.SimpleVersionedSerializationTest$1)>(null);

        $r10 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r10.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(32);

        staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: void writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r9, "dugfakgs", $r10);

        r4 = virtualinvoke $r10.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        r5 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: byte[] writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,java.lang.Object)>($r9, "dugfakgs");

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r5, r4);

        $r11 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r11.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r5);

        $r12 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,org.apache.flink.core.memory.DataInputView)>($r9, $r11);

        r7 = (java.lang.String) $r12;

        $r13 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,byte[])>($r9, r4);

        r8 = (java.lang.String) $r13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dugfakgs", r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("dugfakgs", r8);

        return;
    }

    public void testSerializeEmpty() throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializationTest r0;
        byte[] r4, r5;
        java.lang.String r7, r8;
        org.apache.flink.core.io.SimpleVersionedSerializationTest$1 $r9;
        org.apache.flink.core.memory.DataOutputSerializer $r10;
        org.apache.flink.core.memory.DataInputDeserializer $r11;
        java.lang.Object $r12, $r13;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializationTest;

        $r9 = new org.apache.flink.core.io.SimpleVersionedSerializationTest$1;

        specialinvoke $r9.<org.apache.flink.core.io.SimpleVersionedSerializationTest$1: void <init>(org.apache.flink.core.io.SimpleVersionedSerializationTest)>(r0);

        $r10 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r10.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(32);

        staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: void writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r9, "abc", $r10);

        r4 = virtualinvoke $r10.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        r5 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: byte[] writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,java.lang.Object)>($r9, "abc");

        staticinvoke <org.junit.Assert: void assertArrayEquals(byte[],byte[])>(r5, r4);

        $r11 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r11.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r5);

        $r12 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,org.apache.flink.core.memory.DataInputView)>($r9, $r11);

        r7 = (java.lang.String) $r12;

        $r13 = staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,byte[])>($r9, r4);

        r8 = (java.lang.String) $r13;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("beeeep!", r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("beeeep!", r8);

        return;
    }

    public void testUnderflow() throws java.lang.Exception
    {
        org.apache.flink.core.io.SimpleVersionedSerializationTest r0;
        org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer $r1;
        byte[] $r2;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerializationTest;

        $r1 = new org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer;

        specialinvoke $r1.<org.apache.flink.core.io.SimpleVersionedSerializationTest$TestStringSerializer: void <init>(org.apache.flink.core.io.SimpleVersionedSerializationTest$1)>(null);

        $r2 = newarray (byte)[7];

        staticinvoke <org.apache.flink.core.io.SimpleVersionedSerialization: java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer,byte[])>($r1, $r2);

        return;
    }
}
