public final class javassist.CtConstructor extends javassist.CtBehavior
{

    protected void <init>(javassist.bytecode.MethodInfo, javassist.CtClass)
    {
        javassist.CtConstructor r0;
        javassist.bytecode.MethodInfo r1;
        javassist.CtClass r2;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 := @parameter1: javassist.CtClass;

        specialinvoke r0.<javassist.CtBehavior: void <init>(javassist.CtClass,javassist.bytecode.MethodInfo)>(r2, r1);

        return;
    }

    public void <init>(javassist.CtClass[], javassist.CtClass)
    {
        javassist.CtConstructor r0;
        javassist.CtClass[] r1;
        javassist.CtClass r2;
        javassist.bytecode.ConstPool r3;
        java.lang.String r4;
        javassist.bytecode.MethodInfo $r5, $r7;
        javassist.bytecode.ClassFile $r6;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: javassist.CtClass[];

        r2 := @parameter1: javassist.CtClass;

        $r5 = (javassist.bytecode.MethodInfo) null;

        specialinvoke r0.<javassist.CtConstructor: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r5, r2);

        $r6 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        r3 = virtualinvoke $r6.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        r4 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String ofConstructor(javassist.CtClass[])>(r1);

        $r7 = new javassist.bytecode.MethodInfo;

        specialinvoke $r7.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>(r3, "<init>", r4);

        r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo> = $r7;

        virtualinvoke r0.<javassist.CtConstructor: void setModifiers(int)>(1);

        return;
    }

    public void <init>(javassist.CtConstructor, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0, r1;
        javassist.CtClass r2;
        javassist.ClassMap r3;
        javassist.bytecode.MethodInfo $r4;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: javassist.CtConstructor;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: javassist.ClassMap;

        $r4 = (javassist.bytecode.MethodInfo) null;

        specialinvoke r0.<javassist.CtConstructor: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r4, r2);

        virtualinvoke r0.<javassist.CtConstructor: void copy(javassist.CtBehavior,boolean,javassist.ClassMap)>(r1, 1, r3);

        return;
    }

    public boolean isConstructor()
    {
        javassist.CtConstructor r0;
        javassist.bytecode.MethodInfo $r1;
        boolean $z0;

        r0 := @this: javassist.CtConstructor;

        $r1 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $z0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: boolean isConstructor()>();

        return $z0;
    }

    public boolean isClassInitializer()
    {
        javassist.CtConstructor r0;
        javassist.bytecode.MethodInfo $r1;
        boolean $z0;

        r0 := @this: javassist.CtConstructor;

        $r1 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $z0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: boolean isStaticInitializer()>();

        return $z0;
    }

    public java.lang.String getLongName()
    {
        javassist.CtConstructor r0;
        java.lang.StringBuilder $r1, $r4, $r5;
        javassist.CtClass $r2;
        java.lang.String $r3, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: javassist.CtConstructor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<javassist.CtConstructor: javassist.CtClass getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<javassist.CtClass: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $z0 = virtualinvoke r0.<javassist.CtConstructor: boolean isConstructor()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javassist.CtConstructor: java.lang.String getSignature()>();

        $r8 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toString(java.lang.String)>($r7);

        goto label2;

     label1:
        $r8 = ".<clinit>()";

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public java.lang.String getName()
    {
        javassist.CtConstructor r0;
        javassist.bytecode.MethodInfo $r1;
        boolean $z0;
        javassist.CtClass $r2;
        java.lang.String $r3;

        r0 := @this: javassist.CtConstructor;

        $r1 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $z0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: boolean isStaticInitializer()>();

        if $z0 == 0 goto label1;

        return "<clinit>";

     label1:
        $r2 = r0.<javassist.CtConstructor: javassist.CtClass declaringClass>;

        $r3 = virtualinvoke $r2.<javassist.CtClass: java.lang.String getSimpleName()>();

        return $r3;
    }

    public boolean isEmpty()
    {
        javassist.CtConstructor r0;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.ConstPool r2;
        javassist.bytecode.CodeIterator r3;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        javassist.bytecode.MethodInfo $r4;
        java.lang.String $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        javassist.bytecode.BadBytecode $r8;

        r0 := @this: javassist.CtConstructor;

        $r4 = virtualinvoke r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r1 = virtualinvoke $r4.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r3 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label2:
        $i2 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int next()>();

        i1 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int byteAt(int)>($i2);

        if i1 == 177 goto label3;

        if i1 != 42 goto label4;

        $i3 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int next()>();

        $i4 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int byteAt(int)>($i3);

        if $i4 != 183 goto label4;

        $r5 = specialinvoke r0.<javassist.CtConstructor: java.lang.String getSuperclassName()>();

        $i5 = $i3 + 1;

        $i6 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i5);

        $i7 = virtualinvoke r2.<javassist.bytecode.ConstPool: int isConstructor(java.lang.String,int)>($r5, $i6);

        if $i7 == 0 goto label4;

        $r6 = "()V";

        $r7 = virtualinvoke r2.<javassist.bytecode.ConstPool: java.lang.String getUtf8Info(int)>($i7);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        $i8 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int next()>();

        $i9 = virtualinvoke r3.<javassist.bytecode.CodeIterator: int byteAt(int)>($i8);

        if $i9 != 177 goto label4;

        $z1 = virtualinvoke r3.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;

     label6:
        $r8 := @caughtexception;

        return 0;

        catch javassist.bytecode.BadBytecode from label2 to label5 with label6;
    }

    private java.lang.String getSuperclassName()
    {
        javassist.CtConstructor r0;
        javassist.bytecode.ClassFile r1;
        javassist.CtClass $r2;
        java.lang.String $r3;

        r0 := @this: javassist.CtConstructor;

        $r2 = r0.<javassist.CtConstructor: javassist.CtClass declaringClass>;

        r1 = virtualinvoke $r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        $r3 = virtualinvoke r1.<javassist.bytecode.ClassFile: java.lang.String getSuperclass()>();

        return $r3;
    }

    public boolean callsSuper() throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.CodeIterator r2;
        javassist.bytecode.MethodInfo $r3;
        javassist.bytecode.BadBytecode $r4;
        javassist.CannotCompileException $r5;
        int i0;
        boolean $z0;

        r0 := @this: javassist.CtConstructor;

        $r3 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        r1 = virtualinvoke $r3.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r1 == null goto label5;

        r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label1:
        i0 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int skipSuperConstructor()>();

        if i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        $r5 = new javassist.CannotCompileException;

        specialinvoke $r5.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label5:
        return 0;

        catch javassist.bytecode.BadBytecode from label1 to label3 with label4;
    }

    public void setBody(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        boolean $z0;
        java.lang.String r1;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

        $z0 = virtualinvoke r0.<javassist.CtConstructor: boolean isClassInitializer()>();

        if $z0 == 0 goto label1;

        r1 = ";";

        goto label2;

     label1:
        r1 = "super();";

     label2:
        specialinvoke r0.<javassist.CtBehavior: void setBody(java.lang.String)>(r1);

        return;
    }

    public void setBody(javassist.CtConstructor, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0, r1;
        javassist.ClassMap r2;
        javassist.bytecode.MethodInfo $r3, $r5;
        javassist.CtClass $r4, $r6;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: javassist.CtConstructor;

        r2 := @parameter1: javassist.ClassMap;

        $r6 = r1.<javassist.CtConstructor: javassist.CtClass declaringClass>;

        $r5 = r1.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $r4 = r0.<javassist.CtConstructor: javassist.CtClass declaringClass>;

        $r3 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        staticinvoke <javassist.CtConstructor: void setBody0(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.CtClass,javassist.bytecode.MethodInfo,javassist.ClassMap)>($r6, $r5, $r4, $r3, r2);

        return;
    }

    public void insertBeforeBody(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        java.lang.String r1;
        javassist.CtClass r2;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.CodeIterator r4;
        boolean $z0;
        javassist.bytecode.MethodInfo $r7, $r9, $r15;
        javassist.bytecode.Bytecode $r8;
        javassist.bytecode.ConstPool $r10;
        int $i0, $i1, $i2, $i4, $i5, i7;
        javassist.compiler.Javac $r11;
        javassist.CtClass[] $r12;
        byte[] $r13;
        javassist.bytecode.ExceptionTable $r14;
        javassist.ClassPool $r16;
        javassist.bytecode.ClassFile $r17;
        javassist.CannotCompileException $r18, $r20, $r22, $r24;
        javassist.compiler.CompileError $r19;
        javassist.NotFoundException $r21;
        javassist.bytecode.BadBytecode $r23;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<javassist.CtConstructor: javassist.CtClass declaringClass>;

        virtualinvoke r2.<javassist.CtClass: void checkModify()>();

        $z0 = virtualinvoke r0.<javassist.CtConstructor: boolean isClassInitializer()>();

        if $z0 == 0 goto label1;

        $r18 = new javassist.CannotCompileException;

        specialinvoke $r18.<javassist.CannotCompileException: void <init>(java.lang.String)>("class initializer");

        throw $r18;

     label1:
        $r7 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        r3 = virtualinvoke $r7.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r4 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $r8 = new javassist.bytecode.Bytecode;

        $r9 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $r10 = virtualinvoke $r9.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $i0 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i1 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        specialinvoke $r8.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>($r10, $i0, $i1);

        $i2 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        virtualinvoke $r8.<javassist.bytecode.Bytecode: void setStackDepth(int)>($i2);

        $r11 = new javassist.compiler.Javac;

        specialinvoke $r11.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>($r8, r2);

     label2:
        $r12 = virtualinvoke r0.<javassist.CtConstructor: javassist.CtClass[] getParameterTypes()>();

        virtualinvoke $r11.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>($r12, 0);

        virtualinvoke $r11.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        $i4 = virtualinvoke $r8.<javassist.bytecode.Bytecode: int getMaxStack()>();

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>($i4);

        $i5 = virtualinvoke $r8.<javassist.bytecode.Bytecode: int getMaxLocals()>();

        virtualinvoke r3.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>($i5);

        virtualinvoke r4.<javassist.bytecode.CodeIterator: int skipConstructor()>();

        $r13 = virtualinvoke $r8.<javassist.bytecode.Bytecode: byte[] get()>();

        i7 = virtualinvoke r4.<javassist.bytecode.CodeIterator: int insertEx(byte[])>($r13);

        $r14 = virtualinvoke $r8.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r4.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r14, i7);

        $r15 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $r16 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r17 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r15.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r16, $r17);

     label3:
        goto label7;

     label4:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r21);

        throw $r22;

     label5:
        $r19 := @caughtexception;

        $r20 = new javassist.CannotCompileException;

        specialinvoke $r20.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r19);

        throw $r20;

     label6:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r23);

        throw $r24;

     label7:
        return;

        catch javassist.NotFoundException from label2 to label3 with label4;
        catch javassist.compiler.CompileError from label2 to label3 with label5;
        catch javassist.bytecode.BadBytecode from label2 to label3 with label6;
    }

    int getStartPosOfBody(javassist.bytecode.CodeAttribute) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.CodeIterator r2;
        int $i1;
        javassist.bytecode.BadBytecode $r4;
        javassist.CannotCompileException $r5;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label1:
        virtualinvoke r2.<javassist.bytecode.CodeIterator: int skipConstructor()>();

        $i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int next()>();

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        $r5 = new javassist.CannotCompileException;

        specialinvoke $r5.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label3;
    }

    public javassist.CtMethod toMethod(java.lang.String, javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        java.lang.String r1;
        javassist.CtClass r2;
        javassist.CtMethod $r3;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass;

        $r3 = virtualinvoke r0.<javassist.CtConstructor: javassist.CtMethod toMethod(java.lang.String,javassist.CtClass,javassist.ClassMap)>(r1, r2, null);

        return $r3;
    }

    public javassist.CtMethod toMethod(java.lang.String, javassist.CtClass, javassist.ClassMap) throws javassist.CannotCompileException
    {
        javassist.CtConstructor r0;
        java.lang.String r1;
        javassist.CtClass r2;
        javassist.ClassMap r3;
        javassist.bytecode.MethodInfo r5, $r9;
        javassist.bytecode.CodeAttribute r6;
        javassist.CtMethod $r8;
        boolean $z0;
        javassist.ClassPool $r10;
        javassist.bytecode.ClassFile $r11;
        javassist.bytecode.BadBytecode $r12;
        javassist.CannotCompileException $r13;

        r0 := @this: javassist.CtConstructor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass;

        r3 := @parameter2: javassist.ClassMap;

        $r8 = new javassist.CtMethod;

        specialinvoke $r8.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(null, r2);

        virtualinvoke $r8.<javassist.CtMethod: void copy(javassist.CtBehavior,boolean,javassist.ClassMap)>(r0, 0, r3);

        $z0 = virtualinvoke r0.<javassist.CtConstructor: boolean isConstructor()>();

        if $z0 == 0 goto label4;

        r5 = virtualinvoke $r8.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r6 = virtualinvoke r5.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r6 == null goto label4;

        staticinvoke <javassist.CtConstructor: void removeConsCall(javassist.bytecode.CodeAttribute)>(r6);

     label1:
        $r9 = r0.<javassist.CtConstructor: javassist.bytecode.MethodInfo methodInfo>;

        $r10 = virtualinvoke r2.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r11 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r9.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r10, $r11);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = new javassist.CannotCompileException;

        specialinvoke $r13.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label4:
        virtualinvoke $r8.<javassist.CtMethod: void setName(java.lang.String)>(r1);

        return $r8;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label3;
    }

    private static void removeConsCall(javassist.bytecode.CodeAttribute) throws javassist.CannotCompileException
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.CodeIterator r1;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, i8, i9;
        java.lang.String r2;
        javassist.bytecode.ConstPool $r4;
        javassist.bytecode.Descriptor$Iterator $r5;
        boolean $z0, $z1;
        javassist.bytecode.CodeIterator$Gap $r7;
        javassist.bytecode.BadBytecode $r8;
        javassist.CannotCompileException $r9;
        byte $b10;

        r0 := @parameter0: javassist.bytecode.CodeAttribute;

        r1 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label1:
        i8 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int skipConstructor()>();

        if i8 < 0 goto label6;

        $i2 = i8 + 1;

        i0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        $r4 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r2 = virtualinvoke $r4.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i0);

        $i3 = staticinvoke <javassist.bytecode.Descriptor: int numOfParameters(java.lang.String)>(r2);

        i1 = $i3 + 1;

        if i1 <= 3 goto label2;

        $i7 = i1 - 3;

        $r7 = virtualinvoke r1.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i8, $i7, 0);

        i8 = $r7.<javassist.bytecode.CodeIterator$Gap: int position>;

     label2:
        i9 = i8 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(87, i8);

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, i9);

        $i4 = i9 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(0, $i4);

        $r5 = new javassist.bytecode.Descriptor$Iterator;

        specialinvoke $r5.<javassist.bytecode.Descriptor$Iterator: void <init>(java.lang.String)>(r2);

     label3:
        virtualinvoke $r5.<javassist.bytecode.Descriptor$Iterator: int next()>();

        $z1 = virtualinvoke $r5.<javassist.bytecode.Descriptor$Iterator: boolean isParameter()>();

        if $z1 == 0 goto label6;

        $z0 = virtualinvoke $r5.<javassist.bytecode.Descriptor$Iterator: boolean is2byte()>();

        if $z0 == 0 goto label4;

        $b10 = 88;

        goto label5;

     label4:
        $b10 = 87;

     label5:
        $i6 = i9;

        i9 = i9 + 1;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void writeByte(int,int)>($b10, $i6);

        goto label3;

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = new javassist.CannotCompileException;

        specialinvoke $r9.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label8:
        return;

        catch javassist.bytecode.BadBytecode from label1 to label6 with label7;
    }
}
