public class org.powermock.api.mockito.expectation.reporter.MockitoPowerMockReporter extends java.lang.Object implements org.powermock.core.reporter.PowerMockReporter
{

    public void <init>()
    {
        org.powermock.api.mockito.expectation.reporter.MockitoPowerMockReporter r0;

        r0 := @this: org.powermock.api.mockito.expectation.reporter.MockitoPowerMockReporter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void classNotPrepared(java.lang.Class)
    {
        org.powermock.api.mockito.expectation.reporter.MockitoPowerMockReporter r0;
        java.lang.Class r1;
        org.powermock.api.mockito.ClassNotPreparedException $r2;
        java.lang.Object[] $r3, $r6;
        java.lang.String $r4, $r5, $r7;

        r0 := @this: org.powermock.api.mockito.expectation.reporter.MockitoPowerMockReporter;

        r1 := @parameter0: java.lang.Class;

        $r2 = new org.powermock.api.mockito.ClassNotPreparedException;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The class %s not prepared for test.", $r3);

        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = "To prepare this class, add class to the \'@PrepareForTest\' annotation.";

        $r6[1] = "In case if you don\'t use this annotation, add the annotation on class or  method level. ";

        $r7 = staticinvoke <org.powermock.utils.StringJoiner: java.lang.String join(java.lang.String,java.lang.Object[])>($r5, $r6);

        specialinvoke $r2.<org.powermock.api.mockito.ClassNotPreparedException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }
}
