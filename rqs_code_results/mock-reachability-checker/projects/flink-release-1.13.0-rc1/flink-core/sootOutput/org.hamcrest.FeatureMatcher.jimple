public abstract class org.hamcrest.FeatureMatcher extends org.hamcrest.TypeSafeDiagnosingMatcher
{
    private static final org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER;
    private final org.hamcrest.Matcher subMatcher;
    private final java.lang.String featureDescription;
    private final java.lang.String featureName;

    public void <init>(org.hamcrest.Matcher, java.lang.String, java.lang.String)
    {
        org.hamcrest.FeatureMatcher r0;
        org.hamcrest.Matcher r1;
        java.lang.String r2, r3;
        org.hamcrest.internal.ReflectiveTypeFinder $r4;

        r0 := @this: org.hamcrest.FeatureMatcher;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = <org.hamcrest.FeatureMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER>;

        specialinvoke r0.<org.hamcrest.TypeSafeDiagnosingMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)>($r4);

        r0.<org.hamcrest.FeatureMatcher: org.hamcrest.Matcher subMatcher> = r1;

        r0.<org.hamcrest.FeatureMatcher: java.lang.String featureDescription> = r2;

        r0.<org.hamcrest.FeatureMatcher: java.lang.String featureName> = r3;

        return;
    }

    protected abstract java.lang.Object featureValueOf(java.lang.Object);

    protected boolean matchesSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.FeatureMatcher r0;
        java.lang.Object r1, r3;
        org.hamcrest.Description r2, $r6;
        org.hamcrest.Matcher $r4, $r8;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: org.hamcrest.FeatureMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        r3 = virtualinvoke r0.<org.hamcrest.FeatureMatcher: java.lang.Object featureValueOf(java.lang.Object)>(r1);

        $r4 = r0.<org.hamcrest.FeatureMatcher: org.hamcrest.Matcher subMatcher>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r5 = r0.<org.hamcrest.FeatureMatcher: java.lang.String featureName>;

        $r6 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r5);

        interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r8 = r0.<org.hamcrest.FeatureMatcher: org.hamcrest.Matcher subMatcher>;

        interfaceinvoke $r8.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r3, r2);

        return 0;

     label1:
        return 1;
    }

    public final void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.FeatureMatcher r0;
        org.hamcrest.Description r1, $r3, $r4;
        java.lang.String $r2;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.hamcrest.FeatureMatcher;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = r0.<org.hamcrest.FeatureMatcher: java.lang.String featureDescription>;

        $r3 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r2);

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" ");

        $r5 = r0.<org.hamcrest.FeatureMatcher: org.hamcrest.Matcher subMatcher>;

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r5);

        return;
    }

    static void <clinit>()
    {
        org.hamcrest.internal.ReflectiveTypeFinder $r0;

        $r0 = new org.hamcrest.internal.ReflectiveTypeFinder;

        specialinvoke $r0.<org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>("featureValueOf", 1, 0);

        <org.hamcrest.FeatureMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER> = $r0;

        return;
    }
}
