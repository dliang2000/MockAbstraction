public abstract class org.apache.flink.types.parser.ParserTestBase extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.types.parser.ParserTestBase r0;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public abstract java.lang.String[] getValidTestValues();

    public abstract java.lang.Object[] getValidTestResults();

    public abstract java.lang.String[] getInvalidTestValues();

    public abstract boolean allowsEmptyField();

    public abstract org.apache.flink.types.parser.FieldParser getParser();

    public abstract java.lang.Class getTypeClass();

    public void testTest()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        org.apache.flink.types.parser.FieldParser $r1;
        java.lang.Class $r2;
        java.lang.String[] $r3, $r5, $r6;
        java.lang.Object[] $r4, $r7;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Class getTypeClass()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r3);

        $r4 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r4);

        $r5 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getInvalidTestValues()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        $r6 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        $i0 = lengthof $r6;

        $r7 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        $i1 = lengthof $r7;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testGetValue()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        java.lang.Exception $r4;
        java.io.PrintStream $r5;
        java.lang.String $r6, $r9, $r11;
        java.lang.StringBuilder $r7, $r8, $r10;
        org.apache.flink.types.parser.FieldParser r12;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label1:
        r12 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r1 = virtualinvoke r12.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("Null type created", r1);

        $r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Class getTypeClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Wrong type created", $z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r9 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testValidStringInIsolation()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1;
        org.apache.flink.types.parser.FieldParser r2, r3, r4;
        byte[] r5, r6, r7, $r17, $r19, $r21;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i10, $i13, i16;
        java.lang.Object r8, r9, r10, $r18, $r20, $r22, $r46, $r52, $r58;
        java.nio.charset.Charset $r11, $r13, $r15;
        java.lang.String $r12, $r14, $r16, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r45, $r49, $r51, $r55, $r57, $r61, $r64, $r66;
        java.lang.StringBuilder $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r44, $r47, $r48, $r50, $r53, $r54, $r56, $r62, $r63, $r65;
        long $l8, $l9, $l11, $l12, $l14, $l15;
        java.lang.Exception $r59;
        java.io.PrintStream $r60;
        java.lang.String[] r67;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label01:
        r67 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        i16 = 0;

     label02:
        $i3 = lengthof r67;

        if i16 >= $i3 goto label09;

        r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r3 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r4 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r12 = r67[i16];

        $r11 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r5 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        $r14 = r67[i16];

        $r13 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r6 = virtualinvoke $r14.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13);

        $r16 = r67[i16];

        $r15 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r7 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        $i4 = lengthof r5;

        $r17 = newarray (byte)[1];

        $r17[0] = 124;

        $r18 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i0 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r5, 0, $i4, $r17, $r18);

        $i5 = lengthof r6;

        $r19 = newarray (byte)[2];

        $r19[0] = 38;

        $r19[1] = 38;

        $r20 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i1 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r6, 0, $i5, $r19, $r20);

        $i6 = lengthof r7;

        $r21 = newarray (byte)[3];

        $r21[0] = 57;

        $r21[1] = 57;

        $r21[2] = 57;

        $r22 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i2 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r7, 0, $i6, $r21, $r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r25 = r67[i16];

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 == -1 goto label03;

        $z0 = 1;

        goto label04;

     label03:
        $z0 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r28, $z0);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r31 = r67[i16];

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 == -1 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r34, $z1);

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r37 = r67[i16];

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        if i2 == -1 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r40, $z2);

        $i7 = lengthof r5;

        $l9 = (long) $i7;

        $l8 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l9, $l8);

        $i10 = lengthof r6;

        $l12 = (long) $i10;

        $l11 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l12, $l11);

        $i13 = lengthof r7;

        $l15 = (long) $i13;

        $l14 = (long) i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l15, $l14);

        r8 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        r9 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        r10 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser parsed wrong. ");

        $r43 = r67[i16];

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r46 = r1[i16];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r45, $r46, r8);

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser parsed wrong. ");

        $r49 = r67[i16];

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = r1[i16];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r51, $r52, r9);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser parsed wrong. ");

        $r55 = r67[i16];

        $r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r58 = r1[i16];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r57, $r58, r10);

        i16 = i16 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r59 := @caughtexception;

        $r60 = <java.lang.System: java.io.PrintStream err>;

        $r61 = virtualinvoke $r59.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r60.<java.io.PrintStream: void println(java.lang.String)>($r61);

        virtualinvoke $r59.<java.lang.Exception: void printStackTrace()>();

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r64 = virtualinvoke $r59.<java.lang.Exception: java.lang.String getMessage()>();

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r66);

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public void testValidStringInIsolationWithEndDelimiter()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1;
        org.apache.flink.types.parser.FieldParser r2, r3;
        java.lang.String r4, r5, $r11, $r15, $r26, $r29, $r32, $r35, $r40, $r43, $r45;
        byte[] r6, r7, $r20, $r22;
        int i0, i1, $i2, $i3, $i4, $i5, $i8, i11;
        java.lang.Object r8, r9, $r21, $r23, $r36, $r37;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r16, $r17, $r24, $r25, $r27, $r28, $r30, $r31, $r33, $r34, $r41, $r42, $r44;
        java.nio.charset.Charset $r18, $r19;
        long $l6, $l7, $l9, $l10;
        java.lang.Exception $r38;
        java.io.PrintStream $r39;
        java.lang.String[] r46;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label1:
        r46 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        i11 = 0;

     label2:
        $i2 = lengthof r46;

        if i11 >= $i2 goto label7;

        r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r3 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = r46[i11];

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r46[i11];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&&&&");

        r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r6 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r18);

        $r19 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r7 = virtualinvoke r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r19);

        $i3 = lengthof r6;

        $r20 = newarray (byte)[1];

        $r20[0] = 124;

        $r21 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i0 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r6, 0, $i3, $r20, $r21);

        $i4 = lengthof r7;

        $r22 = newarray (byte)[4];

        $r22[0] = 38;

        $r22[1] = 38;

        $r22[2] = 38;

        $r22[3] = 38;

        $r23 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i1 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r7, 0, $i4, $r22, $r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r26 = r46[i11];

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 == -1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r29, $z0);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r32 = r46[i11];

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        if i1 == -1 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r35, $z1);

        $i5 = lengthof r6;

        $l7 = (long) $i5;

        $l6 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l7, $l6);

        $i8 = lengthof r7;

        $l10 = (long) $i8;

        $l9 = (long) i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l10, $l9);

        r8 = virtualinvoke r2.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        r9 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r36 = r1[i11];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r36, r8);

        $r37 = r1[i11];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r37, r9);

        i11 = i11 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r38 := @caughtexception;

        $r39 = <java.lang.System: java.io.PrintStream err>;

        $r40 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r39.<java.io.PrintStream: void println(java.lang.String)>($r40);

        virtualinvoke $r38.<java.lang.Exception: void printStackTrace()>();

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r43 = virtualinvoke $r38.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r45);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testConcatenated()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1;
        byte[] r2, r3, $r12, $r13;
        org.apache.flink.types.parser.FieldParser r4, r5;
        java.lang.Object r6, r7, r8, r9, $r26, $r27;
        char[] $r10, $r11;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.StringBuilder $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r31, $r32, $r34;
        java.lang.String $r16, $r19, $r22, $r25, $r30, $r33, $r35;
        java.lang.Exception $r28;
        java.io.PrintStream $r29;
        java.lang.String[] r36;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label1:
        r36 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        $r10 = newarray (char)[1];

        $r10[0] = 124;

        r2 = staticinvoke <org.apache.flink.types.parser.ParserTestBase: byte[] concatenate(java.lang.String[],char[],boolean)>(r36, $r10, 1);

        $r11 = newarray (char)[1];

        $r11[0] = 44;

        r3 = staticinvoke <org.apache.flink.types.parser.ParserTestBase: byte[] concatenate(java.lang.String[],char[],boolean)>(r36, $r11, 0);

        r4 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r5 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r6 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        r7 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i3 = 0;

        i4 = 0;

        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label7;

        $i1 = lengthof r2;

        $r12 = newarray (byte)[1];

        $r12[0] = 124;

        i3 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r2, i3, $i1, $r12, r6);

        $i2 = lengthof r3;

        $r13 = newarray (byte)[1];

        $r13[0] = 44;

        i4 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r3, i4, $i2, $r13, r7);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r16 = r36[i5];

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        if i3 == -1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r19, $z0);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r22 = r36[i5];

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        if i4 == -1 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r25, $z1);

        r8 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        r9 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r26 = r1[i5];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r26, r8);

        $r27 = r1[i5];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r27, r9);

        i5 = i5 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r28 := @caughtexception;

        $r29 = <java.lang.System: java.io.PrintStream err>;

        $r30 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r30);

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r33 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r35);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testConcatenatedMultiCharDelimiter()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1;
        byte[] r2, r3, $r12, $r20;
        org.apache.flink.types.parser.FieldParser r4, r5;
        java.lang.Object r6, r7, r8, r9, $r19, $r27;
        char[] $r10, $r11;
        int $i0, $i1, $i2, i3, i4, i5;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r21, $r22, $r24, $r25, $r31, $r32, $r34;
        java.lang.String $r15, $r18, $r23, $r26, $r30, $r33, $r35;
        java.lang.Exception $r28;
        java.io.PrintStream $r29;
        java.lang.String[] r36;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label1:
        r36 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        $r10 = newarray (char)[4];

        $r10[0] = 38;

        $r10[1] = 38;

        $r10[2] = 38;

        $r10[3] = 38;

        r2 = staticinvoke <org.apache.flink.types.parser.ParserTestBase: byte[] concatenate(java.lang.String[],char[],boolean)>(r36, $r10, 1);

        $r11 = newarray (char)[3];

        $r11[0] = 57;

        $r11[1] = 57;

        $r11[2] = 57;

        r3 = staticinvoke <org.apache.flink.types.parser.ParserTestBase: byte[] concatenate(java.lang.String[],char[],boolean)>(r36, $r11, 0);

        r4 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r5 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r6 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        r7 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i3 = 0;

        i4 = 0;

        i5 = 0;

     label2:
        $i0 = lengthof r1;

        if i5 >= $i0 goto label7;

        $i1 = lengthof r2;

        $r12 = newarray (byte)[4];

        $r12[0] = 38;

        $r12[1] = 38;

        $r12[2] = 38;

        $r12[3] = 38;

        i3 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r2, i3, $i1, $r12, r6);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r15 = r36[i5];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        if i3 == -1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r18, $z0);

        r8 = virtualinvoke r4.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r19 = r1[i5];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r19, r8);

        $i2 = lengthof r3;

        $r20 = newarray (byte)[3];

        $r20[0] = 57;

        $r20[1] = 57;

        $r20[2] = 57;

        i4 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r3, i4, $i2, $r20, r7);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r23 = r36[i5];

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        if i4 == -1 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r26, $z1);

        r9 = virtualinvoke r5.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r27 = r1[i5];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r27, r9);

        i5 = i5 + 1;

        goto label2;

     label7:
        goto label9;

     label8:
        $r28 := @caughtexception;

        $r29 = <java.lang.System: java.io.PrintStream err>;

        $r30 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r30);

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace()>();

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r33 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r35);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public void testInValidStringInIsolation()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        org.apache.flink.types.parser.FieldParser r1;
        byte[] r2, $r5;
        int i0, $i1, $i2, i3;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r9, $r12, $r15, $r18, $r20;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r16, $r17, $r19;
        java.lang.Exception $r13;
        java.io.PrintStream $r14;
        java.lang.String[] r21;
        boolean $z0;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label1:
        r21 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getInvalidTestValues()>();

        i3 = 0;

     label2:
        $i1 = lengthof r21;

        if i3 >= $i1 goto label5;

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r4 = r21[i3];

        $r3 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $i2 = lengthof r2;

        $r5 = newarray (byte)[1];

        $r5[0] = 124;

        $r6 = virtualinvoke r1.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i0 = virtualinvoke r1.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r2, 0, $i2, $r5, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser accepted the invalid value ");

        $r9 = r21[i3];

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 != -1 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r12, $z0);

        i3 = i3 + 1;

        goto label2;

     label5:
        goto label7;

     label6:
        $r13 := @caughtexception;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r15 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r18 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r20);

     label7:
        return;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testInValidStringsMixedIn()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1;
        java.lang.String[] r2, r7, r33;
        org.apache.flink.types.parser.FieldParser r3;
        java.lang.Object r4, r9, $r24;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.lang.String r6, $r16, $r20, $r23, $r27, $r30, $r32;
        byte[] r8, $r11, $r17;
        char[] $r10;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r18, $r19, $r21, $r22, $r28, $r29, $r31;
        java.lang.Exception $r25;
        java.io.PrintStream $r26;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label01:
        r33 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getInvalidTestValues()>();

        r3 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        r4 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i0 = lengthof r2;

        i10 = 0;

     label02:
        if i10 >= i0 goto label09;

        r6 = r2[i10];

        $i2 = lengthof r33;

        $i3 = $i2 + 1;

        r7 = newarray (java.lang.String)[$i3];

        $i4 = lengthof r33;

        i1 = $i4 / 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r33, 0, r7, 0, i1);

        r7[i1] = r6;

        $i7 = i1 + 1;

        $i5 = lengthof r33;

        $i6 = $i5 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r33, i1, r7, $i7, $i6);

        $r10 = newarray (char)[1];

        $r10[0] = 37;

        r8 = staticinvoke <org.apache.flink.types.parser.ParserTestBase: byte[] concatenate(java.lang.String[],char[],boolean)>(r7, $r10, 1);

        i11 = 0;

        i12 = 0;

     label03:
        if i12 >= i1 goto label06;

        $i9 = lengthof r8;

        $r17 = newarray (byte)[1];

        $r17[0] = 37;

        i11 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r8, i11, $i9, $r17, r4);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser declared the valid value ");

        $r20 = r33[i12];

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as invalid.");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        if i11 == -1 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r23, $z0);

        r9 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: java.lang.Object getLastResult()>();

        $r24 = r1[i12];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r24, r9);

        i12 = i12 + 1;

        goto label03;

     label06:
        $i8 = lengthof r8;

        $r11 = newarray (byte)[1];

        $r11[0] = 37;

        i13 = virtualinvoke r3.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r8, i11, $i8, $r11, r4);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parser accepted the invalid value ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        if i13 != -1 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r16, $z1);

        i10 = i10 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r25 := @caughtexception;

        $r26 = <java.lang.System: java.io.PrintStream err>;

        $r27 = virtualinvoke $r25.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r27);

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r30 = virtualinvoke $r25.<java.lang.Exception: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r32);

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }

    public void testStaticParseMethod()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        java.lang.Object[] r1, $r13;
        byte[] r2;
        java.lang.Object r3, $r17;
        org.apache.flink.types.parser.FieldParser $r5;
        java.lang.Class $r6, $r8, $r9, $r10;
        java.lang.Class[] $r7;
        int $i0, $i1, i2;
        java.nio.charset.Charset $r11;
        java.lang.String $r12, $r21, $r24, $r26, $r32, $r34;
        java.lang.Integer $r14, $r15;
        java.lang.Character $r16;
        java.lang.NoSuchMethodException $r18;
        java.lang.Exception $r19;
        java.io.PrintStream $r20;
        java.lang.StringBuilder $r22, $r23, $r25, $r29, $r30, $r33;
        java.lang.reflect.InvocationTargetException $r27;
        java.lang.Throwable $r28, $r31;
        java.lang.reflect.Method r35;
        java.lang.String[] r36;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label01:
        $r5 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = newarray (java.lang.Class)[4];

        $r7[0] = class "[B";

        $r8 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7[1] = $r8;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        $r7[2] = $r9;

        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        $r7[3] = $r10;

        r35 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("parseField", $r7);

     label02:
        goto label05;

     label03:
        $r18 := @caughtexception;

     label04:
        return;

     label05:
        r36 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getValidTestValues()>();

        r1 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.Object[] getValidTestResults()>();

        i2 = 0;

     label06:
        $i0 = lengthof r36;

        if i2 >= $i0 goto label12;

        $r12 = r36[i2];

        $r11 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r2 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

     label07:
        $r13 = newarray (java.lang.Object)[4];

        $r13[0] = r2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13[1] = $r14;

        $i1 = lengthof r2;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r13[2] = $r15;

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(124);

        $r13[3] = $r16;

        r3 = virtualinvoke r35.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label08:
        goto label11;

     label09:
        $r27 := @caughtexception;

        $r28 = virtualinvoke $r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        virtualinvoke $r28.<java.lang.Throwable: void printStackTrace()>();

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while parsing: ");

        $r31 = virtualinvoke $r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r32 = virtualinvoke $r31.<java.lang.Throwable: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r34);

     label10:
        return;

     label11:
        $r17 = r1[i2];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Parser parsed wrong.", $r17, r3);

        i2 = i2 + 1;

        goto label06;

     label12:
        goto label14;

     label13:
        $r19 := @caughtexception;

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r21 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r21);

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r24 = virtualinvoke $r19.<java.lang.Exception: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r26);

     label14:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
        catch java.lang.Exception from label01 to label04 with label13;
        catch java.lang.Exception from label05 to label10 with label13;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    public void testStaticParseMethodWithInvalidValues()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        byte[] r1;
        org.apache.flink.types.parser.FieldParser $r2;
        java.lang.Class $r3, $r5, $r6, $r7;
        java.lang.Class[] $r4;
        int $i0, $i1, i2;
        java.nio.charset.Charset $r8;
        java.lang.String $r9, $r16, $r19, $r21;
        java.lang.Object[] $r10;
        java.lang.Integer $r11, $r12;
        java.lang.Character $r13;
        java.lang.Exception $r14;
        java.io.PrintStream $r15;
        java.lang.StringBuilder $r17, $r18, $r20;
        java.lang.reflect.InvocationTargetException $r22;
        java.lang.NoSuchMethodException $r23;
        java.lang.reflect.Method r24;
        java.lang.String[] r25;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label01:
        $r2 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[4];

        $r4[0] = class "[B";

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[1] = $r5;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r4[2] = $r6;

        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        $r4[3] = $r7;

        r24 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("parseField", $r4);

     label02:
        goto label05;

     label03:
        $r23 := @caughtexception;

     label04:
        return;

     label05:
        r25 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: java.lang.String[] getInvalidTestValues()>();

        i2 = 0;

     label06:
        $i0 = lengthof r25;

        if i2 >= $i0 goto label11;

        $r9 = r25[i2];

        $r8 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r1 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

     label07:
        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = r1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10[1] = $r11;

        $i1 = lengthof r1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r10[2] = $r12;

        $r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(124);

        $r10[3] = $r13;

        virtualinvoke r24.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Static parse method accepted invalid value");

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

     label10:
        i2 = i2 + 1;

        goto label06;

     label11:
        goto label13;

     label12:
        $r14 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream err>;

        $r16 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r19 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label13:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label09;
        catch java.lang.Exception from label01 to label04 with label12;
        catch java.lang.Exception from label05 to label11 with label12;
    }

    private static byte[] concatenate(java.lang.String[], char[], boolean)
    {
        java.lang.String[] r0;
        char[] r1;
        boolean z0;
        byte[] r2, r6;
        int i0, $i1, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, $i15, i16, $i17;
        java.nio.charset.Charset $r3;
        char $c2;
        byte $b3;
        java.lang.String r5, r7;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: char[];

        z0 := @parameter2: boolean;

        i10 = 0;

        i11 = lengthof r0;

        i12 = 0;

     label1:
        if i12 >= i11 goto label2;

        r5 = r0[i12];

        $i7 = virtualinvoke r5.<java.lang.String: int length()>();

        $i8 = lengthof r1;

        $i9 = $i7 + $i8;

        i10 = i10 + $i9;

        i12 = i12 + 1;

        goto label1;

     label2:
        if z0 != 0 goto label3;

        $i6 = lengthof r1;

        i10 = i10 - $i6;

     label3:
        i13 = 0;

        r6 = newarray (byte)[i10];

        i14 = 0;

     label4:
        $i15 = lengthof r0;

        if i14 >= $i15 goto label8;

        r7 = r0[i14];

        $r3 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r2 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, i13, i0);

        i13 = i13 + i0;

        if z0 != 0 goto label5;

        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        if i14 >= $i5 goto label7;

     label5:
        i16 = 0;

     label6:
        $i17 = lengthof r1;

        if i16 >= $i17 goto label7;

        $i1 = i13;

        i13 = i13 + 1;

        $c2 = r1[i16];

        $b3 = (byte) $c2;

        r6[$i1] = $b3;

        i16 = i16 + 1;

        goto label6;

     label7:
        i14 = i14 + 1;

        goto label4;

     label8:
        return r6;
    }

    public void testTrailingEmptyField()
    {
        org.apache.flink.types.parser.ParserTestBase r0;
        byte[] r1, $r4;
        int i0, $i1, $i2, i5;
        java.nio.charset.Charset $r2;
        java.lang.String $r3, $r12, $r15, $r17;
        java.lang.Object $r5;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r6, $r7;
        boolean $z0, $z1, $z2;
        long $l3, $l4;
        java.lang.Exception $r10;
        java.io.PrintStream $r11;
        java.lang.StringBuilder $r13, $r14, $r16;
        org.apache.flink.types.parser.FieldParser r18;

        r0 := @this: org.apache.flink.types.parser.ParserTestBase;

     label01:
        r18 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: org.apache.flink.types.parser.FieldParser getParser()>();

        $r3 = "||";

        $r2 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        i5 = 0;

     label02:
        if i5 >= 2 goto label09;

        $i1 = lengthof r1;

        $r4 = newarray (byte)[1];

        $r4[0] = 124;

        $r5 = virtualinvoke r18.<org.apache.flink.types.parser.FieldParser: java.lang.Object createValue()>();

        i0 = virtualinvoke r18.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r1, i5, $i1, $r4, $r5);

        $r6 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        $r7 = virtualinvoke r18.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState getErrorState()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        $z0 = virtualinvoke r0.<org.apache.flink.types.parser.ParserTestBase: boolean allowsEmptyField()>();

        if $z0 == 0 goto label05;

        if i0 == -1 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Parser declared the empty string as invalid.", $z1);

        $i2 = i5 + 1;

        $l4 = (long) $i2;

        $l3 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("Invalid number of bytes read returned.", $l4, $l3);

        goto label08;

     label05:
        if i0 != -1 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Parser accepted the empty string.", $z2);

     label08:
        virtualinvoke r18.<org.apache.flink.types.parser.FieldParser: void resetParserState()>();

        i5 = i5 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r12 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test erroneous: ");

        $r15 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r17);

     label11:
        return;

        catch java.lang.Exception from label01 to label09 with label10;
    }
}
