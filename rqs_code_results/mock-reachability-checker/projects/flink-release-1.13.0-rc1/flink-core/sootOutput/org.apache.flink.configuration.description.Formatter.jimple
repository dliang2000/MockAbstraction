public abstract class org.apache.flink.configuration.description.Formatter extends java.lang.Object
{
    private final java.lang.StringBuilder state;
    private static final java.lang.String TEMPORARY_PLACEHOLDER;

    public void <init>()
    {
        org.apache.flink.configuration.description.Formatter r0;
        java.lang.StringBuilder $r1;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state> = $r1;

        return;
    }

    public java.lang.String format(org.apache.flink.configuration.description.Description)
    {
        org.apache.flink.configuration.description.Formatter r0;
        org.apache.flink.configuration.description.Description r1;
        java.util.Iterator r2;
        org.apache.flink.configuration.description.BlockElement r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.String $r5;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.Description;

        $r4 = virtualinvoke r1.<org.apache.flink.configuration.description.Description: java.util.List getBlocks()>();

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.configuration.description.BlockElement) $r6;

        interfaceinvoke r3.<org.apache.flink.configuration.description.BlockElement: void format(org.apache.flink.configuration.description.Formatter)>(r0);

        goto label1;

     label2:
        $r5 = specialinvoke r0.<org.apache.flink.configuration.description.Formatter: java.lang.String finalizeFormatting()>();

        return $r5;
    }

    public void format(org.apache.flink.configuration.description.LinkElement)
    {
        org.apache.flink.configuration.description.Formatter r0;
        org.apache.flink.configuration.description.LinkElement r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.LinkElement;

        $r2 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        $r3 = virtualinvoke r1.<org.apache.flink.configuration.description.LinkElement: java.lang.String getLink()>();

        $r4 = virtualinvoke r1.<org.apache.flink.configuration.description.LinkElement: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: void formatLink(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return;
    }

    public void format(org.apache.flink.configuration.description.TextElement)
    {
        org.apache.flink.configuration.description.Formatter r0;
        org.apache.flink.configuration.description.TextElement r1;
        java.lang.String[] r2;
        java.util.List $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.function.IntFunction $r7;
        java.lang.Object[] $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10, $r11;
        java.util.EnumSet $r12;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.TextElement;

        $r3 = virtualinvoke r1.<org.apache.flink.configuration.description.TextElement: java.util.List getElements()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.configuration.description.Formatter$lambda_format_0__392: java.util.function.Function bootstrap$(org.apache.flink.configuration.description.Formatter)>(r0);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.configuration.description.Formatter$lambda_format_1__393: java.util.function.IntFunction bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r7);

        r2 = (java.lang.String[]) $r8;

        $r9 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        $r10 = virtualinvoke r1.<org.apache.flink.configuration.description.TextElement: java.lang.String getFormat()>();

        $r11 = staticinvoke <org.apache.flink.configuration.description.Formatter: java.lang.String escapeFormatPlaceholder(java.lang.String)>($r10);

        $r12 = virtualinvoke r1.<org.apache.flink.configuration.description.TextElement: java.util.EnumSet getStyles()>();

        virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: void formatText(java.lang.StringBuilder,java.lang.String,java.lang.String[],java.util.EnumSet)>($r9, $r11, r2, $r12);

        return;
    }

    public void format(org.apache.flink.configuration.description.LineBreakElement)
    {
        org.apache.flink.configuration.description.Formatter r0;
        org.apache.flink.configuration.description.LineBreakElement r1;
        java.lang.StringBuilder $r2;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.LineBreakElement;

        $r2 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: void formatLineBreak(java.lang.StringBuilder)>($r2);

        return;
    }

    public void format(org.apache.flink.configuration.description.ListElement)
    {
        org.apache.flink.configuration.description.Formatter r0;
        org.apache.flink.configuration.description.ListElement r1;
        java.lang.String[] r2;
        java.util.List $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;
        java.util.function.IntFunction $r7;
        java.lang.Object[] $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.ListElement;

        $r3 = virtualinvoke r1.<org.apache.flink.configuration.description.ListElement: java.util.List getEntries()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.configuration.description.Formatter$lambda_format_2__394: java.util.function.Function bootstrap$(org.apache.flink.configuration.description.Formatter)>(r0);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.configuration.description.Formatter$lambda_format_3__395: java.util.function.IntFunction bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r7);

        r2 = (java.lang.String[]) $r8;

        $r9 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: void formatList(java.lang.StringBuilder,java.lang.String[])>($r9, r2);

        return;
    }

    private java.lang.String finalizeFormatting()
    {
        org.apache.flink.configuration.description.Formatter r0;
        java.lang.String r1, $r4;
        java.lang.StringBuilder $r2, $r3;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        $r2 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = r0.<org.apache.flink.configuration.description.Formatter: java.lang.StringBuilder state>;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%%", "%");

        return $r4;
    }

    protected abstract void formatLink(java.lang.StringBuilder, java.lang.String, java.lang.String);

    protected abstract void formatLineBreak(java.lang.StringBuilder);

    protected abstract void formatText(java.lang.StringBuilder, java.lang.String, java.lang.String[], java.util.EnumSet);

    protected abstract void formatList(java.lang.StringBuilder, java.lang.String[]);

    protected abstract org.apache.flink.configuration.description.Formatter newInstance();

    private static java.lang.String escapeFormatPlaceholder(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%s", "randomPlaceholderForStringFormat");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("%", "%%");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("randomPlaceholderForStringFormat", "%s");

        return $r3;
    }

    public static java.lang.String[] lambda$format$3(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    public java.lang.String lambda$format$2(org.apache.flink.configuration.description.InlineElement)
    {
        org.apache.flink.configuration.description.Formatter r0, r2;
        org.apache.flink.configuration.description.InlineElement r1;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.InlineElement;

        r2 = virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: org.apache.flink.configuration.description.Formatter newInstance()>();

        interfaceinvoke r1.<org.apache.flink.configuration.description.InlineElement: void format(org.apache.flink.configuration.description.Formatter)>(r2);

        $r3 = specialinvoke r2.<org.apache.flink.configuration.description.Formatter: java.lang.String finalizeFormatting()>();

        return $r3;
    }

    public static java.lang.String[] lambda$format$1(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    public java.lang.String lambda$format$0(org.apache.flink.configuration.description.InlineElement)
    {
        org.apache.flink.configuration.description.Formatter r0, r2;
        org.apache.flink.configuration.description.InlineElement r1;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.configuration.description.Formatter;

        r1 := @parameter0: org.apache.flink.configuration.description.InlineElement;

        r2 = virtualinvoke r0.<org.apache.flink.configuration.description.Formatter: org.apache.flink.configuration.description.Formatter newInstance()>();

        interfaceinvoke r1.<org.apache.flink.configuration.description.InlineElement: void format(org.apache.flink.configuration.description.Formatter)>(r2);

        $r3 = specialinvoke r2.<org.apache.flink.configuration.description.Formatter: java.lang.String finalizeFormatting()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.configuration.description.Formatter: java.lang.String TEMPORARY_PLACEHOLDER> = "randomPlaceholderForStringFormat";

        return;
    }
}
