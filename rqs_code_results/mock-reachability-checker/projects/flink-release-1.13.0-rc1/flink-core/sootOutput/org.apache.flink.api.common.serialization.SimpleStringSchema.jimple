public class org.apache.flink.api.common.serialization.SimpleStringSchema extends java.lang.Object implements org.apache.flink.api.common.serialization.DeserializationSchema, org.apache.flink.api.common.serialization.SerializationSchema
{
    private static final long serialVersionUID;
    private transient java.nio.charset.Charset charset;

    public void <init>()
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.nio.charset.Charset $r1;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: void <init>(java.nio.charset.Charset)>($r1);

        return;
    }

    public void <init>(java.nio.charset.Charset)
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.nio.charset.Charset r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.nio.charset.Charset) $r2;

        r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset> = $r3;

        return;
    }

    public java.nio.charset.Charset getCharset()
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.nio.charset.Charset $r1;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        $r1 = r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset>;

        return $r1;
    }

    public java.lang.String deserialize(byte[])
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        byte[] r1;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.String;

        $r3 = r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r3);

        return $r2;
    }

    public boolean isEndOfStream(java.lang.String)
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public byte[] serialize(java.lang.String)
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.lang.String r1;
        java.nio.charset.Charset $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset>;

        $r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        return $r3;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r1;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        $r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.io.ObjectOutputStream r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset>;

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r3);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.io.ObjectInputStream r1;
        java.lang.String r2;
        java.nio.charset.Charset $r3;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>();

        $r3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.nio.charset.Charset charset> = $r3;

        return;
    }

    public volatile boolean isEndOfStream(java.lang.Object)
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: boolean isEndOfStream(java.lang.String)>($r2);

        return $z0;
    }

    public volatile java.lang.Object deserialize(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: java.lang.String deserialize(byte[])>(r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object)
    {
        org.apache.flink.api.common.serialization.SimpleStringSchema r0;
        java.lang.Object r1;
        java.lang.String $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.common.serialization.SimpleStringSchema;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.serialization.SimpleStringSchema: byte[] serialize(java.lang.String)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.serialization.SimpleStringSchema: long serialVersionUID> = 1L;

        return;
    }
}
