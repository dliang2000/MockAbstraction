public class org.apache.commons.lang3.StringUtils extends java.lang.Object
{
    public static final java.lang.String SPACE;
    public static final java.lang.String EMPTY;
    public static final java.lang.String LF;
    public static final java.lang.String CR;
    public static final int INDEX_NOT_FOUND;
    private static final int PAD_LIMIT;
    private static final java.util.regex.Pattern WHITESPACE_PATTERN;

    public void <init>()
    {
        org.apache.commons.lang3.StringUtils r0;

        r0 := @this: org.apache.commons.lang3.StringUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isNotEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static transient boolean isAnyEmpty(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        int i0, i1;
        java.lang.CharSequence r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r0[i1];

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static transient boolean isNoneEmpty(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyEmpty(java.lang.CharSequence[])>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isBlank(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i1, i3;
        char $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return 1;

     label2:
        i3 = 0;

     label3:
        if i3 >= $i1 goto label5;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static boolean isNotBlank(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static transient boolean isAnyBlank(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        int i0, i1;
        java.lang.CharSequence r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r0[i1];

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static transient boolean isNoneBlank(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyBlank(java.lang.CharSequence[])>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String trim(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        return $r1;
    }

    public static java.lang.String trimToNull(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String trim(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public static java.lang.String trimToEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        return $r1;
    }

    public static java.lang.String strip(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String stripToNull(java.lang.String)
    {
        boolean $z0;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = null;

        goto label3;

     label2:
        $r2 = r1;

     label3:
        return $r2;
    }

    public static java.lang.String stripToEmpty(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(r0, null);

     label2:
        return $r1;
    }

    public static java.lang.String strip(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r2, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        return r2;

     label1:
        r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)>(r2, r0);

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)>(r3, r0);

        return $r1;
    }

    public static java.lang.String stripStart(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int $i1, $i3, i5;
        boolean $z0, $z1;
        char $c2, $c4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        i5 = 0;

        if r1 != null goto label4;

     label3:
        if i5 == $i1 goto label6;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c4);

        if $z1 == 0 goto label6;

        i5 = i5 + 1;

        goto label3;

     label4:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return r0;

     label5:
        if i5 == $i1 goto label6;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c2);

        if $i3 == -1 goto label6;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        return $r2;
    }

    public static java.lang.String stripEnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int $i0, $i1, $i3, $i4, i6;
        boolean $z0, $z1;
        char $c2, $c5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = $i0;

        if $i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        if r1 != null goto label4;

     label3:
        if i6 == 0 goto label6;

        $i4 = i6 - 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c5);

        if $z1 == 0 goto label6;

        i6 = i6 + -1;

        goto label3;

     label4:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        return r0;

     label5:
        if i6 == 0 goto label6;

        $i1 = i6 - 1;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i1);

        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c2);

        if $i3 == -1 goto label6;

        i6 = i6 + -1;

        goto label5;

     label6:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        return $r2;
    }

    public static transient java.lang.String[] stripAll(java.lang.String[])
    {
        java.lang.String[] r0, $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] stripAll(java.lang.String[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String[] stripAll(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0, r2;
        java.lang.String r1, $r3, $r4;
        int $i1, i2;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        return r0;

     label2:
        r2 = newarray (java.lang.String)[$i1];

        i2 = 0;

     label3:
        if i2 >= $i1 goto label4;

        $r3 = r0[i2];

        $r4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>($r3, r1);

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static java.lang.String stripAccents(java.lang.String)
    {
        java.lang.String r0, r2, $r5;
        java.util.regex.Pattern r1;
        java.text.Normalizer$Form $r3;
        java.util.regex.Matcher $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{InCombiningDiacriticalMarks}+");

        $r3 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFD>;

        r2 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>(r0, $r3);

        $r4 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");

        return $r5;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label4;

        $z2 = r1 instanceof java.lang.String;

        if $z2 == 0 goto label4;

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z3;

     label4:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $z1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 0, 0, r1, 0, $i2);

        return $z1;
    }

    public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label4;

     label1:
        if r0 != r1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        if r0 != r1 goto label5;

        return 1;

     label5:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i0 == $i1 goto label6;

        return 0;

     label6:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 1, 0, r1, 0, $i2);

        return $z0;
    }

    public static int indexOf(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(r0, i0, 0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(r0, i0, i1);

        return $i2;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, 0);

        return $i0;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, i0);

        return $i1;
    }

    public static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang3.StringUtils: int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)>(r0, r1, i0, 0);

        return $i1;
    }

    private static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, i7;
        boolean z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 == null goto label01;

        if r1 == null goto label01;

        if i0 > 0 goto label02;

     label01:
        return -1;

     label02:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label05;

        if z0 == 0 goto label03;

        $i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        goto label04;

     label03:
        $i4 = 0;

     label04:
        return $i4;

     label05:
        i5 = 0;

        if z0 == 0 goto label06;

        $i6 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        goto label07;

     label06:
        $i6 = -1;

     label07:
        i7 = $i6;

     label08:
        if z0 == 0 goto label09;

        $i3 = i7 - 1;

        i7 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, $i3);

        goto label10;

     label09:
        $i2 = i7 + 1;

        i7 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, $i2);

     label10:
        if i7 >= 0 goto label11;

        return i7;

     label11:
        i5 = i5 + 1;

        if i5 < i0 goto label08;

        return i7;
    }

    public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, 0);

        return $i0;
    }

    public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i6 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        if i6 >= 0 goto label3;

        i6 = 0;

     label3:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i3 = $i1 - $i2;

        i0 = $i3 + 1;

        if i6 <= i0 goto label4;

        return -1;

     label4:
        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i4 != 0 goto label5;

        return i6;

     label5:
        i7 = i6;

     label6:
        if i7 >= i0 goto label8;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 1, i7, r1, 0, $i5);

        if $z0 == 0 goto label7;

        return i7;

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        return -1;
    }

    public static int lastIndexOf(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,int,int)>(r0, i0, $i1);

        return $i2;
    }

    public static int lastIndexOf(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $i2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,int,int)>(r0, i0, i1);

        return $i2;
    }

    public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, $i0);

        return $i1;
    }

    public static int lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang3.StringUtils: int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)>(r0, r1, i0, 1);

        return $i1;
    }

    public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, i0);

        return $i1;
    }

    public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <org.apache.commons.lang3.StringUtils: int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, $i0);

        return $i1;
    }

    public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i7 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = $i0 - $i1;

        if i7 <= $i2 goto label3;

        $i5 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i6 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i7 = $i5 - $i6;

     label3:
        if i7 >= 0 goto label4;

        return -1;

     label4:
        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i3 != 0 goto label5;

        return i7;

     label5:
        i8 = i7;

     label6:
        if i8 < 0 goto label8;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 1, i8, r1, 0, $i4);

        if $z0 == 0 goto label7;

        return i8;

     label7:
        i8 = i8 + -1;

        goto label6;

     label8:
        return -1;
    }

    public static boolean contains(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(r0, i0, 0);

        if $i1 < 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean contains(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $i0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, 0);

        if $i0 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public static boolean containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = $i2 - i0;

        i3 = 0;

     label3:
        if i3 > i1 goto label5;

        $z0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, 1, i3, r1, 0, i0);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static boolean containsWhitespace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static transient int indexOfAny(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label8;

        c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label7;

        $c5 = r1[i11];

        if $c5 != c4 goto label6;

        if i10 >= i1 goto label5;

        if i11 >= i3 goto label5;

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label5;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i7);

        if $c8 != $c9 goto label6;

        return i10;

     label5:
        return i10;

     label6:
        i11 = i11 + 1;

        goto label4;

     label7:
        i10 = i10 + 1;

        goto label3;

     label8:
        return -1;
    }

    public static int indexOfAny(java.lang.CharSequence, java.lang.String)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;
        boolean $z0, $z1;
        char[] $r2;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $i0 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfAny(java.lang.CharSequence,char[])>(r0, $r2);

        return $i0;
    }

    public static transient boolean containsAny(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = lengthof r1;

        i2 = i0 - 1;

        i3 = i1 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label9;

        c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i1 goto label8;

        $c5 = r1[i11];

        if $c5 != c4 goto label7;

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label6;

        if i11 != i3 goto label5;

        return 1;

     label5:
        if i10 >= i2 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i7);

        if $c8 != $c9 goto label7;

        return 1;

     label6:
        return 1;

     label7:
        i11 = i11 + 1;

        goto label4;

     label8:
        i10 = i10 + 1;

        goto label3;

     label9:
        return 0;
    }

    public static boolean containsAny(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: char[] toCharArray(java.lang.CharSequence)>(r1);

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsAny(java.lang.CharSequence,char[])>(r0, $r2);

        return $z0;
    }

    public static transient int indexOfAnyBut(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label8;

        c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label6;

        $c5 = r1[i11];

        if $c5 != c4 goto label5;

        if i10 >= i1 goto label7;

        if i11 >= i3 goto label7;

        $z2 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);

        if $z2 == 0 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i7);

        if $c8 != $c9 goto label5;

        goto label7;

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        return i10;

     label7:
        i10 = i10 + 1;

        goto label3;

     label8:
        return -1;
    }

    public static int indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i3, $i4, $i5, $i6, i7;
        char c1, c2;
        boolean z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z2 == 0 goto label2;

     label1:
        return -1;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i7 = 0;

     label3:
        if i7 >= i0 goto label9;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i7);

        $i3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(r1, c1, 0);

        if $i3 < 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        z0 = $z4;

        $i4 = i7 + 1;

        if $i4 >= i0 goto label7;

        $z3 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c1);

        if $z3 == 0 goto label7;

        $i5 = i7 + 1;

        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i5);

        if $z4 == 0 goto label6;

        $i6 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(r1, c2, 0);

        if $i6 >= 0 goto label6;

        return i7;

     label6:
        goto label8;

     label7:
        if z0 != 0 goto label8;

        return i7;

     label8:
        i7 = i7 + 1;

        goto label3;

     label9:
        return -1;
    }

    public static transient boolean containsOnly(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence r0;
        char[] r1;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        if r1 == null goto label1;

        if r0 != null goto label2;

     label1:
        return 0;

     label2:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label3;

        return 1;

     label3:
        $i1 = lengthof r1;

        if $i1 != 0 goto label4;

        return 0;

     label4:
        $i2 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfAnyBut(java.lang.CharSequence,char[])>(r0, r1);

        if $i2 != -1 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public static boolean containsOnly(java.lang.CharSequence, java.lang.String)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsOnly(java.lang.CharSequence,char[])>(r0, $r2);

        return $z0;
    }

    public static transient boolean containsNone(java.lang.CharSequence, char[])
    {
        java.lang.CharSequence r0;
        char[] r1;
        int i0, i1, i2, i3, $i6, $i7, i10, i11;
        char c4, $c5, $c8, $c9;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: char[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 1;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = i0 - 1;

        i2 = lengthof r1;

        i3 = i2 - 1;

        i10 = 0;

     label3:
        if i10 >= i0 goto label9;

        c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        i11 = 0;

     label4:
        if i11 >= i2 goto label8;

        $c5 = r1[i11];

        if $c5 != c4 goto label7;

        $z0 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(c4);

        if $z0 == 0 goto label6;

        if i11 != i3 goto label5;

        return 0;

     label5:
        if i10 >= i1 goto label7;

        $i6 = i11 + 1;

        $c8 = r1[$i6];

        $i7 = i10 + 1;

        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i7);

        if $c8 != $c9 goto label7;

        return 0;

     label6:
        return 0;

     label7:
        i11 = i11 + 1;

        goto label4;

     label8:
        i10 = i10 + 1;

        goto label3;

     label9:
        return 1;
    }

    public static boolean containsNone(java.lang.CharSequence, java.lang.String)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;
        char[] $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 1;

     label2:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsNone(java.lang.CharSequence,char[])>(r0, $r2);

        return $z0;
    }

    public static transient int indexOfAny(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, r2;
        java.lang.CharSequence[] r1;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        i0 = lengthof r1;

        i1 = 2147483647;

        i2 = 0;

     label3:
        if i2 >= i0 goto label7;

        r2 = r1[i2];

        if r2 != null goto label4;

        goto label6;

     label4:
        i3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r2, 0);

        if i3 != -1 goto label5;

        goto label6;

     label5:
        if i3 >= i1 goto label6;

        i1 = i3;

     label6:
        i2 = i2 + 1;

        goto label3;

     label7:
        if i1 != 2147483647 goto label8;

        $i4 = -1;

        goto label9;

     label8:
        $i4 = i1;

     label9:
        return $i4;
    }

    public static transient int lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, r2;
        java.lang.CharSequence[] r1;
        int i0, $i1, i2, i3, i4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence[];

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return -1;

     label2:
        i0 = lengthof r1;

        i2 = -1;

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        r2 = r1[i3];

        if r2 != null goto label4;

        goto label5;

     label4:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i4 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r2, $i1);

        if i4 <= i2 goto label5;

        i2 = i4;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return i2;
    }

    public static java.lang.String substring(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i2 >= 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = $i1 + i2;

     label2:
        if i2 >= 0 goto label3;

        i2 = 0;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 <= $i0 goto label4;

        return "";

     label4:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        return $r1;
    }

    public static java.lang.String substring(java.lang.String, int, int)
    {
        java.lang.String r0, $r1;
        int $i0, $i1, $i2, i3, i4;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i4 >= 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = $i2 + i4;

     label2:
        if i3 >= 0 goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = $i1 + i3;

     label3:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 <= $i0 goto label4;

        i4 = virtualinvoke r0.<java.lang.String: int length()>();

     label4:
        if i3 <= i4 goto label5;

        return "";

     label5:
        if i3 >= 0 goto label6;

        i3 = 0;

     label6:
        if i4 >= 0 goto label7;

        i4 = 0;

     label7:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        return $r1;
    }

    public static java.lang.String left(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 0 goto label2;

        return "";

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r1;
    }

    public static java.lang.String right(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 0 goto label2;

        return "";

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - i0;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i3);

        return $r1;
    }

    public static java.lang.String mid(java.lang.String, int, int)
    {
        java.lang.String r0, $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i5 <= $i1 goto label3;

     label2:
        return "";

     label3:
        if i5 >= 0 goto label4;

        i5 = 0;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = i5 + i0;

        if $i2 > $i3 goto label5;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        return $r2;

     label5:
        $i4 = i5 + i0;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, $i4);

        return $r1;
    }

    public static java.lang.String substringBefore(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        return r0;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        return "";

     label3:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label4;

        return r0;

     label4:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static java.lang.String substringAfter(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        if r1 != null goto label2;

        return "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 != -1 goto label3;

        return "";

     label3:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = i0 + $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r2;
    }

    public static java.lang.String substringBeforeLast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        if i0 != -1 goto label3;

        return r0;

     label3:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static java.lang.String substringAfterLast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

        return "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(r1);

        if i0 == -1 goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i1 - $i2;

        if i0 != $i3 goto label4;

     label3:
        return "";

     label4:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        return $r2;
    }

    public static java.lang.String substringBetween(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r1);

        return $r2;
    }

    public static java.lang.String substringBetween(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return null;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(r1);

        if i0 == -1 goto label3;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r2, $i3);

        if i1 == -1 goto label3;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i0 + $i4;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, i1);

        return $r3;

     label3:
        return null;
    }

    public static java.lang.String[] substringsBetween(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r8;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r4;
        java.lang.String[] $r5, $r7, $r9;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label3;

        $r9 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r9;

     label3:
        i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label4:
        $i4 = i0 - i1;

        if i6 >= $i4 goto label7;

        i7 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i6);

        if i7 >= 0 goto label5;

        goto label7;

     label5:
        i8 = i7 + i2;

        i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r2, i8);

        if i3 >= 0 goto label6;

        goto label7;

     label6:
        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i8, i3);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i6 = i3 + i1;

        goto label4;

     label7:
        $z3 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label8;

        return null;

     label8:
        $i5 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i5];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public static java.lang.String[] split(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>(r0, null, -1);

        return $r1;
    }

    public static java.lang.String[] split(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(r0, c0, 0);

        return $r1;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 0);

        return $r2;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 0);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 1);

        return $r2;
    }

    public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 1);

        return $r2;
    }

    private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, $r4, $r9, $r10, $r11, $r12;
        int i0, i1, i2, $i3, i4, i5, i6;
        boolean z0, $z1;
        java.lang.String[] $r3, $r6, $r8, $r13;
        java.util.ArrayList $r5;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        $r13 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r13;

     label02:
        if r1 == null goto label03;

        $r4 = "";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label04;

     label03:
        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, null, i0, z0);

        return $r3;

     label04:
        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i4 = 0;

        i5 = 0;

        i6 = 0;

     label05:
        if i6 >= i1 goto label11;

        i6 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i5);

        if i6 <= -1 goto label10;

        if i6 <= i5 goto label07;

        i4 = i4 + 1;

        if i4 != i0 goto label06;

        i6 = i1;

        $r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label05;

     label06:
        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, i6);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        i5 = i6 + i2;

        goto label05;

     label07:
        if z0 == 0 goto label09;

        i4 = i4 + 1;

        if i4 != i0 goto label08;

        i6 = i1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        goto label09;

     label08:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>("");

     label09:
        i5 = i6 + i2;

        goto label05;

     label10:
        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i5);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        i6 = i1;

        goto label05;

     label11:
        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = newarray (java.lang.String)[$i3];

        $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, null, -1, 1);

        return $r1;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, char)
    {
        java.lang.String r0;
        char c0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(r0, c0, 1);

        return $r1;
    }

    private static java.lang.String[] splitWorker(java.lang.String, char, boolean)
    {
        java.lang.String r0, $r3, $r4;
        char c0, $c2;
        boolean z0, z3, z4;
        int i1, i3, i4, $i5;
        java.util.ArrayList $r2;
        java.lang.String[] $r5, $r6, $r8;
        java.lang.Object[] $r7;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label2;

        $r5 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r5;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i3 = 0;

        i4 = 0;

        z3 = 0;

        z4 = 0;

     label3:
        if i3 >= i1 goto label7;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 != c0 goto label6;

        if z3 != 0 goto label4;

        if z0 == 0 goto label5;

     label4:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        z3 = 0;

        z4 = 1;

     label5:
        i3 = i3 + 1;

        i4 = i3;

        goto label3;

     label6:
        z4 = 0;

        z3 = 1;

        i3 = i3 + 1;

        goto label3;

     label7:
        if z3 != 0 goto label8;

        if z0 == 0 goto label9;

        if z4 == 0 goto label9;

     label8:
        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i4, i3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label9:
        $i5 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i5];

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, -1, 1);

        return $r2;
    }

    public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(r0, r1, i0, 1);

        return $r2;
    }

    private static java.lang.String[] splitWorker(java.lang.String, java.lang.String, int, boolean)
    {
        java.lang.String r0, r1, $r4, $r5, $r6, $r7;
        int i0, i1, $i3, $i5, $i6, $i8, $i10, i11, i12, i13, $i14;
        boolean z0, $z4, z6, z7;
        char c2, $c4, $c7, $c9;
        java.util.ArrayList $r3;
        java.lang.String[] $r8, $r9, $r11;
        java.lang.Object[] $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 != null goto label01;

        return null;

     label01:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        $r8 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r8;

     label02:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i11 = 1;

        i12 = 0;

        i13 = 0;

        z6 = 0;

        z7 = 0;

        if r1 != null goto label08;

     label03:
        if i12 >= i1 goto label20;

        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $z4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c9);

        if $z4 == 0 goto label07;

        if z6 != 0 goto label04;

        if z0 == 0 goto label06;

     label04:
        z7 = 1;

        $i10 = i11;

        i11 = i11 + 1;

        if $i10 != i0 goto label05;

        i12 = i1;

        z7 = 0;

     label05:
        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        z6 = 0;

     label06:
        i12 = i12 + 1;

        i13 = i12;

        goto label03;

     label07:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label03;

     label08:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 != 1 goto label15;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

     label09:
        if i12 >= i1 goto label14;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        if $c7 != c2 goto label13;

        if z6 != 0 goto label10;

        if z0 == 0 goto label12;

     label10:
        z7 = 1;

        $i8 = i11;

        i11 = i11 + 1;

        if $i8 != i0 goto label11;

        i12 = i1;

        z7 = 0;

     label11:
        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        z6 = 0;

     label12:
        i12 = i12 + 1;

        i13 = i12;

        goto label09;

     label13:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label09;

     label14:
        goto label20;

     label15:
        if i12 >= i1 goto label20;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i12);

        $i5 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c4);

        if $i5 < 0 goto label19;

        if z6 != 0 goto label16;

        if z0 == 0 goto label18;

     label16:
        z7 = 1;

        $i6 = i11;

        i11 = i11 + 1;

        if $i6 != i0 goto label17;

        i12 = i1;

        z7 = 0;

     label17:
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        z6 = 0;

     label18:
        i12 = i12 + 1;

        i13 = i12;

        goto label15;

     label19:
        z7 = 0;

        z6 = 1;

        i12 = i12 + 1;

        goto label15;

     label20:
        if z6 != 0 goto label21;

        if z0 == 0 goto label22;

        if z7 == 0 goto label22;

     label21:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i13, i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

     label22:
        $i14 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r9 = newarray (java.lang.String)[$i14];

        $r10 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        return $r11;
    }

    public static java.lang.String[] splitByCharacterType(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    private static java.lang.String[] splitByCharacterType(java.lang.String, boolean)
    {
        java.lang.String r0, $r4, $r8, $r10;
        boolean z0, $z1;
        char[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, i9, i10, i11, $i12;
        java.util.ArrayList $r3;
        char $c2, $c7;
        java.lang.String[] $r5, $r7, $r9;
        java.lang.Object[] $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 != null goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r9 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r9;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i9 = 0;

        $c2 = r1[0];

        i10 = staticinvoke <java.lang.Character: int getType(char)>($c2);

        i11 = 0 + 1;

     label3:
        $i3 = lengthof r1;

        if i11 >= $i3 goto label9;

        $c7 = r1[i11];

        i0 = staticinvoke <java.lang.Character: int getType(char)>($c7);

        if i0 != i10 goto label4;

        goto label8;

     label4:
        if z0 == 0 goto label6;

        if i0 != 2 goto label6;

        if i10 != 1 goto label6;

        i1 = i11 - 1;

        if i1 == i9 goto label5;

        $r8 = new java.lang.String;

        $i8 = i1 - i9;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>(r1, i9, $i8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        i9 = i1;

     label5:
        goto label7;

     label6:
        $r10 = new java.lang.String;

        $i12 = i11 - i9;

        specialinvoke $r10.<java.lang.String: void <init>(char[],int,int)>(r1, i9, $i12);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        i9 = i11;

     label7:
        i10 = i0;

     label8:
        i11 = i11 + 1;

        goto label3;

     label9:
        $r4 = new java.lang.String;

        $i4 = lengthof r1;

        $i5 = $i4 - i9;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r1, i9, $i5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        $i6 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r5 = newarray (java.lang.String)[$i6];

        $r6 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    public static transient java.lang.String join(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(r0, null);

        return $r1;
    }

    public static java.lang.String join(java.lang.Object[], char)
    {
        java.lang.Object[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Object[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(long[], char)
    {
        long[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: long[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(long[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(int[], char)
    {
        int[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: int[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(int[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(short[], char)
    {
        short[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: short[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(short[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(byte[], char)
    {
        byte[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(byte[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(char[], char)
    {
        char[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(char[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(float[], char)
    {
        float[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: float[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(float[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(double[], char)
    {
        double[] r0;
        char c0;
        int $i1;
        java.lang.String $r1;

        r0 := @parameter0: double[];

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i1 = lengthof r0;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(double[],char,int,int)>(r0, c0, 0, $i1);

        return $r1;
    }

    public static java.lang.String join(java.lang.Object[], char, int, int)
    {
        java.lang.Object[] r0;
        char c0;
        int i1, i2, i3, $i4, i5;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i5 = i1;

     label3:
        if i5 >= i2 goto label6;

        if i5 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $r4 = r0[i5];

        if $r4 == null goto label5;

        $r5 = r0[i5];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(long[], char, int, int)
    {
        long[] r0;
        char c0;
        int i1, i2, i3, $i4, i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        long $l5;

        r0 := @parameter0: long[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i6 = i1;

     label3:
        if i6 >= i2 goto label5;

        if i6 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $l5 = r0[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        i6 = i6 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(int[], char, int, int)
    {
        int[] r0;
        char c0;
        int i1, i2, i3, $i4, $i5, i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @parameter0: int[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i6 = i1;

     label3:
        if i6 >= i2 goto label5;

        if i6 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $i5 = r0[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        i6 = i6 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(byte[], char, int, int)
    {
        byte[] r0;
        char c0;
        int i1, i2, i3, $i4, i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        byte $b5;

        r0 := @parameter0: byte[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i6 = i1;

     label3:
        if i6 >= i2 goto label5;

        if i6 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $b5 = r0[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b5);

        i6 = i6 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(short[], char, int, int)
    {
        short[] r0;
        char c0;
        int i1, i2, i3, $i4, i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        short $s5;

        r0 := @parameter0: short[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i6 = i1;

     label3:
        if i6 >= i2 goto label5;

        if i6 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $s5 = r0[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s5);

        i6 = i6 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(char[], char, int, int)
    {
        char[] r0;
        char c0, $c5;
        int i1, i2, i3, $i4, i6;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i6 = i1;

     label3:
        if i6 >= i2 goto label5;

        if i6 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $c5 = r0[i6];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(double[], char, int, int)
    {
        double[] r0;
        char c0;
        int i1, i2, i3, $i4, i5;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        double $d0;

        r0 := @parameter0: double[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i5 = i1;

     label3:
        if i5 >= i2 goto label5;

        if i5 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $d0 = r0[i5];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(float[], char, int, int)
    {
        float[] r0;
        char c0;
        int i1, i2, i3, $i4, i5;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        float $f0;

        r0 := @parameter0: float[];

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        i3 = i2 - i1;

        if i3 > 0 goto label2;

        return "";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i4 = i3 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        i5 = i1;

     label3:
        if i5 >= i2 goto label5;

        if i5 <= i1 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label4:
        $f0 = r0[i5];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>(r0, r1, 0, $i0);

        return $r2;
    }

    public static java.lang.String join(java.lang.Object[], java.lang.String, int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3, i4;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, r8;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        r8 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        if r8 != null goto label2;

        r8 = "";

     label2:
        i2 = i1 - i0;

        if i2 > 0 goto label3;

        return "";

     label3:
        $r2 = new java.lang.StringBuilder;

        $i3 = i2 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        i4 = i0;

     label4:
        if i4 >= i1 goto label7;

        if i4 <= i0 goto label5;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

     label5:
        $r4 = r0[i4];

        if $r4 == null goto label6;

        $r5 = r0[i4];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

     label6:
        i4 = i4 + 1;

        goto label4;

     label7:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String join(java.util.Iterator, char)
    {
        java.util.Iterator r0;
        char c0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, r8;

        r0 := @parameter0: java.util.Iterator;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return "";

     label2:
        r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        r8 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.String toString(java.lang.Object)>(r1);

        return r8;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(256);

        if r1 == null goto label4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

     label4:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if r2 == null goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label5:
        goto label4;

     label6:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String join(java.util.Iterator, java.lang.String)
    {
        java.util.Iterator r0;
        java.lang.String r1, $r5, r9;
        java.lang.Object r2, r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.util.Iterator;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return "";

     label2:
        r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        r9 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.String toString(java.lang.Object)>(r2);

        return r9;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(256);

        if r2 == null goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label4:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        if r1 == null goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label5:
        r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if r3 == null goto label6;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

     label6:
        goto label4;

     label7:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String join(java.lang.Iterable, char)
    {
        java.lang.Iterable r0;
        char c0;
        java.util.Iterator $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Iterable;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>($r1, c0);

        return $r2;
    }

    public static java.lang.String join(java.lang.Iterable, java.lang.String)
    {
        java.lang.Iterable r0;
        java.lang.String r1, $r3;
        java.util.Iterator $r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>($r2, r1);

        return $r3;
    }

    public static java.lang.String deleteWhitespace(java.lang.String)
    {
        java.lang.String r0, $r2;
        int i0, $i2, i4, i5;
        char[] r1;
        boolean $z0, $z1;
        char $c1, $c3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[i0];

        i4 = 0;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z1 != 0 goto label3;

        $i2 = i4;

        i4 = i4 + 1;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        r1[$i2] = $c3;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        if i4 != i0 goto label5;

        return r0;

     label5:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i4);

        return $r2;
    }

    public static java.lang.String removeStart(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeStartIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeEnd(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String removeEndIgnoreCase(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        if $z2 == 0 goto label3;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        return $r2;

     label3:
        return r0;
    }

    public static java.lang.String remove(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, "", -1);

        return $r2;
    }

    public static java.lang.String remove(java.lang.String, char)
    {
        java.lang.String r0, $r2;
        char c0, $c3, $c5;
        char[] r1;
        boolean $z0;
        int $i1, $i2, $i4, i6, i7;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c0);

        if $i1 != -1 goto label2;

     label1:
        return r0;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i6 = 0;

        i7 = 0;

     label3:
        $i2 = lengthof r1;

        if i7 >= $i2 goto label5;

        $c3 = r1[i7];

        if $c3 == c0 goto label4;

        $i4 = i6;

        i6 = i6 + 1;

        $c5 = r1[i7];

        r1[$i4] = $c5;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, 0, i6);

        return $r2;
    }

    public static java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, r2, 1);

        return $r3;
    }

    public static java.lang.String replacePattern(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(r1, 32);

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r5 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(r2);

        return $r5;
    }

    public static java.lang.String removePattern(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, "");

        return $r2;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(r0, r1, r2, -1);

        return $r3;
    }

    public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, r2, $r4, $r6, $r7;
        int i0, $i1, i2, i3, i4, i5, $i6, i7, $i9, i10, $i11, $i12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label01;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label01;

        if r2 == null goto label01;

        if i2 != 0 goto label02;

     label01:
        return r0;

     label02:
        i3 = 0;

        i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, 0);

        if i4 != -1 goto label03;

        return r0;

     label03:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        i5 = $i1 - i0;

        if i5 >= 0 goto label04;

        $i6 = 0;

        goto label05;

     label04:
        $i6 = i5;

     label05:
        i7 = $i6;

        if i2 >= 0 goto label06;

        $i9 = 16;

        goto label08;

     label06:
        if i2 <= 64 goto label07;

        $i9 = 64;

        goto label08;

     label07:
        $i9 = i2;

     label08:
        i10 = i7 * $i9;

        $r10 = new java.lang.StringBuilder;

        $i11 = virtualinvoke r0.<java.lang.String: int length()>();

        $i12 = $i11 + i10;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i12);

     label09:
        if i4 == -1 goto label11;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        i3 = i4 + i0;

        i2 = i2 + -1;

        if i2 != 0 goto label10;

        goto label11;

     label10:
        i4 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i3);

        goto label09;

     label11:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r0, r1, r2, 0, 0);

        return $r3;
    }

    public static java.lang.String replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1, r2;
        int $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        if r1 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r0, r1, r2, 1, $i1);

        return $r3;
    }

    private static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int)
    {
        java.lang.String r0, $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r29, r32;
        java.lang.String[] r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i16, i17, i18, i20, i21, i22, i23, i24, i25, i26, i27, i29, i30, i31, i32;
        boolean[] r3;
        java.lang.StringBuilder $r4, $r24, $r25, $r26, $r27, $r28;
        char $c11, $c13;
        java.lang.IllegalArgumentException $r23;
        java.lang.IllegalStateException $r30;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        if r0 == null goto label01;

        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label01;

        if r1 == null goto label01;

        $i3 = lengthof r1;

        if $i3 == 0 goto label01;

        if r2 == null goto label01;

        $i4 = lengthof r2;

        if $i4 != 0 goto label02;

     label01:
        return r0;

     label02:
        if i0 >= 0 goto label03;

        $r30 = new java.lang.IllegalStateException;

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Aborting to protect against StackOverflowError - output of one loop is the input of another");

        throw $r30;

     label03:
        i1 = lengthof r1;

        i2 = lengthof r2;

        if i1 == i2 goto label04;

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search and Replace array lengths don\'t match: ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label04:
        r3 = newarray (boolean)[i1];

        i17 = -1;

        i18 = -1;

        i20 = 0;

     label05:
        if i20 >= i1 goto label10;

        $z4 = r3[i20];

        if $z4 != 0 goto label09;

        $r19 = r1[i20];

        if $r19 == null goto label09;

        $r20 = r1[i20];

        $z5 = virtualinvoke $r20.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label09;

        $r21 = r2[i20];

        if $r21 != null goto label06;

        goto label09;

     label06:
        $r22 = r1[i20];

        i21 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r22);

        if i21 != -1 goto label07;

        r3[i20] = 1;

        goto label09;

     label07:
        if i17 == -1 goto label08;

        if i21 >= i17 goto label09;

     label08:
        i17 = i21;

        i18 = i20;

     label09:
        i20 = i20 + 1;

        goto label05;

     label10:
        if i17 != -1 goto label11;

        return r0;

     label11:
        i22 = 0;

        i23 = 0;

        i24 = 0;

     label12:
        $i5 = lengthof r1;

        if i24 >= $i5 goto label15;

        $r15 = r1[i24];

        if $r15 == null goto label14;

        $r16 = r2[i24];

        if $r16 != null goto label13;

        goto label14;

     label13:
        $r17 = r2[i24];

        $i14 = virtualinvoke $r17.<java.lang.String: int length()>();

        $r18 = r1[i24];

        $i15 = virtualinvoke $r18.<java.lang.String: int length()>();

        i25 = $i14 - $i15;

        if i25 <= 0 goto label14;

        $i16 = 3 * i25;

        i23 = i23 + $i16;

     label14:
        i24 = i24 + 1;

        goto label12;

     label15:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        $i7 = $i6 / 5;

        i26 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i7);

        $r4 = new java.lang.StringBuilder;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        $i9 = $i8 + i26;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i9);

     label16:
        if i17 == -1 goto label25;

        i27 = i22;

     label17:
        if i27 >= i17 goto label18;

        $c13 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i27);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13);

        i27 = i27 + 1;

        goto label17;

     label18:
        $r7 = r2[i18];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r1[i18];

        $i12 = virtualinvoke $r9.<java.lang.String: int length()>();

        i22 = i17 + $i12;

        i17 = -1;

        i18 = -1;

        i29 = 0;

     label19:
        if i29 >= i1 goto label24;

        $z2 = r3[i29];

        if $z2 != 0 goto label23;

        $r10 = r1[i29];

        if $r10 == null goto label23;

        $r11 = r1[i29];

        $z3 = virtualinvoke $r11.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label23;

        $r12 = r2[i29];

        if $r12 != null goto label20;

        goto label23;

     label20:
        $r13 = r1[i29];

        i30 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>($r13, i22);

        if i30 != -1 goto label21;

        r3[i29] = 1;

        goto label23;

     label21:
        if i17 == -1 goto label22;

        if i30 >= i17 goto label23;

     label22:
        i17 = i30;

        i18 = i29;

     label23:
        i29 = i29 + 1;

        goto label19;

     label24:
        goto label16;

     label25:
        i31 = virtualinvoke r0.<java.lang.String: int length()>();

        i32 = i22;

     label26:
        if i32 >= i31 goto label27;

        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i32);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        i32 = i32 + 1;

        goto label26;

     label27:
        r32 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 != 0 goto label28;

        return r32;

     label28:
        $i10 = i0 - 1;

        $r5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(r32, r1, r2, z0, $i10);

        return $r5;
    }

    public static java.lang.String replaceChars(java.lang.String, char, char)
    {
        java.lang.String r0, $r1;
        char c0, c1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(c0, c1);

        return $r1;
    }

    public static java.lang.String replaceChars(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4, r7;
        int i0, i1, i3, i5;
        char c2, $c4;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        if r7 != null goto label3;

        r7 = "";

     label3:
        z2 = 0;

        i0 = virtualinvoke r7.<java.lang.String: int length()>();

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i1);

        i5 = 0;

     label4:
        if i5 >= i1 goto label7;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5);

        i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c2);

        if i3 < 0 goto label5;

        z2 = 1;

        if i3 >= i0 goto label6;

        $c4 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label6;

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label6:
        i5 = i5 + 1;

        goto label4;

     label7:
        if z2 == 0 goto label8;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label8:
        return r0;
    }

    public static java.lang.String overlay(java.lang.String, java.lang.String, int, int)
    {
        java.lang.String r0, $r2, $r5, $r7, r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        if r8 != null goto label2;

        r8 = "";

     label2:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= 0 goto label3;

        i7 = 0;

     label3:
        if i7 <= i0 goto label4;

        i7 = i0;

     label4:
        if i8 >= 0 goto label5;

        i8 = 0;

     label5:
        if i8 <= i0 goto label6;

        i8 = i0;

     label6:
        if i7 <= i8 goto label7;

        i1 = i7;

        i7 = i8;

        i8 = i1;

     label7:
        $r1 = new java.lang.StringBuilder;

        $i2 = i0 + i7;

        $i3 = $i2 - i8;

        $i4 = virtualinvoke r8.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $i6 = $i5 + 1;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i6);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i8);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String chomp(java.lang.String)
    {
        java.lang.String r0, $r1;
        char c0, $c4, c5;
        boolean $z0;
        int $i1, $i2, $i3, i6;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 1 goto label4;

        c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c5 == 13 goto label2;

        if c5 != 10 goto label3;

     label2:
        return "";

     label3:
        return r0;

     label4:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = $i2 - 1;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if c0 != 10 goto label5;

        $i3 = i6 - 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 13 goto label6;

        i6 = i6 + -1;

        goto label6;

     label5:
        if c0 == 13 goto label6;

        i6 = i6 + 1;

     label6:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        return $r1;
    }

    public static java.lang.String chomp(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static java.lang.String chop(java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0, i1, $i3, $i5;
        char c2, $c4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= 2 goto label2;

        return "";

     label2:
        i1 = i0 - 1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 != 10 goto label3;

        $i3 = i1 - 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 13 goto label3;

        $i5 = i1 - 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        return $r2;

     label3:
        return r1;
    }

    public static java.lang.String repeat(java.lang.String, int)
    {
        java.lang.String r0, $r2, $r3, $r5, $r7;
        int i0, i1, i2, $i5, $i6, i9, i10, i11;
        char c3, c4, $c7, $c8;
        char[] r1;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label01;

        return null;

     label01:
        if i0 > 0 goto label02;

        return "";

     label02:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 == 1 goto label03;

        if i1 != 0 goto label04;

     label03:
        return r0;

     label04:
        if i1 != 1 goto label05;

        if i0 > 8192 goto label05;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>($c8, i0);

        return $r7;

     label05:
        i2 = i1 * i0;

        lookupswitch(i1)
        {
            case 1: goto label06;
            case 2: goto label07;
            default: goto label10;
        };

     label06:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>($c7, i0);

        return $r3;

     label07:
        c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        r1 = newarray (char)[i2];

        $i5 = i0 * 2;

        i9 = $i5 - 2;

     label08:
        if i9 < 0 goto label09;

        r1[i9] = c3;

        $i6 = i9 + 1;

        r1[$i6] = c4;

        i10 = i9 + -1;

        i9 = i10 + -1;

        goto label08;

     label09:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(i2);

        i11 = 0;

     label11:
        if i11 >= i0 goto label12;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        i11 = i11 + 1;

        goto label11;

     label12:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String repeat(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, r2, $r3, $r7, $r8;
        int i0;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>(r0, i0);

        return $r3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>($r7, i0);

        $r8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(r2, r1);

        return $r8;
    }

    public static java.lang.String repeat(char, int)
    {
        char c0;
        int i1, i2;
        char[] r0;
        java.lang.String $r1;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        r0 = newarray (char)[i1];

        i2 = i1 - 1;

     label1:
        if i2 < 0 goto label2;

        r0[i2] = c0;

        i2 = i2 + -1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r0);

        return $r1;
    }

    public static java.lang.String rightPad(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String rightPad(java.lang.String, int, char)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4;
        int i0, i2, $i3;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - $i3;

        if i2 > 0 goto label2;

        return r0;

     label2:
        if i2 <= 8192 goto label3;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        $r4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(r0, i0, $r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(c1, i2);

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String rightPad(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        int i0, i1, i2, i3, $i4, i7;
        char[] r1, r2;
        boolean $z0;
        char $c5, $c6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r9);

        if $z0 == 0 goto label2;

        r9 = " ";

     label2:
        i1 = virtualinvoke r9.<java.lang.String: int length()>();

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        if i1 != 1 goto label4;

        if i3 > 8192 goto label4;

        $c6 = virtualinvoke r9.<java.lang.String: char charAt(int)>(0);

        $r8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r0, i0, $c6);

        return $r8;

     label4:
        if i3 != i1 goto label5;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>(r9);

        return $r7;

     label5:
        if i3 >= i1 goto label6;

        $r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        return $r6;

     label6:
        r1 = newarray (char)[i3];

        r2 = virtualinvoke r9.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label7:
        if i7 >= i3 goto label8;

        $i4 = i7 % i1;

        $c5 = r2[$i4];

        r1[i7] = $c5;

        i7 = i7 + 1;

        goto label7;

     label8:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        return $r4;
    }

    public static java.lang.String leftPad(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String leftPad(java.lang.String, int, char)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4;
        int i0, i2, $i3;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 != null goto label1;

        return null;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - $i3;

        if i2 > 0 goto label2;

        return r0;

     label2:
        if i2 <= 8192 goto label3;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        $r4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(r0, i0, $r3);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(c1, i2);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String leftPad(java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5, $r6, $r7, $r8, r9;
        int i0, i1, i2, i3, $i4, i7;
        char[] r1, r2;
        boolean $z0;
        char $c5, $c6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r9);

        if $z0 == 0 goto label2;

        r9 = " ";

     label2:
        i1 = virtualinvoke r9.<java.lang.String: int length()>();

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        if i1 != 1 goto label4;

        if i3 > 8192 goto label4;

        $c6 = virtualinvoke r9.<java.lang.String: char charAt(int)>(0);

        $r8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, i0, $c6);

        return $r8;

     label4:
        if i3 != i1 goto label5;

        $r7 = virtualinvoke r9.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r7;

     label5:
        if i3 >= i1 goto label6;

        $r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r6;

     label6:
        r1 = newarray (char)[i3];

        r2 = virtualinvoke r9.<java.lang.String: char[] toCharArray()>();

        i7 = 0;

     label7:
        if i7 >= i3 goto label8;

        $i4 = i7 % i1;

        $c5 = r2[$i4];

        r1[i7] = $c5;

        i7 = i7 + 1;

        goto label7;

     label8:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(r0);

        return $r4;
    }

    public static int length(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

     label2:
        return $i0;
    }

    public static java.lang.String center(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>(r0, i0, 32);

        return $r1;
    }

    public static java.lang.String center(java.lang.String, int, char)
    {
        int i0, i2, i3, $i4, $i5;
        char c1;
        java.lang.String r0, r1, r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        if r0 == null goto label1;

        if i0 > 0 goto label2;

     label1:
        return r0;

     label2:
        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        i3 = i0 - i2;

        if i3 > 0 goto label3;

        return r0;

     label3:
        $i4 = i3 / 2;

        $i5 = i2 + $i4;

        r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(r0, $i5, c1);

        r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(r1, i0, c1);

        return r2;
    }

    public static java.lang.String center(java.lang.String, int, java.lang.String)
    {
        int i0, i1, i2, $i3, $i4;
        boolean $z0;
        java.lang.String r0, r1, r2, r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        if i0 > 0 goto label2;

     label1:
        return r0;

     label2:
        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label3;

        r1 = " ";

     label3:
        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i2 = i0 - i1;

        if i2 > 0 goto label4;

        return r0;

     label4:
        $i3 = i2 / 2;

        $i4 = i1 + $i3;

        r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(r0, $i4, r1);

        r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(r2, i0, r1);

        return r3;
    }

    public static java.lang.String upperCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        return $r1;
    }

    public static java.lang.String upperCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(r1);

        return $r2;
    }

    public static java.lang.String lowerCase(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        return $r1;
    }

    public static java.lang.String lowerCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(r1);

        return $r2;
    }

    public static java.lang.String capitalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        char c1, $c3;
        int $i2;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

     label1:
        return r0;

     label2:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(c1);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i2);

        $c3 = staticinvoke <java.lang.Character: char toTitleCase(char)>(c1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String uncapitalize(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        char c1, $c3;
        int $i2;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

     label1:
        return r0;

     label2:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c1);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i2);

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String swapCase(java.lang.String)
    {
        java.lang.String r0, $r2;
        char[] r1;
        char c0, $c2, $c3, $c4;
        boolean $z0, $z1, $z2, $z3;
        int $i1, i5;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        i5 = 0;

     label2:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label6;

        c0 = r1[i5];

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z1 == 0 goto label3;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        r1[i5] = $c4;

        goto label5;

     label3:
        $z2 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(c0);

        if $z2 == 0 goto label4;

        $c3 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        r1[i5] = $c3;

        goto label5;

     label4:
        $z3 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c0);

        if $z3 == 0 goto label5;

        $c2 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0);

        r1[i5] = $c2;

     label5:
        i5 = i5 + 1;

        goto label2;

     label6:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public static int countMatches(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0, $z1;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i2 = 0;

        i3 = 0;

     label3:
        $i0 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(r0, r1, i3);

        if $i0 == -1 goto label4;

        i2 = i2 + 1;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i3 = $i0 + $i1;

        goto label3;

     label4:
        return i2;
    }

    public static boolean isAlpha(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphaSpace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphanumeric(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAlphanumericSpace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAsciiPrintable(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isNumeric(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isNumericSpace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i3;
        char $c1, $c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c1);

        if $z0 != 0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        if $c2 == 32 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isWhitespace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c1);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean isAllLowerCase(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static boolean isAllUpperCase(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        boolean $z0, $z1;
        char $c1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static java.lang.String defaultString(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r1 = "";

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    public static java.lang.String defaultString(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.CharSequence defaultIfBlank(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static java.lang.String reverse(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String reverseDelimited(java.lang.String, char)
    {
        java.lang.String r0, $r2;
        char c0;
        java.lang.String[] r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>(r0, c0);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[])>(r1);

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>(r1, c0);

        return $r2;
    }

    public static java.lang.String abbreviate(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int,int)>(r0, 0, i0);

        return $r1;
    }

    public static java.lang.String abbreviate(java.lang.String, int, int)
    {
        java.lang.String r0, $r4, $r6, $r9, $r10, $r12, $r15, $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r11, $r14, $r16, $r17;
        java.lang.IllegalArgumentException $r13, $r19;

        r0 := @parameter0: java.lang.String;

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 4 goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum abbreviation width is 4");

        throw $r19;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i16 <= $i2 goto label4;

        i16 = virtualinvoke r0.<java.lang.String: int length()>();

     label4:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        $i5 = $i3 - i16;

        $i4 = i0 - 3;

        if $i5 >= $i4 goto label5;

        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        $i15 = i0 - 3;

        i16 = $i14 - $i15;

     label5:
        if i16 > 4 goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $i13 = i0 - 3;

        $r15 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label6:
        if i0 >= 7 goto label7;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Minimum abbreviation width with offset is 7");

        throw $r13;

     label7:
        $i6 = i16 + i0;

        $i7 = $i6 - 3;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i7 >= $i8 goto label8;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i16);

        $i12 = i0 - 3;

        $r10 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,int)>($r9, $i12);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $i9 = virtualinvoke r0.<java.lang.String: int length()>();

        $i10 = i0 - 3;

        $i11 = $i9 - $i10;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i11);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String abbreviateMiddle(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, $r4, $r7, $r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i4 goto label3;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $i5 + 2;

        if i0 >= $i6 goto label4;

     label3:
        return r0;

     label4:
        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        i1 = i0 - $i7;

        $i9 = i1 / 2;

        $i8 = i1 % 2;

        i2 = $i9 + $i8;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i11 = i1 / 2;

        i3 = $i10 - $i11;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i0);

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String difference(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        int i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return r1;

     label1:
        if r1 != null goto label2;

        return r0;

     label2:
        i0 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        if i0 != -1 goto label3;

        return "";

     label3:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r2;
    }

    public static int indexOfDifference(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, $i2, i5, $i6;
        char $c3, $c4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 != r1 goto label1;

        return -1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        i5 = 0;

     label4:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 >= $i0 goto label6;

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i5 >= $i2 goto label6;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $c4 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c3 == $c4 goto label5;

        goto label6;

     label5:
        i5 = i5 + 1;

        goto label4;

     label6:
        $i6 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i5 < $i6 goto label7;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 >= $i1 goto label8;

     label7:
        return i5;

     label8:
        return -1;
    }

    public static transient int indexOfDifference(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        int i0, $i2, $i4, $i5, i6, i7, i8, i9, i10, i11;
        char c1, $c3;
        java.lang.CharSequence $r1, $r2, $r3, $r4, $r5;
        boolean z0, z1;

        r0 := @parameter0: java.lang.CharSequence[];

        if r0 == null goto label01;

        $i2 = lengthof r0;

        if $i2 > 1 goto label02;

     label01:
        return -1;

     label02:
        z0 = 0;

        z1 = 1;

        i0 = lengthof r0;

        i6 = 2147483647;

        i7 = 0;

        i8 = 0;

     label03:
        if i8 >= i0 goto label06;

        $r3 = r0[i8];

        if $r3 != null goto label04;

        z0 = 1;

        i6 = 0;

        goto label05;

     label04:
        z1 = 0;

        $r4 = r0[i8];

        $i4 = interfaceinvoke $r4.<java.lang.CharSequence: int length()>();

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i6);

        $r5 = r0[i8];

        $i5 = interfaceinvoke $r5.<java.lang.CharSequence: int length()>();

        i7 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i7);

     label05:
        i8 = i8 + 1;

        goto label03;

     label06:
        if z1 != 0 goto label07;

        if i7 != 0 goto label08;

        if z0 != 0 goto label08;

     label07:
        return -1;

     label08:
        if i6 != 0 goto label09;

        return 0;

     label09:
        i9 = -1;

        i10 = 0;

     label10:
        if i10 >= i6 goto label15;

        $r1 = r0[0];

        c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i10);

        i11 = 1;

     label11:
        if i11 >= i0 goto label13;

        $r2 = r0[i11];

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>(i10);

        if $c3 == c1 goto label12;

        i9 = i10;

        goto label13;

     label12:
        i11 = i11 + 1;

        goto label11;

     label13:
        if i9 == -1 goto label14;

        goto label15;

     label14:
        i10 = i10 + 1;

        goto label10;

     label15:
        if i9 != -1 goto label16;

        if i6 == i7 goto label16;

        return i6;

     label16:
        return i9;
    }

    public static transient java.lang.String getCommonPrefix(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i1;
        java.lang.String $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        return "";

     label2:
        i0 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>(r0);

        if i0 != -1 goto label4;

        $r3 = r0[0];

        if $r3 != null goto label3;

        return "";

     label3:
        $r4 = r0[0];

        return $r4;

     label4:
        if i0 != 0 goto label5;

        return "";

     label5:
        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r2;
    }

    public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence)
    {
        int[] r0, r5, r6;
        char c0, $c7;
        java.lang.IllegalArgumentException $r1;
        int $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;
        java.lang.CharSequence r2, r3, r4;
        byte $b23;

        r2 := @parameter0: java.lang.CharSequence;

        r3 := @parameter1: java.lang.CharSequence;

        if r2 == null goto label01;

        if r3 != null goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");

        throw $r1;

     label02:
        i18 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        i19 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        if i18 != 0 goto label03;

        return i19;

     label03:
        if i19 != 0 goto label04;

        return i18;

     label04:
        if i18 <= i19 goto label05;

        r4 = r2;

        r2 = r3;

        r3 = r4;

        i18 = i19;

        i19 = interfaceinvoke r4.<java.lang.CharSequence: int length()>();

     label05:
        $i2 = i18 + 1;

        r5 = newarray (int)[$i2];

        $i3 = i18 + 1;

        r6 = newarray (int)[$i3];

        i20 = 0;

     label06:
        if i20 > i18 goto label07;

        r5[i20] = i20;

        i20 = i20 + 1;

        goto label06;

     label07:
        i21 = 1;

     label08:
        if i21 > i19 goto label13;

        $i5 = i21 - 1;

        c0 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>($i5);

        r6[0] = i21;

        i22 = 1;

     label09:
        if i22 > i18 goto label12;

        $i6 = i22 - 1;

        $c7 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i6);

        if $c7 != c0 goto label10;

        $b23 = 0;

        goto label11;

     label10:
        $b23 = 1;

     label11:
        $i8 = i22 - 1;

        $i9 = r6[$i8];

        $i12 = $i9 + 1;

        $i10 = r5[i22];

        $i11 = $i10 + 1;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i11);

        $i14 = i22 - 1;

        $i15 = r5[$i14];

        $i16 = $i15 + $b23;

        $i17 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i16);

        r6[i22] = $i17;

        i22 = i22 + 1;

        goto label09;

     label12:
        r0 = r5;

        r5 = r6;

        r6 = r0;

        i21 = i21 + 1;

        goto label08;

     label13:
        $i4 = r5[i18];

        return $i4;
    }

    public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        int i0, i1, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, $i30, $i31, i32, i33, $i34, i35;
        int[] r0, r6, r7;
        char c2, $c16;
        java.lang.IllegalArgumentException $r1, $r2;
        java.lang.CharSequence r3, r4, r5;

        r3 := @parameter0: java.lang.CharSequence;

        r4 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        if r3 == null goto label01;

        if r4 != null goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");

        throw $r1;

     label02:
        if i0 >= 0 goto label03;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Threshold must not be negative");

        throw $r2;

     label03:
        i28 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        i29 = interfaceinvoke r4.<java.lang.CharSequence: int length()>();

        if i28 != 0 goto label06;

        if i29 > i0 goto label04;

        $i30 = i29;

        goto label05;

     label04:
        $i30 = -1;

     label05:
        return $i30;

     label06:
        if i29 != 0 goto label09;

        if i28 > i0 goto label07;

        $i31 = i28;

        goto label08;

     label07:
        $i31 = -1;

     label08:
        return $i31;

     label09:
        if i28 <= i29 goto label10;

        r5 = r3;

        r3 = r4;

        r4 = r5;

        i28 = i29;

        i29 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

     label10:
        $i5 = i28 + 1;

        r6 = newarray (int)[$i5];

        $i6 = i28 + 1;

        r7 = newarray (int)[$i6];

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i28, i0);

        i1 = $i7 + 1;

        i32 = 0;

     label11:
        if i32 >= i1 goto label12;

        r6[i32] = i32;

        i32 = i32 + 1;

        goto label11;

     label12:
        $i8 = lengthof r6;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r6, i1, $i8, 2147483647);

        staticinvoke <java.util.Arrays: void fill(int[],int)>(r7, 2147483647);

        i33 = 1;

     label13:
        if i33 > i29 goto label22;

        $i11 = i33 - 1;

        c2 = interfaceinvoke r4.<java.lang.CharSequence: char charAt(int)>($i11);

        r7[0] = i33;

        $i12 = i33 - i0;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i12);

        $i13 = 2147483647 - i0;

        if i33 <= $i13 goto label14;

        $i34 = i28;

        goto label15;

     label14:
        $i14 = i33 + i0;

        $i34 = staticinvoke <java.lang.Math: int min(int,int)>(i28, $i14);

     label15:
        i4 = $i34;

        if i3 <= $i34 goto label16;

        return -1;

     label16:
        if i3 <= 1 goto label17;

        $i27 = i3 - 1;

        r7[$i27] = 2147483647;

     label17:
        i35 = i3;

     label18:
        if i35 > i4 goto label21;

        $i15 = i35 - 1;

        $c16 = interfaceinvoke r3.<java.lang.CharSequence: char charAt(int)>($i15);

        if $c16 != c2 goto label19;

        $i25 = i35 - 1;

        $i26 = r6[$i25];

        r7[i35] = $i26;

        goto label20;

     label19:
        $i17 = i35 - 1;

        $i19 = r7[$i17];

        $i18 = r6[i35];

        $i20 = staticinvoke <java.lang.Math: int min(int,int)>($i19, $i18);

        $i21 = i35 - 1;

        $i22 = r6[$i21];

        $i23 = staticinvoke <java.lang.Math: int min(int,int)>($i20, $i22);

        $i24 = 1 + $i23;

        r7[i35] = $i24;

     label20:
        i35 = i35 + 1;

        goto label18;

     label21:
        r0 = r6;

        r6 = r7;

        r7 = r0;

        i33 = i33 + 1;

        goto label13;

     label22:
        $i9 = r6[i28];

        if $i9 > i0 goto label23;

        $i10 = r6[i28];

        return $i10;

     label23:
        return -1;
    }

    public static double getJaroWinklerDistance(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        double d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        int i0;
        java.lang.IllegalArgumentException $r2;
        long $l1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");

        throw $r2;

     label2:
        d1 = staticinvoke <org.apache.commons.lang3.StringUtils: double score(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        i0 = staticinvoke <org.apache.commons.lang3.StringUtils: int commonPrefixLength(java.lang.CharSequence,java.lang.CharSequence)>(r0, r1);

        $d3 = (double) i0;

        $d5 = 0.1 * $d3;

        $d4 = 1.0 - d1;

        $d6 = $d5 * $d4;

        $d7 = d1 + $d6;

        $d8 = $d7 * 100.0;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d8);

        $d9 = (double) $l1;

        d2 = $d9 / 100.0;

        return d2;
    }

    private static double score(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String r2, r3, $r4, $r5, $r6, $r7, r8, r9;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i2 <= $i3 goto label1;

        $r6 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        r8 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $r7 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        r9 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        r8 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        r9 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

     label2:
        $i4 = virtualinvoke r9.<java.lang.String: int length()>();

        $i5 = $i4 / 2;

        i0 = $i5 + 1;

        r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getSetOfMatchingCharacterWithin(java.lang.CharSequence,java.lang.CharSequence,int)>(r9, r8, i0);

        r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getSetOfMatchingCharacterWithin(java.lang.CharSequence,java.lang.CharSequence,int)>(r8, r9, i0);

        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i6 == 0 goto label3;

        $i7 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i7 != 0 goto label4;

     label3:
        return 0.0;

     label4:
        $i8 = virtualinvoke r2.<java.lang.String: int length()>();

        $i9 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i8 == $i9 goto label5;

        return 0.0;

     label5:
        i1 = staticinvoke <org.apache.commons.lang3.StringUtils: int transpositions(java.lang.CharSequence,java.lang.CharSequence)>(r2, r3);

        $i10 = virtualinvoke r2.<java.lang.String: int length()>();

        $d1 = (double) $i10;

        $i11 = virtualinvoke r9.<java.lang.String: int length()>();

        $d2 = (double) $i11;

        $d3 = $d1 / $d2;

        $i12 = virtualinvoke r3.<java.lang.String: int length()>();

        $d4 = (double) $i12;

        $i13 = virtualinvoke r8.<java.lang.String: int length()>();

        $d5 = (double) $i13;

        $d6 = $d4 / $d5;

        $d7 = $d3 + $d6;

        $i14 = virtualinvoke r2.<java.lang.String: int length()>();

        $i15 = $i14 - i1;

        $d8 = (double) $i15;

        $i16 = virtualinvoke r2.<java.lang.String: int length()>();

        $d9 = (double) $i16;

        $d10 = $d8 / $d9;

        $d11 = $d7 + $d10;

        d0 = $d11 / 3.0;

        return d0;
    }

    private static java.lang.String getSetOfMatchingCharacterWithin(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i2, $i3, $i4, $i5, $i6, i8, i9;
        char c1, $c7;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;
        boolean z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r1);

        i8 = 0;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i8 >= $i2 goto label5;

        c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i8);

        z0 = 0;

        $i3 = i8 - i0;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

     label2:
        if z0 != 0 goto label4;

        $i4 = i8 + i0;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        if i9 >= $i6 goto label4;

        $c7 = virtualinvoke $r5.<java.lang.StringBuilder: char charAt(int)>(i9);

        if $c7 != c1 goto label3;

        z0 = 1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        virtualinvoke $r5.<java.lang.StringBuilder: void setCharAt(int,char)>(i9, 42);

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static int transpositions(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1, i4, i5;
        char $c2, $c3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i4 = 0;

        i5 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 >= $i0 goto label3;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c2 == $c3 goto label2;

        i4 = i4 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = i4 / 2;

        return $i1;
    }

    private static int commonPrefixLength(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $r2 = newarray (java.lang.String)[2];

        $r3 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $r2[0] = $r3;

        $r4 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r2[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String getCommonPrefix(java.lang.String[])>($r2);

        i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i0 <= 4 goto label1;

        $i1 = 4;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, 1);

        return $z0;
    }

    private static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence r0, r1;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r1 != null goto label4;

     label1:
        if r0 != null goto label2;

        if r1 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= $i1 goto label5;

        return 0;

     label5:
        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, z0, 0, r1, 0, $i2);

        return $z1;
    }

    public static transient boolean startsWithAny(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, r3;
        java.lang.CharSequence[] r1;
        int i0, i1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(r0, r3);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, 1);

        return $z0;
    }

    private static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence r0, r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        if r1 != null goto label4;

     label1:
        if r0 != null goto label2;

        if r1 != null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i1 <= $i2 goto label5;

        return 0;

     label5:
        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        i0 = $i3 - $i4;

        $i5 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $z1 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(r0, z0, i0, r1, 0, $i5);

        return $z1;
    }

    public static java.lang.String normalizeSpace(java.lang.String)
    {
        java.lang.String r0, $r2, $r4;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = <org.apache.commons.lang3.StringUtils: java.util.regex.Pattern WHITESPACE_PATTERN>;

        $r2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String trim(java.lang.String)>(r0);

        $r3 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $r4 = virtualinvoke $r3.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" ");

        return $r4;
    }

    public static transient boolean endsWithAny(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence r0, r3;
        java.lang.CharSequence[] r1;
        int i0, i1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence[];

        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r1;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r1[i1];

        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(r0, r3);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 0;
    }

    private static transient java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[])
    {
        java.lang.String r0, $r7, $r9;
        java.lang.CharSequence r1, r4;
        boolean z0, $z1, $z2, $z3;
        java.lang.CharSequence[] r2;
        int i0, $i1, i2;
        java.lang.StringBuilder $r5, $r6, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.CharSequence[];

        if r0 == null goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, z0);

        if $z2 == 0 goto label2;

     label1:
        return r0;

     label2:
        if r2 == null goto label5;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label5;

        i0 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r4 = r2[i2];

        $z3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r4, z0);

        if $z3 == 0 goto label4;

        return r0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static transient java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.String r0, $r3;
        java.lang.CharSequence r1;
        java.lang.CharSequence[] r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence[];

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(r0, r1, 0, r2);

        return $r3;
    }

    public static transient java.lang.String appendIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.String r0, $r3;
        java.lang.CharSequence r1;
        java.lang.CharSequence[] r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence[];

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(r0, r1, 1, r2);

        return $r3;
    }

    private static transient java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[])
    {
        java.lang.String r0, $r6, $r9;
        java.lang.CharSequence r1, r4;
        boolean z0, $z1, $z2, $z3;
        java.lang.CharSequence[] r2;
        int i0, $i1, i2;
        java.lang.StringBuilder $r5, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.CharSequence[];

        if r0 == null goto label1;

        $z1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r1, z0);

        if $z2 == 0 goto label2;

     label1:
        return r0;

     label2:
        if r2 == null goto label5;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label5;

        i0 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r4 = r2[i2];

        $z3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(r0, r4, z0);

        if $z3 == 0 goto label4;

        return r0;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static transient java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.String r0, $r3;
        java.lang.CharSequence r1;
        java.lang.CharSequence[] r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence[];

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(r0, r1, 0, r2);

        return $r3;
    }

    public static transient java.lang.String prependIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.String r0, $r3;
        java.lang.CharSequence r1;
        java.lang.CharSequence[] r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence[];

        $r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(r0, r1, 1, r2);

        return $r3;
    }

    public static java.lang.String toString(byte[], java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] r0;
        java.lang.String r1, $r3;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>(r0, r1);

        goto label2;

     label1:
        $r3 = new java.lang.String;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r2);

     label2:
        return $r3;
    }

    public static java.lang.String toEncodedString(byte[], java.nio.charset.Charset)
    {
        byte[] r0;
        java.nio.charset.Charset r1, $r4;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.nio.charset.Charset;

        $r2 = new java.lang.String;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label2:
        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r0, $r4);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.commons.lang3.StringUtils: int PAD_LIMIT> = 8192;

        <org.apache.commons.lang3.StringUtils: int INDEX_NOT_FOUND> = -1;

        <org.apache.commons.lang3.StringUtils: java.lang.String CR> = "\r";

        <org.apache.commons.lang3.StringUtils: java.lang.String LF> = "\n";

        <org.apache.commons.lang3.StringUtils: java.lang.String EMPTY> = "";

        <org.apache.commons.lang3.StringUtils: java.lang.String SPACE> = " ";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?: |\\u00A0|\\s|[\\s&&[^ ]])\\s*");

        <org.apache.commons.lang3.StringUtils: java.util.regex.Pattern WHITESPACE_PATTERN> = $r0;

        return;
    }
}
