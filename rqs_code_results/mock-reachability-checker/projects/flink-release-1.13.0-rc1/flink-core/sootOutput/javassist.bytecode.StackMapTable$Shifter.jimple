class javassist.bytecode.StackMapTable$Shifter extends javassist.bytecode.StackMapTable$Walker
{
    private javassist.bytecode.StackMapTable stackMap;
    int where;
    int gap;
    int position;
    byte[] updatedInfo;
    boolean exclusive;

    public void <init>(javassist.bytecode.StackMapTable, int, int, boolean)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        javassist.bytecode.StackMapTable r1;
        int i0, i1;
        boolean z0;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        r1 := @parameter0: javassist.bytecode.StackMapTable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: void <init>(javassist.bytecode.StackMapTable)>(r1);

        r0.<javassist.bytecode.StackMapTable$Shifter: javassist.bytecode.StackMapTable stackMap> = r1;

        r0.<javassist.bytecode.StackMapTable$Shifter: int where> = i0;

        r0.<javassist.bytecode.StackMapTable$Shifter: int gap> = i1;

        r0.<javassist.bytecode.StackMapTable$Shifter: int position> = 0;

        r0.<javassist.bytecode.StackMapTable$Shifter: byte[] updatedInfo> = null;

        r0.<javassist.bytecode.StackMapTable$Shifter: boolean exclusive> = z0;

        return;
    }

    public void doit() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        byte[] $r1, $r2;
        javassist.bytecode.StackMapTable $r3;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void parse()>();

        $r1 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] updatedInfo>;

        if $r1 == null goto label1;

        $r3 = r0.<javassist.bytecode.StackMapTable$Shifter: javassist.bytecode.StackMapTable stackMap>;

        $r2 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] updatedInfo>;

        virtualinvoke $r3.<javassist.bytecode.StackMapTable: void set(byte[])>($r2);

     label1:
        return;
    }

    public void sameFrame(int, int)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void update(int,int,int,int)>(i0, i1, 0, 251);

        return;
    }

    public void sameLocals(int, int, int, int)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1, i2, i3;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void update(int,int,int,int)>(i0, i1, 64, 247);

        return;
    }

    void update(int, int, int, int)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i21, $i22;
        byte[] r1, $r2, $r3, $r4;
        boolean $z0, $z1, z2, $z3;
        byte $b14, $b17, $b23;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        $i6 = i4 + i1;

        if i4 != 0 goto label01;

        $b23 = 0;

        goto label02;

     label01:
        $b23 = 1;

     label02:
        $i7 = $i6 + $b23;

        r0.<javassist.bytecode.StackMapTable$Shifter: int position> = $i7;

        $z0 = r0.<javassist.bytecode.StackMapTable$Shifter: boolean exclusive>;

        if $z0 == 0 goto label05;

        $i20 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        if i4 >= $i20 goto label03;

        $i22 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        $i21 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        if $i22 > $i21 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        z2 = $z1;

        goto label08;

     label05:
        $i8 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        if i4 > $i8 goto label06;

        $i19 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        $i18 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        if $i19 >= $i18 goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        z2 = $z3;

     label08:
        if z2 == 0 goto label11;

        $i9 = r0.<javassist.bytecode.StackMapTable$Shifter: int gap>;

        i5 = i1 + $i9;

        $i11 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        $i10 = r0.<javassist.bytecode.StackMapTable$Shifter: int gap>;

        $i12 = $i11 + $i10;

        r0.<javassist.bytecode.StackMapTable$Shifter: int position> = $i12;

        if i5 >= 64 goto label09;

        $r4 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] info>;

        $i16 = i5 + i2;

        $b17 = (byte) $i16;

        $r4[i0] = $b17;

        goto label11;

     label09:
        if i1 >= 64 goto label10;

        $r3 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] info>;

        r1 = staticinvoke <javassist.bytecode.StackMapTable$Shifter: byte[] insertGap(byte[],int,int)>($r3, i0, 2);

        $b14 = (byte) i3;

        r1[i0] = $b14;

        $i15 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i5, r1, $i15);

        r0.<javassist.bytecode.StackMapTable$Shifter: byte[] updatedInfo> = r1;

        goto label11;

     label10:
        $r2 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] info>;

        $i13 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i5, $r2, $i13);

     label11:
        return;
    }

    static byte[] insertGap(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, $i3, $i5, $i6, i7, $i8;
        byte $b4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r0;

        $i3 = i2 + i1;

        r1 = newarray (byte)[$i3];

        i7 = 0;

     label1:
        if i7 >= i2 goto label4;

        $i6 = i7;

        if i7 >= i0 goto label2;

        $i8 = 0;

        goto label3;

     label2:
        $i8 = i1;

     label3:
        $i5 = $i6 + $i8;

        $b4 = r0[i7];

        r1[$i5] = $b4;

        i7 = i7 + 1;

        goto label1;

     label4:
        return r1;
    }

    public void chopFrame(int, int, int)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1, i2;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void update(int,int)>(i0, i1);

        return;
    }

    public void appendFrame(int, int, int[], int[])
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1;
        int[] r1, r2;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void update(int,int)>(i0, i1);

        return;
    }

    public void fullFrame(int, int, int[], int[], int[], int[])
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1;
        int[] r1, r2, r3, r4;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        r4 := @parameter5: int[];

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Shifter: void update(int,int)>(i0, i1);

        return;
    }

    void update(int, int)
    {
        javassist.bytecode.StackMapTable$Shifter r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean $z0, $z1, z2, $z3;
        byte[] $r1;
        byte $b17;

        r0 := @this: javassist.bytecode.StackMapTable$Shifter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        $i4 = i2 + i1;

        if i2 != 0 goto label1;

        $b17 = 0;

        goto label2;

     label1:
        $b17 = 1;

     label2:
        $i5 = $i4 + $b17;

        r0.<javassist.bytecode.StackMapTable$Shifter: int position> = $i5;

        $z0 = r0.<javassist.bytecode.StackMapTable$Shifter: boolean exclusive>;

        if $z0 == 0 goto label5;

        $i14 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        if i2 >= $i14 goto label3;

        $i16 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        $i15 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        if $i16 > $i15 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z2 = $z1;

        goto label8;

     label5:
        $i6 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        if i2 > $i6 goto label6;

        $i13 = r0.<javassist.bytecode.StackMapTable$Shifter: int where>;

        $i12 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        if $i13 >= $i12 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        z2 = $z3;

     label8:
        if z2 == 0 goto label9;

        $i7 = r0.<javassist.bytecode.StackMapTable$Shifter: int gap>;

        i3 = i1 + $i7;

        $r1 = r0.<javassist.bytecode.StackMapTable$Shifter: byte[] info>;

        $i8 = i0 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i3, $r1, $i8);

        $i10 = r0.<javassist.bytecode.StackMapTable$Shifter: int position>;

        $i9 = r0.<javassist.bytecode.StackMapTable$Shifter: int gap>;

        $i11 = $i10 + $i9;

        r0.<javassist.bytecode.StackMapTable$Shifter: int position> = $i11;

     label9:
        return;
    }
}
