public class org.mockito.internal.util.MockNameImpl extends java.lang.Object implements org.mockito.mock.MockName, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String mockName;
    private boolean defaultName;

    public void <init>(java.lang.String, java.lang.Class)
    {
        org.mockito.internal.util.MockNameImpl r0;
        java.lang.String r1, $r3;
        java.lang.Class r2;

        r0 := @this: org.mockito.internal.util.MockNameImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = staticinvoke <org.mockito.internal.util.MockNameImpl: java.lang.String toInstanceName(java.lang.Class)>(r2);

        r0.<org.mockito.internal.util.MockNameImpl: java.lang.String mockName> = $r3;

        r0.<org.mockito.internal.util.MockNameImpl: boolean defaultName> = 1;

        goto label2;

     label1:
        r0.<org.mockito.internal.util.MockNameImpl: java.lang.String mockName> = r1;

     label2:
        return;
    }

    public void <init>(java.lang.String)
    {
        org.mockito.internal.util.MockNameImpl r0;
        java.lang.String r1;

        r0 := @this: org.mockito.internal.util.MockNameImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.MockNameImpl: java.lang.String mockName> = r1;

        return;
    }

    private static java.lang.String toInstanceName(java.lang.Class)
    {
        java.lang.Class r0, $r8;
        int $i0;
        java.lang.StringBuilder $r1, $r4, $r6;
        java.lang.String $r2, $r3, $r5, $r7, r9;

        r0 := @parameter0: java.lang.Class;

        r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>(1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean isDefault()
    {
        org.mockito.internal.util.MockNameImpl r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.MockNameImpl;

        $z0 = r0.<org.mockito.internal.util.MockNameImpl: boolean defaultName>;

        return $z0;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.util.MockNameImpl r0;
        java.lang.String $r1;

        r0 := @this: org.mockito.internal.util.MockNameImpl;

        $r1 = r0.<org.mockito.internal.util.MockNameImpl: java.lang.String mockName>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.util.MockNameImpl: long serialVersionUID> = 8014974700844306925L;

        return;
    }
}
