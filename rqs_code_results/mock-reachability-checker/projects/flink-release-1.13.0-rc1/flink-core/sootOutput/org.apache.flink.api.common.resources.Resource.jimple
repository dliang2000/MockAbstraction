public abstract class org.apache.flink.api.common.resources.Resource extends java.lang.Object implements java.io.Serializable, java.lang.Comparable
{
    private static final long serialVersionUID;
    private final java.lang.String name;
    private final java.math.BigDecimal value;

    protected void <init>(java.lang.String, double)
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.lang.String r1;
        double d0;
        java.math.BigDecimal $r2;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(d0);

        specialinvoke r0.<org.apache.flink.api.common.resources.Resource: void <init>(java.lang.String,java.math.BigDecimal)>(r1, $r2);

        return;
    }

    protected void <init>(java.lang.String, java.math.BigDecimal)
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.lang.String r1, $r6;
        java.math.BigDecimal r2, $r4;
        int $i0;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.math.BigDecimal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i0 = virtualinvoke r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r4);

        if $i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Resource value must be no less than 0");

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = (java.lang.String) $r5;

        r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name> = $r6;

        r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value> = r2;

        return;
    }

    public org.apache.flink.api.common.resources.Resource merge(org.apache.flink.api.common.resources.Resource)
    {
        org.apache.flink.api.common.resources.Resource r0, r1, $r10;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;
        java.math.BigDecimal $r7, $r8, $r9;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: org.apache.flink.api.common.resources.Resource;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Cannot merge with null resources");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Merge with different resource type");

        $r5 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $r6 = virtualinvoke r1.<org.apache.flink.api.common.resources.Resource: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Merge with different resource name");

        $r7 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal getValue()>();

        $r9 = virtualinvoke $r7.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

        $r10 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource create(java.math.BigDecimal)>($r9);

        return $r10;
    }

    public org.apache.flink.api.common.resources.Resource subtract(org.apache.flink.api.common.resources.Resource)
    {
        org.apache.flink.api.common.resources.Resource r0, r1, $r12;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;
        java.math.BigDecimal $r7, $r8, $r9, $r10, $r11;
        int $i0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: org.apache.flink.api.common.resources.Resource;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Cannot subtract null resources");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Minus with different resource type");

        $r5 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $r6 = virtualinvoke r1.<org.apache.flink.api.common.resources.Resource: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Minus with different resource name");

        $r7 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r8 = virtualinvoke r1.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal getValue()>();

        $i0 = virtualinvoke $r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r8);

        if $i0 < 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Try to subtract a larger resource from this one.");

        $r9 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r10 = virtualinvoke r1.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal getValue()>();

        $r11 = virtualinvoke $r9.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>($r10);

        $r12 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource create(java.math.BigDecimal)>($r11);

        return $r12;
    }

    public org.apache.flink.api.common.resources.Resource multiply(java.math.BigDecimal)
    {
        org.apache.flink.api.common.resources.Resource r0, $r4;
        java.math.BigDecimal r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.math.BigDecimal;

        $r2 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r3 = virtualinvoke $r2.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(r1);

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource create(java.math.BigDecimal)>($r3);

        return $r4;
    }

    public org.apache.flink.api.common.resources.Resource multiply(int)
    {
        org.apache.flink.api.common.resources.Resource r0, $r2;
        int i0;
        long $l1;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource multiply(java.math.BigDecimal)>($r1);

        return $r2;
    }

    public org.apache.flink.api.common.resources.Resource divide(java.math.BigDecimal)
    {
        org.apache.flink.api.common.resources.Resource r0, $r5;
        java.math.BigDecimal r1, $r3, $r4;
        java.math.RoundingMode $r2;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.math.BigDecimal;

        $r3 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r2 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

        $r4 = virtualinvoke $r3.<java.math.BigDecimal: java.math.BigDecimal divide(java.math.BigDecimal,int,java.math.RoundingMode)>(r1, 16, $r2);

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource create(java.math.BigDecimal)>($r4);

        return $r5;
    }

    public org.apache.flink.api.common.resources.Resource divide(int)
    {
        org.apache.flink.api.common.resources.Resource r0, $r2;
        int i0;
        long $l1;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: org.apache.flink.api.common.resources.Resource divide(java.math.BigDecimal)>($r1);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.resources.Resource r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;
        java.math.BigDecimal $r7, $r8;
        int $i0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label4;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != $r4 goto label4;

        r2 = (org.apache.flink.api.common.resources.Resource) r1;

        $r5 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.resources.Resource: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r8 = virtualinvoke r2.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal getValue()>();

        $i0 = virtualinvoke $r7.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r8);

        if $i0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.lang.String $r1;
        java.math.BigDecimal $r2;
        int $i0, $i1, i2, i3;
        double $d0;
        java.lang.Double $r3;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        $r1 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i0 = 31 * i2;

        $r2 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $i1 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r3);

        i3 = $i0 + $i1;

        return i3;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r4;
        java.math.BigDecimal $r3;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Resource(%s: %s)", $r1);

        return $r4;
    }

    public int compareTo(org.apache.flink.api.common.resources.Resource)
    {
        org.apache.flink.api.common.resources.Resource r0, r1;
        java.lang.Class $r2, $r3;
        java.lang.String $r4, $r5;
        boolean $z0, $z1;
        java.math.BigDecimal $r6, $r7;
        int $i0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: org.apache.flink.api.common.resources.Resource;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        $r5 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $r4 = r1.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        $r6 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r7 = r1.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $i0 = virtualinvoke $r6.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r7);

        return $i0;
    }

    public java.lang.String getName()
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        $r1 = r0.<org.apache.flink.api.common.resources.Resource: java.lang.String name>;

        return $r1;
    }

    public java.math.BigDecimal getValue()
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        $r1 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        return $r1;
    }

    public boolean isZero()
    {
        org.apache.flink.api.common.resources.Resource r0;
        java.math.BigDecimal $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        $r2 = r0.<org.apache.flink.api.common.resources.Resource: java.math.BigDecimal value>;

        $r1 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i0 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected abstract org.apache.flink.api.common.resources.Resource create(java.math.BigDecimal);

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.api.common.resources.Resource r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.resources.Resource;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.common.resources.Resource) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.resources.Resource: int compareTo(org.apache.flink.api.common.resources.Resource)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.resources.Resource: long serialVersionUID> = 1L;

        return;
    }
}
