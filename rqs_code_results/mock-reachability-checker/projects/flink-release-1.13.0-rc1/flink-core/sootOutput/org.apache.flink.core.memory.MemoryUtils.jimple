public class org.apache.flink.core.memory.MemoryUtils extends java.lang.Object
{
    public static final sun.misc.Unsafe UNSAFE;
    public static final java.nio.ByteOrder NATIVE_BYTE_ORDER;
    private static final long BUFFER_ADDRESS_FIELD_OFFSET;
    private static final long BUFFER_CAPACITY_FIELD_OFFSET;
    private static final java.lang.Class DIRECT_BYTE_BUFFER_CLASS;

    private static sun.misc.Unsafe getUnsafe()
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        sun.misc.Unsafe $r2;
        java.lang.IllegalAccessException $r3;
        java.lang.Error $r4, $r6, $r8, $r10, $r12;
        java.lang.NoSuchFieldException $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.Throwable $r9;
        java.lang.SecurityException $r11;
        java.lang.reflect.Field r13;

     label1:
        $r0 = class "Lsun/misc/Unsafe;";

        r13 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe");

        virtualinvoke r13.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r1 = virtualinvoke r13.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r2 = (sun.misc.Unsafe) $r1;

     label2:
        return $r2;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.Error;

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Could not access the sun.misc.Unsafe handle, permission denied by security manager.", $r11);

        throw $r12;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("The static handle field in sun.misc.Unsafe was not found.", $r5);

        throw $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Bug: Illegal argument reflection access for static field.", $r7);

        throw $r8;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.Error;

        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Access to sun.misc.Unsafe is forbidden by the runtime.", $r3);

        throw $r4;

     label7:
        $r9 := @caughtexception;

        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Unclassified error while trying to access the sun.misc.Unsafe handle.", $r9);

        throw $r10;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label7;
    }

    private static long getClassFieldOffset(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r7, $r10, $r13, $r17, $r20;
        sun.misc.Unsafe $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Throwable $r4;
        java.lang.Error $r5, $r12, $r15;
        java.lang.StringBuilder $r6, $r8, $r9, $r16, $r18, $r19;
        java.lang.NoSuchFieldException $r11;
        java.lang.SecurityException $r14;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

     label2:
        return $l0;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.Error;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.lang.String getClassFieldOffsetErrorMessage(java.lang.Class,java.lang.String)>(r0, r1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", permission denied by security manager.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r14);

        throw $r15;

     label4:
        $r11 := @caughtexception;

        $r12 = new java.lang.Error;

        $r13 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.lang.String getClassFieldOffsetErrorMessage(java.lang.Class,java.lang.String)>(r0, r1);

        specialinvoke $r12.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r11);

        throw $r12;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.Error;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.lang.String getClassFieldOffsetErrorMessage(java.lang.Class,java.lang.String)>(r0, r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", unclassified error");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r5;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchFieldException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private static java.lang.String getClassFieldOffsetErrorMessage(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get field \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' offset in class \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for unsafe operations");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static java.lang.Class getClassByName(java.lang.String)
    {
        java.lang.String r0, $r9;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.Error $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.Error;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find class \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for unsafe operations.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static long allocateUnsafe(long)
    {
        long l0, $l1, $l2;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>(1L, l0);

        $l2 = virtualinvoke $r0.<sun.misc.Unsafe: long allocateMemory(long)>($l1);

        return $l2;
    }

    static java.lang.Runnable createMemoryCleaner(long, java.lang.Runnable)
    {
        long l0;
        java.lang.Runnable r0, $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.Runnable;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemoryUtils$lambda_createMemoryCleaner_0__88: java.lang.Runnable bootstrap$(long,java.lang.Runnable)>(l0, r0);

        return $r1;
    }

    private static void releaseUnsafe(long)
    {
        long l0;
        sun.misc.Unsafe $r0;

        l0 := @parameter0: long;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        virtualinvoke $r0.<sun.misc.Unsafe: void freeMemory(long)>(l0);

        return;
    }

    static java.nio.ByteBuffer wrapUnsafeMemoryWithByteBuffer(long, int)
    {
        long l0, $l2, $l3;
        int i1;
        java.lang.Class $r0;
        sun.misc.Unsafe $r1, $r3, $r4;
        java.lang.Object $r2;
        java.lang.Throwable $r6;
        java.lang.Error $r7;
        java.nio.ByteBuffer r8;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

     label1:
        $r1 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: java.lang.Class DIRECT_BYTE_BUFFER_CLASS>;

        $r2 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object allocateInstance(java.lang.Class)>($r0);

        r8 = (java.nio.ByteBuffer) $r2;

        $r3 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $l2 = <org.apache.flink.core.memory.MemoryUtils: long BUFFER_ADDRESS_FIELD_OFFSET>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r8, $l2, l0);

        $r4 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $l3 = <org.apache.flink.core.memory.MemoryUtils: long BUFFER_CAPACITY_FIELD_OFFSET>;

        virtualinvoke $r4.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r8, $l3, i1);

        virtualinvoke r8.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Failed to wrap unsafe off-heap memory with ByteBuffer", $r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static long getByteBufferAddress(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long l0, $l1;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r3;
        byte $b2, $b3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        java.lang.Error $r11;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "buffer is null");

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isDirect()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Can\'t get address of a non-direct ByteBuffer.");

     label1:
        $r3 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        $l1 = <org.apache.flink.core.memory.MemoryUtils: long BUFFER_ADDRESS_FIELD_OFFSET>;

        l0 = virtualinvoke $r3.<sun.misc.Unsafe: long getLong(java.lang.Object,long)>(r0, $l1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.Error;

        specialinvoke $r11.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Could not access direct byte buffer address field.", $r10);

        throw $r11;

     label4:
        $b2 = l0 cmp 0L;

        if $b2 <= 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "negative pointer or size");

        $b3 = l0 cmp 9223372034707292160L;

        if $b3 >= 0 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Segment initialized with too large address: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ; Max allowed address is ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(9223372034707292159L);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, $r9);

        return l0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.apache.flink.core.memory.MemoryUtils r0;

        r0 := @this: org.apache.flink.core.memory.MemoryUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void lambda$createMemoryCleaner$0(long, java.lang.Runnable)
    {
        long l0;
        java.lang.Runnable r0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.Runnable;

        staticinvoke <org.apache.flink.core.memory.MemoryUtils: void releaseUnsafe(long)>(l0);

        interfaceinvoke r0.<java.lang.Runnable: void run()>();

        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;
        java.nio.ByteOrder $r1;
        long $l0, $l1;
        java.lang.Class $r2;

        $r0 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe getUnsafe()>();

        <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE> = $r0;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        <org.apache.flink.core.memory.MemoryUtils: java.nio.ByteOrder NATIVE_BYTE_ORDER> = $r1;

        $l0 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long getClassFieldOffset(java.lang.Class,java.lang.String)>(class "Ljava/nio/Buffer;", "address");

        <org.apache.flink.core.memory.MemoryUtils: long BUFFER_ADDRESS_FIELD_OFFSET> = $l0;

        $l1 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: long getClassFieldOffset(java.lang.Class,java.lang.String)>(class "Ljava/nio/Buffer;", "capacity");

        <org.apache.flink.core.memory.MemoryUtils: long BUFFER_CAPACITY_FIELD_OFFSET> = $l1;

        $r2 = staticinvoke <org.apache.flink.core.memory.MemoryUtils: java.lang.Class getClassByName(java.lang.String)>("java.nio.DirectByteBuffer");

        <org.apache.flink.core.memory.MemoryUtils: java.lang.Class DIRECT_BYTE_BUFFER_CLASS> = $r2;

        return;
    }
}
