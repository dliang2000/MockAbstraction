public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected final java.util.Map _values;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: void <init>(java.util.Map)>($r1);

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std r0;
        java.util.Map r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: java.util.Map _values> = r1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std addValue(java.lang.String, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: java.util.Map _values>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std addValue(java.lang.Class, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std r0;
        java.lang.Class r1;
        java.lang.Object r2;
        java.util.Map $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: java.util.Map _values>;

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r2);

        return r0;
    }

    public java.lang.Object findInjectableValue(java.lang.Object, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty, java.lang.Object) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std r0;
        java.lang.Object r1, r4, r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty r3;
        java.lang.String r5, $r14, $r17, $r20, $r21;
        boolean $z0, $z1;
        java.util.Map $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r15, $r16;
        java.lang.Class $r18;
        java.lang.Object[] $r19;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty;

        r4 := @parameter3: java.lang.Object;

        $z0 = r1 instanceof java.lang.String;

        if $z0 != 0 goto label1;

        $r18 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class classOf(java.lang.Object)>(r1);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(r1);

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unrecognized inject value id type (%s), expecting String", $r19);

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>($r18, $r21);

     label1:
        r5 = (java.lang.String) r1;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: java.util.Map _values>;

        r6 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        if r6 != null goto label2;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: java.util.Map _values>;

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No injectable id with value \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found (for property \'");

        $r14 = interfaceinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.BeanProperty: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\')");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r9;

     label2:
        return r6;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.InjectableValues$Std: long serialVersionUID> = 1L;

        return;
    }
}
