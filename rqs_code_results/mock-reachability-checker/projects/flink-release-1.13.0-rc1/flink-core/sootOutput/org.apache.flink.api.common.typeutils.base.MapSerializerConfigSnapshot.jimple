public final class org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot
{
    private static final int VERSION;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.util.List r2;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3, $r14;
        org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r5;
        java.lang.Object $r6, $r8, $r10, $r12;
        org.apache.flink.api.java.tuple.Tuple2 $r7, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r9, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.MapSerializer;

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot: java.util.List getNestedSerializersAndConfigs()>();

        $r4 = new org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: void <init>()>();

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[2];

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.apache.flink.api.java.tuple.Tuple2) $r6;

        $r8 = $r7.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r9 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r8;

        $r5[0] = $r9;

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1);

        $r11 = (org.apache.flink.api.java.tuple.Tuple2) $r10;

        $r12 = $r11.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r12;

        $r5[1] = $r13;

        $r14 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r4, $r5);

        return $r14;

     label1:
        $r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r3;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.MapSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
