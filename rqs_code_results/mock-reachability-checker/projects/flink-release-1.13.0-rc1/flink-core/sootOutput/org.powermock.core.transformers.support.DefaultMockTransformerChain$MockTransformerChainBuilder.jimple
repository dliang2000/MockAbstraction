public class org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder extends java.lang.Object
{
    private final java.util.List transformers;

    private void <init>()
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: java.util.List transformers> = $r1;

        return;
    }

    public org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder append(org.powermock.core.transformers.MockTransformer)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder r0;
        org.powermock.core.transformers.MockTransformer r1;
        java.util.List $r2;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        r1 := @parameter0: org.powermock.core.transformers.MockTransformer;

        $r2 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: java.util.List transformers>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder append(java.util.List)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder r0;
        java.util.List r1, $r2;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: java.util.List transformers>;

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return r0;
    }

    public org.powermock.core.transformers.MockTransformerChain build()
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder r0;
        org.powermock.core.transformers.support.DefaultMockTransformerChain $r1;
        java.util.List $r2;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        $r1 = new org.powermock.core.transformers.support.DefaultMockTransformerChain;

        $r2 = r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: java.util.List transformers>;

        specialinvoke $r1.<org.powermock.core.transformers.support.DefaultMockTransformerChain: void <init>(java.util.List,org.powermock.core.transformers.support.DefaultMockTransformerChain$1)>($r2, null);

        return $r1;
    }

    void <init>(org.powermock.core.transformers.support.DefaultMockTransformerChain$1)
    {
        org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder r0;
        org.powermock.core.transformers.support.DefaultMockTransformerChain$1 r1;

        r0 := @this: org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder;

        r1 := @parameter0: org.powermock.core.transformers.support.DefaultMockTransformerChain$1;

        specialinvoke r0.<org.powermock.core.transformers.support.DefaultMockTransformerChain$MockTransformerChainBuilder: void <init>()>();

        return;
    }
}
