class org.junit.rules.TestWatcher$1 extends org.junit.runners.model.Statement
{
    final org.junit.runner.Description val$description;
    final org.junit.runners.model.Statement val$base;
    final org.junit.rules.TestWatcher this$0;

    void <init>(org.junit.rules.TestWatcher, org.junit.runner.Description, org.junit.runners.model.Statement) throws java.lang.Exception
    {
        org.junit.rules.TestWatcher$1 r0;
        org.junit.rules.TestWatcher r1;
        org.junit.runner.Description r2;
        org.junit.runners.model.Statement r3;

        r0 := @this: org.junit.rules.TestWatcher$1;

        r1 := @parameter0: org.junit.rules.TestWatcher;

        r2 := @parameter1: org.junit.runner.Description;

        r3 := @parameter2: org.junit.runners.model.Statement;

        r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0> = r1;

        r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description> = r2;

        r0.<org.junit.rules.TestWatcher$1: org.junit.runners.model.Statement val$base> = r3;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.rules.TestWatcher$1 r0;
        java.util.ArrayList $r3;
        org.junit.runner.Description $r4, $r7, $r9, $r12, $r14, $r17, $r20, $r22;
        org.junit.rules.TestWatcher $r5, $r8, $r10, $r13, $r15, $r18, $r21, $r23;
        org.junit.runners.model.Statement $r6;
        org.junit.internal.AssumptionViolatedException $r11;
        java.lang.Throwable $r16, $r19;

        r0 := @this: org.junit.rules.TestWatcher$1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r4 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$000(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r5, $r4, $r3);

     label1:
        $r6 = r0.<org.junit.rules.TestWatcher$1: org.junit.runners.model.Statement val$base>;

        virtualinvoke $r6.<org.junit.runners.model.Statement: void evaluate()>();

        $r8 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r7 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$100(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r8, $r7, $r3);

     label2:
        $r10 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r9 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$400(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r10, $r9, $r3);

        goto label9;

     label3:
        $r11 := @caughtexception;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r13 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r12 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$200(org.junit.rules.TestWatcher,org.junit.internal.AssumptionViolatedException,org.junit.runner.Description,java.util.List)>($r13, $r11, $r12, $r3);

     label4:
        $r15 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r14 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$400(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r15, $r14, $r3);

        goto label9;

     label5:
        $r19 := @caughtexception;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r19);

        $r21 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r20 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$300(org.junit.rules.TestWatcher,java.lang.Throwable,org.junit.runner.Description,java.util.List)>($r21, $r19, $r20, $r3);

     label6:
        $r23 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r22 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$400(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r23, $r22, $r3);

        goto label9;

     label7:
        $r16 := @caughtexception;

     label8:
        $r18 = r0.<org.junit.rules.TestWatcher$1: org.junit.rules.TestWatcher this$0>;

        $r17 = r0.<org.junit.rules.TestWatcher$1: org.junit.runner.Description val$description>;

        staticinvoke <org.junit.rules.TestWatcher: void access$400(org.junit.rules.TestWatcher,org.junit.runner.Description,java.util.List)>($r18, $r17, $r3);

        throw $r16;

     label9:
        staticinvoke <org.junit.runners.model.MultipleFailureException: void assertEmpty(java.util.List)>($r3);

        return;

        catch org.junit.internal.AssumptionViolatedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
