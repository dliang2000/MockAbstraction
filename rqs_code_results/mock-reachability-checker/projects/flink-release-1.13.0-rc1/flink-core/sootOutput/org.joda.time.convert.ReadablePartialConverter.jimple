class org.joda.time.convert.ReadablePartialConverter extends org.joda.time.convert.AbstractConverter implements org.joda.time.convert.PartialConverter
{
    static final org.joda.time.convert.ReadablePartialConverter INSTANCE;

    protected void <init>()
    {
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        specialinvoke r0.<org.joda.time.convert.AbstractConverter: void <init>()>();

        return;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.DateTimeZone)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        java.lang.Object r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.Chronology $r3, $r4, $r5;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        $r3 = (org.joda.time.Chronology) null;

        $r4 = virtualinvoke r0.<org.joda.time.convert.ReadablePartialConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, $r3);

        $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2);

        return $r5;
    }

    public org.joda.time.Chronology getChronology(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        java.lang.Object r1;
        org.joda.time.ReadablePartial $r2;
        org.joda.time.Chronology r3, r4;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: org.joda.time.Chronology;

        if r3 != null goto label1;

        $r2 = (org.joda.time.ReadablePartial) r1;

        r4 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4);

     label1:
        return r3;
    }

    public int[] getPartialValues(org.joda.time.ReadablePartial, java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.convert.ReadablePartialConverter r0;
        org.joda.time.ReadablePartial r1, r4;
        java.lang.Object r2;
        org.joda.time.Chronology r3;
        int i0, $i1, i2;
        int[] r5;
        org.joda.time.DateTimeFieldType $r6;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.joda.time.Chronology;

        r4 = (org.joda.time.ReadablePartial) r2;

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        r5 = newarray (int)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2);

        $i1 = interfaceinvoke r4.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6);

        r5[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r3.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r1, r5);

        return r5;
    }

    public java.lang.Class getSupportedType()
    {
        org.joda.time.convert.ReadablePartialConverter r0;

        r0 := @this: org.joda.time.convert.ReadablePartialConverter;

        return class "Lorg/joda/time/ReadablePartial;";
    }

    static void <clinit>()
    {
        org.joda.time.convert.ReadablePartialConverter $r0;

        $r0 = new org.joda.time.convert.ReadablePartialConverter;

        specialinvoke $r0.<org.joda.time.convert.ReadablePartialConverter: void <init>()>();

        <org.joda.time.convert.ReadablePartialConverter: org.joda.time.convert.ReadablePartialConverter INSTANCE> = $r0;

        return;
    }
}
