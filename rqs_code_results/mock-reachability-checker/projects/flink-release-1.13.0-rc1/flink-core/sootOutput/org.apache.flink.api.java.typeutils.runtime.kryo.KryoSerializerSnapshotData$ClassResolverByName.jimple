class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName extends java.lang.Object implements org.apache.flink.util.function.BiFunctionWithException
{
    private final java.lang.ClassLoader classLoader;

    private void <init>(java.lang.ClassLoader)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: java.lang.ClassLoader classLoader> = r1;

        return;
    }

    public java.lang.Class apply(org.apache.flink.core.memory.DataInputView, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.String r2, r3, $r13;
        java.lang.ClassLoader $r5;
        java.lang.Class $r6;
        java.lang.ClassNotFoundException $r7;
        org.slf4j.Logger $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.String;

        r3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label1:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: java.lang.ClassLoader classLoader>;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r3, 0, $r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger access$200()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered class ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Kryo serialization in classpath.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r13, $r7);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public volatile java.lang.Object apply(java.lang.Object, java.lang.Object) throws java.lang.Throwable
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName r0;
        java.lang.Object r1, r2;
        java.lang.String $r3;
        org.apache.flink.core.memory.DataInputView $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.core.memory.DataInputView) r1;

        $r3 = (java.lang.String) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: java.lang.Class apply(org.apache.flink.core.memory.DataInputView,java.lang.String)>($r4, $r3);

        return $r5;
    }

    void <init>(java.lang.ClassLoader, org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName r0;
        java.lang.ClassLoader r1;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1 r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$ClassResolverByName: void <init>(java.lang.ClassLoader)>(r1);

        return;
    }
}
