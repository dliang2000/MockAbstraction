public class org.apache.flink.core.io.LocatableSplitAssignerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSerialSplitAssignmentWithNullHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.String[][] $r3;
        java.lang.String[] $r4, $r5, $r11;
        java.util.HashSet $r6;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r7;
        org.apache.flink.core.io.LocatableInputSplit $r8, $r9, $r10;
        boolean $z0, $z1;
        int $i0, $i2, $i4, i5;
        long $l1, $l3;
        java.lang.Exception $r12;
        java.lang.String $r13;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label1:
        $r3 = newarray (java.lang.String[])[3];

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "localhost";

        $r3[0] = $r4;

        $r5 = newarray (java.lang.String)[0];

        $r3[1] = $r5;

        $r3[2] = null;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        i5 = 0;

     label2:
        if i5 >= 50 goto label3;

        $r10 = new org.apache.flink.core.io.LocatableInputSplit;

        $i4 = i5 % 3;

        $r11 = $r3[$i4];

        specialinvoke $r10.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>(i5, $r11);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r10);

        i5 = i5 + 1;

        goto label2;

     label3:
        $r7 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r6);

     label4:
        $r8 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>(null, 0);

        if $r8 == null goto label5;

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean remove(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label4;

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r9);

        $i0 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $l1);

        $i2 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

     label6:
        goto label8;

     label7:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

        $r13 = virtualinvoke $r12.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r13);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testSerialSplitAssignmentAllForSameHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.util.HashSet $r2;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r3;
        org.apache.flink.core.io.LocatableInputSplit $r4, $r5, $r6;
        boolean $z0, $z1;
        int $i0, $i2, i4;
        long $l1, $l3;
        java.lang.Exception $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label1:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        i4 = 0;

     label2:
        if i4 >= 50 goto label3;

        $r6 = new org.apache.flink.core.io.LocatableInputSplit;

        specialinvoke $r6.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>(i4, "testhost");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i4 = i4 + 1;

        goto label2;

     label3:
        $r3 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r3.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r2);

     label4:
        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("testhost", 0);

        if $r4 == null goto label5;

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label4;

     label5:
        $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r5);

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r3.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(50L, $l3);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Exception: void printStackTrace()>();

        $r8 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r8);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testSerialSplitAssignmentAllForRemoteHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        int i0, $i1, $i3, $i5, $i7, $i8, i9;
        java.lang.String[] $r2;
        java.util.HashSet $r3;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r4;
        org.apache.flink.core.io.LocatableInputSplit $r5, $r6, $r7;
        boolean $z0, $z1;
        long $l2, $l4, $l6;
        java.lang.String $r8, $r10;
        java.lang.Exception $r9;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label1:
        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "host1";

        $r2[1] = "host1";

        $r2[2] = "host1";

        $r2[3] = "host2";

        $r2[4] = "host2";

        $r2[5] = "host3";

        $i1 = lengthof $r2;

        i0 = 10 * $i1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        i9 = 0;

     label2:
        if i9 >= i0 goto label3;

        $r7 = new org.apache.flink.core.io.LocatableInputSplit;

        $i7 = lengthof $r2;

        $i8 = i9 % $i7;

        $r8 = $r2[$i8];

        specialinvoke $r7.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>(i9, $r8);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r7);

        i9 = i9 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r3);

     label4:
        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("testhost", 0);

        if $r5 == null goto label5;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label4;

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("anotherHost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r6);

        $l2 = (long) i0;

        $i3 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        $i5 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l6);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

        $r10 = virtualinvoke $r9.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r10);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testSerialSplitAssignmentSomeForRemoteHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.String[] $r2;
        java.util.HashSet $r3;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r4;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8, $i9, i10, i11, i12, i13, i14;
        java.lang.String $r5, $r12;
        org.apache.flink.core.io.LocatableInputSplit $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        long $l4, $l6;
        java.lang.Exception $r11;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label01:
        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "host1";

        $r2[1] = "host2";

        $r2[2] = "host3";

        i10 = 0;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        i11 = 0;

     label02:
        if i11 >= 20 goto label03;

        $r10 = new org.apache.flink.core.io.LocatableInputSplit;

        $i9 = i10;

        i10 = i10 + 1;

        specialinvoke $r10.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>($i9, "host1");

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r10);

        i11 = i11 + 1;

        goto label02;

     label03:
        i12 = 0;

     label04:
        if i12 >= 10 goto label05;

        $r9 = new org.apache.flink.core.io.LocatableInputSplit;

        $i8 = i10;

        i10 = i10 + 1;

        specialinvoke $r9.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>($i8, "host2");

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r9);

        i12 = i12 + 1;

        goto label04;

     label05:
        i13 = 0;

     label06:
        if i13 >= 30 goto label07;

        $r8 = new org.apache.flink.core.io.LocatableInputSplit;

        $i7 = i10;

        i10 = i10 + 1;

        specialinvoke $r8.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>($i7, "remoteHost");

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i13 = i13 + 1;

        goto label06;

     label07:
        $r4 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r3);

        i14 = 0;

     label08:
        $i0 = i14;

        i14 = i14 + 1;

        $i1 = lengthof $r2;

        $i2 = $i0 % $i1;

        $r5 = $r2[$i2];

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>($r5, 0);

        if $r6 == null goto label09;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label08;

     label09:
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("anotherHost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r7);

        $i3 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(30L, $l4);

        $i5 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(30L, $l6);

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r12 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r12);

     label12:
        return;

        catch java.lang.Exception from label01 to label10 with label11;
    }

    public void testSerialSplitAssignmentMultiLocalHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.String r8, $r13, $r14, $r15, $r17, $r18, $r19, $r23, $r24, $r25, $r35;
        java.lang.String[] $r9, $r10, $r11, $r12, $r16, $r26, $r27, $r28, $r29;
        java.util.HashSet $r20;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.flink.core.io.LocatableInputSplit $r22, $r30, $r31, $r32, $r33, r38;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        long $l1, $l3;
        java.lang.Exception $r34;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label01:
        $r9 = newarray (java.lang.String)[3];

        $r9[0] = "local1";

        $r9[1] = "local2";

        $r9[2] = "local3";

        $r10 = newarray (java.lang.String)[3];

        $r10[0] = "remote1";

        $r10[1] = "remote2";

        $r10[2] = "remote3";

        $r11 = newarray (java.lang.String)[4];

        $r11[0] = "local3";

        $r11[1] = "local2";

        $r11[2] = "local1";

        $r11[3] = "other";

        $r12 = newarray (java.lang.String)[3];

        $r13 = $r9[0];

        $r12[0] = $r13;

        $r14 = $r9[1];

        $r12[1] = $r14;

        $r15 = $r10[0];

        $r12[2] = $r15;

        $r16 = newarray (java.lang.String)[3];

        $r17 = $r9[0];

        $r16[0] = $r17;

        $r18 = $r10[0];

        $r16[1] = $r18;

        $r19 = $r10[1];

        $r16[2] = $r19;

        i10 = 0;

        $r20 = new java.util.HashSet;

        specialinvoke $r20.<java.util.HashSet: void <init>()>();

        i11 = 0;

     label02:
        if i11 >= 10 goto label03;

        $r33 = new org.apache.flink.core.io.LocatableInputSplit;

        $i9 = i10;

        i10 = i10 + 1;

        specialinvoke $r33.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>($i9, $r9);

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r33);

        i11 = i11 + 1;

        goto label02;

     label03:
        i12 = 0;

     label04:
        if i12 >= 10 goto label05;

        $r32 = new org.apache.flink.core.io.LocatableInputSplit;

        $i8 = i10;

        i10 = i10 + 1;

        specialinvoke $r32.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>($i8, $r12);

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r32);

        i12 = i12 + 1;

        goto label04;

     label05:
        i13 = 0;

     label06:
        if i13 >= 10 goto label07;

        $r31 = new org.apache.flink.core.io.LocatableInputSplit;

        $i7 = i10;

        i10 = i10 + 1;

        specialinvoke $r31.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>($i7, $r16);

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r31);

        i13 = i13 + 1;

        goto label06;

     label07:
        i14 = 0;

     label08:
        if i14 >= 10 goto label09;

        $r30 = new org.apache.flink.core.io.LocatableInputSplit;

        $i6 = i10;

        i10 = i10 + 1;

        specialinvoke $r30.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>($i6, $r10);

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>($r30);

        i14 = i14 + 1;

        goto label08;

     label09:
        $r21 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r21.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r20);

        i15 = 0;

     label10:
        if i15 >= 40 goto label17;

        $i4 = lengthof $r11;

        $i5 = i15 % $i4;

        r8 = $r11[$i5];

        r38 = virtualinvoke $r21.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>(r8, 0);

        if r38 == null goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z9);

        $z1 = interfaceinvoke $r20.<java.util.Set: boolean remove(java.lang.Object)>(r38);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r23 = $r9[0];

        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z2 == 0 goto label13;

        $r29 = virtualinvoke r38.<org.apache.flink.core.io.LocatableInputSplit: java.lang.String[] getHostnames()>();

        $z8 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r29, $r16);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z8);

        goto label16;

     label13:
        $r24 = $r9[1];

        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z3 == 0 goto label14;

        $r28 = virtualinvoke r38.<org.apache.flink.core.io.LocatableInputSplit: java.lang.String[] getHostnames()>();

        $z7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r28, $r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z7);

        goto label16;

     label14:
        $r25 = $r9[2];

        $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z4 == 0 goto label15;

        $r27 = virtualinvoke r38.<org.apache.flink.core.io.LocatableInputSplit: java.lang.String[] getHostnames()>();

        $z6 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r27, $r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z6);

        goto label16;

     label15:
        $r26 = virtualinvoke r38.<org.apache.flink.core.io.LocatableInputSplit: java.lang.String[] getHostnames()>();

        $z5 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r26, $r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

     label16:
        i15 = i15 + 1;

        goto label10;

     label17:
        $z0 = interfaceinvoke $r20.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("anotherHost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r22);

        $i0 = virtualinvoke $r21.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l1);

        $i2 = virtualinvoke $r21.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(30L, $l3);

     label18:
        goto label20;

     label19:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.lang.Exception: void printStackTrace()>();

        $r35 = virtualinvoke $r34.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r35);

     label20:
        return;

        catch java.lang.Exception from label01 to label18 with label19;
    }

    public void testSerialSplitAssignmentMixedLocalHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, $i10, $i11, i12, i13;
        java.lang.String[] $r2;
        java.util.HashSet $r3;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r4;
        java.lang.String $r5, $r9, $r11;
        org.apache.flink.core.io.LocatableInputSplit $r6, $r7, $r8;
        boolean $z0, $z1;
        long $l6, $l7, $l9;
        java.lang.Exception $r10;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label1:
        $r2 = newarray (java.lang.String)[6];

        $r2[0] = "host1";

        $r2[1] = "host1";

        $r2[2] = "host1";

        $r2[3] = "host2";

        $r2[4] = "host2";

        $r2[5] = "host3";

        $i1 = lengthof $r2;

        i0 = 10 * $i1;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        i12 = 0;

     label2:
        if i12 >= i0 goto label3;

        $r8 = new org.apache.flink.core.io.LocatableInputSplit;

        $i10 = lengthof $r2;

        $i11 = i12 % $i10;

        $r9 = $r2[$i11];

        specialinvoke $r8.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>(i12, $r9);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i12 = i12 + 1;

        goto label2;

     label3:
        $r4 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r3);

        i13 = 0;

     label4:
        $i2 = i13;

        i13 = i13 + 1;

        $i3 = lengthof $r2;

        $i4 = $i2 % $i3;

        $r5 = $r2[$i4];

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>($r5, 0);

        if $r6 == null goto label5;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        goto label4;

     label5:
        $z0 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r7 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("anotherHost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r7);

        $i5 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l6);

        $l7 = (long) i0;

        $i8 = virtualinvoke $r4.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l9);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

        $r11 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r11);

     label8:
        return;

        catch java.lang.Exception from label1 to label6 with label7;
    }

    public void testConcurrentSplitAssignmentNullHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.Thread[] r6;
        java.lang.String[][] $r7;
        java.lang.String[] $r8, $r9, $r22;
        java.util.HashSet $r10;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r11;
        java.util.concurrent.atomic.AtomicInteger $r12, $r13;
        org.apache.flink.core.io.LocatableSplitAssignerTest$1 $r14;
        int $i2, $i4, $i6, $i8, $i10, i12, i13, i14, i15, i16;
        long $l3, $l5, $l7, $l9;
        org.apache.flink.core.io.LocatableInputSplit $r15, $r21;
        java.lang.Thread $r16, $r17, $r18, $r19, $r20;
        boolean $z0;
        java.lang.Exception $r23;
        java.lang.String $r24;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label01:
        $r7 = newarray (java.lang.String[])[3];

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "localhost";

        $r7[0] = $r8;

        $r9 = newarray (java.lang.String)[0];

        $r7[1] = $r9;

        $r7[2] = null;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        i12 = 0;

     label02:
        if i12 >= 500 goto label03;

        $r21 = new org.apache.flink.core.io.LocatableInputSplit;

        $i10 = i12 % 3;

        $r22 = $r7[$i10];

        specialinvoke $r21.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>(i12, $r22);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r21);

        i12 = i12 + 1;

        goto label02;

     label03:
        $r11 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r10);

        $r12 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r13 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r14 = new org.apache.flink.core.io.LocatableSplitAssignerTest$1;

        specialinvoke $r14.<org.apache.flink.core.io.LocatableSplitAssignerTest$1: void <init>(org.apache.flink.core.io.LocatableSplitAssignerTest,org.apache.flink.api.common.io.LocatableInputSplitAssigner,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger)>(r0, $r11, $r12, $r13);

        r6 = newarray (java.lang.Thread)[10];

        i13 = 0;

     label04:
        if i13 >= 10 goto label05;

        $r19 = new java.lang.Thread;

        specialinvoke $r19.<java.lang.Thread: void <init>(java.lang.Runnable)>($r14);

        r6[i13] = $r19;

        $r20 = r6[i13];

        virtualinvoke $r20.<java.lang.Thread: void setDaemon(boolean)>(1);

        i13 = i13 + 1;

        goto label04;

     label05:
        i14 = 0;

     label06:
        if i14 >= 10 goto label07;

        $r18 = r6[i14];

        virtualinvoke $r18.<java.lang.Thread: void start()>();

        i14 = i14 + 1;

        goto label06;

     label07:
        i15 = 0;

     label08:
        if i15 >= 10 goto label09;

        $r17 = r6[i15];

        virtualinvoke $r17.<java.lang.Thread: void join(long)>(5000L);

        i15 = i15 + 1;

        goto label08;

     label09:
        i16 = 0;

     label10:
        if i16 >= 10 goto label12;

        $r16 = r6[i16];

        $z0 = virtualinvoke $r16.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("The concurrency test case is erroneous, the thread did not respond in time.");

     label11:
        i16 = i16 + 1;

        goto label10;

     label12:
        $i2 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l3);

        $i4 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(124750L, $l5);

        $r15 = virtualinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $i6 = virtualinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l7);

        $i8 = virtualinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

     label13:
        goto label15;

     label14:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

        $r24 = virtualinvoke $r23.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r24);

     label15:
        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }

    public void testConcurrentSplitAssignmentForSingleHost()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.Thread[] r5;
        java.util.HashSet $r6;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r7;
        java.util.concurrent.atomic.AtomicInteger $r8, $r9;
        org.apache.flink.core.io.LocatableSplitAssignerTest$2 $r10;
        int $i2, $i4, $i6, $i8, i11, i12, i13, i14, i15;
        long $l3, $l5, $l7, $l9;
        org.apache.flink.core.io.LocatableInputSplit $r11, $r17;
        java.lang.Thread $r12, $r13, $r14, $r15, $r16;
        boolean $z0;
        java.lang.Exception $r18;
        java.lang.String $r19;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label01:
        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        i11 = 0;

     label02:
        if i11 >= 500 goto label03;

        $r17 = new org.apache.flink.core.io.LocatableInputSplit;

        specialinvoke $r17.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>(i11, "testhost");

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r17);

        i11 = i11 + 1;

        goto label02;

     label03:
        $r7 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r6);

        $r8 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r9 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r10 = new org.apache.flink.core.io.LocatableSplitAssignerTest$2;

        specialinvoke $r10.<org.apache.flink.core.io.LocatableSplitAssignerTest$2: void <init>(org.apache.flink.core.io.LocatableSplitAssignerTest,org.apache.flink.api.common.io.LocatableInputSplitAssigner,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger)>(r0, $r7, $r8, $r9);

        r5 = newarray (java.lang.Thread)[10];

        i12 = 0;

     label04:
        if i12 >= 10 goto label05;

        $r15 = new java.lang.Thread;

        specialinvoke $r15.<java.lang.Thread: void <init>(java.lang.Runnable)>($r10);

        r5[i12] = $r15;

        $r16 = r5[i12];

        virtualinvoke $r16.<java.lang.Thread: void setDaemon(boolean)>(1);

        i12 = i12 + 1;

        goto label04;

     label05:
        i13 = 0;

     label06:
        if i13 >= 10 goto label07;

        $r14 = r5[i13];

        virtualinvoke $r14.<java.lang.Thread: void start()>();

        i13 = i13 + 1;

        goto label06;

     label07:
        i14 = 0;

     label08:
        if i14 >= 10 goto label09;

        $r13 = r5[i14];

        virtualinvoke $r13.<java.lang.Thread: void join(long)>(5000L);

        i14 = i14 + 1;

        goto label08;

     label09:
        i15 = 0;

     label10:
        if i15 >= 10 goto label12;

        $r12 = r5[i15];

        $z0 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("The concurrency test case is erroneous, the thread did not respond in time.");

     label11:
        i15 = i15 + 1;

        goto label10;

     label12:
        $i2 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l3);

        $i4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(124750L, $l5);

        $r11 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("testhost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r11);

        $i6 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfRemoteAssignments()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r7.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l9);

     label13:
        goto label15;

     label14:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

        $r19 = virtualinvoke $r18.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r19);

     label15:
        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }

    public void testConcurrentSplitAssignmentForMultipleHosts()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        java.lang.Thread[] r6;
        java.lang.String[] $r7;
        java.util.HashSet $r8;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r9;
        java.util.concurrent.atomic.AtomicInteger $r10, $r11;
        org.apache.flink.core.io.LocatableSplitAssignerTest$3 $r12;
        int $i2, $i4, $i6, $i7, $i8, $i9, $i10, i12, i13, i14, i15, i16;
        long $l3, $l5;
        org.apache.flink.core.io.LocatableInputSplit $r13, $r19;
        java.lang.Thread $r14, $r15, $r16, $r17, $r18;
        boolean $z0, $z2;
        java.lang.String $r20, $r22;
        java.lang.Exception $r21;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

     label01:
        $r7 = newarray (java.lang.String)[6];

        $r7[0] = "host1";

        $r7[1] = "host1";

        $r7[2] = "host1";

        $r7[3] = "host2";

        $r7[4] = "host2";

        $r7[5] = "host3";

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        i12 = 0;

     label02:
        if i12 >= 500 goto label03;

        $r19 = new org.apache.flink.core.io.LocatableInputSplit;

        $i9 = lengthof $r7;

        $i10 = i12 % $i9;

        $r20 = $r7[$i10];

        specialinvoke $r19.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String)>(i12, $r20);

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r19);

        i12 = i12 + 1;

        goto label02;

     label03:
        $r9 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r9.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r8);

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r11 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r12 = new org.apache.flink.core.io.LocatableSplitAssignerTest$3;

        specialinvoke $r12.<org.apache.flink.core.io.LocatableSplitAssignerTest$3: void <init>(org.apache.flink.core.io.LocatableSplitAssignerTest,java.lang.String[],org.apache.flink.api.common.io.LocatableInputSplitAssigner,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicInteger)>(r0, $r7, $r9, $r10, $r11);

        r6 = newarray (java.lang.Thread)[10];

        i13 = 0;

     label04:
        if i13 >= 10 goto label05;

        $r17 = new java.lang.Thread;

        specialinvoke $r17.<java.lang.Thread: void <init>(java.lang.Runnable)>($r12);

        r6[i13] = $r17;

        $r18 = r6[i13];

        virtualinvoke $r18.<java.lang.Thread: void setDaemon(boolean)>(1);

        i13 = i13 + 1;

        goto label04;

     label05:
        i14 = 0;

     label06:
        if i14 >= 10 goto label07;

        $r16 = r6[i14];

        virtualinvoke $r16.<java.lang.Thread: void start()>();

        i14 = i14 + 1;

        goto label06;

     label07:
        i15 = 0;

     label08:
        if i15 >= 10 goto label09;

        $r15 = r6[i15];

        virtualinvoke $r15.<java.lang.Thread: void join(long)>(5000L);

        i15 = i15 + 1;

        goto label08;

     label09:
        i16 = 0;

     label10:
        if i16 >= 10 goto label12;

        $r14 = r6[i16];

        $z0 = virtualinvoke $r14.<java.lang.Thread: boolean isAlive()>();

        if $z0 == 0 goto label11;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("The concurrency test case is erroneous, the thread did not respond in time.");

     label11:
        i16 = i16 + 1;

        goto label10;

     label12:
        $i2 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(500L, $l3);

        $i4 = virtualinvoke $r11.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(124750L, $l5);

        $r13 = virtualinvoke $r9.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("testhost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r13);

        $i6 = virtualinvoke $r9.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: int getNumberOfLocalAssignments()>();

        $i7 = lengthof $r7;

        $i8 = 500 / $i7;

        if $i6 < $i8 goto label13;

        $z2 = 1;

        goto label14;

     label13:
        $z2 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

     label15:
        goto label17;

     label16:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

        $r22 = virtualinvoke $r21.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r22);

     label17:
        return;

        catch java.lang.Exception from label01 to label15 with label16;
    }

    public void testAssignmentOfManySplitsRandomly()
    {
        org.apache.flink.core.io.LocatableSplitAssignerTest r0;
        long l0;
        java.lang.String[] r1, r2, $r16, r30;
        org.apache.flink.core.io.LocatableInputSplit r6, $r12, $r14;
        java.util.Calendar $r7;
        java.util.Random $r8;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        java.util.HashSet $r9, $r10;
        org.apache.flink.api.common.io.LocatableInputSplitAssigner $r11;
        boolean $z0, $z1, $z4;
        java.lang.String $r13, $r17, $r21, $r25, $r29;
        java.lang.Object[] $r15;
        java.lang.StringBuilder $r18, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r28;

        r0 := @this: org.apache.flink.core.io.LocatableSplitAssignerTest;

        $r7 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        l0 = virtualinvoke $r7.<java.util.Calendar: long getTimeInMillis()>();

        r1 = newarray (java.lang.String)[256];

        r2 = newarray (java.lang.String)[256];

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>(long)>(l0);

        i10 = 0;

     label01:
        $i2 = lengthof r1;

        if i10 >= $i2 goto label02;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("localHost");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i10] = $r29;

        i10 = i10 + 1;

        goto label01;

     label02:
        i11 = 0;

     label03:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label06;

        $i9 = i11 % 2;

        if $i9 != 0 goto label04;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("localHost");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r2[i11] = $r25;

        goto label05;

     label04:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("remoteHost");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r2[i11] = $r21;

     label05:
        i11 = i11 + 1;

        goto label03;

     label06:
        r30 = newarray (java.lang.String)[0];

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        i12 = 0;

     label07:
        if i12 >= 65536 goto label10;

     label08:
        $i6 = interfaceinvoke $r9.<java.util.Set: int size()>();

        if $i6 >= 3 goto label09;

        $i7 = lengthof r1;

        $i8 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i7);

        $r17 = r1[$i8];

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r17);

        goto label08;

     label09:
        $r14 = new org.apache.flink.core.io.LocatableInputSplit;

        $r15 = interfaceinvoke $r9.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r30);

        $r16 = (java.lang.String[]) $r15;

        specialinvoke $r14.<org.apache.flink.core.io.LocatableInputSplit: void <init>(int,java.lang.String[])>(i12, $r16);

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r14);

        interfaceinvoke $r9.<java.util.Set: void clear()>();

        i12 = i12 + 1;

        goto label07;

     label10:
        $r11 = new org.apache.flink.api.common.io.LocatableInputSplitAssigner;

        specialinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: void <init>(java.util.Collection)>($r10);

        i13 = 0;

     label11:
        if i13 >= 65536 goto label14;

        $i4 = lengthof r2;

        $i5 = virtualinvoke $r8.<java.util.Random: int nextInt(int)>($i4);

        $r13 = r2[$i5];

        r6 = virtualinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>($r13, 0);

        if r6 == null goto label12;

        $z4 = 1;

        goto label13;

     label12:
        $z4 = 0;

     label13:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $z1 = interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        i13 = i13 + 1;

        goto label11;

     label14:
        $z0 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.LocatableInputSplitAssigner: org.apache.flink.core.io.LocatableInputSplit getNextInputSplit(java.lang.String,int)>("testHost", 0);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r12);

        return;
    }
}
