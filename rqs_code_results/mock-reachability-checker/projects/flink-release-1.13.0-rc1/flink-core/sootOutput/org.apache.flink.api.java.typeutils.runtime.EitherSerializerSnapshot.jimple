public final class org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;
    private org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r4[0] = r1;

        $r4[1] = r2;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r4);

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r3;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        return 2;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void writeNestedSerializerSnapshots(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: void readV1(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        goto label4;

     label2:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: void readV2(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        return;
    }

    private void readV1(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate legacyReadNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r3;

        return;
    }

    private void readV2(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate readNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r3;

        return;
    }

    public org.apache.flink.api.java.typeutils.runtime.EitherSerializer restoreSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r1, $r3, $r5;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4, $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r2 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer getRestoredNestedSerializer(int)>(0);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer getRestoredNestedSerializer(int)>(1);

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>($r4, $r6);

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2, $r5;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3, $r7;
        org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z1);

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.EitherSerializer;

        if $z0 == 0 goto label3;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.JavaEitherSerializerSnapshot: void <init>()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()>();

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r4, $r6);

        return $r7;

     label3:
        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r3;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.EitherSerializer restoreSerializer()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.EitherSerializerSnapshot: int CURRENT_VERSION> = 2;

        return;
    }
}
