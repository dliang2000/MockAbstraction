public abstract class org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot
{
    private static final org.slf4j.Logger LOG;
    private java.util.LinkedHashMap kryoRegistrations;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class, java.util.LinkedHashMap)
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        java.lang.Class r1;
        java.util.LinkedHashMap r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.LinkedHashMap;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>(java.lang.Class)>(r1);

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (java.util.LinkedHashMap) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations> = $r4;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.LinkedHashMap $r4, $r5;
        int $i0;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r11;
        java.lang.String $r9;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy $r10;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        $i0 = virtualinvoke $r4.<java.util.LinkedHashMap: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        $r6 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r8;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r9);

        $r10 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.apache.flink.api.java.typeutils.runtime.KryoRegistration) $r11;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void <init>(org.apache.flink.api.java.typeutils.runtime.KryoRegistration)>($r12);

        virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        goto label1;

     label2:
        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i1;
        java.lang.String r3;
        java.util.LinkedHashMap $r4, $r7;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy $r5;
        java.lang.ClassLoader $r6;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>(int)>(i0);

        r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        $r5 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy;

        $r6 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void <init>(java.lang.ClassLoader)>($r6);

        virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy: org.apache.flink.api.java.typeutils.runtime.KryoRegistration access$000(org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot$KryoRegistrationSerializationProxy)>($r5);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.LinkedHashMap getKryoRegistrations()
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot $r2;
        java.util.LinkedHashMap $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer$KryoSerializerConfigSnapshot: java.util.LinkedHashMap getKryoRegistrations()>();

        $z1 = virtualinvoke $r3.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot r0;
        int $i0, $i1, $i2;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: int hashCode()>();

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: java.util.LinkedHashMap kryoRegistrations>;

        $i1 = virtualinvoke $r1.<java.util.LinkedHashMap: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/KryoRegistrationSerializerConfigSnapshot;");

        <org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
