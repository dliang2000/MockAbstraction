public class org.apache.flink.api.common.io.GlobFilePathFilterTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDefaultConstructorCreateMatchAllFilter()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        org.apache.flink.core.fs.Path $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>()>();

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/file.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testMatchAllFilesByDefault()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/file.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testExcludeFilesNotInIncludePatterns()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/*");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/file.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir1/file.txt");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testExcludeFilesIfMatchesExclude()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/*");

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/file.txt");

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/file.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testIncludeFileWithAnyCharacterMatcher()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/?.txt");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/a.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/aa.txt");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testIncludeFileWithCharacterSetMatcher()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/[acd].txt");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/a.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/c.txt");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/d.txt");

        $z2 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/z.txt");

        $z3 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r8);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testIncludeFileWithCharacterRangeMatcher()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("dir/[a-d].txt");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/a.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/b.txt");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/c.txt");

        $z2 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/d.txt");

        $z3 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("dir/z.txt");

        $z4 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;
    }

    public void testExcludeHDFSFile()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("/dir/file2.txt");

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///dir/file1.txt");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///dir/file2.txt");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("hdfs:///dir/file3.txt");

        $z2 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testExcludeFilenameWithStart()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.common.io.GlobFilePathFilter $r3;
        java.util.List $r4, $r5;
        org.apache.flink.core.fs.Path $r6, $r7, $r8;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $z0 = staticinvoke <org.apache.flink.util.OperatingSystem: boolean isWindows()>();

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("Windows does not allow asterisks in file names.", $z4);

        $r3 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("\\*");

        specialinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r4, $r5);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("*");

        $z1 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("**");

        $z2 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("other.txt");

        $z3 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z3);

        return;
    }

    public void testSingleStarPattern()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("*");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b/c");

        $z2 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }

    public void testDoubleStarPattern()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r2;
        java.util.List $r3, $r4;
        org.apache.flink.core.fs.Path $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r2 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r3, $r4);

        $r5 = new org.apache.flink.core.fs.Path;

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r5);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r6 = new org.apache.flink.core.fs.Path;

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b");

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r6);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b/c");

        $z2 = virtualinvoke $r2.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }

    public void testIncluePatternIsNull()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r1 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r1.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>(null, $r2);

        return;
    }

    public void testExcludePatternIsNull()
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter $r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r1 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        specialinvoke $r1.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r2, null);

        return;
    }

    public void testGlobFilterSerializable() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GlobFilePathFilterTest r0;
        org.apache.flink.api.common.io.GlobFilePathFilter r2, $r3;
        java.util.List $r4, $r5;
        java.io.Serializable $r6;
        org.apache.flink.core.fs.Path $r7, $r8, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.io.GlobFilePathFilterTest;

        $r3 = new org.apache.flink.api.common.io.GlobFilePathFilter;

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("**");

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        specialinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: void <init>(java.util.List,java.util.List)>($r4, $r5);

        $r6 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r3);

        r2 = (org.apache.flink.api.common.io.GlobFilePathFilter) $r6;

        $r7 = new org.apache.flink.core.fs.Path;

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a");

        $z0 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r8 = new org.apache.flink.core.fs.Path;

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b");

        $z1 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r8);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>("a/b/c");

        $z2 = virtualinvoke $r3.<org.apache.flink.api.common.io.GlobFilePathFilter: boolean filterPath(org.apache.flink.core.fs.Path)>($r9);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

        return;
    }
}
