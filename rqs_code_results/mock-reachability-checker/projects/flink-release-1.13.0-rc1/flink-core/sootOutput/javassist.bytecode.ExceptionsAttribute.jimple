public class javassist.bytecode.ExceptionsAttribute extends javassist.bytecode.AttributeInfo
{
    public static final java.lang.String tag;

    void <init>(javassist.bytecode.ConstPool, int, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.ExceptionsAttribute r0;
        javassist.bytecode.ConstPool r1;
        int i0;
        java.io.DataInputStream r2;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.DataInputStream;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)>(r1, i0, r2);

        return;
    }

    private void <init>(javassist.bytecode.ConstPool, javassist.bytecode.ExceptionsAttribute, java.util.Map)
    {
        javassist.bytecode.ExceptionsAttribute r0, r2;
        javassist.bytecode.ConstPool r1;
        java.util.Map r3;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.ExceptionsAttribute;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String)>(r1, "Exceptions");

        specialinvoke r0.<javassist.bytecode.ExceptionsAttribute: void copyFrom(javassist.bytecode.ExceptionsAttribute,java.util.Map)>(r2, r3);

        return;
    }

    public void <init>(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.ExceptionsAttribute r0;
        javassist.bytecode.ConstPool r1;
        byte[] r2;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String)>(r1, "Exceptions");

        r2 = newarray (byte)[2];

        r2[1] = 0;

        r2[0] = 0;

        r0.<javassist.bytecode.ExceptionsAttribute: byte[] info> = r2;

        return;
    }

    public javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool, java.util.Map)
    {
        javassist.bytecode.ExceptionsAttribute r0, $r3;
        javassist.bytecode.ConstPool r1;
        java.util.Map r2;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

        $r3 = new javassist.bytecode.ExceptionsAttribute;

        specialinvoke $r3.<javassist.bytecode.ExceptionsAttribute: void <init>(javassist.bytecode.ConstPool,javassist.bytecode.ExceptionsAttribute,java.util.Map)>(r1, r0, r2);

        return $r3;
    }

    private void copyFrom(javassist.bytecode.ExceptionsAttribute, java.util.Map)
    {
        javassist.bytecode.ExceptionsAttribute r0, r1;
        java.util.Map r2;
        javassist.bytecode.ConstPool r3, r4;
        byte[] r5, r6;
        int i0, i1, $i4, i5;
        byte $b2, $b3;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: javassist.bytecode.ExceptionsAttribute;

        r2 := @parameter1: java.util.Map;

        r3 = r1.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.ConstPool constPool>;

        r4 = r0.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.ConstPool constPool>;

        r5 = r1.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        i0 = lengthof r5;

        r6 = newarray (byte)[i0];

        $b2 = r5[0];

        r6[0] = $b2;

        $b3 = r5[1];

        r6[1] = $b3;

        i5 = 2;

     label1:
        if i5 >= i0 goto label2;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r5, i5);

        $i4 = virtualinvoke r3.<javassist.bytecode.ConstPool: int copy(int,javassist.bytecode.ConstPool,java.util.Map)>(i1, r4, r2);

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i4, r6, i5);

        i5 = i5 + 2;

        goto label1;

     label2:
        r0.<javassist.bytecode.ExceptionsAttribute: byte[] info> = r6;

        return;
    }

    public int[] getExceptionIndexes()
    {
        javassist.bytecode.ExceptionsAttribute r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i6, $i9, $i10, i11, i12;
        int[] r2;
        byte $b4, $b7;
        short $s5, $s8;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 = r0.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        i0 = lengthof r1;

        if i0 > 2 goto label1;

        return null;

     label1:
        $i1 = i0 / 2;

        $i2 = $i1 - 1;

        r2 = newarray (int)[$i2];

        i11 = 0;

        i12 = 2;

     label2:
        if i12 >= i0 goto label3;

        $i3 = i11;

        i11 = i11 + 1;

        $b4 = r1[i12];

        $s5 = $b4 & 255;

        $i9 = $s5 << 8;

        $i6 = i12 + 1;

        $b7 = r1[$i6];

        $s8 = $b7 & 255;

        $i10 = $i9 | $s8;

        r2[$i3] = $i10;

        i12 = i12 + 2;

        goto label2;

     label3:
        return r2;
    }

    public java.lang.String[] getExceptions()
    {
        javassist.bytecode.ExceptionsAttribute r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i6, $i9, $i10, i11, i12;
        java.lang.String[] r2;
        byte $b4, $b7;
        short $s5, $s8;
        javassist.bytecode.ConstPool $r3;
        java.lang.String $r4;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 = r0.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        i0 = lengthof r1;

        if i0 > 2 goto label1;

        return null;

     label1:
        $i2 = i0 / 2;

        $i3 = $i2 - 1;

        r2 = newarray (java.lang.String)[$i3];

        i11 = 0;

        i12 = 2;

     label2:
        if i12 >= i0 goto label3;

        $b4 = r1[i12];

        $s5 = $b4 & 255;

        $i9 = $s5 << 8;

        $i6 = i12 + 1;

        $b7 = r1[$i6];

        $s8 = $b7 & 255;

        i1 = $i9 | $s8;

        $i10 = i11;

        i11 = i11 + 1;

        $r3 = r0.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.ConstPool constPool>;

        $r4 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i1);

        r2[$i10] = $r4;

        i12 = i12 + 2;

        goto label2;

     label3:
        return r2;
    }

    public void setExceptionIndexes(int[])
    {
        javassist.bytecode.ExceptionsAttribute r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        byte[] r2;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: int[];

        i0 = lengthof r1;

        $i1 = i0 * 2;

        $i2 = $i1 + 2;

        r2 = newarray (byte)[$i2];

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i0, r2, 0);

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $i5 = r1[i6];

        $i3 = i6 * 2;

        $i4 = $i3 + 2;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i5, r2, $i4);

        i6 = i6 + 1;

        goto label1;

     label2:
        r0.<javassist.bytecode.ExceptionsAttribute: byte[] info> = r2;

        return;
    }

    public void setExceptions(java.lang.String[])
    {
        javassist.bytecode.ExceptionsAttribute r0;
        java.lang.String[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        byte[] r2;
        java.lang.String $r3;
        javassist.bytecode.ConstPool $r4;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        $i1 = i0 * 2;

        $i2 = $i1 + 2;

        r2 = newarray (byte)[$i2];

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i0, r2, 0);

        i6 = 0;

     label1:
        if i6 >= i0 goto label2;

        $r4 = r0.<javassist.bytecode.ExceptionsAttribute: javassist.bytecode.ConstPool constPool>;

        $r3 = r1[i6];

        $i3 = virtualinvoke $r4.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r3);

        $i4 = i6 * 2;

        $i5 = $i4 + 2;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i3, r2, $i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        r0.<javassist.bytecode.ExceptionsAttribute: byte[] info> = r2;

        return;
    }

    public int tableLength()
    {
        javassist.bytecode.ExceptionsAttribute r0;
        byte[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        $r1 = r0.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        $i0 = lengthof $r1;

        $i1 = $i0 / 2;

        $i2 = $i1 - 1;

        return $i2;
    }

    public int getException(int)
    {
        javassist.bytecode.ExceptionsAttribute r0;
        int i0, i1, $i2, $i5, $i8, $i9;
        byte[] $r1, $r2;
        byte $b3, $b6;
        short $s4, $s7;

        r0 := @this: javassist.bytecode.ExceptionsAttribute;

        i0 := @parameter0: int;

        $i2 = i0 * 2;

        i1 = $i2 + 2;

        $r1 = r0.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        $b3 = $r1[i1];

        $s4 = $b3 & 255;

        $i8 = $s4 << 8;

        $r2 = r0.<javassist.bytecode.ExceptionsAttribute: byte[] info>;

        $i5 = i1 + 1;

        $b6 = $r2[$i5];

        $s7 = $b6 & 255;

        $i9 = $i8 | $s7;

        return $i9;
    }

    public static void <clinit>()
    {
        <javassist.bytecode.ExceptionsAttribute: java.lang.String tag> = "Exceptions";

        return;
    }
}
