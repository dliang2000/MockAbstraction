public class org.apache.flink.api.common.io.FileOutputFormatTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.io.FileOutputFormatTest r0;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormatTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testCreateNonParallelLocalFS() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormatTest r0;
        java.io.File r1, $r4, $r31, $r37, $r39, $r84, $r86, $r99, $r115, $r117, $r132, $r134;
        java.lang.String r3, $r6, $r9, $r33, $r36, $r42, $r70, $r89, $r101, $r104, $r120, $r127, $r137;
        java.lang.StringBuilder $r5, $r7, $r8, $r32, $r34, $r35, $r38, $r40, $r41, $r67, $r68, $r69, $r85, $r87, $r88, $r100, $r102, $r103, $r116, $r118, $r119, $r124, $r125, $r126, $r133, $r135, $r136;
        java.net.URI $r10;
        org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat $r11, $r16, $r21, $r26, $r43, $r64, $r75, $r90, $r106, $r121;
        org.apache.flink.core.fs.Path $r12, $r17, $r22, $r27, $r44, $r66, $r77, $r92, $r108, $r123;
        org.apache.flink.core.fs.FileSystem$WriteMode $r13, $r18, $r23, $r28, $r45, $r71, $r78, $r93, $r109, $r128;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r14, $r19, $r24, $r29, $r46, $r72, $r79, $r94, $r110, $r129;
        org.apache.flink.configuration.Configuration $r15, $r20, $r25, $r30, $r47, $r73, $r80, $r95, $r111, $r130;
        boolean $z1, $z3, $z5, $z9, $z10, $z12, $z17, $z20, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46;
        java.lang.Exception $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormatTest;

        r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fileOutputFormatTest", "Test1");

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        r3 = virtualinvoke $r10.<java.net.URI: java.lang.String toString()>();

        $r11 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r12 = new org.apache.flink.core.fs.Path;

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r12);

        $r13 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r13);

        $r14 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r14);

        $r15 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r15.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r15);

     label01:
        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r48 := @caughtexception;

     label04:
        virtualinvoke r1.<java.io.File: boolean delete()>();

        $z1 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z1);

        $r16 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r17 = new org.apache.flink.core.fs.Path;

        specialinvoke $r17.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r17);

        $r18 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r18);

        $r19 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r19);

        $r20 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r20.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r20);

     label05:
        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r16.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label06:
        goto label08;

     label07:
        $r49 := @caughtexception;

     label08:
        virtualinvoke r1.<java.io.File: boolean delete()>();

        $r21 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r22 = new org.apache.flink.core.fs.Path;

        specialinvoke $r22.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r22);

        $r23 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r23);

        $r24 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r24);

        $r25 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r25.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r25);

     label09:
        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r21.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label10:
        goto label12;

     label11:
        $r56 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        $z3 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label13;

        $z32 = virtualinvoke r1.<java.io.File: boolean isFile()>();

        if $z32 == 0 goto label13;

        $z33 = 1;

        goto label14;

     label13:
        $z33 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z33);

        virtualinvoke r1.<java.io.File: boolean delete()>();

        $r64 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r66 = new org.apache.flink.core.fs.Path;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r70);

        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r66);

        $r71 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r71);

        $r72 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r72);

        $r73 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r73.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r73);

     label15:
        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r64.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label16:
        goto label18;

     label17:
        $r55 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label18:
        $z5 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label19;

        $z31 = virtualinvoke r1.<java.io.File: boolean isFile()>();

        if $z31 == 0 goto label19;

        $z34 = 1;

        goto label20;

     label19:
        $z34 = 0;

     label20:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z34);

        virtualinvoke r1.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean createNewFile()>();

        $r75 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r77 = new org.apache.flink.core.fs.Path;

        specialinvoke $r77.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r77);

        $r78 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r78);

        $r79 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r79);

        $r80 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r80.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r80);

     label21:
        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r75.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label22:
        goto label24;

     label23:
        $r54 := @caughtexception;

     label24:
        virtualinvoke r1.<java.io.File: boolean delete()>();

        $z9 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z9);

        $r26 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r27 = new org.apache.flink.core.fs.Path;

        specialinvoke $r27.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r27);

        $r28 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r28);

        $r29 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r29);

        $r30 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r30.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r30);

     label25:
        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label26:
        goto label28;

     label27:
        $r57 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label28:
        $z10 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z10 == 0 goto label29;

        $z30 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z30 == 0 goto label29;

        $z35 = 1;

        goto label30;

     label29:
        $z35 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z35);

        $z36 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z36 == 0 goto label31;

        $z29 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z29 == 0 goto label31;

        $z37 = 1;

        goto label32;

     label31:
        $z37 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z37);

        $r84 = new java.io.File;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r86 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r84.<java.io.File: void <init>(java.lang.String)>($r89);

        virtualinvoke $r84.<java.io.File: boolean delete()>();

        $r90 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r92 = new org.apache.flink.core.fs.Path;

        specialinvoke $r92.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r92);

        $r93 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r93);

        $r94 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r94);

        $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: boolean testFileName> = 1;

        $r95 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r95.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r95);

     label33:
        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r90.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label34:
        goto label36;

     label35:
        $r50 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label36:
        $r31 = new java.io.File;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/fancy-1-0.avro");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String)>($r36);

        $z12 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z12 == 0 goto label37;

        $z28 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z28 == 0 goto label37;

        $z38 = 1;

        goto label38;

     label37:
        $z38 = 0;

     label38:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z38);

        $z39 = virtualinvoke $r31.<java.io.File: boolean exists()>();

        if $z39 == 0 goto label39;

        $z27 = virtualinvoke $r31.<java.io.File: boolean isFile()>();

        if $z27 == 0 goto label39;

        $z40 = 1;

        goto label40;

     label39:
        $z40 = 0;

     label40:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z40);

        virtualinvoke $r31.<java.io.File: boolean delete()>();

        $r99 = new java.io.File;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r102 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r99.<java.io.File: void <init>(java.lang.String)>($r104);

        virtualinvoke $r99.<java.io.File: boolean createNewFile()>();

        $r106 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r108 = new org.apache.flink.core.fs.Path;

        specialinvoke $r108.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r108);

        $r109 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r109);

        $r110 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r110);

        $r111 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r111.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r111);

     label41:
        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r106.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label42:
        goto label44;

     label43:
        $r51 := @caughtexception;

     label44:
        $r37 = new java.io.File;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>($r42);

        virtualinvoke $r37.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean delete()>();

        $r43 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r44 = new org.apache.flink.core.fs.Path;

        specialinvoke $r44.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r3);

        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r44);

        $r45 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r45);

        $r46 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r46);

        $r47 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r47.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r47);

     label45:
        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r43.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label46:
        goto label48;

     label47:
        $r53 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label48:
        $z17 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z17 == 0 goto label49;

        $z26 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z26 == 0 goto label49;

        $z41 = 1;

        goto label50;

     label49:
        $z41 = 0;

     label50:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z41);

        $z42 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z42 == 0 goto label51;

        $z25 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z25 == 0 goto label51;

        $z43 = 1;

        goto label52;

     label51:
        $z43 = 0;

     label52:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z43);

        $r115 = new java.io.File;

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        $r117 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r118 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r117);

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r115.<java.io.File: void <init>(java.lang.String)>($r120);

        virtualinvoke $r115.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean delete()>();

        $r121 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r123 = new org.apache.flink.core.fs.Path;

        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r123.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r127);

        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r123);

        $r128 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r128);

        $r129 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r129);

        $r130 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r130.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r130);

     label53:
        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r121.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label54:
        goto label56;

     label55:
        $r52 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label56:
        $z20 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z20 == 0 goto label57;

        $z24 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z24 == 0 goto label57;

        $z44 = 1;

        goto label58;

     label57:
        $z44 = 0;

     label58:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z44);

        $z45 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z45 == 0 goto label59;

        $z23 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z23 == 0 goto label59;

        $z46 = 1;

        goto label60;

     label59:
        $z46 = 0;

     label60:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z46);

        $r132 = new java.io.File;

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        $r134 = virtualinvoke r1.<java.io.File: java.io.File getAbsoluteFile()>();

        $r135 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r134);

        $r136 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r132.<java.io.File: void <init>(java.lang.String)>($r137);

        virtualinvoke $r132.<java.io.File: boolean delete()>();

        virtualinvoke r1.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label33 to label34 with label35;
        catch java.lang.Exception from label41 to label42 with label43;
        catch java.lang.Exception from label45 to label46 with label47;
        catch java.lang.Exception from label53 to label54 with label55;
    }

    public void testCreateParallelLocalFS() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormatTest r0;
        java.lang.String r1, $r4, $r7, $r46;
        java.io.File $r2, r29;
        java.lang.StringBuilder $r3, $r5, $r6, $r43, $r44, $r45;
        java.net.URI $r8;
        org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat $r9, $r14, $r19, $r33, $r40;
        org.apache.flink.core.fs.Path $r10, $r15, $r20, $r35, $r42;
        org.apache.flink.core.fs.FileSystem$WriteMode $r11, $r16, $r21, $r36, $r47;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r12, $r17, $r22, $r37, $r48;
        org.apache.flink.configuration.Configuration $r13, $r18, $r23, $r38, $r49;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Exception $r24, $r25, $r26, $r27, $r28;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormatTest;

        r29 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fileOutputFormatTest", "Test1");

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r29.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke r29.<java.io.File: java.net.URI toURI()>();

        r1 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r9 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r10 = new org.apache.flink.core.fs.Path;

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r10);

        $r11 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r11);

        $r12 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

     label01:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label02:
        goto label04;

     label03:
        $r28 := @caughtexception;

     label04:
        virtualinvoke r29.<java.io.File: boolean delete()>();

        $z0 = virtualinvoke r29.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z0);

        $r14 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r15 = new org.apache.flink.core.fs.Path;

        specialinvoke $r15.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r15);

        $r16 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r16);

        $r17 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r17);

        $r18 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r18.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r18);

     label05:
        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r14.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label06:
        goto label08;

     label07:
        $r27 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label08:
        $z1 = virtualinvoke r29.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label09;

        $z9 = virtualinvoke r29.<java.io.File: boolean isDirectory()>();

        if $z9 == 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z10);

        $z11 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z11 == 0 goto label11;

        $z8 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z8 == 0 goto label11;

        $z12 = 1;

        goto label12;

     label11:
        $z12 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z12);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r29.<java.io.File: boolean delete()>();

        virtualinvoke r29.<java.io.File: boolean mkdir()>();

        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        $r33 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r35 = new org.apache.flink.core.fs.Path;

        specialinvoke $r35.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r35);

        $r36 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r36);

        $r37 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r37);

        $r38 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r38.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r38);

     label13:
        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r33.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

        staticinvoke <org.junit.Assert: void fail()>();

     label14:
        goto label16;

     label15:
        $r26 := @caughtexception;

     label16:
        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r29.<java.io.File: boolean delete()>();

        $r19 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r20 = new org.apache.flink.core.fs.Path;

        specialinvoke $r20.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r20);

        $r21 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r21);

        $r22 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r22);

        $r23 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r23.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r23);

     label17:
        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r19.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label18:
        goto label20;

     label19:
        $r24 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label20:
        $z2 = virtualinvoke r29.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label21;

        $z7 = virtualinvoke r29.<java.io.File: boolean isDirectory()>();

        if $z7 == 0 goto label21;

        $z13 = 1;

        goto label22;

     label21:
        $z13 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z13);

        $z14 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z14 == 0 goto label23;

        $z6 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z6 == 0 goto label23;

        $z15 = 1;

        goto label24;

     label23:
        $z15 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r29.<java.io.File: boolean delete()>();

        $r40 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r42 = new org.apache.flink.core.fs.Path;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r46);

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r42);

        $r47 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r47);

        $r48 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r48);

        $r49 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r49.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r49);

     label25:
        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label26:
        goto label28;

     label27:
        $r25 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label28:
        $z3 = virtualinvoke r29.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label29;

        $z5 = virtualinvoke r29.<java.io.File: boolean isDirectory()>();

        if $z5 == 0 goto label29;

        $z16 = 1;

        goto label30;

     label29:
        $z16 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z16);

        $z17 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z17 == 0 goto label31;

        $z4 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z4 == 0 goto label31;

        $z18 = 1;

        goto label32;

     label31:
        $z18 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z18);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r29.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label25 to label26 with label27;
    }

    public void testOverwriteNonParallelLocalFS() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormatTest r0;
        java.lang.String r1, $r4, $r7, $r44, $r78;
        java.io.File $r2, r23;
        java.lang.StringBuilder $r3, $r5, $r6, $r41, $r42, $r43, $r75, $r76, $r77;
        java.net.URI $r8;
        org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat $r9, $r26, $r32, $r38, $r48, $r54, $r60, $r66, $r72;
        org.apache.flink.core.fs.Path $r10, $r28, $r34, $r40, $r50, $r56, $r62, $r68, $r74;
        org.apache.flink.core.fs.FileSystem$WriteMode $r11, $r29, $r35, $r45, $r51, $r57, $r63, $r69, $r79;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r12, $r30, $r36, $r46, $r52, $r58, $r64, $r70, $r80;
        org.apache.flink.configuration.Configuration $r13, $r31, $r37, $r47, $r53, $r59, $r65, $r71, $r81;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43;
        java.lang.Exception $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormatTest;

        r23 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fileOutputFormatTest", "Test1");

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r23.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke r23.<java.io.File: java.net.URI toURI()>();

        r1 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r9 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r10 = new org.apache.flink.core.fs.Path;

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r10);

        $r11 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r11);

        $r12 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

     label01:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label04:
        $z0 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        $z22 = virtualinvoke r23.<java.io.File: boolean isFile()>();

        if $z22 == 0 goto label05;

        $z23 = 1;

        goto label06;

     label05:
        $z23 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z23);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        $z24 = virtualinvoke r23.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z24);

        $r26 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r28 = new org.apache.flink.core.fs.Path;

        specialinvoke $r28.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r28);

        $r29 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r29);

        $r30 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r30);

        $r31 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r31.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r31);

     label07:
        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r26.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label08:
        goto label10;

     label09:
        $r22 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label10:
        $z1 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label11;

        $z21 = virtualinvoke r23.<java.io.File: boolean isFile()>();

        if $z21 == 0 goto label11;

        $z25 = 1;

        goto label12;

     label11:
        $z25 = 0;

     label12:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        $r32 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r34 = new org.apache.flink.core.fs.Path;

        specialinvoke $r34.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r34);

        $r35 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r35);

        $r36 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r36);

        $r37 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r37.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r37);

     label13:
        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r32.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label16:
        $z2 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label17;

        $z20 = virtualinvoke r23.<java.io.File: boolean isFile()>();

        if $z20 == 0 goto label17;

        $z26 = 1;

        goto label18;

     label17:
        $z26 = 0;

     label18:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z26);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        $r38 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r40 = new org.apache.flink.core.fs.Path;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r44);

        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r40);

        $r45 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r45);

        $r46 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r46);

        $r47 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r47.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r47);

     label19:
        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r38.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label20:
        goto label22;

     label21:
        $r18 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label22:
        $z3 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label23;

        $z19 = virtualinvoke r23.<java.io.File: boolean isFile()>();

        if $z19 == 0 goto label23;

        $z27 = 1;

        goto label24;

     label23:
        $z27 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        virtualinvoke r23.<java.io.File: boolean createNewFile()>();

        $r48 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r50 = new org.apache.flink.core.fs.Path;

        specialinvoke $r50.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r50);

        $r51 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r51);

        $r52 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r52);

        $r53 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r53.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r53);

     label25:
        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r48.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label26:
        goto label28;

     label27:
        $r21 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label28:
        $z4 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label29;

        $z18 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z18 == 0 goto label29;

        $z28 = 1;

        goto label30;

     label29:
        $z28 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z28);

        $z29 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z29 == 0 goto label31;

        $z17 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z17 == 0 goto label31;

        $z30 = 1;

        goto label32;

     label31:
        $z30 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z30);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r23.<java.io.File: boolean delete()>();

        $z31 = virtualinvoke r23.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z31);

        $r54 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r56 = new org.apache.flink.core.fs.Path;

        specialinvoke $r56.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r56);

        $r57 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r57);

        $r58 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r58);

        $r59 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r59.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r59);

     label33:
        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r54.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label34:
        goto label36;

     label35:
        $r16 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label36:
        $z5 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label37;

        $z16 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z16 == 0 goto label37;

        $z32 = 1;

        goto label38;

     label37:
        $z32 = 0;

     label38:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z32);

        $z33 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z33 == 0 goto label39;

        $z15 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z15 == 0 goto label39;

        $z34 = 1;

        goto label40;

     label39:
        $z34 = 0;

     label40:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z34);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r23.<java.io.File: boolean mkdir()>();

        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        $r60 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r62 = new org.apache.flink.core.fs.Path;

        specialinvoke $r62.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r62);

        $r63 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r63);

        $r64 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r64);

        $r65 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r65.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r65);

     label41:
        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r60.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label42:
        goto label44;

     label43:
        $r20 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label44:
        $z6 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label45;

        $z14 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z14 == 0 goto label45;

        $z35 = 1;

        goto label46;

     label45:
        $z35 = 0;

     label46:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z35);

        $z36 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z36 == 0 goto label47;

        $z13 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z13 == 0 goto label47;

        $z37 = 1;

        goto label48;

     label47:
        $z37 = 0;

     label48:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z37);

        virtualinvoke r23.<java.io.File: boolean delete()>();

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        $r66 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r68 = new org.apache.flink.core.fs.Path;

        specialinvoke $r68.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r68);

        $r69 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r69);

        $r70 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r70);

        $r71 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r71.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r71);

     label49:
        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r66.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label50:
        goto label52;

     label51:
        $r19 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label52:
        $z7 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z7 == 0 goto label53;

        $z12 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z12 == 0 goto label53;

        $z38 = 1;

        goto label54;

     label53:
        $z38 = 0;

     label54:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z38);

        $z39 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z39 == 0 goto label55;

        $z11 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z11 == 0 goto label55;

        $z40 = 1;

        goto label56;

     label55:
        $z40 = 0;

     label56:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z40);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r23.<java.io.File: boolean delete()>();

        $r72 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r74 = new org.apache.flink.core.fs.Path;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r78);

        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r74);

        $r79 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r79);

        $r80 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r80);

        $r81 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r81.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r81);

     label57:
        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 1);

        virtualinvoke $r72.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label58:
        goto label60;

     label59:
        $r14 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label60:
        $z8 = virtualinvoke r23.<java.io.File: boolean exists()>();

        if $z8 == 0 goto label61;

        $z10 = virtualinvoke r23.<java.io.File: boolean isDirectory()>();

        if $z10 == 0 goto label61;

        $z41 = 1;

        goto label62;

     label61:
        $z41 = 0;

     label62:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z41);

        $z42 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z42 == 0 goto label63;

        $z9 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z9 == 0 goto label63;

        $z43 = 1;

        goto label64;

     label63:
        $z43 = 0;

     label64:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z43);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r23.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label33 to label34 with label35;
        catch java.lang.Exception from label41 to label42 with label43;
        catch java.lang.Exception from label49 to label50 with label51;
        catch java.lang.Exception from label57 to label58 with label59;
    }

    public void testOverwriteParallelLocalFS() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormatTest r0;
        java.lang.String r1, $r4, $r7, $r39, $r52;
        java.io.File $r2, r19, $r34, $r36;
        java.lang.StringBuilder $r3, $r5, $r6, $r35, $r37, $r38, $r49, $r50, $r51;
        java.net.URI $r8;
        org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat $r9, $r22, $r28, $r40, $r46;
        org.apache.flink.core.fs.Path $r10, $r24, $r30, $r42, $r48;
        org.apache.flink.core.fs.FileSystem$WriteMode $r11, $r25, $r31, $r43, $r53;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r12, $r26, $r32, $r44, $r54;
        org.apache.flink.configuration.Configuration $r13, $r27, $r33, $r45, $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30;
        java.lang.Exception $r14, $r15, $r16, $r17, $r18;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormatTest;

        r19 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("fileOutputFormatTest", "Test1");

        $r2 = new java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r19.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        $r8 = virtualinvoke r19.<java.io.File: java.net.URI toURI()>();

        r1 = virtualinvoke $r8.<java.net.URI: java.lang.String toString()>();

        $r9 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r10 = new org.apache.flink.core.fs.Path;

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r10);

        $r11 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r11);

        $r12 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r12);

        $r13 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r13.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r13);

     label01:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label04:
        $z0 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        $z14 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z14 == 0 goto label05;

        $z15 = 1;

        goto label06;

     label05:
        $z15 = 0;

     label06:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z15);

        $z16 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z16 == 0 goto label07;

        $z13 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z13 == 0 goto label07;

        $z17 = 1;

        goto label08;

     label07:
        $z17 = 0;

     label08:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z17);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean delete()>();

        $z18 = virtualinvoke r19.<java.io.File: boolean mkdir()>();

        staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>("Directory could not be created.", $z18);

        $r22 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r24 = new org.apache.flink.core.fs.Path;

        specialinvoke $r24.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r24);

        $r25 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r25);

        $r26 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r26);

        $r27 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r27.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r27);

     label09:
        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r22.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label10:
        goto label12;

     label11:
        $r18 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label12:
        $z1 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label13;

        $z12 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z12 == 0 goto label13;

        $z19 = 1;

        goto label14;

     label13:
        $z19 = 0;

     label14:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z19);

        $z20 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z20 == 0 goto label15;

        $z11 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z11 == 0 goto label15;

        $z21 = 1;

        goto label16;

     label15:
        $z21 = 0;

     label16:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z21);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean mkdir()>();

        virtualinvoke $r2.<java.io.File: boolean createNewFile()>();

        $r28 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r30 = new org.apache.flink.core.fs.Path;

        specialinvoke $r30.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r30);

        $r31 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r31);

        $r32 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r32);

        $r33 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r33.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r33);

     label17:
        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r28.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label18:
        goto label20;

     label19:
        $r16 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label20:
        $z2 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label21;

        $z10 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z10 == 0 goto label21;

        $z22 = 1;

        goto label22;

     label21:
        $z22 = 0;

     label22:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z22);

        $z23 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z23 == 0 goto label23;

        $z9 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z9 == 0 goto label23;

        $z24 = 1;

        goto label24;

     label23:
        $z24 = 0;

     label24:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z24);

        $r34 = new java.io.File;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke r19.<java.io.File: java.io.File getAbsoluteFile()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/1");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String)>($r39);

        virtualinvoke $r34.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean delete()>();

        $r40 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r42 = new org.apache.flink.core.fs.Path;

        specialinvoke $r42.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r42);

        $r43 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r43);

        $r44 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r44);

        $r45 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r45.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r45);

     label25:
        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r40.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label26:
        goto label28;

     label27:
        $r15 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label28:
        $z3 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label29;

        $z8 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z8 == 0 goto label29;

        $z25 = 1;

        goto label30;

     label29:
        $z25 = 0;

     label30:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z25);

        $z26 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z26 == 0 goto label31;

        $z7 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z7 == 0 goto label31;

        $z27 = 1;

        goto label32;

     label31:
        $z27 = 0;

     label32:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z27);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean delete()>();

        $r46 = new org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat;

        specialinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void <init>()>();

        $r48 = new org.apache.flink.core.fs.Path;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r52);

        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputFilePath(org.apache.flink.core.fs.Path)>($r48);

        $r53 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)>($r53);

        $r54 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)>($r54);

        $r55 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r55.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r55);

     label33:
        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void open(int,int)>(0, 2);

        virtualinvoke $r46.<org.apache.flink.api.common.io.FileOutputFormatTest$DummyFileOutputFormat: void close()>();

     label34:
        goto label36;

     label35:
        $r14 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail()>();

     label36:
        $z4 = virtualinvoke r19.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label37;

        $z6 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z6 == 0 goto label37;

        $z28 = 1;

        goto label38;

     label37:
        $z28 = 0;

     label38:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z28);

        $z29 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z29 == 0 goto label39;

        $z5 = virtualinvoke $r2.<java.io.File: boolean isFile()>();

        if $z5 == 0 goto label39;

        $z30 = 1;

        goto label40;

     label39:
        $z30 = 0;

     label40:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z30);

        virtualinvoke $r2.<java.io.File: boolean delete()>();

        virtualinvoke r19.<java.io.File: boolean delete()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label33 to label34 with label35;
    }
}
