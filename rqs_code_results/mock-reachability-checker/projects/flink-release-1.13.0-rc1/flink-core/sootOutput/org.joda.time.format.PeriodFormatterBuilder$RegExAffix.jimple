class org.joda.time.format.PeriodFormatterBuilder$RegExAffix extends org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix
{
    private static final java.util.Comparator LENGTH_DESC_COMPARATOR;
    private final java.lang.String[] iSuffixes;
    private final java.util.regex.Pattern[] iPatterns;
    private final java.lang.String[] iSuffixesSortedDescByLength;

    void <init>(java.lang.String[], java.lang.String[])
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String[] r1, r2, $r4, $r6, $r8, $r10;
        java.lang.Object $r3, $r7, $r13;
        int $i0, $i1, i2;
        java.util.regex.Pattern[] $r5, $r14;
        java.util.Comparator $r9;
        java.util.concurrent.ConcurrentMap $r11, $r16;
        java.lang.String $r12, $r15, $r17;
        java.util.regex.Pattern r19;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.String[]) $r3;

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes> = $r4;

        $i0 = lengthof r1;

        $r5 = newarray (java.util.regex.Pattern)[$i0];

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns> = $r5;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r11 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>();

        $r12 = r1[i2];

        $r13 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r12);

        r19 = (java.util.regex.Pattern) $r13;

        if r19 != null goto label2;

        $r15 = r1[i2];

        r19 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r15);

        $r16 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.util.concurrent.ConcurrentMap access$200()>();

        $r17 = r1[i2];

        interfaceinvoke $r16.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r17, r19);

     label2:
        $r14 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $r14[i2] = r19;

        i2 = i2 + 1;

        goto label1;

     label3:
        $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (java.lang.String[]) $r7;

        r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength> = $r8;

        $r10 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        $r9 = <org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.Comparator LENGTH_DESC_COMPARATOR>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r10, $r9);

        return;
    }

    private int selectSuffixIndex(int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r1;
        java.util.regex.Pattern[] $r2, $r3, $r4;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        boolean $z0;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        i4 = 0;

     label1:
        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $i1 = lengthof $r2;

        if i4 >= $i1 goto label3;

        $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $r5 = $r4[i4];

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.regex.Pattern[] iPatterns>;

        $i2 = lengthof $r3;

        $i3 = $i2 - 1;

        return $i3;
    }

    public int calculatePrintedLength(int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        int i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i1 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>(i0);

        $r2 = $r1[$i1];

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        return $i2;
    }

    public void printTo(java.lang.StringBuffer, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.StringBuffer r1;
        int i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        r1 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i1 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>(i0);

        $r3 = $r2[$i1];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        return;
    }

    public void printTo(java.io.Writer, int) throws java.io.IOException
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.io.Writer r1;
        int i0, $i1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        r1 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $i1 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: int selectSuffixIndex(int)>(i0);

        $r3 = $r2[$i1];

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r3);

        return;
    }

    public int parse(java.lang.String, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String r1, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String[] r2;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        i1 = lengthof r2;

        i7 = 0;

     label1:
        if i7 >= i1 goto label3;

        r3 = r2[i7];

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r3, 0, $i3);

        if $z0 == 0 goto label2;

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $z1 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: boolean matchesOtherAffix(int,java.lang.String,int)>($i4, r1, i0);

        if $z1 != 0 goto label2;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        $i6 = i0 + $i5;

        return $i6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $i2 = i0 ^ -1;

        return $i2;
    }

    public int scan(java.lang.String, int)
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String r1, r3;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7;
        java.lang.String[] r2;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i6 = i0;

     label1:
        if i6 >= i1 goto label5;

        r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixesSortedDescByLength>;

        i2 = lengthof r2;

        i7 = 0;

     label2:
        if i7 >= i2 goto label4;

        r3 = r2[i7];

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i6, r3, 0, $i4);

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        $z1 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: boolean matchesOtherAffix(int,java.lang.String,int)>($i5, r1, i6);

        if $z1 != 0 goto label3;

        return i6;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        $i3 = i0 ^ -1;

        return $i3;
    }

    public java.lang.String[] getAffixes()
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.format.PeriodFormatterBuilder$RegExAffix;

        $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.lang.String[] iSuffixes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1 $r0;

        $r0 = new org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1;

        specialinvoke $r0.<org.joda.time.format.PeriodFormatterBuilder$RegExAffix$1: void <init>()>();

        <org.joda.time.format.PeriodFormatterBuilder$RegExAffix: java.util.Comparator LENGTH_DESC_COMPARATOR> = $r0;

        return;
    }
}
