public class org.apache.flink.api.common.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.Driver r0;

        r0 := @this: org.apache.flink.api.common.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.Driver r0;
        org.apache.flink.api.common.ExecutionConfigTest $r2;
        java.io.IOException $r3;
        java.lang.ClassNotFoundException $r4;
        org.apache.flink.api.common.ExecutionConfigFromConfigurationTest $r7;

        r0 := @this: org.apache.flink.api.common.Driver;

        $r2 = new org.apache.flink.api.common.ExecutionConfigTest;

        specialinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testDoubleTypeRegistration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testConfigurationOfParallelism()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testDisableGenericTypes()>();

     label1:
        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testExecutionConfigSerialization()>();

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void printStackTrace()>();

        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke $r4.<java.lang.ClassNotFoundException: void printStackTrace()>();

     label5:
        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testGlobalParametersNotNull()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testGlobalParametersHashCode()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testReadingDefaultConfig()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testLoadingRegisteredKryoTypesFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testLoadingRegisteredPojoTypesFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testLoadingRestartStrategyFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testLoadingDefaultKryoSerializersFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testNotOverridingRegisteredKryoTypesWithDefaultsFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testNotOverridingRegisteredPojoTypesWithDefaultsFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testNotOverridingRestartStrategiesWithDefaultsFromConfiguration()>();

        virtualinvoke $r2.<org.apache.flink.api.common.ExecutionConfigTest: void testNotOverridingDefaultKryoSerializersFromConfiguration()>();

        $r7 = new org.apache.flink.api.common.ExecutionConfigFromConfigurationTest;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: void testLoadingFromConfiguration()>();

        virtualinvoke $r7.<org.apache.flink.api.common.ExecutionConfigFromConfigurationTest: void testNotOverridingIfNotSet()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }
}
