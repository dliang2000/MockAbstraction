public class org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder extends java.lang.Object
{
    private final java.io.File root;
    private final java.util.Map classes;
    private final java.util.Map resources;

    private void <init>(java.io.File)
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.io.File r1;
        java.util.HashMap $r2, $r3;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.io.File root> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map classes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map resources> = $r3;

        return;
    }

    public org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder addResource(java.lang.String, java.lang.String)
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.lang.String r1, r2, r3, $r8;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.RuntimeException $r6;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map resources>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        r3 = (java.lang.String) $r5;

        if r3 == null goto label1;

        $r6 = new java.lang.RuntimeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r2;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Resource with path %s already registered.", $r7);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        return r0;
    }

    public org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder addClass(java.lang.String, java.lang.String)
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.lang.String r1, r2, r3, $r8;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.RuntimeException $r6;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map classes>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        r3 = (java.lang.String) $r5;

        if r3 == null goto label1;

        $r6 = new java.lang.RuntimeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Class with name %s already registered.", $r7);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label1:
        return r0;
    }

    public java.net.URLClassLoader build() throws java.io.IOException
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.util.Map $r1, $r3;
        java.util.Set $r2, $r4;
        boolean $z0, $z1;
        java.io.File $r5, $r8, $r15;
        java.net.URLClassLoader $r6;
        java.lang.Object $r7, $r9, $r11, $r14, $r16, $r19;
        java.lang.String $r10, $r12, $r17, $r18, $r20;
        java.util.Iterator r21, r23;
        java.util.Map$Entry r22, r24;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        $r1 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map classes>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        r21 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.util.Map$Entry) $r14;

        $r15 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.io.File root>;

        $r16 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.String) $r16;

        $r18 = specialinvoke r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.lang.String createFileName(java.lang.String)>($r17);

        $r19 = interfaceinvoke r22.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.lang.String) $r19;

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: void access$100(java.io.File,java.lang.String,java.lang.String)>($r15, $r18, $r20);

        goto label1;

     label2:
        $r3 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.util.Map resources>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r7 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r7;

        $r8 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.io.File root>;

        $r9 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        $r11 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.lang.String) $r11;

        staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.io.File access$200(java.io.File,java.lang.String,java.lang.String)>($r8, $r10, $r12);

        goto label3;

     label4:
        $r5 = r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.io.File root>;

        $r6 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: java.net.URLClassLoader access$300(java.io.File)>($r5);

        return $r6;
    }

    private java.lang.String createFileName(java.lang.String)
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    void <init>(java.io.File, org.apache.flink.testutils.ClassLoaderUtils$1)
    {
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder r0;
        java.io.File r1;
        org.apache.flink.testutils.ClassLoaderUtils$1 r2;

        r0 := @this: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.flink.testutils.ClassLoaderUtils$1;

        specialinvoke r0.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: void <init>(java.io.File)>(r1);

        return;
    }
}
