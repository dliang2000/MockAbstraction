public class org.apache.flink.api.common.io.InputStreamFSInputWrapper extends org.apache.flink.core.fs.FSDataInputStream
{
    private final java.io.InputStream inStream;
    private long pos;

    public void <init>(java.io.InputStream)
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.flink.core.fs.FSDataInputStream: void <init>()>();

        r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos> = 0L;

        r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: java.io.InputStream inStream> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        $r1 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: java.io.InputStream inStream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public void seek(long) throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        long l0, l1, $l2, $l4, $l6, $l7, $l9, $l10;
        byte $b3, $b5, $b8;
        java.io.InputStream $r1;
        java.io.EOFException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        l0 := @parameter0: long;

        $l2 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrapped InputStream: cannot search backwards.");

        throw $r3;

     label1:
        $l4 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $b5 = $l4 cmp l0;

        if $b5 >= 0 goto label3;

        $r1 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: java.io.InputStream inStream>;

        $l6 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $l7 = l0 - $l6;

        l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l7);

        $b8 = l1 cmp -1L;

        if $b8 != 0 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>(java.lang.String)>("Unexpected EOF during forward seek.");

        throw $r2;

     label2:
        $l9 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $l10 = $l9 + l1;

        r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos> = $l10;

        goto label1;

     label3:
        return;
    }

    public long getPos() throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        $l0 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        return $l0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        int i0;
        java.io.InputStream $r1;
        long $l1, $l2;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        $r1 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: java.io.InputStream inStream>;

        i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if i0 == -1 goto label1;

        $l1 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $l2 = $l1 + 1L;

        r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos> = $l2;

     label1:
        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.InputStream $r2;
        long $l3, $l4, $l5;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: java.io.InputStream inStream>;

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 == -1 goto label1;

        $l4 = r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos>;

        $l3 = (long) i2;

        $l5 = $l4 + $l3;

        r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: long pos> = $l5;

     label1:
        return i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.io.InputStreamFSInputWrapper r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.io.InputStreamFSInputWrapper;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.io.InputStreamFSInputWrapper: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }
}
