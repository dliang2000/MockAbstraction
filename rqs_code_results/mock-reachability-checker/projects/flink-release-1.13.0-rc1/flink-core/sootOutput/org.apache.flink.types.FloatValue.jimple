public class org.apache.flink.types.FloatValue extends java.lang.Object implements java.lang.Comparable, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue, org.apache.flink.types.Key
{
    private static final long serialVersionUID;
    private float value;

    public void <init>()
    {
        org.apache.flink.types.FloatValue r0;

        r0 := @this: org.apache.flink.types.FloatValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.FloatValue: float value> = 0.0F;

        return;
    }

    public void <init>(float)
    {
        org.apache.flink.types.FloatValue r0;
        float f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.FloatValue: float value> = f0;

        return;
    }

    public float getValue()
    {
        org.apache.flink.types.FloatValue r0;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        return $f0;
    }

    public void setValue(float)
    {
        org.apache.flink.types.FloatValue r0;
        float f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        f0 := @parameter0: float;

        r0.<org.apache.flink.types.FloatValue: float value> = f0;

        return;
    }

    public void setValue(org.apache.flink.types.FloatValue)
    {
        org.apache.flink.types.FloatValue r0, r1;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        $f0 = r1.<org.apache.flink.types.FloatValue: float value>;

        r0.<org.apache.flink.types.FloatValue: float value> = $f0;

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.FloatValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $f0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: float readFloat()>();

        r0.<org.apache.flink.types.FloatValue: float value> = $f0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.FloatValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeFloat(float)>($f0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.FloatValue r0;
        float $f0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.FloatValue;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f0);

        return $r1;
    }

    public int compareTo(org.apache.flink.types.FloatValue)
    {
        org.apache.flink.types.FloatValue r0, r1;
        double d0, $d1, $d2;
        float $f0, $f1, $f2;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        $f0 = r1.<org.apache.flink.types.FloatValue: float value>;

        d0 = (double) $f0;

        $f1 = r0.<org.apache.flink.types.FloatValue: float value>;

        $d1 = (double) $f1;

        $b0 = $d1 cmpg d0;

        if $b0 >= 0 goto label1;

        $b2 = -1;

        goto label3;

     label1:
        $f2 = r0.<org.apache.flink.types.FloatValue: float value>;

        $d2 = (double) $f2;

        $b1 = $d2 cmpl d0;

        if $b1 <= 0 goto label2;

        $b2 = 1;

        goto label3;

     label2:
        $b2 = 0;

     label3:
        return $b2;
    }

    public int hashCode()
    {
        org.apache.flink.types.FloatValue r0;
        float $f0;
        int $i0;

        r0 := @this: org.apache.flink.types.FloatValue;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.FloatValue r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.FloatValue;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.types.FloatValue) r1;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $f1 = r2.<org.apache.flink.types.FloatValue: float value>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.FloatValue r0;

        r0 := @this: org.apache.flink.types.FloatValue;

        return 4;
    }

    public void copyTo(org.apache.flink.types.FloatValue)
    {
        org.apache.flink.types.FloatValue r0, r1;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.types.FloatValue;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        r1.<org.apache.flink.types.FloatValue: float value> = $f0;

        return;
    }

    public org.apache.flink.types.FloatValue copy()
    {
        org.apache.flink.types.FloatValue r0, $r1;
        float $f0;

        r0 := @this: org.apache.flink.types.FloatValue;

        $r1 = new org.apache.flink.types.FloatValue;

        $f0 = r0.<org.apache.flink.types.FloatValue: float value>;

        specialinvoke $r1.<org.apache.flink.types.FloatValue: void <init>(float)>($f0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.FloatValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 4);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.FloatValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.FloatValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.FloatValue: int compareTo(org.apache.flink.types.FloatValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.FloatValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.FloatValue) r1;

        virtualinvoke r0.<org.apache.flink.types.FloatValue: void setValue(org.apache.flink.types.FloatValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.FloatValue r0, $r1;

        r0 := @this: org.apache.flink.types.FloatValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.FloatValue: org.apache.flink.types.FloatValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.FloatValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.FloatValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.FloatValue) r1;

        virtualinvoke r0.<org.apache.flink.types.FloatValue: void copyTo(org.apache.flink.types.FloatValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.FloatValue: long serialVersionUID> = 1L;

        return;
    }
}
