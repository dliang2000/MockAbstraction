class javassist.CtClassType extends javassist.CtClass
{
    javassist.ClassPool classPool;
    boolean wasChanged;
    private boolean wasFrozen;
    boolean wasPruned;
    boolean gcConstPool;
    javassist.bytecode.ClassFile classfile;
    byte[] rawClassfile;
    private java.lang.ref.Reference memberCache;
    private javassist.compiler.AccessorMaker accessors;
    private javassist.FieldInitLink fieldInitializers;
    private java.util.Map hiddenMethods;
    private int uniqueNumberSeed;
    private boolean doPruning;
    private int getCount;
    private static final int GET_THRESHOLD;

    void <init>(java.lang.String, javassist.ClassPool)
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.ClassPool r2;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        specialinvoke r0.<javassist.CtClass: void <init>(java.lang.String)>(r1);

        $z0 = <javassist.ClassPool: boolean doPruning>;

        r0.<javassist.CtClassType: boolean doPruning> = $z0;

        r0.<javassist.CtClassType: javassist.ClassPool classPool> = r2;

        r0.<javassist.CtClassType: boolean gcConstPool> = 0;

        r0.<javassist.CtClassType: boolean wasPruned> = 0;

        r0.<javassist.CtClassType: boolean wasFrozen> = 0;

        r0.<javassist.CtClassType: boolean wasChanged> = 0;

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = null;

        r0.<javassist.CtClassType: byte[] rawClassfile> = null;

        r0.<javassist.CtClassType: java.lang.ref.Reference memberCache> = null;

        r0.<javassist.CtClassType: javassist.compiler.AccessorMaker accessors> = null;

        r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers> = null;

        r0.<javassist.CtClassType: java.util.Map hiddenMethods> = null;

        r0.<javassist.CtClassType: int uniqueNumberSeed> = 0;

        r0.<javassist.CtClassType: int getCount> = 0;

        return;
    }

    void <init>(java.io.InputStream, javassist.ClassPool) throws java.io.IOException
    {
        javassist.CtClassType r0;
        java.io.InputStream r1;
        javassist.ClassPool r2;
        java.lang.String $r3, $r7;
        javassist.bytecode.ClassFile $r4, $r6;
        java.io.DataInputStream $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = (java.lang.String) null;

        specialinvoke r0.<javassist.CtClassType: void <init>(java.lang.String,javassist.ClassPool)>($r3, r2);

        $r4 = new javassist.bytecode.ClassFile;

        $r5 = new java.io.DataInputStream;

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

        specialinvoke $r4.<javassist.bytecode.ClassFile: void <init>(java.io.DataInputStream)>($r5);

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = $r4;

        $r6 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        $r7 = virtualinvoke $r6.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        r0.<javassist.CtClassType: java.lang.String qualifiedName> = $r7;

        return;
    }

    void <init>(javassist.bytecode.ClassFile, javassist.ClassPool)
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1, $r4;
        javassist.ClassPool r2;
        java.lang.String $r3, $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = (java.lang.String) null;

        specialinvoke r0.<javassist.CtClassType: void <init>(java.lang.String,javassist.ClassPool)>($r3, r2);

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = r1;

        $r4 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        $r5 = virtualinvoke $r4.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        r0.<javassist.CtClassType: java.lang.String qualifiedName> = $r5;

        return;
    }

    protected void extendToString(java.lang.StringBuffer)
    {
        javassist.CtClassType r0;
        java.lang.StringBuffer r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r5, $r14, $r20, $r22, r32;
        javassist.CtMember $r7, $r8, $r9, $r10, $r11, $r12;
        javassist.CtClass $r13, r31;
        java.lang.StringBuilder $r18, $r19, $r21;
        javassist.NotFoundException $r27, $r29;
        javassist.CtClass[] r34;
        javassist.CtMember$Cache r36;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.StringBuffer;

        $z0 = r0.<javassist.CtClassType: boolean wasChanged>;

        if $z0 == 0 goto label01;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("changed ");

     label01:
        $z1 = r0.<javassist.CtClassType: boolean wasFrozen>;

        if $z1 == 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("frozen ");

     label02:
        $z2 = r0.<javassist.CtClassType: boolean wasPruned>;

        if $z2 == 0 goto label03;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("pruned ");

     label03:
        $i0 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $r2 = staticinvoke <javassist.Modifier: java.lang.String toString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" class ");

        $r5 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

     label04:
        r31 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass getSuperclass()>();

        if r31 == null goto label05;

        r32 = virtualinvoke r31.<javassist.CtClass: java.lang.String getName()>();

        $z3 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.Object");

        if $z3 != 0 goto label05;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");

        $r20 = virtualinvoke r31.<javassist.CtClass: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ??");

     label07:
        r34 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass[] getInterfaces()>();

        $i1 = lengthof r34;

        if $i1 <= 0 goto label08;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" implements ");

     label08:
        i2 = 0;

     label09:
        $i3 = lengthof r34;

        if i2 >= $i3 goto label10;

        $r13 = r34[i2];

        $r14 = virtualinvoke $r13.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        i2 = i2 + 1;

        goto label09;

     label10:
        goto label12;

     label11:
        $r29 := @caughtexception;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" extends ??");

     label12:
        r36 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        $r7 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember fieldHead()>();

        $r8 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember lastField()>();

        specialinvoke r0.<javassist.CtClassType: void exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember)>(r1, " fields=", $r7, $r8);

        $r9 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        $r10 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

        specialinvoke r0.<javassist.CtClassType: void exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember)>(r1, " constructors=", $r9, $r10);

        $r11 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        $r12 = virtualinvoke r36.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

        specialinvoke r0.<javassist.CtClassType: void exToString(java.lang.StringBuffer,java.lang.String,javassist.CtMember,javassist.CtMember)>(r1, " methods=", $r11, $r12);

        return;

        catch javassist.NotFoundException from label04 to label05 with label06;
        catch javassist.NotFoundException from label07 to label10 with label11;
    }

    private void exToString(java.lang.StringBuffer, java.lang.String, javassist.CtMember, javassist.CtMember)
    {
        javassist.CtClassType r0;
        java.lang.StringBuffer r1;
        java.lang.String r2;
        javassist.CtMember r3, r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: javassist.CtMember;

        r3 := @parameter3: javassist.CtMember;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

     label1:
        if r7 == r3 goto label2;

        r7 = virtualinvoke r7.<javassist.CtMember: javassist.CtMember next()>();

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label1;

     label2:
        return;
    }

    public javassist.compiler.AccessorMaker getAccessorMaker()
    {
        javassist.CtClassType r0;
        javassist.compiler.AccessorMaker $r1, $r2, $r3;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: javassist.compiler.AccessorMaker accessors>;

        if $r1 != null goto label1;

        $r3 = new javassist.compiler.AccessorMaker;

        specialinvoke $r3.<javassist.compiler.AccessorMaker: void <init>(javassist.CtClass)>(r0);

        r0.<javassist.CtClassType: javassist.compiler.AccessorMaker accessors> = $r3;

     label1:
        $r2 = r0.<javassist.CtClassType: javassist.compiler.AccessorMaker accessors>;

        return $r2;
    }

    public javassist.bytecode.ClassFile getClassFile2()
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile $r1;

        r0 := @this: javassist.CtClassType;

        $r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile3(boolean)>(1);

        return $r1;
    }

    public javassist.bytecode.ClassFile getClassFile3(boolean)
    {
        javassist.CtClassType r0;
        boolean z0, $z1;
        javassist.bytecode.ClassFile r1, r2, $r10, $r30, $r34;
        byte[] $r6, $r33;
        javassist.ClassPool $r7, $r35;
        java.lang.String $r8, $r12, $r13, $r17, $r20, $r23, $r24, $r27, $r29, $r38, $r44, $r47;
        java.io.BufferedInputStream $r9;
        java.io.DataInputStream $r11, $r31;
        java.lang.RuntimeException $r14, $r37, $r43, $r46;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r21, $r22, $r25, $r26;
        javassist.NotFoundException $r28, $r36;
        java.io.ByteArrayInputStream $r32;
        java.io.IOException $r39, $r41, $r42, $r45;
        java.lang.Throwable $r40;
        java.io.InputStream r50;

        r0 := @this: javassist.CtClassType;

        z0 := @parameter0: boolean;

        r1 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        if r1 == null goto label01;

        return r1;

     label01:
        if z0 == 0 goto label02;

        $r35 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke $r35.<javassist.ClassPool: void compress()>();

     label02:
        $r6 = r0.<javassist.CtClassType: byte[] rawClassfile>;

        if $r6 == null goto label06;

     label03:
        $r30 = new javassist.bytecode.ClassFile;

        $r31 = new java.io.DataInputStream;

        $r32 = new java.io.ByteArrayInputStream;

        $r33 = r0.<javassist.CtClassType: byte[] rawClassfile>;

        specialinvoke $r32.<java.io.ByteArrayInputStream: void <init>(byte[])>($r33);

        specialinvoke $r31.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r32);

        specialinvoke $r30.<javassist.bytecode.ClassFile: void <init>(java.io.DataInputStream)>($r31);

        r0.<javassist.CtClassType: byte[] rawClassfile> = null;

        r0.<javassist.CtClassType: int getCount> = 2;

        $r34 = specialinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile setClassFile(javassist.bytecode.ClassFile)>($r30);

     label04:
        return $r34;

     label05:
        $r45 := @caughtexception;

        $r46 = new java.lang.RuntimeException;

        $r47 = virtualinvoke $r45.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r47, $r45);

        throw $r46;

     label06:
        r50 = null;

     label07:
        $r7 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r8 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        r50 = virtualinvoke $r7.<javassist.ClassPool: java.io.InputStream openClassfile(java.lang.String)>($r8);

        if r50 != null goto label08;

        $r28 = new javassist.NotFoundException;

        $r29 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        specialinvoke $r28.<javassist.NotFoundException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label08:
        $r9 = new java.io.BufferedInputStream;

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r50);

        r50 = $r9;

        $r10 = new javassist.bytecode.ClassFile;

        $r11 = new java.io.DataInputStream;

        specialinvoke $r11.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r9);

        specialinvoke $r10.<javassist.bytecode.ClassFile: void <init>(java.io.DataInputStream)>($r11);

        $r12 = virtualinvoke $r10.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        $r13 = r0.<javassist.CtClassType: java.lang.String qualifiedName>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label09;

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find ");

        $r17 = r0.<javassist.CtClassType: java.lang.String qualifiedName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = virtualinvoke $r10.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found in ");

        $r23 = r0.<javassist.CtClassType: java.lang.String qualifiedName>;

        $r24 = virtualinvoke $r23.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27);

        throw $r14;

     label09:
        r2 = specialinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile setClassFile(javassist.bytecode.ClassFile)>($r10);

     label10:
        if $r9 == null goto label14;

     label11:
        virtualinvoke $r9.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r39 := @caughtexception;

     label14:
        return r2;

     label15:
        $r36 := @caughtexception;

        $r37 = new java.lang.RuntimeException;

        $r38 = virtualinvoke $r36.<javassist.NotFoundException: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r38, $r36);

        throw $r37;

     label16:
        $r42 := @caughtexception;

        $r43 = new java.lang.RuntimeException;

        $r44 = virtualinvoke $r42.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r44, $r42);

        throw $r43;

     label17:
        $r40 := @caughtexception;

     label18:
        if r50 == null goto label22;

     label19:
        virtualinvoke r50.<java.io.InputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r41 := @caughtexception;

     label22:
        throw $r40;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label11 to label12 with label13;
        catch javassist.NotFoundException from label07 to label10 with label15;
        catch java.io.IOException from label07 to label10 with label16;
        catch java.lang.Throwable from label07 to label10 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label15 to label18 with label17;
    }

    final void incGetCounter()
    {
        javassist.CtClassType r0;
        int $i0, $i1;

        r0 := @this: javassist.CtClassType;

        $i0 = r0.<javassist.CtClassType: int getCount>;

        $i1 = $i0 + 1;

        r0.<javassist.CtClassType: int getCount> = $i1;

        return;
    }

    void compress()
    {
        javassist.CtClassType r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: javassist.CtClassType;

        $i0 = r0.<javassist.CtClassType: int getCount>;

        if $i0 >= 2 goto label2;

        $z0 = virtualinvoke r0.<javassist.CtClassType: boolean isModified()>();

        if $z0 != 0 goto label1;

        $z3 = <javassist.ClassPool: boolean releaseUnmodifiedClassFile>;

        if $z3 == 0 goto label1;

        specialinvoke r0.<javassist.CtClassType: void removeClassFile()>();

        goto label2;

     label1:
        $z1 = virtualinvoke r0.<javassist.CtClassType: boolean isFrozen()>();

        if $z1 == 0 goto label2;

        $z2 = r0.<javassist.CtClassType: boolean wasPruned>;

        if $z2 != 0 goto label2;

        specialinvoke r0.<javassist.CtClassType: void saveClassFile()>();

     label2:
        r0.<javassist.CtClassType: int getCount> = 0;

        return;
    }

    private synchronized void saveClassFile()
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile $r4, $r8;
        javassist.CtMember$Cache $r5;
        java.io.ByteArrayOutputStream $r6;
        java.io.DataOutputStream $r7;
        byte[] $r9;
        java.io.IOException $r10;

        r0 := @this: javassist.CtClassType;

        $r4 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache hasMemberCache()>();

        if $r5 == null goto label2;

     label1:
        return;

     label2:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.DataOutputStream;

        specialinvoke $r7.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

     label3:
        $r8 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        virtualinvoke $r8.<javassist.bytecode.ClassFile: void write(java.io.DataOutputStream)>($r7);

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void close()>();

        $r9 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r0.<javassist.CtClassType: byte[] rawClassfile> = $r9;

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = null;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private synchronized void removeClassFile()
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile $r1;
        boolean $z0;
        javassist.CtMember$Cache $r2;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke r0.<javassist.CtClassType: boolean isModified()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache hasMemberCache()>();

        if $r2 != null goto label1;

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = null;

     label1:
        return;
    }

    private synchronized javassist.bytecode.ClassFile setClassFile(javassist.bytecode.ClassFile)
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1, $r2, $r3;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        $r2 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        if $r2 != null goto label1;

        r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile> = r1;

     label1:
        $r3 = r0.<javassist.CtClassType: javassist.bytecode.ClassFile classfile>;

        return $r3;
    }

    public javassist.ClassPool getClassPool()
    {
        javassist.CtClassType r0;
        javassist.ClassPool $r1;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        return $r1;
    }

    void setClassPool(javassist.ClassPool)
    {
        javassist.CtClassType r0;
        javassist.ClassPool r1;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.ClassPool;

        r0.<javassist.CtClassType: javassist.ClassPool classPool> = r1;

        return;
    }

    public java.net.URL getURL() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.net.URL r1;
        javassist.ClassPool $r2;
        java.lang.String $r3, $r5;
        javassist.NotFoundException $r4;

        r0 := @this: javassist.CtClassType;

        $r2 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r3 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        r1 = virtualinvoke $r2.<javassist.ClassPool: java.net.URL find(java.lang.String)>($r3);

        if r1 != null goto label1;

        $r4 = new javassist.NotFoundException;

        $r5 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        specialinvoke $r4.<javassist.NotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        return r1;
    }

    public boolean isModified()
    {
        javassist.CtClassType r0;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        $z0 = r0.<javassist.CtClassType: boolean wasChanged>;

        return $z0;
    }

    public boolean isFrozen()
    {
        javassist.CtClassType r0;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        $z0 = r0.<javassist.CtClassType: boolean wasFrozen>;

        return $z0;
    }

    public void freeze()
    {
        javassist.CtClassType r0;

        r0 := @this: javassist.CtClassType;

        r0.<javassist.CtClassType: boolean wasFrozen> = 1;

        return;
    }

    void checkModify() throws java.lang.RuntimeException
    {
        javassist.CtClassType r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r2, r9;
        java.lang.RuntimeException $r5;

        r0 := @this: javassist.CtClassType;

        $z0 = virtualinvoke r0.<javassist.CtClassType: boolean isFrozen()>();

        if $z0 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" class is frozen");

        r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = r0.<javassist.CtClassType: boolean wasPruned>;

        if $z1 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and pruned");

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>(r9);

        throw $r5;

     label2:
        r0.<javassist.CtClassType: boolean wasChanged> = 1;

        return;
    }

    public void defrost()
    {
        javassist.CtClassType r0;

        r0 := @this: javassist.CtClassType;

        specialinvoke r0.<javassist.CtClassType: void checkPruned(java.lang.String)>("defrost");

        r0.<javassist.CtClassType: boolean wasFrozen> = 0;

        return;
    }

    public boolean subtypeOf(javassist.CtClass) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.CtClass r1, $r9, $r11;
        java.lang.String r2, r4, $r6, $r7, $r12;
        javassist.bytecode.ClassFile r3;
        java.lang.String[] r5;
        int i0, i1, i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        javassist.ClassPool $r8, $r10;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtClass;

        r2 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        if r0 == r1 goto label01;

        $r6 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label02;

     label01:
        return 1;

     label02:
        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r4 = virtualinvoke r3.<javassist.bytecode.ClassFile: java.lang.String getSuperclass()>();

        if r4 == null goto label03;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label03;

        return 1;

     label03:
        r5 = virtualinvoke r3.<javassist.bytecode.ClassFile: java.lang.String[] getInterfaces()>();

        i0 = lengthof r5;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        $r12 = r5[i1];

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label05;

        return 1;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        if r4 == null goto label07;

        $r10 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r11 = virtualinvoke $r10.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r4);

        $z2 = virtualinvoke $r11.<javassist.CtClass: boolean subtypeOf(javassist.CtClass)>(r1);

        if $z2 == 0 goto label07;

        return 1;

     label07:
        i2 = 0;

     label08:
        if i2 >= i0 goto label10;

        $r8 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r7 = r5[i2];

        $r9 = virtualinvoke $r8.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r7);

        $z1 = virtualinvoke $r9.<javassist.CtClass: boolean subtypeOf(javassist.CtClass)>(r1);

        if $z1 == 0 goto label09;

        return 1;

     label09:
        i2 = i2 + 1;

        goto label08;

     label10:
        return 0;
    }

    public void setName(java.lang.String) throws java.lang.RuntimeException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2;
        javassist.bytecode.ClassFile r3;
        boolean $z0;
        javassist.ClassPool $r4, $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke $r4.<javassist.ClassPool: void checkNotFrozen(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        specialinvoke r0.<javassist.CtClass: void setName(java.lang.String)>(r1);

        virtualinvoke r3.<javassist.bytecode.ClassFile: void setName(java.lang.String)>(r1);

        specialinvoke r0.<javassist.CtClassType: void nameReplaced()>();

        $r5 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke $r5.<javassist.ClassPool: void classNameChanged(java.lang.String,javassist.CtClass)>(r2, r0);

        return;
    }

    public java.lang.String getGenericSignature()
    {
        javassist.CtClassType r0;
        javassist.bytecode.SignatureAttribute r1;
        javassist.bytecode.ClassFile $r2;
        javassist.bytecode.AttributeInfo $r3;
        java.lang.String $r4;

        r0 := @this: javassist.CtClassType;

        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r3 = virtualinvoke $r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("Signature");

        r1 = (javassist.bytecode.SignatureAttribute) $r3;

        if r1 != null goto label1;

        $r4 = null;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<javassist.bytecode.SignatureAttribute: java.lang.String getSignature()>();

     label2:
        return $r4;
    }

    public void setGenericSignature(java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.SignatureAttribute $r4;
        javassist.bytecode.ConstPool $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile()>();

        $r4 = new javassist.bytecode.SignatureAttribute;

        $r5 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r4.<javassist.bytecode.SignatureAttribute: void <init>(javassist.bytecode.ConstPool,java.lang.String)>($r5, r1);

        virtualinvoke r2.<javassist.bytecode.ClassFile: void addAttribute(javassist.bytecode.AttributeInfo)>($r4);

        return;
    }

    public void replaceClassName(javassist.ClassMap) throws java.lang.RuntimeException
    {
        javassist.CtClassType r0;
        javassist.ClassMap r1;
        java.lang.String r2, $r4, r7;
        javassist.bytecode.ClassFile r3;
        javassist.ClassPool $r5, $r6;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.ClassMap;

        r2 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r4 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(java.lang.String)>(r2);

        r7 = virtualinvoke r1.<javassist.ClassMap: java.lang.String get(java.lang.Object)>($r4);

        if r7 == null goto label1;

        r7 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJavaName(java.lang.String)>(r7);

        $r6 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke $r6.<javassist.ClassPool: void checkNotFrozen(java.lang.String)>(r7);

     label1:
        specialinvoke r0.<javassist.CtClass: void replaceClassName(javassist.ClassMap)>(r1);

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke r3.<javassist.bytecode.ClassFile: void renameClass(java.util.Map)>(r1);

        specialinvoke r0.<javassist.CtClassType: void nameReplaced()>();

        if r7 == null goto label2;

        specialinvoke r0.<javassist.CtClass: void setName(java.lang.String)>(r7);

        $r5 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke $r5.<javassist.ClassPool: void classNameChanged(java.lang.String,javassist.CtClass)>(r2, r0);

     label2:
        return;
    }

    public void replaceClassName(java.lang.String, java.lang.String) throws java.lang.RuntimeException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2, r3;
        boolean $z0;
        javassist.bytecode.ClassFile $r4;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<javassist.CtClassType: void setName(java.lang.String)>(r2);

        goto label2;

     label1:
        specialinvoke r0.<javassist.CtClass: void replaceClassName(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r4.<javassist.bytecode.ClassFile: void renameClass(java.lang.String,java.lang.String)>(r1, r2);

        specialinvoke r0.<javassist.CtClassType: void nameReplaced()>();

     label2:
        return;
    }

    public boolean isInterface()
    {
        javassist.CtClassType r0;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        $i0 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isInterface(int)>($i0);

        return $z0;
    }

    public boolean isAnnotation()
    {
        javassist.CtClassType r0;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        $i0 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isAnnotation(int)>($i0);

        return $z0;
    }

    public boolean isEnum()
    {
        javassist.CtClassType r0;
        int $i0;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        $i0 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isEnum(int)>($i0);

        return $z0;
    }

    public int getModifiers()
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6, $i7;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        i5 = virtualinvoke r1.<javassist.bytecode.ClassFile: int getAccessFlags()>();

        i6 = staticinvoke <javassist.bytecode.AccessFlag: int clear(int,int)>(i5, 32);

        i0 = virtualinvoke r1.<javassist.bytecode.ClassFile: int getInnerAccessFlags()>();

        if i0 == -1 goto label4;

        $i1 = i0 & 8;

        if $i1 == 0 goto label1;

        i6 = i6 | 8;

     label1:
        $i2 = i0 & 1;

        if $i2 == 0 goto label2;

        i6 = i6 | 1;

        goto label4;

     label2:
        i6 = i6 & -2;

        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        i6 = i6 | 4;

        goto label4;

     label3:
        $i4 = i0 & 2;

        if $i4 == 0 goto label4;

        i6 = i6 | 2;

     label4:
        $i7 = staticinvoke <javassist.bytecode.AccessFlag: int toModifier(int)>(i6);

        return $i7;
    }

    public javassist.CtClass[] getNestedClasses() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.InnerClassesAttribute r2;
        java.lang.String r3, r5, $r8;
        int i0, $i1, $i2, $i3, i4;
        javassist.bytecode.AttributeInfo $r6;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.util.ArrayList $r11;
        javassist.CtClass[] $r12, $r14, $r17;
        java.lang.Object[] $r13;
        boolean $z0;
        javassist.ClassPool $r15;
        javassist.CtClass $r16;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r6 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("InnerClasses");

        r2 = (javassist.bytecode.InnerClassesAttribute) $r6;

        if r2 != null goto label1;

        $r17 = newarray (javassist.CtClass)[0];

        return $r17;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r1.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = virtualinvoke r2.<javassist.bytecode.InnerClassesAttribute: int tableLength()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(i0);

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        r5 = virtualinvoke r2.<javassist.bytecode.InnerClassesAttribute: java.lang.String innerClass(int)>(i4);

        if r5 == null goto label3;

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z0 == 0 goto label3;

        $i2 = virtualinvoke r5.<java.lang.String: int lastIndexOf(int)>(36);

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label3;

        $r15 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r16 = virtualinvoke $r15.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r5);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r16);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r12 = newarray (javassist.CtClass)[$i1];

        $r13 = interfaceinvoke $r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (javassist.CtClass[]) $r13;

        return $r14;
    }

    public void setModifiers(int)
    {
        javassist.CtClassType r0;
        int i0, $i1, $i2;
        javassist.bytecode.ClassFile r1;
        java.lang.String $r2;

        r0 := @this: javassist.CtClassType;

        i0 := @parameter0: int;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $r2 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        staticinvoke <javassist.CtClassType: void updateInnerEntry(int,java.lang.String,javassist.CtClass,boolean)>(i0, $r2, r0, 1);

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $i1 = i0 & -9;

        $i2 = staticinvoke <javassist.bytecode.AccessFlag: int of(int)>($i1);

        virtualinvoke r1.<javassist.bytecode.ClassFile: void setAccessFlags(int)>($i2);

        return;
    }

    private static void updateInnerEntry(int, java.lang.String, javassist.CtClass, boolean)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.String r0, r4, $r9, $r12, $r19;
        javassist.CtClass r1, r20;
        boolean z0, $z1, $z2;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.InnerClassesAttribute r3;
        javassist.bytecode.AttributeInfo $r5;
        java.lang.RuntimeException $r6, $r15;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r16, $r17, $r18;
        javassist.ClassPool $r13;
        javassist.NotFoundException $r14;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: javassist.CtClass;

        z0 := @parameter3: boolean;

        r2 = virtualinvoke r1.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("InnerClasses");

        r3 = (javassist.bytecode.InnerClassesAttribute) $r5;

        if r3 == null goto label6;

        i1 = i0 & -9;

        i2 = virtualinvoke r3.<javassist.bytecode.InnerClassesAttribute: int find(java.lang.String)>(r0);

        if i2 < 0 goto label6;

        $i4 = virtualinvoke r3.<javassist.bytecode.InnerClassesAttribute: int accessFlags(int)>(i2);

        i3 = $i4 & 8;

        if i3 != 0 goto label1;

        $z1 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i0);

        if $z1 != 0 goto label6;

     label1:
        virtualinvoke r1.<javassist.CtClass: void checkModify()>();

        $i5 = staticinvoke <javassist.bytecode.AccessFlag: int of(int)>(i1);

        $i6 = $i5 | i3;

        virtualinvoke r3.<javassist.bytecode.InnerClassesAttribute: void setAccessFlags(int,int)>(i2, $i6);

        r4 = virtualinvoke r3.<javassist.bytecode.InnerClassesAttribute: java.lang.String outerClass(int)>(i2);

        if r4 == null goto label5;

        if z0 == 0 goto label5;

     label2:
        $r13 = virtualinvoke r1.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        r20 = virtualinvoke $r13.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r4);

        staticinvoke <javassist.CtClassType: void updateInnerEntry(int,java.lang.String,javassist.CtClass,boolean)>(i1, r0, r20, 0);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find the declaring class: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label5:
        return;

     label6:
        $z2 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i0);

        if $z2 == 0 goto label7;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot change ");

        $r9 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJavaName(java.lang.String)>(r0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" into a static class");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label7:
        return;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }

    public boolean hasAnnotation(java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.AnnotationsAttribute r3, r4;
        javassist.bytecode.AttributeInfo $r5, $r6;
        javassist.ClassPool $r7;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r4 = (javassist.bytecode.AnnotationsAttribute) $r6;

        $r7 = virtualinvoke r0.<javassist.CtClassType: javassist.ClassPool getClassPool()>();

        $z0 = staticinvoke <javassist.CtClassType: boolean hasAnnotationType(java.lang.String,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(r1, $r7, r3, r4);

        return $z0;
    }

    static boolean hasAnnotationType(java.lang.Class, javassist.ClassPool, javassist.bytecode.AnnotationsAttribute, javassist.bytecode.AnnotationsAttribute)
    {
        java.lang.Class r0;
        javassist.ClassPool r1;
        javassist.bytecode.AnnotationsAttribute r2, r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: javassist.ClassPool;

        r2 := @parameter2: javassist.bytecode.AnnotationsAttribute;

        r3 := @parameter3: javassist.bytecode.AnnotationsAttribute;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = staticinvoke <javassist.CtClassType: boolean hasAnnotationType(java.lang.String,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>($r4, r1, r2, r3);

        return $z0;
    }

    static boolean hasAnnotationType(java.lang.String, javassist.ClassPool, javassist.bytecode.AnnotationsAttribute, javassist.bytecode.AnnotationsAttribute)
    {
        java.lang.String r0, $r5, $r7;
        javassist.ClassPool r1;
        javassist.bytecode.AnnotationsAttribute r2, r3;
        int $i0, $i1, i2, i3;
        javassist.bytecode.'annotation'.Annotation $r4, $r6;
        boolean $z0, $z1;
        javassist.bytecode.'annotation'.Annotation[] r8, r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: javassist.ClassPool;

        r2 := @parameter2: javassist.bytecode.AnnotationsAttribute;

        r3 := @parameter3: javassist.bytecode.AnnotationsAttribute;

        if r2 != null goto label01;

        r8 = null;

        goto label02;

     label01:
        r8 = virtualinvoke r2.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

     label02:
        if r3 != null goto label03;

        r9 = null;

        goto label04;

     label03:
        r9 = virtualinvoke r3.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

     label04:
        if r8 == null goto label07;

        i2 = 0;

     label05:
        $i1 = lengthof r8;

        if i2 >= $i1 goto label07;

        $r6 = r8[i2];

        $r7 = virtualinvoke $r6.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label06;

        return 1;

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        if r9 == null goto label10;

        i3 = 0;

     label08:
        $i0 = lengthof r9;

        if i3 >= $i0 goto label10;

        $r4 = r9[i3];

        $r5 = virtualinvoke $r4.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label09;

        return 1;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        return 0;
    }

    public java.lang.Object getAnnotation(java.lang.Class) throws java.lang.ClassNotFoundException
    {
        javassist.CtClassType r0;
        java.lang.Class r1;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.AnnotationsAttribute r3, r4;
        javassist.bytecode.AttributeInfo $r5, $r6;
        javassist.ClassPool $r7;
        java.lang.Object $r8;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r4 = (javassist.bytecode.AnnotationsAttribute) $r6;

        $r7 = virtualinvoke r0.<javassist.CtClassType: javassist.ClassPool getClassPool()>();

        $r8 = staticinvoke <javassist.CtClassType: java.lang.Object getAnnotationType(java.lang.Class,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(r1, $r7, r3, r4);

        return $r8;
    }

    static java.lang.Object getAnnotationType(java.lang.Class, javassist.ClassPool, javassist.bytecode.AnnotationsAttribute, javassist.bytecode.AnnotationsAttribute) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0;
        javassist.ClassPool r1;
        javassist.bytecode.AnnotationsAttribute r2, r3;
        java.lang.String r4, $r6, $r10;
        int $i0, $i1, i2, i3;
        javassist.bytecode.'annotation'.Annotation $r5, $r7, $r9, $r11;
        boolean $z0, $z1;
        java.lang.Object $r8, $r12;
        javassist.bytecode.'annotation'.Annotation[] r13, r14;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: javassist.ClassPool;

        r2 := @parameter2: javassist.bytecode.AnnotationsAttribute;

        r3 := @parameter3: javassist.bytecode.AnnotationsAttribute;

        if r2 != null goto label01;

        r13 = null;

        goto label02;

     label01:
        r13 = virtualinvoke r2.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

     label02:
        if r3 != null goto label03;

        r14 = null;

        goto label04;

     label03:
        r14 = virtualinvoke r3.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

     label04:
        r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        if r13 == null goto label07;

        i2 = 0;

     label05:
        $i1 = lengthof r13;

        if i2 >= $i1 goto label07;

        $r9 = r13[i2];

        $r10 = virtualinvoke $r9.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label06;

        $r11 = r13[i2];

        $r12 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r11, r1);

        return $r12;

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        if r14 == null goto label10;

        i3 = 0;

     label08:
        $i0 = lengthof r14;

        if i3 >= $i0 goto label10;

        $r5 = r14[i3];

        $r6 = virtualinvoke $r5.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label09;

        $r7 = r14[i3];

        $r8 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r7, r1);

        return $r8;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        return null;
    }

    public java.lang.Object[] getAnnotations() throws java.lang.ClassNotFoundException
    {
        javassist.CtClassType r0;
        java.lang.Object[] $r1;

        r0 := @this: javassist.CtClassType;

        $r1 = specialinvoke r0.<javassist.CtClassType: java.lang.Object[] getAnnotations(boolean)>(0);

        return $r1;
    }

    public java.lang.Object[] getAvailableAnnotations()
    {
        javassist.CtClassType r0;
        java.lang.Object[] $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: javassist.CtClassType;

     label1:
        $r2 = specialinvoke r0.<javassist.CtClassType: java.lang.Object[] getAnnotations(boolean)>(1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception ", $r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private java.lang.Object[] getAnnotations(boolean) throws java.lang.ClassNotFoundException
    {
        javassist.CtClassType r0;
        boolean z0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.AnnotationsAttribute r2, r3;
        javassist.bytecode.AttributeInfo $r4, $r5;
        javassist.ClassPool $r6;
        java.lang.Object[] $r7;

        r0 := @this: javassist.CtClassType;

        z0 := @parameter0: boolean;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        r2 = (javassist.bytecode.AnnotationsAttribute) $r4;

        $r5 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        r3 = (javassist.bytecode.AnnotationsAttribute) $r5;

        $r6 = virtualinvoke r0.<javassist.CtClassType: javassist.ClassPool getClassPool()>();

        $r7 = staticinvoke <javassist.CtClassType: java.lang.Object[] toAnnotationType(boolean,javassist.ClassPool,javassist.bytecode.AnnotationsAttribute,javassist.bytecode.AnnotationsAttribute)>(z0, $r6, r2, r3);

        return $r7;
    }

    static java.lang.Object[] toAnnotationType(boolean, javassist.ClassPool, javassist.bytecode.AnnotationsAttribute, javassist.bytecode.AnnotationsAttribute) throws java.lang.ClassNotFoundException
    {
        boolean z0;
        javassist.ClassPool r0;
        javassist.bytecode.AnnotationsAttribute r1, r2;
        java.util.ArrayList $r3;
        java.lang.Object[] $r4, r17;
        javassist.bytecode.'annotation'.Annotation $r5, $r7, $r9, $r11;
        java.lang.Object $r6, $r8, $r10, $r12;
        int $i0, $i1, i2, i3, i4, i5, i6, i7;
        java.lang.ClassNotFoundException $r13, $r14;
        javassist.bytecode.'annotation'.Annotation[] r15, r16;

        z0 := @parameter0: boolean;

        r0 := @parameter1: javassist.ClassPool;

        r1 := @parameter2: javassist.bytecode.AnnotationsAttribute;

        r2 := @parameter3: javassist.bytecode.AnnotationsAttribute;

        if r1 != null goto label01;

        r15 = null;

        i2 = 0;

        goto label02;

     label01:
        r15 = virtualinvoke r1.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

        i2 = lengthof r15;

     label02:
        if r2 != null goto label03;

        r16 = null;

        i3 = 0;

        goto label04;

     label03:
        r16 = virtualinvoke r2.<javassist.bytecode.AnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[] getAnnotations()>();

        i3 = lengthof r16;

     label04:
        if z0 != 0 goto label09;

        $i0 = i2 + i3;

        r17 = newarray (java.lang.Object)[$i0];

        i4 = 0;

     label05:
        if i4 >= i2 goto label06;

        $r11 = r15[i4];

        $r12 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r11, r0);

        r17[i4] = $r12;

        i4 = i4 + 1;

        goto label05;

     label06:
        i5 = 0;

     label07:
        if i5 >= i3 goto label08;

        $i1 = i5 + i2;

        $r9 = r16[i5];

        $r10 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r9, r0);

        r17[$i1] = $r10;

        i5 = i5 + 1;

        goto label07;

     label08:
        return r17;

     label09:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i6 = 0;

     label10:
        if i6 >= i2 goto label15;

     label11:
        $r7 = r15[i6];

        $r8 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r7, r0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label12:
        goto label14;

     label13:
        $r14 := @caughtexception;

     label14:
        i6 = i6 + 1;

        goto label10;

     label15:
        i7 = 0;

     label16:
        if i7 >= i3 goto label21;

     label17:
        $r5 = r16[i7];

        $r6 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r5, r0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

     label18:
        goto label20;

     label19:
        $r13 := @caughtexception;

     label20:
        i7 = i7 + 1;

        goto label16;

     label21:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray()>();

        return $r4;

        catch java.lang.ClassNotFoundException from label11 to label12 with label13;
        catch java.lang.ClassNotFoundException from label17 to label18 with label19;
    }

    static java.lang.Object[][] toAnnotationType(boolean, javassist.ClassPool, javassist.bytecode.ParameterAnnotationsAttribute, javassist.bytecode.ParameterAnnotationsAttribute, javassist.bytecode.MethodInfo) throws java.lang.ClassNotFoundException
    {
        boolean z0;
        javassist.ClassPool r0;
        javassist.bytecode.ParameterAnnotationsAttribute r1, r2;
        javassist.bytecode.MethodInfo r3;
        java.lang.Object[][] r4;
        java.lang.String $r5;
        javassist.bytecode.'annotation'.Annotation[][] $r6, $r7;
        java.util.ArrayList $r8;
        java.lang.Object[] $r9, $r14, $r16, $r19;
        javassist.bytecode.'annotation'.Annotation $r10, $r12, $r15, $r18;
        java.lang.Object $r11, $r13, $r17, $r20;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9;
        java.lang.ClassNotFoundException $r21, $r22;
        javassist.bytecode.'annotation'.Annotation[] r23, r24;

        z0 := @parameter0: boolean;

        r0 := @parameter1: javassist.ClassPool;

        r1 := @parameter2: javassist.bytecode.ParameterAnnotationsAttribute;

        r2 := @parameter3: javassist.bytecode.ParameterAnnotationsAttribute;

        r3 := @parameter4: javassist.bytecode.MethodInfo;

        if r1 == null goto label01;

        i2 = virtualinvoke r1.<javassist.bytecode.ParameterAnnotationsAttribute: int numParameters()>();

        goto label03;

     label01:
        if r2 == null goto label02;

        i2 = virtualinvoke r2.<javassist.bytecode.ParameterAnnotationsAttribute: int numParameters()>();

        goto label03;

     label02:
        $r5 = virtualinvoke r3.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        i2 = staticinvoke <javassist.bytecode.Descriptor: int numOfParameters(java.lang.String)>($r5);

     label03:
        r4 = newarray (java.lang.Object[])[i2];

        i3 = 0;

     label04:
        if i3 >= i2 goto label27;

        if r1 != null goto label05;

        r23 = null;

        i4 = 0;

        goto label06;

     label05:
        $r6 = virtualinvoke r1.<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[][] getAnnotations()>();

        r23 = $r6[i3];

        i4 = lengthof r23;

     label06:
        if r2 != null goto label07;

        r24 = null;

        i5 = 0;

        goto label08;

     label07:
        $r7 = virtualinvoke r2.<javassist.bytecode.ParameterAnnotationsAttribute: javassist.bytecode.'annotation'.Annotation[][] getAnnotations()>();

        r24 = $r7[i3];

        i5 = lengthof r24;

     label08:
        if z0 != 0 goto label13;

        $i0 = i4 + i5;

        $r14 = newarray (java.lang.Object)[$i0];

        r4[i3] = $r14;

        i6 = 0;

     label09:
        if i6 >= i4 goto label10;

        $r19 = r4[i3];

        $r18 = r23[i6];

        $r20 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r18, r0);

        $r19[i6] = $r20;

        i6 = i6 + 1;

        goto label09;

     label10:
        i7 = 0;

     label11:
        if i7 >= i5 goto label12;

        $r16 = r4[i3];

        $i1 = i7 + i4;

        $r15 = r24[i7];

        $r17 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r15, r0);

        $r16[$i1] = $r17;

        i7 = i7 + 1;

        goto label11;

     label12:
        goto label26;

     label13:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i8 = 0;

     label14:
        if i8 >= i4 goto label19;

     label15:
        $r12 = r23[i8];

        $r13 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r12, r0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r13);

     label16:
        goto label18;

     label17:
        $r22 := @caughtexception;

     label18:
        i8 = i8 + 1;

        goto label14;

     label19:
        i9 = 0;

     label20:
        if i9 >= i5 goto label25;

     label21:
        $r10 = r24[i9];

        $r11 = staticinvoke <javassist.CtClassType: java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation,javassist.ClassPool)>($r10, r0);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

     label22:
        goto label24;

     label23:
        $r21 := @caughtexception;

     label24:
        i9 = i9 + 1;

        goto label20;

     label25:
        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray()>();

        r4[i3] = $r9;

     label26:
        i3 = i3 + 1;

        goto label04;

     label27:
        return r4;

        catch java.lang.ClassNotFoundException from label15 to label16 with label17;
        catch java.lang.ClassNotFoundException from label21 to label22 with label23;
    }

    private static java.lang.Object toAnnoType(javassist.bytecode.'annotation'.Annotation, javassist.ClassPool) throws java.lang.ClassNotFoundException
    {
        javassist.bytecode.'annotation'.Annotation r0;
        javassist.ClassPool r1;
        java.lang.ClassLoader r2, $r11, r16;
        java.lang.Object $r4, $r12, $r15;
        java.lang.Throwable $r5;
        java.lang.ClassNotFoundException $r6, $r8, $r13;
        java.lang.String $r7, $r9;
        javassist.CtClass $r10;
        java.lang.Class $r14, r18;

        r0 := @parameter0: javassist.bytecode.'annotation'.Annotation;

        r1 := @parameter1: javassist.ClassPool;

     label1:
        r16 = virtualinvoke r1.<javassist.ClassPool: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke r0.<javassist.bytecode.'annotation'.Annotation: java.lang.Object toAnnotationType(java.lang.ClassLoader,javassist.ClassPool)>(r16, r1);

     label2:
        return $r4;

     label3:
        $r13 := @caughtexception;

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r14.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label4:
        $r15 = virtualinvoke r0.<javassist.bytecode.'annotation'.Annotation: java.lang.Object toAnnotationType(java.lang.ClassLoader,javassist.ClassPool)>(r2, r1);

     label5:
        return $r15;

     label6:
        $r8 := @caughtexception;

     label7:
        $r9 = virtualinvoke r0.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        $r10 = virtualinvoke r1.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r9);

        r18 = virtualinvoke $r10.<javassist.CtClass: java.lang.Class toClass()>();

        $r11 = virtualinvoke r18.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r12 = staticinvoke <javassist.bytecode.'annotation'.AnnotationImpl: java.lang.Object make(java.lang.ClassLoader,java.lang.Class,javassist.ClassPool,javassist.bytecode.'annotation'.Annotation)>($r11, r18, r1, r0);

     label8:
        return $r12;

     label9:
        $r5 := @caughtexception;

        $r6 = new java.lang.ClassNotFoundException;

        $r7 = virtualinvoke r0.<javassist.bytecode.'annotation'.Annotation: java.lang.String getTypeName()>();

        specialinvoke $r6.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public boolean subclassOf(javassist.CtClass)
    {
        javassist.CtClassType r0;
        javassist.CtClass r1, r6;
        java.lang.String r2, $r4;
        boolean $z0;
        java.lang.Exception $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtClass;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        r6 = r0;

     label2:
        if r6 == null goto label5;

        $r4 = virtualinvoke r6.<javassist.CtClass: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        r6 = virtualinvoke r6.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        goto label2;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return 0;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public javassist.CtClass getSuperclass() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.bytecode.ClassFile $r2;
        javassist.ClassPool $r3;
        javassist.CtClass $r4;

        r0 := @this: javassist.CtClassType;

        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r1 = virtualinvoke $r2.<javassist.bytecode.ClassFile: java.lang.String getSuperclass()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r4 = virtualinvoke $r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r1);

        return $r4;
    }

    public void setSuperclass(javassist.CtClass) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtClass r1;
        boolean $z0;
        javassist.bytecode.ClassFile $r2;
        java.lang.String $r3;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtClass;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $z0 = virtualinvoke r0.<javassist.CtClassType: boolean isInterface()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<javassist.CtClassType: void addInterface(javassist.CtClass)>(r1);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r3 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke $r2.<javassist.bytecode.ClassFile: void setSuperclass(java.lang.String)>($r3);

     label2:
        return;
    }

    public javassist.CtClass[] getInterfaces() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String[] r1;
        int i0, i1;
        javassist.CtClass[] r2;
        javassist.bytecode.ClassFile $r3;
        java.lang.String $r4;
        javassist.ClassPool $r5;
        javassist.CtClass $r6;

        r0 := @this: javassist.CtClassType;

        $r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r1 = virtualinvoke $r3.<javassist.bytecode.ClassFile: java.lang.String[] getInterfaces()>();

        i0 = lengthof r1;

        r2 = newarray (javassist.CtClass)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r4 = r1[i1];

        $r6 = virtualinvoke $r5.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r4);

        r2[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public void setInterfaces(javassist.CtClass[])
    {
        javassist.CtClassType r0;
        javassist.CtClass[] r1;
        int i0, i1;
        javassist.bytecode.ClassFile $r2;
        javassist.CtClass $r3;
        java.lang.String $r4;
        java.lang.String[] r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtClass[];

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        if r1 != null goto label1;

        r5 = newarray (java.lang.String)[0];

        goto label3;

     label1:
        i0 = lengthof r1;

        r5 = newarray (java.lang.String)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r3 = r1[i1];

        $r4 = virtualinvoke $r3.<javassist.CtClass: java.lang.String getName()>();

        r5[i1] = $r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r2.<javassist.bytecode.ClassFile: void setInterfaces(java.lang.String[])>(r5);

        return;
    }

    public void addInterface(javassist.CtClass)
    {
        javassist.CtClassType r0;
        javassist.CtClass r1;
        javassist.bytecode.ClassFile $r2;
        java.lang.String $r3;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtClass;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r3 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke $r2.<javassist.bytecode.ClassFile: void addInterface(java.lang.String)>($r3);

     label1:
        return;
    }

    public javassist.CtClass getDeclaringClass() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.InnerClassesAttribute r2;
        java.lang.String r3, r4, $r7, $r10;
        int i0, i1;
        javassist.bytecode.EnclosingMethodAttribute r5;
        javassist.bytecode.AttributeInfo $r6, $r8;
        boolean $z0;
        javassist.ClassPool $r9, $r12;
        javassist.CtClass $r11, $r13;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r6 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("InnerClasses");

        r2 = (javassist.bytecode.InnerClassesAttribute) $r6;

        if r2 != null goto label1;

        return null;

     label1:
        r3 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        i0 = virtualinvoke r2.<javassist.bytecode.InnerClassesAttribute: int tableLength()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r7 = virtualinvoke r2.<javassist.bytecode.InnerClassesAttribute: java.lang.String innerClass(int)>(i1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label4;

        r4 = virtualinvoke r2.<javassist.bytecode.InnerClassesAttribute: java.lang.String outerClass(int)>(i1);

        if r4 == null goto label3;

        $r12 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r13 = virtualinvoke $r12.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r4);

        return $r13;

     label3:
        $r8 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("EnclosingMethod");

        r5 = (javassist.bytecode.EnclosingMethodAttribute) $r8;

        if r5 == null goto label4;

        $r9 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r10 = virtualinvoke r5.<javassist.bytecode.EnclosingMethodAttribute: java.lang.String className()>();

        $r11 = virtualinvoke $r9.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r10);

        return $r11;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return null;
    }

    public javassist.CtBehavior getEnclosingBehavior() throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.EnclosingMethodAttribute r2;
        javassist.CtClass r3;
        java.lang.String r4, $r7, $r8, $r9, $r10, $r13;
        javassist.bytecode.AttributeInfo $r5;
        javassist.ClassPool $r6;
        boolean $z0, $z1;
        javassist.CtMethod $r11;
        javassist.CtConstructor $r12, $r14;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("EnclosingMethod");

        r2 = (javassist.bytecode.EnclosingMethodAttribute) $r5;

        if r2 != null goto label1;

        return null;

     label1:
        $r6 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r7 = virtualinvoke r2.<javassist.bytecode.EnclosingMethodAttribute: java.lang.String className()>();

        r3 = virtualinvoke $r6.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>($r7);

        r4 = virtualinvoke r2.<javassist.bytecode.EnclosingMethodAttribute: java.lang.String methodName()>();

        $r8 = "<init>";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $r13 = virtualinvoke r2.<javassist.bytecode.EnclosingMethodAttribute: java.lang.String methodDescriptor()>();

        $r14 = virtualinvoke r3.<javassist.CtClass: javassist.CtConstructor getConstructor(java.lang.String)>($r13);

        return $r14;

     label2:
        $r9 = "<clinit>";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

        $r12 = virtualinvoke r3.<javassist.CtClass: javassist.CtConstructor getClassInitializer()>();

        return $r12;

     label3:
        $r10 = virtualinvoke r2.<javassist.bytecode.EnclosingMethodAttribute: java.lang.String methodDescriptor()>();

        $r11 = virtualinvoke r3.<javassist.CtClass: javassist.CtMethod getMethod(java.lang.String,java.lang.String)>(r4, $r10);

        return $r11;
    }

    public javassist.CtClass makeNestedClass(java.lang.String, boolean)
    {
        javassist.CtClassType r0;
        java.lang.String r1, $r7, $r11, $r13, $r14;
        boolean z0;
        javassist.CtClass r2;
        javassist.bytecode.ClassFile r3, r4;
        java.lang.StringBuilder $r5, $r8, $r9, $r10;
        javassist.ClassPool $r6;
        javassist.bytecode.AttributeInfo $r12, $r16;
        int $i0, $i1, $i2;
        javassist.bytecode.ConstPool $r15, $r18;
        javassist.bytecode.InnerClassesAttribute $r17, r20;
        java.lang.RuntimeException $r19;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>("sorry, only nested static class is supported");

        throw $r19;

     label1:
        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $r6 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r6.<javassist.ClassPool: javassist.CtClass makeNestedClass(java.lang.String)>($r11);

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r4 = virtualinvoke r2.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile2()>();

        $r12 = virtualinvoke r3.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("InnerClasses");

        r20 = (javassist.bytecode.InnerClassesAttribute) $r12;

        if r20 != null goto label2;

        $r17 = new javassist.bytecode.InnerClassesAttribute;

        $r18 = virtualinvoke r3.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r17.<javassist.bytecode.InnerClassesAttribute: void <init>(javassist.bytecode.ConstPool)>($r18);

        r20 = $r17;

        virtualinvoke r3.<javassist.bytecode.ClassFile: void addAttribute(javassist.bytecode.AttributeInfo)>($r17);

     label2:
        $r13 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        $r14 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $i0 = virtualinvoke r4.<javassist.bytecode.ClassFile: int getAccessFlags()>();

        $i1 = $i0 & -33;

        $i2 = $i1 | 8;

        virtualinvoke r20.<javassist.bytecode.InnerClassesAttribute: void append(java.lang.String,java.lang.String,java.lang.String,int)>($r13, $r14, r1, $i2);

        $r15 = virtualinvoke r4.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r16 = virtualinvoke r20.<javassist.bytecode.InnerClassesAttribute: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>($r15, null);

        virtualinvoke r4.<javassist.bytecode.ClassFile: void addAttribute(javassist.bytecode.AttributeInfo)>($r16);

        return r2;
    }

    private void nameReplaced()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r3;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache hasMemberCache()>();

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

     label1:
        if r3 == r2 goto label2;

        r3 = virtualinvoke r3.<javassist.CtMember: javassist.CtMember next()>();

        virtualinvoke r3.<javassist.CtMember: void nameReplaced()>();

        goto label1;

     label2:
        return;
    }

    protected javassist.CtMember$Cache hasMemberCache()
    {
        javassist.CtClassType r0;
        java.lang.ref.Reference $r1, $r2;
        java.lang.Object $r3;
        javassist.CtMember$Cache $r4;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: java.lang.ref.Reference memberCache>;

        if $r1 == null goto label1;

        $r2 = r0.<javassist.CtClassType: java.lang.ref.Reference memberCache>;

        $r3 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r4 = (javassist.CtMember$Cache) $r3;

        return $r4;

     label1:
        return null;
    }

    protected synchronized javassist.CtMember$Cache getMembers()
    {
        javassist.CtClassType r0;
        java.lang.ref.Reference $r1, $r4;
        javassist.CtMember$Cache $r2, $r6, r7;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r5;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: java.lang.ref.Reference memberCache>;

        if $r1 == null goto label1;

        $r4 = r0.<javassist.CtClassType: java.lang.ref.Reference memberCache>;

        $r5 = virtualinvoke $r4.<java.lang.ref.Reference: java.lang.Object get()>();

        $r6 = (javassist.CtMember$Cache) $r5;

        r7 = $r6;

        if $r6 != null goto label2;

     label1:
        $r2 = new javassist.CtMember$Cache;

        specialinvoke $r2.<javassist.CtMember$Cache: void <init>(javassist.CtClassType)>(r0);

        r7 = $r2;

        specialinvoke r0.<javassist.CtClassType: void makeFieldCache(javassist.CtMember$Cache)>($r2);

        specialinvoke r0.<javassist.CtClassType: void makeBehaviorCache(javassist.CtMember$Cache)>($r2);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        r0.<javassist.CtClassType: java.lang.ref.Reference memberCache> = $r3;

     label2:
        return r7;
    }

    private void makeFieldCache(javassist.CtMember$Cache)
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        java.util.List r2;
        java.util.Iterator r3;
        javassist.bytecode.FieldInfo r4;
        javassist.bytecode.ClassFile $r5;
        boolean $z0;
        java.lang.Object $r6;
        javassist.CtField $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtMember$Cache;

        $r5 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile3(boolean)>(0);

        r2 = virtualinvoke $r5.<javassist.bytecode.ClassFile: java.util.List getFields()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javassist.bytecode.FieldInfo) $r6;

        $r7 = new javassist.CtField;

        specialinvoke $r7.<javassist.CtField: void <init>(javassist.bytecode.FieldInfo,javassist.CtClass)>(r4, r0);

        virtualinvoke r1.<javassist.CtMember$Cache: void addField(javassist.CtMember)>($r7);

        goto label1;

     label2:
        return;
    }

    private void makeBehaviorCache(javassist.CtMember$Cache)
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        java.util.List r2;
        java.util.Iterator r3;
        javassist.bytecode.MethodInfo r4;
        javassist.bytecode.ClassFile $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        javassist.CtConstructor $r7;
        javassist.CtMethod $r8;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtMember$Cache;

        $r5 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile3(boolean)>(0);

        r2 = virtualinvoke $r5.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javassist.bytecode.MethodInfo) $r6;

        $z1 = virtualinvoke r4.<javassist.bytecode.MethodInfo: boolean isMethod()>();

        if $z1 == 0 goto label2;

        $r8 = new javassist.CtMethod;

        specialinvoke $r8.<javassist.CtMethod: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(r4, r0);

        virtualinvoke r1.<javassist.CtMember$Cache: void addMethod(javassist.CtMember)>($r8);

        goto label3;

     label2:
        $r7 = new javassist.CtConstructor;

        specialinvoke $r7.<javassist.CtConstructor: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>(r4, r0);

        virtualinvoke r1.<javassist.CtMember$Cache: void addConstructor(javassist.CtMember)>($r7);

     label3:
        goto label1;

     label4:
        return;
    }

    public javassist.CtField[] getFields()
    {
        javassist.CtClassType r0;
        java.util.ArrayList $r2;
        int $i0;
        javassist.CtField[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: javassist.CtClassType;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        staticinvoke <javassist.CtClassType: void getFields(java.util.List,javassist.CtClass)>($r2, r0);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = newarray (javassist.CtField)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (javassist.CtField[]) $r4;

        return $r5;
    }

    private static void getFields(java.util.List, javassist.CtClass)
    {
        java.util.List r0;
        javassist.CtClass r1, r2, $r3;
        javassist.CtClassType $r4;
        int $i0, i1, i2;
        boolean $z0;
        javassist.NotFoundException $r5, $r6;
        javassist.CtClass[] r8;
        javassist.CtMember$Cache r11;
        javassist.CtMember r12, r13;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: javassist.CtClass;

        if r1 != null goto label01;

        return;

     label01:
        $r3 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        staticinvoke <javassist.CtClassType: void getFields(java.util.List,javassist.CtClass)>(r0, $r3);

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

     label04:
        r8 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

        i1 = lengthof r8;

        i2 = 0;

     label05:
        if i2 >= i1 goto label06;

        r2 = r8[i2];

        staticinvoke <javassist.CtClassType: void getFields(java.util.List,javassist.CtClass)>(r0, r2);

        i2 = i2 + 1;

        goto label05;

     label06:
        goto label08;

     label07:
        $r5 := @caughtexception;

     label08:
        $r4 = (javassist.CtClassType) r1;

        r11 = virtualinvoke $r4.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r12 = virtualinvoke r11.<javassist.CtMember$Cache: javassist.CtMember fieldHead()>();

        r13 = virtualinvoke r11.<javassist.CtMember$Cache: javassist.CtMember lastField()>();

     label09:
        if r12 == r13 goto label10;

        r12 = virtualinvoke r12.<javassist.CtMember: javassist.CtMember next()>();

        $i0 = virtualinvoke r12.<javassist.CtMember: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>($i0);

        if $z0 != 0 goto label09;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r12);

        goto label09;

     label10:
        return;

        catch javassist.NotFoundException from label01 to label02 with label03;
        catch javassist.NotFoundException from label04 to label06 with label07;
    }

    public javassist.CtField getField(java.lang.String, java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2;
        javassist.CtField r3, $r4;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.CtField getField2(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = specialinvoke r0.<javassist.CtClassType: javassist.CtField checkGetField(javassist.CtField,java.lang.String,java.lang.String)>(r3, r1, r2);

        return $r4;
    }

    private javassist.CtField checkGetField(javassist.CtField, java.lang.String, java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.CtField r1;
        java.lang.String r2, r3, $r11, $r13, r18;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r14, $r15, $r16, $r17;
        javassist.NotFoundException $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtField;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r1 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("field: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r18 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        if r3 == null goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = new javassist.NotFoundException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r11 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javassist.NotFoundException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label2:
        return r1;
    }

    javassist.CtField getField2(java.lang.String, java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2;
        javassist.CtField r3, r5, $r6;
        int i0, i1;
        javassist.CtClass r4, r10;
        javassist.NotFoundException $r7;
        javassist.CtClass[] r8;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<javassist.CtClassType: javassist.CtField getDeclaredField2(java.lang.String,java.lang.String)>(r1, r2);

        if r3 == null goto label1;

        return r3;

     label1:
        r8 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass[] getInterfaces()>();

        i0 = lengthof r8;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r4 = r8[i1];

        r5 = virtualinvoke r4.<javassist.CtClass: javassist.CtField getField2(java.lang.String,java.lang.String)>(r1, r2);

        if r5 == null goto label4;

     label3:
        return r5;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        r10 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass getSuperclass()>();

        if r10 == null goto label7;

        $r6 = virtualinvoke r10.<javassist.CtClass: javassist.CtField getField2(java.lang.String,java.lang.String)>(r1, r2);

     label6:
        return $r6;

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

     label9:
        return null;

        catch javassist.NotFoundException from label1 to label3 with label8;
        catch javassist.NotFoundException from label4 to label6 with label8;
    }

    public javassist.CtField[] getDeclaredFields()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r5;
        int i0, $i1, i2;
        javassist.CtField[] r3;
        javassist.CtField $r4;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r5 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember fieldHead()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastField()>();

        i0 = staticinvoke <javassist.CtMember$Cache: int count(javassist.CtMember,javassist.CtMember)>(r5, r2);

        r3 = newarray (javassist.CtField)[i0];

        i2 = 0;

     label1:
        if r5 == r2 goto label2;

        r5 = virtualinvoke r5.<javassist.CtMember: javassist.CtMember next()>();

        $i1 = i2;

        i2 = i2 + 1;

        $r4 = (javassist.CtField) r5;

        r3[$i1] = $r4;

        goto label1;

     label2:
        return r3;
    }

    public javassist.CtField getDeclaredField(java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.CtField $r2;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<javassist.CtClassType: javassist.CtField getDeclaredField(java.lang.String,java.lang.String)>(r1, null);

        return $r2;
    }

    public javassist.CtField getDeclaredField(java.lang.String, java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2;
        javassist.CtField r3, $r4;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = specialinvoke r0.<javassist.CtClassType: javassist.CtField getDeclaredField2(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = specialinvoke r0.<javassist.CtClassType: javassist.CtField checkGetField(javassist.CtField,java.lang.String,java.lang.String)>(r3, r1, r2);

        return $r4;
    }

    private javassist.CtField getDeclaredField2(java.lang.String, java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2, $r5, $r7;
        javassist.CtMember$Cache r3;
        javassist.CtMember r4, r8;
        boolean $z0, $z1;
        javassist.CtField $r6;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r8 = virtualinvoke r3.<javassist.CtMember$Cache: javassist.CtMember fieldHead()>();

        r4 = virtualinvoke r3.<javassist.CtMember$Cache: javassist.CtMember lastField()>();

     label1:
        if r8 == r4 goto label3;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        $r5 = virtualinvoke r8.<javassist.CtMember: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        if r2 == null goto label2;

        $r7 = virtualinvoke r8.<javassist.CtMember: java.lang.String getSignature()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label1;

     label2:
        $r6 = (javassist.CtField) r8;

        return $r6;

     label3:
        return null;
    }

    public javassist.CtBehavior[] getDeclaredBehaviors()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r3, r7, r8;
        int i0, i1, $i2, $i3, $i4, i5;
        javassist.CtBehavior[] r4;
        javassist.CtBehavior $r5, $r6;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r7 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

        i0 = staticinvoke <javassist.CtMember$Cache: int count(javassist.CtMember,javassist.CtMember)>(r7, r2);

        r8 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r3 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

        i1 = staticinvoke <javassist.CtMember$Cache: int count(javassist.CtMember,javassist.CtMember)>(r8, r3);

        $i2 = i0 + i1;

        r4 = newarray (javassist.CtBehavior)[$i2];

        i5 = 0;

     label1:
        if r7 == r2 goto label2;

        r7 = virtualinvoke r7.<javassist.CtMember: javassist.CtMember next()>();

        $i4 = i5;

        i5 = i5 + 1;

        $r6 = (javassist.CtBehavior) r7;

        r4[$i4] = $r6;

        goto label1;

     label2:
        if r8 == r3 goto label3;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        $i3 = i5;

        i5 = i5 + 1;

        $r5 = (javassist.CtBehavior) r8;

        r4[$i3] = $r5;

        goto label2;

     label3:
        return r4;
    }

    public javassist.CtConstructor[] getConstructors()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r3, r7, r8;
        javassist.CtConstructor[] r4;
        javassist.CtConstructor r5, $r6;
        boolean $z0, $z1;
        int $i0, i1, i2;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        r3 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

        i1 = 0;

        r7 = r2;

     label1:
        if r7 == r3 goto label2;

        r7 = virtualinvoke r7.<javassist.CtMember: javassist.CtMember next()>();

        $r6 = (javassist.CtConstructor) r7;

        $z1 = staticinvoke <javassist.CtClassType: boolean isPubCons(javassist.CtConstructor)>($r6);

        if $z1 == 0 goto label1;

        i1 = i1 + 1;

        goto label1;

     label2:
        r4 = newarray (javassist.CtConstructor)[i1];

        i2 = 0;

        r8 = r2;

     label3:
        if r8 == r3 goto label5;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        r5 = (javassist.CtConstructor) r8;

        $z0 = staticinvoke <javassist.CtClassType: boolean isPubCons(javassist.CtConstructor)>(r5);

        if $z0 == 0 goto label4;

        $i0 = i2;

        i2 = i2 + 1;

        r4[$i0] = r5;

     label4:
        goto label3;

     label5:
        return r4;
    }

    private static boolean isPubCons(javassist.CtConstructor)
    {
        javassist.CtConstructor r0;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: javassist.CtConstructor;

        $i0 = virtualinvoke r0.<javassist.CtConstructor: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<javassist.CtConstructor: boolean isConstructor()>();

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public javassist.CtConstructor getConstructor(java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, $r7;
        javassist.CtMember$Cache r2;
        javassist.CtMember r3, r8;
        javassist.CtConstructor r4, $r5;
        javassist.bytecode.MethodInfo $r6;
        boolean $z0, $z1;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r8 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        r3 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

     label1:
        if r8 == r3 goto label3;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        r4 = (javassist.CtConstructor) r8;

        $r6 = virtualinvoke r4.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r7 = virtualinvoke $r6.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r4.<javassist.CtConstructor: boolean isConstructor()>();

        if $z1 == 0 goto label2;

        return r4;

     label2:
        goto label1;

     label3:
        $r5 = specialinvoke r0.<javassist.CtClass: javassist.CtConstructor getConstructor(java.lang.String)>(r1);

        return $r5;
    }

    public javassist.CtConstructor[] getDeclaredConstructors()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r3, r5, r8;
        javassist.CtConstructor r4, r6;
        boolean $z0, $z1;
        int $i0, i1, i2;
        javassist.CtConstructor[] r7;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        r3 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

        i1 = 0;

        r5 = r2;

     label1:
        if r5 == r3 goto label3;

        r5 = virtualinvoke r5.<javassist.CtMember: javassist.CtMember next()>();

        r6 = (javassist.CtConstructor) r5;

        $z1 = virtualinvoke r6.<javassist.CtConstructor: boolean isConstructor()>();

        if $z1 == 0 goto label2;

        i1 = i1 + 1;

     label2:
        goto label1;

     label3:
        r7 = newarray (javassist.CtConstructor)[i1];

        i2 = 0;

        r8 = r2;

     label4:
        if r8 == r3 goto label6;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        r4 = (javassist.CtConstructor) r8;

        $z0 = virtualinvoke r4.<javassist.CtConstructor: boolean isConstructor()>();

        if $z0 == 0 goto label5;

        $i0 = i2;

        i2 = i2 + 1;

        r7[$i0] = r4;

     label5:
        goto label4;

     label6:
        return r7;
    }

    public javassist.CtConstructor getClassInitializer()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r4;
        javassist.CtConstructor r3;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r4 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember consHead()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastCons()>();

     label1:
        if r4 == r2 goto label3;

        r4 = virtualinvoke r4.<javassist.CtMember: javassist.CtMember next()>();

        r3 = (javassist.CtConstructor) r4;

        $z0 = virtualinvoke r3.<javassist.CtConstructor: boolean isClassInitializer()>();

        if $z0 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public javassist.CtMethod[] getMethods()
    {
        javassist.CtClassType r0;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        int $i0;
        javassist.CtMethod[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: javassist.CtClassType;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        staticinvoke <javassist.CtClassType: void getMethods0(java.util.Map,javassist.CtClass)>($r2, r0);

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r4 = newarray (javassist.CtMethod)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (javassist.CtMethod[]) $r5;

        return $r6;
    }

    private static void getMethods0(java.util.Map, javassist.CtClass)
    {
        java.util.Map r0;
        javassist.CtClass r1, r2, r12;
        boolean $z0, $z1;
        javassist.CtClassType $r3;
        int $i0, i1, i2;
        javassist.CtMethod $r4;
        java.lang.String $r5;
        javassist.NotFoundException $r7, $r8;
        javassist.CtClass[] r9;
        javassist.CtMember$Cache r14;
        javassist.CtMember r15, r16;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: javassist.CtClass;

     label01:
        r9 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

        i1 = lengthof r9;

        i2 = 0;

     label02:
        if i2 >= i1 goto label03;

        r2 = r9[i2];

        staticinvoke <javassist.CtClassType: void getMethods0(java.util.Map,javassist.CtClass)>(r0, r2);

        i2 = i2 + 1;

        goto label02;

     label03:
        goto label05;

     label04:
        $r7 := @caughtexception;

     label05:
        r12 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r12 == null goto label06;

        staticinvoke <javassist.CtClassType: void getMethods0(java.util.Map,javassist.CtClass)>(r0, r12);

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

     label08:
        $z0 = r1 instanceof javassist.CtClassType;

        if $z0 == 0 goto label10;

        $r3 = (javassist.CtClassType) r1;

        r14 = virtualinvoke $r3.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r15 = virtualinvoke r14.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r16 = virtualinvoke r14.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

     label09:
        if r15 == r16 goto label10;

        r15 = virtualinvoke r15.<javassist.CtMember: javassist.CtMember next()>();

        $i0 = virtualinvoke r15.<javassist.CtMember: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>($i0);

        if $z1 != 0 goto label09;

        $r4 = (javassist.CtMethod) r15;

        $r5 = virtualinvoke $r4.<javassist.CtMethod: java.lang.String getStringRep()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r15);

        goto label09;

     label10:
        return;

        catch javassist.NotFoundException from label01 to label03 with label04;
        catch javassist.NotFoundException from label05 to label06 with label07;
    }

    public javassist.CtMethod getMethod(java.lang.String, java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r2, $r8, $r10;
        javassist.CtMethod r3;
        javassist.NotFoundException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = staticinvoke <javassist.CtClassType: javassist.CtMethod getMethod0(javassist.CtClass,java.lang.String,java.lang.String)>(r0, r1, r2);

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = new javassist.NotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(..) is not found in ");

        $r8 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.NotFoundException: void <init>(java.lang.String)>($r10);

        throw $r4;
    }

    private static javassist.CtMethod getMethod0(javassist.CtClass, java.lang.String, java.lang.String)
    {
        javassist.CtClass r0, r3, r16;
        java.lang.String r1, r2, $r6, $r9;
        javassist.CtMethod r4, $r7, $r10, r17;
        boolean $z0, $z1, $z2;
        javassist.CtClassType $r5;
        javassist.bytecode.MethodInfo $r8;
        javassist.NotFoundException $r11, $r12;
        javassist.CtMember$Cache r13;
        javassist.CtMember r14, r15;
        javassist.CtClass[] r19;
        int i0, i1;

        r0 := @parameter0: javassist.CtClass;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $z0 = r0 instanceof javassist.CtClassType;

        if $z0 == 0 goto label02;

        $r5 = (javassist.CtClassType) r0;

        r13 = virtualinvoke $r5.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r14 = virtualinvoke r13.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r15 = virtualinvoke r13.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

     label01:
        if r14 == r15 goto label02;

        r14 = virtualinvoke r14.<javassist.CtMember: javassist.CtMember next()>();

        $r6 = virtualinvoke r14.<javassist.CtMember: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label01;

        $r7 = (javassist.CtMethod) r14;

        $r8 = virtualinvoke $r7.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r9 = virtualinvoke $r8.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label01;

        $r10 = (javassist.CtMethod) r14;

        return $r10;

     label02:
        r16 = virtualinvoke r0.<javassist.CtClass: javassist.CtClass getSuperclass()>();

        if r16 == null goto label04;

        r17 = staticinvoke <javassist.CtClassType: javassist.CtMethod getMethod0(javassist.CtClass,java.lang.String,java.lang.String)>(r16, r1, r2);

        if r17 == null goto label04;

     label03:
        return r17;

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

     label06:
        r19 = virtualinvoke r0.<javassist.CtClass: javassist.CtClass[] getInterfaces()>();

        i0 = lengthof r19;

        i1 = 0;

     label07:
        if i1 >= i0 goto label10;

        r3 = r19[i1];

        r4 = staticinvoke <javassist.CtClassType: javassist.CtMethod getMethod0(javassist.CtClass,java.lang.String,java.lang.String)>(r3, r1, r2);

        if r4 == null goto label09;

     label08:
        return r4;

     label09:
        i1 = i1 + 1;

        goto label07;

     label10:
        goto label12;

     label11:
        $r11 := @caughtexception;

     label12:
        return null;

        catch javassist.NotFoundException from label02 to label03 with label05;
        catch javassist.NotFoundException from label06 to label08 with label11;
        catch javassist.NotFoundException from label09 to label10 with label11;
    }

    public javassist.CtMethod[] getDeclaredMethods()
    {
        javassist.CtClassType r0;
        javassist.CtMember$Cache r1;
        javassist.CtMember r2, r8;
        java.util.ArrayList $r4;
        int $i0;
        javassist.CtMethod[] $r5, $r7;
        java.lang.Object[] $r6;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r8 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r2 = virtualinvoke r1.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label1:
        if r8 == r2 goto label2;

        r8 = virtualinvoke r8.<javassist.CtMember: javassist.CtMember next()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r8);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (javassist.CtMethod)[$i0];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (javassist.CtMethod[]) $r6;

        return $r7;
    }

    public javassist.CtMethod[] getDeclaredMethods(java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, $r9;
        javassist.CtMember$Cache r2;
        javassist.CtMember r3, r10;
        java.util.ArrayList $r5;
        int $i0;
        javassist.CtMethod[] $r6, $r8;
        java.lang.Object[] $r7;
        boolean $z0;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r10 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r3 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        if r10 == r3 goto label2;

        r10 = virtualinvoke r10.<javassist.CtMember: javassist.CtMember next()>();

        $r9 = virtualinvoke r10.<javassist.CtMember: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r10);

        goto label1;

     label2:
        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r6 = newarray (javassist.CtMethod)[$i0];

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (javassist.CtMethod[]) $r7;

        return $r8;
    }

    public javassist.CtMethod getDeclaredMethod(java.lang.String) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, $r8, $r10, $r11;
        javassist.CtMember$Cache r2;
        javassist.CtMember r3, r13;
        javassist.NotFoundException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;
        boolean $z0;
        javassist.CtMethod $r12;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r13 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r3 = virtualinvoke r2.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

     label1:
        if r13 == r3 goto label2;

        r13 = virtualinvoke r13.<javassist.CtMember: javassist.CtMember next()>();

        $r11 = virtualinvoke r13.<javassist.CtMember: java.lang.String getName()>();

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r12 = (javassist.CtMethod) r13;

        return $r12;

     label2:
        $r4 = new javassist.NotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(..) is not found in ");

        $r8 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.NotFoundException: void <init>(java.lang.String)>($r10);

        throw $r4;
    }

    public javassist.CtMethod getDeclaredMethod(java.lang.String, javassist.CtClass[]) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        java.lang.String r1, r3, $r10, $r12, $r13, $r16;
        javassist.CtClass[] r2;
        javassist.CtMember$Cache r4;
        javassist.CtMember r5, r18;
        javassist.NotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        boolean $z0, $z1;
        javassist.CtMethod $r14, $r17;
        javassist.bytecode.MethodInfo $r15;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.CtClass[];

        r3 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String ofParameters(javassist.CtClass[])>(r2);

        r4 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        r18 = virtualinvoke r4.<javassist.CtMember$Cache: javassist.CtMember methodHead()>();

        r5 = virtualinvoke r4.<javassist.CtMember$Cache: javassist.CtMember lastMethod()>();

     label1:
        if r18 == r5 goto label2;

        r18 = virtualinvoke r18.<javassist.CtMember: javassist.CtMember next()>();

        $r13 = virtualinvoke r18.<javassist.CtMember: java.lang.String getName()>();

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r14 = (javassist.CtMethod) r18;

        $r15 = virtualinvoke $r14.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $r16 = virtualinvoke $r15.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean startsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label1;

        $r17 = (javassist.CtMethod) r18;

        return $r17;

     label2:
        $r6 = new javassist.NotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(..) is not found in ");

        $r10 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javassist.NotFoundException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public void addField(javassist.CtField, java.lang.String) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtField r1;
        java.lang.String r2;
        javassist.CtField$Initializer $r3;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtField;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <javassist.CtField$Initializer: javassist.CtField$Initializer byExpr(java.lang.String)>(r2);

        virtualinvoke r0.<javassist.CtClassType: void addField(javassist.CtField,javassist.CtField$Initializer)>(r1, $r3);

        return;
    }

    public void addField(javassist.CtField, javassist.CtField$Initializer) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtField r1;
        int i0, i1;
        javassist.CtClass $r2, $r7;
        javassist.FieldInitLink $r3, $r4, r19;
        java.lang.String $r5;
        boolean $z0, $z1;
        javassist.bytecode.ClassFile $r6, $r16;
        javassist.bytecode.FieldInfo $r8, $r17;
        javassist.bytecode.ConstantAttribute $r9;
        javassist.CannotCompileException $r10;
        javassist.NotFoundException $r11;
        javassist.CtField$Initializer r12;
        javassist.bytecode.ConstPool r13;
        javassist.CtMember$Cache $r15;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtField;

        r12 := @parameter1: javassist.CtField$Initializer;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $r2 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getDeclaringClass()>();

        if $r2 == r0 goto label1;

        $r10 = new javassist.CannotCompileException;

        specialinvoke $r10.<javassist.CannotCompileException: void <init>(java.lang.String)>("cannot add");

        throw $r10;

     label1:
        if r12 != null goto label2;

        r12 = virtualinvoke r1.<javassist.CtField: javassist.CtField$Initializer getInit()>();

     label2:
        if r12 == null goto label6;

        $r5 = virtualinvoke r1.<javassist.CtField: java.lang.String getSignature()>();

        virtualinvoke r12.<javassist.CtField$Initializer: void check(java.lang.String)>($r5);

        i1 = virtualinvoke r1.<javassist.CtField: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>(i1);

        if $z0 == 0 goto label6;

        $z1 = staticinvoke <javassist.Modifier: boolean isFinal(int)>(i1);

        if $z1 == 0 goto label6;

     label3:
        $r6 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r13 = virtualinvoke $r6.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        $r7 = virtualinvoke r1.<javassist.CtField: javassist.CtClass getType()>();

        i0 = virtualinvoke r12.<javassist.CtField$Initializer: int getConstantValue(javassist.bytecode.ConstPool,javassist.CtClass)>(r13, $r7);

        if i0 == 0 goto label4;

        $r8 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        $r9 = new javassist.bytecode.ConstantAttribute;

        specialinvoke $r9.<javassist.bytecode.ConstantAttribute: void <init>(javassist.bytecode.ConstPool,int)>(r13, i0);

        virtualinvoke $r8.<javassist.bytecode.FieldInfo: void addAttribute(javassist.bytecode.AttributeInfo)>($r9);

        r12 = null;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

     label6:
        $r15 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r15.<javassist.CtMember$Cache: void addField(javassist.CtMember)>(r1);

        $r16 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r17 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        virtualinvoke $r16.<javassist.bytecode.ClassFile: void addField(javassist.bytecode.FieldInfo)>($r17);

        if r12 == null goto label9;

        $r3 = new javassist.FieldInitLink;

        specialinvoke $r3.<javassist.FieldInitLink: void <init>(javassist.CtField,javassist.CtField$Initializer)>(r1, r12);

        r19 = r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers>;

        if r19 != null goto label7;

        r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers> = $r3;

        goto label9;

     label7:
        $r4 = r19.<javassist.FieldInitLink: javassist.FieldInitLink next>;

        if $r4 == null goto label8;

        r19 = r19.<javassist.FieldInitLink: javassist.FieldInitLink next>;

        goto label7;

     label8:
        r19.<javassist.FieldInitLink: javassist.FieldInitLink next> = $r3;

     label9:
        return;

        catch javassist.NotFoundException from label3 to label4 with label5;
    }

    public void removeField(javassist.CtField) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.CtField r1;
        javassist.bytecode.FieldInfo r2;
        javassist.bytecode.ClassFile r3;
        java.util.List $r4;
        boolean $z0;
        javassist.NotFoundException $r5;
        java.lang.String $r6;
        javassist.CtMember$Cache $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtField;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = virtualinvoke r3.<javassist.bytecode.ClassFile: java.util.List getFields()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r7.<javassist.CtMember$Cache: void remove(javassist.CtMember)>(r1);

        r0.<javassist.CtClassType: boolean gcConstPool> = 1;

        goto label2;

     label1:
        $r5 = new javassist.NotFoundException;

        $r6 = virtualinvoke r1.<javassist.CtField: java.lang.String toString()>();

        specialinvoke $r5.<javassist.NotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    public javassist.CtConstructor makeClassInitializer() throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtConstructor r1, $r6;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.Bytecode $r4;
        javassist.bytecode.ConstPool $r5;

        r0 := @this: javassist.CtClassType;

        r1 = virtualinvoke r0.<javassist.CtClassType: javassist.CtConstructor getClassInitializer()>();

        if r1 == null goto label1;

        return r1;

     label1:
        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = new javassist.bytecode.Bytecode;

        $r5 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r4.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>($r5, 0, 0);

        specialinvoke r0.<javassist.CtClassType: void modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int)>(r2, $r4, 0, 0);

        $r6 = virtualinvoke r0.<javassist.CtClassType: javassist.CtConstructor getClassInitializer()>();

        return $r6;
    }

    public void addConstructor(javassist.CtConstructor) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtConstructor r1;
        javassist.CtClass $r2;
        javassist.CtMember$Cache $r3;
        javassist.bytecode.ClassFile $r4;
        javassist.bytecode.MethodInfo $r5;
        javassist.CannotCompileException $r6;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtConstructor;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $r2 = virtualinvoke r1.<javassist.CtConstructor: javassist.CtClass getDeclaringClass()>();

        if $r2 == r0 goto label1;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.String)>("cannot add");

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r3.<javassist.CtMember$Cache: void addConstructor(javassist.CtMember)>(r1);

        $r4 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r1.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        virtualinvoke $r4.<javassist.bytecode.ClassFile: void addMethod(javassist.bytecode.MethodInfo)>($r5);

        return;
    }

    public void removeConstructor(javassist.CtConstructor) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.CtConstructor r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.ClassFile r3;
        java.util.List $r4;
        boolean $z0;
        javassist.NotFoundException $r5;
        java.lang.String $r6;
        javassist.CtMember$Cache $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtConstructor;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r1.<javassist.CtConstructor: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = virtualinvoke r3.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r7.<javassist.CtMember$Cache: void remove(javassist.CtMember)>(r1);

        r0.<javassist.CtClassType: boolean gcConstPool> = 1;

        goto label2;

     label1:
        $r5 = new javassist.NotFoundException;

        $r6 = virtualinvoke r1.<javassist.CtConstructor: java.lang.String toString()>();

        specialinvoke $r5.<javassist.NotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    public void addMethod(javassist.CtMethod) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CtMethod r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        javassist.CtClass $r2;
        javassist.CtMember$Cache $r3;
        javassist.bytecode.ClassFile $r4;
        javassist.bytecode.MethodInfo $r5;
        boolean $z0, $z1;
        javassist.CannotCompileException $r6, $r12;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9, $r11;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtMethod;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        $r2 = virtualinvoke r1.<javassist.CtMethod: javassist.CtClass getDeclaringClass()>();

        if $r2 == r0 goto label1;

        $r12 = new javassist.CannotCompileException;

        specialinvoke $r12.<javassist.CannotCompileException: void <init>(java.lang.String)>("bad declaring class");

        throw $r12;

     label1:
        i0 = virtualinvoke r1.<javassist.CtMethod: int getModifiers()>();

        $i1 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $i2 = $i1 & 512;

        if $i2 == 0 goto label4;

        $z0 = staticinvoke <javassist.Modifier: boolean isProtected(int)>(i0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <javassist.Modifier: boolean isPrivate(int)>(i0);

        if $z1 == 0 goto label3;

     label2:
        $r6 = new javassist.CannotCompileException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("an interface method must be public: ");

        $r9 = virtualinvoke r1.<javassist.CtMethod: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        $i6 = i0 | 1;

        virtualinvoke r1.<javassist.CtMethod: void setModifiers(int)>($i6);

     label4:
        $r3 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r3.<javassist.CtMember$Cache: void addMethod(javassist.CtMember)>(r1);

        $r4 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r5 = virtualinvoke r1.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        virtualinvoke $r4.<javassist.bytecode.ClassFile: void addMethod(javassist.bytecode.MethodInfo)>($r5);

        $i3 = i0 & 1024;

        if $i3 == 0 goto label5;

        $i4 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $i5 = $i4 | 1024;

        virtualinvoke r0.<javassist.CtClassType: void setModifiers(int)>($i5);

     label5:
        return;
    }

    public void removeMethod(javassist.CtMethod) throws javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.CtMethod r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.ClassFile r3;
        java.util.List $r4;
        boolean $z0;
        javassist.NotFoundException $r5;
        java.lang.String $r6;
        javassist.CtMember$Cache $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CtMethod;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r1.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = virtualinvoke r3.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache getMembers()>();

        virtualinvoke $r7.<javassist.CtMember$Cache: void remove(javassist.CtMember)>(r1);

        r0.<javassist.CtClassType: boolean gcConstPool> = 1;

        goto label2;

     label1:
        $r5 = new javassist.NotFoundException;

        $r6 = virtualinvoke r1.<javassist.CtMethod: java.lang.String toString()>();

        specialinvoke $r5.<javassist.NotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    public byte[] getAttribute(java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        javassist.bytecode.AttributeInfo r2;
        javassist.bytecode.ClassFile $r3;
        byte[] $r4;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r2 = virtualinvoke $r3.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r2.<javassist.bytecode.AttributeInfo: byte[] get()>();

        return $r4;
    }

    public void setAttribute(java.lang.String, byte[])
    {
        javassist.CtClassType r0;
        java.lang.String r1;
        byte[] r2;
        javassist.bytecode.ClassFile r3;
        javassist.bytecode.AttributeInfo $r4;
        javassist.bytecode.ConstPool $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $r4 = new javassist.bytecode.AttributeInfo;

        $r5 = virtualinvoke r3.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r4.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[])>($r5, r1, r2);

        virtualinvoke r3.<javassist.bytecode.ClassFile: void addAttribute(javassist.bytecode.AttributeInfo)>($r4);

        return;
    }

    public void instrument(javassist.CodeConverter) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.CodeConverter r1;
        javassist.bytecode.ClassFile r2;
        javassist.bytecode.ConstPool r3;
        java.util.List r4;
        javassist.bytecode.MethodInfo[] r5, $r7;
        int i0, $i1, i2;
        javassist.bytecode.MethodInfo r6;
        java.lang.Object[] $r8;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.CodeConverter;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        r4 = virtualinvoke r2.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        $i1 = interfaceinvoke r4.<java.util.List: int size()>();

        $r7 = newarray (javassist.bytecode.MethodInfo)[$i1];

        $r8 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r5 = (javassist.bytecode.MethodInfo[]) $r8;

        i0 = lengthof r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r6 = r5[i2];

        virtualinvoke r1.<javassist.CodeConverter: void doit(javassist.CtClass,javassist.bytecode.MethodInfo,javassist.bytecode.ConstPool)>(r0, r6, r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void instrument(javassist.expr.ExprEditor) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.expr.ExprEditor r1;
        javassist.bytecode.ClassFile r2;
        java.util.List r3;
        javassist.bytecode.MethodInfo[] r4, $r6;
        int i0, $i1, i2;
        javassist.bytecode.MethodInfo r5;
        java.lang.Object[] $r7;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.expr.ExprEditor;

        virtualinvoke r0.<javassist.CtClassType: void checkModify()>();

        r2 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        $r6 = newarray (javassist.bytecode.MethodInfo)[$i1];

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r4 = (javassist.bytecode.MethodInfo[]) $r7;

        i0 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r5 = r4[i2];

        virtualinvoke r1.<javassist.expr.ExprEditor: boolean doit(javassist.CtClass,javassist.bytecode.MethodInfo)>(r0, r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void prune()
    {
        javassist.CtClassType r0;
        boolean $z0;
        javassist.bytecode.ClassFile $r1;

        r0 := @this: javassist.CtClassType;

        $z0 = r0.<javassist.CtClassType: boolean wasPruned>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<javassist.CtClassType: boolean wasFrozen> = 1;

        r0.<javassist.CtClassType: boolean wasPruned> = 1;

        $r1 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        virtualinvoke $r1.<javassist.bytecode.ClassFile: void prune()>();

        return;
    }

    public void rebuildClassFile()
    {
        javassist.CtClassType r0;

        r0 := @this: javassist.CtClassType;

        r0.<javassist.CtClassType: boolean gcConstPool> = 1;

        return;
    }

    public void toBytecode(java.io.DataOutputStream) throws javassist.CannotCompileException, java.io.IOException
    {
        javassist.CtClassType r0;
        java.io.DataOutputStream r1;
        boolean $z0, $z1, $z2;
        javassist.ClassPool $r2;
        java.lang.String $r3, $r4;
        java.io.IOException $r5;
        javassist.CannotCompileException $r6, $r8;
        javassist.NotFoundException $r7;
        javassist.bytecode.ClassFile r9;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.io.DataOutputStream;

     label01:
        $z0 = virtualinvoke r0.<javassist.CtClassType: boolean isModified()>();

        if $z0 == 0 goto label05;

        specialinvoke r0.<javassist.CtClassType: void checkPruned(java.lang.String)>("toBytecode");

        r9 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        $z1 = r0.<javassist.CtClassType: boolean gcConstPool>;

        if $z1 == 0 goto label02;

        virtualinvoke r9.<javassist.bytecode.ClassFile: void compact()>();

        r0.<javassist.CtClassType: boolean gcConstPool> = 0;

     label02:
        specialinvoke r0.<javassist.CtClassType: void modifyClassConstructor(javassist.bytecode.ClassFile)>(r9);

        specialinvoke r0.<javassist.CtClassType: void modifyConstructors(javassist.bytecode.ClassFile)>(r9);

        $r4 = <javassist.CtClassType: java.lang.String debugDump>;

        if $r4 == null goto label03;

        specialinvoke r0.<javassist.CtClassType: void dumpClassFile(javassist.bytecode.ClassFile)>(r9);

     label03:
        virtualinvoke r9.<javassist.bytecode.ClassFile: void write(java.io.DataOutputStream)>(r1);

        virtualinvoke r1.<java.io.DataOutputStream: void flush()>();

        r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers> = null;

        $z2 = r0.<javassist.CtClassType: boolean doPruning>;

        if $z2 == 0 goto label04;

        virtualinvoke r9.<javassist.bytecode.ClassFile: void prune()>();

        r0.<javassist.CtClassType: boolean wasPruned> = 1;

     label04:
        goto label06;

     label05:
        $r2 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        $r3 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        virtualinvoke $r2.<javassist.ClassPool: void writeClassfile(java.lang.String,java.io.OutputStream)>($r3, r1);

     label06:
        r0.<javassist.CtClassType: int getCount> = 0;

        r0.<javassist.CtClassType: boolean wasFrozen> = 1;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        $r8 = new javassist.CannotCompileException;

        specialinvoke $r8.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r7);

        throw $r8;

     label09:
        $r5 := @caughtexception;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label10:
        return;

        catch javassist.NotFoundException from label01 to label07 with label08;
        catch java.io.IOException from label01 to label07 with label09;
    }

    private void dumpClassFile(javassist.bytecode.ClassFile) throws java.io.IOException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        java.io.DataOutputStream r2;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        $r4 = <javassist.CtClassType: java.lang.String debugDump>;

        r2 = virtualinvoke r0.<javassist.CtClassType: java.io.DataOutputStream makeFileOutput(java.lang.String)>($r4);

     label1:
        virtualinvoke r1.<javassist.bytecode.ClassFile: void write(java.io.DataOutputStream)>(r2);

     label2:
        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

        throw $r5;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void checkPruned(java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1, $r6, $r9;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<javassist.CtClassType: boolean wasPruned>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(): ");

        $r6 = virtualinvoke r0.<javassist.CtClassType: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was pruned.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public boolean stopPruning(boolean)
    {
        javassist.CtClassType r0;
        boolean z0, z1, $z2, $z3, $z4;

        r0 := @this: javassist.CtClassType;

        z0 := @parameter0: boolean;

        $z2 = r0.<javassist.CtClassType: boolean doPruning>;

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z1 = $z3;

        if z0 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        r0.<javassist.CtClassType: boolean doPruning> = $z4;

        return z1;
    }

    private void modifyClassConstructor(javassist.bytecode.ClassFile) throws javassist.CannotCompileException, javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.CtField r4;
        int i0, $i1, i2;
        javassist.FieldInitLink $r5, r12;
        javassist.bytecode.Bytecode $r6;
        javassist.bytecode.ConstPool $r7;
        javassist.compiler.Javac $r8;
        boolean $z0, z1;
        javassist.CtField$Initializer $r9;
        javassist.CtClass $r10;
        java.lang.String $r11;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        $r5 = r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers>;

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = new javassist.bytecode.Bytecode;

        $r7 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r6.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>($r7, 0, 0);

        $r8 = new javassist.compiler.Javac;

        specialinvoke $r8.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>($r6, r0);

        i2 = 0;

        z1 = 0;

        r12 = r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers>;

     label2:
        if r12 == null goto label4;

        r4 = r12.<javassist.FieldInitLink: javassist.CtField field>;

        $i1 = virtualinvoke r4.<javassist.CtField: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label3;

        z1 = 1;

        $r9 = r12.<javassist.FieldInitLink: javassist.CtField$Initializer init>;

        $r10 = virtualinvoke r4.<javassist.CtField: javassist.CtClass getType()>();

        $r11 = virtualinvoke r4.<javassist.CtField: java.lang.String getName()>();

        i0 = virtualinvoke $r9.<javassist.CtField$Initializer: int compileIfStatic(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.compiler.Javac)>($r10, $r11, $r6, $r8);

        if i2 >= i0 goto label3;

        i2 = i0;

     label3:
        r12 = r12.<javassist.FieldInitLink: javassist.FieldInitLink next>;

        goto label2;

     label4:
        if z1 == 0 goto label5;

        specialinvoke r0.<javassist.CtClassType: void modifyClassConstructor(javassist.bytecode.ClassFile,javassist.bytecode.Bytecode,int,int)>(r1, $r6, i2, 0);

     label5:
        return;
    }

    private void modifyClassConstructor(javassist.bytecode.ClassFile, javassist.bytecode.Bytecode, int, int) throws javassist.CannotCompileException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.Bytecode r2;
        int i0, i1, i2, i3, i4;
        byte[] $r3;
        javassist.bytecode.ExceptionTable $r4;
        javassist.ClassPool $r5;
        javassist.CannotCompileException $r6, $r12, $r14;
        javassist.bytecode.MethodInfo $r7, r15;
        javassist.bytecode.ConstPool $r8;
        javassist.bytecode.CodeAttribute $r9, r17;
        javassist.CtConstructor $r10;
        javassist.bytecode.BadBytecode $r11, $r13;
        javassist.CtMember$Cache r16;
        javassist.bytecode.CodeIterator r18;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r15 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.MethodInfo getStaticInitializer()>();

        if r15 != null goto label02;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void add(int)>(177);

        virtualinvoke r2.<javassist.bytecode.Bytecode: void setMaxStack(int)>(i0);

        virtualinvoke r2.<javassist.bytecode.Bytecode: void setMaxLocals(int)>(i1);

        $r7 = new javassist.bytecode.MethodInfo;

        $r8 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        specialinvoke $r7.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,java.lang.String)>($r8, "<clinit>", "()V");

        r15 = $r7;

        virtualinvoke $r7.<javassist.bytecode.MethodInfo: void setAccessFlags(int)>(8);

        $r9 = virtualinvoke r2.<javassist.bytecode.Bytecode: javassist.bytecode.CodeAttribute toCodeAttribute()>();

        virtualinvoke $r7.<javassist.bytecode.MethodInfo: void setCodeAttribute(javassist.bytecode.CodeAttribute)>($r9);

        virtualinvoke r1.<javassist.bytecode.ClassFile: void addMethod(javassist.bytecode.MethodInfo)>($r7);

        r16 = virtualinvoke r0.<javassist.CtClassType: javassist.CtMember$Cache hasMemberCache()>();

        if r16 == null goto label01;

        $r10 = new javassist.CtConstructor;

        specialinvoke $r10.<javassist.CtConstructor: void <init>(javassist.bytecode.MethodInfo,javassist.CtClass)>($r7, r0);

        virtualinvoke r16.<javassist.CtMember$Cache: void addConstructor(javassist.CtMember)>($r10);

     label01:
        goto label07;

     label02:
        r17 = virtualinvoke r15.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r17 != null goto label03;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.String)>("empty <clinit>");

        throw $r6;

     label03:
        r18 = virtualinvoke r17.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $r3 = virtualinvoke r2.<javassist.bytecode.Bytecode: byte[] get()>();

        i2 = virtualinvoke r18.<javassist.bytecode.CodeIterator: int insertEx(byte[])>($r3);

        $r4 = virtualinvoke r2.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r18.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r4, i2);

        i3 = virtualinvoke r17.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        if i3 >= i0 goto label04;

        virtualinvoke r17.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i0);

     label04:
        i4 = virtualinvoke r17.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        if i4 >= i1 goto label05;

        virtualinvoke r17.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>(i1);

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        $r14 = new javassist.CannotCompileException;

        specialinvoke $r14.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label07:
        $r5 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke r15.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r5, r1);

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        $r12 = new javassist.CannotCompileException;

        specialinvoke $r12.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label10:
        return;

        catch javassist.bytecode.BadBytecode from label03 to label05 with label06;
        catch javassist.bytecode.BadBytecode from label07 to label08 with label09;
    }

    private void modifyConstructors(javassist.bytecode.ClassFile) throws javassist.CannotCompileException, javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.ClassFile r1;
        javassist.bytecode.ConstPool r2;
        java.util.List r3;
        java.util.Iterator r4;
        javassist.bytecode.MethodInfo r5;
        javassist.bytecode.CodeAttribute r6;
        javassist.CtClass[] r7;
        int i0, $i1;
        javassist.FieldInitLink $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;
        javassist.bytecode.Bytecode $r10;
        java.lang.String $r11;
        javassist.ClassPool $r12, $r13;
        javassist.bytecode.BadBytecode $r14;
        javassist.CannotCompileException $r15;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.ClassFile;

        $r8 = r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers>;

        if $r8 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r1.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool getConstPool()>();

        r3 = virtualinvoke r1.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (javassist.bytecode.MethodInfo) $r9;

        $z1 = virtualinvoke r5.<javassist.bytecode.MethodInfo: boolean isConstructor()>();

        if $z1 == 0 goto label6;

        r6 = virtualinvoke r5.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r6 == null goto label6;

     label3:
        $r10 = new javassist.bytecode.Bytecode;

        $i1 = virtualinvoke r6.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        specialinvoke $r10.<javassist.bytecode.Bytecode: void <init>(javassist.bytecode.ConstPool,int,int)>(r2, 0, $i1);

        $r11 = virtualinvoke r5.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r12 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        r7 = staticinvoke <javassist.bytecode.Descriptor: javassist.CtClass[] getParameterTypes(java.lang.String,javassist.ClassPool)>($r11, $r12);

        i0 = specialinvoke r0.<javassist.CtClassType: int makeFieldInitializer(javassist.bytecode.Bytecode,javassist.CtClass[])>($r10, r7);

        staticinvoke <javassist.CtClassType: void insertAuxInitializer(javassist.bytecode.CodeAttribute,javassist.bytecode.Bytecode,int)>(r6, $r10, i0);

        $r13 = r0.<javassist.CtClassType: javassist.ClassPool classPool>;

        virtualinvoke r5.<javassist.bytecode.MethodInfo: void rebuildStackMapIf6(javassist.ClassPool,javassist.bytecode.ClassFile)>($r13, r1);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        $r15 = new javassist.CannotCompileException;

        specialinvoke $r15.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

     label6:
        goto label2;

     label7:
        return;

        catch javassist.bytecode.BadBytecode from label3 to label4 with label5;
    }

    private static void insertAuxInitializer(javassist.bytecode.CodeAttribute, javassist.bytecode.Bytecode, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.Bytecode r1;
        int i0, i1, i2, i3, i4;
        javassist.bytecode.CodeIterator r2;
        byte[] $r3;
        javassist.bytecode.ExceptionTable $r4;

        r0 := @parameter0: javassist.bytecode.CodeAttribute;

        r1 := @parameter1: javassist.bytecode.Bytecode;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        i3 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int skipSuperConstructor()>();

        if i3 >= 0 goto label1;

        i4 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int skipThisConstructor()>();

        if i4 < 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<javassist.bytecode.Bytecode: byte[] get()>();

        i1 = virtualinvoke r2.<javassist.bytecode.CodeIterator: int insertEx(byte[])>($r3);

        $r4 = virtualinvoke r1.<javassist.bytecode.Bytecode: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke r2.<javassist.bytecode.CodeIterator: void insert(javassist.bytecode.ExceptionTable,int)>($r4, i1);

        i2 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        if i2 >= i0 goto label2;

        virtualinvoke r0.<javassist.bytecode.CodeAttribute: void setMaxStack(int)>(i0);

     label2:
        return;
    }

    private int makeFieldInitializer(javassist.bytecode.Bytecode, javassist.CtClass[]) throws javassist.CannotCompileException, javassist.NotFoundException
    {
        javassist.CtClassType r0;
        javassist.bytecode.Bytecode r1;
        javassist.CtClass[] r2;
        javassist.CtField r4;
        int i0, $i2, i3;
        javassist.compiler.Javac $r5;
        boolean $z0;
        javassist.CtField$Initializer $r6;
        javassist.CtClass $r7;
        java.lang.String $r8;
        javassist.compiler.CompileError $r9;
        javassist.CannotCompileException $r10;
        javassist.FieldInitLink r12;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: javassist.bytecode.Bytecode;

        r2 := @parameter1: javassist.CtClass[];

        i3 = 0;

        $r5 = new javassist.compiler.Javac;

        specialinvoke $r5.<javassist.compiler.Javac: void <init>(javassist.bytecode.Bytecode,javassist.CtClass)>(r1, r0);

     label1:
        virtualinvoke $r5.<javassist.compiler.Javac: int recordParams(javassist.CtClass[],boolean)>(r2, 0);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new javassist.CannotCompileException;

        specialinvoke $r10.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r9);

        throw $r10;

     label4:
        r12 = r0.<javassist.CtClassType: javassist.FieldInitLink fieldInitializers>;

     label5:
        if r12 == null goto label7;

        r4 = r12.<javassist.FieldInitLink: javassist.CtField field>;

        $i2 = virtualinvoke r4.<javassist.CtField: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i2);

        if $z0 != 0 goto label6;

        $r6 = r12.<javassist.FieldInitLink: javassist.CtField$Initializer init>;

        $r7 = virtualinvoke r4.<javassist.CtField: javassist.CtClass getType()>();

        $r8 = virtualinvoke r4.<javassist.CtField: java.lang.String getName()>();

        i0 = virtualinvoke $r6.<javassist.CtField$Initializer: int compile(javassist.CtClass,java.lang.String,javassist.bytecode.Bytecode,javassist.CtClass[],javassist.compiler.Javac)>($r7, $r8, r1, r2, $r5);

        if i3 >= i0 goto label6;

        i3 = i0;

     label6:
        r12 = r12.<javassist.FieldInitLink: javassist.FieldInitLink next>;

        goto label5;

     label7:
        return i3;

        catch javassist.compiler.CompileError from label1 to label2 with label3;
    }

    java.util.Map getHiddenMethods()
    {
        javassist.CtClassType r0;
        java.util.Map $r1, $r2;
        java.util.Hashtable $r3;

        r0 := @this: javassist.CtClassType;

        $r1 = r0.<javassist.CtClassType: java.util.Map hiddenMethods>;

        if $r1 != null goto label1;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<javassist.CtClassType: java.util.Map hiddenMethods> = $r3;

     label1:
        $r2 = r0.<javassist.CtClassType: java.util.Map hiddenMethods>;

        return $r2;
    }

    int getUniqueNumber()
    {
        javassist.CtClassType r0;
        int $i0, $i1;

        r0 := @this: javassist.CtClassType;

        $i0 = r0.<javassist.CtClassType: int uniqueNumberSeed>;

        $i1 = $i0 + 1;

        r0.<javassist.CtClassType: int uniqueNumberSeed> = $i1;

        return $i0;
    }

    public java.lang.String makeUniqueName(java.lang.String)
    {
        javassist.CtClassType r0;
        java.lang.String r1, r5;
        java.util.Set r3;
        java.lang.String[] r4;
        java.util.HashMap $r6;
        int $i0, $i1, i2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.lang.String;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<javassist.CtClassType: void makeMemberList(java.util.Map)>($r6);

        r3 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke r3.<java.util.Set: int size()>();

        r4 = newarray (java.lang.String)[$i0];

        interfaceinvoke r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r4);

        $z0 = staticinvoke <javassist.CtClassType: boolean notFindInArray(java.lang.String,java.lang.String[])>(r1, r4);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        i2 = 100;

     label2:
        if i2 <= 999 goto label3;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("too many unique name");

        throw $r11;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i1 = i2;

        i2 = i2 + 1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = staticinvoke <javassist.CtClassType: boolean notFindInArray(java.lang.String,java.lang.String[])>(r5, r4);

        if $z1 == 0 goto label2;

        return r5;
    }

    private static boolean notFindInArray(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, $r2;
        java.lang.String[] r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r1[i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private void makeMemberList(java.util.Map)
    {
        javassist.CtClassType r0, $r11, $r12;
        java.util.Map r1;
        int i0, i1, i2;
        javassist.CtClass r2, r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javassist.bytecode.ClassFile $r3, $r4;
        java.lang.Object $r5, $r8;
        java.lang.String $r6, $r9;
        javassist.NotFoundException $r13, $r14;
        javassist.CtClass[] r15;
        java.util.List r20, r23;
        java.util.Iterator r21, r24;
        javassist.bytecode.MethodInfo r22;
        javassist.bytecode.FieldInfo r25;

        r0 := @this: javassist.CtClassType;

        r1 := @parameter0: java.util.Map;

        i0 = virtualinvoke r0.<javassist.CtClassType: int getModifiers()>();

        $z0 = staticinvoke <javassist.Modifier: boolean isAbstract(int)>(i0);

        if $z0 != 0 goto label01;

        $z4 = staticinvoke <javassist.Modifier: boolean isInterface(int)>(i0);

        if $z4 == 0 goto label06;

     label01:
        r15 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass[] getInterfaces()>();

        i1 = lengthof r15;

        i2 = 0;

     label02:
        if i2 >= i1 goto label04;

        r2 = r15[i2];

        if r2 == null goto label03;

        $z3 = r2 instanceof javassist.CtClassType;

        if $z3 == 0 goto label03;

        $r12 = (javassist.CtClassType) r2;

        specialinvoke $r12.<javassist.CtClassType: void makeMemberList(java.util.Map)>(r1);

     label03:
        i2 = i2 + 1;

        goto label02;

     label04:
        goto label06;

     label05:
        $r14 := @caughtexception;

     label06:
        r18 = virtualinvoke r0.<javassist.CtClassType: javassist.CtClass getSuperclass()>();

        if r18 == null goto label07;

        $z2 = r18 instanceof javassist.CtClassType;

        if $z2 == 0 goto label07;

        $r11 = (javassist.CtClassType) r18;

        specialinvoke $r11.<javassist.CtClassType: void makeMemberList(java.util.Map)>(r1);

     label07:
        goto label09;

     label08:
        $r13 := @caughtexception;

     label09:
        $r3 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r20 = virtualinvoke $r3.<javassist.bytecode.ClassFile: java.util.List getMethods()>();

        r21 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r8 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (javassist.bytecode.MethodInfo) $r8;

        $r9 = virtualinvoke r22.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r0);

        goto label10;

     label11:
        $r4 = virtualinvoke r0.<javassist.CtClassType: javassist.bytecode.ClassFile getClassFile2()>();

        r23 = virtualinvoke $r4.<javassist.bytecode.ClassFile: java.util.List getFields()>();

        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r5 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (javassist.bytecode.FieldInfo) $r5;

        $r6 = virtualinvoke r25.<javassist.bytecode.FieldInfo: java.lang.String getName()>();

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r0);

        goto label12;

     label13:
        return;

        catch javassist.NotFoundException from label01 to label04 with label05;
        catch javassist.NotFoundException from label06 to label07 with label08;
    }

    public static void <clinit>()
    {
        <javassist.CtClassType: int GET_THRESHOLD> = 2;

        return;
    }
}
