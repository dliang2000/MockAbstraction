public class org.apache.flink.api.common.eventtime.WatermarksWithIdleness extends java.lang.Object implements org.apache.flink.api.common.eventtime.WatermarkGenerator
{
    private final org.apache.flink.api.common.eventtime.WatermarkGenerator watermarks;
    private final org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer idlenessTimer;

    public void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator, java.time.Duration)
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness r0;
        org.apache.flink.api.common.eventtime.WatermarkGenerator r1;
        java.time.Duration r2;
        org.apache.flink.util.clock.SystemClock $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkGenerator;

        r2 := @parameter1: java.time.Duration;

        $r3 = staticinvoke <org.apache.flink.util.clock.SystemClock: org.apache.flink.util.clock.SystemClock getInstance()>();

        specialinvoke r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator,java.time.Duration,org.apache.flink.util.clock.Clock)>(r1, r2, $r3);

        return;
    }

    void <init>(org.apache.flink.api.common.eventtime.WatermarkGenerator, java.time.Duration, org.apache.flink.util.clock.Clock)
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness r0;
        org.apache.flink.api.common.eventtime.WatermarkGenerator r1, $r6;
        java.time.Duration r2;
        org.apache.flink.util.clock.Clock r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r7;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkGenerator;

        r2 := @parameter1: java.time.Duration;

        r3 := @parameter2: org.apache.flink.util.clock.Clock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "idleTimeout");

        $z0 = virtualinvoke r2.<java.time.Duration: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.time.Duration: boolean isNegative()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "idleTimeout must be greater than zero");

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "watermarks");

        $r6 = (org.apache.flink.api.common.eventtime.WatermarkGenerator) $r5;

        r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarkGenerator watermarks> = $r6;

        $r7 = new org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void <init>(org.apache.flink.util.clock.Clock,java.time.Duration)>(r3, r2);

        r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer idlenessTimer> = $r7;

        return;
    }

    public void onEvent(java.lang.Object, long, org.apache.flink.api.common.eventtime.WatermarkOutput)
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness r0;
        java.lang.Object r1;
        long l0;
        org.apache.flink.api.common.eventtime.WatermarkOutput r2;
        org.apache.flink.api.common.eventtime.WatermarkGenerator $r3;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r4;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: org.apache.flink.api.common.eventtime.WatermarkOutput;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarkGenerator watermarks>;

        interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkGenerator: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1, l0, r2);

        $r4 = r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer idlenessTimer>;

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: void activity()>();

        return;
    }

    public void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)
    {
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness r0;
        org.apache.flink.api.common.eventtime.WatermarkOutput r1;
        org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer $r2;
        boolean $z0;
        org.apache.flink.api.common.eventtime.WatermarkGenerator $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarksWithIdleness;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutput;

        $r2 = r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer idlenessTimer>;

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness$IdlenessTimer: boolean checkIfIdle()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarksWithIdleness: org.apache.flink.api.common.eventtime.WatermarkGenerator watermarks>;

        interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkGenerator: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>(r1);

     label2:
        return;
    }
}
