public class org.apache.flink.api.java.typeutils.MissingTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation
{
    private static final long serialVersionUID;
    private final java.lang.String functionName;
    private final org.apache.flink.api.common.functions.InvalidTypesException typeException;

    public void <init>(java.lang.String)
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.String r1;
        org.apache.flink.api.common.functions.InvalidTypesException $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r2.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("An unknown error occurred.");

        specialinvoke r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: void <init>(java.lang.String,org.apache.flink.api.common.functions.InvalidTypesException)>(r1, $r2);

        return;
    }

    public void <init>(java.lang.String, org.apache.flink.api.common.functions.InvalidTypesException)
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.String r1;
        org.apache.flink.api.common.functions.InvalidTypesException r2;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName> = r1;

        r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException> = r2;

        return;
    }

    public java.lang.String getFunctionName()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName>;

        return $r1;
    }

    public org.apache.flink.api.common.functions.InvalidTypesException getTypeException()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        org.apache.flink.api.common.functions.InvalidTypesException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException>;

        return $r1;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r11, $r12;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r10, $r13;
        org.apache.flink.api.common.functions.InvalidTypesException $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r6 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r9 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r3, $r4;
        org.apache.flink.api.common.functions.InvalidTypesException $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.MissingTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.MissingTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException>;

        $z3 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.api.common.functions.InvalidTypesException $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: java.lang.String functionName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.MissingTypeInfo: org.apache.flink.api.common.functions.InvalidTypesException typeException>;

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MissingTypeInfo;

        return $z0;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.MissingTypeInfo r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MissingTypeInfo;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("The missing type information cannot be used as a type information.");

        throw $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.MissingTypeInfo: long serialVersionUID> = -4212082837126702723L;

        return;
    }
}
