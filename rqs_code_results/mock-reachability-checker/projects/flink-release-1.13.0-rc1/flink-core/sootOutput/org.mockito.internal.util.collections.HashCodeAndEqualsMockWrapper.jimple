public class org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper extends java.lang.Object
{
    private final java.lang.Object mockInstance;

    public void <init>(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance> = r1;

        return;
    }

    public java.lang.Object get()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0;
        java.lang.Object $r1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0, r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper) r1;

        $r4 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $r3 = r2.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        if $r4 != $r3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int hashCode()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0;
        java.lang.Object $r1;
        int $i0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        $r1 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1);

        return $i0;
    }

    public static org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper of(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        specialinvoke $r1.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.Object $r3, $r7, $r8;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HashCodeAndEqualsMockWrapper{mockInstance=");

        $r3 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $r8 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>($r7);

        goto label2;

     label1:
        $r8 = specialinvoke r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.String typeInstanceString()>();

     label2:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String typeInstanceString()
    {
        org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r8, $r9;
        java.lang.Object $r2, $r7;
        java.lang.Class $r3;
        java.lang.String $r4, $r10;
        int $i0;

        r0 := @this: org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r7 = r0.<org.mockito.internal.util.collections.HashCodeAndEqualsMockWrapper: java.lang.Object mockInstance>;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
