final class org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty extends org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter
{
    final double maxBurstSeconds;

    void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, double)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch r1;
        double d0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter: void <init>(org.apache.flink.shaded.guava18.com.google.common.util.concurrent.RateLimiter$SleepingStopwatch,org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$1)>(r1, null);

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxBurstSeconds> = d0;

        return;
    }

    void doSetRate(double, double)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0, $b1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxPermits>;

        $d3 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxBurstSeconds>;

        $d4 = $d3 * d0;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxPermits> = $d4;

        $b0 = d2 cmpl #Infinity;

        if $b0 != 0 goto label1;

        $d8 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxPermits>;

        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double storedPermits> = $d8;

        goto label4;

     label1:
        $b1 = d2 cmpl 0.0;

        if $b1 != 0 goto label2;

        $d9 = 0.0;

        goto label3;

     label2:
        $d6 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double storedPermits>;

        $d5 = r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double maxPermits>;

        $d7 = $d6 * $d5;

        $d9 = $d7 / d2;

     label3:
        r0.<org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty: double storedPermits> = $d9;

     label4:
        return;
    }

    long storedPermitsToWaitTime(double, double)
    {
        org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty r0;
        double d0, d1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.util.concurrent.SmoothRateLimiter$SmoothBursty;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        return 0L;
    }
}
