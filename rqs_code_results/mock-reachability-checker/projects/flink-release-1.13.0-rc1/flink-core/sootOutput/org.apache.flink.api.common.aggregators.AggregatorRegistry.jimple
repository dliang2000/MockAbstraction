public class org.apache.flink.api.common.aggregators.AggregatorRegistry extends java.lang.Object
{
    private final java.util.Map registry;
    private org.apache.flink.api.common.aggregators.ConvergenceCriterion convergenceCriterion;
    private java.lang.String convergenceCriterionAggregatorName;

    public void <init>()
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry> = $r1;

        return;
    }

    public void registerAggregator(java.lang.String, org.apache.flink.api.common.aggregators.Aggregator)
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        java.lang.String r1;
        org.apache.flink.api.common.aggregators.Aggregator r2;
        java.lang.IllegalArgumentException $r3;
        java.util.Map $r4, $r5;
        boolean $z0;
        java.lang.RuntimeException $r7;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.aggregators.Aggregator;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name and aggregator must not be null");

        throw $r3;

     label2:
        $r4 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("An aggregator is already registered under the given name.");

        throw $r7;

     label3:
        $r5 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.util.Collection getAllRegisteredAggregators()
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        org.apache.flink.api.common.aggregators.Aggregator r4;
        java.util.ArrayList $r5;
        java.util.Map $r6, $r7;
        int $i0;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r9, $r10, $r12;
        org.apache.flink.api.common.aggregators.AggregatorWithName $r11;
        java.lang.String $r13;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        $r5 = new java.util.ArrayList;

        $r6 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        $r7 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r4 = (org.apache.flink.api.common.aggregators.Aggregator) $r10;

        $r11 = new org.apache.flink.api.common.aggregators.AggregatorWithName;

        $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r12;

        specialinvoke $r11.<org.apache.flink.api.common.aggregators.AggregatorWithName: void <init>(java.lang.String,org.apache.flink.api.common.aggregators.Aggregator)>($r13, r4);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        return $r5;
    }

    public void registerAggregationConvergenceCriterion(java.lang.String, org.apache.flink.api.common.aggregators.Aggregator, org.apache.flink.api.common.aggregators.ConvergenceCriterion)
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        java.lang.String r1;
        org.apache.flink.api.common.aggregators.Aggregator r2, r5;
        org.apache.flink.api.common.aggregators.ConvergenceCriterion r3;
        java.util.Map $r6, $r8;
        java.lang.Object $r7;
        java.lang.RuntimeException $r10;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.aggregators.Aggregator;

        r3 := @parameter2: org.apache.flink.api.common.aggregators.ConvergenceCriterion;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name, aggregator, or convergence criterion must not be null");

        throw $r11;

     label2:
        $r6 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (org.apache.flink.api.common.aggregators.Aggregator) $r7;

        if r5 == null goto label3;

        if r5 == r2 goto label3;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("An aggregator is already registered under the given name.");

        throw $r10;

     label3:
        $r8 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: org.apache.flink.api.common.aggregators.ConvergenceCriterion convergenceCriterion> = r3;

        r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.lang.String convergenceCriterionAggregatorName> = r1;

        return;
    }

    public java.lang.String getConvergenceCriterionAggregatorName()
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        $r1 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.lang.String convergenceCriterionAggregatorName>;

        return $r1;
    }

    public org.apache.flink.api.common.aggregators.ConvergenceCriterion getConvergenceCriterion()
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0;
        org.apache.flink.api.common.aggregators.ConvergenceCriterion $r1;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        $r1 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: org.apache.flink.api.common.aggregators.ConvergenceCriterion convergenceCriterion>;

        return $r1;
    }

    public void addAll(org.apache.flink.api.common.aggregators.AggregatorRegistry)
    {
        org.apache.flink.api.common.aggregators.AggregatorRegistry r0, r1;
        java.util.Map $r2, $r3;
        org.apache.flink.api.common.aggregators.ConvergenceCriterion $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        r1 := @parameter0: org.apache.flink.api.common.aggregators.AggregatorRegistry;

        $r3 = r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        $r2 = r1.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.util.Map registry>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        $r4 = r1.<org.apache.flink.api.common.aggregators.AggregatorRegistry: org.apache.flink.api.common.aggregators.ConvergenceCriterion convergenceCriterion>;

        r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: org.apache.flink.api.common.aggregators.ConvergenceCriterion convergenceCriterion> = $r4;

        $r5 = r1.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.lang.String convergenceCriterionAggregatorName>;

        r0.<org.apache.flink.api.common.aggregators.AggregatorRegistry: java.lang.String convergenceCriterionAggregatorName> = $r5;

        return;
    }
}
