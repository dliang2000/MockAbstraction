public class org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer extends java.lang.Object
{
    private final org.apache.flink.api.common.eventtime.WatermarkOutput underlyingOutput;
    private long combinedWatermark;
    private final java.util.Map watermarkPerOutputId;
    private final java.util.List watermarkOutputs;

    public void <init>(org.apache.flink.api.common.eventtime.WatermarkOutput)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        org.apache.flink.api.common.eventtime.WatermarkOutput r1;
        java.util.HashMap $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: long combinedWatermark> = -9223372036854775808L;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput underlyingOutput> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.Map watermarkPerOutputId> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.List watermarkOutputs> = $r3;

        return;
    }

    public void registerNewOutput(java.lang.String)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r3, $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.lang.Object[] $r7;
        java.util.List $r8;
        boolean $z1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r1 := @parameter0: java.lang.String;

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$1)>(null);

        $r5 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.Map watermarkPerOutputId>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4);

        r3 = (org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState) $r6;

        if r3 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Already contains an output for ID %s", $r7);

        $r8 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.List watermarkOutputs>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    public boolean unregisterOutput(java.lang.String)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.List $r5;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.Map watermarkPerOutputId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState) $r4;

        if r2 == null goto label1;

        $r5 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.List watermarkOutputs>;

        interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r2);

        return 1;

     label1:
        return 0;
    }

    public org.apache.flink.api.common.eventtime.WatermarkOutput getImmediateOutput(java.lang.String)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.Map watermarkPerOutputId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState) $r4;

        if r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "no output registered under id %s", $r5);

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$ImmediateOutput: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer,org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState)>(r0, r2);

        return $r6;
    }

    public org.apache.flink.api.common.eventtime.WatermarkOutput getDeferredOutput(java.lang.String)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.lang.String r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.Map watermarkPerOutputId>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState) $r4;

        if r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "no output registered under id %s", $r5);

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput: void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState)>(r2);

        return $r6;
    }

    public void onPeriodicEmit()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void updateCombinedWatermark()>();

        return;
    }

    private void updateCombinedWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        java.util.Iterator r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r2;
        java.util.List $r3;
        boolean $z0, $z1, z2, z3;
        long $l0, $l2, l3;
        byte $b1;
        org.apache.flink.api.common.eventtime.Watermark $r4;
        org.apache.flink.api.common.eventtime.WatermarkOutput $r5, $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        l3 = 9223372036854775807L;

        z2 = 0;

        z3 = 1;

        $r3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: java.util.List watermarkOutputs>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState) $r7;

        $z1 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean isIdle()>();

        if $z1 != 0 goto label2;

        $l2 = virtualinvoke r2.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long getWatermark()>();

        l3 = staticinvoke <java.lang.Math: long min(long,long)>(l3, $l2);

        z3 = 0;

     label2:
        z2 = 1;

        goto label1;

     label3:
        if z2 != 0 goto label4;

        return;

     label4:
        if z3 == 0 goto label5;

        $r6 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput underlyingOutput>;

        interfaceinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutput: void markIdle()>();

        goto label6;

     label5:
        $l0 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: long combinedWatermark>;

        $b1 = l3 cmp $l0;

        if $b1 <= 0 goto label6;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: long combinedWatermark> = l3;

        $r5 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: org.apache.flink.api.common.eventtime.WatermarkOutput underlyingOutput>;

        $r4 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(l3);

        interfaceinvoke $r5.<org.apache.flink.api.common.eventtime.WatermarkOutput: void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)>($r4);

     label6:
        return;
    }

    static long access$100(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;
        long $l0;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        $l0 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: long combinedWatermark>;

        return $l0;
    }

    static void access$200(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer r0;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer;

        specialinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer: void updateCombinedWatermark()>();

        return;
    }
}
