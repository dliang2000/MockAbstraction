final class org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone extends org.joda.time.DateTimeZone
{
    private static final long serialVersionUID;
    private final long[] iTransitions;
    private final int[] iWallOffsets;
    private final int[] iStandardOffsets;
    private final java.lang.String[] iNameKeys;
    private final org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone;

    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput, java.lang.String) throws java.io.IOException
    {
        java.io.DataInput r0;
        java.lang.String r1, $r8, $r9;
        int i0, $i3, $i5, i6, i7, i8, i9;
        java.lang.String[] r2, r6;
        long[] r3;
        int[] r4, r5;
        boolean $z0;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r7;
        long $l1, $l2, $l4;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        java.io.IOException $r11;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r13;

        r0 := @parameter0: java.io.DataInput;

        r1 := @parameter1: java.lang.String;

        i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>();

        r2 = newarray (java.lang.String)[i0];

        i6 = 0;

     label01:
        if i6 >= i0 goto label02;

        $r9 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>();

        r2[i6] = $r9;

        i6 = i6 + 1;

        goto label01;

     label02:
        i7 = interfaceinvoke r0.<java.io.DataInput: int readInt()>();

        r3 = newarray (long)[i7];

        r4 = newarray (int)[i7];

        r5 = newarray (int)[i7];

        r6 = newarray (java.lang.String)[i7];

        i8 = 0;

     label03:
        if i8 >= i7 goto label10;

        $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        r3[i8] = $l1;

        $l2 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i3 = (int) $l2;

        r4[i8] = $i3;

        $l4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0);

        $i5 = (int) $l4;

        r5[i8] = $i5;

     label04:
        if i0 >= 256 goto label05;

        i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        goto label06;

     label05:
        i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>();

     label06:
        $r8 = r2[i9];

        r6[i8] = $r8;

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Invalid encoding");

        throw $r11;

     label09:
        i8 = i8 + 1;

        goto label03;

     label10:
        r13 = null;

        $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>();

        if $z0 == 0 goto label11;

        r13 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1);

     label11:
        $r7 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, r3, r4, r5, r6, r13);

        return $r7;

        catch java.lang.ArrayIndexOutOfBoundsException from label04 to label07 with label08;
    }

    static org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String, boolean, java.util.ArrayList, org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        java.lang.String r0, r6, r7, $r13, $r15, $r18, $r23, $r31, $r33, $r36, $r37, $r41, $r42, $r46, $r47, $r52, $r61, $r62, $r64, $r74;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.ArrayList r1;
        int i0, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i23, $i24, $i25, $i28, $i30, $i32, $i34, $i35, i36, i37, i38;
        long[] r2;
        int[] r3, r4;
        java.lang.String[] r5, r70, r72;
        long l1, l2, l3, l4, $l19, $l20, $l29, $l31, $l33;
        java.text.DateFormatSymbols $r9;
        java.util.Locale $r10;
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone $r11;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r12, $r14, $r16, $r19, $r20, $r21, $r24, $r25, $r26, $r30;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r17, $r22, r67;
        java.lang.StringBuilder $r27, $r29, $r32, $r38, $r39, $r40, $r43, $r44, $r45, $r48, $r50, $r51, $r53, $r55, $r57, $r58, $r60;
        java.io.PrintStream $r28, $r49, $r54;
        org.joda.time.Period $r34;
        org.joda.time.PeriodType $r35;
        byte $b21, $b22, $b26, $b27;
        org.joda.time.DateTime $r56, $r59;
        java.lang.Object $r63;
        java.lang.IllegalArgumentException $r65, $r66;
        org.joda.time.tz.DateTimeZoneBuilder$Transition r68, r69;
        java.lang.String[][] r71;
        org.joda.time.chrono.ISOChronology r73;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.ArrayList;

        r67 := @parameter3: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i0 != 0 goto label01;

        $r66 = new java.lang.IllegalArgumentException;

        specialinvoke $r66.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r66;

     label01:
        r2 = newarray (long)[i0];

        r3 = newarray (int)[i0];

        r4 = newarray (int)[i0];

        r5 = newarray (java.lang.String)[i0];

        r68 = null;

        i36 = 0;

     label02:
        if i36 >= i0 goto label04;

        $r63 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i36);

        r69 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r63;

        $z8 = virtualinvoke r69.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r68);

        if $z8 != 0 goto label03;

        $r65 = new java.lang.IllegalArgumentException;

        specialinvoke $r65.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r65;

     label03:
        $l33 = virtualinvoke r69.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        r2[i36] = $l33;

        $i34 = virtualinvoke r69.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>();

        r3[i36] = $i34;

        $i35 = virtualinvoke r69.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>();

        r4[i36] = $i35;

        $r64 = virtualinvoke r69.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        r5[i36] = $r64;

        r68 = r69;

        i36 = i36 + 1;

        goto label02;

     label04:
        r70 = newarray (java.lang.String)[5];

        $r9 = new java.text.DateFormatSymbols;

        $r10 = <java.util.Locale: java.util.Locale ENGLISH>;

        specialinvoke $r9.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r10);

        r71 = virtualinvoke $r9.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>();

        i37 = 0;

     label05:
        $i5 = lengthof r71;

        if i37 >= $i5 goto label07;

        r72 = r71[i37];

        if r72 == null goto label06;

        $i32 = lengthof r72;

        if $i32 != 5 goto label06;

        $r62 = r72[0];

        $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r62);

        if $z7 == 0 goto label06;

        r70 = r72;

     label06:
        i37 = i37 + 1;

        goto label05;

     label07:
        r73 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        i38 = 0;

     label08:
        $i6 = lengthof r5;

        $i7 = $i6 - 1;

        if i38 >= $i7 goto label12;

        r6 = r5[i38];

        $i11 = i38 + 1;

        r7 = r5[$i11];

        $i12 = r3[i38];

        l1 = (long) $i12;

        $i13 = i38 + 1;

        $i14 = r3[$i13];

        l2 = (long) $i14;

        $i15 = r4[i38];

        l3 = (long) $i15;

        $i16 = i38 + 1;

        $i17 = r4[$i16];

        l4 = (long) $i17;

        $r34 = new org.joda.time.Period;

        $l19 = r2[i38];

        $i18 = i38 + 1;

        $l20 = r2[$i18];

        $r35 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>();

        specialinvoke $r34.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l19, $l20, $r35, r73);

        $b21 = l1 cmp l2;

        if $b21 == 0 goto label11;

        $b22 = l3 cmp l4;

        if $b22 != 0 goto label11;

        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 == 0 goto label11;

        $i23 = virtualinvoke $r34.<org.joda.time.Period: int getYears()>();

        if $i23 != 0 goto label11;

        $i24 = virtualinvoke $r34.<org.joda.time.Period: int getMonths()>();

        if $i24 <= 4 goto label11;

        $i25 = virtualinvoke $r34.<org.joda.time.Period: int getMonths()>();

        if $i25 >= 8 goto label11;

        $r36 = r70[2];

        $z4 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r36);

        if $z4 == 0 goto label11;

        $r37 = r70[4];

        $z5 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r37);

        if $z5 == 0 goto label11;

        $z6 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>();

        if $z6 == 0 goto label09;

        $r49 = <java.lang.System: java.io.PrintStream out>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixing duplicate name key - ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r49.<java.io.PrintStream: void println(java.lang.String)>($r52);

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("     - ");

        $r56 = new org.joda.time.DateTime;

        $l29 = r2[i38];

        specialinvoke $r56.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l29, r73);

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r59 = new org.joda.time.DateTime;

        $i30 = i38 + 1;

        $l31 = r2[$i30];

        specialinvoke $r59.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l31, r73);

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r61);

     label09:
        $b26 = l1 cmp l2;

        if $b26 <= 0 goto label10;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        $r47 = virtualinvoke $r46.<java.lang.String: java.lang.String intern()>();

        r5[i38] = $r47;

        goto label11;

     label10:
        $b27 = l1 cmp l2;

        if $b27 >= 0 goto label11;

        $i28 = i38 + 1;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = virtualinvoke $r41.<java.lang.String: java.lang.String intern()>();

        r5[$i28] = $r42;

        i38 = i38 + 1;

     label11:
        i38 = i38 + 1;

        goto label08;

     label12:
        if r67 == null goto label15;

        $r12 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r13 = virtualinvoke $r12.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r14 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r15 = virtualinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label15;

        $z2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>();

        if $z2 == 0 goto label13;

        $r28 = <java.lang.System: java.io.PrintStream out>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixing duplicate recurrent name key - ");

        $r30 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r31 = virtualinvoke $r30.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r33);

     label13:
        $r16 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $i8 = virtualinvoke $r16.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        if $i8 <= 0 goto label14;

        $r22 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r23 = virtualinvoke r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i10 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r24 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r25 = virtualinvoke $r24.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        $r26 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        specialinvoke $r22.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r23, $i10, $r25, $r26);

        r67 = $r22;

        goto label15;

     label14:
        $r17 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $r18 = virtualinvoke r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $i9 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r20 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r19 = r67.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r21 = virtualinvoke $r19.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence renameAppend(java.lang.String)>("-Summer");

        specialinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>($r18, $i9, $r20, $r21);

        r67 = $r17;

     label15:
        $r11 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if z0 == 0 goto label16;

        $r74 = r0;

        goto label17;

     label16:
        $r74 = "";

     label17:
        specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r74, r2, r3, r4, r5, r67);

        return $r11;
    }

    private void <init>(java.lang.String, long[], int[], int[], java.lang.String[], org.joda.time.tz.DateTimeZoneBuilder$DSTZone)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        java.lang.String r1;
        long[] r2;
        int[] r3, r4;
        java.lang.String[] r5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: long[];

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String[];

        r6 := @parameter5: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>(r1);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> = r2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> = r3;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> = r4;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> = r5;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> = r6;

        return;
    }

    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long l0;
        long[] r1;
        int $i1, $i2, $i3, i4, i5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        java.lang.String $r4, $r6, $r8, $r10;
        java.lang.String[] $r5, $r7, $r9;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i4 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if i4 < 0 goto label1;

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r10 = $r9[i4];

        return $r10;

     label1:
        i5 = i4 ^ -1;

        $i1 = lengthof r1;

        if i5 >= $i1 goto label3;

        if i5 <= 0 goto label2;

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i3 = i5 - 1;

        $r8 = $r7[$i3];

        return $r8;

     label2:
        return "UTC";

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $i2 = i5 - 1;

        $r6 = $r5[$i2];

        return $r6;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r4 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>(l0);

        return $r4;
    }

    public int getOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long l0;
        long[] r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        int[] $r4, $r5, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i8 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if i8 < 0 goto label1;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i7 = $r6[i8];

        return $i7;

     label1:
        i9 = i8 ^ -1;

        $i1 = lengthof r1;

        if i9 >= $i1 goto label3;

        if i9 <= 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i5 = i9 - 1;

        $i6 = $r5[$i5];

        return $i6;

     label2:
        return 0;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i3 = i9 - 1;

        $i4 = $r4[$i3];

        return $i4;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i2 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>(l0);

        return $i2;
    }

    public int getStandardOffset(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long l0;
        long[] r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        int[] $r4, $r5, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i8 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if i8 < 0 goto label1;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i7 = $r6[i8];

        return $i7;

     label1:
        i9 = i8 ^ -1;

        $i1 = lengthof r1;

        if i9 >= $i1 goto label3;

        if i9 <= 0 goto label2;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i5 = i9 - 1;

        $i6 = $r5[$i5];

        return $i6;

     label2:
        return 0;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i3 = i9 - 1;

        $i4 = $r4[$i3];

        return $i4;

     label4:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $i2 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0);

        return $i2;
    }

    public boolean isFixed()
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        return 0;
    }

    public long nextTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long[] r1;
        long l0, $l5, $l6, l7;
        int $i1, $i2, $i3, i8, $i9;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        byte $b4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l7 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i8 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l7);

        if i8 < 0 goto label1;

        $i9 = i8 + 1;

        goto label2;

     label1:
        $i9 = i8 ^ -1;

     label2:
        $i1 = lengthof r1;

        if $i9 >= $i1 goto label3;

        $l6 = r1[$i9];

        return $l6;

     label3:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 != null goto label4;

        return l7;

     label4:
        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        l0 = r1[$i3];

        $b4 = l7 cmp l0;

        if $b4 >= 0 goto label5;

        l7 = l0;

     label5:
        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $l5 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>(l7);

        return $l5;
    }

    public long previousTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long l0, $l4, $l8, $l10, l13, l14, l15;
        long[] r1;
        int $i1, $i2, $i6, i11, i12;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2, $r3;
        byte $b3, $b5, $b7, $b9;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        l0 := @parameter0: long;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i11 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0);

        if i11 < 0 goto label2;

        $b9 = l0 cmp -9223372036854775808L;

        if $b9 <= 0 goto label1;

        $l10 = l0 - 1L;

        return $l10;

     label1:
        return l0;

     label2:
        i12 = i11 ^ -1;

        $i1 = lengthof r1;

        if i12 >= $i1 goto label4;

        if i12 <= 0 goto label3;

        $i6 = i12 - 1;

        l13 = r1[$i6];

        $b7 = l13 cmp -9223372036854775808L;

        if $b7 <= 0 goto label3;

        $l8 = l13 - 1L;

        return $l8;

     label3:
        return l0;

     label4:
        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 == null goto label5;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        l14 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>(l0);

        $b5 = l14 cmp l0;

        if $b5 >= 0 goto label5;

        return l14;

     label5:
        $i2 = i12 - 1;

        l15 = r1[$i2];

        $b3 = l15 cmp -9223372036854775808L;

        if $b3 <= 0 goto label6;

        $l4 = l15 - 1L;

        return $l4;

     label6:
        return l0;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r3, $r4;
        long[] $r5, $r6;
        java.lang.String[] $r7, $r8;
        int[] $r9, $r10, $r11, $r12;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r13, $r14, $r15, $r16;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        if $z0 == 0 goto label6;

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $r5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r6, $r5);

        if $z2 == 0 goto label4;

        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z3 == 0 goto label4;

        $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $r9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r10, $r9);

        if $z4 == 0 goto label4;

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $r11 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r12, $r11);

        if $z5 == 0 goto label4;

        $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r13 != null goto label2;

        $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if null != $r16 goto label4;

        goto label3;

     label2:
        $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $r14 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r14);

        if $z6 == 0 goto label4;

     label3:
        $z7 = 1;

        goto label5;

     label4:
        $z7 = 0;

     label5:
        return $z7;

     label6:
        return 0;
    }

    public void writeTo(java.io.DataOutput) throws java.io.IOException
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        java.io.DataOutput r1;
        int i0, $i2, $i4, i6, i7, i8, i9, i10, i11;
        java.lang.String[] r3, $r15, $r21;
        java.util.Iterator r4;
        java.lang.String r5, $r16, $r17, $r19, $r22;
        long[] $r6, $r12;
        java.util.HashSet $r7;
        boolean $z0, $z1, $z3;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r8, $r9, $r10;
        long $l1, $l3, $l5;
        int[] $r13, $r14;
        java.lang.Object $r18;
        java.lang.UnsupportedOperationException $r20;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        r1 := @parameter0: java.io.DataOutput;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        i0 = lengthof $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        i6 = 0;

     label01:
        if i6 >= i0 goto label02;

        $r21 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        $r22 = $r21[i6];

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r22);

        i6 = i6 + 1;

        goto label01;

     label02:
        i7 = interfaceinvoke $r7.<java.util.Set: int size()>();

        if i7 <= 65535 goto label03;

        $r20 = new java.lang.UnsupportedOperationException;

        specialinvoke $r20.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("String pool is too large");

        throw $r20;

     label03:
        r3 = newarray (java.lang.String)[i7];

        r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        i8 = 0;

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r18 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.lang.String) $r18;

        r3[i8] = $r19;

        i8 = i8 + 1;

        goto label04;

     label05:
        interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i7);

        i9 = 0;

     label06:
        if i9 >= i7 goto label07;

        $r17 = r3[i9];

        interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r17);

        i9 = i9 + 1;

        goto label06;

     label07:
        interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(i0);

        i10 = 0;

     label08:
        if i10 >= i0 goto label13;

        $r12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $l1 = $r12[i10];

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l1);

        $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>;

        $i2 = $r13[i10];

        $l3 = (long) $i2;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l3);

        $r14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>;

        $i4 = $r14[i10];

        $l5 = (long) $i4;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l5);

        $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>;

        r5 = $r15[i10];

        i11 = 0;

     label09:
        if i11 >= i7 goto label12;

        $r16 = r3[i11];

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label11;

        if i7 >= 256 goto label10;

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i11);

        goto label12;

     label10:
        interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i11);

        goto label12;

     label11:
        i11 = i11 + 1;

        goto label09;

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r8 == null goto label14;

        $z3 = 1;

        goto label15;

     label14:
        $z3 = 0;

     label15:
        interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z3);

        $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r9 == null goto label16;

        $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        virtualinvoke $r10.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>(r1);

     label16:
        return;
    }

    public boolean isCachable()
    {
        org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone r0;
        long[] r1;
        long l0, $l5, $l6;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r2;
        int $i1, $i2, $i4, i8, i9;
        double $d0, $d1, d2, d3, d4;
        byte $b3, $b7;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>;

        if $r2 == null goto label1;

        return 1;

     label1:
        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>;

        $i1 = lengthof r1;

        if $i1 > 1 goto label2;

        return 0;

     label2:
        d2 = 0.0;

        i8 = 0;

        i9 = 1;

     label3:
        $i2 = lengthof r1;

        if i9 >= $i2 goto label5;

        $l6 = r1[i9];

        $i4 = i9 - 1;

        $l5 = r1[$i4];

        l0 = $l6 - $l5;

        $b7 = l0 cmp 63158400000L;

        if $b7 >= 0 goto label4;

        $d1 = (double) l0;

        d2 = d2 + $d1;

        i8 = i8 + 1;

     label4:
        i9 = i9 + 1;

        goto label3;

     label5:
        if i8 <= 0 goto label6;

        $d0 = (double) i8;

        d3 = d2 / $d0;

        d4 = d3 / 8.64E7;

        $b3 = d4 cmpl 25.0;

        if $b3 < 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public static void <clinit>()
    {
        <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long serialVersionUID> = 7811976468055766265L;

        return;
    }
}
