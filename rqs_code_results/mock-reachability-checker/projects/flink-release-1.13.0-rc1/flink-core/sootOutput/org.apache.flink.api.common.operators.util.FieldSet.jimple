public class org.apache.flink.api.common.operators.util.FieldSet extends java.lang.Object implements java.lang.Iterable
{
    public static final org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET;
    protected final java.util.Collection collection;

    public void <init>()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Set $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r1;

        return;
    }

    public void <init>(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.lang.Integer r1;
        java.util.Set $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: java.lang.Integer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field ID must not be null.");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r2;

        return;
    }

    public transient void <init>(int[])
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        int[] r1;
        java.util.Set $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.HashSet $r4;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r3;

        goto label5;

     label2:
        $r4 = new java.util.HashSet;

        $i1 = lengthof r1;

        $i2 = 2 * $i1;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i2);

        i5 = 0;

     label3:
        $i3 = lengthof r1;

        if i5 >= $i3 goto label4;

        $i4 = r1[i5];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r5;

     label5:
        return;
    }

    public void <init>(int[], boolean)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        int[] r1;
        boolean z0;
        java.util.Set $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.HashSet $r4;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: int[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r3;

        goto label5;

     label2:
        $r4 = new java.util.HashSet;

        $i1 = lengthof r1;

        $i2 = 2 * $i1;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i2);

        i5 = 0;

     label3:
        $i3 = lengthof r1;

        if i5 >= $i3 goto label4;

        $i4 = r1[i5];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>($r6);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r5;

     label5:
        return;
    }

    protected void <init>(java.util.Collection)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Collection r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = r1;

        return;
    }

    private void <init>(org.apache.flink.api.common.operators.util.FieldSet, java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, r1;
        java.lang.Integer r2;
        int $i0, $i1, $i2, $i3;
        java.util.HashSet $r4;
        java.util.Collection $r5, $r6;
        java.util.Set $r7, $r8;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        r2 := @parameter1: java.lang.Integer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i0 != 0 goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r2);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r8;

        goto label2;

     label1:
        $r4 = new java.util.HashSet;

        $r5 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i1 = interfaceinvoke $r5.<java.util.Collection: int size()>();

        $i2 = $i1 + 1;

        $i3 = 2 * $i2;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i3);

        $r6 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        virtualinvoke $r4.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r2);

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r7;

     label2:
        return;
    }

    private transient void <init>(org.apache.flink.api.common.operators.util.FieldSet, int[])
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, r1;
        int[] r2;
        java.util.Collection $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.util.HashSet $r5;
        java.util.Set $r8;
        java.lang.Integer $r9;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r4 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r4;

        goto label5;

     label2:
        $r5 = new java.util.HashSet;

        $r6 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i1 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        $i2 = lengthof r2;

        $i3 = $i1 + $i2;

        $i4 = 2 * $i3;

        specialinvoke $r5.<java.util.HashSet: void <init>(int)>($i4);

        $r7 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        virtualinvoke $r5.<java.util.HashSet: boolean addAll(java.util.Collection)>($r7);

        i7 = 0;

     label3:
        $i5 = lengthof r2;

        if i7 >= $i5 goto label4;

        $i6 = r2[i7];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>($r9);

        i7 = i7 + 1;

        goto label3;

     label4:
        $r8 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r5);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r8;

     label5:
        return;
    }

    private void <init>(org.apache.flink.api.common.operators.util.FieldSet, org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.HashSet $r4;
        java.util.Collection $r5, $r6, $r8, $r9;
        java.util.Set $r7;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        r2 := @parameter1: org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r2.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i0 != 0 goto label1;

        $r9 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r9;

        goto label3;

     label1:
        $i1 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i1 != 0 goto label2;

        $r8 = r2.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r8;

        goto label3;

     label2:
        $r4 = new java.util.HashSet;

        $i2 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $i3 = virtualinvoke r2.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $i4 = $i2 + $i3;

        $i5 = 2 * $i4;

        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i5);

        $r5 = r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        virtualinvoke $r4.<java.util.HashSet: boolean addAll(java.util.Collection)>($r5);

        $r6 = r2.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        virtualinvoke $r4.<java.util.HashSet: boolean addAll(java.util.Collection)>($r6);

        $r7 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection> = $r7;

     label3:
        return;
    }

    public org.apache.flink.api.common.operators.util.FieldSet addField(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, $r2;
        java.lang.Integer r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: java.lang.Integer;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field ID must not be null.");

        throw $r3;

     label1:
        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(org.apache.flink.api.common.operators.util.FieldSet,java.lang.Integer)>(r0, r1);

        return $r2;
    }

    public transient org.apache.flink.api.common.operators.util.FieldSet addFields(int[])
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, $r2;
        int[] r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: int[];

        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(org.apache.flink.api.common.operators.util.FieldSet,int[])>(r0, r1);

        return $r2;
    }

    public org.apache.flink.api.common.operators.util.FieldSet addFields(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, r1, $r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FieldSet to add must not be null.");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i0 != 0 goto label2;

        return r0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i1 != 0 goto label3;

        return r1;

     label3:
        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(org.apache.flink.api.common.operators.util.FieldSet,org.apache.flink.api.common.operators.util.FieldSet)>(r0, r1);

        return $r2;
    }

    public boolean contains(java.lang.Integer)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.lang.Integer r1;
        java.util.Collection $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public int size()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r1 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r1 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r2;
    }

    public org.apache.flink.api.common.operators.util.FieldList toFieldList()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        int[] r1;
        org.apache.flink.api.common.operators.util.FieldList $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int[] toArray()>();

        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        $r2 = new org.apache.flink.api.common.operators.util.FieldList;

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldList: void <init>(int[])>(r1);

        return $r2;
    }

    public int[] toArray()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        int[] r1;
        java.util.Iterator r2;
        int i0, $i1, $i2, i3;
        java.util.Collection $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Integer $r6;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r3 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i1 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        r1 = newarray (int)[$i1];

        i3 = 0;

        $r4 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $i2 = i3;

        i3 = i3 + 1;

        r1[$i2] = i0;

        goto label1;

     label2:
        return r1;
    }

    public boolean isValidSubset(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, r1;
        java.util.Iterator r2;
        java.lang.Integer r3;
        int $i0, $i1;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: int size()>();

        if $i0 <= $i1 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r4;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: boolean contains(java.lang.Integer)>(r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        goto label2;

     label4:
        return 1;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Collection $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r1 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.Collection $r3, $r4;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof org.apache.flink.api.common.operators.util.FieldSet;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $r2 = (org.apache.flink.api.common.operators.util.FieldSet) r1;

        $r3 = $r2.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $z1 = interfaceinvoke $r4.<java.util.Collection: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;
        java.util.Iterator r2;
        java.lang.Integer r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r9, $r11;
        java.util.Collection $r7, $r8;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Object $r12;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: java.lang.String getDescriptionPrefix()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        r2 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Integer) $r12;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label2:
        $r8 = r0.<org.apache.flink.api.common.operators.util.FieldSet: java.util.Collection collection>;

        $i0 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        if $i0 <= 0 goto label3;

        $i1 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        $i2 = $i1 - 2;

        virtualinvoke $r4.<java.lang.StringBuilder: void setLength(int)>($i2);

     label3:
        $r9 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: java.lang.String getDescriptionSuffix()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public org.apache.flink.api.common.operators.util.FieldSet clone()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        return r0;
    }

    protected java.lang.String getDescriptionPrefix()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        return "(";
    }

    protected java.lang.String getDescriptionSuffix()
    {
        org.apache.flink.api.common.operators.util.FieldSet r0;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        return ")";
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.flink.api.common.operators.util.FieldSet r0, $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.FieldSet;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.operators.util.FieldSet $r0;

        $r0 = new org.apache.flink.api.common.operators.util.FieldSet;

        specialinvoke $r0.<org.apache.flink.api.common.operators.util.FieldSet: void <init>()>();

        <org.apache.flink.api.common.operators.util.FieldSet: org.apache.flink.api.common.operators.util.FieldSet EMPTY_SET> = $r0;

        return;
    }
}
