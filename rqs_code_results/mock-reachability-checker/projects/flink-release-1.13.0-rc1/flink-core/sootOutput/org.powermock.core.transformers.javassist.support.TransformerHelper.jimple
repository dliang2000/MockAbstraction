public class org.powermock.core.transformers.javassist.support.TransformerHelper extends java.lang.Object
{
    public static final java.lang.String VOID;

    public void <init>()
    {
        org.powermock.core.transformers.javassist.support.TransformerHelper r0;

        r0 := @this: org.powermock.core.transformers.javassist.support.TransformerHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isAccessFlagSynthetic(javassist.CtMethod)
    {
        javassist.CtMethod r0;
        int i0, $i1;
        javassist.bytecode.MethodInfo $r1;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.CtMethod;

        $r1 = virtualinvoke r0.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        i0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = i0 & 4096;

        if $i1 == 0 goto label1;

        $z0 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: boolean isBridgeMethod(javassist.CtMethod)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isBridgeMethod(javassist.CtMethod)
    {
        javassist.CtMethod r0;
        javassist.bytecode.MethodInfo $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: javassist.CtMethod;

        $r1 = virtualinvoke r0.<javassist.CtMethod: javassist.bytecode.MethodInfo getMethodInfo2()>();

        $i0 = virtualinvoke $r1.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.String getCorrectReturnValueType(javassist.CtClass)
    {
        javassist.CtClass r0, $r2;
        java.lang.String r1, r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: javassist.CtClass;

        r1 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $r2 = <javassist.CtClass: javassist.CtClass voidType>;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        r11 = "";

        goto label5;

     label1:
        $z1 = virtualinvoke r0.<javassist.CtClass: boolean isPrimitive()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("char");

        if $z2 == 0 goto label2;

        r11 = "((java.lang.Character)value).charValue()";

        goto label5;

     label2:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean");

        if $z3 == 0 goto label3;

        r11 = "((java.lang.Boolean)value).booleanValue()";

        goto label5;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("((java.lang.Number)value).");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value()");

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")value");

        r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        return r11;
    }

    public static boolean isNotSyntheticField(javassist.bytecode.FieldInfo)
    {
        javassist.bytecode.FieldInfo r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: javassist.bytecode.FieldInfo;

        $i0 = virtualinvoke r0.<javassist.bytecode.FieldInfo: int getAccessFlags()>();

        $i1 = $i0 & 4096;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean shouldSkipMethod(javassist.CtMethod)
    {
        javassist.CtMethod r0;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @parameter0: javassist.CtMethod;

        $z0 = staticinvoke <org.powermock.core.transformers.javassist.support.TransformerHelper: boolean isAccessFlagSynthetic(javassist.CtMethod)>(r0);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke r0.<javassist.CtMethod: int getModifiers()>();

        $z1 = staticinvoke <javassist.Modifier: boolean isAbstract(int)>($i0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static java.lang.String getReturnTypeAsString(javassist.CtMethod) throws javassist.NotFoundException
    {
        javassist.CtMethod r0;
        javassist.CtClass r1, $r2;
        boolean $z0;
        java.lang.String r3;

        r0 := @parameter0: javassist.CtMethod;

        r1 = virtualinvoke r0.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        r3 = "";

        $r2 = <javassist.CtClass: javassist.CtClass voidType>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        r3 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

     label1:
        return r3;
    }

    public static boolean shouldTreatAsSystemClassCall(javassist.CtClass)
    {
        javassist.CtClass r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: javassist.CtClass;

        r1 = virtualinvoke r0.<javassist.CtClass: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");

        return $z0;
    }

    public static void <clinit>()
    {
        <org.powermock.core.transformers.javassist.support.TransformerHelper: java.lang.String VOID> = "";

        return;
    }
}
