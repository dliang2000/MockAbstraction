public final class org.apache.logging.log4j.spi.ThreadContextMapFactory extends java.lang.Object
{
    private static final org.apache.logging.log4j.Logger LOGGER;
    private static final java.lang.String THREAD_CONTEXT_KEY;
    private static final java.lang.String GC_FREE_THREAD_CONTEXT_KEY;
    private static boolean GcFreeThreadContextKey;
    private static java.lang.String ThreadContextMapName;

    public static void init()
    {
        staticinvoke <org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: void init()>();

        staticinvoke <org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap: void init()>();

        staticinvoke <org.apache.logging.log4j.spi.DefaultThreadContextMap: void init()>();

        staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: void initPrivate()>();

        return;
    }

    private static void initPrivate()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String $r1;
        boolean $z0;

        r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>("log4j2.threadContextMap");

        <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String ThreadContextMapName> = $r1;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: boolean getBooleanProperty(java.lang.String)>("log4j2.garbagefree.threadContextMap");

        <org.apache.logging.log4j.spi.ThreadContextMapFactory: boolean GcFreeThreadContextKey> = $z0;

        return;
    }

    private void <init>()
    {
        org.apache.logging.log4j.spi.ThreadContextMapFactory r0;

        r0 := @this: org.apache.logging.log4j.spi.ThreadContextMapFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.logging.log4j.spi.ThreadContextMap createThreadContextMap()
    {
        java.lang.ClassLoader r0;
        java.util.Iterator r1;
        org.apache.logging.log4j.spi.Provider r2;
        java.lang.Class r3, $r8, $r14, r26;
        java.lang.String $r5, $r11, $r13, $r17, $r20, $r24, r29;
        boolean $z0, $z1, $z2, $z3;
        org.apache.logging.log4j.spi.LoggerContextFactory $r6, $r7;
        java.lang.Iterable $r9;
        java.lang.Object $r10, $r12, $r15;
        java.lang.Exception $r16, $r22;
        org.apache.logging.log4j.Logger $r18, $r21, $r23;
        java.lang.ClassNotFoundException $r19;
        org.apache.logging.log4j.spi.ThreadContextMap r25;

        r0 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: java.lang.ClassLoader findClassLoader()>();

        r25 = null;

        $r5 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String ThreadContextMapName>;

        if $r5 == null goto label05;

     label01:
        $r13 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String ThreadContextMapName>;

        r26 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r13);

        $r14 = class "Lorg/apache/logging/log4j/spi/ThreadContextMap;";

        $z3 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r26);

        if $z3 == 0 goto label02;

        $r15 = virtualinvoke r26.<java.lang.Class: java.lang.Object newInstance()>();

        r25 = (org.apache.logging.log4j.spi.ThreadContextMap) $r15;

     label02:
        goto label05;

     label03:
        $r19 := @caughtexception;

        $r21 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.Logger LOGGER>;

        $r20 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String ThreadContextMapName>;

        interfaceinvoke $r21.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object)>("Unable to locate configured ThreadContextMap {}", $r20);

        goto label05;

     label04:
        $r16 := @caughtexception;

        $r18 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.Logger LOGGER>;

        $r17 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String ThreadContextMapName>;

        interfaceinvoke $r18.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to create configured ThreadContextMap {}", $r17, $r16);

     label05:
        if r25 != null goto label11;

        $z0 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: boolean hasProviders()>();

        if $z0 == 0 goto label11;

        $r6 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory getFactory()>();

        if $r6 == null goto label11;

        $r7 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory getFactory()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        r29 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r9 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: java.lang.Iterable getProviders()>();

        r1 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.logging.log4j.spi.Provider) $r10;

        $r11 = virtualinvoke r2.<org.apache.logging.log4j.spi.Provider: java.lang.String getClassName()>();

        $z2 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label10;

        r3 = virtualinvoke r2.<org.apache.logging.log4j.spi.Provider: java.lang.Class loadThreadContextMap()>();

        if r3 == null goto label10;

     label07:
        $r12 = virtualinvoke r3.<java.lang.Class: java.lang.Object newInstance()>();

        r25 = (org.apache.logging.log4j.spi.ThreadContextMap) $r12;

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        $r23 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.Logger LOGGER>;

        $r24 = virtualinvoke r2.<org.apache.logging.log4j.spi.Provider: java.lang.String getThreadContextMap()>();

        interfaceinvoke $r23.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to locate or load configured ThreadContextMap {}", $r24, $r22);

        r25 = staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.spi.ThreadContextMap createDefaultThreadContextMap()>();

     label10:
        goto label06;

     label11:
        if r25 != null goto label12;

        r25 = staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.spi.ThreadContextMap createDefaultThreadContextMap()>();

     label12:
        return r25;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    private static org.apache.logging.log4j.spi.ThreadContextMap createDefaultThreadContextMap()
    {
        boolean $z0, $z1;
        org.apache.logging.log4j.spi.DefaultThreadContextMap $r0;
        org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap $r1;
        org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap $r2;

        $z0 = <org.apache.logging.log4j.util.Constants: boolean ENABLE_THREADLOCALS>;

        if $z0 == 0 goto label2;

        $z1 = <org.apache.logging.log4j.spi.ThreadContextMapFactory: boolean GcFreeThreadContextKey>;

        if $z1 == 0 goto label1;

        $r2 = new org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap;

        specialinvoke $r2.<org.apache.logging.log4j.spi.GarbageFreeSortedArrayThreadContextMap: void <init>()>();

        return $r2;

     label1:
        $r1 = new org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap;

        specialinvoke $r1.<org.apache.logging.log4j.spi.CopyOnWriteSortedArrayThreadContextMap: void <init>()>();

        return $r1;

     label2:
        $r0 = new org.apache.logging.log4j.spi.DefaultThreadContextMap;

        specialinvoke $r0.<org.apache.logging.log4j.spi.DefaultThreadContextMap: void <init>(boolean)>(1);

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.status.StatusLogger $r0;

        <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String GC_FREE_THREAD_CONTEXT_KEY> = "log4j2.garbagefree.threadContextMap";

        <org.apache.logging.log4j.spi.ThreadContextMapFactory: java.lang.String THREAD_CONTEXT_KEY> = "log4j2.threadContextMap";

        $r0 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        <org.apache.logging.log4j.spi.ThreadContextMapFactory: org.apache.logging.log4j.Logger LOGGER> = $r0;

        staticinvoke <org.apache.logging.log4j.spi.ThreadContextMapFactory: void initPrivate()>();

        return;
    }
}
