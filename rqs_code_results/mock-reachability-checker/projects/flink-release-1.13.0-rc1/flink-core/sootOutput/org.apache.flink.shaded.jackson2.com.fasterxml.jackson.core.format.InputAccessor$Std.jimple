public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std extends java.lang.Object implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor
{
    protected final java.io.InputStream _in;
    protected final byte[] _buffer;
    protected final int _bufferedStart;
    protected int _bufferedEnd;
    protected int _ptr;

    public void <init>(java.io.InputStream, byte[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        java.io.InputStream r1;
        byte[] r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = 0;

        return;
    }

    public void <init>(byte[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        byte[] r1;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart> = i0;

        $i2 = i0 + i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = $i2;

        return;
    }

    public boolean hasMoreBytes() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.io.InputStream $r1, $r4;
        byte[] $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;

        if $i3 >= $i2 goto label1;

        return 1;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;

        if $r1 != null goto label2;

        return 0;

     label2:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;

        $i5 = lengthof $r2;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        i0 = $i5 - $i4;

        if i0 >= 1 goto label3;

        return 0;

     label3:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>($r3, $i6, i0);

        if i1 > 0 goto label4;

        return 0;

     label4:
        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;

        $i8 = $i7 + i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = $i8;

        return 1;
    }

    public byte nextByte() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        byte[] $r1, $r8;
        byte $b4;
        boolean $z0;
        java.io.EOFException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;

        if $i1 < $i0 goto label1;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: boolean hasMoreBytes()>();

        if $z0 != 0 goto label1;

        $r3 = new java.io.EOFException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed auto-detect: could not read more than ");

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes (max buffer size: ");

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;

        $i6 = lengthof $r8;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.EOFException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = $i3;

        $b4 = $r1[$i2];

        return $b4;
    }

    public void reset()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = $i0;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.DataFormatMatcher createMatcher(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.MatchStrength)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.MatchStrength r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.DataFormatMatcher $r3;
        int $i0, $i1, $i2, $i3;
        byte[] $r4;
        java.io.InputStream $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.MatchStrength;

        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.DataFormatMatcher;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;

        $i2 = $i1 - $i0;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.DataFormatMatcher: void <init>(java.io.InputStream,byte[],int,int,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonFactory,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.format.MatchStrength)>($r5, $r4, $i3, $i2, r1, r2);

        return $r3;
    }
}
