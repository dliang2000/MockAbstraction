public final class org.apache.flink.api.common.typeutils.base.StringValueSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    private static final int HIGH_BIT;
    public static final org.apache.flink.api.common.typeutils.base.StringValueSerializer INSTANCE;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        return 0;
    }

    public org.apache.flink.types.StringValue createInstance()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        $r1 = new org.apache.flink.types.StringValue;

        specialinvoke $r1.<org.apache.flink.types.StringValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.StringValue copy(org.apache.flink.types.StringValue)
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue copy(org.apache.flink.types.StringValue,org.apache.flink.types.StringValue)>(r1, $r2);

        return $r3;
    }

    public org.apache.flink.types.StringValue copy(org.apache.flink.types.StringValue, org.apache.flink.types.StringValue)
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        r2 := @parameter1: org.apache.flink.types.StringValue;

        virtualinvoke r2.<org.apache.flink.types.StringValue: void setValue(org.apache.flink.types.StringValue)>(r1);

        return r2;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        return -1;
    }

    public void serialize(org.apache.flink.types.StringValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        virtualinvoke r1.<org.apache.flink.types.StringValue: void write(org.apache.flink.core.memory.DataOutputView)>(r2);

        return;
    }

    public org.apache.flink.types.StringValue deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.StringValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>()>();

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue deserialize(org.apache.flink.types.StringValue,org.apache.flink.core.memory.DataInputView)>($r2, r1);

        return $r3;
    }

    public org.apache.flink.types.StringValue deserialize(org.apache.flink.types.StringValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue r1;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        virtualinvoke r1.<org.apache.flink.types.StringValue: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        return r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i8, i9;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i4 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i4);

        if i4 < 128 goto label3;

        i5 = 7;

        i6 = i4 & 127;

     label1:
        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if $i0 < 128 goto label2;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i0);

        $i2 = $i0 & 127;

        $i3 = $i2 << i5;

        i6 = i6 | $i3;

        i5 = i5 + 7;

        goto label1;

     label2:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i0);

        $i1 = $i0 << i5;

        i4 = i6 | $i1;

     label3:
        i8 = 0;

     label4:
        if i8 >= i4 goto label7;

        i9 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i9);

     label5:
        if i9 < 128 goto label6;

        i9 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i9);

        goto label5;

     label6:
        i8 = i8 + 1;

        goto label4;

     label7:
        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.api.common.typeutils.base.StringValueSerializer$StringValueSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.StringValueSerializer$StringValueSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.StringValueSerializer$StringValueSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.StringValue $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.StringValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue deserialize(org.apache.flink.types.StringValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.StringValue $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.StringValue $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.StringValue) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: void serialize(org.apache.flink.types.StringValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.StringValue $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.StringValue) r1;

        $r3 = (org.apache.flink.types.StringValue) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue copy(org.apache.flink.types.StringValue,org.apache.flink.types.StringValue)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        java.lang.Object r1;
        org.apache.flink.types.StringValue $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.StringValue) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue copy(org.apache.flink.types.StringValue)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer r0;
        org.apache.flink.types.StringValue $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.types.StringValue createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.StringValueSerializer $r0;

        <org.apache.flink.api.common.typeutils.base.StringValueSerializer: int HIGH_BIT> = 128;

        <org.apache.flink.api.common.typeutils.base.StringValueSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.StringValueSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.StringValueSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.StringValueSerializer: org.apache.flink.api.common.typeutils.base.StringValueSerializer INSTANCE> = $r0;

        return;
    }
}
