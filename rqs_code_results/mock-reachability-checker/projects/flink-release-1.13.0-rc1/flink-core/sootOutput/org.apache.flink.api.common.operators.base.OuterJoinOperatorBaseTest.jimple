public class org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest extends java.lang.Object implements java.io.Serializable
{
    private org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction joiner;
    private org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator;
    private org.apache.flink.api.common.ExecutionConfig executionConfig;
    private org.apache.flink.api.common.functions.RuntimeContext runtimeContext;

    public void <init>()
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction $r5, $r11;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r6;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r7;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r9, $r10;
        int[] $r12, $r13;
        org.apache.flink.api.common.ExecutionConfig $r14, $r20;
        org.apache.flink.api.common.TaskInfo $r15;
        java.util.HashMap $r16, $r17;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r18;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r19;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r5 = new org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction;

        specialinvoke $r5.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: void <init>(org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$1)>(null);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction joiner> = $r5;

        $r6 = new org.apache.flink.api.common.operators.base.OuterJoinOperatorBase;

        $r11 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction joiner>;

        $r7 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r7.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, $r9, $r8);

        $r13 = newarray (int)[0];

        $r12 = newarray (int)[0];

        specialinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void <init>(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String,org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r11, $r7, $r13, $r12, "TestJoiner", null);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator> = $r6;

        $r14 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r14.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig> = $r14;

        $r15 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r15.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("Test rich outer join function", 1, 0, 1, 0);

        $r16 = new java.util.HashMap;

        specialinvoke $r16.<java.util.HashMap: void <init>()>();

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        $r18 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r20 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        $r19 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r19.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r18.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r15, null, $r20, $r17, $r16, $r19);

        r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.functions.RuntimeContext runtimeContext> = $r18;

        return;
    }

    public void testFullOuterJoinWithoutMatchingPartners() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "oof";

        $r5[1] = "rab";

        $r5[2] = "raboof";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[6];

        $r8[0] = "bar,null";

        $r8[1] = "foo,null";

        $r8[2] = "foobar,null";

        $r8[3] = "null,oof";

        $r8[4] = "null,rab";

        $r8[5] = "null,raboof";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testFullOuterJoinWithFullMatchingKeys() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "bar";

        $r5[1] = "foobar";

        $r5[2] = "foo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "bar,bar";

        $r8[1] = "foo,foo";

        $r8[2] = "foobar,foobar";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testFullOuterJoinWithEmptyLeftInput() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r7;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r6 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r5 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r5);

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "null,bar";

        $r7[1] = "null,foo";

        $r7[2] = "null,foobar";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testFullOuterJoinWithEmptyRightInput() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r7;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r6 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r5 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r5);

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "bar,null";

        $r7[1] = "foo,null";

        $r7[2] = "foobar,null";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testFullOuterJoinWithPartialMatchingKeys() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "bar";

        $r5[1] = "foo";

        $r5[2] = "barfoo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[4];

        $r8[0] = "bar,bar";

        $r8[1] = "null,barfoo";

        $r8[2] = "foo,foo";

        $r8[3] = "foobar,null";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testFullOuterJoinBuildingCorrectCrossProducts() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = "foo";

        $r4[1] = "foo";

        $r4[2] = "foo";

        $r4[3] = "bar";

        $r4[4] = "bar";

        $r4[5] = "foobar";

        $r4[6] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[7];

        $r5[0] = "foo";

        $r5[1] = "foo";

        $r5[2] = "bar";

        $r5[3] = "bar";

        $r5[4] = "bar";

        $r5[5] = "barfoo";

        $r5[6] = "barfoo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType FULL>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[16];

        $r8[0] = "bar,bar";

        $r8[1] = "bar,bar";

        $r8[2] = "bar,bar";

        $r8[3] = "bar,bar";

        $r8[4] = "bar,bar";

        $r8[5] = "bar,bar";

        $r8[6] = "null,barfoo";

        $r8[7] = "null,barfoo";

        $r8[8] = "foo,foo";

        $r8[9] = "foo,foo";

        $r8[10] = "foo,foo";

        $r8[11] = "foo,foo";

        $r8[12] = "foo,foo";

        $r8[13] = "foo,foo";

        $r8[14] = "foobar,null";

        $r8[15] = "foobar,null";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testLeftOuterJoin() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = "foo";

        $r4[1] = "foo";

        $r4[2] = "foo";

        $r4[3] = "bar";

        $r4[4] = "bar";

        $r4[5] = "foobar";

        $r4[6] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[7];

        $r5[0] = "foo";

        $r5[1] = "foo";

        $r5[2] = "bar";

        $r5[3] = "bar";

        $r5[4] = "bar";

        $r5[5] = "barfoo";

        $r5[6] = "barfoo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType LEFT>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[14];

        $r8[0] = "bar,bar";

        $r8[1] = "bar,bar";

        $r8[2] = "bar,bar";

        $r8[3] = "bar,bar";

        $r8[4] = "bar,bar";

        $r8[5] = "bar,bar";

        $r8[6] = "foo,foo";

        $r8[7] = "foo,foo";

        $r8[8] = "foo,foo";

        $r8[9] = "foo,foo";

        $r8[10] = "foo,foo";

        $r8[11] = "foo,foo";

        $r8[12] = "foobar,null";

        $r8[13] = "foobar,null";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testRightOuterJoin() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3;
        java.lang.String[] $r4, $r5, $r8;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType $r6;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[7];

        $r4[0] = "foo";

        $r4[1] = "foo";

        $r4[2] = "foo";

        $r4[3] = "bar";

        $r4[4] = "bar";

        $r4[5] = "foobar";

        $r4[6] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[7];

        $r5[0] = "foo";

        $r5[1] = "foo";

        $r5[2] = "bar";

        $r5[3] = "bar";

        $r5[4] = "bar";

        $r5[5] = "barfoo";

        $r5[6] = "barfoo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r6 = <org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType RIGHT>;

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>($r6);

        $r8 = newarray (java.lang.String)[14];

        $r8[0] = "bar,bar";

        $r8[1] = "bar,bar";

        $r8[2] = "bar,bar";

        $r8[3] = "bar,bar";

        $r8[4] = "bar,bar";

        $r8[5] = "bar,bar";

        $r8[6] = "null,barfoo";

        $r8[7] = "null,barfoo";

        $r8[8] = "foo,foo";

        $r8[9] = "foo,foo";

        $r8[10] = "foo,foo";

        $r8[11] = "foo,foo";

        $r8[12] = "foo,foo";

        $r8[13] = "foo,foo";

        r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testOuterJoin(java.util.List,java.util.List,java.util.List)>(r1, r2, r3);

        return;
    }

    public void testThatExceptionIsThrownForOuterJoinTypeNull() throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2;
        java.lang.String[] $r4, $r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r6, $r10;
        org.apache.flink.api.common.ExecutionConfig $r7;
        org.apache.flink.api.common.functions.RuntimeContext $r9;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        $r4 = newarray (java.lang.String)[3];

        $r4[0] = "foo";

        $r4[1] = "bar";

        $r4[2] = "foobar";

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "bar";

        $r5[1] = "foobar";

        $r5[2] = "foo";

        r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r6 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: void setOuterJoinType(org.apache.flink.api.common.operators.base.OuterJoinOperatorBase$OuterJoinType)>(null);

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r10 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r9 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.functions.RuntimeContext runtimeContext>;

        virtualinvoke $r10.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(r1, r2, $r9, $r7);

        return;
    }

    private void testOuterJoin(java.util.List, java.util.List, java.util.List) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest r0;
        java.util.List r1, r2, r3, r4, r5;
        org.apache.flink.api.common.ExecutionConfig $r6, $r8, $r11, $r13;
        org.apache.flink.api.common.functions.RuntimeContext $r9, $r14;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBase $r10, $r15;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction $r16, $r18;
        java.util.concurrent.atomic.AtomicBoolean $r17, $r19;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        $r6 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r10 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r9 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.functions.RuntimeContext runtimeContext>;

        $r8 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        r4 = virtualinvoke $r10.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(r1, r2, $r9, $r8);

        $r11 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        virtualinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        $r15 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBase baseOperator>;

        $r14 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.functions.RuntimeContext runtimeContext>;

        $r13 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.ExecutionConfig executionConfig>;

        r5 = virtualinvoke $r15.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>(r1, r2, $r14, $r13);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r5);

        $r16 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction joiner>;

        $r17 = $r16.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean opened>;

        $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r18 = r0.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction joiner>;

        $r19 = $r18.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest$MockRichFlatJoinFunction: java.util.concurrent.atomic.AtomicBoolean closed>;

        $z1 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }
}
