public class org.apache.flink.api.java.typeutils.runtime.NullableSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private final org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer;
    private final byte[] padding;

    private void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        boolean z0;
        int $i0;
        byte[] $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] createPadding(int,boolean)>($i0, z0);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,byte[])>(r1, $r2);

        return;
    }

    private void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, byte[])
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        byte[] r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: byte[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding> = r2;

        return;
    }

    private static byte[] createPadding(int, boolean)
    {
        int i0;
        boolean z0, $z2;
        byte[] $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 <= 0 goto label1;

        if z0 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if $z2 == 0 goto label3;

        $r0 = newarray (byte)[i0];

        goto label4;

     label3:
        $r0 = <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] EMPTY_BYTE_ARRAY>;

     label4:
        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer wrapIfNullIsNotSupported(org.apache.flink.api.common.typeutils.TypeSerializer, boolean)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0, $r1;
        boolean z0, $z1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean checkIfNullSupported(org.apache.flink.api.common.typeutils.TypeSerializer)>(r0);

        if $z1 == 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer wrap(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>(r0, z0);

     label2:
        return $r1;
    }

    public static boolean checkIfNullSupported(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        int $i1, $i2, $i3, $i4, $i5;
        org.apache.flink.core.memory.DataOutputSerializer $r3;
        org.apache.flink.core.memory.DataInputDeserializer $r4;
        byte[] $r5, $r11;
        java.lang.Object $r6, $r7;
        java.lang.Object[] $r8, $r15;
        java.lang.Class $r9, $r16;
        java.lang.String $r10, $r17, $r18;
        java.lang.Exception $r12;
        java.io.IOException $r13;
        java.lang.RuntimeException $r14;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        if $i1 <= 0 goto label01;

        $i5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        goto label02;

     label01:
        $i5 = 1;

     label02:
        $r3 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r3.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>($i5);

     label03:
        virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(null, $r3);

     label04:
        goto label06;

     label05:
        $r12 := @caughtexception;

        return 0;

     label06:
        $i2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        if $i2 < 0 goto label07;

        $i3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        $r11 = virtualinvoke $r3.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        $i4 = lengthof $r11;

        if $i3 != $i4 goto label08;

     label07:
        $z0 = 1;

        goto label09;

     label08:
        $z0 = 0;

     label09:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The serialized form of the null value should have the same length as any other if the length is fixed in the serializer");

        $r4 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r5 = virtualinvoke $r3.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getSharedBuffer()>();

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>($r5);

     label10:
        $r6 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r4);

        if $r6 != null goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r15[0] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected failure to deserialize just serialized null value with %s", $r15);

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r18, $r13);

        throw $r14;

     label15:
        $r7 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(null);

        if $r7 != null goto label16;

        $z2 = 1;

        goto label17;

     label16:
        $z2 = 0;

     label17:
        $r8 = newarray (java.lang.Object)[1];

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r8[0] = $r10;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z2, "Serializer %s has to be able properly copy null value if it can serialize it", $r8);

        return 1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label05;
        catch java.io.IOException from label10 to label13 with label14;
    }

    private boolean padNullValue()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        byte[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int nullPaddingLength()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        $i0 = lengthof $r1;

        return $i0;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer wrap(org.apache.flink.api.common.typeutils.TypeSerializer, boolean)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0, $r1;
        boolean z0, $z1;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r2;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        z0 := @parameter1: boolean;

        $z1 = r0 instanceof org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        if $z1 == 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        r2 = new org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r2;

        specialinvoke r2.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>(r0, z0);

     label2:
        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean isImmutableType()>();

        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        if r1 != $r3 goto label1;

        $r6 = r0;

        goto label2;

     label1:
        $r6 = new org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean padNullValue()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,boolean)>($r5, $z0);

     label2:
        return $r6;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r2 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object createInstance()>();

        return $r2;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        java.lang.Object r1, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

     label2:
        return $r3;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        java.lang.Object r1, r2, $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r5 = null;

        goto label3;

     label1:
        if r2 != null goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object,java.lang.Object)>(r1, r2);

     label3:
        return $r5;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        boolean $z0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean padNullValue()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        $i0 = lengthof $r1;

        $i1 = 1 + $i0;

        goto label2;

     label1:
        $i1 = -1;

     label2:
        return $i1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        byte[] $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>($r4);

        goto label2;

     label1:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        return;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean deserializeNull(org.apache.flink.core.memory.DataInputView)>(r1);

        if z0 == 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label2:
        return $r3;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        java.lang.Object r1, $r5;
        org.apache.flink.core.memory.DataInputView r2;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean deserializeNull(org.apache.flink.core.memory.DataInputView)>(r2);

        if z0 == 0 goto label1;

        $r5 = null;

        goto label3;

     label1:
        if r1 != null goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        goto label3;

     label2:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>(r1, r2);

     label3:
        return $r5;
    }

    private boolean deserializeNull(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        boolean z0;
        byte[] $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        $i0 = lengthof $r2;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void skipBytesToRead(int)>($i0);

     label1:
        return z0;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        byte[] $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        z0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: boolean deserializeNull(org.apache.flink.core.memory.DataInputView)>(r1);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(z0);

        if z0 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] padding>;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>($r4);

        goto label2;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0, $r4;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $r4 = (org.apache.flink.api.java.typeutils.runtime.NullableSerializer) r1;

        $r5 = $r4.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $z0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        return $i0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer$NullableSerializerSnapshot: void <init>(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)>(r0);

        return $r1;
    }

    static int access$000(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $i0 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: int nullPaddingLength()>();

        return $i0;
    }

    static org.apache.flink.api.common.typeutils.TypeSerializer access$200(org.apache.flink.api.java.typeutils.runtime.NullableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        $r1 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: org.apache.flink.api.common.typeutils.TypeSerializer originalSerializer()>();

        return $r1;
    }

    static byte[] access$300()
    {
        byte[] $r0;

        $r0 = <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] EMPTY_BYTE_ARRAY>;

        return $r0;
    }

    void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, byte[], org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1)
    {
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        byte[] r2;
        org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1 r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullableSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: byte[];

        r3 := @parameter2: org.apache.flink.api.java.typeutils.runtime.NullableSerializer$1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.NullableSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,byte[])>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: long serialVersionUID> = 3335569358214720033L;

        $r0 = newarray (byte)[0];

        <org.apache.flink.api.java.typeutils.runtime.NullableSerializer: byte[] EMPTY_BYTE_ARRAY> = $r0;

        return;
    }
}
