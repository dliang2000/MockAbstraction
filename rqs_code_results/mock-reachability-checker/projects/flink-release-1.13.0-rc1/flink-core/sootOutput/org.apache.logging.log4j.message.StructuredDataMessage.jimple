public class org.apache.logging.log4j.message.StructuredDataMessage extends org.apache.logging.log4j.message.MapMessage
{
    private static final long serialVersionUID;
    private static final int MAX_LENGTH;
    private static final int HASHVAL;
    private org.apache.logging.log4j.message.StructuredDataId id;
    private java.lang.String message;
    private java.lang.String type;
    private final int maxLength;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>(r1, r2, r3, 32);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, int)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, r2, r3;
        int i0;
        org.apache.logging.log4j.message.StructuredDataId $r4;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>()>();

        $r4 = new org.apache.logging.log4j.message.StructuredDataId;

        specialinvoke $r4.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[],int)>(r1, null, null, i0);

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = $r4;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = r3;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = i0;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.util.Map)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, r2, r3;
        java.util.Map r4;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void <init>(java.lang.String,java.lang.String,java.lang.String,java.util.Map,int)>(r1, r2, r3, r4, 32);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.util.Map, int)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, r2, r3;
        java.util.Map r4;
        int i0;
        org.apache.logging.log4j.message.StructuredDataId $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        i0 := @parameter4: int;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>(java.util.Map)>(r4);

        $r5 = new org.apache.logging.log4j.message.StructuredDataId;

        specialinvoke $r5.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[],int)>(r1, null, null, i0);

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = $r5;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = r3;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = i0;

        return;
    }

    public void <init>(org.apache.logging.log4j.message.StructuredDataId, java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;
        java.lang.String r2, r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void <init>(org.apache.logging.log4j.message.StructuredDataId,java.lang.String,java.lang.String,int)>(r1, r2, r3, 32);

        return;
    }

    public void <init>(org.apache.logging.log4j.message.StructuredDataId, java.lang.String, java.lang.String, int)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;
        java.lang.String r2, r3;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>()>();

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = r1;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = r3;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = i0;

        return;
    }

    public void <init>(org.apache.logging.log4j.message.StructuredDataId, java.lang.String, java.lang.String, java.util.Map)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;
        java.lang.String r2, r3;
        java.util.Map r4;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void <init>(org.apache.logging.log4j.message.StructuredDataId,java.lang.String,java.lang.String,java.util.Map,int)>(r1, r2, r3, r4, 32);

        return;
    }

    public void <init>(org.apache.logging.log4j.message.StructuredDataId, java.lang.String, java.lang.String, java.util.Map, int)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;
        java.lang.String r2, r3;
        java.util.Map r4;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.Map;

        i0 := @parameter4: int;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>(java.util.Map)>(r4);

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = r1;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = r2;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = r3;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = i0;

        return;
    }

    private void <init>(org.apache.logging.log4j.message.StructuredDataMessage, java.util.Map)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0, r1;
        java.util.Map r2;
        org.apache.logging.log4j.message.StructuredDataId $r3;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataMessage;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>(java.util.Map)>(r2);

        $r3 = r1.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = $r3;

        $r4 = r1.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = $r4;

        $r5 = r1.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = $r5;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = 32;

        return;
    }

    protected void <init>()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void <init>()>();

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength> = 32;

        return;
    }

    public java.lang.String[] getFormats()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String[] r1;
        org.apache.logging.log4j.message.StructuredDataMessage$Format[] r2, $r4;
        int i0, $i1, $i2, i3, i4;
        org.apache.logging.log4j.message.StructuredDataMessage$Format r3;
        java.lang.String $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r4 = staticinvoke <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format[] values()>();

        $i1 = lengthof $r4;

        r1 = newarray (java.lang.String)[$i1];

        i3 = 0;

        r2 = staticinvoke <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format[] values()>();

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r3 = r2[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r5 = virtualinvoke r3.<org.apache.logging.log4j.message.StructuredDataMessage$Format: java.lang.String name()>();

        r1[$i2] = $r5;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.logging.log4j.message.StructuredDataId getId()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        return $r1;
    }

    protected void setId(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        org.apache.logging.log4j.message.StructuredDataId $r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.logging.log4j.message.StructuredDataId;

        specialinvoke $r2.<org.apache.logging.log4j.message.StructuredDataId: void <init>(java.lang.String,java.lang.String[],java.lang.String[])>(r1, null, null);

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = $r2;

        return;
    }

    protected void setId(org.apache.logging.log4j.message.StructuredDataId)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id> = r1;

        return;
    }

    public java.lang.String getType()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        return $r1;
    }

    protected void setType(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, $r6;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 32 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("structured data type exceeds maximum length of 32 characters: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type> = r1;

        return;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.StringBuilder r1;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId,java.lang.StringBuilder)>($r2, null, r1);

        return;
    }

    public void formatTo(java.lang.String[], java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String[] r1;
        java.lang.StringBuilder r2;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.StringBuilder;

        $r3 = specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataMessage$Format getFormat(java.lang.String[])>(r1);

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId,java.lang.StringBuilder)>($r3, null, r2);

        return;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        return $r1;
    }

    protected void setMessageFormat(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message> = r1;

        return;
    }

    public java.lang.String asString()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        $r2 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId)>($r1, null);

        return $r2;
    }

    public java.lang.String asString(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, $r5, $r7;
        java.lang.Enum $r3;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.EnglishEnums: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/logging/log4j/message/StructuredDataMessage$Format;", r1);

        $r4 = (org.apache.logging.log4j.message.StructuredDataMessage$Format) $r3;

        $r5 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId)>($r4, null);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString()>();

        return $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public final java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format, org.apache.logging.log4j.message.StructuredDataId)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataMessage$Format r1;
        org.apache.logging.log4j.message.StructuredDataId r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataMessage$Format;

        r2 := @parameter1: org.apache.logging.log4j.message.StructuredDataId;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId,java.lang.StringBuilder)>(r1, r2, $r4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public final void asString(org.apache.logging.log4j.message.StructuredDataMessage$Format, org.apache.logging.log4j.message.StructuredDataId, java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataMessage$Format r1, $r5, $r7;
        org.apache.logging.log4j.message.StructuredDataId r2, r17, r18;
        java.lang.StringBuilder r3, $r11, $r14;
        boolean z0, $z1;
        java.lang.String r4, $r6, $r13, r16;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataMessage$Format;

        r2 := @parameter1: org.apache.logging.log4j.message.StructuredDataId;

        r3 := @parameter2: java.lang.StringBuilder;

        $r5 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        z0 = virtualinvoke $r5.<org.apache.logging.log4j.message.StructuredDataMessage$Format: boolean equals(java.lang.Object)>(r1);

        if z0 == 0 goto label2;

        r16 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String getType()>();

        if r16 != null goto label1;

        return;

     label1:
        $r13 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String getType()>();

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        r17 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId getId()>();

        if r17 == null goto label3;

        r18 = virtualinvoke r17.<org.apache.logging.log4j.message.StructuredDataId: org.apache.logging.log4j.message.StructuredDataId makeId(org.apache.logging.log4j.message.StructuredDataId)>(r2);

        goto label4;

     label3:
        r18 = r2;

     label4:
        if r18 == null goto label5;

        $r6 = virtualinvoke r18.<org.apache.logging.log4j.message.StructuredDataId: java.lang.String getName()>();

        if $r6 != null goto label6;

     label5:
        return;

     label6:
        $r7 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format XML>;

        $z1 = virtualinvoke $r7.<org.apache.logging.log4j.message.StructuredDataMessage$Format: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label7;

        specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void asXml(org.apache.logging.log4j.message.StructuredDataId,java.lang.StringBuilder)>(r18, r3);

        return;

     label7:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void appendValue(java.lang.StringBuilder,java.lang.Object)>(r3, r18);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void appendMap(java.lang.StringBuilder)>(r3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        if z0 == 0 goto label8;

        r4 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String getFormat()>();

        if r4 == null goto label8;

        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label8:
        return;
    }

    private void asXml(org.apache.logging.log4j.message.StructuredDataId, java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataId r1;
        java.lang.StringBuilder r2, $r4, $r6, $r8, $r9;
        java.lang.String $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.StructuredDataId;

        r2 := @parameter1: java.lang.StringBuilder;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<StructuredData>\n");

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<type>");

        $r5 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</type>\n");

        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<id>");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</id>\n");

        specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: void asXml(java.lang.StringBuilder)>(r2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n</StructuredData>\n");

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        $r2 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId)>($r1, null);

        return $r2;
    }

    public java.lang.String getFormattedMessage(java.lang.String[])
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String[] r1;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String[];

        $r2 = specialinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataMessage$Format getFormat(java.lang.String[])>(r1);

        $r3 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId)>($r2, null);

        return $r3;
    }

    private org.apache.logging.log4j.message.StructuredDataMessage$Format getFormat(java.lang.String[])
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String[] r1;
        java.lang.String r2, $r5, $r7;
        org.apache.logging.log4j.message.StructuredDataMessage$Format $r3, $r4, $r6, $r8, $r9;
        int $i0, $i1, i2;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label5;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label5;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        r2 = r1[i2];

        $r4 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format XML>;

        $r5 = virtualinvoke $r4.<org.apache.logging.log4j.message.StructuredDataMessage$Format: java.lang.String name()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        $r9 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format XML>;

        return $r9;

     label2:
        $r6 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        $r7 = virtualinvoke $r6.<org.apache.logging.log4j.message.StructuredDataMessage$Format: java.lang.String name()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label3;

        $r8 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        return $r8;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return null;

     label5:
        $r3 = <org.apache.logging.log4j.message.StructuredDataMessage$Format: org.apache.logging.log4j.message.StructuredDataMessage$Format FULL>;

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String asString(org.apache.logging.log4j.message.StructuredDataMessage$Format,org.apache.logging.log4j.message.StructuredDataId)>(null, null);

        return $r1;
    }

    public org.apache.logging.log4j.message.StructuredDataMessage newInstance(java.util.Map)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0, $r2;
        java.util.Map r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.util.Map;

        $r2 = new org.apache.logging.log4j.message.StructuredDataMessage;

        specialinvoke $r2.<org.apache.logging.log4j.message.StructuredDataMessage: void <init>(org.apache.logging.log4j.message.StructuredDataMessage,java.util.Map)>(r0, r1);

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r6, $r9, $r10, $r11, $r12, $r15, $r16;
        org.apache.logging.log4j.message.StructuredDataId $r7, $r8, $r13, $r14;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 == null goto label02;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label03;

     label02:
        return 0;

     label03:
        r2 = (org.apache.logging.log4j.message.StructuredDataMessage) r1;

        $z0 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        $r5 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        if $r5 == null goto label05;

        $r16 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        $r15 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 != 0 goto label07;

        goto label06;

     label05:
        $r6 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        if $r6 == null goto label07;

     label06:
        return 0;

     label07:
        $r7 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        if $r7 == null goto label08;

        $r14 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        $r13 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        $z2 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z2 != 0 goto label10;

        goto label09;

     label08:
        $r8 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        if $r8 == null goto label10;

     label09:
        return 0;

     label10:
        $r9 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        if $r9 == null goto label11;

        $r12 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        $r11 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label13;

        goto label12;

     label11:
        $r10 = r2.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        if $r10 == null goto label13;

     label12:
        return 0;

     label13:
        return 1;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String $r1, $r3, $r4, $r6;
        int $i0, $i1, $i2, i3, $i4, i5, $i6, i7, $i8, i9;
        org.apache.logging.log4j.message.StructuredDataId $r2, $r5;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        i3 = specialinvoke r0.<org.apache.logging.log4j.message.MapMessage: int hashCode()>();

        $i0 = 31 * i3;

        $r1 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String type>;

        $i4 = virtualinvoke $r6.<java.lang.String: int hashCode()>();

        goto label2;

     label1:
        $i4 = 0;

     label2:
        i5 = $i0 + $i4;

        $i1 = 31 * i5;

        $r2 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        if $r2 == null goto label3;

        $r5 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataId id>;

        $i6 = virtualinvoke $r5.<java.lang.Object: int hashCode()>();

        goto label4;

     label3:
        $i6 = 0;

     label4:
        i7 = $i1 + $i6;

        $i2 = 31 * i7;

        $r3 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        if $r3 == null goto label5;

        $r4 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: java.lang.String message>;

        $i8 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        goto label6;

     label5:
        $i8 = 0;

     label6:
        i9 = $i2 + $i8;

        return i9;
    }

    protected void validate(java.lang.String, boolean)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, byte)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        byte b0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, char)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        char c0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, double)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        double d0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, float)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        float f0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, int)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, long)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        long l0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, java.lang.Object)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, short)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1;
        short s0;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validate(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: void validateKey(java.lang.String)>(r1);

        return;
    }

    protected void validateKey(java.lang.String)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0;
        java.lang.String r1, $r8;
        char c0;
        int $i1, $i2, $i3, $i4, i5, $i6;
        java.lang.IllegalArgumentException $r2, $r9;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.lang.String;

        $i1 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength>;

        if $i1 <= 0 goto label1;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength>;

        if $i2 <= $i3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Structured data keys are limited to ");

        $i4 = r0.<org.apache.logging.log4j.message.StructuredDataMessage: int maxLength>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters. key: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label1:
        i5 = 0;

     label2:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 >= $i6 goto label5;

        c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if c0 < 33 goto label3;

        if c0 > 126 goto label3;

        if c0 == 61 goto label3;

        if c0 == 93 goto label3;

        if c0 != 34 goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Structured data keys must contain printable US ASCII charactersand may not contain a space, =, ], or \"");

        throw $r9;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return;
    }

    public volatile org.apache.logging.log4j.message.MapMessage newInstance(java.util.Map)
    {
        org.apache.logging.log4j.message.StructuredDataMessage r0, $r2;
        java.util.Map r1;

        r0 := @this: org.apache.logging.log4j.message.StructuredDataMessage;

        r1 := @parameter0: java.util.Map;

        $r2 = virtualinvoke r0.<org.apache.logging.log4j.message.StructuredDataMessage: org.apache.logging.log4j.message.StructuredDataMessage newInstance(java.util.Map)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.message.StructuredDataMessage: int HASHVAL> = 31;

        <org.apache.logging.log4j.message.StructuredDataMessage: int MAX_LENGTH> = 32;

        <org.apache.logging.log4j.message.StructuredDataMessage: long serialVersionUID> = 1703221292892071920L;

        return;
    }
}
