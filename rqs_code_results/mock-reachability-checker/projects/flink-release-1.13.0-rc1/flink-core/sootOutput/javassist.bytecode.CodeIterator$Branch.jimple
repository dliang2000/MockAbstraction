abstract class javassist.bytecode.CodeIterator$Branch extends java.lang.Object
{
    int pos;
    int orgPos;

    void <init>(int)
    {
        javassist.bytecode.CodeIterator$Branch r0;
        int i0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.CodeIterator$Branch: int orgPos> = i0;

        r0.<javassist.bytecode.CodeIterator$Branch: int pos> = i0;

        return;
    }

    void shift(int, int, boolean)
    {
        javassist.bytecode.CodeIterator$Branch r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i2 = r0.<javassist.bytecode.CodeIterator$Branch: int pos>;

        if i0 < $i2 goto label1;

        $i5 = r0.<javassist.bytecode.CodeIterator$Branch: int pos>;

        if i0 != $i5 goto label2;

        if z0 == 0 goto label2;

     label1:
        $i3 = r0.<javassist.bytecode.CodeIterator$Branch: int pos>;

        $i4 = $i3 + i1;

        r0.<javassist.bytecode.CodeIterator$Branch: int pos> = $i4;

     label2:
        return;
    }

    static int shiftOffset(int, int, int, int, boolean)
    {
        int i0, i1, i2, i3, i4;
        boolean z0;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        i3 = i0 + i4;

        if i0 >= i1 goto label2;

        if i1 < i3 goto label1;

        if z0 == 0 goto label6;

        if i1 != i3 goto label6;

     label1:
        i4 = i4 + i2;

        goto label6;

     label2:
        if i0 != i1 goto label4;

        if i3 >= i1 goto label3;

        if z0 == 0 goto label3;

        i4 = i4 - i2;

        goto label6;

     label3:
        if i1 >= i3 goto label6;

        if z0 != 0 goto label6;

        i4 = i4 + i2;

        goto label6;

     label4:
        if i3 < i1 goto label5;

        if z0 != 0 goto label6;

        if i1 != i3 goto label6;

     label5:
        i4 = i4 - i2;

     label6:
        return i4;
    }

    boolean expanded()
    {
        javassist.bytecode.CodeIterator$Branch r0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch;

        return 0;
    }

    int gapChanged()
    {
        javassist.bytecode.CodeIterator$Branch r0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch;

        return 0;
    }

    int deltaSize()
    {
        javassist.bytecode.CodeIterator$Branch r0;

        r0 := @this: javassist.bytecode.CodeIterator$Branch;

        return 0;
    }

    abstract int write(int, byte[], int, byte[]) throws javassist.bytecode.BadBytecode;
}
