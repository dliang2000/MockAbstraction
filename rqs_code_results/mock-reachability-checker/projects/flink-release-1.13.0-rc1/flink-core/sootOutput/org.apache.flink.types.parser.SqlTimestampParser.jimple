public class org.apache.flink.types.parser.SqlTimestampParser extends org.apache.flink.types.parser.FieldParser
{
    private static final java.sql.Timestamp TIMESTAMP_INSTANCE;
    private java.sql.Timestamp result;

    public void <init>()
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], java.sql.Timestamp)
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i6, $i8;
        java.sql.Timestamp r3, $r8;
        java.lang.String $r6;
        java.nio.charset.Charset $r7;
        byte $b5, $b7;
        boolean $z0, $z1;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r9, $r11;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.sql.Timestamp;

        i2 = virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: int nextStringEndPos(byte[],int,int,byte[])>(r1, i0, i1, r2);

        if i2 >= 0 goto label1;

        return -1;

     label1:
        if i2 <= i0 goto label3;

        $b5 = r1[i0];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b5);

        if $z0 != 0 goto label2;

        $i6 = i2 - 1;

        $b7 = r1[$i6];

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b7);

        if $z1 == 0 goto label3;

     label2:
        $r9 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r9);

        return -1;

     label3:
        $r6 = new java.lang.String;

        $i3 = i2 - i0;

        $r7 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r6.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r1, i0, $i3, $r7);

     label4:
        $r8 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r6);

        r0.<org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp result> = $r8;

        if i2 != i1 goto label5;

        $i8 = i1;

        goto label6;

     label5:
        $i4 = lengthof r2;

        $i8 = i2 + $i4;

     label6:
        return $i8;

     label7:
        $r10 := @caughtexception;

        $r11 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR>;

        virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r11);

        return -1;

        catch java.lang.IllegalArgumentException from label4 to label6 with label7;
    }

    public java.sql.Timestamp createValue()
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        java.sql.Timestamp $r1;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        $r1 = <org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp TIMESTAMP_INSTANCE>;

        return $r1;
    }

    public java.sql.Timestamp getLastResult()
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        java.sql.Timestamp $r1;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        $r1 = r0.<org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp result>;

        return $r1;
    }

    public static final java.sql.Timestamp parseField(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.sql.Timestamp $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp parseField(byte[],int,int,char)>(r0, i0, i1, 65535);

        return $r1;
    }

    public static final java.sql.Timestamp parseField(byte[], int, int, char)
    {
        byte[] r0;
        int i0, i1, i3, $i5, $i6;
        char c2;
        java.lang.String $r2;
        java.nio.charset.Charset $r3;
        java.sql.Timestamp $r4;
        byte $b4, $b7;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        i3 = staticinvoke <org.apache.flink.types.parser.SqlTimestampParser: int nextStringLength(byte[],int,int,char)>(r0, i0, i1, c2);

        if i3 <= 0 goto label2;

        $b4 = r0[i0];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b4);

        if $z0 != 0 goto label1;

        $i5 = i0 + i3;

        $i6 = $i5 - 1;

        $b7 = r0[$i6];

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b7);

        if $z1 == 0 goto label2;

     label1:
        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("There is leading or trailing whitespace in the numeric field.");

        throw $r5;

     label2:
        $r2 = new java.lang.String;

        $r3 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r0, i0, i3, $r3);

        $r4 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r2);

        return $r4;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        java.sql.Timestamp $r1;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        java.sql.Timestamp $r1;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.SqlTimestampParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.sql.Timestamp $r4;

        r0 := @this: org.apache.flink.types.parser.SqlTimestampParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (java.sql.Timestamp) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.SqlTimestampParser: int parseField(byte[],int,int,byte[],java.sql.Timestamp)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    static void <clinit>()
    {
        java.sql.Timestamp $r0;

        $r0 = new java.sql.Timestamp;

        specialinvoke $r0.<java.sql.Timestamp: void <init>(long)>(0L);

        <org.apache.flink.types.parser.SqlTimestampParser: java.sql.Timestamp TIMESTAMP_INSTANCE> = $r0;

        return;
    }
}
