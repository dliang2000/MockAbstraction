public final class org.apache.logging.log4j.util.Strings extends java.lang.Object
{
    public static final java.lang.String EMPTY;
    public static final java.lang.String LINE_SEPARATOR;

    public static java.lang.String dquote(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static boolean isBlank(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public static boolean isNotBlank(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.logging.log4j.util.Strings: boolean isBlank(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean isNotEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <org.apache.logging.log4j.util.Strings: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static java.lang.String join(java.lang.Iterable, char)
    {
        java.lang.Iterable r0;
        char c0;
        java.util.Iterator $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Iterable;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r2 = staticinvoke <org.apache.logging.log4j.util.Strings: java.lang.String join(java.util.Iterator,char)>($r1, c0);

        return $r2;
    }

    public static java.lang.String join(java.util.Iterator, char)
    {
        java.util.Iterator r0;
        char c0;
        java.lang.Object r1, r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r9;

        r0 := @parameter0: java.util.Iterator;

        c0 := @parameter1: char;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return "";

     label2:
        r1 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r9 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(r1, "");

        return $r9;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(256);

        if r1 == null goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

     label4:
        $z2 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        r3 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        if r3 == null goto label5;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

     label5:
        goto label4;

     label6:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String left(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return null;

     label1:
        if i0 >= 0 goto label2;

        return "";

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 > i0 goto label3;

        return r0;

     label3:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r1;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String trimToNull(java.lang.String)
    {
        java.lang.String r0, $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

     label2:
        $z0 = staticinvoke <org.apache.logging.log4j.util.Strings: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label3;

        $r3 = null;

        goto label4;

     label3:
        $r3 = $r2;

     label4:
        return $r3;
    }

    private void <init>()
    {
        org.apache.logging.log4j.util.Strings r0;

        r0 := @this: org.apache.logging.log4j.util.Strings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toRootUpperCase(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Locale $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PropertiesUtil $r0;
        java.lang.String $r1;

        <org.apache.logging.log4j.util.Strings: java.lang.String EMPTY> = "";

        $r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        $r1 = virtualinvoke $r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String,java.lang.String)>("line.separator", "\n");

        <org.apache.logging.log4j.util.Strings: java.lang.String LINE_SEPARATOR> = $r1;

        return;
    }
}
