public class org.apache.flink.api.common.state.StateDescriptorTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testInitializeWithSerializer() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.typeutils.base.StringSerializer r1;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6, $r8, $r9, $r11, $r12;
        org.apache.flink.api.common.ExecutionConfig $r7;
        java.io.Serializable $r10;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        r1 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r4 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("test", r1);

        $z0 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r5 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z1 = $r6 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r7);

        $z2 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z3 = $r9 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r4);

        r3 = (org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor) $r10;

        $z4 = virtualinvoke r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r11);

        $r12 = virtualinvoke r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z5 = $r12 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z5);

        return;
    }

    public void testInitializeSerializerBeforeSerialization() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor $r2, r12;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.common.ExecutionConfig $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6, $r8, $r9;
        java.io.Serializable $r7;
        java.lang.IllegalStateException $r10;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r2 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("test", class "Ljava/lang/String;");

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label1:
        virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        $r4 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r4.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r4);

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r5 = virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r2.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z2 = $r6 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r7 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r2);

        r12 = (org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor) $r7;

        $z3 = virtualinvoke r12.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        $r8 = virtualinvoke r12.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        $r9 = virtualinvoke r12.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z4 = $r9 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z4);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void testInitializeSerializerAfterSerialization() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor $r3, r13;
        boolean $z0, $z1, $z2, $z3;
        java.io.Serializable $r5;
        org.apache.flink.api.common.ExecutionConfig $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer $r8, $r9;
        java.lang.IllegalStateException $r10, $r11;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r3 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("test", class "Ljava/lang/String;");

        $z0 = virtualinvoke $r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

     label1:
        virtualinvoke $r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        $r5 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r3);

        r13 = (org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor) $r5;

        $z1 = virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

     label5:
        virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an exception");

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

     label8:
        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r7);

        $z2 = virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: boolean isSerializerInitialized()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r8 = virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r8);

        $r9 = virtualinvoke r13.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $z3 = $r9 instanceof org.apache.flink.api.common.typeutils.base.StringSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label5 to label6 with label7;
    }

    public void testInitializeSerializerAfterSerializationWithCustomConfig() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor r3, $r9;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r4, $r12;
        org.apache.flink.api.common.ExecutionConfig $r5, $r8;
        com.esotericsoftware.kryo.Kryo $r6, $r13;
        com.esotericsoftware.kryo.Registration $r7, $r14;
        int $i0, $i2;
        long $l1;
        java.io.Serializable $r10;
        org.apache.flink.api.common.typeutils.TypeSerializer $r11;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r5 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r5.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r5);

        $r6 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r7 = virtualinvoke $r6.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Ljava/io/File;");

        $i0 = virtualinvoke $r7.<com.esotericsoftware.kryo.Registration: int getId()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>("broken test assumption", -1L, $l1);

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Ljava/io/File;");

        $r9 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r9.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("test", class "Lorg/apache/flink/core/fs/Path;");

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r9);

        r3 = (org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor) $r10;

        virtualinvoke r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r8);

        $r11 = virtualinvoke r3.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        $r12 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer) $r11;

        $r13 = virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r14 = virtualinvoke $r13.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Ljava/io/File;");

        $i2 = virtualinvoke $r14.<com.esotericsoftware.kryo.Registration: int getId()>();

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testSerializerDuplication() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r3, r4;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r5;
        org.apache.flink.api.common.ExecutionConfig $r6;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor $r7;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r6);

        $r7 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("foobar", $r5);

        r3 = virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        r4 = virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r3, r4);

        return;
    }

    public void testHashCodeAndEquals() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor r5, $r6, $r7, $r8;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r9;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.io.Serializable $r10;
        org.apache.flink.api.common.ExecutionConfig $r11, $r12;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r6 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r6.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r7 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r8 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        $r9 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r8.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("testName", $r9);

        $i0 = virtualinvoke $r6.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $i4 = virtualinvoke $r6.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: int hashCode()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke $r8.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: int hashCode()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r5 = (org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor) $r10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke r5.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r12 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;
    }

    public void testEqualsSameNameAndTypeDifferentClass() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor $r4;
        org.apache.flink.api.common.state.StateDescriptorTest$OtherTestStateDescriptor $r5;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r4 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        specialinvoke $r4.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("test name", class "Ljava/lang/String;");

        $r5 = new org.apache.flink.api.common.state.StateDescriptorTest$OtherTestStateDescriptor;

        specialinvoke $r5.<org.apache.flink.api.common.state.StateDescriptorTest$OtherTestStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("test name", class "Ljava/lang/String;");

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    public void testSerializerLazyInitializeInParallel() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.StateDescriptorTest r0;
        org.apache.flink.core.testutils.CheckedThread r6;
        org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor $r7;
        org.apache.flink.api.java.typeutils.PojoTypeInfo $r8;
        java.util.ArrayList $r9, $r10;
        org.apache.flink.api.common.ExecutionConfig $r11;
        java.util.concurrent.ConcurrentHashMap $r12;
        java.util.function.Consumer $r13;
        boolean $z0;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.String $r17;
        int $i1, i3;
        long $l2;
        java.lang.Object $r18;
        org.apache.flink.api.common.state.StateDescriptorTest$1 $r19;
        java.util.Iterator r20;

        r0 := @this: org.apache.flink.api.common.state.StateDescriptorTest;

        $r7 = new org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor;

        $r8 = new org.apache.flink.api.java.typeutils.PojoTypeInfo;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.PojoTypeInfo: void <init>(java.lang.Class,java.util.List)>(class "Ljava/lang/String;", $r9);

        specialinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("testSerializerLazyInitializeInParallel", $r8);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>(20);

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r12 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= 20 goto label2;

        $r19 = new org.apache.flink.api.common.state.StateDescriptorTest$1;

        specialinvoke $r19.<org.apache.flink.api.common.state.StateDescriptorTest$1: void <init>(org.apache.flink.api.common.state.StateDescriptorTest,org.apache.flink.api.common.state.StateDescriptorTest$TestStateDescriptor,org.apache.flink.api.common.ExecutionConfig,java.util.concurrent.ConcurrentHashMap)>(r0, $r7, $r11, $r12);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r13 = staticinvoke <org.apache.flink.api.common.state.StateDescriptorTest$start__90: java.util.function.Consumer bootstrap$()>();

        virtualinvoke $r10.<java.util.ArrayList: void forEach(java.util.function.Consumer)>($r13);

        r20 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.flink.core.testutils.CheckedThread) $r18;

        virtualinvoke r6.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        goto label3;

     label4:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should use only one serializer but actually: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>($r17, 1L, $l2);

        virtualinvoke $r10.<java.util.ArrayList: void clear()>();

        return;
    }
}
