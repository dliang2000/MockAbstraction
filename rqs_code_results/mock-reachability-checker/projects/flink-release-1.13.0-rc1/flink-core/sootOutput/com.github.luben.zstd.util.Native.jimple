public final enum class com.github.luben.zstd.util.Native extends java.lang.Enum
{
    private static final java.lang.String nativePathOverride;
    private static final java.lang.String libnameShort;
    private static final java.lang.String libname;
    private static final java.lang.String errorMsg;
    private static boolean loaded;
    private static final com.github.luben.zstd.util.Native[] $VALUES;

    public static com.github.luben.zstd.util.Native[] values()
    {
        com.github.luben.zstd.util.Native[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <com.github.luben.zstd.util.Native: com.github.luben.zstd.util.Native[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (com.github.luben.zstd.util.Native[]) $r1;

        return $r2;
    }

    public static com.github.luben.zstd.util.Native valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        com.github.luben.zstd.util.Native $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/github/luben/zstd/util/Native;", r0);

        $r2 = (com.github.luben.zstd.util.Native) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        com.github.luben.zstd.util.Native r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.github.luben.zstd.util.Native;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    private static java.lang.String osName()
    {
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        r0 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(32, 95);

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("win");

        if $z0 == 0 goto label1;

        return "win";

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("mac");

        if $z1 == 0 goto label2;

        return "darwin";

     label2:
        return r0;
    }

    private static java.lang.String osArch()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.arch");

        return $r0;
    }

    private static java.lang.String libExtension()
    {
        java.lang.String $r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String osName()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("os_x");

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String osName()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("darwin");

        if $z1 == 0 goto label2;

     label1:
        return "dylib";

     label2:
        $r2 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String osName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("win");

        if $z2 == 0 goto label3;

        return "dll";

     label3:
        return "so";
    }

    private static java.lang.String resourceName()
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r2, $r5, $r10, $r12;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r2 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String osName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String osArch()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("libzstd-jni");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String libExtension()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static synchronized boolean isLoaded()
    {
        boolean $z0;

        $z0 = <com.github.luben.zstd.util.Native: boolean loaded>;

        return $z0;
    }

    public static synchronized void load()
    {
        staticinvoke <com.github.luben.zstd.util.Native: void load(java.io.File)>(null);

        return;
    }

    public static synchronized void load(java.io.File)
    {
        java.io.File r0, r57;
        java.lang.String r1, r2, $r12, $r15, $r17, $r23, $r26, $r29, $r31, $r34, $r40, $r42, $r49, $r51;
        boolean $z0, $z1, $z3;
        java.io.IOException $r8, $r33, $r35, $r36;
        java.lang.UnsatisfiedLinkError $r9, $r10, $r20, $r21, $r44;
        java.lang.StringBuilder $r11, $r13, $r14, $r16, $r22, $r24, $r25, $r27, $r28, $r30, $r38, $r39, $r41, $r47, $r48, $r50;
        java.lang.StackTraceElement[] $r18, $r32, $r43;
        java.lang.Throwable $r19, $r45;
        java.lang.ExceptionInInitializerError $r37;
        java.lang.Class $r46;
        java.io.FileOutputStream $r52, r58;
        java.io.InputStream r54;
        byte[] r59;
        int i0;

        r0 := @parameter0: java.io.File;

        $z0 = <com.github.luben.zstd.util.Native: boolean loaded>;

        if $z0 == 0 goto label01;

        return;

     label01:
        r1 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String resourceName()>();

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ZstdNativePath");

        if r2 == null goto label02;

        staticinvoke <java.lang.System: void load(java.lang.String)>(r2);

     label02:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.osgi.framework.BundleEvent");

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("libzstd-jni");

        <com.github.luben.zstd.util.Native: boolean loaded> = 1;

     label03:
        return;

     label04:
        $r45 := @caughtexception;

        $r46 = class "Lcom/github/luben/zstd/util/Native;";

        r54 = virtualinvoke $r46.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        if r54 != null goto label08;

     label05:
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("zstd-jni");

        <com.github.luben.zstd.util.Native: boolean loaded> = 1;

     label06:
        return;

     label07:
        $r9 := @caughtexception;

        $r10 = new java.lang.UnsatisfiedLinkError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.UnsatisfiedLinkError: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r15 = <com.github.luben.zstd.util.Native: java.lang.String errorMsg>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke $r9.<java.lang.UnsatisfiedLinkError: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r10.<java.lang.UnsatisfiedLinkError: void setStackTrace(java.lang.StackTraceElement[])>($r18);

        throw $r10;

     label08:
        r57 = null;

        r58 = null;

     label09:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r49 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String libExtension()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        r57 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("libzstd-jni", $r51, r0);

        virtualinvoke r57.<java.io.File: void deleteOnExit()>();

        $r52 = new java.io.FileOutputStream;

        specialinvoke $r52.<java.io.FileOutputStream: void <init>(java.io.File)>(r57);

        r58 = $r52;

        r59 = newarray (byte)[4096];

     label10:
        i0 = virtualinvoke r54.<java.io.InputStream: int read(byte[])>(r59);

        if i0 != -1 goto label11;

        goto label12;

     label11:
        virtualinvoke $r52.<java.io.FileOutputStream: void write(byte[],int,int)>(r59, 0, i0);

        goto label10;

     label12:
        virtualinvoke $r52.<java.io.FileOutputStream: void flush()>();

        virtualinvoke $r52.<java.io.FileOutputStream: void close()>();

        r58 = null;

     label13:
        goto label15;

     label14:
        $r33 := @caughtexception;

     label15:
        $r34 = virtualinvoke r57.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <java.lang.System: void load(java.lang.String)>($r34);

     label16:
        goto label21;

     label17:
        $r44 := @caughtexception;

     label18:
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("zstd-jni");

     label19:
        goto label21;

     label20:
        $r20 := @caughtexception;

        $r21 = new java.lang.UnsatisfiedLinkError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r44.<java.lang.UnsatisfiedLinkError: java.lang.String getMessage()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r26 = virtualinvoke $r20.<java.lang.UnsatisfiedLinkError: java.lang.String getMessage()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r29 = <com.github.luben.zstd.util.Native: java.lang.String errorMsg>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>($r31);

        $r32 = virtualinvoke $r20.<java.lang.UnsatisfiedLinkError: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r21.<java.lang.UnsatisfiedLinkError: void setStackTrace(java.lang.StackTraceElement[])>($r32);

        throw $r21;

     label21:
        <com.github.luben.zstd.util.Native: boolean loaded> = 1;

     label22:
        virtualinvoke r54.<java.io.InputStream: void close()>();

        if r58 == null goto label23;

        virtualinvoke r58.<java.io.FileOutputStream: void close()>();

     label23:
        if r57 == null goto label24;

        $z3 = virtualinvoke r57.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label24;

        virtualinvoke r57.<java.io.File: boolean delete()>();

     label24:
        goto label33;

     label25:
        $r8 := @caughtexception;

        goto label33;

     label26:
        $r36 := @caughtexception;

        $r37 = new java.lang.ExceptionInInitializerError;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot unpack libzstd-jni: ");

        $r40 = virtualinvoke $r36.<java.io.IOException: java.lang.String getMessage()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>($r42);

        $r43 = virtualinvoke $r36.<java.io.IOException: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r37.<java.lang.ExceptionInInitializerError: void setStackTrace(java.lang.StackTraceElement[])>($r43);

        throw $r37;

     label27:
        $r19 := @caughtexception;

     label28:
        virtualinvoke r54.<java.io.InputStream: void close()>();

        if r58 == null goto label29;

        virtualinvoke r58.<java.io.FileOutputStream: void close()>();

     label29:
        if r57 == null goto label30;

        $z1 = virtualinvoke r57.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label30;

        virtualinvoke r57.<java.io.File: boolean delete()>();

     label30:
        goto label32;

     label31:
        $r35 := @caughtexception;

     label32:
        throw $r19;

     label33:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.UnsatisfiedLinkError from label05 to label06 with label07;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.UnsatisfiedLinkError from label15 to label16 with label17;
        catch java.lang.UnsatisfiedLinkError from label18 to label19 with label20;
        catch java.io.IOException from label22 to label24 with label25;
        catch java.io.IOException from label09 to label22 with label26;
        catch java.lang.Throwable from label09 to label22 with label27;
        catch java.io.IOException from label28 to label30 with label31;
        catch java.lang.Throwable from label26 to label28 with label27;
    }

    static void <clinit>()
    {
        com.github.luben.zstd.util.Native[] $r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r3, $r10;

        <com.github.luben.zstd.util.Native: java.lang.String libname> = "libzstd-jni";

        <com.github.luben.zstd.util.Native: java.lang.String libnameShort> = "zstd-jni";

        <com.github.luben.zstd.util.Native: java.lang.String nativePathOverride> = "ZstdNativePath";

        $r0 = newarray (com.github.luben.zstd.util.Native)[0];

        <com.github.luben.zstd.util.Native: com.github.luben.zstd.util.Native[] $VALUES> = $r0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported OS/arch, cannot find ");

        $r3 = staticinvoke <com.github.luben.zstd.util.Native: java.lang.String resourceName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or load ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("zstd-jni");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from system libraries. Please try building from source the jar or providing ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("libzstd-jni");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in your system.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.github.luben.zstd.util.Native: java.lang.String errorMsg> = $r10;

        <com.github.luben.zstd.util.Native: boolean loaded> = 0;

        return;
    }
}
