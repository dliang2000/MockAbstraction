public final class org.apache.logging.log4j.util.StackLocatorUtil extends java.lang.Object
{
    private static org.apache.logging.log4j.util.StackLocator stackLocator;
    private static volatile boolean errorLogged;

    private void <init>()
    {
        org.apache.logging.log4j.util.StackLocatorUtil r0;

        r0 := @this: org.apache.logging.log4j.util.StackLocatorUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class getCallerClass(int)
    {
        int i0, $i1;
        org.apache.logging.log4j.util.StackLocator $r0;
        java.lang.Class $r1;

        i0 := @parameter0: int;

        $r0 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $i1 = i0 + 1;

        $r1 = virtualinvoke $r0.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(int)>($i1);

        return $r1;
    }

    public static java.lang.StackTraceElement getStackTraceElement(int)
    {
        int i0, $i1;
        org.apache.logging.log4j.util.StackLocator $r0;
        java.lang.StackTraceElement $r1;

        i0 := @parameter0: int;

        $r0 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $i1 = i0 + 1;

        $r1 = virtualinvoke $r0.<org.apache.logging.log4j.util.StackLocator: java.lang.StackTraceElement getStackTraceElement(int)>($i1);

        return $r1;
    }

    public static java.lang.Class getCallerClass(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(java.lang.String,java.lang.String)>(r0, "");

        return $r1;
    }

    public static java.lang.Class getCallerClass(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.logging.log4j.util.StackLocator $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $r3 = virtualinvoke $r2.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(java.lang.String,java.lang.String)>(r0, r1);

        return $r3;
    }

    public static java.lang.Class getCallerClass(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        org.apache.logging.log4j.util.StackLocator $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $r2 = virtualinvoke $r1.<org.apache.logging.log4j.util.StackLocator: java.lang.Class getCallerClass(java.lang.Class)>(r0);

        return $r2;
    }

    public static java.util.Stack getCurrentStackTrace()
    {
        org.apache.logging.log4j.util.StackLocator $r0;
        java.util.Stack $r1;

        $r0 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $r1 = virtualinvoke $r0.<org.apache.logging.log4j.util.StackLocator: java.util.Stack getCurrentStackTrace()>();

        return $r1;
    }

    public static java.lang.StackTraceElement calcLocation(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.util.StackLocator $r2;
        java.lang.StackTraceElement $r3;
        java.util.NoSuchElementException $r4;
        boolean $z0;
        org.apache.logging.log4j.status.StatusLogger $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator>;

        $r3 = virtualinvoke $r2.<org.apache.logging.log4j.util.StackLocator: java.lang.StackTraceElement calcLocation(java.lang.String)>(r0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $z0 = <org.apache.logging.log4j.util.StackLocatorUtil: boolean errorLogged>;

        if $z0 != 0 goto label4;

        <org.apache.logging.log4j.util.StackLocatorUtil: boolean errorLogged> = 1;

        $r5 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        virtualinvoke $r5.<org.apache.logging.log4j.status.StatusLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to locate stack trace element for {}", r0, $r4);

     label4:
        return null;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.StackLocator $r0;

        <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator> = null;

        <org.apache.logging.log4j.util.StackLocatorUtil: boolean errorLogged> = 0;

        $r0 = staticinvoke <org.apache.logging.log4j.util.StackLocator: org.apache.logging.log4j.util.StackLocator getInstance()>();

        <org.apache.logging.log4j.util.StackLocatorUtil: org.apache.logging.log4j.util.StackLocator stackLocator> = $r0;

        return;
    }
}
