public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase
{
    protected static final int MAJOR_INITIAL;
    protected static final int MAJOR_ROOT;
    protected static final int MAJOR_OBJECT_FIELD_FIRST;
    protected static final int MAJOR_OBJECT_FIELD_NEXT;
    protected static final int MAJOR_OBJECT_VALUE;
    protected static final int MAJOR_ARRAY_ELEMENT_FIRST;
    protected static final int MAJOR_ARRAY_ELEMENT_NEXT;
    protected static final int MAJOR_CLOSED;
    protected static final int MINOR_ROOT_BOM;
    protected static final int MINOR_ROOT_NEED_SEPARATOR;
    protected static final int MINOR_ROOT_GOT_SEPARATOR;
    protected static final int MINOR_FIELD_LEADING_WS;
    protected static final int MINOR_FIELD_LEADING_COMMA;
    protected static final int MINOR_FIELD_NAME;
    protected static final int MINOR_FIELD_NAME_ESCAPE;
    protected static final int MINOR_FIELD_APOS_NAME;
    protected static final int MINOR_FIELD_UNQUOTED_NAME;
    protected static final int MINOR_VALUE_LEADING_WS;
    protected static final int MINOR_VALUE_EXPECTING_COMMA;
    protected static final int MINOR_VALUE_EXPECTING_COLON;
    protected static final int MINOR_VALUE_WS_AFTER_COMMA;
    protected static final int MINOR_VALUE_TOKEN_NULL;
    protected static final int MINOR_VALUE_TOKEN_TRUE;
    protected static final int MINOR_VALUE_TOKEN_FALSE;
    protected static final int MINOR_VALUE_TOKEN_NON_STD;
    protected static final int MINOR_NUMBER_MINUS;
    protected static final int MINOR_NUMBER_ZERO;
    protected static final int MINOR_NUMBER_MINUSZERO;
    protected static final int MINOR_NUMBER_INTEGER_DIGITS;
    protected static final int MINOR_NUMBER_FRACTION_DIGITS;
    protected static final int MINOR_NUMBER_EXPONENT_MARKER;
    protected static final int MINOR_NUMBER_EXPONENT_DIGITS;
    protected static final int MINOR_VALUE_STRING;
    protected static final int MINOR_VALUE_STRING_ESCAPE;
    protected static final int MINOR_VALUE_STRING_UTF8_2;
    protected static final int MINOR_VALUE_STRING_UTF8_3;
    protected static final int MINOR_VALUE_STRING_UTF8_4;
    protected static final int MINOR_VALUE_APOS_STRING;
    protected static final int MINOR_VALUE_TOKEN_ERROR;
    protected static final int MINOR_COMMENT_LEADING_SLASH;
    protected static final int MINOR_COMMENT_CLOSING_ASTERISK;
    protected static final int MINOR_COMMENT_C;
    protected static final int MINOR_COMMENT_CPP;
    protected static final int MINOR_COMMENT_YAML;
    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols;
    protected int[] _quadBuffer;
    protected int _quadLength;
    protected int _quad1;
    protected int _pending32;
    protected int _pendingBytes;
    protected int _quoted32;
    protected int _quotedDigits;
    protected int _majorState;
    protected int _majorStateAfterValue;
    protected int _minorState;
    protected int _minorStateAfterSplit;
    protected boolean _endOfInput;
    protected static final int NON_STD_TOKEN_NAN;
    protected static final int NON_STD_TOKEN_INFINITY;
    protected static final int NON_STD_TOKEN_PLUS_INFINITY;
    protected static final int NON_STD_TOKEN_MINUS_INFINITY;
    protected static final java.lang.String[] NON_STD_TOKENS;
    protected static final double[] NON_STD_TOKEN_VALUES;
    protected int _nonStdTokenType;
    protected int _currBufferStart;
    protected int _currInputRowAlt;

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext, int, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext r1;
        int i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer r2;
        int[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext,int)>(r1, i0);

        $r3 = newarray (int)[8];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer> = $r3;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _endOfInput> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols> = r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        return null;
    }

    public void setCodec(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can not use ObjectMapper with non-blocking parser");

        throw $r2;
    }

    public boolean canParseAsync()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        return 1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;

        return $r1;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer symbolTableForTests()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        return $r1;
    }

    public abstract int releaseBuffered(java.io.OutputStream) throws java.io.IOException;

    protected void _releaseBuffers() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: void release()>();

        return;
    }

    public java.lang.Object getInputSource()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        return null;
    }

    protected void _closeInput() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputEnd> = 0;

        return;
    }

    public boolean hasTextCharacters()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $z1 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: boolean hasTextAsCharacters()>();

        return $z1;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label2;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied>;

        return $z0;

     label2:
        return 0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        long $l10, $l11, $l12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowStart>;

        $i4 = $i3 - $i2;

        i0 = $i4 + 1;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRow>;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt>;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.Object _getSourceReference()>();

        $l11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _currInputProcessed>;

        $i8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;

        $i7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart>;

        $i9 = $i8 - $i7;

        $l10 = (long) $i9;

        $l12 = $l11 + $l10;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, $l12, -1L, i1, i0);

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getTokenLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;
        java.lang.Object $r2;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.Object _getSourceReference()>();

        $l2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _tokenInputTotal>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputRow>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputCol>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,long,int,int)>($r2, $l2, -1L, $i1, $i0);

        return $r1;
    }

    public java.lang.String getText() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3;
        java.lang.String $r4, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r6 = virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r6;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _getText2(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>($r3);

        return $r4;
    }

    protected final java.lang.String _getText2(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2;
        java.lang.String $r3, $r5, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case -1: goto label2;
            case 0: goto label5;
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label3;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label4;
            default: goto label5;
        };

     label2:
        return null;

     label3:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r5;

     label4:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r3 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r3;

     label5:
        $r6 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();

        return $r6;
    }

    public int getText(java.io.Writer) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        java.io.Writer r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2, $r3, $r4, $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r6, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r7;
        java.lang.String r9;
        char[] r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: java.io.Writer;

        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if r2 != $r3 goto label1;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i3 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(r1);

        return $i3;

     label1:
        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if r2 != $r4 goto label2;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r9 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>(r9);

        $i2 = virtualinvoke r9.<java.lang.String: int length()>();

        return $i2;

     label2:
        if r2 == null goto label5;

        $z0 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();

        if $z0 == 0 goto label3;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(r1);

        return $i1;

     label3:
        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE>;

        if r2 != $r5 goto label4;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>("Current token not available: can not call this method");

     label4:
        r10 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        virtualinvoke r1.<java.io.Writer: void write(char[])>(r10);

        $i0 = lengthof r10;

        return $i0;

     label5:
        return 0;
    }

    public java.lang.String getValueAsString() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r3, $r4;
        java.lang.String $r5, $r6, $r8;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r2 != $r1 goto label1;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r8 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r8;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r3 goto label2;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getCurrentName()>();

        return $r6;

     label2:
        $r5 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);

        return $r5;
    }

    public java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        java.lang.String r1, $r6, $r7, $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r4, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r2 goto label1;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        return $r9;

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r5 != $r4 goto label2;

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getCurrentName()>();

        return $r7;

     label2:
        $r6 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(r1);

        return $r6;
    }

    public char[] getTextCharacters() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r12;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r4;
        char[] $r5, $r7, $r8, $r9, $r11, $r13, $r14, $r15;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r2 == null goto label7;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i1)
        {
            case 5: goto label1;
            case 6: goto label5;
            case 7: goto label5;
            case 8: goto label5;
            default: goto label6;
        };

     label1:
        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied>;

        if $z0 != 0 goto label4;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r1 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;

        if $r7 != null goto label2;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r11 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(i0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer> = $r11;

        goto label3;

     label2:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;

        $i2 = lengthof $r8;

        if $i2 >= i0 goto label3;

        $r9 = newarray (char)[i0];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer> = $r9;

     label3:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r14, 0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean _nameCopied> = 1;

     label4:
        $r15 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: char[] _nameCopyBuffer>;

        return $r15;

     label5:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();

        return $r5;

     label6:
        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r13 = virtualinvoke $r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        return $r13;

     label7:
        return null;
    }

    public int getTextLength() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2, $r6;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r4;
        java.lang.String $r5;
        char[] $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        return $i2;

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int size()>();

        return $i1;

     label3:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();

        $i3 = lengthof $r7;

        return $i3;

     label4:
        return 0;
    }

    public int getTextOffset() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0, $i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label3;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int id()>();

        tableswitch($i0)
        {
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label2;
            default: goto label3;
        };

     label1:
        return 0;

     label2:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();

        return $i1;

     label3:
        return 0;
    }

    public byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r4, $r9;
        byte[] $r5, $r6, $r8;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r4 == $r3 goto label1;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Current token (%s) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", $r9);

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;

        if $r5 != null goto label2;

        r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();

        $r7 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String getText()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _decodeBase64(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>($r7, r2, r1);

        $r8 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue> = $r8;

     label2:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;

        return $r6;
    }

    public int readBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.io.OutputStream r2;
        byte[] r3;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.io.OutputStream;

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        virtualinvoke r2.<java.io.OutputStream: void write(byte[])>(r3);

        $i0 = lengthof r3;

        return $i0;
    }

    public java.lang.Object getEmbeddedObject() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r2 != $r1 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: byte[] _binaryValue>;

        return $r3;

     label1:
        return null;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _startArrayScope() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>(-1, -1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 6;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r3;

        return $r3;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _startObjectScope() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>(-1, -1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 2;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = 3;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r3;

        return $r3;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _closeArrayScope() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        byte b0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportMismatchedEndMarker(int,char)>(93, 125);

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParent()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = r1;

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z1 == 0 goto label2;

        b0 = 3;

        goto label4;

     label2:
        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z2 == 0 goto label3;

        b0 = 6;

        goto label4;

     label3:
        b0 = 1;

     label4:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = b0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = b0;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r4;

        return $r4;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _closeObjectScope() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        byte b0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportMismatchedEndMarker(int,char)>(125, 93);

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext getParent()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = r1;

        $z1 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();

        if $z1 == 0 goto label2;

        b0 = 3;

        goto label4;

     label2:
        $z2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();

        if $z2 == 0 goto label3;

        b0 = 6;

        goto label4;

     label3:
        b0 = 1;

     label4:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = b0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue> = b0;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_OBJECT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r4;

        return $r4;
    }

    protected final java.lang.String _findName(int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, i1, i2;
        java.lang.String r1, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r2;
        int[] $r3, $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(i1, i0);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int)>(i2);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        $r3[0] = i2;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>($r4, 1, i0);

        return $r5;
    }

    protected final java.lang.String _findName(int, int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, i1, i2, i3;
        java.lang.String r1, $r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r2;
        int[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i1 := @parameter2: int;

        i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(i2, i1);

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int)>(i0, i3);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        $r3[0] = i0;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        $r4[1] = i3;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        $r6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>($r5, 2, i1);

        return $r6;
    }

    protected final java.lang.String _findName(int, int, int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, i1, i2, $i3, i4, i5;
        java.lang.String r1, $r4;
        int[] r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 := @parameter2: int;

        i2 := @parameter3: int;

        i5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(i4, i2);

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        r1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String findName(int,int,int)>(i0, i1, i5);

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int[] _quadBuffer>;

        r2[0] = i0;

        r2[1] = i1;

        $i3 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _padLastQuad(int,int)>(i5, i2);

        r2[2] = $i3;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String _addName(int[],int,int)>(r2, 3, i2);

        return $r4;
    }

    protected final java.lang.String _addName(int[], int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, i45, i46, i47, i48, i49, i50, i51, $i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r2, $r6, $r7;
        java.lang.String $r3, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer $r4;
        char $c11, $c25;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r8;
        char[] r9;
        byte b52;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = i0 << 2;

        $i4 = $i3 - 4;

        i2 = $i4 + i1;

        if i1 >= 4 goto label01;

        $i40 = i0 - 1;

        i45 = r1[$i40];

        $i44 = i0 - 1;

        $i41 = 4 - i1;

        $i42 = $i41 << 3;

        $i43 = i45 << $i42;

        r1[$i44] = $i43;

        goto label02;

     label01:
        i45 = 0;

     label02:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        i46 = 0;

        i47 = 0;

     label03:
        if i47 >= i2 goto label16;

        $i6 = i47 >> 2;

        i48 = r1[$i6];

        i49 = i47 & 3;

        $i7 = 3 - i49;

        $i8 = $i7 << 3;

        $i9 = i48 >> $i8;

        i50 = $i9 & 255;

        i47 = i47 + 1;

        if i50 <= 127 goto label14;

        $i12 = i50 & 224;

        if $i12 != 192 goto label04;

        i51 = i50 & 31;

        b52 = 1;

        goto label07;

     label04:
        $i13 = i50 & 240;

        if $i13 != 224 goto label05;

        i51 = i50 & 15;

        b52 = 2;

        goto label07;

     label05:
        $i14 = i50 & 248;

        if $i14 != 240 goto label06;

        i51 = i50 & 7;

        b52 = 3;

        goto label07;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidInitial(int)>(i50);

        i51 = 1;

        b52 = 1;

     label07:
        $i53 = i47 + b52;

        if $i53 <= i2 goto label08;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidEOF(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken)>(" in field name", $r8);

     label08:
        $i15 = i47 >> 2;

        i54 = r1[$i15];

        i55 = i47 & 3;

        $i16 = 3 - i55;

        $i17 = $i16 << 3;

        i56 = i54 >> $i17;

        i47 = i47 + 1;

        $i18 = i56 & 192;

        if $i18 == 128 goto label09;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(i56);

     label09:
        $i20 = i51 << 6;

        $i19 = i56 & 63;

        i50 = $i20 | $i19;

        if b52 <= 1 goto label12;

        $i27 = i47 >> 2;

        i57 = r1[$i27];

        i58 = i47 & 3;

        $i28 = 3 - i58;

        $i29 = $i28 << 3;

        i59 = i57 >> $i29;

        i47 = i47 + 1;

        $i30 = i59 & 192;

        if $i30 == 128 goto label10;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(i59);

     label10:
        $i32 = i50 << 6;

        $i31 = i59 & 63;

        i50 = $i32 | $i31;

        if b52 <= 2 goto label12;

        $i33 = i47 >> 2;

        i60 = r1[$i33];

        i61 = i47 & 3;

        $i34 = 3 - i61;

        $i35 = $i34 << 3;

        i62 = i60 >> $i35;

        i47 = i47 + 1;

        $i36 = i62 & 192;

        if $i36 == 128 goto label11;

        $i39 = i62 & 255;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>($i39);

     label11:
        $i38 = i50 << 6;

        $i37 = i62 & 63;

        i50 = $i38 | $i37;

     label12:
        if b52 <= 2 goto label14;

        i63 = i50 - 65536;

        $i21 = lengthof r9;

        if i46 < $i21 goto label13;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();

     label13:
        $i22 = i46;

        i46 = i46 + 1;

        $i23 = i63 >> 10;

        $i24 = 55296 + $i23;

        $c25 = (char) $i24;

        r9[$i22] = $c25;

        $i26 = i63 & 1023;

        i50 = 56320 | $i26;

     label14:
        $i64 = lengthof r9;

        if i46 < $i64 goto label15;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        r9 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: char[] expandCurrentSegment()>();

     label15:
        $i10 = i46;

        i46 = i46 + 1;

        $c11 = (char) i50;

        r9[$i10] = $c11;

        goto label03;

     label16:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r9, 0, i46);

        if i1 >= 4 goto label17;

        $i5 = i0 - 1;

        r1[$i5] = i45;

     label17:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: java.lang.String addName(java.lang.String,int[],int)>($r3, r1, i0);

        return $r5;
    }

    protected static final int _padLastQuad(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 4 goto label1;

        $i4 = i0;

        goto label2;

     label1:
        $i2 = i1 << 3;

        $i3 = -1 << $i2;

        $i4 = i0 | $i3;

     label2:
        return $i4;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _eofAsNextToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 7;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _handleEOF()>();

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void close()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = null;

        return null;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _fieldComplete(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = 4;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        virtualinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(r1);

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r3;

        return $r3;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _valueComplete(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = $i0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r1;

        return r1;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _valueCompleteInt(int, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, $i1, $i2;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>(r1);

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _intLength> = $i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numTypesValid> = 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numberInt> = i0;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = $i2;

        r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = r2;

        return r2;
    }

    protected final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _valueNonStdNumberComplete(int) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, $i1;
        java.lang.String r1;
        java.lang.String[] $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature $r4;
        boolean $z0;
        double[] $r5;
        double $d0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS>;

        r1 = $r2[i0];

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>(r1);

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: boolean isEnabled(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$Feature)>($r4);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String,java.lang.Object)>("Non-standard token \'%s\': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", r1);

     label1:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _intLength> = 0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _numTypesValid> = 8;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double[] NON_STD_TOKEN_VALUES>;

        $d0 = $r5[i0];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double _numberDouble> = $d0;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorStateAfterValue>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _majorState> = $i1;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r6;

        return $r6;
    }

    protected final java.lang.String _nonStdToken(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS>;

        $r2 = $r1[i0];

        return $r2;
    }

    protected final void _updateTokenLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        long $l8, $l9, $l10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRow>;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowAlt>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i1);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputRow> = $i3;

        i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr>;

        $i4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currInputRowStart>;

        $i5 = i0 - $i4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _tokenInputCol> = $i5;

        $l9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _currInputProcessed>;

        $i6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _currBufferStart>;

        $i7 = i0 - $i6;

        $l8 = (long) $i7;

        $l10 = $l9 + $l8;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: long _tokenInputTotal> = $l10;

        return;
    }

    protected void _reportInvalidChar(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        if i0 >= 32 goto label1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _throwInvalidSpace(int)>(i0);

     label1:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidInitial(int)>(i0);

        return;
    }

    protected void _reportInvalidInitial(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 start byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void _reportInvalidOther(int, int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0, i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int _inputPtr> = i1;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportInvalidOther(int)>(i0);

        return;
    }

    protected void _reportInvalidOther(int) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid UTF-8 middle byte 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        double[] $r1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int NON_STD_TOKEN_MINUS_INFINITY> = 3;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int NON_STD_TOKEN_PLUS_INFINITY> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int NON_STD_TOKEN_INFINITY> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int NON_STD_TOKEN_NAN> = 0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_COMMENT_YAML> = 55;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_COMMENT_CPP> = 54;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_COMMENT_C> = 53;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_COMMENT_CLOSING_ASTERISK> = 52;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_COMMENT_LEADING_SLASH> = 51;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_TOKEN_ERROR> = 50;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_APOS_STRING> = 45;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_STRING_UTF8_4> = 44;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_STRING_UTF8_3> = 43;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_STRING_UTF8_2> = 42;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_STRING_ESCAPE> = 41;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_STRING> = 40;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_EXPONENT_DIGITS> = 32;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_EXPONENT_MARKER> = 31;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_FRACTION_DIGITS> = 30;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_INTEGER_DIGITS> = 26;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_MINUSZERO> = 25;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_ZERO> = 24;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_NUMBER_MINUS> = 23;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_TOKEN_NON_STD> = 19;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_TOKEN_FALSE> = 18;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_TOKEN_TRUE> = 17;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_TOKEN_NULL> = 16;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_WS_AFTER_COMMA> = 15;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_EXPECTING_COLON> = 14;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_EXPECTING_COMMA> = 13;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_VALUE_LEADING_WS> = 12;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_UNQUOTED_NAME> = 10;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_APOS_NAME> = 9;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_NAME_ESCAPE> = 8;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_NAME> = 7;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_LEADING_COMMA> = 5;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_FIELD_LEADING_WS> = 4;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_ROOT_GOT_SEPARATOR> = 3;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_ROOT_NEED_SEPARATOR> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MINOR_ROOT_BOM> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_CLOSED> = 7;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_ARRAY_ELEMENT_NEXT> = 6;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_ARRAY_ELEMENT_FIRST> = 5;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_OBJECT_VALUE> = 4;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_OBJECT_FIELD_NEXT> = 3;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_OBJECT_FIELD_FIRST> = 2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_ROOT> = 1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: int MAJOR_INITIAL> = 0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "NaN";

        $r0[1] = "Infinity";

        $r0[2] = "+Infinity";

        $r0[3] = "-Infinity";

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: java.lang.String[] NON_STD_TOKENS> = $r0;

        $r1 = newarray (double)[4];

        $r1[0] = #NaN;

        $r1[1] = #Infinity;

        $r1[2] = #Infinity;

        $r1[3] = #-Infinity;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase: double[] NON_STD_TOKEN_VALUES> = $r1;

        return;
    }
}
