public class org.apache.flink.api.common.operators.GenericDataSinkBase extends org.apache.flink.api.common.operators.Operator
{
    protected final org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper;
    protected org.apache.flink.api.common.operators.Operator input;
    private org.apache.flink.api.common.operators.Ordering localOrdering;

    public void <init>(org.apache.flink.api.common.io.OutputFormat, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.io.OutputFormat r1;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r5;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.io.OutputFormat;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, r3);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = null;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The OutputFormat may not be null.");

        $r5 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r5.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r5;

        return;
    }

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.UnaryOperatorInformation, java.lang.String)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1, $r5;
        org.apache.flink.api.common.operators.UnaryOperatorInformation r2;
        java.lang.String r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.UnaryOperatorInformation;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.Operator: void <init>(org.apache.flink.api.common.operators.OperatorInformation,java.lang.String)>(r2, r3);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = null;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The OutputFormat class may not be null.");

        $r5 = (org.apache.flink.api.common.operators.util.UserCodeWrapper) $r4;

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper> = $r5;

        return;
    }

    public org.apache.flink.api.common.operators.Operator getInput()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Operator $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input>;

        return $r1;
    }

    public void setInput(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Operator r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The input may not be null.");

        $r3 = (org.apache.flink.api.common.operators.Operator) $r2;

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = $r3;

        return;
    }

    public transient void setInputs(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r3;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The inputs may not be null.");

        $r3 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator[])>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = $r3;

        return;
    }

    public void setInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r3;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: java.util.List;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The inputs may not be null.");

        $r3 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(java.util.List)>(r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = $r3;

        return;
    }

    public transient void addInput(org.apache.flink.api.common.operators.Operator[])
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Operator[] r1;
        org.apache.flink.api.common.operators.Operator $r3, $r4;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The input may not be null.");

        $r3 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input>;

        $r4 = staticinvoke <org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r3, r1);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = $r4;

        return;
    }

    public void addInputs(java.util.List)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        java.util.List r1;
        org.apache.flink.api.common.operators.Operator $r3, $r8;
        int $i0;
        org.apache.flink.api.common.operators.Operator[] $r4, $r6, $r7;
        java.lang.Object[] $r5;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: java.util.List;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The inputs may not be null.");

        $r3 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input>;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (org.apache.flink.api.common.operators.Operator)[$i0];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.apache.flink.api.common.operators.Operator[]) $r5;

        $r7 = (org.apache.flink.api.common.operators.Operator[]) $r6;

        $r8 = staticinvoke <org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator createUnionCascade(org.apache.flink.api.common.operators.Operator,org.apache.flink.api.common.operators.Operator[])>($r3, $r7);

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input> = $r8;

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getLocalOrder()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Ordering localOrdering>;

        return $r1;
    }

    public void setLocalOrder(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Ordering localOrdering> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getFormatWrapper()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        return $r1;
    }

    public org.apache.flink.api.common.operators.util.UserCodeWrapper getUserCodeWrapper()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        return $r1;
    }

    public void accept(org.apache.flink.util.Visitor)
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        org.apache.flink.util.Visitor r1;
        boolean z0;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: org.apache.flink.util.Visitor;

        z0 = interfaceinvoke r1.<org.apache.flink.util.Visitor: boolean preVisit(org.apache.flink.util.Visitable)>(r0);

        if z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator input>;

        virtualinvoke $r2.<org.apache.flink.api.common.operators.Operator: void accept(org.apache.flink.util.Visitor)>(r1);

        interfaceinvoke r1.<org.apache.flink.util.Visitor: void postVisit(org.apache.flink.util.Visitable)>(r0);

     label1:
        return;
    }

    protected void executeOnCollections(java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        java.util.List r1;
        org.apache.flink.api.common.functions.RuntimeContext r2;
        org.apache.flink.api.common.ExecutionConfig r3;
        org.apache.flink.api.common.io.OutputFormat r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r6;
        java.lang.Object $r7, r30;
        org.apache.flink.api.common.operators.Operator $r8;
        org.apache.flink.api.common.operators.OperatorInformation $r9;
        org.apache.flink.api.common.operators.Ordering $r10, $r15, $r16;
        org.apache.flink.configuration.Configuration $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.flink.api.common.io.FinalizeOnMaster $r12;
        org.apache.flink.api.common.io.RichOutputFormat $r13;
        org.apache.flink.api.common.io.InitializeOnMaster $r14;
        java.lang.UnsupportedOperationException $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;
        java.lang.String $r22;
        org.apache.flink.api.common.typeinfo.AtomicType $r23;
        org.apache.flink.api.common.operators.GenericDataSinkBase$1 $r24;
        org.apache.flink.api.common.typeutils.CompositeType $r25;
        int[] r26;
        boolean[] r27;
        org.apache.flink.api.common.typeutils.TypeComparator r28;
        java.util.Iterator r29;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.flink.api.common.functions.RuntimeContext;

        r3 := @parameter2: org.apache.flink.api.common.ExecutionConfig;

        $r6 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.util.UserCodeWrapper formatWrapper>;

        $r7 = interfaceinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r4 = (org.apache.flink.api.common.io.OutputFormat) $r7;

        $r8 = virtualinvoke r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Operator getInput()>();

        $r9 = virtualinvoke $r8.<org.apache.flink.api.common.operators.Operator: org.apache.flink.api.common.operators.OperatorInformation getOperatorInfo()>();

        r5 = virtualinvoke $r9.<org.apache.flink.api.common.operators.OperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r10 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Ordering localOrdering>;

        if $r10 == null goto label4;

        $r15 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Ordering localOrdering>;

        r26 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Ordering: int[] getFieldPositions()>();

        $r16 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.api.common.operators.Ordering localOrdering>;

        r27 = virtualinvoke $r16.<org.apache.flink.api.common.operators.Ordering: boolean[] getFieldSortDirections()>();

        $z2 = r5 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z2 == 0 goto label1;

        $r25 = (org.apache.flink.api.common.typeutils.CompositeType) r5;

        r28 = virtualinvoke $r25.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r26, r27, 0, r3);

        goto label3;

     label1:
        $z3 = r5 instanceof org.apache.flink.api.common.typeinfo.AtomicType;

        if $z3 == 0 goto label2;

        $r23 = (org.apache.flink.api.common.typeinfo.AtomicType) r5;

        $z4 = r27[0];

        r28 = interfaceinvoke $r23.<org.apache.flink.api.common.typeinfo.AtomicType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean,org.apache.flink.api.common.ExecutionConfig)>($z4, r3);

        goto label3;

     label2:
        $r17 = new java.lang.UnsupportedOperationException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local output sorting does not support type ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" yet.");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label3:
        $r24 = new org.apache.flink.api.common.operators.GenericDataSinkBase$1;

        specialinvoke $r24.<org.apache.flink.api.common.operators.GenericDataSinkBase$1: void <init>(org.apache.flink.api.common.operators.GenericDataSinkBase,org.apache.flink.api.common.typeutils.TypeComparator)>(r0, r28);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r1, $r24);

     label4:
        $z5 = r4 instanceof org.apache.flink.api.common.io.InitializeOnMaster;

        if $z5 == 0 goto label5;

        $r14 = (org.apache.flink.api.common.io.InitializeOnMaster) r4;

        interfaceinvoke $r14.<org.apache.flink.api.common.io.InitializeOnMaster: void initializeGlobal(int)>(1);

     label5:
        $r11 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: org.apache.flink.configuration.Configuration parameters>;

        interfaceinvoke r4.<org.apache.flink.api.common.io.OutputFormat: void configure(org.apache.flink.configuration.Configuration)>($r11);

        $z0 = r4 instanceof org.apache.flink.api.common.io.RichOutputFormat;

        if $z0 == 0 goto label6;

        $r13 = (org.apache.flink.api.common.io.RichOutputFormat) r4;

        virtualinvoke $r13.<org.apache.flink.api.common.io.RichOutputFormat: void setRuntimeContext(org.apache.flink.api.common.functions.RuntimeContext)>(r2);

     label6:
        interfaceinvoke r4.<org.apache.flink.api.common.io.OutputFormat: void open(int,int)>(0, 1);

        r29 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z6 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        r30 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r4.<org.apache.flink.api.common.io.OutputFormat: void writeRecord(java.lang.Object)>(r30);

        goto label7;

     label8:
        interfaceinvoke r4.<org.apache.flink.api.common.io.OutputFormat: void close()>();

        $z1 = r4 instanceof org.apache.flink.api.common.io.FinalizeOnMaster;

        if $z1 == 0 goto label9;

        $r12 = (org.apache.flink.api.common.io.FinalizeOnMaster) r4;

        interfaceinvoke $r12.<org.apache.flink.api.common.io.FinalizeOnMaster: void finalizeGlobal(int)>(1);

     label9:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.GenericDataSinkBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.operators.GenericDataSinkBase;

        $r1 = r0.<org.apache.flink.api.common.operators.GenericDataSinkBase: java.lang.String name>;

        return $r1;
    }
}
