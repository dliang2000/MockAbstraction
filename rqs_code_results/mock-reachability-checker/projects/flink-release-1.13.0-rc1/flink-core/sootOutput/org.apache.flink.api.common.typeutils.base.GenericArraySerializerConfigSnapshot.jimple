public final class org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;
    private java.lang.Class componentClass;
    private org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r1;
        java.lang.Class $r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class getComponentClass()>();

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass> = $r2;

        $r3 = new org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer getComponentSerializer()>();

        $r4[0] = $r5;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r4);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r3;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        return 2;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.Class $r2, $r4;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r3, $r6;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r5);

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: void writeNestedSerializerSnapshots(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        lookupswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: void readV1(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        goto label4;

     label2:
        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: void readV2(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        return;
    }

    private void readV1(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r5;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r6;
        java.lang.Object $r7;
        java.lang.Class $r8;
        java.lang.ClassNotFoundException $r9;
        java.io.IOException $r10;
        java.lang.Throwable $r11, $r12, $r13, r16;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.ClassLoader;

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate legacyReadNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r5;

     label01:
        $r6 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r1);

        r16 = null;

     label02:
        $r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>($r6, r2);

        $r8 = (java.lang.Class) $r7;

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass> = $r8;

     label03:
        if $r6 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

        goto label13;

     label05:
        $r11 := @caughtexception;

        r16 = $r11;

        throw $r11;

     label06:
        $r13 := @caughtexception;

     label07:
        if $r6 == null goto label12;

        if r16 == null goto label11;

     label08:
        virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label12;

     label11:
        virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label12:
        throw $r13;

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Could not find requested element class in classpath.", $r9);

        throw $r10;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.ClassNotFoundException from label01 to label13 with label14;
    }

    private void readV2(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Class $r3;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Class resolveClassByName(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass> = $r3;

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate readNestedSerializerSnapshots(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot> = $r4;

        return;
    }

    public org.apache.flink.api.common.typeutils.base.GenericArraySerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        java.lang.Class $r1, $r4;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2, $r5;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        $r3 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass>;

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializer getRestoredNestedSerializer(int)>(0);

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>($r4, $r6);

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate $r2, $r5;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot $r3;
        java.lang.Class $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7, $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z1);

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        if $z0 != 0 goto label3;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r8;

     label3:
        $r3 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: java.lang.Class componentClass>;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: void <init>(java.lang.Class)>($r4);

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate nestedSnapshot>;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.NestedSerializersSnapshotDelegate: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] getNestedSerializerSnapshots()>();

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r3, $r6);

        return $r7;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: org.apache.flink.api.common.typeutils.base.GenericArraySerializer restoreSerializer()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.GenericArraySerializerConfigSnapshot: int CURRENT_VERSION> = 2;

        return;
    }
}
