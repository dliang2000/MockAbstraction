public class org.mockito.internal.util.DefaultMockingDetails extends java.lang.Object implements org.mockito.MockingDetails
{
    private final java.lang.Object toInspect;

    public void <init>(java.lang.Object)
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect> = r1;

        return;
    }

    public boolean isMock()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isMock(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean isSpy()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $z0 = staticinvoke <org.mockito.internal.util.MockUtil: boolean isSpy(java.lang.Object)>($r1);

        return $z0;
    }

    public java.util.Collection getInvocations()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        org.mockito.internal.stubbing.InvocationContainerImpl $r1;
        java.util.List $r2;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer()>();

        $r2 = virtualinvoke $r1.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.List getInvocations()>();

        return $r2;
    }

    private org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1;
        org.mockito.internal.stubbing.InvocationContainerImpl $r2;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: void assertGoodMock()>();

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer(java.lang.Object)>($r1);

        return $r2;
    }

    public org.mockito.mock.MockCreationSettings getMockCreationSettings()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        org.mockito.invocation.MockHandler $r1;
        org.mockito.mock.MockCreationSettings $r2;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: org.mockito.invocation.MockHandler mockHandler()>();

        $r2 = interfaceinvoke $r1.<org.mockito.invocation.MockHandler: org.mockito.mock.MockCreationSettings getMockSettings()>();

        return $r2;
    }

    public java.util.Collection getStubbings()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        org.mockito.internal.stubbing.InvocationContainerImpl $r1;
        java.util.Collection $r2;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: org.mockito.internal.stubbing.InvocationContainerImpl getInvocationContainer()>();

        $r2 = virtualinvoke $r1.<org.mockito.internal.stubbing.InvocationContainerImpl: java.util.Collection getStubbingsAscending()>();

        return $r2;
    }

    public java.lang.String printInvocations()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        org.mockito.internal.debugging.InvocationsPrinter $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: void assertGoodMock()>();

        $r1 = new org.mockito.internal.debugging.InvocationsPrinter;

        specialinvoke $r1.<org.mockito.internal.debugging.InvocationsPrinter: void <init>()>();

        $r2 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $r3 = virtualinvoke $r1.<org.mockito.internal.debugging.InvocationsPrinter: java.lang.String printInvocations(java.lang.Object)>($r2);

        return $r3;
    }

    public org.mockito.invocation.MockHandler getMockHandler()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        org.mockito.invocation.MockHandler $r1;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: org.mockito.invocation.MockHandler mockHandler()>();

        return $r1;
    }

    public java.lang.Object getMock()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        return $r1;
    }

    private org.mockito.invocation.MockHandler mockHandler()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1;
        org.mockito.invocation.MockHandler $r2;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: void assertGoodMock()>();

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.invocation.MockHandler getMockHandler(java.lang.Object)>($r1);

        return $r2;
    }

    private void assertGoodMock()
    {
        org.mockito.internal.util.DefaultMockingDetails r0;
        java.lang.Object $r1, $r5;
        boolean $z0;
        org.mockito.exceptions.misusing.NotAMockException $r2, $r10;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r6;
        java.lang.String $r9;

        r0 := @this: org.mockito.internal.util.DefaultMockingDetails;

        $r1 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        if $r1 != null goto label1;

        $r10 = new org.mockito.exceptions.misusing.NotAMockException;

        specialinvoke $r10.<org.mockito.exceptions.misusing.NotAMockException: void <init>(java.lang.String)>("Argument passed to Mockito.mockingDetails() should be a mock, but is null!");

        throw $r10;

     label1:
        $z0 = virtualinvoke r0.<org.mockito.internal.util.DefaultMockingDetails: boolean isMock()>();

        if $z0 != 0 goto label2;

        $r2 = new org.mockito.exceptions.misusing.NotAMockException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Argument passed to Mockito.mockingDetails() should be a mock, but is an instance of ");

        $r5 = r0.<org.mockito.internal.util.DefaultMockingDetails: java.lang.Object toInspect>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.mockito.exceptions.misusing.NotAMockException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label2:
        return;
    }
}
