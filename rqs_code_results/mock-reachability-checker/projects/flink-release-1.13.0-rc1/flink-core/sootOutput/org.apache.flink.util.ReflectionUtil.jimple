public final class org.apache.flink.util.ReflectionUtil extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Object $r2;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.Class getTemplateType(java.lang.Class, int)
    {
        java.lang.Class r0, $r2;
        int i0;
        java.lang.Class[] $r1;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class[] getSuperTemplateTypes(java.lang.Class)>(r0);

        $r2 = $r1[i0];

        return $r2;
    }

    public static java.lang.Class getTemplateType(java.lang.Class, java.lang.Class, int)
    {
        java.lang.Class r0, r1, $r3;
        int i0;
        java.lang.Class[] $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r2 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class[] getSuperTemplateTypes(java.lang.Class)>(r0);

        $r3 = $r2[i0];

        return $r3;
    }

    public static java.lang.Class getTemplateType1(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 0);

        return $r1;
    }

    public static java.lang.Class getTemplateType1(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r2;
        java.lang.Class[] $r3;
        java.lang.Class $r4;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.ParameterizedType) r0;

        $r3 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class[] getTemplateTypes(java.lang.reflect.ParameterizedType)>($r2);

        $r4 = $r3[0];

        return $r4;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static java.lang.Class getTemplateType2(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 1);

        return $r1;
    }

    public static java.lang.Class getTemplateType3(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 2);

        return $r1;
    }

    public static java.lang.Class getTemplateType4(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 3);

        return $r1;
    }

    public static java.lang.Class getTemplateType5(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 4);

        return $r1;
    }

    public static java.lang.Class getTemplateType6(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 5);

        return $r1;
    }

    public static java.lang.Class getTemplateType7(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 6);

        return $r1;
    }

    public static java.lang.Class getTemplateType8(java.lang.Class)
    {
        java.lang.Class r0, $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType(java.lang.Class,int)>(r0, 7);

        return $r1;
    }

    public static java.lang.Class[] getSuperTemplateTypes(java.lang.Class)
    {
        boolean $z0;
        java.lang.reflect.Type $r0, r5;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r2;
        java.lang.Class[] $r3;
        java.lang.Class r4;

        r4 := @parameter0: java.lang.Class;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

     label1:
        $z0 = r5 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.reflect.ParameterizedType) r5;

        $r3 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class[] getTemplateTypes(java.lang.reflect.ParameterizedType)>($r2);

        return $r3;

     label2:
        $r0 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        if $r0 != null goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label3:
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;
    }

    public static java.lang.Class[] getSuperTemplateTypes(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, r8;
        java.lang.reflect.Type r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r7;
        java.lang.reflect.ParameterizedType $r5;
        java.lang.Class[] $r6;

        r8 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        if r8 == null goto label1;

        if r0 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        r1 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r1 != r0 goto label3;

        goto label4;

     label3:
        r8 = r1;

        if r1 != null goto label2;

     label4:
        if r8 != null goto label5;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The searched for superclass is not a superclass of the given class.");

        throw $r7;

     label5:
        r2 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label6;

        $r5 = (java.lang.reflect.ParameterizedType) r2;

        $r6 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class[] getTemplateTypes(java.lang.reflect.ParameterizedType)>($r5);

        return $r6;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The searched for superclass is not a generic class.");

        throw $r4;
    }

    public static java.lang.Class[] getTemplateTypes(java.lang.reflect.ParameterizedType)
    {
        java.lang.reflect.ParameterizedType r0;
        java.lang.Class[] r1;
        java.lang.reflect.Type[] r2, $r4;
        int i0, $i1, $i2, i3, i4;
        java.lang.reflect.Type r3;
        boolean $z0, $z1;
        java.lang.Class $r5;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.lang.reflect.ParameterizedType;

        $r4 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i1 = lengthof $r4;

        r1 = newarray (java.lang.Class)[$i1];

        i3 = 0;

        r2 = interfaceinvoke r0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        r3 = r2[i4];

        $z0 = <org.apache.flink.util.ReflectionUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $z1 = r3 instanceof java.lang.Class;

        if $z1 != 0 goto label2;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label2:
        $i2 = i3;

        i3 = i3 + 1;

        $r5 = (java.lang.Class) r3;

        r1[$i2] = $r5;

        i4 = i4 + 1;

        goto label1;

     label3:
        return r1;
    }

    public static java.lang.Class[] getTemplateTypes(java.lang.Class)
    {
        java.lang.Class r0, $r7;
        java.lang.reflect.Type r1, r5;
        java.lang.reflect.ParameterizedType r2;
        java.lang.Class[] r3;
        java.lang.reflect.Type[] r4, $r6;
        int i0, $i1, $i2, i3, i4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r8, $r9;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = <org.apache.flink.util.ReflectionUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z3 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z3 != 0 goto label1;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label1:
        r2 = (java.lang.reflect.ParameterizedType) r1;

        $r6 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i1 = lengthof $r6;

        r3 = newarray (java.lang.Class)[$i1];

        i3 = 0;

        r4 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i0 = lengthof r4;

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        r5 = r4[i4];

        $z1 = <org.apache.flink.util.ReflectionUtil: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $z2 = r5 instanceof java.lang.Class;

        if $z2 != 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        $i2 = i3;

        i3 = i3 + 1;

        $r7 = (java.lang.Class) r5;

        r3[$i2] = $r7;

        i4 = i4 + 1;

        goto label2;

     label4:
        return r3;
    }

    public static org.apache.flink.util.ReflectionUtil$FullTypeInfo getFullTemplateType(java.lang.reflect.Type, int)
    {
        java.lang.reflect.Type r0, $r4;
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.reflect.ParameterizedType $r2;
        java.lang.reflect.Type[] $r3;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo $r5;

        r0 := @parameter0: java.lang.reflect.Type;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.reflect.ParameterizedType) r0;

        $r3 = interfaceinvoke $r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r4 = $r3[i0];

        $r5 = staticinvoke <org.apache.flink.util.ReflectionUtil: org.apache.flink.util.ReflectionUtil$FullTypeInfo getFullTemplateType(java.lang.reflect.Type)>($r4);

        return $r5;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static org.apache.flink.util.ReflectionUtil$FullTypeInfo getFullTemplateType(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0, $r8, $r11;
        java.lang.reflect.ParameterizedType r1;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo[] r2;
        boolean $z0;
        org.apache.flink.util.ReflectionUtil$FullTypeInfo $r3, $r7, $r12;
        java.lang.Class $r4, $r9;
        java.lang.reflect.Type[] $r5, $r6, $r10;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.reflect.Type;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label3;

        r1 = (java.lang.reflect.ParameterizedType) r0;

        $r5 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r5;

        r2 = newarray (org.apache.flink.util.ReflectionUtil$FullTypeInfo)[$i0];

        i2 = 0;

     label1:
        $r6 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i1 = lengthof $r6;

        if i2 >= $i1 goto label2;

        $r10 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r11 = $r10[i2];

        $r12 = staticinvoke <org.apache.flink.util.ReflectionUtil: org.apache.flink.util.ReflectionUtil$FullTypeInfo getFullTemplateType(java.lang.reflect.Type)>($r11);

        r2[i2] = $r12;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = new org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r8 = interfaceinvoke r1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r9 = (java.lang.Class) $r8;

        specialinvoke $r7.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: void <init>(java.lang.Class,org.apache.flink.util.ReflectionUtil$FullTypeInfo[])>($r9, r2);

        return $r7;

     label3:
        $r3 = new org.apache.flink.util.ReflectionUtil$FullTypeInfo;

        $r4 = (java.lang.Class) r0;

        specialinvoke $r3.<org.apache.flink.util.ReflectionUtil$FullTypeInfo: void <init>(java.lang.Class,org.apache.flink.util.ReflectionUtil$FullTypeInfo[])>($r4, null);

        return $r3;
    }

    private void <init>()
    {
        org.apache.flink.util.ReflectionUtil r0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.apache.flink.util.ReflectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/util/ReflectionUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.util.ReflectionUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
