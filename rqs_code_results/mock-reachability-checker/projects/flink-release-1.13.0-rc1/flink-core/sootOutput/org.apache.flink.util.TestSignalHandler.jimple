public class org.apache.flink.util.TestSignalHandler extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private static boolean registered;

    public void <init>()
    {
        org.apache.flink.util.TestSignalHandler r0;

        r0 := @this: org.apache.flink.util.TestSignalHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void register()
    {
        java.lang.String[] r2, $r11;
        int i0, i1;
        java.lang.String r3, $r6;
        boolean $z0, $z1;
        org.apache.flink.util.TestSignalHandler$Handler $r7;
        java.lang.Exception $r8;
        org.slf4j.Logger $r9;
        java.lang.Throwable $r10;

        entermonitor class "Lorg/apache/flink/util/TestSignalHandler;";

     label01:
        $z0 = <org.apache.flink.util.TestSignalHandler: boolean registered>;

        if $z0 == 0 goto label03;

        exitmonitor class "Lorg/apache/flink/util/TestSignalHandler;";

     label02:
        return;

     label03:
        <org.apache.flink.util.TestSignalHandler: boolean registered> = 1;

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $z1 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("Windows");

        if $z1 == 0 goto label04;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "TERM";

        $r11[1] = "INT";

        goto label05;

     label04:
        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "TERM";

        $r11[1] = "HUP";

        $r11[2] = "INT";

     label05:
        r2 = $r11;

        i0 = lengthof $r11;

        i1 = 0;

     label06:
        if i1 >= i0 goto label11;

        r3 = r2[i1];

     label07:
        $r7 = new org.apache.flink.util.TestSignalHandler$Handler;

        specialinvoke $r7.<org.apache.flink.util.TestSignalHandler$Handler: void <init>(java.lang.String)>(r3);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        $r9 = <org.apache.flink.util.TestSignalHandler: org.slf4j.Logger LOG>;

        interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Error while registering signal handler", $r8);

     label10:
        i1 = i1 + 1;

        goto label06;

     label11:
        exitmonitor class "Lorg/apache/flink/util/TestSignalHandler;";

     label12:
        goto label15;

     label13:
        $r10 := @caughtexception;

        exitmonitor class "Lorg/apache/flink/util/TestSignalHandler;";

     label14:
        throw $r10;

     label15:
        return;

        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    static org.slf4j.Logger access$000()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.flink.util.TestSignalHandler: org.slf4j.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/util/TestSignalHandler;");

        <org.apache.flink.util.TestSignalHandler: org.slf4j.Logger LOG> = $r0;

        <org.apache.flink.util.TestSignalHandler: boolean registered> = 0;

        return;
    }
}
