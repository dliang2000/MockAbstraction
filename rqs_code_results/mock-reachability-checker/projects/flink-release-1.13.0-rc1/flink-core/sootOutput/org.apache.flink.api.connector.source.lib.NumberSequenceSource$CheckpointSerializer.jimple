final class org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer extends java.lang.Object implements org.apache.flink.core.io.SimpleVersionedSerializer
{
    private static final int CURRENT_VERSION;

    private void <init>()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        return 1;
    }

    public byte[] serialize(java.util.Collection) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;
        java.util.Collection r1;
        java.util.Iterator r3;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit r4;
        org.apache.flink.core.memory.DataOutputSerializer $r5;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        byte[] $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        r1 := @parameter0: java.util.Collection;

        $r5 = new org.apache.flink.core.memory.DataOutputSerializer;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i1 = $i0 * 22;

        $i2 = $i1 + 4;

        specialinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>($i2);

        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();

        virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: void writeInt(int)>($i3);

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit) $r7;

        staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: void serializeV1(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit)>($r5, r4);

        goto label1;

     label2:
        $r6 = virtualinvoke $r5.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        return $r6;
    }

    public java.util.Collection deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;
        int i0, i1, i2;
        byte[] r1;
        org.apache.flink.core.memory.DataInputDeserializer $r4;
        java.util.ArrayList $r5;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        if i0 == 1 goto label1;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        $r4 = new org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>(r1);

        i1 = virtualinvoke $r4.<org.apache.flink.core.memory.DataInputDeserializer: int readInt()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i1);

        i2 = i1;

     label2:
        if i2 <= 0 goto label3;

        $r6 = staticinvoke <org.apache.flink.api.connector.source.lib.NumberSequenceSource$SplitSerializer: org.apache.flink.api.connector.source.lib.NumberSequenceSource$NumberSequenceSplit deserializeV1(org.apache.flink.core.memory.DataInputView)>($r4);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i2 = i2 + -1;

        goto label2;

     label3:
        return $r5;
    }

    public volatile java.lang.Object deserialize(int, byte[]) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;
        int i0;
        byte[] r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer: java.util.Collection deserialize(int,byte[])>(i0, r1);

        return $r2;
    }

    public volatile byte[] serialize(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;
        java.lang.Object r1;
        java.util.Collection $r2;
        byte[] $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer: byte[] serialize(java.util.Collection)>($r2);

        return $r3;
    }

    void <init>(org.apache.flink.api.connector.source.lib.NumberSequenceSource$1)
    {
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer r0;
        org.apache.flink.api.connector.source.lib.NumberSequenceSource$1 r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer;

        r1 := @parameter0: org.apache.flink.api.connector.source.lib.NumberSequenceSource$1;

        specialinvoke r0.<org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer: void <init>()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.connector.source.lib.NumberSequenceSource$CheckpointSerializer: int CURRENT_VERSION> = 1;

        return;
    }
}
