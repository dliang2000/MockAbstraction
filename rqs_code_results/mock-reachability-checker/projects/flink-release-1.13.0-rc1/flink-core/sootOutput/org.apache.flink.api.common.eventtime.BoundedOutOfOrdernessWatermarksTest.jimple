public class org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest r0;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testWatermarkBeforeRecords()
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks $r4;
        java.time.Duration $r5;
        org.apache.flink.api.common.eventtime.Watermark $r6, $r7;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void <init>(java.time.Duration)>($r5);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r6 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(-9223372036854775808L, $l0);

        return;
    }

    public void testWatermarkAfterEvent()
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks $r4;
        java.time.Duration $r5;
        java.lang.Object $r6;
        org.apache.flink.api.common.eventtime.Watermark $r7;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void <init>(java.time.Duration)>($r5);

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r6, 1337L, $r3);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r7 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r7.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1326L, $l0);

        return;
    }

    public void testWatermarkAfterNonMonotonousEvents()
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks $r4;
        java.time.Duration $r5;
        java.lang.Object $r6, $r7, $r8, $r9;
        org.apache.flink.api.common.eventtime.Watermark $r10;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void <init>(java.time.Duration)>($r5);

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r6, 12345L, $r3);

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r7, 12300L, $r3);

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r8, 12340L, $r3);

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r9, 12280L, $r3);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r10 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r10.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(12334L, $l0);

        return;
    }

    public void testRepeatedProbe()
    {
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest r0;
        org.apache.flink.api.common.eventtime.TestingWatermarkOutput $r3, $r7, $r8;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks $r4;
        java.time.Duration $r5;
        java.lang.Object $r6;
        org.apache.flink.api.common.eventtime.Watermark $r9;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        $r3 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        $r4 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        $r5 = staticinvoke <java.time.Duration: java.time.Duration ofMillis(long)>(10L);

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void <init>(java.time.Duration)>($r5);

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r7 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onEvent(java.lang.Object,long,org.apache.flink.api.common.eventtime.WatermarkOutput)>($r6, 723456L, $r7);

        $r8 = new org.apache.flink.api.common.eventtime.TestingWatermarkOutput;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r8);

        virtualinvoke $r4.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void onPeriodicEmit(org.apache.flink.api.common.eventtime.WatermarkOutput)>($r3);

        $r9 = virtualinvoke $r3.<org.apache.flink.api.common.eventtime.TestingWatermarkOutput: org.apache.flink.api.common.eventtime.Watermark lastWatermark()>();

        $l0 = virtualinvoke $r9.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(723445L, $l0);

        return;
    }
}
