class org.apache.flink.api.java.tuple.TupleGenerator extends java.lang.Object
{
    private static final java.lang.String ROOT_DIRECTORY;
    private static final java.lang.String PACKAGE;
    private static final java.lang.String BUILDER_SUFFIX;
    private static final java.lang.String GEN_TYPE_PREFIX;
    private static final java.lang.String SETTER_ARG_NAME;
    private static final java.lang.String BEGIN_INDICATOR;
    private static final java.lang.String END_INDICATOR;
    private static final java.lang.String TUPLE_PACKAGE;
    private static final java.lang.String TUPLE_CLASSNAME;
    private static final int FIRST;
    private static final int LAST;
    private static final java.lang.String HEADER;

    void <init>()
    {
        org.apache.flink.api.java.tuple.TupleGenerator r0;

        r0 := @this: org.apache.flink.api.java.tuple.TupleGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        java.lang.StringBuilder $r2, $r4, $r6, $r8, $r10, $r11, $r14, $r16, $r17, $r18;
        java.io.PrintStream $r3, $r9;
        java.lang.String $r5, $r7, $r12, $r15, r19;
        int $i0;
        java.io.File $r13;

        r0 := @parameter0: java.lang.String[];

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current directory ");

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        r19 = "./flink-core/src/main/java";

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0[0];

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("./flink-core/src/main/java");

        r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r9 = <java.lang.System: java.io.PrintStream err>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using root directory: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>(r19);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void createTupleClasses(java.io.File)>($r13);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void createTupleBuilderClasses(java.io.File)>($r13);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void modifyTupleType(java.io.File)>($r13);

        return;
    }

    private static java.io.File getPackage(java.io.File, java.lang.String)
    {
        java.io.File r0, $r3;
        java.lang.String r1, $r4, $r8, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.io.PrintStream $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r4);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("None existent directory: ");

        $r8 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        staticinvoke <java.lang.System: void exit(int)>(1);

     label1:
        return $r3;
    }

    private static void insertCodeIntoFile(java.lang.String, java.io.File) throws java.io.IOException
    {
        java.lang.String r0, r2, $r11, $r16, $r17, $r20, $r28, $r29;
        java.io.File r1;
        java.util.Scanner $r7;
        java.lang.StringBuilder $r8, $r9, $r12, $r14, $r18, $r21, $r23, $r25, $r26, $r27, $r30;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.lang.Class $r10;
        java.io.PrintStream $r24;
        java.lang.Throwable $r32, $r33, $r36, r37;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        r2 = staticinvoke <org.apache.flink.util.FileUtils: java.lang.String readFileUtf8(java.io.File)>(r1);

        $r7 = new java.util.Scanner;

        specialinvoke $r7.<java.util.Scanner: void <init>(java.lang.String)>(r2);

        r37 = null;

     label01:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        z4 = 0;

     label02:
        $z0 = virtualinvoke $r7.<java.util.Scanner: boolean hasNextLine()>();

        if $z0 == 0 goto label03;

        $r29 = virtualinvoke $r7.<java.util.Scanner: java.lang.String nextLine()>();

        if $r29 == null goto label03;

        $r30 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $z3 = virtualinvoke $r29.<java.lang.String: boolean contains(java.lang.CharSequence)>("BEGIN_OF_TUPLE_DEPENDENT_CODE");

        if $z3 == 0 goto label02;

        z4 = 1;

        goto label03;

     label03:
        if z4 != 0 goto label07;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No indicator found in \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Will skip code generation.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

        virtualinvoke $r7.<java.util.Scanner: void close()>();

     label04:
        if $r7 == null goto label06;

        goto label05;

     label05:
        virtualinvoke $r7.<java.util.Scanner: void close()>();

     label06:
        return;

     label07:
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t// GENERATED FROM ");

        $r10 = class "Lorg/apache/flink/api/java/tuple/TupleGenerator;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label08:
        $z1 = virtualinvoke $r7.<java.util.Scanner: boolean hasNextLine()>();

        if $z1 == 0 goto label09;

        $r20 = virtualinvoke $r7.<java.util.Scanner: java.lang.String nextLine()>();

        if $r20 == null goto label09;

        $z2 = virtualinvoke $r20.<java.lang.String: boolean contains(java.lang.CharSequence)>("END_OF_TUPLE_DEPENDENT_CODE");

        if $z2 == 0 goto label08;

        $r21 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label09;

     label09:
        $z5 = virtualinvoke $r7.<java.util.Scanner: boolean hasNextLine()>();

        if $z5 == 0 goto label10;

        $r17 = virtualinvoke $r7.<java.util.Scanner: java.lang.String nextLine()>();

        if $r17 == null goto label10;

        $r18 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        goto label09;

     label10:
        $r16 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.FileUtils: void writeFileUtf8(java.io.File,java.lang.String)>(r1, $r16);

     label11:
        if $r7 == null goto label21;

        goto label12;

     label12:
        virtualinvoke $r7.<java.util.Scanner: void close()>();

        goto label21;

     label13:
        $r32 := @caughtexception;

        r37 = $r32;

        throw $r32;

     label14:
        $r33 := @caughtexception;

     label15:
        if $r7 == null goto label20;

        if r37 == null goto label19;

     label16:
        virtualinvoke $r7.<java.util.Scanner: void close()>();

     label17:
        goto label20;

     label18:
        $r36 := @caughtexception;

        virtualinvoke r37.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r36);

        goto label20;

     label19:
        virtualinvoke $r7.<java.util.Scanner: void close()>();

     label20:
        throw $r33;

     label21:
        return;

        catch java.lang.Throwable from label01 to label04 with label13;
        catch java.lang.Throwable from label07 to label11 with label13;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    private static void modifyTupleType(java.io.File) throws java.io.IOException
    {
        java.io.File r0, $r12, r22;
        java.lang.StringBuilder $r3, $r14, $r15, $r17, $r18, $r19, $r20;
        java.lang.String $r13;
        int i0, i1;

        r0 := @parameter0: java.io.File;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic static Tuple newInstance(int arity) {\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tswitch (arity) {\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tcase 0: return Tuple0.INSTANCE;\n");

        i0 = 1;

     label1:
        if i0 > 25 goto label2;

        $r17 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tcase ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": return new Tuple");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("();\n");

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tdefault: throw new IllegalArgumentException(\"The tuple arity must be in [0, \" + MAX_ARITY + \"].\");\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t}\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t}\n\n");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tprivate static final Class<?>[] CLASSES = new Class<?>[] {\n\t\tTuple0.class");

        i1 = 1;

     label3:
        if i1 > 25 goto label4;

        $r14 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Tuple");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t};");

        r22 = staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: java.io.File getPackage(java.io.File,java.lang.String)>(r0, "org.apache.flink.api.java.tuple");

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r22, "Tuple.java");

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void insertCodeIntoFile(java.lang.String,java.io.File)>($r13, $r12);

        return;
    }

    private static void createTupleClasses(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File r0, r1, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.io.PrintWriter $r10;
        int i0;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: java.io.File getPackage(java.io.File,java.lang.String)>(r0, "org.apache.flink.api.java.tuple");

        i0 = 1;

     label1:
        if i0 > 25 goto label2;

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r9);

        $r10 = new java.io.PrintWriter;

        specialinvoke $r10.<java.io.PrintWriter: void <init>(java.io.File)>($r4);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void writeTupleClass(java.io.PrintWriter,int)>($r10, i0);

        virtualinvoke $r10.<java.io.PrintWriter: void flush()>();

        virtualinvoke $r10.<java.io.PrintWriter: void close()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeTupleClass(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        java.lang.String r1, r2, $r6, $r11, $r16, $r21, $r28, $r33, $r41, $r47, $r52, $r57, $r62, $r69, $r76, $r81, $r92, $r99, $r103, $r110, $r127, $r141, $r146, $r150, $r158, $r164, $r169, $r177, $r184, $r192, $r198, $r213, $r220, $r224, $r230, r231, r232, r233, r234, r235;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r42, $r43, $r44, $r45, $r46, $r48, $r49, $r50, $r51, $r53, $r54, $r55, $r56, $r58, $r59, $r60, $r61, $r63, $r64, $r65, $r66, $r67, $r68, $r70, $r71, $r72, $r73, $r74, $r75, $r77, $r78, $r79, $r80, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r93, $r94, $r95, $r96, $r97, $r98, $r100, $r101, $r102, $r104, $r105, $r106, $r107, $r108, $r109, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r136, $r137, $r138, $r139, $r140, $r142, $r143, $r144, $r145, $r147, $r148, $r149, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r159, $r160, $r161, $r162, $r163, $r165, $r166, $r167, $r168, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r178, $r179, $r180, $r181, $r182, $r183, $r185, $r186, $r187, $r188, $r189, $r190, $r191, $r193, $r194, $r195, $r196, $r197, $r199, $r200, $r201, $r202, $r203, $r204, $r205, $r206, $r207, $r208, $r209, $r210, $r211, $r212, $r214, $r215, $r216, $r217, $r218, $r219, $r221, $r222, $r223, $r225, $r226, $r227, $r228, $r229;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String HEADER>;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("package org.apache.flink.api.java.tuple;");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("import org.apache.flink.annotation.Public;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("import org.apache.flink.util.StringUtils;");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("/**");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * A tuple with ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" fields. Tuples are strongly typed; each field may be of a separate type.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * The fields of the tuple can be accessed directly as public fields (f0, f1, ...) or via their position");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * through the {@link #getField(int)} method. The tuple field positions start at zero.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * <p>Tuples are mutable types, meaning that their fields can be re-assigned. This allows functions that work");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * with Tuples to reuse objects in order to reduce pressure on the garbage collector.</p>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * <p>Warning: If you subclass ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", then be sure to either <ul>");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *  <li> not add any new fields, or </li>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *  <li> make it a POJO, and always declare the element type of your DataStreams/DataSets to your descendant");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" *       type. (That is, if you have a \"class Foo extends ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", then don\'t use instances of");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" *       Foo in a DataStream&lt;");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt; / DataSet&lt;");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;, but declare it as");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *       DataStream&lt;Foo&gt; / DataSet&lt;Foo&gt;.) </li>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * </ul></p>");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" * @see Tuple");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *");

        i4 = 0;

     label01:
        if i4 >= i0 goto label02;

        $r225 = new java.lang.StringBuilder;

        specialinvoke $r225.<java.lang.StringBuilder: void <init>()>();

        $r226 = virtualinvoke $r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * @param <T");

        $r227 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r228 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> The type of field ");

        $r229 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r230 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r230);

        i4 = i4 + 1;

        goto label01;

     label02:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" */");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("@Public");

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public class ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r33);

        i5 = 0;

     label03:
        if i5 >= i0 goto label05;

        if i5 <= 0 goto label04;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label04:
        $r221 = new java.lang.StringBuilder;

        specialinvoke $r221.<java.lang.StringBuilder: void <init>()>();

        $r222 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r223 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r224 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r224);

        i5 = i5 + 1;

        goto label03;

     label05:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("> extends Tuple {");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tprivate static final long serialVersionUID = 1L;");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        i6 = 0;

     label06:
        if i6 >= i0 goto label07;

        $r209 = new java.lang.StringBuilder;

        specialinvoke $r209.<java.lang.StringBuilder: void <init>()>();

        $r210 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t/** Field ");

        $r211 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r212 = virtualinvoke $r211.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of the tuple. */");

        $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r213);

        $r214 = new java.lang.StringBuilder;

        specialinvoke $r214.<java.lang.StringBuilder: void <init>()>();

        $r215 = virtualinvoke $r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic T");

        $r216 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r217 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" f");

        $r218 = virtualinvoke $r217.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r220);

        i6 = i6 + 1;

        goto label06;

     label07:
        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        r231 = "(";

        i7 = 0;

     label08:
        if i7 >= i0 goto label10;

        if i7 <= 0 goto label09;

        $r206 = new java.lang.StringBuilder;

        specialinvoke $r206.<java.lang.StringBuilder: void <init>()>();

        $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r231);

        $r208 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r231 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r199 = new java.lang.StringBuilder;

        specialinvoke $r199.<java.lang.StringBuilder: void <init>()>();

        $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r231);

        $r201 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r202 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        r231 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.String toString()>();

        i7 = i7 + 1;

        goto label08;

     label10:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r231);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r232 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Creates a new tuple where all fields are null.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("() {}");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Creates a new tuple and assigns the given values to the tuple\'s fields.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t *");

        i8 = 0;

     label11:
        if i8 >= i0 goto label12;

        $r193 = new java.lang.StringBuilder;

        specialinvoke $r193.<java.lang.StringBuilder: void <init>()>();

        $r194 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t * @param f");

        $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" The value for field ");

        $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r198 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r198);

        i8 = i8 + 1;

        goto label11;

     label12:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r232);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        i9 = 0;

     label13:
        if i9 >= i0 goto label14;

        $r185 = new java.lang.StringBuilder;

        specialinvoke $r185.<java.lang.StringBuilder: void <init>()>();

        $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tthis.f");

        $r187 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r188 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r189 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r190 = virtualinvoke $r189.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r191 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r192 = virtualinvoke $r191.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r192);

        i9 = i9 + 1;

        goto label13;

     label14:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic int getArity() {");

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\treturn ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@SuppressWarnings(\"unchecked\")");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic <T> T getField(int pos) {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\tswitch(pos) {");

        i10 = 0;

     label15:
        if i10 >= i0 goto label16;

        $r178 = new java.lang.StringBuilder;

        specialinvoke $r178.<java.lang.StringBuilder: void <init>()>();

        $r179 = virtualinvoke $r178.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tcase ");

        $r180 = virtualinvoke $r179.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r181 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": return (T) this.f");

        $r182 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r183 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r184 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r184);

        i10 = i10 + 1;

        goto label15;

     label16:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\tdefault: throw new IndexOutOfBoundsException(String.valueOf(pos));");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@SuppressWarnings(\"unchecked\")");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic <T> void setField(T value, int pos) {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\tswitch(pos) {");

        i11 = 0;

     label17:
        if i11 >= i0 goto label18;

        $r165 = new java.lang.StringBuilder;

        specialinvoke $r165.<java.lang.StringBuilder: void <init>()>();

        $r166 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tcase ");

        $r167 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r169);

        $r170 = new java.lang.StringBuilder;

        specialinvoke $r170.<java.lang.StringBuilder: void <init>()>();

        $r171 = virtualinvoke $r170.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\t\tthis.f");

        $r172 = virtualinvoke $r171.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r173 = virtualinvoke $r172.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = (");

        $r174 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r175 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") value;");

        $r177 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r177);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\t\tbreak;");

        i11 = i11 + 1;

        goto label17;

     label18:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\tdefault: throw new IndexOutOfBoundsException(String.valueOf(pos));");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Sets new values to all fields of the tuple.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t *");

        i12 = 0;

     label19:
        if i12 >= i0 goto label20;

        $r159 = new java.lang.StringBuilder;

        specialinvoke $r159.<java.lang.StringBuilder: void <init>()>();

        $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t * @param f");

        $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" The value for field ");

        $r163 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r164 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r164);

        i12 = i12 + 1;

        goto label19;

     label20:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic void setFields");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r232);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        i13 = 0;

     label21:
        if i13 >= i0 goto label22;

        $r151 = new java.lang.StringBuilder;

        specialinvoke $r151.<java.lang.StringBuilder: void <init>()>();

        $r152 = virtualinvoke $r151.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tthis.f");

        $r153 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r154 = virtualinvoke $r153.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r156 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r157 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r158 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r158);

        i13 = i13 + 1;

        goto label21;

     label22:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        if i0 != 2 goto label23;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t* Returns a shallow copy of the tuple with swapped values.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t*");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t* @return shallow copy of the tuple with swapped values");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t*/");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic Tuple2<T1, T0> swap() {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\treturn new Tuple2<T1, T0>(f1, f0);");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

     label23:
        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t// -------------------------------------------------------------------------------------------------");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t// standard utilities");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t// -------------------------------------------------------------------------------------------------");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Creates a string representation of the tuple in the form");

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("\t * (f0");

        i14 = 1;

     label24:
        if i14 >= i0 goto label25;

        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", f");

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r150);

        i14 = i14 + 1;

        goto label24;

     label25:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("),");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * where the individual fields are the value returned by calling {@link Object#toString} on that field.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * @return The string representation of the tuple.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic String toString() {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\treturn \"(\" + StringUtils.arrayAwareToString(this.f0)");

        i15 = 1;

     label26:
        if i15 >= i0 goto label27;

        $r142 = new java.lang.StringBuilder;

        specialinvoke $r142.<java.lang.StringBuilder: void <init>()>();

        $r143 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\t+ \",\" + StringUtils.arrayAwareToString(this.f");

        $r144 = virtualinvoke $r143.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r145 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r146);

        i15 = i15 + 1;

        goto label26;

     label27:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\t+ \")\";");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Deep equality for tuples by calling equals() on the tuple members.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * @param o the object checked for equality");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * @return true if this is equal to o.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic boolean equals(Object o) {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\tif (this == o) {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\treturn true;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t}");

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tif (!(o instanceof ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")) {");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\treturn false;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t@SuppressWarnings(\"rawtypes\")");

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tuple = (");

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") o;");

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r69);

        i16 = 0;

     label28:
        if i16 >= i0 goto label29;

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<java.lang.StringBuilder: void <init>()>();

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        r233 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>();

        $r131 = new java.lang.StringBuilder;

        specialinvoke $r131.<java.lang.StringBuilder: void <init>()>();

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tif (");

        $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r233);

        $r134 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != null ? !");

        $r135 = virtualinvoke $r134.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r233);

        $r136 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".equals(tuple.");

        $r137 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r233);

        $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") : tuple.");

        $r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r233);

        $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != null) {");

        $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t\treturn false;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\t}");

        i16 = i16 + 1;

        goto label28;

     label29:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\treturn true;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\tpublic int hashCode() {");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\tint result = f0 != null ? f0.hashCode() : 0;");

        i17 = 1;

     label30:
        if i17 >= i0 goto label31;

        $r118 = new java.lang.StringBuilder;

        specialinvoke $r118.<java.lang.StringBuilder: void <init>()>();

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        r234 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\tresult = 31 * result + (");

        $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r234);

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != null ? ");

        $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r234);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".hashCode() : 0);");

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r127);

        i17 = i17 + 1;

        goto label30;

     label31:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\treturn result;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        r235 = "";

        i18 = 0;

     label32:
        if i18 >= i0 goto label34;

        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        r235 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = i0 - 1;

        if i18 >= $i3 goto label33;

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r235 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

     label33:
        i18 = i18 + 1;

        goto label32;

     label34:
        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t* Shallow tuple copy.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t* @return A new Tuple with the same fields as this.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t*/");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@Override");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@SuppressWarnings(\"unchecked\")");

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235);

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> copy() {");

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\treturn new ");

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<>(this.f0");

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r81);

        if i0 <= 1 goto label35;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label35:
        i19 = 1;

     label36:
        if i19 >= i0 goto label38;

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i19);

        r2 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.String toString()>();

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tthis.");

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r110);

        $i2 = i0 - 1;

        if i19 >= $i2 goto label37;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label37:
        i19 = i19 + 1;

        goto label36;

     label38:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(");");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t/**");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * Creates a new tuple and assigns the given values to the tuple\'s fields.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * This is more convenient than using the constructor, because the compiler can");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * infer the generic type arguments implicitly. For example:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * {@code Tuple3.of(n, x, s)}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * instead of");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t * {@code new Tuple3<Integer, Double, String>(n, x, s)}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t */");

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic static <");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> ");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r235);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> of");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r232);

        $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r92);

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\treturn new ");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<>(");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r99);

        if i0 <= 1 goto label39;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label39:
        i20 = 1;

     label40:
        if i20 >= i0 goto label42;

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\t\tf");

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r103);

        $i1 = i0 - 1;

        if i20 >= $i1 goto label41;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(",");

     label41:
        i20 = i20 + 1;

        goto label40;

     label42:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(");");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("}");

        return;
    }

    private static void createTupleBuilderClasses(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.File r0, r1, $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.io.PrintWriter $r10;
        int i0;

        r0 := @parameter0: java.io.File;

        r1 = staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: java.io.File getPackage(java.io.File,java.lang.String)>(r0, "org.apache.flink.api.java.tuple.builder");

        i0 = 1;

     label1:
        if i0 > 25 goto label2;

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Builder.java");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r9);

        $r10 = new java.io.PrintWriter;

        specialinvoke $r10.<java.io.PrintWriter: void <init>(java.io.File)>($r4);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void writeTupleBuilderClass(java.io.PrintWriter,int)>($r10, i0);

        virtualinvoke $r10.<java.io.PrintWriter: void flush()>();

        virtualinvoke $r10.<java.io.PrintWriter: void close()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void printGenericsString(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>("<");

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(">");

        return;
    }

    private static void writeTupleBuilderClass(java.io.PrintWriter, int)
    {
        java.io.PrintWriter r0;
        int i0, i1, i2, i3;
        java.lang.String r1, $r6, $r11, $r16, $r20, $r24, $r28, $r33, $r37, $r42, $r46, $r53, $r59;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25, $r26, $r27, $r29, $r30, $r31, $r32, $r34, $r35, $r36, $r38, $r39, $r40, $r41, $r43, $r44, $r45, $r47, $r48, $r49, $r50, $r51, $r52, $r54, $r55, $r56, $r57, $r58;

        r0 := @parameter0: java.io.PrintWriter;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tuple");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Builder");

        r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String HEADER>;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("package org.apache.flink.api.java.tuple.builder;");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("import org.apache.flink.annotation.Public;");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("import org.apache.flink.api.java.tuple.Tuple");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("import java.util.ArrayList;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("import java.util.List;");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("/**");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * A builder class for {@link Tuple");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}.");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" *");

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * @param <T");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> The type of field ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" */");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("@Public");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("public class ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r20);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void printGenericsString(java.io.PrintWriter,int)>(r0, i0);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>(" {");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tprivate List<Tuple");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r24);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void printGenericsString(java.io.PrintWriter,int)>(r0, i0);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("> tuples = new ArrayList<>();");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r28);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void printGenericsString(java.io.PrintWriter,int)>(r0, i0);

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(" add(");

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        if i2 <= 0 goto label4;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label4:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("T");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r53);

        i2 = i2 + 1;

        goto label3;

     label5:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("){");

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\ttuples.add(new Tuple");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<>(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r33);

        i3 = 0;

     label6:
        if i3 >= i0 goto label8;

        if i3 <= 0 goto label7;

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label7:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("f");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r46);

        i3 = i3 + 1;

        goto label6;

     label8:
        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("));");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t\treturn this;");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t@SuppressWarnings(\"unchecked\")");

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tpublic Tuple");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r37);

        staticinvoke <org.apache.flink.api.java.tuple.TupleGenerator: void printGenericsString(java.io.PrintWriter,int)>(r0, i0);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("[] build(){");

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t\treturn tuples.toArray(new Tuple");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[tuples.size()]);");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("\t}");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("}");

        return;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;

        <org.apache.flink.api.java.tuple.TupleGenerator: int LAST> = 25;

        <org.apache.flink.api.java.tuple.TupleGenerator: int FIRST> = 1;

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String TUPLE_CLASSNAME> = "Tuple";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String TUPLE_PACKAGE> = "org.apache.flink.api.java.tuple";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String END_INDICATOR> = "END_OF_TUPLE_DEPENDENT_CODE";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String BEGIN_INDICATOR> = "BEGIN_OF_TUPLE_DEPENDENT_CODE";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String SETTER_ARG_NAME> = "f";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String GEN_TYPE_PREFIX> = "T";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String BUILDER_SUFFIX> = "builder";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String PACKAGE> = "org.apache.flink.api.java.tuple";

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String ROOT_DIRECTORY> = "./flink-core/src/main/java";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// --------------------------------------------------------------\n//  THIS IS A GENERATED SOURCE FILE. DO NOT EDIT!\n//  GENERATED FROM ");

        $r2 = class "Lorg/apache/flink/api/java/tuple/TupleGenerator;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n// --------------------------------------------------------------\n\n");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.flink.api.java.tuple.TupleGenerator: java.lang.String HEADER> = $r6;

        return;
    }
}
