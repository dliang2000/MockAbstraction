public class org.mockito.internal.stubbing.defaultanswers.ReturnsMocks extends java.lang.Object implements org.mockito.stubbing.Answer, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.mockito.internal.MockitoCore mockitoCore;
    private final org.mockito.stubbing.Answer delegate;

    public void <init>()
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsMocks r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues $r2;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mockito.internal.MockitoCore;

        specialinvoke $r1.<org.mockito.internal.MockitoCore: void <init>()>();

        r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: org.mockito.internal.MockitoCore mockitoCore> = $r1;

        $r2 = new org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues;

        specialinvoke $r2.<org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValues: void <init>()>();

        r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: org.mockito.stubbing.Answer delegate> = $r2;

        return;
    }

    public java.lang.Object answer(org.mockito.invocation.InvocationOnMock) throws java.lang.Throwable
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsMocks r0;
        org.mockito.invocation.InvocationOnMock r1;
        java.lang.Object r2, $r6;
        org.mockito.stubbing.Answer $r3;
        java.lang.reflect.Method $r4;
        java.lang.Class $r5;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;

        r1 := @parameter0: org.mockito.invocation.InvocationOnMock;

        $r3 = r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: org.mockito.stubbing.Answer delegate>;

        r2 = interfaceinvoke $r3.<org.mockito.stubbing.Answer: java.lang.Object answer(org.mockito.invocation.InvocationOnMock)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r4 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.reflect.Method getMethod()>();

        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r6 = virtualinvoke r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: java.lang.Object returnValueFor(java.lang.Class)>($r5);

        return $r6;
    }

    java.lang.Object returnValueFor(java.lang.Class)
    {
        org.mockito.internal.stubbing.defaultanswers.ReturnsMocks r0;
        java.lang.Class r1;
        org.mockito.internal.MockitoCore $r2, $r4;
        boolean $z0;
        org.mockito.internal.creation.MockSettingsImpl $r3;
        org.mockito.MockSettings $r5;
        java.lang.Object $r6;

        r0 := @this: org.mockito.internal.stubbing.defaultanswers.ReturnsMocks;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: org.mockito.internal.MockitoCore mockitoCore>;

        $z0 = virtualinvoke $r2.<org.mockito.internal.MockitoCore: boolean isTypeMockable(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: org.mockito.internal.MockitoCore mockitoCore>;

        $r3 = new org.mockito.internal.creation.MockSettingsImpl;

        specialinvoke $r3.<org.mockito.internal.creation.MockSettingsImpl: void <init>()>();

        $r5 = virtualinvoke $r3.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>(r0);

        $r6 = virtualinvoke $r4.<org.mockito.internal.MockitoCore: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r1, $r5);

        return $r6;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.stubbing.defaultanswers.ReturnsMocks: long serialVersionUID> = -6755257986994634579L;

        return;
    }
}
