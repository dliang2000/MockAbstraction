public class org.apache.flink.api.common.operators.ExpressionKeysTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testBasicType()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r1;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r3;
        int[] $r4, $r5;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r3 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r3.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        $r4 = newarray (int)[1];

        $r4[0] = 0;

        $r5 = virtualinvoke $r3.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r4, $r5);

        return;
    }

    public void testGenericNonKeyType()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r2;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r3;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r2 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$GenericNonKeyType;");

        $r3 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r3.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r2);

        return;
    }

    public void testKeyGenericType()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r3;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r4;
        int[] $r5, $r6;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r3 = new org.apache.flink.api.java.typeutils.GenericTypeInfo;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.GenericTypeInfo: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$GenericKeyType;");

        $r4 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r4.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r3);

        $r5 = newarray (int)[1];

        $r5[0] = 0;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r5, $r6);

        return;
    }

    public void testTupleRangeCheck() throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        java.lang.reflect.Method r1;
        java.lang.Class[] $r3;
        java.lang.Class $r4;
        java.lang.Object[] $r5, $r9, $r13;
        int[] $r6, $r10, $r14;
        java.lang.Integer $r7, $r11, $r15;
        java.lang.Throwable $r17, r18;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "[I";

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[1] = $r4;

        r1 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(class "Lorg/apache/flink/api/common/operators/Keys;", "rangeCheckFields", $r3);

        $r5 = newarray (java.lang.Object)[2];

        $r6 = newarray (int)[4];

        $r6[0] = 1;

        $r6[1] = 2;

        $r6[2] = 3;

        $r6[3] = 4;

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r5[1] = $r7;

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

        $r9 = newarray (java.lang.Object)[2];

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r9[1] = $r11;

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r9);

        r18 = null;

     label1:
        $r13 = newarray (java.lang.Object)[2];

        $r14 = newarray (int)[1];

        $r14[0] = 5;

        $r13[0] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13[1] = $r15;

        virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        r18 = $r17;

     label4:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r18);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void testStandardTupleKeys()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        int[] r2, $r13, $r14, $r16, $r17, r18, r20;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r3;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i3, $i5, $i6, $i8, i10, i11;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r12, $r15;
        long $l2, $l4, $l7, $l9;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r3 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r4 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[7];

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[0] = $r5;

        $r6 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[1] = $r6;

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[2] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[3] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[4] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[5] = $r10;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[6] = $r11;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r4);

        i10 = 1;

     label1:
        if i10 >= 8 goto label4;

        r2 = newarray (int)[i10];

        i11 = 0;

     label2:
        if i11 >= i10 goto label3;

        r2[i11] = i11;

        i11 = i11 + 1;

        goto label2;

     label3:
        $i0 = lengthof r2;

        r18 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, $i0);

        $r12 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>(r18, $r3);

        $r13 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>(r2, $r13);

        $i1 = lengthof r2;

        $l2 = (long) $i1;

        $r14 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        $i3 = lengthof $r14;

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(int[])>(r2);

        $i5 = lengthof r2;

        r20 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, $i5);

        $r15 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>(r20, $r3);

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>(r2, $r16);

        $i6 = lengthof r2;

        $l7 = (long) $i6;

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        $i8 = lengthof $r17;

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l7, $l9);

        i10 = i10 + 1;

        goto label1;

     label4:
        return;
    }

    public void testInvalidTuple() throws java.lang.Throwable
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        int i0, i1;
        java.lang.String[] r4, $r16, $r17, $r18, $r19, $r20;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r6, $r9;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r7, $r10;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r8, $r11, $r12, $r13, $r14;
        java.lang.String[][] $r15;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r21;
        java.lang.Throwable $r22, r23;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r10 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10[0] = $r11;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10[1] = $r12;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r10[2] = $r13;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r10);

        $r7[1] = $r9;

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[2] = $r14;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r15 = newarray (java.lang.String[])[5];

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "f0.f1";

        $r15[0] = $r16;

        $r17 = newarray (java.lang.String)[1];

        $r17[0] = "f11";

        $r15[1] = $r17;

        $r18 = newarray (java.lang.String)[1];

        $r18[0] = "f-35";

        $r15[2] = $r18;

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "f0.f33";

        $r15[3] = $r19;

        $r20 = newarray (java.lang.String)[1];

        $r20[0] = "f1.f33";

        $r15[4] = $r20;

        i0 = lengthof $r15;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r4 = $r15[i1];

        r23 = null;

     label2:
        $r21 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r21.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>(r4, $r6);

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

        r23 = $r22;

     label5:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r23);

        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void testTupleNonKeyField()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation $r6;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r7;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r2 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r3[1] = $r5;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$GenericNonKeyType;");

        $r3[2] = $r6;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r7 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r7.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(2, $r2);

        return;
    }

    public void testTupleKeyExpansion()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r3, $r6, $r49, $r52, $r54;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r4, $r7, $r50, $r53, $r55;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r5, $r8, $r9, $r10, $r11, $r51, $r56, $r57, $r58, $r59, $r60, $r61;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r12, $r15, $r18, $r21, $r25, $r28, $r31, $r34, $r37, $r41, $r45, $r62, $r65, $r69, $r72, $r75, $r78, $r81;
        int[] $r13, $r14, $r16, $r17, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r35, $r36, $r39, $r40, $r43, $r44, $r47, $r48, $r63, $r64, $r66, $r67, $r68, $r70, $r71, $r73, $r74, $r76, $r77, $r79, $r80, $r82, $r83;
        java.lang.String[] $r38, $r42, $r46;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r3 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r4 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r5 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[0] = $r5;

        $r6 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r7 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[0] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[1] = $r9;

        $r10 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r7[2] = $r10;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r7);

        $r4[1] = $r6;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r4[2] = $r11;

        specialinvoke $r3.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r4);

        $r12 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r3);

        $r13 = newarray (int)[1];

        $r13[0] = 0;

        $r14 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r13, $r14);

        $r15 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, $r3);

        $r16 = newarray (int)[3];

        $r16[0] = 1;

        $r16[1] = 2;

        $r16[2] = 3;

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r16, $r17);

        $r18 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r18.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(2, $r3);

        $r19 = newarray (int)[1];

        $r19[0] = 4;

        $r20 = virtualinvoke $r18.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r19, $r20);

        $r21 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r22 = newarray (int)[3];

        $r22[0] = 0;

        $r22[1] = 1;

        $r22[2] = 2;

        specialinvoke $r21.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r22, $r3);

        $r23 = newarray (int)[5];

        $r23[0] = 0;

        $r23[1] = 1;

        $r23[2] = 2;

        $r23[3] = 3;

        $r23[4] = 4;

        $r24 = virtualinvoke $r21.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r23, $r24);

        $r25 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r25.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>(null, $r3, 1);

        $r26 = newarray (int)[5];

        $r26[0] = 0;

        $r26[1] = 1;

        $r26[2] = 2;

        $r26[3] = 3;

        $r26[4] = 4;

        $r27 = virtualinvoke $r25.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r26, $r27);

        $r28 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r28.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r3);

        $r29 = newarray (int)[5];

        $r29[0] = 0;

        $r29[1] = 1;

        $r29[2] = 2;

        $r29[3] = 3;

        $r29[4] = 4;

        $r30 = virtualinvoke $r28.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r29, $r30);

        $r31 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r31.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("_", $r3);

        $r32 = newarray (int)[5];

        $r32[0] = 0;

        $r32[1] = 1;

        $r32[2] = 2;

        $r32[3] = 3;

        $r32[4] = 4;

        $r33 = virtualinvoke $r31.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r32, $r33);

        $r34 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r34.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2", $r3);

        $r35 = newarray (int)[1];

        $r35[0] = 4;

        $r36 = virtualinvoke $r34.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r35, $r36);

        $r37 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r38 = newarray (java.lang.String)[5];

        $r38[0] = "f0";

        $r38[1] = "f1.f0";

        $r38[2] = "f1.f1";

        $r38[3] = "f1.f2";

        $r38[4] = "f2";

        specialinvoke $r37.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r38, $r3);

        $r39 = newarray (int)[5];

        $r39[0] = 0;

        $r39[1] = 1;

        $r39[2] = 2;

        $r39[3] = 3;

        $r39[4] = 4;

        $r40 = virtualinvoke $r37.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r39, $r40);

        $r41 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r42 = newarray (java.lang.String)[4];

        $r42[0] = "f0";

        $r42[1] = "f1.f0";

        $r42[2] = "f1.f1";

        $r42[3] = "f2";

        specialinvoke $r41.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r42, $r3);

        $r43 = newarray (int)[4];

        $r43[0] = 0;

        $r43[1] = 1;

        $r43[2] = 2;

        $r43[3] = 4;

        $r44 = virtualinvoke $r41.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r43, $r44);

        $r45 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r46 = newarray (java.lang.String)[2];

        $r46[0] = "f2";

        $r46[1] = "f0";

        specialinvoke $r45.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r46, $r3);

        $r47 = newarray (int)[2];

        $r47[0] = 4;

        $r47[1] = 0;

        $r48 = virtualinvoke $r45.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r47, $r48);

        $r49 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r50 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r51 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r50[0] = $r51;

        $r52 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r53 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r54 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r55 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r56 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r55[0] = $r56;

        $r57 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r55[1] = $r57;

        $r58 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r55[2] = $r58;

        specialinvoke $r54.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r55);

        $r53[0] = $r54;

        $r59 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r53[1] = $r59;

        $r60 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r53[2] = $r60;

        specialinvoke $r52.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r53);

        $r50[1] = $r52;

        $r61 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r50[2] = $r61;

        specialinvoke $r49.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r50);

        $r62 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r62.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r49);

        $r63 = newarray (int)[1];

        $r63[0] = 0;

        $r64 = virtualinvoke $r62.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r63, $r64);

        $r65 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r66 = newarray (int)[3];

        $r66[0] = 0;

        $r66[1] = 1;

        $r66[2] = 2;

        specialinvoke $r65.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r66, $r49);

        $r67 = newarray (int)[7];

        $r67[0] = 0;

        $r67[1] = 1;

        $r67[2] = 2;

        $r67[3] = 3;

        $r67[4] = 4;

        $r67[5] = 5;

        $r67[6] = 6;

        $r68 = virtualinvoke $r65.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r67, $r68);

        $r69 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r69.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r49);

        $r70 = newarray (int)[7];

        $r70[0] = 0;

        $r70[1] = 1;

        $r70[2] = 2;

        $r70[3] = 3;

        $r70[4] = 4;

        $r70[5] = 5;

        $r70[6] = 6;

        $r71 = virtualinvoke $r69.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r70, $r71);

        $r72 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r72.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("_", $r49);

        $r73 = newarray (int)[7];

        $r73[0] = 0;

        $r73[1] = 1;

        $r73[2] = 2;

        $r73[3] = 3;

        $r73[4] = 4;

        $r73[5] = 5;

        $r73[6] = 6;

        $r74 = virtualinvoke $r72.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r73, $r74);

        $r75 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r75.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f1.f0.*", $r49);

        $r76 = newarray (int)[3];

        $r76[0] = 1;

        $r76[1] = 2;

        $r76[2] = 3;

        $r77 = virtualinvoke $r75.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r76, $r77);

        $r78 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r78.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f1.f0", $r49);

        $r79 = newarray (int)[3];

        $r79[0] = 1;

        $r79[1] = 2;

        $r79[2] = 3;

        $r80 = virtualinvoke $r78.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r79, $r80);

        $r81 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r81.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2", $r49);

        $r82 = newarray (int)[1];

        $r82[0] = 6;

        $r83 = virtualinvoke $r81.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r82, $r83);

        return;
    }

    public void testPojoKeys()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r2, $r5, $r8, $r11, $r14, $r17;
        int[] $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r2 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r2.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        $r3 = newarray (int)[5];

        $r3[0] = 0;

        $r3[1] = 1;

        $r3[2] = 2;

        $r3[3] = 3;

        $r3[4] = 4;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r3, $r4);

        $r5 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("p1.*", r1);

        $r6 = newarray (int)[2];

        $r6[0] = 1;

        $r6[1] = 2;

        $r7 = virtualinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r6, $r7);

        $r8 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r8.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("p2.*", r1);

        $r9 = newarray (int)[2];

        $r9[0] = 3;

        $r9[1] = 4;

        $r10 = virtualinvoke $r8.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r9, $r10);

        $r11 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("p1", r1);

        $r12 = newarray (int)[2];

        $r12[0] = 1;

        $r12[1] = 2;

        $r13 = virtualinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r12, $r13);

        $r14 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r14.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("p2", r1);

        $r15 = newarray (int)[2];

        $r15[0] = 3;

        $r15[1] = 4;

        $r16 = virtualinvoke $r14.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r15, $r16);

        $r17 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r17.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("i0", r1);

        $r18 = newarray (int)[1];

        $r18[0] = 0;

        $r19 = virtualinvoke $r17.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r18, $r19);

        return;
    }

    public void testTupleWithNestedPojo()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r6;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r7, $r10, $r13, $r16, $r20, $r23;
        int[] $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r24, $r25;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r2 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r3[1] = $r5;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r3[2] = $r6;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r7 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r7.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r2);

        $r8 = newarray (int)[1];

        $r8[0] = 0;

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r8, $r9);

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, $r2);

        $r11 = newarray (int)[2];

        $r11[0] = 1;

        $r11[1] = 2;

        $r12 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r11, $r12);

        $r13 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r13.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(2, $r2);

        $r14 = newarray (int)[5];

        $r14[0] = 3;

        $r14[1] = 4;

        $r14[2] = 5;

        $r14[3] = 6;

        $r14[4] = 7;

        $r15 = virtualinvoke $r13.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r14, $r15);

        $r16 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r17 = newarray (int)[0];

        specialinvoke $r16.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>($r17, $r2, 1);

        $r18 = newarray (int)[8];

        $r18[0] = 0;

        $r18[1] = 1;

        $r18[2] = 2;

        $r18[3] = 3;

        $r18[4] = 4;

        $r18[5] = 5;

        $r18[6] = 6;

        $r18[7] = 7;

        $r19 = virtualinvoke $r16.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r18, $r19);

        $r20 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r20.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r2);

        $r21 = newarray (int)[8];

        $r21[0] = 0;

        $r21[1] = 1;

        $r21[2] = 2;

        $r21[3] = 3;

        $r21[4] = 4;

        $r21[5] = 5;

        $r21[6] = 6;

        $r21[7] = 7;

        $r22 = virtualinvoke $r20.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r21, $r22);

        $r23 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r23.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2.p1.*", $r2);

        $r24 = newarray (int)[2];

        $r24[0] = 4;

        $r24[1] = 5;

        $r25 = virtualinvoke $r23.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: int[] computeLogicalKeyPositions()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(int[],int[])>($r24, $r25);

        return;
    }

    public void testOriginalTypes()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r3, $r8, $r10, $r12, $r14, $r16, $r18, $r21, $r25, $r27, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42, $r44, $r46, $r48, $r50, $r52;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r4, $r9, $r22;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r6, $r13, $r17, $r23, $r24, $r31, $r35, $r39, $r43, $r47, $r51;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r7, $r11, $r15, $r19, $r26, $r29, $r33, $r37, $r41, $r45, $r49;
        int[] $r20;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r2 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r3 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r4 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r3[0] = $r4;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r3[1] = $r5;

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r3[2] = $r6;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r3);

        $r7 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r7.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r2);

        $r8 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r8[0] = $r9;

        $r10 = virtualinvoke $r7.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r8, $r10);

        $r11 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, $r2);

        $r12 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r13 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r12[0] = $r13;

        $r14 = virtualinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r12, $r14);

        $r15 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(2, $r2);

        $r16 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r16[0] = $r17;

        $r18 = virtualinvoke $r15.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r16, $r18);

        $r19 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r20 = newarray (int)[0];

        specialinvoke $r19.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation,boolean)>($r20, $r2, 1);

        $r21 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r22 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r21[0] = $r22;

        $r23 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r21[1] = $r23;

        $r24 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r21[2] = $r24;

        $r25 = virtualinvoke $r19.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r21, $r25);

        $r26 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r26.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r2);

        $r27 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r27[0] = $r2;

        $r28 = virtualinvoke $r26.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r27, $r28);

        $r29 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r29.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f1", $r2);

        $r30 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r31 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r30[0] = $r31;

        $r32 = virtualinvoke $r29.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r30, $r32);

        $r33 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r33.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f1.*", $r2);

        $r34 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r35 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r34[0] = $r35;

        $r36 = virtualinvoke $r33.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r34, $r36);

        $r37 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r37.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2.*", $r2);

        $r38 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r39 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r38[0] = $r39;

        $r40 = virtualinvoke $r37.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r38, $r40);

        $r41 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r41.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2.p2", $r2);

        $r42 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r43 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r42[0] = $r43;

        $r44 = virtualinvoke $r41.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r42, $r44);

        $r45 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r45.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2.p2.*", $r2);

        $r46 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r47 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r46[0] = $r47;

        $r48 = virtualinvoke $r45.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r46, $r48);

        $r49 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r49.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("f2.p2._", $r2);

        $r50 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[1];

        $r51 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r50[0] = $r51;

        $r52 = virtualinvoke $r49.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: org.apache.flink.api.common.typeinfo.TypeInformation[] getOriginalKeyFieldTypes()>();

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r50, $r52);

        return;
    }

    public void testNonKeyPojoField()
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r2;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithNonKeyField;");

        $r2 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r2.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("b", r1);

        return;
    }

    public void testInvalidPojo() throws java.lang.Throwable
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        int i0, i1;
        java.lang.String[] r4, $r7, $r8;
        java.lang.String[][] $r6;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9;
        java.lang.Throwable $r10, r11;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/PojoTypeExtractionTest$ComplexNestedClass;");

        $r6 = newarray (java.lang.String[])[2];

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "nonexistent";

        $r6[0] = $r7;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "date.abc";

        $r6[1] = $r8;

        i0 = lengthof $r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r4 = $r6[i1];

        r11 = null;

     label2:
        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>(r4, r1);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r11 = $r10;

     label5:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r11);

        i1 = i1 + 1;

        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void testAreCompatible1() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r4 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r4.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("a", r1);

        $r5 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("b", r1);

        $z0 = virtualinvoke $r4.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r5);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r4);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible2() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("a", r1);

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r5);

        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible3() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r1, $r7, $r8;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9, $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r5);

        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible4() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r10, $r12;
        java.lang.String[] $r11;
        int[] $r13;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[2] = $r9;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = "p1";

        $r11[1] = "i0";

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r11, r1);

        $r12 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r13 = newarray (int)[3];

        $r13[0] = 0;

        $r13[1] = 0;

        $r13[2] = 2;

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r5);

        $z0 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r12.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible5() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9, $r11;
        java.lang.String[] $r10;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "p1.b";

        $r10[1] = "p2.a2";

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, r1);

        $r11 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", $r5);

        $z0 = virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r11);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r9);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testAreCompatible6() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9, $r10;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("a", r1);

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(1, $r5);

        virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r10);

        return;
    }

    public void testAreCompatible7() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r9, $r11;
        java.lang.String[] $r10;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo1;");

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        $r9 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "a";

        $r10[1] = "b";

        specialinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r10, r1);

        $r11 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r11.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int,org.apache.flink.api.common.typeinfo.TypeInformation)>(0, $r5);

        virtualinvoke $r9.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r11);

        return;
    }

    public void testAreCompatible8() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r1, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r5;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r6;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1 $r7;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        r1 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$Pojo2;");

        $r5 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        specialinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(java.lang.String,org.apache.flink.api.common.typeinfo.TypeInformation)>("*", r1);

        $r6 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r7 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1;

        specialinvoke $r7.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector1: void <init>()>();

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        specialinvoke $r6.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r7, r2, $r8);

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testAreCompatible9() throws org.apache.flink.api.common.operators.Keys$IncompatibleKeysException
    {
        org.apache.flink.api.common.operators.ExpressionKeysTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r5, $r14;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r6, $r15;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r8, $r9, $r16, $r17;
        org.apache.flink.api.common.operators.Keys$ExpressionKeys $r10;
        int[] $r11;
        org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys $r12;
        org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3 $r13;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ExpressionKeysTest;

        $r5 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r6 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r6[0] = $r7;

        $r8 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r6[1] = $r8;

        $r9 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r6[2] = $r9;

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r6);

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation getForClass(java.lang.Class)>(class "Lorg/apache/flink/api/common/operators/ExpressionKeysTest$PojoWithMultiplePojos;");

        $r10 = new org.apache.flink.api.common.operators.Keys$ExpressionKeys;

        $r11 = newarray (int)[2];

        $r11[0] = 2;

        $r11[1] = 0;

        specialinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: void <init>(int[],org.apache.flink.api.common.typeinfo.TypeInformation)>($r11, $r5);

        $r12 = new org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys;

        $r13 = new org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3;

        specialinvoke $r13.<org.apache.flink.api.common.operators.SelectorFunctionKeysTest$KeySelector3: void <init>()>();

        $r14 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r15 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        $r15[0] = $r16;

        $r17 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r15[1] = $r17;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r15);

        specialinvoke $r12.<org.apache.flink.api.common.operators.Keys$SelectorFunctionKeys: void <init>(org.apache.flink.api.java.functions.KeySelector,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, r2, $r14);

        $z0 = virtualinvoke $r10.<org.apache.flink.api.common.operators.Keys$ExpressionKeys: boolean areCompatible(org.apache.flink.api.common.operators.Keys)>($r12);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }
}
