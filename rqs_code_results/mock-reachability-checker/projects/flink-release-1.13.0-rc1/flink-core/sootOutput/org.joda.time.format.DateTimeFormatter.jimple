public class org.joda.time.format.DateTimeFormatter extends java.lang.Object
{
    private final org.joda.time.format.InternalPrinter iPrinter;
    private final org.joda.time.format.InternalParser iParser;
    private final java.util.Locale iLocale;
    private final boolean iOffsetParsed;
    private final org.joda.time.Chronology iChrono;
    private final org.joda.time.DateTimeZone iZone;
    private final java.lang.Integer iPivotYear;
    private final int iDefaultYear;

    public void <init>(org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.DateTimePrinter r1;
        org.joda.time.format.DateTimeParser r2;
        org.joda.time.format.InternalPrinter $r3;
        org.joda.time.format.InternalParser $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.format.DateTimePrinter;

        r2 := @parameter1: org.joda.time.format.DateTimeParser;

        $r3 = staticinvoke <org.joda.time.format.DateTimePrinterInternalPrinter: org.joda.time.format.InternalPrinter of(org.joda.time.format.DateTimePrinter)>(r1);

        $r4 = staticinvoke <org.joda.time.format.DateTimeParserInternalParser: org.joda.time.format.InternalParser of(org.joda.time.format.DateTimeParser)>(r2);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser)>($r3, $r4);

        return;
    }

    void <init>(org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter r1;
        org.joda.time.format.InternalParser r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.format.InternalPrinter;

        r2 := @parameter1: org.joda.time.format.InternalParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter> = r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser> = r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = null;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = 0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = null;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = null;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = null;

        r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> = 2000;

        return;
    }

    private void <init>(org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser, java.util.Locale, boolean, org.joda.time.Chronology, org.joda.time.DateTimeZone, java.lang.Integer, int)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter r1;
        org.joda.time.format.InternalParser r2;
        java.util.Locale r3;
        boolean z0;
        org.joda.time.Chronology r4;
        org.joda.time.DateTimeZone r5;
        java.lang.Integer r6;
        int i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.format.InternalPrinter;

        r2 := @parameter1: org.joda.time.format.InternalParser;

        r3 := @parameter2: java.util.Locale;

        z0 := @parameter3: boolean;

        r4 := @parameter4: org.joda.time.Chronology;

        r5 := @parameter5: org.joda.time.DateTimeZone;

        r6 := @parameter6: java.lang.Integer;

        i0 := @parameter7: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter> = r1;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser> = r2;

        r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> = r3;

        r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> = z0;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> = r4;

        r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> = r5;

        r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> = r6;

        r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> = i0;

        return;
    }

    public boolean isPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.joda.time.format.DateTimePrinter getPrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;
        org.joda.time.format.DateTimePrinter $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r2 = staticinvoke <org.joda.time.format.InternalPrinterDateTimePrinter: org.joda.time.format.DateTimePrinter of(org.joda.time.format.InternalPrinter)>($r1);

        return $r2;
    }

    org.joda.time.format.InternalPrinter getPrinter0()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        return $r1;
    }

    public boolean isParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser $r1;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.joda.time.format.DateTimeParser getParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser $r1;
        org.joda.time.format.DateTimeParser $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r2 = staticinvoke <org.joda.time.format.InternalParserDateTimeParser: org.joda.time.format.DateTimeParser of(org.joda.time.format.InternalParser)>($r1);

        return $r2;
    }

    org.joda.time.format.InternalParser getParser0()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)
    {
        org.joda.time.format.DateTimeFormatter r0, $r3;
        java.util.Locale r1, $r2, $r9;
        int $i0;
        java.lang.Integer $r4;
        org.joda.time.DateTimeZone $r5;
        org.joda.time.Chronology $r6;
        boolean $z0, $z1;
        org.joda.time.format.InternalParser $r7;
        org.joda.time.format.InternalPrinter $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        if r1 == $r2 goto label1;

        if r1 == null goto label2;

        $r9 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>();

        $z1 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r8, $r7, r1, $z0, $r6, $r5, $r4, $i0);

        return $r3;
    }

    public java.util.Locale getLocale()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.util.Locale $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withOffsetParsed()
    {
        org.joda.time.format.DateTimeFormatter r0, $r1;
        boolean $z0;
        int $i0;
        java.lang.Integer $r2;
        org.joda.time.Chronology $r3;
        java.util.Locale $r4;
        org.joda.time.format.InternalParser $r5;
        org.joda.time.format.InternalPrinter $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 != 1 goto label1;

        return r0;

     label1:
        $r1 = new org.joda.time.format.DateTimeFormatter;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r6, $r5, $r4, 1, $r3, null, $r2, $i0);

        return $r1;
    }

    public boolean isOffsetParsed()
    {
        org.joda.time.format.DateTimeFormatter r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        return $z0;
    }

    public org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatter r0, $r3;
        org.joda.time.Chronology r1, $r2;
        int $i0;
        java.lang.Integer $r4;
        org.joda.time.DateTimeZone $r5;
        boolean $z0;
        java.util.Locale $r6;
        org.joda.time.format.InternalParser $r7;
        org.joda.time.format.InternalPrinter $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.Chronology;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r2 != r1 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r8, $r7, $r6, $z0, r1, $r5, $r4, $i0);

        return $r3;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        return $r1;
    }

    public org.joda.time.Chronology getChronolgy()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withZoneUTC()
    {
        org.joda.time.format.DateTimeFormatter r0, $r2;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)>($r1);

        return $r2;
    }

    public org.joda.time.format.DateTimeFormatter withZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.format.DateTimeFormatter r0, $r3;
        org.joda.time.DateTimeZone r1, $r2;
        int $i0;
        java.lang.Integer $r4;
        org.joda.time.Chronology $r5;
        java.util.Locale $r6;
        org.joda.time.format.InternalParser $r7;
        org.joda.time.format.InternalPrinter $r8;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r2 != r1 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.format.DateTimeFormatter;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r8, $r7, $r6, 0, $r5, r1, $r4, $i0);

        return $r3;
    }

    public org.joda.time.DateTimeZone getZone()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)
    {
        org.joda.time.format.DateTimeFormatter r0, $r4;
        java.lang.Integer r1, $r2, $r3, $r10;
        int $i0;
        org.joda.time.DateTimeZone $r5;
        org.joda.time.Chronology $r6;
        boolean $z0, $z1;
        java.util.Locale $r7;
        org.joda.time.format.InternalParser $r8;
        org.joda.time.format.InternalPrinter $r9;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Integer;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r2 == r1 goto label1;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        if $r3 == null goto label2;

        $r10 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $z1 = virtualinvoke $r10.<java.lang.Integer: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        return r0;

     label2:
        $r4 = new org.joda.time.format.DateTimeFormatter;

        $r9 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r9, $r8, $r7, $z0, $r6, $r5, r1, $i0);

        return $r4;
    }

    public org.joda.time.format.DateTimeFormatter withPivotYear(int)
    {
        org.joda.time.format.DateTimeFormatter r0, $r2;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withPivotYear(java.lang.Integer)>($r1);

        return $r2;
    }

    public java.lang.Integer getPivotYear()
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Integer $r1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        return $r1;
    }

    public org.joda.time.format.DateTimeFormatter withDefaultYear(int)
    {
        org.joda.time.format.DateTimeFormatter r0, $r1;
        int i0;
        java.lang.Integer $r2;
        org.joda.time.DateTimeZone $r3;
        org.joda.time.Chronology $r4;
        boolean $z0;
        java.util.Locale $r5;
        org.joda.time.format.InternalParser $r6;
        org.joda.time.format.InternalPrinter $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        i0 := @parameter0: int;

        $r1 = new org.joda.time.format.DateTimeFormatter;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        $r2 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r1.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.InternalPrinter,org.joda.time.format.InternalParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r7, $r6, $r5, $z0, $r4, $r3, $r2, i0);

        return $r1;
    }

    public int getDefaultYear()
    {
        org.joda.time.format.DateTimeFormatter r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        return $i0;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer r1;
        org.joda.time.ReadableInstant r2;
        java.io.IOException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadableInstant;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadableInstant) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer r1;
        org.joda.time.ReadableInstant r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadableInstant) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable r1;
        org.joda.time.ReadableInstant r2;
        long l0;
        org.joda.time.Chronology r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2);

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>(r1, l0, r3);

        return;
    }

    public void printTo(java.lang.StringBuffer, long)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer r1;
        long l0;
        java.io.IOException $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>(r1, l0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, long) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer r1;
        long l0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>(r1, l0);

        return;
    }

    public void printTo(java.lang.Appendable, long) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable r1;
        long l0;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology)>(r1, l0, null);

        return;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.StringBuffer r1;
        org.joda.time.ReadablePartial r2;
        java.io.IOException $r4;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.io.Writer r1;
        org.joda.time.ReadablePartial r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>(r1, r2);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        org.joda.time.format.InternalPrinter r3;
        java.util.Locale $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        if r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r5;

     label1:
        $r4 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke r3.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r4);

        return;
    }

    public java.lang.String print(org.joda.time.ReadableInstant)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadableInstant r1;
        java.lang.StringBuilder $r4;
        org.joda.time.format.InternalPrinter $r5;
        int $i0;
        java.lang.String $r6;
        java.io.IOException $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        $r4 = new java.lang.StringBuilder;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i0 = interfaceinvoke $r5.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadableInstant)>($r4, r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String print(long)
    {
        org.joda.time.format.DateTimeFormatter r0;
        long l0;
        java.lang.StringBuilder $r3;
        org.joda.time.format.InternalPrinter $r4;
        int $i1;
        java.lang.String $r5;
        java.io.IOException $r6;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        l0 := @parameter0: long;

        $r3 = new java.lang.StringBuilder;

        $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i1 = interfaceinvoke $r4.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,long)>($r3, l0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.lang.String print(org.joda.time.ReadablePartial)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadablePartial r1;
        java.lang.StringBuilder $r4;
        org.joda.time.format.InternalPrinter $r5;
        int $i0;
        java.lang.String $r6;
        java.io.IOException $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $r4 = new java.lang.StringBuilder;

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        $i0 = interfaceinvoke $r5.<org.joda.time.format.InternalPrinter: int estimatePrintedLength()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i0);

     label1:
        virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.Appendable,org.joda.time.ReadablePartial)>($r4, r1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void printTo(java.lang.Appendable, long, org.joda.time.Chronology) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.Appendable r1;
        long l0, $l1, $l2, $l4, $l5, l8;
        org.joda.time.format.InternalPrinter r2;
        byte $b3, $b6;
        org.joda.time.Chronology r3, r4, $r6;
        org.joda.time.DateTimeZone r5;
        int i7;
        java.util.Locale $r7;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r3 := @parameter2: org.joda.time.Chronology;

        r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter requirePrinter()>();

        r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r3);

        r5 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        i7 = virtualinvoke r5.<org.joda.time.DateTimeZone: int getOffset(long)>(l0);

        $l1 = (long) i7;

        l8 = l0 + $l1;

        $l2 = l0 ^ l8;

        $b3 = $l2 cmp 0L;

        if $b3 >= 0 goto label1;

        $l4 = (long) i7;

        $l5 = l0 ^ $l4;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label1;

        r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        i7 = 0;

        l8 = l0;

     label1:
        $r6 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        interfaceinvoke r2.<org.joda.time.format.InternalPrinter: void printTo(java.lang.Appendable,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l8, $r6, i7, r5, $r7);

        return;
    }

    private org.joda.time.format.InternalPrinter requirePrinter()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalPrinter r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalPrinter iPrinter>;

        if r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Printing not supported");

        throw $r2;

     label1:
        return r1;
    }

    public int parseInto(org.joda.time.ReadWritableInstant, java.lang.String, int)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.ReadWritableInstant r1;
        java.lang.String r2;
        int i0, i2, i4, i5, $i6;
        org.joda.time.format.InternalParser r3;
        long l1, l3, $l7, $l8;
        org.joda.time.DateTimeZone r5, $r8, $r12, $r13, $r14, $r20;
        org.joda.time.Chronology $r6, r18, r19;
        org.joda.time.DateTimeField $r7;
        org.joda.time.format.DateTimeParserBucket $r9;
        java.lang.Integer $r10, $r15, $r16;
        java.util.Locale $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: org.joda.time.ReadWritableInstant;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        if r1 != null goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Instant must not be null");

        throw $r17;

     label1:
        l1 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: long getMillis()>();

        r18 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>();

        $r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r18);

        $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        i2 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l1);

        $r8 = virtualinvoke r18.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>();

        $i6 = virtualinvoke $r8.<org.joda.time.DateTimeZone: int getOffset(long)>(l1);

        $l7 = (long) $i6;

        l3 = l1 + $l7;

        r19 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r18);

        $r9 = new org.joda.time.format.DateTimeParserBucket;

        $r11 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r10 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        specialinvoke $r9.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l3, r19, $r11, $r10, i2);

        i4 = interfaceinvoke r3.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r9, r2, i0);

        $l8 = virtualinvoke $r9.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r2);

        interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l8);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label2;

        $r15 = virtualinvoke $r9.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r15 == null goto label2;

        $r16 = virtualinvoke $r9.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        i5 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        r5 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5);

        r19 = virtualinvoke r19.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r5);

        goto label3;

     label2:
        $r12 = virtualinvoke $r9.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r12 == null goto label3;

        $r14 = virtualinvoke $r9.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        r19 = virtualinvoke r19.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r14);

     label3:
        interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r19);

        $r20 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r20 == null goto label4;

        $r13 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setZone(org.joda.time.DateTimeZone)>($r13);

     label4:
        return i4;
    }

    public long parseMillis(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1;
        org.joda.time.format.InternalParser r2;
        org.joda.time.Chronology r3, $r5;
        org.joda.time.format.DateTimeParserBucket $r6;
        int $i0;
        java.lang.Integer $r7;
        java.util.Locale $r8;
        long $l1;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5);

        $r6 = new org.joda.time.format.DateTimeParserBucket;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r8, $r7, $i0);

        $l1 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: long doParseMillis(org.joda.time.format.InternalParser,java.lang.CharSequence)>(r2, r1);

        return $l1;
    }

    public org.joda.time.LocalDate parseLocalDate(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1;
        org.joda.time.LocalDateTime $r2;
        org.joda.time.LocalDate $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.LocalDateTime: org.joda.time.LocalDate toLocalDate()>();

        return $r3;
    }

    public org.joda.time.LocalTime parseLocalTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1;
        org.joda.time.LocalDateTime $r2;
        org.joda.time.LocalTime $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.LocalDateTime: org.joda.time.LocalTime toLocalTime()>();

        return $r3;
    }

    public org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1, $r10;
        org.joda.time.format.InternalParser r2;
        long l0;
        int i1, $i2, $i3, i4;
        org.joda.time.DateTimeZone r4, $r12, $r13;
        org.joda.time.Chronology $r5, r15;
        org.joda.time.format.DateTimeParserBucket $r6;
        java.lang.Integer $r7, $r11, $r14;
        java.util.Locale $r8;
        java.lang.IllegalArgumentException $r9;
        org.joda.time.LocalDateTime $r16;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        r15 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r6 = new org.joda.time.format.DateTimeParserBucket;

        $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i2 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r15, $r8, $r7, $i2);

        i4 = interfaceinvoke r2.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r6, r1, 0);

        if i4 < 0 goto label3;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i4 < $i3 goto label4;

        l0 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1);

        $r11 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r11 == null goto label1;

        $r14 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        i1 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i1);

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r4);

        goto label2;

     label1:
        $r12 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r12 == null goto label2;

        $r13 = virtualinvoke $r6.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r13);

     label2:
        $r16 = new org.joda.time.LocalDateTime;

        specialinvoke $r16.<org.joda.time.LocalDateTime: void <init>(long,org.joda.time.Chronology)>(l0, r15);

        return $r16;

     label3:
        i4 = i4 ^ -1;

     label4:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i4);

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public org.joda.time.DateTime parseDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1, $r9;
        org.joda.time.format.InternalParser r2;
        long l0;
        org.joda.time.DateTimeZone r4, $r10, $r11, $r12, $r18;
        org.joda.time.format.DateTimeParserBucket $r5;
        int $i1, $i2, i3, i4;
        java.lang.Integer $r6, $r13, $r14;
        java.util.Locale $r7;
        java.lang.IllegalArgumentException $r8;
        boolean $z0;
        org.joda.time.Chronology r15;
        org.joda.time.DateTime $r16, r17;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        r15 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        $r5 = new org.joda.time.format.DateTimeParserBucket;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r5.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r15, $r7, $r6, $i1);

        i3 = interfaceinvoke r2.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r5, r1, 0);

        if i3 < 0 goto label4;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 < $i2 goto label5;

        l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r13 == null goto label1;

        $r14 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        i4 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i4);

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r4);

        goto label2;

     label1:
        $r10 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r10 == null goto label2;

        $r12 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r12);

     label2:
        $r16 = new org.joda.time.DateTime;

        specialinvoke $r16.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, r15);

        r17 = $r16;

        $r18 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r18 == null goto label3;

        $r11 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        r17 = virtualinvoke $r16.<org.joda.time.DateTime: org.joda.time.DateTime withZone(org.joda.time.DateTimeZone)>($r11);

     label3:
        return r17;

     label4:
        i3 = i3 ^ -1;

     label5:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i3);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public org.joda.time.MutableDateTime parseMutableDateTime(java.lang.String)
    {
        org.joda.time.format.DateTimeFormatter r0;
        java.lang.String r1, $r9;
        org.joda.time.format.InternalParser r2;
        long l0;
        org.joda.time.DateTimeZone r4, $r10, $r11, $r12, $r18;
        org.joda.time.format.DateTimeParserBucket $r5;
        int $i1, $i2, i3, i4;
        java.lang.Integer $r6, $r13, $r14;
        java.util.Locale $r7;
        java.lang.IllegalArgumentException $r8;
        boolean $z0;
        org.joda.time.Chronology r15;
        org.joda.time.MutableDateTime $r16;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser requireParser()>();

        r15 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null);

        $r5 = new org.joda.time.format.DateTimeParserBucket;

        $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>;

        $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>;

        $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>;

        specialinvoke $r5.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r15, $r7, $r6, $i1);

        i3 = interfaceinvoke r2.<org.joda.time.format.InternalParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.CharSequence,int)>($r5, r1, 0);

        if i3 < 0 goto label4;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 < $i2 goto label5;

        l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>;

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        if $r13 == null goto label1;

        $r14 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>();

        i4 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        r4 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i4);

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r4);

        goto label2;

     label1:
        $r10 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        if $r10 == null goto label2;

        $r12 = virtualinvoke $r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>();

        r15 = virtualinvoke r15.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r12);

     label2:
        $r16 = new org.joda.time.MutableDateTime;

        specialinvoke $r16.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(l0, r15);

        $r18 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r18 == null goto label3;

        $r11 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        virtualinvoke $r16.<org.joda.time.MutableDateTime: void setZone(org.joda.time.DateTimeZone)>($r11);

     label3:
        return $r16;

     label4:
        i3 = i3 ^ -1;

     label5:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = staticinvoke <org.joda.time.format.FormatUtils: java.lang.String createErrorMessage(java.lang.String,int)>(r1, i3);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private org.joda.time.format.InternalParser requireParser()
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.format.InternalParser r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.InternalParser iParser>;

        if r1 != null goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing not supported");

        throw $r2;

     label1:
        return r1;
    }

    private org.joda.time.Chronology selectChronology(org.joda.time.Chronology)
    {
        org.joda.time.format.DateTimeFormatter r0;
        org.joda.time.Chronology $r1, r4, r5;
        org.joda.time.DateTimeZone $r2, $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatter;

        r4 := @parameter0: org.joda.time.Chronology;

        r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4);

        $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

        if $r1 == null goto label1;

        r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>;

     label1:
        $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        if $r2 == null goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>;

        r5 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r3);

     label2:
        return r5;
    }
}
