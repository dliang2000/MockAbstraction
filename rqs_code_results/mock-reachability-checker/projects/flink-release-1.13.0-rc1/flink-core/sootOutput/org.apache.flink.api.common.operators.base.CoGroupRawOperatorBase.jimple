public class org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase extends org.apache.flink.api.common.operators.DualInputOperator
{
    private org.apache.flink.api.common.operators.Ordering groupOrder1;
    private org.apache.flink.api.common.operators.Ordering groupOrder2;
    private boolean combinableFirst;
    private boolean combinableSecond;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>(r1, r2, r3, r4, r5);

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableFirst> = 0;

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableSecond> = 0;

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.CoGroupFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.functions.CoGroupFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.CoGroupFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        return;
    }

    public void setGroupOrder(int, org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        int i0;
        org.apache.flink.api.common.operators.Ordering r1;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.operators.Ordering;

        if i0 != 0 goto label1;

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1> = r1;

        goto label3;

     label1:
        if i0 != 1 goto label2;

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2> = r1;

        goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    public void setGroupOrderForInputOne(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: void setGroupOrder(int,org.apache.flink.api.common.operators.Ordering)>(0, r1);

        return;
    }

    public void setGroupOrderForInputTwo(org.apache.flink.api.common.operators.Ordering)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.Ordering;

        virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: void setGroupOrder(int,org.apache.flink.api.common.operators.Ordering)>(1, r1);

        return;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrder(int)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        int i0;
        java.lang.IndexOutOfBoundsException $r1;
        org.apache.flink.api.common.operators.Ordering $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder1>;

        return $r3;

     label1:
        if i0 != 1 goto label2;

        $r2 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering groupOrder2>;

        return $r2;

     label2:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrderForInputOne()
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering getGroupOrder(int)>(0);

        return $r1;
    }

    public org.apache.flink.api.common.operators.Ordering getGroupOrderForInputTwo()
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.operators.Ordering $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.Ordering getGroupOrder(int)>(1);

        return $r1;
    }

    public boolean isCombinableFirst()
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableFirst>;

        return $z0;
    }

    public void setCombinableFirst(boolean)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableFirst> = z0;

        return;
    }

    public boolean isCombinableSecond()
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        $z0 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableSecond>;

        return $z0;
    }

    public void setCombinableSecond(boolean)
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: boolean combinableSecond> = z0;

        return;
    }

    protected java.util.List executeOnCollections(java.util.List, java.util.List, org.apache.flink.api.common.functions.RuntimeContext, org.apache.flink.api.common.ExecutionConfig) throws java.lang.Exception
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        java.util.List r1, r2;
        org.apache.flink.api.common.functions.RuntimeContext r3;
        org.apache.flink.api.common.ExecutionConfig r4;
        org.apache.flink.api.common.typeinfo.TypeInformation r5, r6, $r30;
        int[] r7, r8;
        boolean[] r9, r10;
        org.apache.flink.api.common.typeutils.TypeSerializer r11, r12, $r31;
        org.apache.flink.api.common.typeutils.TypeComparator r13, r14;
        org.apache.flink.api.common.functions.CoGroupFunction r17;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r20, $r21, $r29;
        int $i0, $i1;
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase$SimpleListIterable $r22, $r23;
        org.apache.flink.api.common.operators.util.UserCodeWrapper $r24;
        java.lang.Object $r25;
        org.apache.flink.configuration.Configuration $r26;
        java.util.ArrayList $r27;
        org.apache.flink.api.common.functions.util.CopyingListCollector $r28;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.apache.flink.api.common.functions.RuntimeContext;

        r4 := @parameter3: org.apache.flink.api.common.ExecutionConfig;

        $r20 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r5 = virtualinvoke $r20.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getFirstInputType()>();

        $r21 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        r6 = virtualinvoke $r21.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getSecondInputType()>();

        r7 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: int[] getKeyColumns(int)>(0);

        r8 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: int[] getKeyColumns(int)>(1);

        $i0 = lengthof r7;

        r9 = newarray (boolean)[$i0];

        $i1 = lengthof r8;

        r10 = newarray (boolean)[$i1];

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r9, 1);

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r10, 1);

        r11 = virtualinvoke r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r12 = virtualinvoke r6.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        r13 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r5, r7, r9);

        r14 = specialinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig,org.apache.flink.api.common.typeinfo.TypeInformation,int[],boolean[])>(r4, r6, r8, r10);

        $r22 = new org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase$SimpleListIterable;

        specialinvoke $r22.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase$SimpleListIterable: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r13, r11);

        $r23 = new org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase$SimpleListIterable;

        specialinvoke $r23.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase$SimpleListIterable: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeComparator,org.apache.flink.api.common.typeutils.TypeSerializer)>(r2, r14, r12);

        $r24 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.util.UserCodeWrapper userFunction>;

        $r25 = interfaceinvoke $r24.<org.apache.flink.api.common.operators.util.UserCodeWrapper: java.lang.Object getUserCodeObject()>();

        r17 = (org.apache.flink.api.common.functions.CoGroupFunction) $r25;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void setFunctionRuntimeContext(org.apache.flink.api.common.functions.Function,org.apache.flink.api.common.functions.RuntimeContext)>(r17, r3);

        $r26 = r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.configuration.Configuration parameters>;

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void openFunction(org.apache.flink.api.common.functions.Function,org.apache.flink.configuration.Configuration)>(r17, $r26);

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $r28 = new org.apache.flink.api.common.functions.util.CopyingListCollector;

        $r29 = virtualinvoke r0.<org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase: org.apache.flink.api.common.operators.BinaryOperatorInformation getOperatorInfo()>();

        $r30 = virtualinvoke $r29.<org.apache.flink.api.common.operators.BinaryOperatorInformation: org.apache.flink.api.common.typeinfo.TypeInformation getOutputType()>();

        $r31 = virtualinvoke $r30.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r4);

        specialinvoke $r28.<org.apache.flink.api.common.functions.util.CopyingListCollector: void <init>(java.util.List,org.apache.flink.api.common.typeutils.TypeSerializer)>($r27, $r31);

        interfaceinvoke r17.<org.apache.flink.api.common.functions.CoGroupFunction: void coGroup(java.lang.Iterable,java.lang.Iterable,org.apache.flink.util.Collector)>($r22, $r23, $r28);

        staticinvoke <org.apache.flink.api.common.functions.util.FunctionUtils: void closeFunction(org.apache.flink.api.common.functions.Function)>(r17);

        return $r27;
    }

    private org.apache.flink.api.common.typeutils.TypeComparator getTypeComparator(org.apache.flink.api.common.ExecutionConfig, org.apache.flink.api.common.typeinfo.TypeInformation, int[], boolean[])
    {
        org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        int[] r3;
        boolean[] r4;
        boolean $z0;
        org.apache.flink.api.common.typeutils.CompositeType $r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;
        org.apache.flink.api.common.InvalidProgramException $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.CoGroupRawOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: boolean[];

        $z0 = r2 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 != 0 goto label1;

        $r7 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r7.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String)>("Input types of coGroup must be composite types.");

        throw $r7;

     label1:
        $r5 = (org.apache.flink.api.common.typeutils.CompositeType) r2;

        $r6 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>(r3, r4, 0, r1);

        return $r6;
    }
}
