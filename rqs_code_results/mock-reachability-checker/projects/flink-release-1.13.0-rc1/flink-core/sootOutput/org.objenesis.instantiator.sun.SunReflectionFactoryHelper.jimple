class org.objenesis.instantiator.sun.SunReflectionFactoryHelper extends java.lang.Object
{

    void <init>()
    {
        org.objenesis.instantiator.sun.SunReflectionFactoryHelper r0;

        r0 := @this: org.objenesis.instantiator.sun.SunReflectionFactoryHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.reflect.Constructor newConstructorForSerialization(java.lang.Class, java.lang.reflect.Constructor)
    {
        java.lang.Class r0, r2;
        java.lang.reflect.Constructor r1, $r7;
        java.lang.Object r3, $r6;
        java.lang.reflect.Method r4;
        java.lang.Object[] $r5;
        java.lang.IllegalAccessException $r8;
        org.objenesis.ObjenesisException $r9, $r11, $r13;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Constructor;

        r2 = staticinvoke <org.objenesis.instantiator.sun.SunReflectionFactoryHelper: java.lang.Class getReflectionFactoryClass()>();

        r3 = staticinvoke <org.objenesis.instantiator.sun.SunReflectionFactoryHelper: java.lang.Object createReflectionFactory(java.lang.Class)>(r2);

        r4 = staticinvoke <org.objenesis.instantiator.sun.SunReflectionFactoryHelper: java.lang.reflect.Method getNewConstructorForSerializationMethod(java.lang.Class)>(r2);

     label1:
        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r0;

        $r5[1] = r1;

        $r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r3, $r5);

        $r7 = (java.lang.reflect.Constructor) $r6;

     label2:
        return $r7;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.objenesis.ObjenesisException;

        specialinvoke $r11.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label4:
        $r8 := @caughtexception;

        $r9 = new org.objenesis.ObjenesisException;

        specialinvoke $r9.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        $r12 := @caughtexception;

        $r13 = new org.objenesis.ObjenesisException;

        specialinvoke $r13.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label5;
    }

    private static java.lang.Class getReflectionFactoryClass()
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        org.objenesis.ObjenesisException $r3;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.reflect.ReflectionFactory");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new org.objenesis.ObjenesisException;

        specialinvoke $r3.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static java.lang.Object createReflectionFactory(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.NoSuchMethodException $r4;
        org.objenesis.ObjenesisException $r5, $r7, $r9, $r11;
        java.lang.IllegalArgumentException $r6;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.IllegalAccessException $r10;
        java.lang.reflect.Method r12;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        r12 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getReflectionFactory", $r1);

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.objenesis.ObjenesisException;

        specialinvoke $r5.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.objenesis.ObjenesisException;

        specialinvoke $r11.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.objenesis.ObjenesisException;

        specialinvoke $r7.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label6:
        $r8 := @caughtexception;

        $r9 = new org.objenesis.ObjenesisException;

        specialinvoke $r9.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
    }

    private static java.lang.reflect.Method getNewConstructorForSerializationMethod(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Class[] $r2;
        java.lang.reflect.Method $r3;
        java.lang.NoSuchMethodException $r4;
        org.objenesis.ObjenesisException $r5;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = newarray (java.lang.Class)[2];

        $r2[0] = class "Ljava/lang/Class;";

        $r2[1] = class "Ljava/lang/reflect/Constructor;";

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("newConstructorForSerialization", $r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.objenesis.ObjenesisException;

        specialinvoke $r5.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }
}
