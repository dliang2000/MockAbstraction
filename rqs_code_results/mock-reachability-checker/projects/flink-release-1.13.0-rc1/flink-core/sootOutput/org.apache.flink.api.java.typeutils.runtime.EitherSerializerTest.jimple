public class org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testStringDoubleEither()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r3;
        org.apache.flink.types.Either[] $r5;
        org.apache.flink.types.Either $r6, $r7, $r9, $r11, $r13;
        java.lang.Double $r8, $r10, $r12;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r14;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r15, $r16;
        org.apache.flink.api.common.ExecutionConfig $r17;
        org.apache.flink.api.common.typeutils.TypeSerializer $r18;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance $r19;
        java.lang.Class $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r5 = newarray (org.apache.flink.types.Either)[5];

        $r6 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>("banana");

        $r5[0] = $r6;

        $r7 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>("");

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(32.0);

        $r9 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r8);

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $r11 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r10);

        $r5[3] = $r11;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $r13 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r12);

        $r5[4] = $r13;

        $r14 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        specialinvoke $r14.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r16, $r15);

        $r17 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r17.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r18 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r17);

        r3 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r18;

        $r19 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

        $r20 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.EitherTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r0, r3, $r20, -1, $r5);

        virtualinvoke $r19.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        return;
    }

    public void testStringValueDoubleValueEither()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r3;
        org.apache.flink.types.Either[] $r5;
        org.apache.flink.types.StringValue $r6, $r8, $r11;
        org.apache.flink.types.Either $r7, $r13;
        org.apache.flink.types.Either$Left $r9, $r10;
        org.apache.flink.types.DoubleValue $r12, $r14, $r17;
        org.apache.flink.types.Either$Right $r15, $r16;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r18;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r19, $r20;
        org.apache.flink.api.common.ExecutionConfig $r21;
        org.apache.flink.api.common.typeutils.TypeSerializer $r22;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance $r23;
        java.lang.Class $r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r5 = newarray (org.apache.flink.types.Either)[6];

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("banana");

        $r7 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r6);

        $r5[0] = $r7;

        $r8 = new org.apache.flink.types.StringValue;

        specialinvoke $r8.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("apple");

        $r9 = staticinvoke <org.apache.flink.types.Either$Left: org.apache.flink.types.Either$Left of(java.lang.Object)>($r8);

        $r5[1] = $r9;

        $r10 = new org.apache.flink.types.Either$Left;

        $r11 = new org.apache.flink.types.StringValue;

        specialinvoke $r11.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("");

        specialinvoke $r10.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>($r11);

        $r5[2] = $r10;

        $r12 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r12.<org.apache.flink.types.DoubleValue: void <init>(double)>(32.0);

        $r13 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r12);

        $r5[3] = $r13;

        $r14 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r14.<org.apache.flink.types.DoubleValue: void <init>(double)>(4.9E-324);

        $r15 = staticinvoke <org.apache.flink.types.Either$Right: org.apache.flink.types.Either$Right of(java.lang.Object)>($r14);

        $r5[4] = $r15;

        $r16 = new org.apache.flink.types.Either$Right;

        $r17 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r17.<org.apache.flink.types.DoubleValue: void <init>(double)>(1.7976931348623157E308);

        specialinvoke $r16.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>($r17);

        $r5[5] = $r16;

        $r18 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r20 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo STRING_VALUE_TYPE_INFO>;

        $r19 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO>;

        specialinvoke $r18.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r20, $r19);

        $r21 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r21.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r22 = virtualinvoke $r18.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r21);

        r3 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r22;

        $r23 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

        $r24 = virtualinvoke $r18.<org.apache.flink.api.java.typeutils.EitherTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r23.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r0, r3, $r24, -1, $r5);

        virtualinvoke $r23.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        return;
    }

    public void testEitherWithTuple()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r3;
        org.apache.flink.types.Either[] $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r6, $r11;
        java.lang.Long $r7, $r8, $r12, $r13;
        org.apache.flink.types.Either $r9, $r17, $r19;
        org.apache.flink.types.Either$Left $r10;
        org.apache.flink.types.Either$Right $r14;
        java.lang.Double $r15, $r16, $r18;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r20;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r21;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r22;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r23, $r24, $r25;
        org.apache.flink.api.common.ExecutionConfig $r26;
        org.apache.flink.api.common.typeutils.TypeSerializer $r27;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance $r28;
        java.lang.Class $r29;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r5 = newarray (org.apache.flink.types.Either)[5];

        $r6 = new org.apache.flink.api.java.tuple.Tuple2;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9L);

        specialinvoke $r6.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r6);

        $r5[0] = $r9;

        $r10 = new org.apache.flink.types.Either$Left;

        $r11 = new org.apache.flink.api.java.tuple.Tuple2;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-9223372036854775808L);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        specialinvoke $r11.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r12, $r13);

        specialinvoke $r10.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>($r11);

        $r5[1] = $r10;

        $r14 = new org.apache.flink.types.Either$Right;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(32.0);

        specialinvoke $r14.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>($r15);

        $r5[2] = $r14;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(4.9E-324);

        $r17 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r16);

        $r5[3] = $r17;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.7976931348623157E308);

        $r19 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r18);

        $r5[4] = $r19;

        $r20 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r21 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r22 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r23 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r22[0] = $r23;

        $r24 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo LONG_TYPE_INFO>;

        $r22[1] = $r24;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r22);

        $r25 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r21, $r25);

        $r26 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r26.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r27 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r26);

        r3 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r27;

        $r28 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

        $r29 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r28.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r0, r3, $r29, -1, $r5);

        virtualinvoke $r28.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        return;
    }

    public void testEitherWithTupleValues()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r3;
        org.apache.flink.types.Either[] $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r6, $r11;
        org.apache.flink.types.LongValue $r7, $r8, $r12, $r13;
        org.apache.flink.types.Either $r9, $r17, $r19;
        org.apache.flink.types.Either$Left $r10;
        org.apache.flink.types.Either$Right $r14;
        org.apache.flink.types.DoubleValue $r15, $r16, $r18;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r20;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r21;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r22;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r23, $r24, $r25;
        org.apache.flink.api.common.ExecutionConfig $r26;
        org.apache.flink.api.common.typeutils.TypeSerializer $r27;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance $r28;
        java.lang.Class $r29;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r5 = newarray (org.apache.flink.types.Either)[5];

        $r6 = new org.apache.flink.api.java.tuple.Tuple2;

        $r7 = new org.apache.flink.types.LongValue;

        specialinvoke $r7.<org.apache.flink.types.LongValue: void <init>(long)>(2L);

        $r8 = new org.apache.flink.types.LongValue;

        specialinvoke $r8.<org.apache.flink.types.LongValue: void <init>(long)>(9L);

        specialinvoke $r6.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r7, $r8);

        $r9 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r6);

        $r5[0] = $r9;

        $r10 = new org.apache.flink.types.Either$Left;

        $r11 = new org.apache.flink.api.java.tuple.Tuple2;

        $r12 = new org.apache.flink.types.LongValue;

        specialinvoke $r12.<org.apache.flink.types.LongValue: void <init>(long)>(-9223372036854775808L);

        $r13 = new org.apache.flink.types.LongValue;

        specialinvoke $r13.<org.apache.flink.types.LongValue: void <init>(long)>(9223372036854775807L);

        specialinvoke $r11.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>($r12, $r13);

        specialinvoke $r10.<org.apache.flink.types.Either$Left: void <init>(java.lang.Object)>($r11);

        $r5[1] = $r10;

        $r14 = new org.apache.flink.types.Either$Right;

        $r15 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r15.<org.apache.flink.types.DoubleValue: void <init>(double)>(32.0);

        specialinvoke $r14.<org.apache.flink.types.Either$Right: void <init>(java.lang.Object)>($r15);

        $r5[2] = $r14;

        $r16 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r16.<org.apache.flink.types.DoubleValue: void <init>(double)>(4.9E-324);

        $r17 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r16);

        $r5[3] = $r17;

        $r18 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r18.<org.apache.flink.types.DoubleValue: void <init>(double)>(1.7976931348623157E308);

        $r19 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r18);

        $r5[4] = $r19;

        $r20 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r21 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r22 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[2];

        $r23 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO>;

        $r22[0] = $r23;

        $r24 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO>;

        $r22[1] = $r24;

        specialinvoke $r21.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r22);

        $r25 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO>;

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r21, $r25);

        $r26 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r26.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r27 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r26);

        r3 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r27;

        $r28 = new org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance;

        $r29 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.EitherTypeInfo: java.lang.Class getTypeClass()>();

        specialinvoke $r28.<org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest$EitherSerializerTestInstance: void <init>(org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(r0, r3, $r29, -1, $r5);

        virtualinvoke $r28.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        return;
    }

    public void testEitherWithObjectReuse()
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r2;
        org.apache.flink.types.Either r5, r6, r7, r8, r9;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r10;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r11, $r12;
        org.apache.flink.api.common.ExecutionConfig $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r14;
        org.apache.flink.types.LongValue $r15;
        org.apache.flink.types.DoubleValue $r16;
        java.lang.Object $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r10 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r12 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO>;

        $r11 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO>;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r12, $r11);

        $r13 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r13.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r14 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r13);

        r2 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r14;

        $r15 = new org.apache.flink.types.LongValue;

        specialinvoke $r15.<org.apache.flink.types.LongValue: void <init>()>();

        $r16 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r16.<org.apache.flink.types.DoubleValue: void <init>()>();

        r5 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r15);

        r6 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r16);

        r7 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either copy(org.apache.flink.types.Either,org.apache.flink.types.Either)>(r5, r6);

        r8 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either copy(org.apache.flink.types.Either,org.apache.flink.types.Either)>(r6, r7);

        r9 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either copy(org.apache.flink.types.Either,org.apache.flink.types.Either)>(r5, r8);

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>(r6, r8);

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>(r7, r9);

        $r17 = virtualinvoke r6.<org.apache.flink.types.Either: java.lang.Object right()>();

        $r18 = virtualinvoke r8.<org.apache.flink.types.Either: java.lang.Object right()>();

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r19 = virtualinvoke r7.<org.apache.flink.types.Either: java.lang.Object left()>();

        $r20 = virtualinvoke r9.<org.apache.flink.types.Either: java.lang.Object left()>();

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>($r19, $r20);

        return;
    }

    public void testSerializeIndividually() throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest r0;
        org.apache.flink.api.java.typeutils.runtime.EitherSerializer r2;
        org.apache.flink.types.Either r5, r6, r9, r10, r11;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView r8;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r12;
        org.apache.flink.api.java.typeutils.ValueTypeInfo $r13, $r14;
        org.apache.flink.api.common.ExecutionConfig $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r16;
        org.apache.flink.types.LongValue $r17;
        org.apache.flink.types.DoubleValue $r18;
        org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView $r19;
        java.lang.Object $r20, $r21, $r22, $r23;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.EitherSerializerTest;

        $r12 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        $r14 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo LONG_VALUE_TYPE_INFO>;

        $r13 = <org.apache.flink.api.java.typeutils.ValueTypeInfo: org.apache.flink.api.java.typeutils.ValueTypeInfo DOUBLE_VALUE_TYPE_INFO>;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r14, $r13);

        $r15 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r15.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r16 = virtualinvoke $r12.<org.apache.flink.api.java.typeutils.EitherTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r15);

        r2 = (org.apache.flink.api.java.typeutils.runtime.EitherSerializer) $r16;

        $r17 = new org.apache.flink.types.LongValue;

        specialinvoke $r17.<org.apache.flink.types.LongValue: void <init>()>();

        $r18 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r18.<org.apache.flink.types.DoubleValue: void <init>()>();

        r5 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Left(java.lang.Object)>($r17);

        r6 = staticinvoke <org.apache.flink.types.Either: org.apache.flink.types.Either Right(java.lang.Object)>($r18);

        $r19 = new org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView;

        specialinvoke $r19.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: void <init>()>();

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void serialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataOutputView)>(r5, $r19);

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void serialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataOutputView)>(r6, $r19);

        virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: void serialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataOutputView)>(r5, $r19);

        r8 = virtualinvoke $r19.<org.apache.flink.api.common.typeutils.ComparatorTestBase$TestOutputView: org.apache.flink.api.common.typeutils.ComparatorTestBase$TestInputView getInputView()>();

        r9 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either deserialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataInputView)>(r6, r8);

        r10 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either deserialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataInputView)>(r9, r8);

        r11 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.EitherSerializer: org.apache.flink.types.Either deserialize(org.apache.flink.types.Either,org.apache.flink.core.memory.DataInputView)>(r10, r8);

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>(r6, r10);

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>(r9, r11);

        $r20 = virtualinvoke r6.<org.apache.flink.types.Either: java.lang.Object right()>();

        $r21 = virtualinvoke r10.<org.apache.flink.types.Either: java.lang.Object right()>();

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>($r20, $r21);

        $r22 = virtualinvoke r9.<org.apache.flink.types.Either: java.lang.Object left()>();

        $r23 = virtualinvoke r11.<org.apache.flink.types.Either: java.lang.Object left()>();

        staticinvoke <junit.framework.TestCase: void assertSame(java.lang.Object,java.lang.Object)>($r22, $r23);

        return;
    }
}
