public abstract class org.apache.flink.api.common.typeinfo.TypeHint extends java.lang.Object
{
    private final org.apache.flink.api.common.typeinfo.TypeInformation typeInfo;

    public void <init>()
    {
        org.apache.flink.api.common.typeinfo.TypeHint r0;
        java.lang.Class $r2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        org.apache.flink.api.common.functions.InvalidTypesException $r4;
        org.apache.flink.util.FlinkRuntimeException $r5;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHint;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object,java.lang.Class,java.lang.Class,int)>(r0, class "Lorg/apache/flink/api/common/typeinfo/TypeHint;", $r2, 0);

        r0.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.flink.util.FlinkRuntimeException;

        specialinvoke $r5.<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.String)>("The TypeHint is using a generic variable.This is not supported, generic types must be fully specified for the TypeHint.");

        throw $r5;

     label4:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label1 to label2 with label3;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()
    {
        org.apache.flink.api.common.typeinfo.TypeHint r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHint;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        return $r1;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeinfo.TypeHint r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHint;

        $r1 = r0.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeinfo.TypeHint r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHint;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        $z0 = r1 instanceof org.apache.flink.api.common.typeinfo.TypeHint;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        $r2 = (org.apache.flink.api.common.typeinfo.TypeHint) r1;

        $r3 = $r2.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        $z1 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeinfo.TypeHint r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHint;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TypeHint: ");

        $r3 = r0.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
