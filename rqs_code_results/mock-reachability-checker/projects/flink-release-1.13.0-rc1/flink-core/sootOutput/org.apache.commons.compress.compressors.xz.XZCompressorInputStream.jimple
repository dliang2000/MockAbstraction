public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics
{
    private final org.apache.commons.compress.utils.CountingInputStream countingStream;
    private final java.io.InputStream in;

    public static boolean matches(byte[], int)
    {
        byte[] r0, $r1, $r2, $r3;
        int i0, $i1, $i2, i5;
        byte $b3, $b4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r1 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        return 0;

     label1:
        i5 = 0;

     label2:
        $r2 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $i2 = lengthof $r2;

        if i5 >= $i2 goto label4;

        $b4 = r0[i5];

        $r3 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        $b3 = $r3[i5];

        if $b4 == $b3 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream r1;
        boolean z0;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void <init>(java.io.InputStream,boolean,int)>(r1, z0, -1);

        return;
    }

    public void <init>(java.io.InputStream, boolean, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream r1, r10, r11;
        boolean z0;
        int i0;
        org.apache.commons.compress.utils.CountingInputStream $r4, $r6, r7;
        org.tukaani.xz.XZInputStream r8;
        org.tukaani.xz.SingleXZInputStream r9;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        r7 = new org.apache.commons.compress.utils.CountingInputStream;

        specialinvoke r7.<org.apache.commons.compress.utils.CountingInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream> = r7;

        if z0 == 0 goto label1;

        r8 = new org.tukaani.xz.XZInputStream;

        $r6 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream>;

        specialinvoke r8.<org.tukaani.xz.XZInputStream: void <init>(java.io.InputStream,int)>($r6, i0);

        r10 = (java.io.InputStream) r8;

        r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in> = r10;

        goto label2;

     label1:
        r9 = new org.tukaani.xz.SingleXZInputStream;

        $r4 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream>;

        specialinvoke r9.<org.tukaani.xz.SingleXZInputStream: void <init>(java.io.InputStream,int)>($r4, i0);

        r11 = (java.io.InputStream) r9;

        r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in> = r11;

     label2:
        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;
        java.lang.Throwable $r3;
        int $i1, $i3, i4;
        long $l2;
        byte $b5;
        org.apache.commons.compress.MemoryLimitException r6;
        org.tukaani.xz.MemoryLimitException r7, r8;
        java.lang.Exception r9;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

     label1:
        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        i4 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if i4 != -1 goto label2;

        $b5 = -1;

        goto label3;

     label2:
        $b5 = 1;

     label3:
        virtualinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void count(int)>($b5);

     label4:
        return i4;

     label5:
        $r3 := @caughtexception;

        r6 = new org.apache.commons.compress.MemoryLimitException;

        r7 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i1 = virtualinvoke r7.<org.tukaani.xz.MemoryLimitException: int getMemoryNeeded()>();

        $l2 = (long) $i1;

        r8 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i3 = virtualinvoke r8.<org.tukaani.xz.MemoryLimitException: int getMemoryLimit()>();

        r9 = (java.lang.Exception) $r3;

        specialinvoke r6.<org.apache.commons.compress.MemoryLimitException: void <init>(long,int,java.lang.Exception)>($l2, $i3, r9);

        throw r6;

        catch org.tukaani.xz.MemoryLimitException from label1 to label4 with label5;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i4, i5;
        java.io.InputStream $r2;
        java.lang.Throwable $r3;
        long $l3;
        org.apache.commons.compress.MemoryLimitException r6;
        org.tukaani.xz.MemoryLimitException r7, r8;
        java.lang.Exception r9;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        i5 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: void count(int)>(i5);

     label2:
        return i5;

     label3:
        $r3 := @caughtexception;

        r6 = new org.apache.commons.compress.MemoryLimitException;

        r7 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i2 = virtualinvoke r7.<org.tukaani.xz.MemoryLimitException: int getMemoryNeeded()>();

        $l3 = (long) $i2;

        r8 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i4 = virtualinvoke r8.<org.tukaani.xz.MemoryLimitException: int getMemoryLimit()>();

        r9 = (java.lang.Exception) $r3;

        specialinvoke r6.<org.apache.commons.compress.MemoryLimitException: void <init>(long,int,java.lang.Exception)>($l3, $i4, r9);

        throw r6;

        catch org.tukaani.xz.MemoryLimitException from label1 to label2 with label3;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        long l0, $l1, $l3;
        java.io.InputStream $r2;
        java.lang.Throwable $r3;
        int $i2, $i4;
        org.apache.commons.compress.MemoryLimitException r5;
        org.tukaani.xz.MemoryLimitException r6, r7;
        java.lang.Exception r8;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $l1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long skip(java.io.InputStream,long)>($r2, l0);

     label2:
        return $l1;

     label3:
        $r3 := @caughtexception;

        r5 = new org.apache.commons.compress.MemoryLimitException;

        r6 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i2 = virtualinvoke r6.<org.tukaani.xz.MemoryLimitException: int getMemoryNeeded()>();

        $l3 = (long) $i2;

        r7 = (org.tukaani.xz.MemoryLimitException) $r3;

        $i4 = virtualinvoke r7.<org.tukaani.xz.MemoryLimitException: int getMemoryLimit()>();

        r8 = (java.lang.Exception) $r3;

        specialinvoke r5.<org.apache.commons.compress.MemoryLimitException: void <init>(long,int,java.lang.Exception)>($l3, $i4, r8);

        throw r5;

        catch org.tukaani.xz.MemoryLimitException from label1 to label2 with label3;
    }

    public int available() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }

    public long getCompressedCount()
    {
        org.apache.commons.compress.compressors.xz.XZCompressorInputStream r0;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.compress.compressors.xz.XZCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.xz.XZCompressorInputStream: org.apache.commons.compress.utils.CountingInputStream countingStream>;

        $l0 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: long getBytesRead()>();

        return $l0;
    }
}
