public final class org.apache.flink.api.java.typeutils.runtime.TupleComparator extends org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase
{
    private static final long serialVersionUID;

    public void <init>(int[], org.apache.flink.api.common.typeutils.TypeComparator[], org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        int[] r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: int[];

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1, r2, r3);

        return;
    }

    private void <init>(org.apache.flink.api.java.typeutils.runtime.TupleComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0, r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase: void <init>(org.apache.flink.api.java.typeutils.runtime.TupleComparatorBase)>(r1);

        return;
    }

    public int hash(org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2, $r8;
        int[] $r3, $r6, $r7, $r9, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        org.apache.flink.api.common.typeutils.TypeComparator $r4, $r10;
        java.lang.Object $r5, $r11;
        org.apache.flink.types.NullFieldException $r12;
        org.apache.flink.types.NullKeyFieldException $r13;
        java.lang.IndexOutOfBoundsException $r14;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r15;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        i7 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r4 = $r2[0];

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i0 = $r3[0];

        $r5 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>($i0);

        i8 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r5);

        i7 = 1;

     label2:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i1 = lengthof $r6;

        if i7 >= $i1 goto label3;

        $r7 = <org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] HASH_SALT>;

        $i2 = i7 & 31;

        $i3 = $r7[$i2];

        i9 = i8 * $i3;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r10 = $r8[i7];

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i4 = $r9[i7];

        $r11 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>($i4);

        $i5 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>($r11);

        i8 = i9 + $i5;

        i7 = i7 + 1;

        goto label2;

     label3:
        return i8;

     label4:
        $r12 := @caughtexception;

        $r13 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r13.<org.apache.flink.types.NullKeyFieldException: void <init>(org.apache.flink.types.NullFieldException)>($r12);

        throw $r13;

     label5:
        $r14 := @caughtexception;

        $r15 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i6 = $r16[i7];

        specialinvoke $r15.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i6);

        throw $r15;

        catch org.apache.flink.types.NullFieldException from label1 to label3 with label4;
        catch java.lang.IndexOutOfBoundsException from label1 to label3 with label5;
    }

    public void setReference(org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        int[] $r2, $r4, $r9;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        org.apache.flink.api.common.typeutils.TypeComparator $r5;
        java.lang.Object $r6;
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r8;
        org.apache.flink.types.NullFieldException $r10;
        org.apache.flink.types.NullKeyFieldException $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        i3 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r5 = $r3[i3];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i1 = $r4[i3];

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>($i1);

        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>($r6);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        $r11 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r11.<org.apache.flink.types.NullKeyFieldException: void <init>(org.apache.flink.types.NullFieldException)>($r10);

        throw $r11;

     label4:
        $r7 := @caughtexception;

        $r8 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i2 = $r9[i3];

        specialinvoke $r8.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r8;

     label5:
        return;

        catch org.apache.flink.types.NullFieldException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label4;
    }

    public boolean equalToReference(org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        int[] $r2, $r4, $r9;
        int $i0, $i1, $i2, i3;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        org.apache.flink.api.common.typeutils.TypeComparator $r5;
        java.lang.Object $r6;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r8;
        org.apache.flink.types.NullFieldException $r10;
        org.apache.flink.types.NullKeyFieldException $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        i3 = 0;

     label1:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label4;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r5 = $r3[i3];

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i1 = $r4[i3];

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>($i1);

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>($r6);

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 1;

     label5:
        $r10 := @caughtexception;

        $r11 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r11.<org.apache.flink.types.NullKeyFieldException: void <init>(org.apache.flink.types.NullFieldException)>($r10);

        throw $r11;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i2 = $r9[i3];

        specialinvoke $r8.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r8;

        catch org.apache.flink.types.NullFieldException from label1 to label2 with label5;
        catch org.apache.flink.types.NullFieldException from label3 to label4 with label5;
        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label6;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label6;
    }

    public int compare(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.api.java.tuple.Tuple)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        org.apache.flink.api.java.tuple.Tuple r1, r2;
        int i0, $i1, $i2, i3, i4;
        int[] $r3, $r4, $r13;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r5;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;
        java.lang.Object $r7, $r8;
        org.apache.flink.types.NullFieldException $r9;
        org.apache.flink.types.NullKeyFieldException $r10;
        java.lang.IndexOutOfBoundsException $r11;
        org.apache.flink.types.KeyFieldOutOfBoundsException $r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple;

        i3 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i1 = lengthof $r3;

        if i3 >= $i1 goto label4;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        i4 = $r4[i3];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r5[i3];

        $r7 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>(i4);

        $r8 = virtualinvoke r2.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>(i4);

        i0 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>($r7, $r8);

        if i0 == 0 goto label3;

     label2:
        return i0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 0;

     label5:
        $r9 := @caughtexception;

        $r10 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r10.<org.apache.flink.types.NullKeyFieldException: void <init>(org.apache.flink.types.NullFieldException)>($r9);

        throw $r10;

     label6:
        $r11 := @caughtexception;

        $r12 = new org.apache.flink.types.KeyFieldOutOfBoundsException;

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i2 = $r13[i3];

        specialinvoke $r12.<org.apache.flink.types.KeyFieldOutOfBoundsException: void <init>(int)>($i2);

        throw $r12;

        catch org.apache.flink.types.NullFieldException from label1 to label2 with label5;
        catch org.apache.flink.types.NullFieldException from label3 to label4 with label5;
        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label6;
        catch java.lang.IndexOutOfBoundsException from label3 to label4 with label6;
    }

    public void putNormalizedKey(org.apache.flink.api.java.tuple.Tuple, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        org.apache.flink.api.java.tuple.Tuple r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i7;
        int[] $r3, $r5, $r10;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r4;
        org.apache.flink.api.common.typeutils.TypeComparator $r6;
        java.lang.Object $r7;
        java.lang.NullPointerException $r8;
        org.apache.flink.types.NullKeyFieldException $r9, $r12;
        org.apache.flink.types.NullFieldException $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i3 := @parameter2: int;

        i4 := @parameter3: int;

        i5 = 0;

     label1:
        $i0 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int numLeadingNormalizableKeys>;

        if i5 >= $i0 goto label4;

        if i4 <= 0 goto label4;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] normalizedKeyLengths>;

        i6 = $r3[i5];

        if i4 < i6 goto label2;

        $i7 = i6;

        goto label3;

     label2:
        $i7 = i4;

     label3:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r6 = $r4[i5];

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i1 = $r5[i5];

        $r7 = virtualinvoke r1.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getFieldNotNull(int)>($i1);

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeComparator: void putNormalizedKey(java.lang.Object,org.apache.flink.core.memory.MemorySegment,int,int)>($r7, r2, i3, $i7);

        i4 = i4 - $i7;

        i3 = i3 + $i7;

        i5 = i5 + 1;

        goto label1;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        $r12 = new org.apache.flink.types.NullKeyFieldException;

        specialinvoke $r12.<org.apache.flink.types.NullKeyFieldException: void <init>(org.apache.flink.types.NullFieldException)>($r11);

        throw $r12;

     label6:
        $r8 := @caughtexception;

        $r9 = new org.apache.flink.types.NullKeyFieldException;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i2 = $r10[i5];

        specialinvoke $r9.<org.apache.flink.types.NullKeyFieldException: void <init>(int)>($i2);

        throw $r9;

     label7:
        return;

        catch org.apache.flink.types.NullFieldException from label1 to label4 with label5;
        catch java.lang.NullPointerException from label1 to label4 with label6;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1, $r8;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3, $r4;
        int[] $r5;
        org.apache.flink.api.java.tuple.Tuple $r6;
        org.apache.flink.api.common.typeutils.TypeComparator $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i5 = i0;

        i6 = 0;

     label1:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $i1 = lengthof $r3;

        if i6 >= $i1 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        $r7 = $r4[i6];

        $r6 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int[] keyPositions>;

        $i3 = $r5[i6];

        $r8 = virtualinvoke $r6.<org.apache.flink.api.java.tuple.Tuple: java.lang.Object getField(int)>($i3);

        $i4 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>($r8, r2, i5);

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i2 = i5 - i0;

        return $i2;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(org.apache.flink.api.java.typeutils.runtime.TupleComparator)>(r0);

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.api.java.tuple.Tuple $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void putNormalizedKey(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.api.java.tuple.Tuple $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $r3 = (org.apache.flink.api.java.tuple.Tuple) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int compare(org.apache.flink.api.java.tuple.Tuple,org.apache.flink.api.java.tuple.Tuple)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1;
        org.apache.flink.api.java.tuple.Tuple $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: boolean equalToReference(org.apache.flink.api.java.tuple.Tuple)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1;
        org.apache.flink.api.java.tuple.Tuple $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.java.tuple.Tuple) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void setReference(org.apache.flink.api.java.tuple.Tuple)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparator r0;
        java.lang.Object r1;
        org.apache.flink.api.java.tuple.Tuple $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.java.tuple.Tuple) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: int hash(org.apache.flink.api.java.tuple.Tuple)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.TupleComparator: long serialVersionUID> = 1L;

        return;
    }
}
