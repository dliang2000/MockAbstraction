public class org.mockito.internal.stubbing.StubbedInvocationMatcher extends org.mockito.internal.invocation.InvocationMatcher implements java.io.Serializable, org.mockito.stubbing.Stubbing
{
    private static final long serialVersionUID;
    private final java.util.Queue answers;
    private final org.mockito.quality.Strictness strictness;
    private org.mockito.invocation.DescribedInvocation usedAt;

    public void <init>(org.mockito.stubbing.Answer, org.mockito.invocation.MatchableInvocation, org.mockito.quality.Strictness)
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.invocation.MatchableInvocation r2;
        org.mockito.quality.Strictness r3;
        org.mockito.invocation.Invocation $r4;
        java.util.List $r5;
        java.util.concurrent.ConcurrentLinkedQueue $r6;
        java.util.Queue $r7;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        r2 := @parameter1: org.mockito.invocation.MatchableInvocation;

        r3 := @parameter2: org.mockito.quality.Strictness;

        $r4 = interfaceinvoke r2.<org.mockito.invocation.MatchableInvocation: org.mockito.invocation.Invocation getInvocation()>();

        $r5 = interfaceinvoke r2.<org.mockito.invocation.MatchableInvocation: java.util.List getMatchers()>();

        specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: void <init>(org.mockito.invocation.Invocation,java.util.List)>($r4, $r5);

        $r6 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers> = $r6;

        r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: org.mockito.quality.Strictness strictness> = r3;

        $r7 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        interfaceinvoke $r7.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object answer(org.mockito.invocation.InvocationOnMock) throws java.lang.Throwable
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.invocation.InvocationOnMock r1;
        java.util.Queue $r5, $r6, $r7, $r10;
        int $i0;
        java.lang.Object $r8, $r9, $r11;
        java.lang.Throwable $r12;
        org.mockito.stubbing.Answer $r13;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.InvocationOnMock;

        $r5 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        entermonitor $r5;

     label1:
        $r6 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        $i0 = interfaceinvoke $r6.<java.util.Queue: int size()>();

        if $i0 != 1 goto label2;

        $r10 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object peek()>();

        $r13 = (org.mockito.stubbing.Answer) $r11;

        goto label3;

     label2:
        $r7 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        $r8 = interfaceinvoke $r7.<java.util.Queue: java.lang.Object poll()>();

        $r13 = (org.mockito.stubbing.Answer) $r8;

     label3:
        exitmonitor $r5;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r12;

     label7:
        $r9 = interfaceinvoke $r13.<org.mockito.stubbing.Answer: java.lang.Object answer(org.mockito.invocation.InvocationOnMock)>(r1);

        return $r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.stubbing.Answer r1;
        java.util.Queue $r2;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        r1 := @parameter0: org.mockito.stubbing.Answer;

        $r2 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void markStubUsed(org.mockito.invocation.DescribedInvocation)
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.invocation.DescribedInvocation r1;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        r1 := @parameter0: org.mockito.invocation.DescribedInvocation;

        r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: org.mockito.invocation.DescribedInvocation usedAt> = r1;

        return;
    }

    public boolean wasUsed()
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.invocation.DescribedInvocation $r1;
        boolean $z0;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        $r1 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: org.mockito.invocation.DescribedInvocation usedAt>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.String $r2, $r7;
        java.util.Queue $r5;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<org.mockito.internal.invocation.InvocationMatcher: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stubbed with: ");

        $r5 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: java.util.Queue answers>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.mockito.quality.Strictness getStrictness()
    {
        org.mockito.internal.stubbing.StubbedInvocationMatcher r0;
        org.mockito.quality.Strictness $r1;

        r0 := @this: org.mockito.internal.stubbing.StubbedInvocationMatcher;

        $r1 = r0.<org.mockito.internal.stubbing.StubbedInvocationMatcher: org.mockito.quality.Strictness strictness>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.stubbing.StubbedInvocationMatcher: long serialVersionUID> = 4919105134123672727L;

        return;
    }
}
