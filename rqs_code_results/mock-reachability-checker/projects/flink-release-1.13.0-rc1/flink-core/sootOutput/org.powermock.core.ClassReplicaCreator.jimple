public class org.powermock.core.ClassReplicaCreator extends java.lang.Object
{
    private static final java.lang.String POWERMOCK_INSTANCE_DELEGATOR_FIELD_NAME;
    private static java.util.concurrent.atomic.AtomicInteger counter;

    public void <init>()
    {
        org.powermock.core.ClassReplicaCreator r0;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Class createClassReplica(java.lang.Class)
    {
        org.powermock.core.ClassReplicaCreator r0;
        java.lang.Class r1, $r10, $r12, $r14;
        javassist.ClassPool r2;
        java.lang.String r3, r8, $r9, $r16;
        javassist.CtClass r4, r5, $r15;
        int i0, i1;
        javassist.CtMethod r7;
        java.lang.ClassLoader $r11;
        java.security.ProtectionDomain $r13;
        javassist.CtClass[] $r17, $r18;
        java.lang.IllegalArgumentException $r20;
        java.lang.Exception $r21;
        java.lang.RuntimeException $r22;
        javassist.CtMethod[] r23;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clazz cannot be null");

        throw $r20;

     label1:
        r2 = staticinvoke <javassist.ClassPool: javassist.ClassPool getDefault()>();

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = specialinvoke r0.<org.powermock.core.ClassReplicaCreator: java.lang.String generateReplicaClassName(java.lang.Class)>(r1);

        r5 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass makeClass(java.lang.String)>($r9);

     label2:
        r4 = virtualinvoke r2.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r3);

        r23 = virtualinvoke r4.<javassist.CtClass: javassist.CtMethod[] getDeclaredMethods()>();

        i0 = lengthof r23;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r7 = r23[i1];

        r8 = specialinvoke r0.<org.powermock.core.ClassReplicaCreator: java.lang.String getReplicaMethodDelegationCode(java.lang.Class,javassist.CtMethod,java.lang.String)>(r1, r7, null);

        $r15 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        $r16 = virtualinvoke r7.<javassist.CtMethod: java.lang.String getName()>();

        $r17 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        $r18 = virtualinvoke r7.<javassist.CtMethod: javassist.CtClass[] getExceptionTypes()>();

        staticinvoke <javassist.CtNewMethod: javassist.CtMethod make(javassist.CtClass,java.lang.String,javassist.CtClass[],javassist.CtClass[],java.lang.String,javassist.CtClass)>($r15, $r16, $r17, $r18, r8, r5);

        i1 = i1 + 1;

        goto label3;

     label4:
        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r14 = virtualinvoke r5.<javassist.CtClass: java.lang.Class toClass(java.lang.ClassLoader,java.security.ProtectionDomain)>($r11, $r13);

     label5:
        return $r14;

     label6:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    public java.lang.Class createInstanceReplica(java.lang.Object)
    {
        org.powermock.core.ClassReplicaCreator r0;
        java.lang.Object r1;
        java.lang.Class r2, $r8, $r10, $r12, $r13;
        javassist.ClassPool r3;
        java.lang.String r4, $r7;
        javassist.CtClass r5, r6;
        java.lang.ClassLoader $r9;
        java.security.ProtectionDomain $r11;
        java.lang.IllegalArgumentException $r14;
        java.lang.Exception $r15;
        java.lang.RuntimeException $r16;
        javassist.CtMethod[] r17;
        int i0, i1, i2, i3;
        javassist.CtMethod r19, r21;
        javassist.CtConstructor[] r22;
        javassist.CtConstructor r24, r25;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("delegator cannot be null");

        throw $r14;

     label1:
        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = staticinvoke <javassist.ClassPool: javassist.ClassPool getDefault()>();

        r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r7 = specialinvoke r0.<org.powermock.core.ClassReplicaCreator: java.lang.String generateReplicaClassName(java.lang.Class)>(r2);

        r6 = virtualinvoke r3.<javassist.ClassPool: javassist.CtClass makeClass(java.lang.String)>($r7);

     label2:
        r5 = virtualinvoke r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r4);

        specialinvoke r0.<org.powermock.core.ClassReplicaCreator: void copyFields(javassist.CtClass,javassist.CtClass)>(r5, r6);

        specialinvoke r0.<org.powermock.core.ClassReplicaCreator: void addDelegatorField(java.lang.Object,javassist.CtClass)>(r1, r6);

        r17 = virtualinvoke r5.<javassist.CtClass: javassist.CtMethod[] getDeclaredMethods()>();

        i0 = lengthof r17;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r19 = r17[i1];

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.powermock.core.ClassReplicaCreator: java.lang.String getReplicaMethodDelegationCode(java.lang.Class,javassist.CtMethod,java.lang.String)>($r13, r19, "powerMockInstanceDelegatorField");

        r21 = staticinvoke <javassist.CtNewMethod: javassist.CtMethod copy(javassist.CtMethod,javassist.CtClass,javassist.ClassMap)>(r19, r6, null);

        virtualinvoke r6.<javassist.CtClass: void addMethod(javassist.CtMethod)>(r21);

        i1 = i1 + 1;

        goto label3;

     label4:
        r22 = virtualinvoke r5.<javassist.CtClass: javassist.CtConstructor[] getDeclaredConstructors()>();

        i2 = lengthof r22;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        r24 = r22[i3];

        r25 = staticinvoke <javassist.CtNewConstructor: javassist.CtConstructor copy(javassist.CtConstructor,javassist.CtClass,javassist.ClassMap)>(r24, r6, null);

        virtualinvoke r6.<javassist.CtClass: void addConstructor(javassist.CtConstructor)>(r25);

        i3 = i3 + 1;

        goto label5;

     label6:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r12 = virtualinvoke r6.<javassist.CtClass: java.lang.Class toClass(java.lang.ClassLoader,java.security.ProtectionDomain)>($r9, $r11);

     label7:
        return $r12;

     label8:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

        catch java.lang.Exception from label2 to label7 with label8;
    }

    private void addDelegatorField(java.lang.Object, javassist.CtClass) throws javassist.CannotCompileException
    {
        org.powermock.core.ClassReplicaCreator r0;
        java.lang.Object r1;
        javassist.CtClass r2;
        javassist.CtField r3;
        java.lang.Object[] $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r7;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: javassist.CtClass;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4[0] = $r6;

        $r4[1] = "powerMockInstanceDelegatorField";

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("private %s %s = null;", $r4);

        r3 = staticinvoke <javassist.CtField: javassist.CtField make(java.lang.String,javassist.CtClass)>($r7, r2);

        virtualinvoke r2.<javassist.CtClass: void addField(javassist.CtField)>(r3);

        return;
    }

    private java.lang.String generateReplicaClassName(java.lang.Class)
    {
        org.powermock.core.ClassReplicaCreator r0;
        java.lang.Class r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8;
        java.lang.String $r4, $r9;
        java.util.concurrent.atomic.AtomicInteger $r7;
        int $i0;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: java.lang.Class;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replica.");

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$$PowerMock");

        $r7 = <org.powermock.core.ClassReplicaCreator: java.util.concurrent.atomic.AtomicInteger counter>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void copyFields(javassist.CtClass, javassist.CtClass) throws javassist.CannotCompileException, javassist.NotFoundException
    {
        org.powermock.core.ClassReplicaCreator r0;
        javassist.CtClass r1, r2, $r12;
        javassist.CtField[] r3, r4;
        java.util.Iterator r6;
        javassist.CtField r7, $r11;
        java.util.HashSet $r9;
        boolean $z2;
        java.lang.Object $r10;
        java.lang.String $r13;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.CtClass;

        r3 = virtualinvoke r1.<javassist.CtClass: javassist.CtField[] getDeclaredFields()>();

        r4 = virtualinvoke r1.<javassist.CtClass: javassist.CtField[] getFields()>();

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r9, r3);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r9, r4);

        r6 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (javassist.CtField) $r10;

        $r11 = new javassist.CtField;

        $r12 = virtualinvoke r7.<javassist.CtField: javassist.CtClass getType()>();

        $r13 = virtualinvoke r7.<javassist.CtField: java.lang.String getName()>();

        specialinvoke $r11.<javassist.CtField: void <init>(javassist.CtClass,java.lang.String,javassist.CtClass)>($r12, $r13, r2);

        virtualinvoke r2.<javassist.CtClass: void addField(javassist.CtField)>($r11);

        goto label1;

     label2:
        return;
    }

    private java.lang.String getReplicaMethodDelegationCode(java.lang.Class, javassist.CtMethod, java.lang.String) throws javassist.NotFoundException
    {
        org.powermock.core.ClassReplicaCreator r0;
        java.lang.Class r1;
        javassist.CtMethod r2;
        java.lang.String r3, r5, $r9, $r12, $r16, $r22, $r26, $r29;
        javassist.CtClass r6, $r20;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r7;
        java.lang.String[] $r15;
        int $i0;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: javassist.CtMethod;

        r3 := @parameter2: java.lang.String;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{java.lang.reflect.Method originalMethod = ");

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class.getDeclaredMethod(\"");

        $r12 = virtualinvoke r2.<javassist.CtMethod: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", ");

        $r15 = specialinvoke r0.<org.powermock.core.ClassReplicaCreator: java.lang.String[] getParameterTypes(javassist.CtMethod)>(r2);

        r5 = staticinvoke <org.powermock.core.ClassReplicaCreator: java.lang.String getParametersAsString(java.lang.String[])>($r15);

        $r16 = "";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label1;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label2;

     label1:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

     label2:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");\n");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("originalMethod.setAccessible(true);\n");

        r6 = virtualinvoke r2.<javassist.CtMethod: javassist.CtClass getReturnType()>();

        $r20 = <javassist.CtClass: javassist.CtClass voidType>;

        z0 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r20);

        if z0 != 0 goto label3;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("return (");

        $r29 = virtualinvoke r6.<javassist.CtClass: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

     label3:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("originalMethod.invoke(");

        $i0 = virtualinvoke r2.<javassist.CtMethod: int getModifiers()>();

        $z2 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i0);

        if $z2 != 0 goto label4;

        if r3 != null goto label5;

     label4:
        $r22 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        goto label6;

     label5:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label6:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", $args);}");

        $r26 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r26;
    }

    private java.lang.String[] getParameterTypes(javassist.CtMethod) throws javassist.NotFoundException
    {
        org.powermock.core.ClassReplicaCreator r0;
        javassist.CtMethod r1;
        javassist.CtClass[] r2;
        java.lang.String[] r3;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r4, $r7, $r8;
        javassist.CtClass $r5;
        java.lang.String $r6, $r9;

        r0 := @this: org.powermock.core.ClassReplicaCreator;

        r1 := @parameter0: javassist.CtMethod;

        r2 = virtualinvoke r1.<javassist.CtMethod: javassist.CtClass[] getParameterTypes()>();

        $i0 = lengthof r2;

        r3 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r3;

        if i2 >= $i1 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r2[i2];

        $r6 = virtualinvoke $r5.<javassist.CtClass: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r3[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    private static java.lang.String getParametersAsString(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r9;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        if r0 == null goto label1;

        $i3 = lengthof r0;

        if $i3 != 0 goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new Class[0]");

        goto label5;

     label1:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new Class[] {");

        if r0 == null goto label4;

        i4 = 0;

     label2:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label4;

        $r5 = r0[i4];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        if i4 == $i2 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

     label5:
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        <org.powermock.core.ClassReplicaCreator: java.lang.String POWERMOCK_INSTANCE_DELEGATOR_FIELD_NAME> = "powerMockInstanceDelegatorField";

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <org.powermock.core.ClassReplicaCreator: java.util.concurrent.atomic.AtomicInteger counter> = $r0;

        return;
    }
}
