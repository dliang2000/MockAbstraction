public class com.github.luben.zstd.ZstdOutputStreamNoFinalizer extends java.io.FilterOutputStream
{
    private final long stream;
    private long srcPos;
    private long dstPos;
    private final com.github.luben.zstd.BufferPool bufferPool;
    private final java.nio.ByteBuffer dstByteBuffer;
    private final byte[] dst;
    private boolean isClosed;
    private static final int dstSize;
    private boolean closeFrameOnFlush;
    private boolean frameClosed;

    public static native long recommendedCOutSize();

    private static native long createCStream();

    private static native int freeCStream(long);

    private native int resetCStream(long);

    private native int compressStream(long, byte[], int, byte[], int);

    private native int flushStream(long, byte[], int);

    private native int endStream(long, byte[], int);

    public void <init>(java.io.OutputStream, int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        java.io.OutputStream r1;
        int i0;
        com.github.luben.zstd.BufferPool $r2;
        long $l1;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r2 = <com.github.luben.zstd.NoPool: com.github.luben.zstd.BufferPool INSTANCE>;

        specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: void <init>(java.io.OutputStream,com.github.luben.zstd.BufferPool)>(r1, $r2);

        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        staticinvoke <com.github.luben.zstd.Zstd: int setCompressionLevel(long,int)>($l1, i0);

        return;
    }

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        java.io.OutputStream r1;
        com.github.luben.zstd.BufferPool $r2;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.github.luben.zstd.NoPool: com.github.luben.zstd.BufferPool INSTANCE>;

        specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: void <init>(java.io.OutputStream,com.github.luben.zstd.BufferPool)>(r1, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, com.github.luben.zstd.BufferPool, int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        java.io.OutputStream r1;
        com.github.luben.zstd.BufferPool r2;
        int i0;
        long $l1;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.github.luben.zstd.BufferPool;

        i0 := @parameter2: int;

        specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: void <init>(java.io.OutputStream,com.github.luben.zstd.BufferPool)>(r1, r2);

        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        staticinvoke <com.github.luben.zstd.Zstd: int setCompressionLevel(long,int)>($l1, i0);

        return;
    }

    public void <init>(java.io.OutputStream, com.github.luben.zstd.BufferPool) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        java.io.OutputStream r1;
        com.github.luben.zstd.BufferPool r2;
        long $l0;
        int $i1, $i2;
        java.nio.ByteBuffer $r3, $r4, $r5;
        byte[] $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: com.github.luben.zstd.BufferPool;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long srcPos> = 0L;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos> = 0L;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed> = 0;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean closeFrameOnFlush> = 0;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed> = 1;

        $l0 = staticinvoke <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long createCStream()>();

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream> = $l0;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean closeFrameOnFlush> = 0;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool> = r2;

        $i1 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        $r3 = interfaceinvoke r2.<com.github.luben.zstd.BufferPool: java.nio.ByteBuffer get(int)>($i1);

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.nio.ByteBuffer dstByteBuffer> = $r3;

        $r4 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.nio.ByteBuffer dstByteBuffer>;

        if $r4 != null goto label1;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get ByteBuffer of size ");

        $i2 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from the BufferPool");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        $r5 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.nio.ByteBuffer dstByteBuffer>;

        $r6 = staticinvoke <com.github.luben.zstd.Zstd: byte[] extractArray(java.nio.ByteBuffer)>($r5);

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst> = $r6;

        return;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setChecksum(boolean) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        boolean z0, $z1, $z2;
        int i0;
        long $l1, $l2, $l3;
        java.io.IOException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z1 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r7;

     label1:
        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i0 = staticinvoke <com.github.luben.zstd.Zstd: int setCompressionChecksums(long,boolean)>($l1, z0);

        $l2 = (long) i0;

        $z2 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l2);

        if $z2 == 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l3 = (long) i0;

        $r4 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l3);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setLevel(int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        int i0, i1;
        boolean $z0, $z1;
        long $l2, $l3, $l4;
        java.io.IOException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        i0 := @parameter0: int;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z0 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r7;

     label1:
        $l2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i1 = staticinvoke <com.github.luben.zstd.Zstd: int setCompressionLevel(long,int)>($l2, i0);

        $l3 = (long) i1;

        $z1 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l3);

        if $z1 == 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l4 = (long) i1;

        $r4 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setLong(int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        int i0, i1;
        boolean $z0, $z1;
        long $l2, $l3, $l4;
        java.io.IOException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        i0 := @parameter0: int;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z0 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r7;

     label1:
        $l2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i1 = staticinvoke <com.github.luben.zstd.Zstd: int setCompressionLong(long,int)>($l2, i0);

        $l3 = (long) i1;

        $z1 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l3);

        if $z1 == 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l4 = (long) i1;

        $r4 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setWorkers(int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        int i0, i1;
        boolean $z0, $z1;
        long $l2, $l3, $l4;
        java.io.IOException $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        i0 := @parameter0: int;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z0 != 0 goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r7;

     label1:
        $l2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i1 = staticinvoke <com.github.luben.zstd.Zstd: int setCompressionWorkers(long,int)>($l2, i0);

        $l3 = (long) i1;

        $z1 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l3);

        if $z1 == 0 goto label2;

        $r1 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l4 = (long) i1;

        $r4 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setCloseFrameOnFlush(boolean) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        boolean z0, $z1;
        java.io.IOException $r1;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z1 != 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r1;

     label1:
        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean closeFrameOnFlush> = z0;

        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setDict(byte[]) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        byte[] r1;
        int i0, $i1;
        boolean $z0, $z1;
        long $l2, $l3, $l4;
        java.io.IOException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: byte[];

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z0 != 0 goto label1;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r8;

     label1:
        $l2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        $i1 = lengthof r1;

        i0 = staticinvoke <com.github.luben.zstd.Zstd: int loadDictCompress(long,byte[],int)>($l2, r1, $i1);

        $l3 = (long) i0;

        $z1 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l3);

        if $z1 == 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l4 = (long) i0;

        $r5 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return r0;
    }

    public synchronized com.github.luben.zstd.ZstdOutputStreamNoFinalizer setDict(com.github.luben.zstd.ZstdDictCompress) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        com.github.luben.zstd.ZstdDictCompress r1;
        int i0;
        boolean $z0, $z1;
        long $l1, $l2, $l3;
        java.io.IOException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: com.github.luben.zstd.ZstdDictCompress;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z0 != 0 goto label1;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Change of parameter on initialized stream");

        throw $r8;

     label1:
        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i0 = staticinvoke <com.github.luben.zstd.Zstd: int loadFastDictCompress(long,com.github.luben.zstd.ZstdDictCompress)>($l1, r1);

        $l2 = (long) i0;

        $z1 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l2);

        if $z1 == 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression param: ");

        $l3 = (long) i0;

        $r5 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label2:
        return r0;
    }

    public synchronized void write(byte[], int, int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        byte[] r1, $r2, $r3;
        int i0, i1, i2, $i4, $i10, i15, i16;
        boolean $z0, $z1, $z2, $z3;
        long $l3, $l5, $l6, $l7, $l9, $l11, $l12, $l13, $l14, $l17, $l18;
        byte $b8, $b19;
        java.io.OutputStream $r4;
        java.io.IOException $r5, $r11, $r17;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r15;
        java.lang.String $r8, $r10, $r14, $r16;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r17;

     label1:
        $z1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z1 == 0 goto label3;

        $l12 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        i15 = specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int resetCStream(long)>($l12);

        $l13 = (long) i15;

        $z3 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l13);

        if $z3 == 0 goto label2;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression error: cannot create header: ");

        $l14 = (long) i15;

        $r14 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed> = 0;

     label3:
        i16 = i0 + i1;

        $l3 = (long) i0;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long srcPos> = $l3;

     label4:
        $l17 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long srcPos>;

        $l18 = (long) i16;

        $b19 = $l17 cmp $l18;

        if $b19 >= 0 goto label7;

        $l5 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        $r2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $i4 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        i2 = specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int compressStream(long,byte[],int,byte[],int)>($l5, $r2, $i4, r1, i16);

        $l6 = (long) i2;

        $z2 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l6);

        if $z2 == 0 goto label5;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression error: ");

        $l11 = (long) i2;

        $r8 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l11);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label5:
        $l7 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos>;

        $b8 = $l7 cmp 0L;

        if $b8 <= 0 goto label6;

        $r4 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        $r3 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $l9 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos>;

        $i10 = (int) $l9;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i10);

     label6:
        goto label4;

     label7:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        int i0;
        byte[] r1;
        byte $b1;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        i0 := @parameter0: int;

        r1 = newarray (byte)[1];

        $b1 = (byte) i0;

        r1[0] = $b1;

        virtualinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: void write(byte[],int,int)>(r1, 0, 1);

        return;
    }

    public synchronized void flush() throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i4, $i6, $i10, i12, i13;
        byte[] $r1, $r2, $r11, $r12;
        long $l1, $l2, $l3, $l5, $l7, $l8, $l9, $l11;
        java.io.OutputStream $r3, $r4, $r13;
        java.io.IOException $r5, $r14, $r20;
        java.lang.StringBuilder $r6, $r7, $r9, $r15, $r16, $r18;
        java.lang.String $r8, $r10, $r17, $r19;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        $r20 = new java.io.IOException;

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>("Stream closed");

        throw $r20;

     label1:
        $z1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z1 != 0 goto label7;

        $z2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean closeFrameOnFlush>;

        if $z2 == 0 goto label4;

     label2:
        $l7 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        $r11 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $i6 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        i12 = specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int endStream(long,byte[],int)>($l7, $r11, $i6);

        $l8 = (long) i12;

        $z4 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l8);

        if $z4 == 0 goto label3;

        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression error: ");

        $l11 = (long) i12;

        $r17 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l11);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label3:
        $r13 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        $r12 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $l9 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos>;

        $i10 = (int) $l9;

        virtualinvoke $r13.<java.io.OutputStream: void write(byte[],int,int)>($r12, 0, $i10);

        if i12 > 0 goto label2;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed> = 1;

        goto label6;

     label4:
        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        $r1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $i0 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        i13 = specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int flushStream(long,byte[],int)>($l1, $r1, $i0);

        $l2 = (long) i13;

        $z3 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l2);

        if $z3 == 0 goto label5;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression error: ");

        $l5 = (long) i13;

        $r8 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l5);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label5:
        $r3 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        $r2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $l3 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos>;

        $i4 = (int) $l3;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i4);

        if i13 > 0 goto label4;

     label6:
        $r4 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label7:
        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        com.github.luben.zstd.ZstdOutputStreamNoFinalizer r0;
        int i0, $i3, $i7;
        boolean $z0, $z1, $z2;
        java.io.OutputStream $r2, $r7;
        java.nio.ByteBuffer $r3, $r15;
        com.github.luben.zstd.BufferPool $r4, $r16;
        long $l1, $l4, $l5, $l6, $l8, $l9;
        byte[] $r5, $r6;
        java.io.IOException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.github.luben.zstd.ZstdOutputStreamNoFinalizer;

        $z0 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean frameClosed>;

        if $z1 != 0 goto label4;

     label2:
        $l4 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        $r5 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $i3 = <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize>;

        i0 = specialinvoke r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int endStream(long,byte[],int)>($l4, $r5, $i3);

        $l5 = (long) i0;

        $z2 = staticinvoke <com.github.luben.zstd.Zstd: boolean isError(long)>($l5);

        if $z2 == 0 goto label3;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Compression error: ");

        $l8 = (long) i0;

        $r11 = staticinvoke <com.github.luben.zstd.Zstd: java.lang.String getErrorName(long)>($l8);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label3:
        $r7 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        $r6 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: byte[] dst>;

        $l6 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long dstPos>;

        $i7 = (int) $l6;

        virtualinvoke $r7.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, $i7);

        if i0 > 0 goto label2;

     label4:
        $r2 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label5:
        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed> = 1;

        $r4 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        $r3 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.nio.ByteBuffer dstByteBuffer>;

        interfaceinvoke $r4.<com.github.luben.zstd.BufferPool: void release(java.nio.ByteBuffer)>($r3);

        $l1 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        staticinvoke <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int freeCStream(long)>($l1);

        goto label7;

     label6:
        $r14 := @caughtexception;

        r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: boolean isClosed> = 1;

        $r16 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: com.github.luben.zstd.BufferPool bufferPool>;

        $r15 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: java.nio.ByteBuffer dstByteBuffer>;

        interfaceinvoke $r16.<com.github.luben.zstd.BufferPool: void release(java.nio.ByteBuffer)>($r15);

        $l9 = r0.<com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long stream>;

        staticinvoke <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int freeCStream(long)>($l9);

        throw $r14;

     label7:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
    }

    static void <clinit>()
    {
        long $l0;
        int $i1;

        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        $l0 = staticinvoke <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: long recommendedCOutSize()>();

        $i1 = (int) $l0;

        <com.github.luben.zstd.ZstdOutputStreamNoFinalizer: int dstSize> = $i1;

        return;
    }
}
