public class org.hamcrest.object.IsCompatibleType extends org.hamcrest.TypeSafeMatcher
{
    private final java.lang.Class type;

    public void <init>(java.lang.Class)
    {
        org.hamcrest.object.IsCompatibleType r0;
        java.lang.Class r1;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.object.IsCompatibleType: java.lang.Class type> = r1;

        return;
    }

    public boolean matchesSafely(java.lang.Class)
    {
        org.hamcrest.object.IsCompatibleType r0;
        java.lang.Class r1, $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.hamcrest.object.IsCompatibleType: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        return $z0;
    }

    public void describeMismatchSafely(java.lang.Class, org.hamcrest.Description)
    {
        org.hamcrest.object.IsCompatibleType r0;
        java.lang.Class r1;
        org.hamcrest.Description r2;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.object.IsCompatibleType r0;
        org.hamcrest.Description r1, $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("type < ");

        $r3 = r0.<org.hamcrest.object.IsCompatibleType: java.lang.Class type>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r4);

        return;
    }

    public static org.hamcrest.Matcher typeCompatibleWith(java.lang.Class)
    {
        java.lang.Class r0;
        org.hamcrest.object.IsCompatibleType $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.hamcrest.object.IsCompatibleType;

        specialinvoke $r1.<org.hamcrest.object.IsCompatibleType: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.object.IsCompatibleType r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Class $r3;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Class) r1;

        virtualinvoke r0.<org.hamcrest.object.IsCompatibleType: void describeMismatchSafely(java.lang.Class,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.object.IsCompatibleType r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.object.IsCompatibleType;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Class) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.object.IsCompatibleType: boolean matchesSafely(java.lang.Class)>($r2);

        return $z0;
    }
}
