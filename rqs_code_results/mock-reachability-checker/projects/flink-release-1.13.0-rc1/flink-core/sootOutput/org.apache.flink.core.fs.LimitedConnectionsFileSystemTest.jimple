public class org.apache.flink.core.fs.LimitedConnectionsFileSystemTest extends java.lang.Object
{
    public final org.junit.rules.TemporaryFolder tempFolder;

    public void <init>()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.junit.rules.TemporaryFolder $r1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r1.<org.junit.rules.TemporaryFolder: void <init>()>();

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder> = $r1;

        return;
    }

    public void testConstructionNumericOverflow()
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r2;
        org.apache.flink.core.fs.local.LocalFileSystem $r3;
        int $i0, $i2, $i4;
        long $l1, $l3, $l5, $l6, $l8;
        byte $b7, $b9;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r2 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r3 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>($r3, 2147483647, 2147483647, 2147483647, 9223372036854775806L, 9223372036854775806L);

        $i0 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenStreamsTotal()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $l1);

        $i2 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenOutputStreams()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $l3);

        $i4 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getMaxNumOpenInputStreams()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2147483647L, $l5);

        $l6 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: long getStreamOpenTimeout()>();

        $b7 = $l6 cmp 0L;

        if $b7 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $l8 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: long getStreamInactivityTimeout()>();

        $b9 = $l8 cmp 0L;

        if $b9 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;
    }

    public void testLimitingOutputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread[] r2;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r3;
        org.apache.flink.core.fs.local.LocalFileSystem $r4;
        org.apache.flink.core.fs.Path $r5;
        org.junit.rules.TemporaryFolder $r6;
        java.io.File $r7;
        java.net.URI $r8;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread $r9, r12, r14;
        int i2, i3, i4, i5, i6;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r3 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r4 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>($r4, 2147483647, 2, 2147483647, 0L, 0L);

        r2 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread)[61];

        i2 = 0;

     label1:
        if i2 >= 61 goto label2;

        $r5 = new org.apache.flink.core.fs.Path;

        $r6 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r7 = virtualinvoke $r6.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r8);

        $r9 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        specialinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r3, $r5, 2, 2147483647);

        r2[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = lengthof r2;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        r12 = r2[i4];

        virtualinvoke r12.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void start()>();

        i4 = i4 + 1;

        goto label3;

     label4:
        i5 = lengthof r2;

        i6 = 0;

     label5:
        if i6 >= i5 goto label6;

        r14 = r2[i6];

        virtualinvoke r14.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void sync()>();

        i6 = i6 + 1;

        goto label5;

     label6:
        return;
    }

    public void testLimitingInputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r4;
        org.apache.flink.core.fs.local.LocalFileSystem $r5;
        java.util.Random $r6;
        org.junit.rules.TemporaryFolder $r7;
        org.apache.flink.core.fs.Path $r8;
        java.net.URI $r9;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread $r10, r14, r16;
        int i2, i3, i4, i5, i6;
        java.io.File r11;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r4 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r5 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>($r5, 2147483647, 2147483647, 2, 0L, 0L);

        $r6 = new java.util.Random;

        specialinvoke $r6.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread)[61];

        i2 = 0;

     label1:
        if i2 >= 61 goto label2;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r11 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r11, $r6);

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = virtualinvoke r11.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r9);

        $r10 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread;

        specialinvoke $r10.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r8, 2, 2147483647);

        r3[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = lengthof r3;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        r14 = r3[i4];

        virtualinvoke r14.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void start()>();

        i4 = i4 + 1;

        goto label3;

     label4:
        i5 = lengthof r3;

        i6 = 0;

     label5:
        if i6 >= i5 goto label6;

        r16 = r3[i6];

        virtualinvoke r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void sync()>();

        i6 = i6 + 1;

        goto label5;

     label6:
        return;
    }

    public void testLimitingMixedStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.testutils.CheckedThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r4;
        org.apache.flink.core.fs.local.LocalFileSystem $r5;
        java.util.Random $r6;
        org.junit.rules.TemporaryFolder $r7;
        org.apache.flink.core.fs.Path $r8;
        java.net.URI $r9;
        boolean $z0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread $r10;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread $r11;
        int i2, i3, i4, i5, i6;
        java.io.File r12;
        org.apache.flink.core.testutils.CheckedThread r15, r17;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r4 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r5 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>($r5, 2);

        $r6 = new java.util.Random;

        specialinvoke $r6.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.testutils.CheckedThread)[61];

        i2 = 0;

     label1:
        if i2 >= 61 goto label4;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r12 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = virtualinvoke r12.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r9);

        $z0 = virtualinvoke $r6.<java.util.Random: boolean nextBoolean()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r12, $r6);

        $r11 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread;

        specialinvoke $r11.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r8, 2147483647, 2);

        r3[i2] = $r11;

        goto label3;

     label2:
        $r10 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        specialinvoke $r10.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r8, 2147483647, 2);

        r3[i2] = $r10;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        i3 = lengthof r3;

        i4 = 0;

     label5:
        if i4 >= i3 goto label6;

        r15 = r3[i4];

        virtualinvoke r15.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        i4 = i4 + 1;

        goto label5;

     label6:
        i5 = lengthof r3;

        i6 = 0;

     label7:
        if i6 >= i5 goto label8;

        r17 = r3[i6];

        virtualinvoke r17.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        i6 = i6 + 1;

        goto label7;

     label8:
        return;
    }

    public void testOpenTimeoutOutputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread[] r2;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread r3, $r16, $r17;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r4;
        org.apache.flink.core.fs.local.LocalFileSystem $r5;
        int $i2, i3, i4, i5;
        org.apache.flink.core.fs.Path $r6, $r12;
        org.junit.rules.TemporaryFolder $r7, $r13;
        java.io.File $r8, $r14;
        java.net.URI $r9, $r15;
        org.apache.flink.core.fs.FileSystem$WriteMode $r10;
        java.io.IOException $r18;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r4 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r5 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>($r5, 2, 50L, 0L);

        r2 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread)[2];

        i3 = 0;

     label1:
        if i3 >= 2 goto label2;

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r14 = virtualinvoke $r13.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r15 = virtualinvoke $r14.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $r16 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread;

        specialinvoke $r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r12, 2147483647, 2);

        r2[i3] = $r16;

        $r17 = r2[i3];

        virtualinvoke $r17.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void start()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        $i2 = virtualinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getTotalNumberOfOpenStreams()>();

        if $i2 >= 2 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label2;

     label3:
        $r6 = new org.apache.flink.core.fs.Path;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r8 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r9 = virtualinvoke $r8.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r6.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r9);

        $r10 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        virtualinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r6, $r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this should have timed out");

     label4:
        goto label6;

     label5:
        $r18 := @caughtexception;

     label6:
        i4 = lengthof r2;

        i5 = 0;

     label7:
        if i5 >= i4 goto label8;

        r3 = r2[i5];

        virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void wakeup()>();

        virtualinvoke r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void sync()>();

        i5 = i5 + 1;

        goto label7;

     label8:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void testOpenTimeoutInputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread r4, $r15, $r16;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r5;
        org.apache.flink.core.fs.local.LocalFileSystem $r6;
        java.util.Random $r7;
        int $i2, i3, i4, i5;
        org.junit.rules.TemporaryFolder $r8, $r12;
        org.apache.flink.core.fs.Path $r9, $r13;
        java.net.URI $r10, $r14;
        java.io.IOException $r17;
        java.io.File r18, r20;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r5 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r6 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>($r6, 2, 50L, 0L);

        $r7 = new java.util.Random;

        specialinvoke $r7.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread)[2];

        i3 = 0;

     label1:
        if i3 >= 2 goto label2;

        $r12 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r18 = virtualinvoke $r12.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r18, $r7);

        $r13 = new org.apache.flink.core.fs.Path;

        $r14 = virtualinvoke r18.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r14);

        $r15 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread;

        specialinvoke $r15.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r13, 2, 2147483647);

        r3[i3] = $r15;

        $r16 = r3[i3];

        virtualinvoke $r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void start()>();

        i3 = i3 + 1;

        goto label1;

     label2:
        $i2 = virtualinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getTotalNumberOfOpenStreams()>();

        if $i2 >= 2 goto label3;

        staticinvoke <java.lang.Thread: void sleep(long)>(1L);

        goto label2;

     label3:
        $r8 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r20 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r20, $r7);

     label4:
        $r9 = new org.apache.flink.core.fs.Path;

        $r10 = virtualinvoke r20.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r10);

        virtualinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r9);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this should have timed out");

     label5:
        goto label7;

     label6:
        $r17 := @caughtexception;

     label7:
        i4 = lengthof r3;

        i5 = 0;

     label8:
        if i5 >= i4 goto label9;

        r4 = r3[i5];

        virtualinvoke r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void wakeup()>();

        virtualinvoke r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void sync()>();

        i5 = i5 + 1;

        goto label8;

     label9:
        return;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public void testTerminateStalledOutputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread[] r2;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r4;
        org.apache.flink.core.fs.local.LocalFileSystem $r5;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread $r6, $r17, r26, r28;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread $r7, $r16, r23;
        org.apache.flink.core.fs.Path $r8, $r12;
        org.junit.rules.TemporaryFolder $r9, $r13;
        java.io.File $r10, $r14;
        java.net.URI $r11, $r15;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException $r18, $r19;
        int i2, i3, i4, i5, i6, i7, i8, i9;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r4 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r5 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>($r5, 2147483647, 2, 2147483647, 0L, 50L);

        r2 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread)[20];

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread)[20];

        i2 = 0;

     label01:
        if i2 >= 20 goto label02;

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r10 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r11);

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r14 = virtualinvoke $r13.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r15 = virtualinvoke $r14.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $r16 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        specialinvoke $r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r8, 2, 2147483647);

        r2[i2] = $r16;

        $r17 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread;

        specialinvoke $r17.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r4, $r12, 2, 2147483647);

        r3[i2] = $r17;

        i2 = i2 + 1;

        goto label01;

     label02:
        i3 = 0;

     label03:
        if i3 >= 20 goto label04;

        $r6 = r3[i3];

        virtualinvoke $r6.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void start()>();

        $r7 = r2[i3];

        virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void start()>();

        i3 = i3 + 1;

        goto label03;

     label04:
        i4 = lengthof r2;

        i5 = 0;

     label05:
        if i5 >= i4 goto label10;

        r23 = r2[i5];

     label06:
        virtualinvoke r23.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void sync()>();

     label07:
        goto label09;

     label08:
        $r19 := @caughtexception;

     label09:
        i5 = i5 + 1;

        goto label05;

     label10:
        i6 = lengthof r3;

        i7 = 0;

     label11:
        if i7 >= i6 goto label12;

        r26 = r3[i7];

        virtualinvoke r26.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void wakeup()>();

        i7 = i7 + 1;

        goto label11;

     label12:
        i8 = lengthof r3;

        i9 = 0;

     label13:
        if i9 >= i8 goto label18;

        r28 = r3[i9];

     label14:
        virtualinvoke r28.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void sync()>();

     label15:
        goto label17;

     label16:
        $r18 := @caughtexception;

     label17:
        i9 = i9 + 1;

        goto label13;

     label18:
        return;

        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label06 to label07 with label08;
        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label14 to label15 with label16;
    }

    public void testTerminateStalledInputStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread[] r4;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r5;
        org.apache.flink.core.fs.local.LocalFileSystem $r6;
        java.util.Random $r7;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread $r8, $r17, r28, r30;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread $r9, $r16, r25;
        org.junit.rules.TemporaryFolder $r10, $r11;
        org.apache.flink.core.fs.Path $r12, $r14;
        java.net.URI $r13, $r15;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException $r18, $r19;
        int i2, i3, i4, i5, i6, i7, i8, i9;
        java.io.File r20, r21;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r5 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r6 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,int,int,long,long)>($r6, 2147483647, 2147483647, 2, 0L, 50L);

        $r7 = new java.util.Random;

        specialinvoke $r7.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread)[20];

        r4 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread)[20];

        i2 = 0;

     label01:
        if i2 >= 20 goto label02;

        $r10 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r20 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r11 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r21 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r20, $r7);

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r21, $r7);

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = virtualinvoke r20.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r21.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $r16 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread;

        specialinvoke $r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r12, 2, 2147483647);

        r3[i2] = $r16;

        $r17 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread;

        specialinvoke $r17.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r14, 2, 2147483647);

        r4[i2] = $r17;

        i2 = i2 + 1;

        goto label01;

     label02:
        i3 = 0;

     label03:
        if i3 >= 20 goto label04;

        $r8 = r4[i3];

        virtualinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void start()>();

        $r9 = r3[i3];

        virtualinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void start()>();

        i3 = i3 + 1;

        goto label03;

     label04:
        i4 = lengthof r3;

        i5 = 0;

     label05:
        if i5 >= i4 goto label10;

        r25 = r3[i5];

     label06:
        virtualinvoke r25.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void sync()>();

     label07:
        goto label09;

     label08:
        $r19 := @caughtexception;

     label09:
        i5 = i5 + 1;

        goto label05;

     label10:
        i6 = lengthof r4;

        i7 = 0;

     label11:
        if i7 >= i6 goto label12;

        r28 = r4[i7];

        virtualinvoke r28.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void wakeup()>();

        i7 = i7 + 1;

        goto label11;

     label12:
        i8 = lengthof r4;

        i9 = 0;

     label13:
        if i9 >= i8 goto label18;

        r30 = r4[i9];

     label14:
        virtualinvoke r30.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void sync()>();

     label15:
        goto label17;

     label16:
        $r18 := @caughtexception;

     label17:
        i9 = i9 + 1;

        goto label13;

     label18:
        return;

        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label06 to label07 with label08;
        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label14 to label15 with label16;
    }

    public void testTerminateStalledMixedStreams() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.testutils.CheckedThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread[] r4;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r5;
        org.apache.flink.core.fs.local.LocalFileSystem $r6;
        java.util.Random $r7;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread $r8, r30, r32;
        org.apache.flink.core.testutils.CheckedThread $r9, r27;
        org.junit.rules.TemporaryFolder $r10, $r11;
        org.apache.flink.core.fs.Path $r12, $r14;
        java.net.URI $r13, $r15;
        boolean $z0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread $r16;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread $r17;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread $r18;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread $r19;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException $r20, $r21;
        int i2, i3, i4, i5, i6, i7, i8, i9;
        java.io.File r22, r23;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r5 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r6 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r5.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>($r6, 2, 0L, 50L);

        $r7 = new java.util.Random;

        specialinvoke $r7.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.testutils.CheckedThread)[20];

        r4 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread)[20];

        i2 = 0;

     label01:
        if i2 >= 20 goto label04;

        $r10 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r22 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r11 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r23 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r12 = new org.apache.flink.core.fs.Path;

        $r13 = virtualinvoke r22.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r12.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $r14 = new org.apache.flink.core.fs.Path;

        $r15 = virtualinvoke r23.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r14.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r15);

        $z0 = virtualinvoke $r7.<java.util.Random: boolean nextBoolean()>();

        if $z0 == 0 goto label02;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r22, $r7);

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r23, $r7);

        $r18 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread;

        specialinvoke $r18.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r12, 2, 2147483647);

        r3[i2] = $r18;

        $r19 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread;

        specialinvoke $r19.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r14, 2, 2147483647);

        r4[i2] = $r19;

        goto label03;

     label02:
        $r16 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        specialinvoke $r16.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r12, 2, 2147483647);

        r3[i2] = $r16;

        $r17 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread;

        specialinvoke $r17.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingWriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r5, $r14, 2, 2147483647);

        r4[i2] = $r17;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        i3 = 0;

     label05:
        if i3 >= 20 goto label06;

        $r8 = r4[i3];

        virtualinvoke $r8.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void start()>();

        $r9 = r3[i3];

        virtualinvoke $r9.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        i3 = i3 + 1;

        goto label05;

     label06:
        i4 = lengthof r3;

        i5 = 0;

     label07:
        if i5 >= i4 goto label12;

        r27 = r3[i5];

     label08:
        virtualinvoke r27.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

     label11:
        i5 = i5 + 1;

        goto label07;

     label12:
        i6 = lengthof r4;

        i7 = 0;

     label13:
        if i7 >= i6 goto label14;

        r30 = r4[i7];

        virtualinvoke r30.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void wakeup()>();

        i7 = i7 + 1;

        goto label13;

     label14:
        i8 = lengthof r4;

        i9 = 0;

     label15:
        if i9 >= i8 goto label20;

        r32 = r4[i9];

     label16:
        virtualinvoke r32.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$BlockingThread: void sync()>();

     label17:
        goto label19;

     label18:
        $r20 := @caughtexception;

     label19:
        i9 = i9 + 1;

        goto label15;

     label20:
        return;

        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label08 to label09 with label10;
        catch org.apache.flink.core.fs.LimitedConnectionsFileSystem$StreamTimeoutException from label16 to label17 with label18;
    }

    public void testFailingStreamsUnregister() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r2;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$FailFs $r3;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        org.apache.flink.core.fs.Path $r4, $r9;
        org.junit.rules.TemporaryFolder $r5, $r10;
        java.io.File $r6, $r11;
        java.net.URI $r7, $r12;
        org.apache.flink.core.fs.FileSystem$WriteMode $r13;
        java.io.IOException $r15, $r16;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r2 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r3 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$FailFs;

        specialinvoke $r3.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$FailFs: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$1)>(null);

        specialinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int)>($r3, 1);

        $i0 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getNumberOfOpenInputStreams()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $i2 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getNumberOfOpenOutputStreams()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $i4 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getTotalNumberOfOpenStreams()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

     label1:
        $r4 = new org.apache.flink.core.fs.Path;

        $r5 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r6 = virtualinvoke $r5.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r7 = virtualinvoke $r6.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r7);

        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r4);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this is expected to fail with an exception");

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

     label4:
        $r9 = new org.apache.flink.core.fs.Path;

        $r10 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r11 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r12 = virtualinvoke $r11.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r12);

        $r13 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r9, $r13);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("this is expected to fail with an exception");

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

     label7:
        $i6 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getNumberOfOpenInputStreams()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $i8 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getNumberOfOpenOutputStreams()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l9);

        $i10 = virtualinvoke $r2.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: int getTotalNumberOfOpenStreams()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l11);

        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void testSlowOutputStreamNotClosed() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread r4, $r18, r31;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r7;
        org.apache.flink.core.fs.local.LocalFileSystem $r8;
        java.util.Random $r9;
        int $i0, i1, i2, i3, i4, i5, i6;
        org.apache.flink.core.fs.Path $r10, $r16;
        org.junit.rules.TemporaryFolder $r11, $r15;
        java.io.File $r12, r23;
        java.net.URI $r13, $r17;
        org.apache.flink.core.fs.FileSystem$WriteMode $r14;
        java.lang.Throwable $r20, $r21, $r22, r26;
        org.apache.flink.core.fs.FSDataOutputStream r25;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r7 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r8 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>($r8, 1, 0L, 1000L);

        $r9 = new java.util.Random;

        specialinvoke $r9.<java.util.Random: void <init>()>();

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread)[10];

        i1 = 0;

     label01:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label02;

        $r15 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r23 = virtualinvoke $r15.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random)>(r23, $r9);

        $r16 = new org.apache.flink.core.fs.Path;

        $r17 = virtualinvoke r23.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r16.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r17);

        $r18 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread;

        specialinvoke $r18.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r7, $r16, 1, 2147483647);

        r3[i1] = $r18;

        i1 = i1 + 1;

        goto label01;

     label02:
        $r10 = new org.apache.flink.core.fs.Path;

        $r11 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r12 = virtualinvoke $r11.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r13 = virtualinvoke $r12.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r13);

        $r14 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        r25 = virtualinvoke $r7.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r10, $r14);

        r26 = null;

     label03:
        i2 = lengthof r3;

        i3 = 0;

     label04:
        if i3 >= i2 goto label05;

        r4 = r3[i3];

        virtualinvoke r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void start()>();

        i3 = i3 + 1;

        goto label04;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

        i4 = 50;

     label06:
        if i4 <= 0 goto label07;

        virtualinvoke r25.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(i4);

        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

        i4 = i4 + -1;

        goto label06;

     label07:
        if r25 == null goto label17;

        goto label08;

     label08:
        virtualinvoke r25.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label17;

     label09:
        $r20 := @caughtexception;

        r26 = $r20;

        throw $r20;

     label10:
        $r22 := @caughtexception;

     label11:
        if r25 == null goto label16;

        if r26 == null goto label15;

     label12:
        virtualinvoke r25.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r21 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label16;

     label15:
        virtualinvoke r25.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label16:
        throw $r22;

     label17:
        i5 = lengthof r3;

        i6 = 0;

     label18:
        if i6 >= i5 goto label19;

        r31 = r3[i6];

        virtualinvoke r31.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$ReaderThread: void sync()>();

        i6 = i6 + 1;

        goto label18;

     label19:
        return;

        catch java.lang.Throwable from label03 to label07 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    public void testSlowInputStreamNotClosed() throws java.lang.Exception
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        java.io.File r1, $r15;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread[] r3;
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread r4, $r17, r29;
        org.junit.rules.TemporaryFolder $r7, $r14;
        java.util.Random $r8;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem $r9;
        org.apache.flink.core.fs.local.LocalFileSystem $r10;
        int $i0, $i1, i2, i3, i4, i5, i6;
        org.apache.flink.core.fs.Path $r11, $r13;
        java.net.URI $r12, $r16;
        java.lang.Throwable $r19, $r20, $r21, r24;
        org.apache.flink.core.fs.FSDataInputStream r23;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        $r7 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        r1 = virtualinvoke $r7.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>()>();

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random,int)>(r1, $r8, 50);

        $r9 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem;

        $r10 = staticinvoke <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()>();

        specialinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: void <init>(org.apache.flink.core.fs.FileSystem,int,long,long)>($r10, 1, 0L, 1000L);

        r3 = newarray (org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread)[10];

        i2 = 0;

     label01:
        $i0 = lengthof r3;

        if i2 >= $i0 goto label02;

        $r13 = new org.apache.flink.core.fs.Path;

        $r14 = r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: org.junit.rules.TemporaryFolder tempFolder>;

        $r15 = virtualinvoke $r14.<org.junit.rules.TemporaryFolder: java.io.File newFile()>();

        $r16 = virtualinvoke $r15.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r13.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r16);

        $r17 = new org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread;

        specialinvoke $r17.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void <init>(org.apache.flink.core.fs.LimitedConnectionsFileSystem,org.apache.flink.core.fs.Path,int,int)>($r9, $r13, 1, 2147483647);

        r3[i2] = $r17;

        i2 = i2 + 1;

        goto label01;

     label02:
        $r11 = new org.apache.flink.core.fs.Path;

        $r12 = virtualinvoke r1.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r11.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r12);

        r23 = virtualinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>($r11);

        r24 = null;

     label03:
        i3 = lengthof r3;

        i4 = 0;

     label04:
        if i4 >= i3 goto label05;

        r4 = r3[i4];

        virtualinvoke r4.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void start()>();

        i4 = i4 + 1;

        goto label04;

     label05:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label06:
        $i1 = virtualinvoke r23.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

        if $i1 == -1 goto label07;

        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

        goto label06;

     label07:
        if r23 == null goto label17;

        goto label08;

     label08:
        virtualinvoke r23.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        goto label17;

     label09:
        $r21 := @caughtexception;

        r24 = $r21;

        throw $r21;

     label10:
        $r20 := @caughtexception;

     label11:
        if r23 == null goto label16;

        if r24 == null goto label15;

     label12:
        virtualinvoke r23.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label13:
        goto label16;

     label14:
        $r19 := @caughtexception;

        virtualinvoke r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label16;

     label15:
        virtualinvoke r23.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

     label16:
        throw $r20;

     label17:
        i5 = lengthof r3;

        i6 = 0;

     label18:
        if i6 >= i5 goto label19;

        r29 = r3[i6];

        virtualinvoke r29.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest$WriterThread: void sync()>();

        i6 = i6 + 1;

        goto label18;

     label19:
        return;

        catch java.lang.Throwable from label03 to label07 with label09;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label11 with label10;
    }

    private void createRandomContents(java.io.File, java.util.Random) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        java.io.File r1;
        java.util.Random r2;
        int $i0, $i1;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Random;

        $i0 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(10000);

        $i1 = $i0 + 1;

        specialinvoke r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystemTest: void createRandomContents(java.io.File,java.util.Random,int)>(r1, r2, $i1);

        return;
    }

    private void createRandomContents(java.io.File, java.util.Random, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystemTest r0;
        java.io.File r1;
        java.util.Random r2;
        int i0;
        byte[] r3;
        java.io.FileOutputStream $r7;
        java.lang.Throwable $r8, $r9, $r10, r12;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystemTest;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Random;

        i0 := @parameter2: int;

        r3 = newarray (byte)[i0];

        virtualinvoke r2.<java.util.Random: void nextBytes(byte[])>(r3);

        $r7 = new java.io.FileOutputStream;

        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

        r12 = null;

     label01:
        virtualinvoke $r7.<java.io.FileOutputStream: void write(byte[])>(r3);

     label02:
        if $r7 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r12 = $r9;

        throw $r9;

     label05:
        $r8 := @caughtexception;

     label06:
        if $r7 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        virtualinvoke $r7.<java.io.FileOutputStream: void close()>();

     label11:
        throw $r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }
}
