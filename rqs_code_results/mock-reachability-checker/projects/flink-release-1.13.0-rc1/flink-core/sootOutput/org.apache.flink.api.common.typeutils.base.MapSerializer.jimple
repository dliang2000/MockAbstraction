public final class org.apache.flink.api.common.typeutils.base.MapSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeSerializer keySerializer;
    private final org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer;

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The key serializer cannot be null");

        $r4 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r3;

        r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "The value serializer cannot be null.");

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r5;

        r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer> = $r6;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getKeySerializer()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getValueSerializer()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0, $r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        if r1 != $r5 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        if r2 != $r6 goto label1;

        $r7 = r0;

        goto label2;

     label1:
        $r7 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>(r1, r2);

     label2:
        return $r7;
    }

    public java.util.Map createInstance()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        return $r1;
    }

    public java.util.Map copy(java.util.Map)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.Map r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Object r5, $r9, $r11, $r12, $r14, $r16;
        java.util.HashMap $r7;
        int $i0;
        java.util.Set $r8;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r10, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.util.Map;

        $r7 = new java.util.HashMap;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>($i0);

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        $r10 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r11);

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r12 != null goto label2;

        $r16 = null;

        goto label3;

     label2:
        $r13 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>($r14);

     label3:
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r16);

        goto label1;

     label4:
        return $r7;
    }

    public java.util.Map copy(java.util.Map, java.util.Map)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.Map r1, r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map copy(java.util.Map)>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        return -1;
    }

    public void serialize(java.util.Map, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.Map r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r8, $r9, $r11;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r10;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r6;

        $r7 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r8, r2);

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r9 != null goto label2;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        goto label3;

     label2:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        $r10 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>($r11, r2);

     label3:
        goto label1;

     label4:
        return;
    }

    public java.util.Map deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i1;
        java.lang.Object r3, $r9;
        boolean z0;
        java.util.HashMap $r5;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6, $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        r3 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label2;

        $r9 = null;

        goto label3;

     label2:
        $r7 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

     label3:
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r9);

        i1 = i1 + 1;

        goto label1;

     label4:
        return $r5;
    }

    public java.util.Map deserialize(java.util.Map, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.Map r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(z0);

        if z0 != 0 goto label2;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0, $r4, $r7;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6, $r8, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        $r4 = (org.apache.flink.api.common.typeutils.base.MapSerializer) r1;

        $r6 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getKeySerializer()>();

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        $r7 = (org.apache.flink.api.common.typeutils.base.MapSerializer) r1;

        $r9 = virtualinvoke $r7.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer getValueSerializer()>();

        $z1 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer keySerializer>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        $i1 = $i0 * 31;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: org.apache.flink.api.common.typeutils.TypeSerializer valueSerializer>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.MapSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.MapSerializer)>(r0);

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.util.Map $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.util.Map) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map deserialize(java.util.Map,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.util.Map $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.util.Map $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.util.Map) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: void serialize(java.util.Map,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.lang.Object r1, r2;
        java.util.Map $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.util.Map) r1;

        $r3 = (java.util.Map) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map copy(java.util.Map,java.util.Map)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.lang.Object r1;
        java.util.Map $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map copy(java.util.Map)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.MapSerializer r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.MapSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.MapSerializer: java.util.Map createInstance()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.MapSerializer: long serialVersionUID> = -6885593032367050078L;

        return;
    }
}
