public class org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot extends org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot
{
    static final int VERSION;
    private int val;
    private java.lang.String msg;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(int, java.lang.String)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;
        int i0;
        java.lang.String r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val> = i0;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg> = r1;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $i0 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r2);

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val> = $i0;

        $r2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg> = $r2;

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0, $r2, $r3;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.String $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        if $z0 == 0 goto label5;

        $i1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot) r1;

        $i0 = $r2.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val>;

        if $i1 != $i0 goto label3;

        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg>;

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot) r1;

        $r4 = $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot;

        $i0 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int val>;

        $i1 = 31 * $i0;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: java.lang.String msg>;

        $i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest$TestConfigSnapshot: int VERSION> = 1;

        return;
    }
}
