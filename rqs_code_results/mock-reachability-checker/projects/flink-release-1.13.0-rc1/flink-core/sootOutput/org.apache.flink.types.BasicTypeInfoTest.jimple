public class org.apache.flink.types.BasicTypeInfoTest extends org.apache.flink.util.TestLogger
{
    static java.lang.Class[] classes;

    public void <init>()
    {
        org.apache.flink.types.BasicTypeInfoTest r0;

        r0 := @this: org.apache.flink.types.BasicTypeInfoTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testBasicTypeInfoEquality()
    {
        org.apache.flink.types.BasicTypeInfoTest r0;
        java.lang.Class[] r1;
        int i0, $i1, $i3, i5;
        java.lang.Class r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r3, r4;
        long $l2, $l4;

        r0 := @this: org.apache.flink.types.BasicTypeInfoTest;

        r1 = <org.apache.flink.types.BasicTypeInfoTest: java.lang.Class[] classes>;

        i0 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        r2 = r1[i5];

        r3 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r2);

        r4 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r3, r4);

        $i1 = virtualinvoke r3.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: int hashCode()>();

        $l2 = (long) $i1;

        $i3 = virtualinvoke r4.<org.apache.flink.api.common.typeinfo.BasicTypeInfo: int hashCode()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void testBasicTypeInfoInequality()
    {
        org.apache.flink.types.BasicTypeInfoTest r0;
        java.lang.Class[] r1, r3;
        int i0, i1, i2, i3;
        java.lang.Class r2, r4;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo r5, r6;
        boolean $z0;

        r0 := @this: org.apache.flink.types.BasicTypeInfoTest;

        r1 = <org.apache.flink.types.BasicTypeInfoTest: java.lang.Class[] classes>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        r2 = r1[i2];

        r3 = <org.apache.flink.types.BasicTypeInfoTest: java.lang.Class[] classes>;

        i1 = lengthof r3;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r4 = r3[i3];

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label3;

        r5 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r2);

        r6 = staticinvoke <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo getInfoFor(java.lang.Class)>(r4);

        staticinvoke <org.junit.Assert: void assertNotEquals(java.lang.Object,java.lang.Object)>(r5, r6);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;

        $r0 = newarray (java.lang.Class)[14];

        $r0[0] = class "Ljava/lang/String;";

        $r0[1] = class "Ljava/lang/Integer;";

        $r0[2] = class "Ljava/lang/Boolean;";

        $r0[3] = class "Ljava/lang/Byte;";

        $r0[4] = class "Ljava/lang/Short;";

        $r0[5] = class "Ljava/lang/Long;";

        $r0[6] = class "Ljava/lang/Float;";

        $r0[7] = class "Ljava/lang/Double;";

        $r0[8] = class "Ljava/lang/Character;";

        $r0[9] = class "Ljava/util/Date;";

        $r0[10] = class "Ljava/lang/Void;";

        $r0[11] = class "Ljava/math/BigInteger;";

        $r0[12] = class "Ljava/math/BigDecimal;";

        $r0[13] = class "Ljava/time/Instant;";

        <org.apache.flink.types.BasicTypeInfoTest: java.lang.Class[] classes> = $r0;

        return;
    }
}
