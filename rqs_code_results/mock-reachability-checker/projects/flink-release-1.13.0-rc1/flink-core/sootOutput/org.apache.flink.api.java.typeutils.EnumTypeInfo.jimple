public class org.apache.flink.api.java.typeutils.EnumTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation implements org.apache.flink.api.common.typeinfo.AtomicType
{
    private static final long serialVersionUID;
    private final java.lang.Class typeClass;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        java.lang.Class r1, $r3, $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r9;
        java.lang.String $r8, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Enum type class must not be null.");

        $r3 = class "Ljava/lang/Enum;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EnumTypeInfo can only be used for subclasses of ");

        $r7 = class "Ljava/lang/Enum;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass> = r1;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        boolean z0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.base.EnumComparator $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $r2 = new org.apache.flink.api.common.typeutils.base.EnumComparator;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumComparator: void <init>(boolean)>(z0);

        return $r2;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        return $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.base.EnumSerializer $r2;
        java.lang.Class $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r2 = new org.apache.flink.api.common.typeutils.base.EnumSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer: void <init>(java.lang.Class)>($r3);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EnumTypeInfo<");

        $r3 = r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo;

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.EnumTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.EnumTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.EnumTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.EnumTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.EnumTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.EnumTypeInfo: java.lang.Class typeClass>;

        if $r4 != $r3 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.EnumTypeInfo: long serialVersionUID> = 8936740290137178660L;

        return;
    }
}
