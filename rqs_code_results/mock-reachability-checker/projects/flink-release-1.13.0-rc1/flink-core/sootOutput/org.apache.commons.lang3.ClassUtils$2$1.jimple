class org.apache.commons.lang3.ClassUtils$2$1 extends java.lang.Object implements java.util.Iterator
{
    java.util.Iterator interfaces;
    final java.util.Iterator val$wrapped;
    final java.util.Set val$seenInterfaces;
    final org.apache.commons.lang3.ClassUtils$2 this$0;

    void <init>(org.apache.commons.lang3.ClassUtils$2, java.util.Iterator, java.util.Set)
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        org.apache.commons.lang3.ClassUtils$2 r1;
        java.util.Iterator r2, $r5;
        java.util.Set r3, $r4;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        r1 := @parameter0: org.apache.commons.lang3.ClassUtils$2;

        r2 := @parameter1: java.util.Iterator;

        r3 := @parameter2: java.util.Set;

        r0.<org.apache.commons.lang3.ClassUtils$2$1: org.apache.commons.lang3.ClassUtils$2 this$0> = r1;

        r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator val$wrapped> = r2;

        r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Set val$seenInterfaces> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator interfaces> = $r5;

        return;
    }

    public boolean hasNext()
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        java.util.Iterator $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        $r1 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator interfaces>;

        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator val$wrapped>;

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public java.lang.Class next()
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        java.util.Iterator $r2, $r3, $r6, $r7;
        boolean $z0;
        java.lang.Object $r4, $r8;
        java.util.LinkedHashSet $r5;
        java.util.Set $r9;
        java.lang.Class r10, r11;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        $r2 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator interfaces>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator interfaces>;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Class) $r8;

        $r9 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Set val$seenInterfaces>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>(r10);

        return r10;

     label1:
        $r3 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator val$wrapped>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.Class) $r4;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        specialinvoke r0.<org.apache.commons.lang3.ClassUtils$2$1: void walkInterfaces(java.util.Set,java.lang.Class)>($r5, r11);

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Iterator interfaces> = $r6;

        return r11;
    }

    private void walkInterfaces(java.util.Set, java.lang.Class)
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        java.util.Set r1, $r5;
        java.lang.Class r2, r4;
        java.lang.Class[] r3;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Class;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $r5 = r0.<org.apache.commons.lang3.ClassUtils$2$1: java.util.Set val$seenInterfaces>;

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label2;

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        specialinvoke r0.<org.apache.commons.lang3.ClassUtils$2$1: void walkInterfaces(java.util.Set,java.lang.Class)>(r1, r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void remove()
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        org.apache.commons.lang3.ClassUtils$2$1 r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.commons.lang3.ClassUtils$2$1;

        $r1 = virtualinvoke r0.<org.apache.commons.lang3.ClassUtils$2$1: java.lang.Class next()>();

        return $r1;
    }
}
