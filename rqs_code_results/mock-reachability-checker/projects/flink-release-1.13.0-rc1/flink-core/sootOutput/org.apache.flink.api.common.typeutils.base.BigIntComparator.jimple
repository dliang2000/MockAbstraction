public final class org.apache.flink.api.common.typeutils.base.BigIntComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        java.math.BigInteger r3, r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView)>(r1);

        r4 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigIntSerializer: java.math.BigInteger readBigInteger(org.apache.flink.core.memory.DataInputView)>(r2);

        i0 = virtualinvoke r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r4);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BigIntComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        return 1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        return 2147483647;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        i0 := @parameter0: int;

        return 1;
    }

    public void putNormalizedKey(java.math.BigInteger, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;
        java.math.BigInteger r1;
        org.apache.flink.core.memory.MemorySegment r2;
        byte b0, $b3, b16;
        int $i1, $i2, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i12, i13, i14, i15, i17;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        i10 = 0;

        if i9 <= 0 goto label05;

        i11 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        i10 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        if i11 >= 0 goto label01;

        $i12 = 2147483647 - i10;

        goto label02;

     label01:
        $i12 = i10;

     label02:
        i13 = $i12;

        if i11 < 0 goto label03;

        i13 = $i12 | -2147483648;

     label03:
        i14 = 0;

     label04:
        if i14 >= 4 goto label05;

        if i9 <= 0 goto label05;

        $i4 = 3 - i14;

        $i5 = 8 * $i4;

        $i6 = i13 >>> $i5;

        b0 = (byte) $i6;

        $i7 = i8;

        i8 = i8 + 1;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i7, b0);

        i14 = i14 + 1;

        i9 = i9 + -1;

        goto label04;

     label05:
        i15 = i10 - 1;

     label06:
        if i9 <= 0 goto label10;

        b16 = 0;

        i17 = 0;

     label07:
        if i17 >= 8 goto label09;

        if i15 < 0 goto label09;

        $i2 = b16 << 1;

        b16 = (byte) $i2;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean testBit(int)>(i15);

        if $z0 == 0 goto label08;

        $b3 = b16 | 1;

        b16 = (byte) $b3;

     label08:
        i17 = i17 + 1;

        i15 = i15 + -1;

        goto label07;

     label09:
        $i1 = i8;

        i8 = i8 + 1;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i1, b16);

        i9 = i9 + -1;

        goto label06;

     label10:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.BigIntComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigIntComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BigIntComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigIntComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntComparator: org.apache.flink.api.common.typeutils.base.BigIntComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BigIntComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.math.BigInteger $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigIntComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.math.BigInteger) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigIntComparator: void putNormalizedKey(java.math.BigInteger,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.BigIntComparator: long serialVersionUID> = 1L;

        return;
    }
}
