public class org.apache.flink.types.StringValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, java.lang.CharSequence, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue, java.lang.Appendable
{
    private static final long serialVersionUID;
    private static final char[] EMPTY_STRING;
    private static final int HIGH_BIT;
    private static final int HIGH_BIT14;
    private static final int HIGH_BIT21;
    private static final int HIGH_BIT28;
    private static final int HIGH_BIT2;
    private static final int HIGH_BIT2_MASK;
    private static final int SHORT_STRING_MAX_LENGTH;
    private static final java.lang.ThreadLocal charBuffer;
    private char[] value;
    private int len;
    private int hashCode;

    public void <init>()
    {
        org.apache.flink.types.StringValue r0;
        char[] $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.flink.types.StringValue: char[] EMPTY_STRING>;

        r0.<org.apache.flink.types.StringValue: char[] value> = $r1;

        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        char[] $r2;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.flink.types.StringValue: char[] EMPTY_STRING>;

        r0.<org.apache.flink.types.StringValue: char[] value> = $r2;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(java.lang.CharSequence)>(r1);

        return;
    }

    public void <init>(org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.StringValue r0, r1;
        char[] $r2;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.flink.types.StringValue: char[] EMPTY_STRING>;

        r0.<org.apache.flink.types.StringValue: char[] value> = $r2;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(org.apache.flink.types.StringValue)>(r1);

        return;
    }

    public void <init>(org.apache.flink.types.StringValue, int, int)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, i1;
        char[] $r2;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.flink.types.StringValue: char[] EMPTY_STRING>;

        r0.<org.apache.flink.types.StringValue: char[] value> = $r2;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(org.apache.flink.types.StringValue,int,int)>(r1, i0, i1);

        return;
    }

    public void setLength(int)
    {
        org.apache.flink.types.StringValue r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        if i0 <= $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length must be between 0 and the current length.");

        throw $r1;

     label2:
        r0.<org.apache.flink.types.StringValue: int len> = i0;

        return;
    }

    public char[] getCharArray()
    {
        org.apache.flink.types.StringValue r0;
        char[] $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        $r1 = r0.<org.apache.flink.types.StringValue: char[] value>;

        return $r1;
    }

    public java.lang.String getValue()
    {
        org.apache.flink.types.StringValue r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.StringValue: java.lang.String toString()>();

        return $r1;
    }

    public void setValue(java.lang.CharSequence)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return;
    }

    public void setValue(org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.StringValue r0, r1;
        int $i0;
        char[] $r3;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r1.<org.apache.flink.types.StringValue: char[] value>;

        $i0 = r1.<org.apache.flink.types.StringValue: int len>;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(char[],int,int)>($r3, 0, $i0);

        return;
    }

    public void setValue(org.apache.flink.types.StringValue, int, int)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, i1;
        char[] $r3;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r1.<org.apache.flink.types.StringValue: char[] value>;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(char[],int,int)>($r3, i0, i1);

        return;
    }

    public void setValue(java.lang.CharSequence, int, int)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2, $i3, $i4, i6;
        char[] $r3;
        char $c5;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" len: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value.len: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label2:
        specialinvoke r0.<org.apache.flink.types.StringValue: void ensureSize(int)>(i1);

        r0.<org.apache.flink.types.StringValue: int len> = i1;

        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i4 = i0 + i6;

        $c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i4);

        $r3[i6] = $c5;

        i6 = i6 + 1;

        goto label3;

     label4:
        r0.<org.apache.flink.types.StringValue: int hashCode> = 0;

        return;
    }

    public void setValue(java.nio.CharBuffer)
    {
        org.apache.flink.types.StringValue r0;
        java.nio.CharBuffer r1;
        int i0;
        char[] $r3;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.nio.CharBuffer;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        i0 = virtualinvoke r1.<java.nio.CharBuffer: int length()>();

        specialinvoke r0.<org.apache.flink.types.StringValue: void ensureSize(int)>(i0);

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>($r3, 0, i0);

        r0.<org.apache.flink.types.StringValue: int len> = i0;

        r0.<org.apache.flink.types.StringValue: int hashCode> = 0;

        return;
    }

    public void setValue(char[], int, int)
    {
        org.apache.flink.types.StringValue r0;
        char[] r1, $r3;
        int i0, i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        specialinvoke r0.<org.apache.flink.types.StringValue: void ensureSize(int)>(i1);

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, 0, i1);

        r0.<org.apache.flink.types.StringValue: int len> = i1;

        r0.<org.apache.flink.types.StringValue: int hashCode> = 0;

        return;
    }

    public void setValueAscii(byte[], int, int)
    {
        org.apache.flink.types.StringValue r0;
        byte[] r1;
        int i0, i1, $i2, $i3, i7, i8;
        char[] r2;
        byte $b4;
        short $s5;
        char $c6;
        java.lang.NullPointerException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Bytes must not be null");

        throw $r3;

     label1:
        if i0 < 0 goto label2;

        if i7 < 0 goto label2;

        $i2 = lengthof r1;

        $i3 = $i2 - i0;

        if i7 <= $i3 goto label3;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label3:
        specialinvoke r0.<org.apache.flink.types.StringValue: void ensureSize(int)>(i0);

        r0.<org.apache.flink.types.StringValue: int len> = i0;

        r0.<org.apache.flink.types.StringValue: int hashCode> = 0;

        r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        i8 = 0;

        i1 = i7 + i0;

     label4:
        if i7 >= i1 goto label5;

        $b4 = r1[i7];

        $s5 = $b4 & 255;

        $c6 = (char) $s5;

        r2[i8] = $c6;

        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label4;

     label5:
        return;
    }

    public org.apache.flink.types.StringValue substring(int)
    {
        org.apache.flink.types.StringValue r0, $r1;
        int i0, $i1;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        $r1 = virtualinvoke r0.<org.apache.flink.types.StringValue: org.apache.flink.types.StringValue substring(int,int)>(i0, $i1);

        return $r1;
    }

    public org.apache.flink.types.StringValue substring(int, int)
    {
        org.apache.flink.types.StringValue r0, $r1;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.flink.types.StringValue;

        $i2 = i1 - i0;

        specialinvoke $r1.<org.apache.flink.types.StringValue: void <init>(org.apache.flink.types.StringValue,int,int)>(r0, i0, $i2);

        return $r1;
    }

    public void substring(org.apache.flink.types.StringValue, int)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, $i1;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 := @parameter1: int;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void substring(org.apache.flink.types.StringValue,int,int)>(r1, i0, $i1);

        return;
    }

    public void substring(org.apache.flink.types.StringValue, int, int)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i1 - i0;

        virtualinvoke r1.<org.apache.flink.types.StringValue: void setValue(org.apache.flink.types.StringValue,int,int)>(r0, i0, $i2);

        return;
    }

    public int find(java.lang.CharSequence)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = virtualinvoke r0.<org.apache.flink.types.StringValue: int find(java.lang.CharSequence,int)>(r1, 0);

        return $i0;
    }

    public int find(java.lang.CharSequence, int)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, i4, $i5, $i7, $i8, $i10, i12, i13;
        char c3, $c6, $c9, $c11;
        char[] $r2, $r3;
        java.lang.IllegalArgumentException $r4;
        boolean z0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 = r0.<org.apache.flink.types.StringValue: int len>;

        i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot find empty string.");

        throw $r4;

     label1:
        i12 = i0;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

     label2:
        if i12 >= i1 goto label7;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i5 = i12;

        i12 = i12 + 1;

        $c6 = $r2[$i5];

        if c3 != $c6 goto label2;

        i4 = i12;

        i13 = 1;

        z0 = 1;

     label3:
        if i13 >= i2 goto label5;

        if i12 < i1 goto label4;

        i12 = i4;

        z0 = 0;

        goto label5;

     label4:
        $i8 = i13;

        i13 = i13 + 1;

        $c9 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i8);

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i10 = i12;

        i12 = i12 + 1;

        $c11 = $r3[$i10];

        if $c9 == $c11 goto label3;

        i12 = i4;

        z0 = 0;

        goto label5;

     label5:
        if z0 == 0 goto label6;

        $i7 = i4 - 1;

        return $i7;

     label6:
        goto label2;

     label7:
        return -1;
    }

    public boolean startsWith(java.lang.CharSequence, int)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        char[] r2;
        int i0, i1, $i2, $i3, $i4, i7, i8;
        char $c5, $c6;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        i7 := @parameter1: int;

        r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        i0 = r0.<org.apache.flink.types.StringValue: int len>;

        i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i7 < 0 goto label1;

        $i2 = i0 - i1;

        if i7 <= $i2 goto label2;

     label1:
        return 0;

     label2:
        i8 = 0;

     label3:
        if i8 >= i1 goto label4;

        $i3 = i7;

        i7 = i7 + 1;

        $c5 = r2[$i3];

        $i4 = i8;

        i8 = i8 + 1;

        $c6 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i4);

        if $c5 == $c6 goto label3;

        return 0;

     label4:
        return 1;
    }

    public boolean startsWith(java.lang.CharSequence)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = virtualinvoke r0.<org.apache.flink.types.StringValue: boolean startsWith(java.lang.CharSequence,int)>(r1, 0);

        return $z0;
    }

    public java.lang.Appendable append(char)
    {
        org.apache.flink.types.StringValue r0;
        char c0;
        int $i1, $i2, $i3, $i4;
        char[] $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        c0 := @parameter0: char;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        $i2 = $i1 + 1;

        specialinvoke r0.<org.apache.flink.types.StringValue: void grow(int)>($i2);

        $r1 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i3 = r0.<org.apache.flink.types.StringValue: int len>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.types.StringValue: int len> = $i4;

        $r1[$i3] = c0;

        return r0;
    }

    public java.lang.Appendable append(java.lang.CharSequence)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<org.apache.flink.types.StringValue: java.lang.Appendable append(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return r0;
    }

    public java.lang.Appendable append(java.lang.CharSequence, int, int)
    {
        org.apache.flink.types.StringValue r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i10;
        char[] $r2;
        char $c9;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 - i0;

        $i3 = r0.<org.apache.flink.types.StringValue: int len>;

        $i4 = $i3 + i2;

        specialinvoke r0.<org.apache.flink.types.StringValue: void grow(int)>($i4);

        i10 = i0;

     label1:
        if i10 >= i1 goto label2;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i7 = r0.<org.apache.flink.types.StringValue: int len>;

        $i8 = $i7 + i10;

        $c9 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i10);

        $r2[$i8] = $c9;

        i10 = i10 + 1;

        goto label1;

     label2:
        $i5 = r0.<org.apache.flink.types.StringValue: int len>;

        $i6 = $i5 + i2;

        r0.<org.apache.flink.types.StringValue: int len> = $i6;

        return r0;
    }

    public java.lang.Appendable append(org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.StringValue r0, r1;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        $i0 = virtualinvoke r1.<org.apache.flink.types.StringValue: int length()>();

        virtualinvoke r0.<org.apache.flink.types.StringValue: java.lang.Appendable append(org.apache.flink.types.StringValue,int,int)>(r1, 0, $i0);

        return r0;
    }

    public java.lang.Appendable append(org.apache.flink.types.StringValue, int, int)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r2, $r3;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1 - i0;

        $i3 = r0.<org.apache.flink.types.StringValue: int len>;

        $i4 = $i3 + i2;

        specialinvoke r0.<org.apache.flink.types.StringValue: void grow(int)>($i4);

        $r3 = r1.<org.apache.flink.types.StringValue: char[] value>;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i5 = r0.<org.apache.flink.types.StringValue: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, $r2, $i5, i2);

        $i6 = r0.<org.apache.flink.types.StringValue: int len>;

        $i7 = $i6 + i2;

        r0.<org.apache.flink.types.StringValue: int len> = $i7;

        return r0;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.StringValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, i11, i12, i13, i15, i16, i17, i18, i19;
        char $c3, $c6;
        char[] r2;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i11 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if i11 < 128 goto label3;

        i12 = 7;

        i13 = i11 & 127;

     label1:
        $i7 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if $i7 < 128 goto label2;

        $i9 = $i7 & 127;

        $i10 = $i9 << i12;

        i13 = i13 | $i10;

        i12 = i12 + 7;

        goto label1;

     label2:
        $i8 = $i7 << i12;

        i11 = i13 | $i8;

     label3:
        r0.<org.apache.flink.types.StringValue: int len> = i11;

        r0.<org.apache.flink.types.StringValue: int hashCode> = 0;

        specialinvoke r0.<org.apache.flink.types.StringValue: void ensureSize(int)>(i11);

        r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        i15 = 0;

     label4:
        if i15 >= i11 goto label9;

        i16 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if i16 >= 128 goto label5;

        $c6 = (char) i16;

        r2[i15] = $c6;

        goto label8;

     label5:
        i17 = 7;

        i18 = i16 & 127;

     label6:
        $i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if $i1 < 128 goto label7;

        $i4 = $i1 & 127;

        $i5 = $i4 << i17;

        i18 = i18 | $i5;

        i17 = i17 + 7;

        goto label6;

     label7:
        $i2 = $i1 << i17;

        i19 = i18 | $i2;

        $c3 = (char) i19;

        r2[i15] = $c3;

     label8:
        i15 = i15 + 1;

        goto label4;

     label9:
        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.StringValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0, $i2, i3, i4;
        char[] $r2;
        char $c1, c5;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        i3 = r0.<org.apache.flink.types.StringValue: int len>;

     label1:
        if i3 < 128 goto label2;

        $i2 = i3 | 128;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>($i2);

        i3 = i3 >>> 7;

        goto label1;

     label2:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(i3);

        i4 = 0;

     label3:
        $i0 = r0.<org.apache.flink.types.StringValue: int len>;

        if i4 >= $i0 goto label6;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        c5 = $r2[i4];

     label4:
        if c5 < 128 goto label5;

        $c1 = c5 | 128;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>($c1);

        c5 = c5 >>> 7;

        goto label4;

     label5:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>(c5);

        i4 = i4 + 1;

        goto label3;

     label6:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.StringValue r0;
        java.lang.String $r1;
        int $i0;
        char[] $r2;

        r0 := @this: org.apache.flink.types.StringValue;

        $r1 = new java.lang.String;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i0 = r0.<org.apache.flink.types.StringValue: int len>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public int compareTo(org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.StringValue r0, r1;
        int i0, i1, i2, $i5, $i6, i7;
        char[] r2, r3;
        char c3, c4;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        i0 = r0.<org.apache.flink.types.StringValue: int len>;

        i1 = r1.<org.apache.flink.types.StringValue: int len>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        r3 = r1.<org.apache.flink.types.StringValue: char[] value>;

        i7 = 0;

     label1:
        if i7 >= i2 goto label3;

        c3 = r2[i7];

        c4 = r3[i7];

        if c3 == c4 goto label2;

        $i6 = c3 - c4;

        return $i6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $i5 = i0 - i1;

        return $i5;
    }

    public int hashCode()
    {
        org.apache.flink.types.StringValue r0;
        char[] r1;
        int i0, $i1, $i2, $i4, i5, i6, i7;
        char $c3;

        r0 := @this: org.apache.flink.types.StringValue;

        i5 = r0.<org.apache.flink.types.StringValue: int hashCode>;

        if i5 != 0 goto label3;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        if $i1 <= 0 goto label3;

        i6 = 0;

        r1 = r0.<org.apache.flink.types.StringValue: char[] value>;

        i0 = r0.<org.apache.flink.types.StringValue: int len>;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        $i4 = 31 * i5;

        $i2 = i6;

        i6 = i6 + 1;

        $c3 = r1[$i2];

        i5 = $i4 + $c3;

        i7 = i7 + 1;

        goto label1;

     label2:
        r0.<org.apache.flink.types.StringValue: int hashCode> = i5;

     label3:
        return i5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.StringValue r0, r2;
        java.lang.Object r1;
        char[] r3, r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3, i6, i7, i8;
        char $c4, $c5;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.flink.types.StringValue;

        if $z0 == 0 goto label4;

        r2 = (org.apache.flink.types.StringValue) r1;

        i6 = r0.<org.apache.flink.types.StringValue: int len>;

        $i0 = r2.<org.apache.flink.types.StringValue: int len>;

        if i6 != $i0 goto label4;

        r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        r4 = r2.<org.apache.flink.types.StringValue: char[] value>;

        i7 = 0;

        i8 = 0;

     label2:
        $i1 = i6;

        i6 = i6 + -1;

        if $i1 == 0 goto label3;

        $i2 = i7;

        i7 = i7 + 1;

        $c5 = r3[$i2];

        $i3 = i8;

        i8 = i8 + 1;

        $c4 = r4[$i3];

        if $c5 == $c4 goto label2;

        return 0;

     label3:
        return 1;

     label4:
        return 0;
    }

    public int length()
    {
        org.apache.flink.types.StringValue r0;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        $i0 = r0.<org.apache.flink.types.StringValue: int len>;

        return $i0;
    }

    public char charAt(int)
    {
        org.apache.flink.types.StringValue r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        char[] $r2;
        char $c2;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.flink.types.StringValue: int len>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $c2 = $r2[i0];

        return $c2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        org.apache.flink.types.StringValue r0, $r1;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.flink.types.StringValue;

        $i2 = i1 - i0;

        specialinvoke $r1.<org.apache.flink.types.StringValue: void <init>(org.apache.flink.types.StringValue,int,int)>(r0, i0, $i2);

        return $r1;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.StringValue r0;

        r0 := @this: org.apache.flink.types.StringValue;

        return 2147483647;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.StringValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, i2, $i4, $i5, $i6, $i10, $i12, $i15, $i19, $i21, i23, i24;
        char[] r2;
        char c3, $c7, $c8, $c13, $c16, $c17;
        byte $b9, $b11, $b14, $b18, $b20, $b22;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i23 := @parameter1: int;

        i0 := @parameter2: int;

        r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        i1 = i23 + i0;

        i2 = r0.<org.apache.flink.types.StringValue: int len>;

        i24 = 0;

     label1:
        if i24 >= i2 goto label6;

        if i23 >= i1 goto label6;

        $i5 = i24;

        i24 = i24 + 1;

        c3 = r2[$i5];

        if c3 >= 128 goto label2;

        $i21 = i23;

        i23 = i23 + 1;

        $b22 = (byte) c3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i21, $b22);

        goto label5;

     label2:
        if c3 >= 8192 goto label3;

        $i15 = i23;

        i23 = i23 + 1;

        $c16 = c3 >>> 7;

        $c17 = $c16 | 128;

        $b18 = (byte) $c17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i15, $b18);

        if i23 >= i1 goto label5;

        $i19 = i23;

        i23 = i23 + 1;

        $b20 = (byte) c3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i19, $b20);

        goto label5;

     label3:
        $i6 = i23;

        i23 = i23 + 1;

        $c7 = c3 >>> 10;

        $c8 = $c7 | 192;

        $b9 = (byte) $c8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i6, $b9);

        if i23 >= i1 goto label4;

        $i12 = i23;

        i23 = i23 + 1;

        $c13 = c3 >>> 2;

        $b14 = (byte) $c13;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i12, $b14);

     label4:
        if i23 >= i1 goto label5;

        $i10 = i23;

        i23 = i23 + 1;

        $b11 = (byte) c3;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, $b11);

     label5:
        goto label1;

     label6:
        if i23 >= i1 goto label7;

        $i4 = i23;

        i23 = i23 + 1;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i4, 0);

        goto label6;

     label7:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.StringValue r0;

        r0 := @this: org.apache.flink.types.StringValue;

        return -1;
    }

    public void copyTo(org.apache.flink.types.StringValue)
    {
        org.apache.flink.types.StringValue r0, r1;
        int $i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.StringValue;

        $i0 = r0.<org.apache.flink.types.StringValue: int len>;

        r1.<org.apache.flink.types.StringValue: int len> = $i0;

        $i1 = r0.<org.apache.flink.types.StringValue: int hashCode>;

        r1.<org.apache.flink.types.StringValue: int hashCode> = $i1;

        $i2 = r0.<org.apache.flink.types.StringValue: int len>;

        specialinvoke r1.<org.apache.flink.types.StringValue: void ensureSize(int)>($i2);

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $r2 = r1.<org.apache.flink.types.StringValue: char[] value>;

        $i3 = r0.<org.apache.flink.types.StringValue: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i3);

        return;
    }

    public org.apache.flink.types.StringValue copy()
    {
        org.apache.flink.types.StringValue r0, $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        $r1 = new org.apache.flink.types.StringValue;

        specialinvoke $r1.<org.apache.flink.types.StringValue: void <init>(org.apache.flink.types.StringValue)>(r0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.StringValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i8, i9;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i4 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i4);

        if i4 < 128 goto label3;

        i5 = 7;

        i6 = i4 & 127;

     label1:
        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        if $i0 < 128 goto label2;

        $i2 = $i0 & 127;

        $i3 = $i2 << i5;

        i6 = i6 | $i3;

        i5 = i5 + 7;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i0);

        goto label1;

     label2:
        $i1 = $i0 << i5;

        i4 = i6 | $i1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i0);

     label3:
        i8 = 0;

     label4:
        if i8 >= i4 goto label7;

        i9 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i9);

     label5:
        if i9 < 128 goto label6;

        i9 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readUnsignedByte()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>(i9);

        goto label5;

     label6:
        i8 = i8 + 1;

        goto label4;

     label7:
        return;
    }

    private void ensureSize(int)
    {
        org.apache.flink.types.StringValue r0;
        int i0, $i1;
        char[] $r1, $r2;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i1 = lengthof $r1;

        if $i1 >= i0 goto label1;

        $r2 = newarray (char)[i0];

        r0.<org.apache.flink.types.StringValue: char[] value> = $r2;

     label1:
        return;
    }

    private void grow(int)
    {
        org.apache.flink.types.StringValue r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        char[] r1, $r2, $r3, $r4;

        r0 := @this: org.apache.flink.types.StringValue;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i1 = lengthof $r2;

        if $i1 >= i0 goto label1;

        $r3 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i2 = lengthof $r3;

        $i3 = $i2 * 3;

        $i4 = $i3 / 2;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, i0);

        r1 = newarray (char)[$i5];

        $r4 = r0.<org.apache.flink.types.StringValue: char[] value>;

        $i6 = r0.<org.apache.flink.types.StringValue: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i6);

        r0.<org.apache.flink.types.StringValue: char[] value> = r1;

     label1:
        return;
    }

    public static java.lang.String readString(java.io.DataInput) throws java.io.IOException
    {
        java.io.DataInput r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        char $c1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i14, i15, i16, i17, i18;
        char[] r4;

        r0 := @parameter0: java.io.DataInput;

        i10 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if i10 != 0 goto label01;

        return null;

     label01:
        if i10 < 128 goto label04;

        i11 = 7;

        i12 = i10 & 127;

     label02:
        $i6 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i6 < 128 goto label03;

        $i8 = $i6 & 127;

        $i9 = $i8 << i11;

        i12 = i12 | $i9;

        i11 = i11 + 7;

        goto label02;

     label03:
        $i7 = $i6 << i11;

        i10 = i12 | $i7;

     label04:
        i14 = i10 + -1;

        if i14 <= 2048 goto label05;

        r4 = newarray (char)[i14];

        goto label06;

     label05:
        $r1 = <org.apache.flink.types.StringValue: java.lang.ThreadLocal charBuffer>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (char[]) $r2;

     label06:
        i15 = 0;

     label07:
        if i15 >= i14 goto label11;

        i16 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if i16 < 128 goto label10;

        i17 = 7;

        i18 = i16 & 127;

     label08:
        $i2 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i2 < 128 goto label09;

        $i4 = $i2 & 127;

        $i5 = $i4 << i17;

        i18 = i18 | $i5;

        i17 = i17 + 7;

        goto label08;

     label09:
        $i3 = $i2 << i17;

        i16 = i18 | $i3;

     label10:
        $c1 = (char) i16;

        r4[i15] = $c1;

        i15 = i15 + 1;

        goto label07;

     label11:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r4, 0, i14);

        return $r3;
    }

    public static final void writeString(java.lang.CharSequence, java.io.DataOutput) throws java.io.IOException
    {
        java.lang.CharSequence r0;
        java.io.DataOutput r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i30;
        char c2, $c11, $c12, $c13, $c14, $c15, $c16;
        byte $b29;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.io.DataOutput;

        if r0 == null goto label12;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i1 = i0 + 1;

        if i1 >= 0 goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CharSequence is too long.");

        throw $r2;

     label01:
        if i1 >= 128 goto label02;

        $b29 = (byte) i1;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($b29);

        goto label06;

     label02:
        if i1 >= 16384 goto label03;

        $i27 = i1 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i27);

        $i28 = i1 >>> 7;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i28);

        goto label06;

     label03:
        if i1 >= 2097152 goto label04;

        $i23 = i1 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i23);

        $i24 = i1 >>> 7;

        $i25 = $i24 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i25);

        $i26 = i1 >>> 14;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i26);

        goto label06;

     label04:
        if i1 >= 268435456 goto label05;

        $i17 = i1 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i17);

        $i18 = i1 >>> 7;

        $i19 = $i18 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i19);

        $i20 = i1 >>> 14;

        $i21 = $i20 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i21);

        $i22 = i1 >>> 21;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i22);

        goto label06;

     label05:
        $i3 = i1 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i3);

        $i4 = i1 >>> 7;

        $i5 = $i4 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i5);

        $i6 = i1 >>> 14;

        $i7 = $i6 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i7);

        $i8 = i1 >>> 21;

        $i9 = $i8 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i9);

        $i10 = i1 >>> 28;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i10);

     label06:
        i30 = 0;

     label07:
        if i30 >= i0 goto label11;

        c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i30);

        if c2 >= 128 goto label08;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(c2);

        goto label10;

     label08:
        if c2 >= 16384 goto label09;

        $c15 = c2 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c15);

        $c16 = c2 >>> 7;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c16);

        goto label10;

     label09:
        $c11 = c2 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c11);

        $c12 = c2 >>> 7;

        $c13 = $c12 | 128;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c13);

        $c14 = c2 >>> 14;

        interfaceinvoke r1.<java.io.DataOutput: void write(int)>($c14);

     label10:
        i30 = i30 + 1;

        goto label07;

     label11:
        goto label13;

     label12:
        interfaceinvoke r1.<java.io.DataOutput: void write(int)>(0);

     label13:
        return;
    }

    public static final void copyString(java.io.DataInput, java.io.DataOutput) throws java.io.IOException
    {
        java.io.DataInput r0;
        java.io.DataOutput r1;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i8, i9, i10;

        r0 := @parameter0: java.io.DataInput;

        r1 := @parameter1: java.io.DataOutput;

        i4 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i4);

        if i4 < 128 goto label3;

        i5 = 7;

        i6 = i4 & 127;

     label1:
        $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        if $i0 < 128 goto label2;

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i0);

        $i2 = $i0 & 127;

        $i3 = $i2 << i5;

        i6 = i6 | $i3;

        i5 = i5 + 7;

        goto label1;

     label2:
        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i0);

        $i1 = $i0 << i5;

        i4 = i6 | $i1;

     label3:
        i8 = i4 + -1;

        i9 = 0;

     label4:
        if i9 >= i8 goto label7;

        i10 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i10);

     label5:
        if i10 < 128 goto label6;

        i10 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>();

        interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i10);

        goto label5;

     label6:
        i9 = i9 + 1;

        goto label4;

     label7:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.StringValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.StringValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.StringValue: int compareTo(org.apache.flink.types.StringValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.StringValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.StringValue) r1;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void setValue(org.apache.flink.types.StringValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.StringValue r0, $r1;

        r0 := @this: org.apache.flink.types.StringValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.StringValue: org.apache.flink.types.StringValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.StringValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.StringValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.StringValue) r1;

        virtualinvoke r0.<org.apache.flink.types.StringValue: void copyTo(org.apache.flink.types.StringValue)>($r2);

        return;
    }

    public static char[] lambda$static$0()
    {
        char[] $r0;

        $r0 = newarray (char)[2048];

        return $r0;
    }

    static void <clinit>()
    {
        char[] $r0;
        java.util.function.Supplier $r1;
        java.lang.ThreadLocal $r2;

        <org.apache.flink.types.StringValue: int SHORT_STRING_MAX_LENGTH> = 2048;

        <org.apache.flink.types.StringValue: int HIGH_BIT2_MASK> = 192;

        <org.apache.flink.types.StringValue: int HIGH_BIT2> = 8192;

        <org.apache.flink.types.StringValue: int HIGH_BIT28> = 268435456;

        <org.apache.flink.types.StringValue: int HIGH_BIT21> = 2097152;

        <org.apache.flink.types.StringValue: int HIGH_BIT14> = 16384;

        <org.apache.flink.types.StringValue: int HIGH_BIT> = 128;

        <org.apache.flink.types.StringValue: long serialVersionUID> = 1L;

        $r0 = newarray (char)[0];

        <org.apache.flink.types.StringValue: char[] EMPTY_STRING> = $r0;

        $r1 = staticinvoke <org.apache.flink.types.StringValue$lambda_static_0__27: java.util.function.Supplier bootstrap$()>();

        $r2 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($r1);

        <org.apache.flink.types.StringValue: java.lang.ThreadLocal charBuffer> = $r2;

        return;
    }
}
