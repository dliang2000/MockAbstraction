public class org.hamcrest.text.IsEqualIgnoringCase extends org.hamcrest.TypeSafeMatcher
{
    private final java.lang.String string;

    public void <init>(java.lang.String)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-null value required by IsEqualIgnoringCase()");

        throw $r2;

     label1:
        r0.<org.hamcrest.text.IsEqualIgnoringCase: java.lang.String string> = r1;

        return;
    }

    public boolean matchesSafely(java.lang.String)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.hamcrest.text.IsEqualIgnoringCase: java.lang.String string>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        return $z0;
    }

    public void describeMismatchSafely(java.lang.String, org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        java.lang.String r1;
        org.hamcrest.Description r2, $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("was ");

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r1);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        org.hamcrest.Description r1, $r2, $r4;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("equalToIgnoringCase(");

        $r3 = r0.<org.hamcrest.text.IsEqualIgnoringCase: java.lang.String string>;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        return;
    }

    public static org.hamcrest.Matcher equalToIgnoringCase(java.lang.String)
    {
        java.lang.String r0;
        org.hamcrest.text.IsEqualIgnoringCase $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.hamcrest.text.IsEqualIgnoringCase;

        specialinvoke $r1.<org.hamcrest.text.IsEqualIgnoringCase: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.String $r3;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringCase: void describeMismatchSafely(java.lang.String,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.text.IsEqualIgnoringCase r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.text.IsEqualIgnoringCase;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.text.IsEqualIgnoringCase: boolean matchesSafely(java.lang.String)>($r2);

        return $z0;
    }
}
