public final class org.apache.flink.api.common.typeutils.base.LocalDateSerializer extends org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE;
    private static final java.time.LocalDate EPOCH;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.TypeSerializerSingleton: void <init>()>();

        return;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        return 1;
    }

    public java.time.LocalDate createInstance()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        $r1 = <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate EPOCH>;

        return $r1;
    }

    public java.time.LocalDate copy(java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.time.LocalDate;

        return r1;
    }

    public java.time.LocalDate copy(java.time.LocalDate, java.time.LocalDate)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate r1, r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: java.time.LocalDate;

        return r1;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        return 6;
    }

    public void serialize(java.time.LocalDate, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        if r1 != null goto label1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(-2147483648);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>(-32768);

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.time.LocalDate: int getYear()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $i1 = virtualinvoke r1.<java.time.LocalDate: int getMonthValue()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i1);

        $i2 = virtualinvoke r1.<java.time.LocalDate: int getDayOfMonth()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($i2);

     label2:
        return;
    }

    public java.time.LocalDate deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0;
        byte $b1, $b2;
        java.time.LocalDate $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        if i0 != -2147483648 goto label1;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        return null;

     label1:
        $b1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $b2 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        $r2 = staticinvoke <java.time.LocalDate: java.time.LocalDate of(int,int,int)>(i0, $b1, $b2);

        return $r2;
    }

    public java.time.LocalDate deserialize(java.time.LocalDate, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.time.LocalDate;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int $i0;
        short $s1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $s1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>($s1);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer$LocalDateSerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.LocalDateSerializer$LocalDateSerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer$LocalDateSerializerSnapshot: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.time.LocalDate $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.time.LocalDate) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate deserialize(java.time.LocalDate,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.time.LocalDate $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.time.LocalDate $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.time.LocalDate) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: void serialize(java.time.LocalDate,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.lang.Object r1, r2;
        java.time.LocalDate $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.time.LocalDate) r1;

        $r3 = (java.time.LocalDate) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate copy(java.time.LocalDate,java.time.LocalDate)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.lang.Object r1;
        java.time.LocalDate $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.time.LocalDate) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate copy(java.time.LocalDate)>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer r0;
        java.time.LocalDate $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate createInstance()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.typeutils.base.LocalDateSerializer $r0;
        java.time.LocalDate $r1;

        <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.typeutils.base.LocalDateSerializer;

        specialinvoke $r0.<org.apache.flink.api.common.typeutils.base.LocalDateSerializer: void <init>()>();

        <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: org.apache.flink.api.common.typeutils.base.LocalDateSerializer INSTANCE> = $r0;

        $r1 = staticinvoke <java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>(0L);

        <org.apache.flink.api.common.typeutils.base.LocalDateSerializer: java.time.LocalDate EPOCH> = $r1;

        return;
    }
}
