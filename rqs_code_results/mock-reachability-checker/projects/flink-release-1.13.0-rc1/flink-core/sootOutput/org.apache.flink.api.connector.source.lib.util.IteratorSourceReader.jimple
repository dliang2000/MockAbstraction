public class org.apache.flink.api.connector.source.lib.util.IteratorSourceReader extends java.lang.Object implements org.apache.flink.api.connector.source.SourceReader
{
    private final org.apache.flink.api.connector.source.SourceReaderContext context;
    private java.util.concurrent.CompletableFuture availability;
    private java.util.Iterator iterator;
    private org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit;
    private final java.util.Queue remainingSplits;
    private boolean noMoreSplits;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.flink.api.connector.source.SourceReaderContext)
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        org.apache.flink.api.connector.source.SourceReaderContext r1, $r3;
        java.lang.Object $r2;
        java.util.concurrent.CompletableFuture $r4;
        java.util.ArrayDeque $r5;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        r1 := @parameter0: org.apache.flink.api.connector.source.SourceReaderContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.connector.source.SourceReaderContext) $r2;

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.SourceReaderContext context> = $r3;

        $r4 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r4.<java.util.concurrent.CompletableFuture: void <init>()>();

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability> = $r4;

        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>()>();

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits> = $r5;

        return;
    }

    public void start()
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.Queue $r1;
        boolean $z0;
        org.apache.flink.api.connector.source.SourceReaderContext $r2;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.SourceReaderContext context>;

        interfaceinvoke $r2.<org.apache.flink.api.connector.source.SourceReaderContext: void sendSplitRequest()>();

     label1:
        return;
    }

    public org.apache.flink.core.io.InputStatus pollNext(org.apache.flink.api.connector.source.ReaderOutput)
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        org.apache.flink.api.connector.source.ReaderOutput r1;
        java.util.Iterator $r2, $r4, $r5;
        org.apache.flink.core.io.InputStatus $r3, $r7;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        r1 := @parameter0: org.apache.flink.api.connector.source.ReaderOutput;

        $r2 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        if $r2 == null goto label2;

        $r4 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<org.apache.flink.api.connector.source.ReaderOutput: void collect(java.lang.Object)>($r6);

        $r7 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus MORE_AVAILABLE>;

        return $r7;

     label1:
        specialinvoke r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: void finishSplit()>();

     label2:
        $r3 = specialinvoke r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.core.io.InputStatus tryMoveToNextSplit()>();

        return $r3;
    }

    private void finishSplit()
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.Queue $r1;
        boolean $z0, $z1;
        org.apache.flink.api.connector.source.SourceReaderContext $r2;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator> = null;

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit> = null;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: boolean noMoreSplits>;

        if $z1 != 0 goto label1;

        $r2 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.SourceReaderContext context>;

        interfaceinvoke $r2.<org.apache.flink.api.connector.source.SourceReaderContext: void sendSplitRequest()>();

     label1:
        return;
    }

    private org.apache.flink.core.io.InputStatus tryMoveToNextSplit()
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.Queue $r1;
        java.lang.Object $r2;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit $r3, $r4, $r9;
        boolean $z0, $z1;
        java.util.concurrent.CompletableFuture $r5, $r7;
        org.apache.flink.core.io.InputStatus $r6, $r8, $r11;
        java.util.Iterator $r10;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        $r3 = (org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit) $r2;

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit> = $r3;

        $r4 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit>;

        if $r4 == null goto label1;

        $r9 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit>;

        $r10 = interfaceinvoke $r9.<org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit: java.util.Iterator getIterator()>();

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator> = $r10;

        $r11 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus MORE_AVAILABLE>;

        return $r11;

     label1:
        $z0 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: boolean noMoreSplits>;

        if $z0 == 0 goto label2;

        $r8 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus END_OF_INPUT>;

        return $r8;

     label2:
        $r5 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        if $z1 == 0 goto label3;

        $r7 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r7.<java.util.concurrent.CompletableFuture: void <init>()>();

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability> = $r7;

     label3:
        $r6 = <org.apache.flink.core.io.InputStatus: org.apache.flink.core.io.InputStatus NOTHING_AVAILABLE>;

        return $r6;
    }

    public java.util.concurrent.CompletableFuture isAvailable()
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.concurrent.CompletableFuture $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability>;

        return $r1;
    }

    public void addSplits(java.util.List)
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.List r1;
        java.util.Queue $r2;
        java.util.concurrent.CompletableFuture $r3;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        interfaceinvoke $r2.<java.util.Queue: boolean addAll(java.util.Collection)>(r1);

        $r3 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability>;

        virtualinvoke $r3.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(null);

        return;
    }

    public void notifyNoMoreSplits()
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        java.util.concurrent.CompletableFuture $r1;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: boolean noMoreSplits> = 1;

        $r1 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.concurrent.CompletableFuture availability>;

        virtualinvoke $r1.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(null);

        return;
    }

    public java.util.List snapshotState(long)
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;
        long l0;
        org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit r2, $r3, $r9, $r10;
        java.util.ArrayList $r4;
        java.util.Queue $r5, $r12, $r14;
        int $i1, $i2;
        java.util.Iterator $r6, $r7, $r8;
        boolean $z1, $z2, $z4;
        java.lang.AssertionError $r11;
        java.util.List $r13;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        l0 := @parameter0: long;

        $r3 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit>;

        if $r3 != null goto label1;

        $r12 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        $z4 = interfaceinvoke $r12.<java.util.Queue: boolean isEmpty()>();

        if $z4 == 0 goto label1;

        $r13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r13;

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        $i1 = interfaceinvoke $r5.<java.util.Queue: int size()>();

        $i2 = 1 + $i1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        $r6 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        if $r6 == null goto label3;

        $r7 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $z2 = <org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: boolean $assertionsDisabled>;

        if $z2 != 0 goto label2;

        $r10 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit>;

        if $r10 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label2:
        $r9 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit currentSplit>;

        $r8 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Iterator iterator>;

        r2 = interfaceinvoke $r9.<org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit: org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit getUpdatedSplitForIterator(java.util.Iterator)>($r8);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        $r14 = r0.<org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: java.util.Queue remainingSplits>;

        virtualinvoke $r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r14);

        return $r4;
    }

    public void close() throws java.lang.Exception
    {
        org.apache.flink.api.connector.source.lib.util.IteratorSourceReader r0;

        r0 := @this: org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/api/connector/source/lib/util/IteratorSourceReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.connector.source.lib.util.IteratorSourceReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
