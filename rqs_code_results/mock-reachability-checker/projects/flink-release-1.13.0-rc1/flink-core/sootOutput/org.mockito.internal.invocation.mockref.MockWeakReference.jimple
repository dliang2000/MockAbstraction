public class org.mockito.internal.invocation.mockref.MockWeakReference extends java.lang.Object implements org.mockito.internal.invocation.mockref.MockReference
{
    private final java.lang.ref.WeakReference ref;

    public void <init>(java.lang.Object)
    {
        org.mockito.internal.invocation.mockref.MockWeakReference r0;
        java.lang.Object r1;
        java.lang.ref.WeakReference $r2;

        r0 := @this: org.mockito.internal.invocation.mockref.MockWeakReference;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        r0.<org.mockito.internal.invocation.mockref.MockWeakReference: java.lang.ref.WeakReference ref> = $r2;

        return;
    }

    private java.lang.Object writeReplace() throws java.io.ObjectStreamException
    {
        org.mockito.internal.invocation.mockref.MockWeakReference r0;
        org.mockito.internal.invocation.mockref.MockStrongReference $r1;
        java.lang.Object $r2;

        r0 := @this: org.mockito.internal.invocation.mockref.MockWeakReference;

        $r1 = new org.mockito.internal.invocation.mockref.MockStrongReference;

        $r2 = virtualinvoke r0.<org.mockito.internal.invocation.mockref.MockWeakReference: java.lang.Object get()>();

        specialinvoke $r1.<org.mockito.internal.invocation.mockref.MockStrongReference: void <init>(java.lang.Object,boolean)>($r2, 1);

        return $r1;
    }

    public java.lang.Object get()
    {
        org.mockito.internal.invocation.mockref.MockWeakReference r0;
        java.lang.Object r1;
        java.lang.ref.WeakReference $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.mockito.internal.invocation.mockref.MockWeakReference;

        $r2 = r0.<org.mockito.internal.invocation.mockref.MockWeakReference: java.lang.ref.WeakReference ref>;

        r1 = virtualinvoke $r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The mock object was garbage collected. This should not happen in normal circumstances when using public API. Typically, the test class keeps strong reference to the mock object and it prevents getting the mock collected. Mockito internally needs to keep weak references to mock objects to avoid memory leaks for certain types of MockMaker implementations. If you see this exception using Mockito public API, please file a bug. For more information see issue #1313.");

        throw $r3;

     label1:
        return r1;
    }
}
