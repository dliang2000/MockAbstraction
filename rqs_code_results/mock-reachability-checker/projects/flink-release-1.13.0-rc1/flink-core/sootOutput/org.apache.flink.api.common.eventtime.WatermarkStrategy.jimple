public interface  org.apache.flink.api.common.eventtime.WatermarkStrategy extends java.lang.Object implements org.apache.flink.api.common.eventtime.TimestampAssignerSupplier, org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier
{

    public abstract org.apache.flink.api.common.eventtime.WatermarkGenerator createWatermarkGenerator(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context);

    public org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy r0;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context r1;
        org.apache.flink.api.common.eventtime.RecordTimestampAssigner $r2;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategy;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context;

        $r2 = new org.apache.flink.api.common.eventtime.RecordTimestampAssigner;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.RecordTimestampAssigner: void <init>()>();

        return $r2;
    }

    public org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy r0;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier r1;
        org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategy;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "timestampAssigner");

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner: void <init>(org.apache.flink.api.common.eventtime.WatermarkStrategy,org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)>(r0, r1);

        return $r3;
    }

    public org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.SerializableTimestampAssigner)
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy r0;
        org.apache.flink.api.common.eventtime.SerializableTimestampAssigner r1;
        org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner $r3;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier $r4;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategy;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "timestampAssigner");

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner;

        $r4 = staticinvoke <org.apache.flink.api.common.eventtime.TimestampAssignerSupplier: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier of(org.apache.flink.api.common.eventtime.SerializableTimestampAssigner)>(r1);

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategyWithTimestampAssigner: void <init>(org.apache.flink.api.common.eventtime.WatermarkStrategy,org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)>(r0, $r4);

        return $r3;
    }

    public org.apache.flink.api.common.eventtime.WatermarkStrategy withIdleness(java.time.Duration)
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy r0;
        java.time.Duration r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.eventtime.WatermarkStrategyWithIdleness $r3;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategy;

        r1 := @parameter0: java.time.Duration;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "idleTimeout");

        $z0 = virtualinvoke r1.<java.time.Duration: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.time.Duration: boolean isNegative()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "idleTimeout must be greater than zero");

        $r3 = new org.apache.flink.api.common.eventtime.WatermarkStrategyWithIdleness;

        specialinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategyWithIdleness: void <init>(org.apache.flink.api.common.eventtime.WatermarkStrategy,java.time.Duration)>(r0, r1);

        return $r3;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy $r0;

        $r0 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_forMonotonousTimestamps_e70ae2df_1__41: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$()>();

        return $r0;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkStrategy forBoundedOutOfOrderness(java.time.Duration)
    {
        java.time.Duration r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy $r1;

        r0 := @parameter0: java.time.Duration;

        $r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_forBoundedOutOfOrderness_f7bfe99d_1__513: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$(java.time.Duration)>(r0);

        return $r1;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkStrategy forGenerator(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier)
    {
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy $r2;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier;

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$createWatermarkGenerator__512: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier)>(r0);

        return $r2;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkStrategy noWatermarks()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategy $r0;

        $r0 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_noWatermarks_e70ae2df_1__511: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$()>();

        return $r0;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25, $r26;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        org.apache.flink.api.common.eventtime.WatermarkStrategy $r7, $r15, $r21, $r29;
        java.lang.Object $r13, $r27;
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier $r14;
        java.time.Duration $r28;
        byte b5;
        java.lang.IllegalArgumentException $r30;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b5 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1564025964: goto label01;
            case -944170890: goto label04;
            case -151677571: goto label02;
            case 1988368619: goto label03;
            default: goto label05;
        };

     label01:
        $z23 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$forBoundedOutOfOrderness$f7bfe99d$1");

        if $z23 == 0 goto label05;

        b5 = 0;

        goto label05;

     label02:
        $z21 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$forMonotonousTimestamps$e70ae2df$1");

        if $z21 == 0 goto label05;

        b5 = 1;

        goto label05;

     label03:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("createWatermarkGenerator");

        if $z0 == 0 goto label05;

        b5 = 2;

        goto label05;

     label04:
        $z22 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$noWatermarks$e70ae2df$1");

        if $z22 == 0 goto label05;

        b5 = 3;

     label05:
        tableswitch(b5)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        $i4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i4 != 6 goto label10;

        $r22 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z16 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z16 == 0 goto label10;

        $r23 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z17 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>("createWatermarkGenerator");

        if $z17 == 0 goto label10;

        $r24 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z18 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z18 == 0 goto label10;

        $r25 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z19 = virtualinvoke $r25.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z19 == 0 goto label10;

        $r26 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z20 = virtualinvoke $r26.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/time/Duration;Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z20 == 0 goto label10;

        $r27 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.Object getCapturedArg(int)>(0);

        $r28 = (java.time.Duration) $r27;

        $r29 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_forBoundedOutOfOrderness_f7bfe99d_1__516: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$(java.time.Duration)>($r28);

        return $r29;

     label07:
        $i3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i3 != 6 goto label10;

        $r16 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z11 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z11 == 0 goto label10;

        $r17 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z12 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("createWatermarkGenerator");

        if $z12 == 0 goto label10;

        $r18 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z13 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z13 == 0 goto label10;

        $r19 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z14 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z14 == 0 goto label10;

        $r20 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z15 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z15 == 0 goto label10;

        $r21 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_forMonotonousTimestamps_e70ae2df_1__515: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$()>();

        return $r21;

     label08:
        $i2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i2 != 9 goto label10;

        $r8 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z6 == 0 goto label10;

        $r9 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>("createWatermarkGenerator");

        if $z7 == 0 goto label10;

        $r10 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z8 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z8 == 0 goto label10;

        $r11 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z9 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier");

        if $z9 == 0 goto label10;

        $r12 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z10 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z10 == 0 goto label10;

        $r13 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.Object getCapturedArg(int)>(0);

        $r14 = (org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier) $r13;

        $r15 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$createWatermarkGenerator__514: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier)>($r14);

        return $r15;

     label09:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label10;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z1 == 0 goto label10;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("createWatermarkGenerator");

        if $z2 == 0 goto label10;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z3 == 0 goto label10;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategy");

        if $z4 == 0 goto label10;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/WatermarkGeneratorSupplier$Context;)Lorg/apache/flink/api/common/eventtime/WatermarkGenerator;");

        if $z5 == 0 goto label10;

        $r7 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy$lambda_noWatermarks_e70ae2df_1__510: org.apache.flink.api.common.eventtime.WatermarkStrategy bootstrap$()>();

        return $r7;

     label10:
        $r30 = new java.lang.IllegalArgumentException;

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r30;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkGenerator lambda$noWatermarks$e70ae2df$1(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context)
    {
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context r0;
        org.apache.flink.api.common.eventtime.NoWatermarksGenerator $r1;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context;

        $r1 = new org.apache.flink.api.common.eventtime.NoWatermarksGenerator;

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.NoWatermarksGenerator: void <init>()>();

        return $r1;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkGenerator lambda$forBoundedOutOfOrderness$f7bfe99d$1(java.time.Duration, org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context)
    {
        java.time.Duration r0;
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context r1;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks $r2;

        r0 := @parameter0: java.time.Duration;

        r1 := @parameter1: org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context;

        $r2 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarks: void <init>(java.time.Duration)>(r0);

        return $r2;
    }

    public static org.apache.flink.api.common.eventtime.WatermarkGenerator lambda$forMonotonousTimestamps$e70ae2df$1(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context)
    {
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context r0;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks $r1;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context;

        $r1 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks;

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarks: void <init>()>();

        return $r1;
    }
}
