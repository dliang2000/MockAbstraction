public final class org.joda.time.YearMonthDay extends org.joda.time.base.BasePartial implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.joda.time.DateTimeFieldType[] FIELD_TYPES;
    public static final int YEAR;
    public static final int MONTH_OF_YEAR;
    public static final int DAY_OF_MONTH;

    public static org.joda.time.YearMonthDay fromCalendarFields(java.util.Calendar)
    {
        java.util.Calendar r0;
        org.joda.time.YearMonthDay $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Calendar;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The calendar must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.YearMonthDay;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        $i2 = $i1 + 1;

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        specialinvoke $r1.<org.joda.time.YearMonthDay: void <init>(int,int,int)>($i0, $i2, $i3);

        return $r1;
    }

    public static org.joda.time.YearMonthDay fromDateFields(java.util.Date)
    {
        java.util.Date r0;
        org.joda.time.YearMonthDay $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The date must not be null");

        throw $r2;

     label1:
        $r1 = new org.joda.time.YearMonthDay;

        $i0 = virtualinvoke r0.<java.util.Date: int getYear()>();

        $i1 = $i0 + 1900;

        $i2 = virtualinvoke r0.<java.util.Date: int getMonth()>();

        $i3 = $i2 + 1;

        $i4 = virtualinvoke r0.<java.util.Date: int getDate()>();

        specialinvoke $r1.<org.joda.time.YearMonthDay: void <init>(int,int,int)>($i1, $i3, $i4);

        return $r1;
    }

    public void <init>()
    {
        org.joda.time.YearMonthDay r0;

        r0 := @this: org.joda.time.YearMonthDay;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>()>();

        return;
    }

    public void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.chrono.ISOChronology $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1);

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>($r2);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.Chronology)>(r1);

        return;
    }

    public void <init>(long)
    {
        org.joda.time.YearMonthDay r0;
        long l0;

        r0 := @this: org.joda.time.YearMonthDay;

        l0 := @parameter0: long;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long)>(l0);

        return;
    }

    public void <init>(long, org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0;
        long l0;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.YearMonthDay;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(long,org.joda.time.Chronology)>(l0, r1);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.YearMonthDay r0;
        java.lang.Object r1;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, null, $r2);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2, $r3;
        org.joda.time.format.DateTimeFormatter $r4;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2);

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateOptionalTimeParser()>();

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(java.lang.Object,org.joda.time.Chronology,org.joda.time.format.DateTimeFormatter)>(r1, $r3, $r4);

        return;
    }

    public void <init>(int, int, int)
    {
        org.joda.time.YearMonthDay r0;
        int i0, i1, i2;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.joda.time.YearMonthDay: void <init>(int,int,int,org.joda.time.Chronology)>(i0, i1, i2, null);

        return;
    }

    public void <init>(int, int, int, org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0;
        int i0, i1, i2;
        org.joda.time.Chronology r1;
        int[] $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.joda.time.Chronology;

        $r2 = newarray (int)[3];

        $r2[0] = i0;

        $r2[1] = i1;

        $r2[2] = i2;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(int[],org.joda.time.Chronology)>($r2, r1);

        return;
    }

    void <init>(org.joda.time.YearMonthDay, int[])
    {
        org.joda.time.YearMonthDay r0, r1;
        int[] r2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.YearMonthDay;

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,int[])>(r1, r2);

        return;
    }

    void <init>(org.joda.time.YearMonthDay, org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0, r1;
        org.joda.time.Chronology r2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.YearMonthDay;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BasePartial: void <init>(org.joda.time.base.BasePartial,org.joda.time.Chronology)>(r1, r2);

        return;
    }

    public int size()
    {
        org.joda.time.YearMonthDay r0;

        r0 := @this: org.joda.time.YearMonthDay;

        return 3;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0;
        int i0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeField $r2, $r3, $r4;
        java.lang.IndexOutOfBoundsException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.Chronology;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        return $r4;

     label2:
        $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r3;

     label3:
        $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        return $r2;

     label4:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r5;
    }

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.YearMonthDay r0;
        int i0;
        org.joda.time.DateTimeFieldType[] $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = <org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r2 = $r1[i0];

        return $r2;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeFieldType[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = <org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.joda.time.DateTimeFieldType[]) $r2;

        $r4 = (org.joda.time.DateTimeFieldType[]) $r3;

        return $r4;
    }

    public org.joda.time.YearMonthDay withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.YearMonthDay r0, $r3;
        org.joda.time.Chronology $r2, r5, r6, r7;
        int[] $r4;

        r0 := @this: org.joda.time.YearMonthDay;

        r5 := @parameter0: org.joda.time.Chronology;

        r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r5);

        r7 = virtualinvoke r6.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        if r7 != $r2 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,org.joda.time.Chronology)>(r0, r7);

        $r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        virtualinvoke r7.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r3, $r4);

        return $r3;
    }

    public org.joda.time.YearMonthDay withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        org.joda.time.DateTimeFieldType r1;
        int i0, i1, $i2;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(i1);

        if i0 != $i2 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        org.joda.time.DurationFieldType r1;
        int i0, i1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i0 != 0 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        org.joda.time.ReadablePeriod r1;
        int i0, i1, $i2, $i3, $i4, i5;
        org.joda.time.DurationFieldType r2;
        org.joda.time.DateTimeField $r4;
        int[] r5;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r5 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        i5 = 0;

     label3:
        $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

        if i5 >= $i2 goto label5;

        r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int indexOf(org.joda.time.DurationFieldType)>(r2);

        if i1 < 0 goto label4;

        $r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int)>(i1);

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, i0);

        r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r5, $i4);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.YearMonthDay r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.YearMonthDay plusYears(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.YearMonthDay plusMonths(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.YearMonthDay plusDays(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, i0);

        return $r2;
    }

    public org.joda.time.YearMonthDay minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.YearMonthDay r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, -1);

        return $r2;
    }

    public org.joda.time.YearMonthDay minusYears(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.YearMonthDay minusMonths(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.YearMonthDay minusDays(int)
    {
        org.joda.time.YearMonthDay r0, $r2;
        int i0, $i1;
        org.joda.time.DurationFieldType $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();

        $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0);

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.YearMonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1);

        return $r2;
    }

    public org.joda.time.YearMonthDay$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.YearMonthDay$Property $r2;
        int $i0;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 = new org.joda.time.YearMonthDay$Property;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        specialinvoke $r2.<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>(r0, $i0);

        return $r2;
    }

    public org.joda.time.LocalDate toLocalDate()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.LocalDate $r1;
        int $i0, $i1, $i2;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = new org.joda.time.LocalDate;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getDayOfMonth()>();

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, $r2);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeAtMidnight()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology r2, $r3;
        org.joda.time.DateTime $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        $r4 = new org.joda.time.DateTime;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getDayOfMonth()>();

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(int,int,int,int,int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, 0, 0, 0, 0, r2);

        return $r4;
    }

    public org.joda.time.DateTime toDateTimeAtCurrentTime()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTime $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateTime toDateTimeAtCurrentTime(org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology r2, $r3;
        long l0, l1;
        org.joda.time.DateTime $r4;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0);

        $r4 = new org.joda.time.DateTime;

        specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2);

        return $r4;
    }

    public org.joda.time.DateMidnight toDateMidnight()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateMidnight $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateTimeZone r1;
        org.joda.time.Chronology r2, $r3;
        org.joda.time.DateMidnight $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r3 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1);

        $r4 = new org.joda.time.DateMidnight;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getYear()>();

        $i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getMonthOfYear()>();

        $i2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getDayOfMonth()>();

        specialinvoke $r4.<org.joda.time.DateMidnight: void <init>(int,int,int,org.joda.time.Chronology)>($i0, $i1, $i2, r2);

        return $r4;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.TimeOfDay r1;
        org.joda.time.DateTime $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.TimeOfDay;

        $r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay,org.joda.time.DateTimeZone)>(r1, null);

        return $r2;
    }

    public org.joda.time.DateTime toDateTime(org.joda.time.TimeOfDay, org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.TimeOfDay r1;
        org.joda.time.DateTimeZone r2;
        org.joda.time.Chronology r3, $r4;
        org.joda.time.DateTime $r5;
        long l0, l1;

        r0 := @this: org.joda.time.YearMonthDay;

        r1 := @parameter0: org.joda.time.TimeOfDay;

        r2 := @parameter1: org.joda.time.DateTimeZone;

        $r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        r3 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0);

        if r1 == null goto label1;

        l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, l1);

     label1:
        $r5 = new org.joda.time.DateTime;

        specialinvoke $r5.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r3);

        return $r5;
    }

    public org.joda.time.Interval toInterval()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.Interval $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)>(null);

        return $r1;
    }

    public org.joda.time.Interval toInterval(org.joda.time.DateTimeZone)
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.DateMidnight $r1;
        org.joda.time.Interval $r2;
        org.joda.time.DateTimeZone r3, r4;

        r0 := @this: org.joda.time.YearMonthDay;

        r3 := @parameter0: org.joda.time.DateTimeZone;

        r4 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r3);

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>(r4);

        $r2 = virtualinvoke $r1.<org.joda.time.DateMidnight: org.joda.time.Interval toInterval()>();

        return $r2;
    }

    public int getYear()
    {
        org.joda.time.YearMonthDay r0;
        int $i0;

        r0 := @this: org.joda.time.YearMonthDay;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(0);

        return $i0;
    }

    public int getMonthOfYear()
    {
        org.joda.time.YearMonthDay r0;
        int $i0;

        r0 := @this: org.joda.time.YearMonthDay;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(1);

        return $i0;
    }

    public int getDayOfMonth()
    {
        org.joda.time.YearMonthDay r0;
        int $i0;

        r0 := @this: org.joda.time.YearMonthDay;

        $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(2);

        return $i0;
    }

    public org.joda.time.YearMonthDay withYear(int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 0, r4, i0);

        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay withMonthOfYear(int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 1, r4, i0);

        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay withDayOfMonth(int)
    {
        org.joda.time.YearMonthDay r0, $r3;
        int i0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.YearMonthDay;

        i0 := @parameter0: int;

        r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>();

        $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, 2, r4, i0);

        $r3 = new org.joda.time.YearMonthDay;

        specialinvoke $r3.<org.joda.time.YearMonthDay: void <init>(org.joda.time.YearMonthDay,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.YearMonthDay$Property year()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.YearMonthDay$Property $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = new org.joda.time.YearMonthDay$Property;

        specialinvoke $r1.<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>(r0, 0);

        return $r1;
    }

    public org.joda.time.YearMonthDay$Property monthOfYear()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.YearMonthDay$Property $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = new org.joda.time.YearMonthDay$Property;

        specialinvoke $r1.<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>(r0, 1);

        return $r1;
    }

    public org.joda.time.YearMonthDay$Property dayOfMonth()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.YearMonthDay$Property $r1;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = new org.joda.time.YearMonthDay$Property;

        specialinvoke $r1.<org.joda.time.YearMonthDay$Property: void <init>(org.joda.time.YearMonthDay,int)>(r0, 2);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.joda.time.YearMonthDay r0;
        org.joda.time.format.DateTimeFormatter $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.YearMonthDay;

        $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>();

        $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }

    static void <clinit>()
    {
        org.joda.time.DateTimeFieldType[] $r0;
        org.joda.time.DateTimeFieldType $r1, $r2, $r3;

        <org.joda.time.YearMonthDay: int DAY_OF_MONTH> = 2;

        <org.joda.time.YearMonthDay: int MONTH_OF_YEAR> = 1;

        <org.joda.time.YearMonthDay: int YEAR> = 0;

        <org.joda.time.YearMonthDay: long serialVersionUID> = 797544782896179L;

        $r0 = newarray (org.joda.time.DateTimeFieldType)[3];

        $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>();

        $r0[0] = $r1;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $r0[1] = $r2;

        $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>();

        $r0[2] = $r3;

        <org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> = $r0;

        return;
    }
}
