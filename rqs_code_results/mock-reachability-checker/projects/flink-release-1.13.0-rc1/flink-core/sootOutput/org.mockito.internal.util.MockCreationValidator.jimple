public class org.mockito.internal.util.MockCreationValidator extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.util.MockCreationValidator r0;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void validateType(java.lang.Class)
    {
        org.mockito.internal.util.MockCreationValidator r0;
        java.lang.Class r1;
        org.mockito.plugins.MockMaker$TypeMockability r2;
        boolean $z0;
        java.lang.String $r3;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        r1 := @parameter0: java.lang.Class;

        r2 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.plugins.MockMaker$TypeMockability typeMockabilityOf(java.lang.Class)>(r1);

        $z0 = interfaceinvoke r2.<org.mockito.plugins.MockMaker$TypeMockability: boolean mockable()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke r2.<org.mockito.plugins.MockMaker$TypeMockability: java.lang.String nonMockableReason()>();

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotMockClass(java.lang.Class,java.lang.String)>(r1, $r3);

        throw $r4;

     label1:
        return;
    }

    public void validateExtraInterfaces(java.lang.Class, java.util.Collection)
    {
        org.mockito.internal.util.MockCreationValidator r0;
        java.lang.Class r1, r4;
        java.util.Collection r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r5;
        org.mockito.exceptions.base.MockitoException $r6;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.Collection;

        if r2 != null goto label1;

        return;

     label1:
        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r5;

        if r1 != r4 goto label3;

        $r6 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException extraInterfacesCannotContainMockedType(java.lang.Class)>(r1);

        throw $r6;

     label3:
        goto label2;

     label4:
        return;
    }

    public void validateMockedType(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.util.MockCreationValidator r0;
        java.lang.Class r1, $r3;
        java.lang.Object r2;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException mockedTypeIsInconsistentWithSpiedInstanceType(java.lang.Class,java.lang.Object)>(r1, r2);

        throw $r4;

     label3:
        return;
    }

    public void validateDelegatedInstance(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.util.MockCreationValidator r0;
        java.lang.Class r1, $r3;
        java.lang.Object r2;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        return;

     label2:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label3;

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException mockedTypeIsInconsistentWithDelegatedInstanceType(java.lang.Class,java.lang.Object)>(r1, r2);

        throw $r4;

     label3:
        return;
    }

    public void validateConstructorUse(boolean, org.mockito.mock.SerializableMode)
    {
        org.mockito.internal.util.MockCreationValidator r0;
        boolean z0;
        org.mockito.mock.SerializableMode r1, $r2;
        org.mockito.exceptions.base.MockitoException $r3;

        r0 := @this: org.mockito.internal.util.MockCreationValidator;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.mockito.mock.SerializableMode;

        if z0 == 0 goto label1;

        $r2 = <org.mockito.mock.SerializableMode: org.mockito.mock.SerializableMode ACROSS_CLASSLOADERS>;

        if r1 != $r2 goto label1;

        $r3 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException usingConstructorWithFancySerializable(org.mockito.mock.SerializableMode)>(r1);

        throw $r3;

     label1:
        return;
    }
}
