public final class org.apache.flink.util.MathUtils extends java.lang.Object
{

    public static int log2floor(int) throws java.lang.ArithmeticException
    {
        int i0, $i1, $i2;
        java.lang.ArithmeticException $r0;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r0 = new java.lang.ArithmeticException;

        specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Logarithm of zero is undefined.");

        throw $r0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i2 = 31 - $i1;

        return $i2;
    }

    public static int log2strict(int) throws java.lang.ArithmeticException, java.lang.IllegalArgumentException
    {
        int i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.ArithmeticException $r6;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r6 = new java.lang.ArithmeticException;

        specialinvoke $r6.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Logarithm of zero is undefined.");

        throw $r6;

     label1:
        $i1 = i0 - 1;

        $i2 = i0 & $i1;

        if $i2 == 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The given value ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a power of two.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        $i3 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i4 = 31 - $i3;

        return $i4;
    }

    public static int roundDownToPowerOf2(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i0);

        return $i1;
    }

    public static int checkedDownCast(long)
    {
        long l0, $l2;
        int i1;
        byte $b3;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $l2 = (long) i1;

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot downcast long value ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to integer.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label1:
        return i1;
    }

    public static boolean isPowerOf2(long)
    {
        long l0, $l1, $l2;
        byte $b3;
        boolean $z0;

        l0 := @parameter0: long;

        $l1 = l0 - 1L;

        $l2 = l0 & $l1;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int jenkinsHash(int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18, i19, $i20;

        i13 := @parameter0: int;

        $i1 = i13 + 2127912214;

        $i0 = i13 << 12;

        i14 = $i1 + $i0;

        $i3 = i14 ^ -949894596;

        $i2 = i14 >>> 19;

        i15 = $i3 ^ $i2;

        $i5 = i15 + 374761393;

        $i4 = i15 << 5;

        i16 = $i5 + $i4;

        $i7 = i16 + -744332180;

        $i6 = i16 << 9;

        i17 = $i7 ^ $i6;

        $i9 = i17 + -42973499;

        $i8 = i17 << 3;

        i18 = $i9 + $i8;

        $i11 = i18 ^ -1252372727;

        $i10 = i18 >>> 16;

        i19 = $i11 ^ $i10;

        if i19 < 0 goto label1;

        $i20 = i19;

        goto label2;

     label1:
        $i12 = i19 + 1;

        $i20 = neg $i12;

     label2:
        return $i20;
    }

    public static int murmurHash(int)
    {
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8, i9;

        i2 := @parameter0: int;

        i3 = i2 * -862048943;

        i4 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(i3, 15);

        i5 = i4 * 461845907;

        i6 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>(i5, 13);

        $i0 = i6 * 5;

        i7 = $i0 + -430675100;

        i8 = i7 ^ 4;

        i9 = staticinvoke <org.apache.flink.util.MathUtils: int bitMix(int)>(i8);

        if i9 < 0 goto label1;

        return i9;

     label1:
        if i9 == -2147483648 goto label2;

        $i1 = neg i9;

        return $i1;

     label2:
        return 0;
    }

    public static int roundUpToPowerOfTwo(int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12;

        i6 := @parameter0: int;

        i7 = i6 - 1;

        $i0 = i7 >> 1;

        i8 = i7 | $i0;

        $i1 = i8 >> 2;

        i9 = i8 | $i1;

        $i2 = i9 >> 4;

        i10 = i9 | $i2;

        $i3 = i10 >> 8;

        i11 = i10 | $i3;

        $i4 = i11 >> 16;

        i12 = i11 | $i4;

        $i5 = i12 + 1;

        return $i5;
    }

    public static int longToIntWithBitMixing(long)
    {
        long $l0, $l1, $l2, $l3, $l4, l6, l7, l8, l9;
        int $i5;

        l6 := @parameter0: long;

        $l0 = l6 >>> 30;

        $l1 = l6 ^ $l0;

        l7 = $l1 * -4658895280553007687L;

        $l2 = l7 >>> 27;

        $l3 = l7 ^ $l2;

        l8 = $l3 * -7723592293110705685L;

        $l4 = l8 >>> 31;

        l9 = l8 ^ $l4;

        $i5 = (int) l9;

        return $i5;
    }

    public static int bitMix(int)
    {
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;

        i3 := @parameter0: int;

        $i0 = i3 >>> 16;

        i4 = i3 ^ $i0;

        i5 = i4 * -2048144789;

        $i1 = i5 >>> 13;

        i6 = i5 ^ $i1;

        i7 = i6 * -1028477387;

        $i2 = i7 >>> 16;

        i8 = i7 ^ $i2;

        return i8;
    }

    public static long flipSignBit(long)
    {
        long l0, $l1;

        l0 := @parameter0: long;

        $l1 = l0 ^ -9223372036854775808L;

        return $l1;
    }

    public static int divideRoundUp(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Negative dividend is not supported.");

        if i1 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Negative or zero divisor is not supported.");

        if i0 != 0 goto label5;

        $i4 = 0;

        goto label6;

     label5:
        $i2 = i0 - 1;

        $i3 = $i2 / i1;

        $i4 = $i3 + 1;

     label6:
        return $i4;
    }

    private void <init>()
    {
        org.apache.flink.util.MathUtils r0;

        r0 := @this: org.apache.flink.util.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
