public abstract class org.apache.flink.api.common.operators.base.JoinOperatorBase extends org.apache.flink.api.common.operators.DualInputOperator
{
    private org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint;
    private org.apache.flink.api.common.functions.Partitioner partitioner;

    public void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.operators.util.UserCodeWrapper r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint $r6;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.UserCodeWrapper;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>(r1, r2, r3, r4, r5);

        $r6 = <org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint OPTIMIZER_CHOOSES>;

        r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint> = $r6;

        return;
    }

    public void <init>(org.apache.flink.api.common.functions.FlatJoinFunction, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.functions.FlatJoinFunction r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper $r6;
        org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.FlatJoinFunction;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: void <init>(java.lang.Object)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        $r7 = <org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint OPTIMIZER_CHOOSES>;

        r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint> = $r7;

        return;
    }

    public void <init>(java.lang.Class, org.apache.flink.api.common.operators.BinaryOperatorInformation, int[], int[], java.lang.String)
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        java.lang.Class r1;
        org.apache.flink.api.common.operators.BinaryOperatorInformation r2;
        int[] r3, r4;
        java.lang.String r5;
        org.apache.flink.api.common.operators.util.UserCodeClassWrapper $r6;
        org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint $r7;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.operators.BinaryOperatorInformation;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        r5 := @parameter4: java.lang.String;

        $r6 = new org.apache.flink.api.common.operators.util.UserCodeClassWrapper;

        specialinvoke $r6.<org.apache.flink.api.common.operators.util.UserCodeClassWrapper: void <init>(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.common.operators.DualInputOperator: void <init>(org.apache.flink.api.common.operators.util.UserCodeWrapper,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r6, r2, r3, r4, r5);

        $r7 = <org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint OPTIMIZER_CHOOSES>;

        r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint> = $r7;

        return;
    }

    public void setJoinHint(org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint)
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Join Hint must not be null.");

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint> = r1;

        return;
    }

    public org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint getJoinHint()
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.operators.base.JoinOperatorBase$JoinHint joinHint>;

        return $r1;
    }

    public void setCustomPartitioner(org.apache.flink.api.common.functions.Partitioner)
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner r1;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        r1 := @parameter0: org.apache.flink.api.common.functions.Partitioner;

        r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.functions.Partitioner partitioner> = r1;

        return;
    }

    public org.apache.flink.api.common.functions.Partitioner getCustomPartitioner()
    {
        org.apache.flink.api.common.operators.base.JoinOperatorBase r0;
        org.apache.flink.api.common.functions.Partitioner $r1;

        r0 := @this: org.apache.flink.api.common.operators.base.JoinOperatorBase;

        $r1 = r0.<org.apache.flink.api.common.operators.base.JoinOperatorBase: org.apache.flink.api.common.functions.Partitioner partitioner>;

        return $r1;
    }
}
