public class org.apache.flink.util.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.util.Driver r0;

        r0 := @this: org.apache.flink.util.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.util.Driver r0;
        org.apache.flink.util.TemporaryClassLoaderContextTest $r21;
        org.apache.flink.util.LongValueSequenceIteratorTest $r22;
        org.apache.flink.util.MathUtilTest $r23;
        org.apache.flink.util.OutputTagTest $r24;
        org.apache.flink.util.IterableUtilsTest $r25;
        org.apache.flink.util.CollectionUtilTest $r26;
        org.apache.flink.util.ArrayUtilsTest $r27;
        org.apache.flink.util.SerializedValueTest $r28;
        org.apache.flink.util.ProcessorArchitectureTest $r29;
        org.apache.flink.util.FlinkUserCodeClassLoaderTest $r30;
        org.apache.flink.util.AbstractIDTest $r31;
        org.apache.flink.util.IOUtilsTest $r32;
        org.apache.flink.util.ExceptionUtilsTest $r33;
        org.apache.flink.util.TimeUtilsTest $r34;
        org.apache.flink.util.ResourceGuardTest $r35;
        org.apache.flink.util.StringUtilsTest $r36;
        org.apache.flink.util.WrappingProxyUtilTest $r37;
        org.apache.flink.util.LinkedOptionalMapTest $r38;
        org.apache.flink.util.FileUtilsTest $r39;
        org.apache.flink.util.CloseableIteratorTest $r40;
        org.apache.flink.util.UnionIteratorTest $r41;
        org.apache.flink.util.TimeUtilsPrettyPrintingTest $r42;
        org.apache.flink.util.NetUtilsTest $r43;
        org.apache.flink.util.InstantiationUtilTest $r44;
        org.apache.flink.util.LambdaUtilTest $r45;
        org.apache.flink.util.PropertiesUtilTest $r46;
        org.apache.flink.util.TernaryBooleanTest $r47;
        org.apache.flink.util.StringValueUtilsTest $r48;
        org.apache.flink.util.NumberSequenceIteratorTest $r49;
        java.lang.Exception $r50, $r53, $r54, $r60, $r61, $r62, $r63, $r64, $r65, $r68, $r69, $r71, $r72, $r74, $r77, $r79, $r80, $r82, $r83, $r84, $r85;
        java.io.IOException $r51, $r52, $r55, $r56, $r57, $r58, $r66, $r67, $r70, $r73, $r75, $r81;
        java.net.MalformedURLException $r59, $r76;
        java.net.UnknownHostException $r78;

        r0 := @this: org.apache.flink.util.Driver;

        $r21 = new org.apache.flink.util.TemporaryClassLoaderContextTest;

        specialinvoke $r21.<org.apache.flink.util.TemporaryClassLoaderContextTest: void <init>()>();

        virtualinvoke $r21.<org.apache.flink.util.TemporaryClassLoaderContextTest: void testTemporaryClassLoaderContext()>();

        $r22 = new org.apache.flink.util.LongValueSequenceIteratorTest;

        specialinvoke $r22.<org.apache.flink.util.LongValueSequenceIteratorTest: void <init>()>();

        virtualinvoke $r22.<org.apache.flink.util.LongValueSequenceIteratorTest: void testSplitRegular()>();

        virtualinvoke $r22.<org.apache.flink.util.LongValueSequenceIteratorTest: void testSplittingLargeRangesBy2()>();

        virtualinvoke $r22.<org.apache.flink.util.LongValueSequenceIteratorTest: void testSplittingTooSmallRanges()>();

        $r23 = new org.apache.flink.util.MathUtilTest;

        specialinvoke $r23.<org.apache.flink.util.MathUtilTest: void <init>()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testLog2Computation()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testRoundDownToPowerOf2()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testRoundUpToPowerOf2()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testPowerOfTwo()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testFlipSignBit()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testDivideRoundUp()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testDivideRoundUpNegativeDividend()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testDivideRoundUpNegativeDivisor()>();

        virtualinvoke $r23.<org.apache.flink.util.MathUtilTest: void testDivideRoundUpZeroDivisor()>();

        $r24 = new org.apache.flink.util.OutputTagTest;

        specialinvoke $r24.<org.apache.flink.util.OutputTagTest: void <init>()>();

        virtualinvoke $r24.<org.apache.flink.util.OutputTagTest: void testNullRejected()>();

        virtualinvoke $r24.<org.apache.flink.util.OutputTagTest: void testNullRejectedWithTypeInfo()>();

        virtualinvoke $r24.<org.apache.flink.util.OutputTagTest: void testEmptyStringRejected()>();

        virtualinvoke $r24.<org.apache.flink.util.OutputTagTest: void testEmptyStringRejectedWithTypeInfo()>();

        $r25 = new org.apache.flink.util.IterableUtilsTest;

        specialinvoke $r25.<org.apache.flink.util.IterableUtilsTest: void <init>()>();

        virtualinvoke $r25.<org.apache.flink.util.IterableUtilsTest: void testToStream()>();

        $r26 = new org.apache.flink.util.CollectionUtilTest;

        specialinvoke $r26.<org.apache.flink.util.CollectionUtilTest: void <init>()>();

        virtualinvoke $r26.<org.apache.flink.util.CollectionUtilTest: void testPartition()>();

        $r27 = new org.apache.flink.util.ArrayUtilsTest;

        specialinvoke $r27.<org.apache.flink.util.ArrayUtilsTest: void <init>()>();

        virtualinvoke $r27.<org.apache.flink.util.ArrayUtilsTest: void concatWithEmptyArray()>();

        virtualinvoke $r27.<org.apache.flink.util.ArrayUtilsTest: void concatArrays()>();

        $r28 = new org.apache.flink.util.SerializedValueTest;

        specialinvoke $r28.<org.apache.flink.util.SerializedValueTest: void <init>()>();

        virtualinvoke $r28.<org.apache.flink.util.SerializedValueTest: void testSimpleValue()>();

     label001:
        virtualinvoke $r28.<org.apache.flink.util.SerializedValueTest: void testNullValue()>();

     label002:
        goto label004;

     label003:
        $r54 := @caughtexception;

        virtualinvoke $r54.<java.lang.Exception: void printStackTrace()>();

     label004:
        virtualinvoke $r28.<org.apache.flink.util.SerializedValueTest: void testFromNullBytes()>();

        virtualinvoke $r28.<org.apache.flink.util.SerializedValueTest: void testFromEmptyBytes()>();

        $r29 = new org.apache.flink.util.ProcessorArchitectureTest;

        specialinvoke $r29.<org.apache.flink.util.ProcessorArchitectureTest: void <init>()>();

        virtualinvoke $r29.<org.apache.flink.util.ProcessorArchitectureTest: void testArchitectureNotUnknown()>();

        virtualinvoke $r29.<org.apache.flink.util.ProcessorArchitectureTest: void testNamesNotNull()>();

        $r30 = new org.apache.flink.util.FlinkUserCodeClassLoaderTest;

        specialinvoke $r30.<org.apache.flink.util.FlinkUserCodeClassLoaderTest: void <init>()>();

        virtualinvoke $r30.<org.apache.flink.util.FlinkUserCodeClassLoaderTest: void testExceptionHandling()>();

        $r31 = new org.apache.flink.util.AbstractIDTest;

        specialinvoke $r31.<org.apache.flink.util.AbstractIDTest: void <init>()>();

     label005:
        virtualinvoke $r31.<org.apache.flink.util.AbstractIDTest: void testSerialization()>();

     label006:
        goto label008;

     label007:
        $r72 := @caughtexception;

        virtualinvoke $r72.<java.lang.Exception: void printStackTrace()>();

     label008:
        virtualinvoke $r31.<org.apache.flink.util.AbstractIDTest: void testConvertToBytes()>();

     label009:
        goto label011;

     label010:
        $r61 := @caughtexception;

        virtualinvoke $r61.<java.lang.Exception: void printStackTrace()>();

     label011:
        virtualinvoke $r31.<org.apache.flink.util.AbstractIDTest: void testCompare()>();

     label012:
        goto label014;

     label013:
        $r64 := @caughtexception;

        virtualinvoke $r64.<java.lang.Exception: void printStackTrace()>();

     label014:
        virtualinvoke $r31.<org.apache.flink.util.AbstractIDTest: void testOldAbstractIDDeserialization()>();

     label015:
        goto label017;

     label016:
        $r68 := @caughtexception;

        virtualinvoke $r68.<java.lang.Exception: void printStackTrace()>();

     label017:
        $r32 = new org.apache.flink.util.IOUtilsTest;

        specialinvoke $r32.<org.apache.flink.util.IOUtilsTest: void <init>()>();

     label018:
        virtualinvoke $r32.<org.apache.flink.util.IOUtilsTest: void testTryReadFullyFromLongerStream()>();

     label019:
        goto label021;

     label020:
        $r57 := @caughtexception;

        virtualinvoke $r57.<java.io.IOException: void printStackTrace()>();

     label021:
        virtualinvoke $r32.<org.apache.flink.util.IOUtilsTest: void testTryReadFullyFromShorterStream()>();

     label022:
        goto label024;

     label023:
        $r56 := @caughtexception;

        virtualinvoke $r56.<java.io.IOException: void printStackTrace()>();

     label024:
        $r33 = new org.apache.flink.util.ExceptionUtilsTest;

        specialinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void <init>()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testStringifyNullException()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testJvmFatalError()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testRethrowFatalError()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testFindThrowableByType()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testExceptionStripping()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testInvalidExceptionStripping()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testTryEnrichTaskExecutorErrorCanHandleNullValueWithoutCausingException()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testUpdateDetailMessageOfBasicThrowable()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testUpdateDetailMessageOfRelevantThrowableAsCause()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testUpdateDetailMessageWithoutRelevantThrowable()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testUpdateDetailMessageOfNullWithoutException()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testUpdateDetailMessageWithMissingPredicate()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testIsMetaspaceOutOfMemoryErrorCanHandleNullValue()>();

        virtualinvoke $r33.<org.apache.flink.util.ExceptionUtilsTest: void testIsDirectOutOfMemoryErrorCanHandleNullValue()>();

        $r34 = new org.apache.flink.util.TimeUtilsTest;

        specialinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void <init>()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationNanos()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationMicros()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationMillis()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationSeconds()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationMinutes()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationHours()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationDays()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationUpperCase()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationTrim()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationInvalid()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testParseDurationNumberOverflow()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testGetStringInMillis()>();

        virtualinvoke $r34.<org.apache.flink.util.TimeUtilsTest: void testToDuration()>();

        $r35 = new org.apache.flink.util.ResourceGuardTest;

        specialinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void <init>()>();

        virtualinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void testClose()>();

     label025:
        virtualinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void testAcquireReleaseClose()>();

     label026:
        goto label028;

     label027:
        $r52 := @caughtexception;

        virtualinvoke $r52.<java.io.IOException: void printStackTrace()>();

     label028:
        virtualinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void testCloseBlockIfAcquired()>();

     label029:
        goto label031;

     label030:
        $r83 := @caughtexception;

        virtualinvoke $r83.<java.lang.Exception: void printStackTrace()>();

     label031:
        virtualinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void testInterruptHandledCorrectly()>();

     label032:
        goto label034;

     label033:
        $r74 := @caughtexception;

        virtualinvoke $r74.<java.lang.Exception: void printStackTrace()>();

     label034:
        virtualinvoke $r35.<org.apache.flink.util.ResourceGuardTest: void testLeaseCloseIsIdempotent()>();

     label035:
        goto label037;

     label036:
        $r60 := @caughtexception;

        virtualinvoke $r60.<java.lang.Exception: void printStackTrace()>();

     label037:
        $r36 = new org.apache.flink.util.StringUtilsTest;

        specialinvoke $r36.<org.apache.flink.util.StringUtilsTest: void <init>()>();

        virtualinvoke $r36.<org.apache.flink.util.StringUtilsTest: void testControlCharacters()>();

        virtualinvoke $r36.<org.apache.flink.util.StringUtilsTest: void testArrayAwareToString()>();

        virtualinvoke $r36.<org.apache.flink.util.StringUtilsTest: void testStringToHexArray()>();

        virtualinvoke $r36.<org.apache.flink.util.StringUtilsTest: void testHexArrayToString()>();

        virtualinvoke $r36.<org.apache.flink.util.StringUtilsTest: void testGenerateAlphanumeric()>();

        $r37 = new org.apache.flink.util.WrappingProxyUtilTest;

        specialinvoke $r37.<org.apache.flink.util.WrappingProxyUtilTest: void <init>()>();

        virtualinvoke $r37.<org.apache.flink.util.WrappingProxyUtilTest: void testThrowsExceptionIfTooManyProxies()>();

        virtualinvoke $r37.<org.apache.flink.util.WrappingProxyUtilTest: void testStripsAllProxies()>();

        $r38 = new org.apache.flink.util.LinkedOptionalMapTest;

        specialinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void <init>()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void usageExample()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void overridingKeyWithTheSameKeyName()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void overridingKeysAndValuesWithTheSameKeyName()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void overridingAValueWithMissingKeyShouldBeConsideredAsAbsent()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void mergingMapsWithPresentEntriesLeavesNoAbsentKeyNames()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void mergingMapsPreserversTheOrderOfTheOriginalMap()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void mergingToEmpty()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void unwrapOptionalsWithMissingValueThrows()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void unwrapOptionalsWithMissingKeyThrows()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void unwrapOptionalsPreservesOrder()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void testPrefix()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void testNonPrefix()>();

        virtualinvoke $r38.<org.apache.flink.util.LinkedOptionalMapTest: void demoMergeResult()>();

        $r39 = new org.apache.flink.util.FileUtilsTest;

        specialinvoke $r39.<org.apache.flink.util.FileUtilsTest: void <init>()>();

     label038:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testReadAllBytes()>();

     label039:
        goto label041;

     label040:
        $r82 := @caughtexception;

        virtualinvoke $r82.<java.lang.Exception: void printStackTrace()>();

     label041:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeletePathIfEmpty()>();

     label042:
        goto label044;

     label043:
        $r51 := @caughtexception;

        virtualinvoke $r51.<java.io.IOException: void printStackTrace()>();

     label044:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeleteQuietly()>();

     label045:
        goto label047;

     label046:
        $r69 := @caughtexception;

        virtualinvoke $r69.<java.lang.Exception: void printStackTrace()>();

     label047:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeleteDirectory()>();

     label048:
        goto label050;

     label049:
        $r65 := @caughtexception;

        virtualinvoke $r65.<java.lang.Exception: void printStackTrace()>();

     label050:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeleteDirectoryWhichIsAFile()>();

     label051:
        goto label053;

     label052:
        $r77 := @caughtexception;

        virtualinvoke $r77.<java.lang.Exception: void printStackTrace()>();

     label053:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeleteSymbolicLinkDirectory()>();

     label054:
        goto label056;

     label055:
        $r80 := @caughtexception;

        virtualinvoke $r80.<java.lang.Exception: void printStackTrace()>();

     label056:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testDeleteDirectoryConcurrently()>();

     label057:
        goto label059;

     label058:
        $r63 := @caughtexception;

        virtualinvoke $r63.<java.lang.Exception: void printStackTrace()>();

     label059:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testCompressionOnAbsolutePath()>();

     label060:
        goto label062;

     label061:
        $r81 := @caughtexception;

        virtualinvoke $r81.<java.io.IOException: void printStackTrace()>();

     label062:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testCompressionOnRelativePath()>();

     label063:
        goto label065;

     label064:
        $r67 := @caughtexception;

        virtualinvoke $r67.<java.io.IOException: void printStackTrace()>();

     label065:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testListFilesInPathWithoutAnyFileReturnEmptyList()>();

     label066:
        goto label068;

     label067:
        $r55 := @caughtexception;

        virtualinvoke $r55.<java.io.IOException: void printStackTrace()>();

     label068:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testListFilesInPath()>();

     label069:
        goto label071;

     label070:
        $r73 := @caughtexception;

        virtualinvoke $r73.<java.io.IOException: void printStackTrace()>();

     label071:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testRelativizeOfAbsolutePath()>();

     label072:
        goto label074;

     label073:
        $r75 := @caughtexception;

        virtualinvoke $r75.<java.io.IOException: void printStackTrace()>();

     label074:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testRelativizeOfRelativePath()>();

     label075:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testAbsolutePathToURL()>();

     label076:
        goto label078;

     label077:
        $r76 := @caughtexception;

        virtualinvoke $r76.<java.net.MalformedURLException: void printStackTrace()>();

     label078:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testRelativePathToURL()>();

     label079:
        goto label081;

     label080:
        $r59 := @caughtexception;

        virtualinvoke $r59.<java.net.MalformedURLException: void printStackTrace()>();

     label081:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testListDirFailsIfDirectoryDoesNotExist()>();

     label082:
        goto label084;

     label083:
        $r70 := @caughtexception;

        virtualinvoke $r70.<java.io.IOException: void printStackTrace()>();

     label084:
        virtualinvoke $r39.<org.apache.flink.util.FileUtilsTest: void testListAFileFailsBecauseDirectoryIsExpected()>();

     label085:
        goto label087;

     label086:
        $r58 := @caughtexception;

        virtualinvoke $r58.<java.io.IOException: void printStackTrace()>();

     label087:
        $r40 = new org.apache.flink.util.CloseableIteratorTest;

        specialinvoke $r40.<org.apache.flink.util.CloseableIteratorTest: void <init>()>();

     label088:
        virtualinvoke $r40.<org.apache.flink.util.CloseableIteratorTest: void testFlattenEmpty()>();

     label089:
        goto label091;

     label090:
        $r85 := @caughtexception;

        virtualinvoke $r85.<java.lang.Exception: void printStackTrace()>();

     label091:
        virtualinvoke $r40.<org.apache.flink.util.CloseableIteratorTest: void testFlattenIteration()>();

     label092:
        virtualinvoke $r40.<org.apache.flink.util.CloseableIteratorTest: void testFlattenErrorHandling()>();

     label093:
        goto label095;

     label094:
        $r62 := @caughtexception;

        virtualinvoke $r62.<java.lang.Exception: void printStackTrace()>();

     label095:
        $r41 = new org.apache.flink.util.UnionIteratorTest;

        specialinvoke $r41.<org.apache.flink.util.UnionIteratorTest: void <init>()>();

        virtualinvoke $r41.<org.apache.flink.util.UnionIteratorTest: void testUnion()>();

        virtualinvoke $r41.<org.apache.flink.util.UnionIteratorTest: void testTraversableOnce()>();

        $r42 = new org.apache.flink.util.TimeUtilsPrettyPrintingTest;

        specialinvoke $r42.<org.apache.flink.util.TimeUtilsPrettyPrintingTest: void <init>()>();

        virtualinvoke $r42.<org.apache.flink.util.TimeUtilsPrettyPrintingTest: void testFormatting()>();

        $r43 = new org.apache.flink.util.NetUtilsTest;

        specialinvoke $r43.<org.apache.flink.util.NetUtilsTest: void <init>()>();

     label096:
        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testCorrectHostnamePort()>();

     label097:
        goto label099;

     label098:
        $r71 := @caughtexception;

        virtualinvoke $r71.<java.lang.Exception: void printStackTrace()>();

     label099:
        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testParseHostPortAddress()>();

        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testIPv4toURL()>();

        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testIPv6toURL()>();

        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testIPv4URLEncoding()>();

        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testIPv6URLEncoding()>();

        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testFreePortRangeUtility()>();

     label100:
        virtualinvoke $r43.<org.apache.flink.util.NetUtilsTest: void testFormatAddress()>();

     label101:
        goto label103;

     label102:
        $r78 := @caughtexception;

        virtualinvoke $r78.<java.net.UnknownHostException: void printStackTrace()>();

     label103:
        $r44 = new org.apache.flink.util.InstantiationUtilTest;

        specialinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void <init>()>();

     label104:
        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testResolveProxyClass()>();

     label105:
        goto label107;

     label106:
        $r84 := @caughtexception;

        virtualinvoke $r84.<java.lang.Exception: void printStackTrace()>();

     label107:
        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testInstantiationOfStringValue()>();

        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testInstantiationOfStringValueAndCastToValue()>();

        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testHasNullaryConstructor()>();

        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testClassIsProper()>();

        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testClassIsNotProper()>();

        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testCheckForInstantiationOfPrivateClass()>();

     label108:
        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testSerializationToByteArray()>();

     label109:
        goto label111;

     label110:
        $r66 := @caughtexception;

        virtualinvoke $r66.<java.io.IOException: void printStackTrace()>();

     label111:
        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testWriteToConfigFailingSerialization()>();

     label112:
        virtualinvoke $r44.<org.apache.flink.util.InstantiationUtilTest: void testCopyWritable()>();

     label113:
        goto label115;

     label114:
        $r53 := @caughtexception;

        virtualinvoke $r53.<java.lang.Exception: void printStackTrace()>();

     label115:
        $r45 = new org.apache.flink.util.LambdaUtilTest;

        specialinvoke $r45.<org.apache.flink.util.LambdaUtilTest: void <init>()>();

     label116:
        virtualinvoke $r45.<org.apache.flink.util.LambdaUtilTest: void testRunWithContextClassLoaderRunnable()>();

     label117:
        goto label119;

     label118:
        $r79 := @caughtexception;

        virtualinvoke $r79.<java.lang.Exception: void printStackTrace()>();

     label119:
        virtualinvoke $r45.<org.apache.flink.util.LambdaUtilTest: void testRunWithContextClassLoaderSupplier()>();

     label120:
        goto label122;

     label121:
        $r50 := @caughtexception;

        virtualinvoke $r50.<java.lang.Exception: void printStackTrace()>();

     label122:
        $r46 = new org.apache.flink.util.PropertiesUtilTest;

        specialinvoke $r46.<org.apache.flink.util.PropertiesUtilTest: void <init>()>();

        virtualinvoke $r46.<org.apache.flink.util.PropertiesUtilTest: void testFlatten()>();

        $r47 = new org.apache.flink.util.TernaryBooleanTest;

        specialinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void <init>()>();

        virtualinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void testWithDefault()>();

        virtualinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void testResolveUndefined()>();

        virtualinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void testToBoolean()>();

        virtualinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void testFromBoolean()>();

        virtualinvoke $r47.<org.apache.flink.util.TernaryBooleanTest: void testFromBoxedBoolean()>();

        $r48 = new org.apache.flink.util.StringValueUtilsTest;

        specialinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void <init>()>();

        virtualinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void testToLowerCaseConverting()>();

        virtualinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void testReplaceNonWordChars()>();

        virtualinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void testTokenizerOnStringWithoutNexToken()>();

        virtualinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void testTokenizerOnStringWithNexToken()>();

        virtualinvoke $r48.<org.apache.flink.util.StringValueUtilsTest: void testTokenizerOnStringOnlyWithDelimiter()>();

        $r49 = new org.apache.flink.util.NumberSequenceIteratorTest;

        specialinvoke $r49.<org.apache.flink.util.NumberSequenceIteratorTest: void <init>()>();

        virtualinvoke $r49.<org.apache.flink.util.NumberSequenceIteratorTest: void testSplitRegular()>();

        virtualinvoke $r49.<org.apache.flink.util.NumberSequenceIteratorTest: void testSplittingLargeRangesBy2()>();

        virtualinvoke $r49.<org.apache.flink.util.NumberSequenceIteratorTest: void testSplittingTooSmallRanges()>();

        return;

        catch java.lang.Exception from label001 to label002 with label003;
        catch java.lang.Exception from label005 to label006 with label007;
        catch java.lang.Exception from label008 to label009 with label010;
        catch java.lang.Exception from label011 to label012 with label013;
        catch java.lang.Exception from label014 to label015 with label016;
        catch java.io.IOException from label018 to label019 with label020;
        catch java.io.IOException from label021 to label022 with label023;
        catch java.io.IOException from label025 to label026 with label027;
        catch java.lang.Exception from label028 to label029 with label030;
        catch java.lang.Exception from label031 to label032 with label033;
        catch java.lang.Exception from label034 to label035 with label036;
        catch java.lang.Exception from label038 to label039 with label040;
        catch java.io.IOException from label041 to label042 with label043;
        catch java.lang.Exception from label044 to label045 with label046;
        catch java.lang.Exception from label047 to label048 with label049;
        catch java.lang.Exception from label050 to label051 with label052;
        catch java.lang.Exception from label053 to label054 with label055;
        catch java.lang.Exception from label056 to label057 with label058;
        catch java.io.IOException from label059 to label060 with label061;
        catch java.io.IOException from label062 to label063 with label064;
        catch java.io.IOException from label065 to label066 with label067;
        catch java.io.IOException from label068 to label069 with label070;
        catch java.io.IOException from label071 to label072 with label073;
        catch java.net.MalformedURLException from label075 to label076 with label077;
        catch java.net.MalformedURLException from label078 to label079 with label080;
        catch java.io.IOException from label081 to label082 with label083;
        catch java.io.IOException from label084 to label085 with label086;
        catch java.lang.Exception from label088 to label089 with label090;
        catch java.lang.Exception from label092 to label093 with label094;
        catch java.lang.Exception from label096 to label097 with label098;
        catch java.net.UnknownHostException from label100 to label101 with label102;
        catch java.lang.Exception from label104 to label105 with label106;
        catch java.io.IOException from label108 to label109 with label110;
        catch java.lang.Exception from label112 to label113 with label114;
        catch java.lang.Exception from label116 to label117 with label118;
        catch java.lang.Exception from label119 to label120 with label121;
    }
}
