public class org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl extends java.lang.Object implements org.powermock.api.support.membermodification.strategy.MethodReplaceStrategy
{
    private final java.lang.reflect.Method method;

    public void <init>(java.lang.reflect.Method)
    {
        org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl r0;
        java.lang.reflect.Method r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot replace a null method.");

        throw $r2;

     label1:
        r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method> = r1;

        return;
    }

    public void 'with'(java.lang.reflect.Method)
    {
        org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl r0;
        java.lang.reflect.Method r1, $r2, $r3, $r6, $r7, $r11, $r15, $r21, $r32;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r4, $r5, $r22, $r24;
        java.lang.Class[] $r8, $r9;
        org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl$MethodInvocationHandler $r10;
        java.lang.IllegalArgumentException $r12, $r18, $r27, $r30, $r34;
        java.lang.Object[] $r13, $r19, $r28, $r31;
        java.lang.String $r14, $r16, $r17, $r20, $r23, $r25, $r26, $r29, $r33;

        r0 := @this: org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl;

        r1 := @parameter0: java.lang.reflect.Method;

        if r1 != null goto label1;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A metod cannot be replaced with null.");

        throw $r34;

     label1:
        $r2 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label2;

        $r30 = new java.lang.IllegalArgumentException;

        $r31 = newarray (java.lang.Object)[1];

        $r32 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Replace requires static methods, \'%s\' is not static", $r31);

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r30;

     label2:
        $i1 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z1 != 0 goto label3;

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = r1;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Replace requires static methods, \'%s\' is not static", $r28);

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r27;

     label3:
        $r3 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z2 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z2 != 0 goto label4;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = newarray (java.lang.Object)[3];

        $r20 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r19[0] = $r20;

        $r21 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r22 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r19[1] = $r23;

        $r24 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r19[2] = $r25;

        $r26 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The replacing method (%s) needs to return %s and not %s.", $r19);

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r18;

     label4:
        $r6 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $z3 = virtualinvoke $r6.<java.lang.reflect.Method: boolean isVarArgs()>();

        $r7 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r9 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z3, $r8, $r9);

        if $z4 != 0 goto label5;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = newarray (java.lang.Object)[2];

        $r14 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String toString()>();

        $r13[0] = $r14;

        $r15 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r16 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.String toString()>();

        $r13[1] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The replacing method, \"%s\", needs to have the same number of parameters of the same type as as method \"%s\".", $r13);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label5:
        $r11 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        $r10 = new org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl$MethodInvocationHandler;

        specialinvoke $r10.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl$MethodInvocationHandler: void <init>(org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl,java.lang.reflect.Method)>(r0, r1);

        staticinvoke <org.powermock.api.support.MethodProxy: void proxy(java.lang.reflect.Method,java.lang.reflect.InvocationHandler)>($r11, $r10);

        return;
    }

    public void 'with'(java.lang.reflect.InvocationHandler)
    {
        org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl r0;
        java.lang.reflect.InvocationHandler r1;
        java.lang.reflect.Method $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl;

        r1 := @parameter0: java.lang.reflect.InvocationHandler;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invocation handler cannot be null");

        throw $r3;

     label1:
        $r2 = r0.<org.powermock.api.support.membermodification.strategy.impl.MethodReplaceStrategyImpl: java.lang.reflect.Method method>;

        staticinvoke <org.powermock.api.support.MethodProxy: void proxy(java.lang.reflect.Method,java.lang.reflect.InvocationHandler)>($r2, r1);

        return;
    }
}
