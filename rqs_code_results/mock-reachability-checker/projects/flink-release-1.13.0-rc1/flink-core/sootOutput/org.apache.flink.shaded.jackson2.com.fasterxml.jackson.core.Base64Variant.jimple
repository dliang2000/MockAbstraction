public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant extends java.lang.Object implements java.io.Serializable
{
    private static final int INT_SPACE;
    private static final long serialVersionUID;
    protected static final char PADDING_CHAR_NONE;
    public static final int BASE64_VALUE_INVALID;
    public static final int BASE64_VALUE_PADDING;
    private final transient int[] _asciiToBase64;
    private final transient char[] _base64ToAsciiC;
    private final transient byte[] _base64ToAsciiB;
    final java.lang.String _name;
    private final char _paddingChar;
    private final int _maxLineLength;
    private final boolean _writePadding;
    private final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour;

    public void <init>(java.lang.String, java.lang.String, boolean, char, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String r1, r2, $r18;
        boolean z0;
        char c0, c3;
        int i1, i2, i5;
        int[] $r3, $r7, $r9, $r12;
        char[] $r4, $r6, $r10;
        byte[] $r5, $r11;
        byte $b4;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r19;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        c0 := @parameter3: char;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = newarray (int)[128];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64> = $r3;

        $r4 = newarray (char)[64];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC> = $r4;

        $r5 = newarray (byte)[64];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB> = $r5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar> = c0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength> = i1;

        i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if i2 == 64 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base64Alphabet length must be exactly 64 (was ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        virtualinvoke r2.<java.lang.String: void getChars(int,int,char[],int)>(0, i2, $r6, 0);

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r7, -1);

        i5 = 0;

     label2:
        if i5 >= i2 goto label3;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        c3 = $r10[i5];

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $b4 = (byte) c3;

        $r11[i5] = $b4;

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $r12[c3] = i5;

        i5 = i5 + 1;

        goto label2;

     label3:
        if z0 == 0 goto label4;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $r9[c0] = -2;

     label4:
        if z0 == 0 goto label5;

        $r19 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;

        goto label6;

     label5:
        $r19 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;

     label6:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour> = $r19;

        return;
    }

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.lang.String, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r1;
        java.lang.String r2;
        int i0;
        char $c1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $c1 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,int)>(r1, r2, $z0, $c1, i0);

        return;
    }

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r1;
        java.lang.String r2;
        boolean z0;
        char c0;
        int i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        c0 := @parameter3: char;

        i1 := @parameter4: int;

        $r3 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(r1, r2, z0, c0, $r3, i1);

        return;
    }

    private void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.lang.String, boolean, char, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r1;
        java.lang.String r2;
        boolean z0;
        char c0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour r3;
        int i1, $i2, $i3, $i4;
        byte[] r4, $r9, $r10;
        char[] r5, $r8, $r11;
        int[] r6, $r7, $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        c0 := @parameter3: char;

        r3 := @parameter4: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;

        i1 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = newarray (int)[128];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64> = $r7;

        $r8 = newarray (char)[64];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC> = $r8;

        $r9 = newarray (byte)[64];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB> = $r9;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name> = r2;

        r4 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i2 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r10, 0, $i2);

        r5 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i3 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, $r11, 0, $i3);

        r6 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $r12 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $i4 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r12, 0, $i4);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar> = c0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength> = i1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour> = r3;

        return;
    }

    private void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour r2;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;

        $r3 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $z0 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $c1 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $i0 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(r1, $r3, $z0, $c1, r2, $i0);

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withPaddingAllowed()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_ALLOWED>;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withReadPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>($r1);

        return $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withPaddingRequired()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withReadPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>($r1);

        return $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withPaddingForbidden()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withReadPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>($r1);

        return $r2;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withReadPadding(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        if r1 != $r2 goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour)>(r0, r1);

     label2:
        return $r3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant withWritePadding(boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, $r2;
        boolean z0, $z1;
        int $i0;
        char $c1;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        z0 := @parameter0: boolean;

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        if z0 != $z1 goto label1;

        $r2 = r0;

        goto label2;

     label1:
        $r2 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $c1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        specialinvoke $r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,int)>(r0, $r1, z0, $c1, $i0);

     label2:
        return $r2;
    }

    protected java.lang.Object readResolve()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r1, $r5;
        java.lang.String $r2, $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c0, $c1, $c4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r3, $r4, $r7;
        int $i2, $i3, $i5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        r1 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variants: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant valueOf(java.lang.String)>($r2);

        $z1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $z0 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        if $z1 != $z0 goto label1;

        $c1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $c0 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        if $c1 != $c0 goto label1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        $r3 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        if $r4 != $r3 goto label1;

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        $i2 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        if $i3 != $i2 goto label1;

        $z3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $z2 = r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        if $z3 == $z2 goto label2;

     label1:
        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $z4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $c4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant,java.lang.String,boolean,char,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,int)>(r1, $r6, $z4, $c4, $r7, $i5);

        return $r5;

     label2:
        return r1;
    }

    public java.lang.String getName()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        return $r1;
    }

    public boolean usesPadding()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        return $z0;
    }

    public boolean requiresPaddingOnRead()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED>;

        if $r2 != $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean acceptsPaddingOnRead()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN>;

        if $r2 == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean usesPaddingChar(char)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        char c0, $c1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        c0 := @parameter0: char;

        $c1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        if c0 != $c1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean usesPaddingChar(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0;
        char $c1;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        $c1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        if i0 != $c1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour paddingReadBehaviour()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        return $r1;
    }

    public char getPaddingChar()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        char $c0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $c0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        return $c0;
    }

    public byte getPaddingByte()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        char $c0;
        byte $b1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $c0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $b1 = (byte) $c0;

        return $b1;
    }

    public int getMaxLineLength()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        return $i0;
    }

    public int decodeBase64Char(char)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        char c0;
        int[] $r1;
        int $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        c0 := @parameter0: char;

        if c0 > 127 goto label1;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $i2 = $r1[c0];

        goto label2;

     label1:
        $i2 = -1;

     label2:
        return $i2;
    }

    public int decodeBase64Char(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        if i0 > 127 goto label1;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $i1 = $r1[i0];

        goto label2;

     label1:
        $i1 = -1;

     label2:
        return $i1;
    }

    public int decodeBase64Byte(byte)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        byte b0;
        int[] $r1;
        int $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        b0 := @parameter0: byte;

        if b0 >= 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int[] _asciiToBase64>;

        $i2 = $r1[b0];

        return $i2;
    }

    public char encodeBase64BitsAsChar(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0;
        char[] $r1;
        char $c1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $c1 = $r1[i0];

        return $c1;
    }

    public int encodeBase64Chunk(int, char[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, i12, i13, i14, i15, i16;
        char[] r1, $r2, $r3, $r4, $r5;
        char $c3, $c6, $c9, $c11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i12 := @parameter2: int;

        i13 = i12 + 1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        r1[i12] = $c3;

        i14 = i13 + 1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r3[$i5];

        r1[i13] = $c6;

        i15 = i14 + 1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $c9 = $r4[$i8];

        r1[i14] = $c9;

        i16 = i15 + 1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i10 = i0 & 63;

        $c11 = $r5[$i10];

        r1[i15] = $c11;

        return i16;
    }

    public void encodeBase64Chunk(java.lang.StringBuilder, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.StringBuilder r1;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        char[] $r2, $r4, $r6, $r8;
        char $c3, $c6, $c9, $c11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $c3 = $r2[$i2];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $c6 = $r4[$i5];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $c9 = $r6[$i8];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i10 = i0 & 63;

        $c11 = $r8[$i10];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        return;
    }

    public int encodeBase64Partial(int, int, char[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i12, $i14, $i15, i16, i17, i18, i19;
        char[] r1, $r2, $r3, $r4, $r5;
        char $c4, $c7, $c11, $c13, $c20;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i16 := @parameter3: int;

        i17 = i16 + 1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i2 = i0 >> 18;

        $i3 = $i2 & 63;

        $c4 = $r2[$i3];

        r1[i16] = $c4;

        i18 = i17 + 1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i5 = i0 >> 12;

        $i6 = $i5 & 63;

        $c7 = $r3[$i6];

        r1[i17] = $c7;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label3;

        $i12 = i18;

        i19 = i18 + 1;

        if i1 != 2 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i14 = i0 >> 6;

        $i15 = $i14 & 63;

        $c20 = $r5[$i15];

        goto label2;

     label1:
        $c20 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

     label2:
        r1[$i12] = $c20;

        i18 = i19 + 1;

        $c13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        r1[i19] = $c13;

        goto label4;

     label3:
        if i1 != 2 goto label4;

        $i8 = i18;

        i18 = i18 + 1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i9 = i0 >> 6;

        $i10 = $i9 & 63;

        $c11 = $r4[$i10];

        r1[$i8] = $c11;

     label4:
        return i18;
    }

    public void encodeBase64Partial(java.lang.StringBuilder, int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.StringBuilder r1;
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i9, $i12, $i13;
        char[] $r2, $r4, $r6, $r10;
        char $c4, $c7, $c10, $c11, $c14;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i2 = i0 >> 18;

        $i3 = $i2 & 63;

        $c4 = $r2[$i3];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i5 = i0 >> 12;

        $i6 = $i5 & 63;

        $c7 = $r4[$i6];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label3;

        if i1 != 2 goto label1;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i12 = i0 >> 6;

        $i13 = $i12 & 63;

        $c14 = $r10[$i13];

        goto label2;

     label1:
        $c14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        $c11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        goto label4;

     label3:
        if i1 != 2 goto label4;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char[] _base64ToAsciiC>;

        $i8 = i0 >> 6;

        $i9 = $i8 & 63;

        $c10 = $r6[$i9];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c10);

     label4:
        return;
    }

    public byte encodeBase64BitsAsByte(int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $b1 = $r1[i0];

        return $b1;
    }

    public int encodeBase64Chunk(int, byte[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10, i12, i13, i14, i15, i16;
        byte[] r1, $r2, $r3, $r4, $r5;
        byte $b3, $b6, $b9, $b11;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i12 := @parameter2: int;

        i13 = i12 + 1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i1 = i0 >> 18;

        $i2 = $i1 & 63;

        $b3 = $r2[$i2];

        r1[i12] = $b3;

        i14 = i13 + 1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i4 = i0 >> 12;

        $i5 = $i4 & 63;

        $b6 = $r3[$i5];

        r1[i13] = $b6;

        i15 = i14 + 1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i7 = i0 >> 6;

        $i8 = $i7 & 63;

        $b9 = $r4[$i8];

        r1[i14] = $b9;

        i16 = i15 + 1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i10 = i0 & 63;

        $b11 = $r5[$i10];

        r1[i15] = $b11;

        return i16;
    }

    public int encodeBase64Partial(int, int, byte[], int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        int i0, i1, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i14, $i15, $i16, i17, i18, i19, i20;
        byte[] r1, $r2, $r3, $r4, $r5;
        byte b2, $b5, $b8, $b12, $b21;
        boolean $z0;
        char $c13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        i17 := @parameter3: int;

        i18 = i17 + 1;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i3 = i0 >> 18;

        $i4 = $i3 & 63;

        $b5 = $r2[$i4];

        r1[i17] = $b5;

        i19 = i18 + 1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i6 = i0 >> 12;

        $i7 = $i6 & 63;

        $b8 = $r3[$i7];

        r1[i18] = $b8;

        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 == 0 goto label3;

        $c13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        b2 = (byte) $c13;

        $i14 = i19;

        i20 = i19 + 1;

        if i1 != 2 goto label1;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i15 = i0 >> 6;

        $i16 = $i15 & 63;

        $b21 = $r5[$i16];

        goto label2;

     label1:
        $b21 = b2;

     label2:
        r1[$i14] = $b21;

        i19 = i20 + 1;

        r1[i20] = b2;

        goto label4;

     label3:
        if i1 != 2 goto label4;

        $i9 = i19;

        i19 = i19 + 1;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: byte[] _base64ToAsciiB>;

        $i10 = i0 >> 6;

        $i11 = $i10 & 63;

        $b12 = $r4[$i11];

        r1[$i9] = $b12;

     label4:
        return i19;
    }

    public java.lang.String encode(byte[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>(r1, 0);

        return $r2;
    }

    public java.lang.String encode(byte[], boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        byte[] r1;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i10, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        byte $b7, $b8, $b11, $b12, $b14;
        short $s9, $s13, $s15;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        i0 = lengthof r1;

        $r3 = new java.lang.StringBuilder;

        $i2 = i0 >> 2;

        $i4 = i0 + $i2;

        $i3 = i0 >> 3;

        $i5 = $i4 + $i3;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i5);

        if z0 == 0 goto label1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label1:
        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();

        i18 = $i6 >> 2;

        i19 = 0;

        i1 = i0 - 3;

     label2:
        if i19 > i1 goto label4;

        i20 = i19 + 1;

        $b11 = r1[i19];

        i21 = $b11 << 8;

        i22 = i20 + 1;

        $b12 = r1[i20];

        $s13 = $b12 & 255;

        i23 = i21 | $s13;

        $i16 = i23 << 8;

        i19 = i22 + 1;

        $b14 = r1[i22];

        $s15 = $b14 & 255;

        i24 = $i16 | $s15;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>($r3, i24);

        i18 = i18 + -1;

        if i18 > 0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(110);

        $i17 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();

        i18 = $i17 >> 2;

     label3:
        goto label2;

     label4:
        i25 = i0 - i19;

        if i25 <= 0 goto label6;

        i26 = i19 + 1;

        $b7 = r1[i19];

        i27 = $b7 << 16;

        if i25 != 2 goto label5;

        $b8 = r1[i26];

        $s9 = $b8 & 255;

        $i10 = $s9 << 8;

        i27 = i27 | $i10;

     label5:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>($r3, i27, i25);

     label6:
        if z0 == 0 goto label7;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label7:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.String encode(byte[], boolean, java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        byte[] r1;
        boolean z0;
        java.lang.String r2, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i10, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        java.lang.StringBuilder $r4;
        byte $b7, $b8, $b11, $b12, $b14;
        short $s9, $s13, $s15;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        i0 = lengthof r1;

        $r4 = new java.lang.StringBuilder;

        $i2 = i0 >> 2;

        $i4 = i0 + $i2;

        $i3 = i0 >> 3;

        $i5 = $i4 + $i3;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i5);

        if z0 == 0 goto label1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label1:
        $i6 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();

        i18 = $i6 >> 2;

        i19 = 0;

        i1 = i0 - 3;

     label2:
        if i19 > i1 goto label4;

        i20 = i19 + 1;

        $b11 = r1[i19];

        i21 = $b11 << 8;

        i22 = i20 + 1;

        $b12 = r1[i20];

        $s13 = $b12 & 255;

        i23 = i21 | $s13;

        $i16 = i23 << 8;

        i19 = i22 + 1;

        $b14 = r1[i22];

        $s15 = $b14 & 255;

        i24 = $i16 | $s15;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void encodeBase64Chunk(java.lang.StringBuilder,int)>($r4, i24);

        i18 = i18 + -1;

        if i18 > 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i17 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();

        i18 = $i17 >> 2;

     label3:
        goto label2;

     label4:
        i25 = i0 - i19;

        if i25 <= 0 goto label6;

        i26 = i19 + 1;

        $b7 = r1[i19];

        i27 = $b7 << 16;

        if i25 != 2 goto label5;

        $b8 = r1[i26];

        $s9 = $b8 & 255;

        $i10 = $s9 << 8;

        i27 = i27 | $i10;

     label5:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void encodeBase64Partial(java.lang.StringBuilder,int,int)>($r4, i27, i25);

     label6:
        if z0 == 0 goto label7;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

     label7:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public byte[] decode(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder $r3;
        byte[] $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.String;

        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder)>(r1, $r3);

        $r4 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r4;
    }

    public void decode(java.lang.String, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String r1, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder r2;
        int i0, $i1, $i2, $i3, $i4, i6, i8, i10, i12, i13, i14, i15, i17, i19, i20, i21, i23, i24, i25;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        char $c5, c7, c11, c16, c18, c22;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        i6 = 0;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label01:
        if i6 < i0 goto label02;

        goto label19;

     label02:
        $i1 = i6;

        i6 = i6 + 1;

        c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i1);

        if c7 <= 32 goto label01;

        i8 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(c7);

        if i8 >= 0 goto label03;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(c7, 0, null);

     label03:
        if i6 < i0 goto label04;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();

     label04:
        i10 = i6 + 1;

        c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6);

        i12 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(c11);

        if i12 >= 0 goto label05;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(c11, 1, null);

     label05:
        $i2 = i8 << 6;

        i13 = $i2 | i12;

        if i10 < i0 goto label07;

        $z4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();

        if $z4 != 0 goto label06;

        i14 = i13 >> 4;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(i14);

        goto label19;

     label06:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();

     label07:
        i15 = i10 + 1;

        c16 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10);

        i17 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(c16);

        if i17 >= 0 goto label12;

        if i17 == -2 goto label08;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(c16, 2, null);

     label08:
        $z2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean acceptsPaddingOnRead()>();

        if $z2 != 0 goto label09;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64UnexpectedPadding()>();

     label09:
        if i15 < i0 goto label10;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();

     label10:
        i6 = i15 + 1;

        c18 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        $z3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(c18);

        if $z3 != 0 goto label11;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected padding character \'");

        $c5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(c18, 3, $r7);

     label11:
        i19 = i13 >> 4;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(i19);

        goto label01;

     label12:
        $i3 = i13 << 6;

        i20 = $i3 | i17;

        if i15 < i0 goto label14;

        $z1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();

        if $z1 != 0 goto label13;

        i21 = i20 >> 2;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(i21);

        goto label19;

     label13:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64EOF()>();

     label14:
        i6 = i15 + 1;

        c22 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i15);

        i23 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(c22);

        if i23 >= 0 goto label17;

        if i23 == -2 goto label15;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportInvalidBase64(char,int,java.lang.String)>(c22, 3, null);

     label15:
        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean acceptsPaddingOnRead()>();

        if $z0 != 0 goto label16;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: void _reportBase64UnexpectedPadding()>();

     label16:
        i24 = i20 >> 2;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(i24);

        goto label18;

     label17:
        $i4 = i20 << 6;

        i25 = $i4 | i23;

        virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(i25);

     label18:
        goto label01;

     label19:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        char $c0, $c1;
        int $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour $r5, $r6;
        java.lang.String $r7, $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) r1;

        $c1 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        $c0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char _paddingChar>;

        if $c1 != $c0 goto label4;

        $i3 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int _maxLineLength>;

        if $i3 != $i2 goto label4;

        $z1 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean _writePadding>;

        if $z1 != $z0 goto label4;

        $r6 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour>;

        if $r6 != $r5 goto label4;

        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $r7 = r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String _name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    protected void _reportInvalidBase64(char, int, java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        char c0, $c2;
        int i1, $i3, $i4;
        java.lang.String r1, $r4, $r16, $r27, r32;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        c0 := @parameter0: char;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if c0 > 32 goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal white space character (code 0x");

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i4 = i1 + 1;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label1:
        $z0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(c0);

        if $z0 == 0 goto label2;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected padding character (\'");

        $c2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i3 = i1 + 1;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        r32 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.Character: boolean isDefined(char)>(c0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c0);

        if $z2 == 0 goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r32 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character \'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        r32 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        if r1 == null goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r32 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r32);

        throw $r7;
    }

    protected void _reportBase64EOF() throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String missingPaddingMessage()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    protected void _reportBase64UnexpectedPadding() throws java.lang.IllegalArgumentException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String unexpectedPaddingMessage()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    protected java.lang.String unexpectedPaddingMessage()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String getName()>();

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected end of base64-encoded String: base64 variant \'%s\' expects no padding at the end while decoding. This Base64Variant might have been incorrectly configured", $r1);

        return $r3;
    }

    public java.lang.String missingPaddingMessage()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r4;
        char $c0;
        java.lang.Character $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: java.lang.String getName()>();

        $r1[0] = $r2;

        $c0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected end of base64-encoded String: base64 variant \'%s\' expects padding (one or more \'%c\' characters) at the end. This Base64Variant might have been incorrectly configured", $r1);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int BASE64_VALUE_PADDING> = -2;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int BASE64_VALUE_INVALID> = -1;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: char PADDING_CHAR_NONE> = 0;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: long serialVersionUID> = 1L;

        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant: int INT_SPACE> = 32;

        return;
    }
}
