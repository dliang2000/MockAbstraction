public final class org.slf4j.LoggerFactory extends java.lang.Object
{
    static final java.lang.String CODES_PREFIX;
    static final java.lang.String NO_STATICLOGGERBINDER_URL;
    static final java.lang.String MULTIPLE_BINDINGS_URL;
    static final java.lang.String NULL_LF_URL;
    static final java.lang.String VERSION_MISMATCH;
    static final java.lang.String SUBSTITUTE_LOGGER_URL;
    static final java.lang.String LOGGER_NAME_MISMATCH_URL;
    static final java.lang.String REPLAY_URL;
    static final java.lang.String UNSUCCESSFUL_INIT_URL;
    static final java.lang.String UNSUCCESSFUL_INIT_MSG;
    static final int UNINITIALIZED;
    static final int ONGOING_INITIALIZATION;
    static final int FAILED_INITIALIZATION;
    static final int SUCCESSFUL_INITIALIZATION;
    static final int NOP_FALLBACK_INITIALIZATION;
    static int INITIALIZATION_STATE;
    static org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY;
    static org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY;
    static final java.lang.String DETECT_LOGGER_NAME_MISMATCH_PROPERTY;
    static final java.lang.String JAVA_VENDOR_PROPERTY;
    static boolean DETECT_LOGGER_NAME_MISMATCH;
    private static final java.lang.String[] API_COMPATIBILITY_LIST;
    private static java.lang.String STATIC_LOGGER_BINDER_PATH;

    private void <init>()
    {
        org.slf4j.LoggerFactory r0;

        r0 := @this: org.slf4j.LoggerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void reset()
    {
        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 0;

        return;
    }

    private static final void performInitialization()
    {
        int $i0;

        staticinvoke <org.slf4j.LoggerFactory: void bind()>();

        $i0 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        if $i0 != 3 goto label1;

        staticinvoke <org.slf4j.LoggerFactory: void versionSanityCheck()>();

     label1:
        return;
    }

    private static boolean messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("org/slf4j/impl/StaticLoggerBinder");

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("org.slf4j.impl.StaticLoggerBinder");

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static final void bind()
    {
        org.slf4j.helpers.SubstituteLoggerFactory $r1;
        java.lang.Exception $r2;
        java.lang.IllegalStateException $r3;
        java.lang.NoClassDefFoundError $r4;
        boolean $z0, $z1;
        java.lang.NoSuchMethodError $r5;
        java.util.Set r6;
        java.lang.String r8, r10;

     label1:
        r6 = staticinvoke <org.slf4j.LoggerFactory: java.util.Set findPossibleStaticLoggerBinderPathSet()>();

        staticinvoke <org.slf4j.LoggerFactory: void reportMultipleBindingAmbiguity(java.util.Set)>(r6);

        staticinvoke <org.slf4j.impl.StaticLoggerBinder: org.slf4j.impl.StaticLoggerBinder getSingleton()>();

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 3;

        staticinvoke <org.slf4j.LoggerFactory: void reportActualBinding(java.util.Set)>(r6);

        staticinvoke <org.slf4j.LoggerFactory: void fixSubstitutedLoggers()>();

        staticinvoke <org.slf4j.LoggerFactory: void playRecordedEvents()>();

        $r1 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY>;

        virtualinvoke $r1.<org.slf4j.helpers.SubstituteLoggerFactory: void clear()>();

     label2:
        goto label9;

     label3:
        $r4 := @caughtexception;

        r8 = virtualinvoke $r4.<java.lang.NoClassDefFoundError: java.lang.String getMessage()>();

        $z0 = staticinvoke <org.slf4j.LoggerFactory: boolean messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String)>(r8);

        if $z0 == 0 goto label4;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 4;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Defaulting to no-operation (NOP) logger implementation");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.");

        goto label5;

     label4:
        staticinvoke <org.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)>($r4);

        throw $r4;

     label5:
        goto label9;

     label6:
        $r5 := @caughtexception;

        r10 = virtualinvoke $r5.<java.lang.NoSuchMethodError: java.lang.String getMessage()>();

        if r10 == null goto label7;

        $z1 = virtualinvoke r10.<java.lang.String: boolean contains(java.lang.CharSequence)>("org.slf4j.impl.StaticLoggerBinder.getSingleton()");

        if $z1 == 0 goto label7;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 2;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("slf4j-api 1.6.x (or later) is incompatible with this binding.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Your binding is version 1.5.5 or earlier.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Upgrade your binding to version 1.6.x.");

     label7:
        throw $r5;

     label8:
        $r2 := @caughtexception;

        staticinvoke <org.slf4j.LoggerFactory: void failedBinding(java.lang.Throwable)>($r2);

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected initialization failure", $r2);

        throw $r3;

     label9:
        return;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
        catch java.lang.NoSuchMethodError from label1 to label2 with label6;
        catch java.lang.Exception from label1 to label2 with label8;
    }

    static void failedBinding(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 2;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Failed to instantiate SLF4J LoggerFactory", r0);

        return;
    }

    private static void playRecordedEvents()
    {
        java.util.List r0;
        org.slf4j.event.SubstituteLoggingEvent r1;
        org.slf4j.helpers.SubstituteLogger r2;
        org.slf4j.helpers.SubstituteLoggerFactory $r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        java.lang.String $r5;

        $r3 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY>;

        r0 = virtualinvoke $r3.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List getEventList()>();

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label8;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (org.slf4j.event.SubstituteLoggingEvent) $r4;

        r2 = virtualinvoke r1.<org.slf4j.event.SubstituteLoggingEvent: org.slf4j.helpers.SubstituteLogger getLogger()>();

        $z1 = virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: boolean isDelegateNOP()>();

        if $z1 == 0 goto label3;

        goto label8;

     label3:
        $z2 = virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: boolean isDelegateEventAware()>();

        if $z2 == 0 goto label5;

        if i2 != 0 goto label4;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        staticinvoke <org.slf4j.LoggerFactory: void emitReplayWarning(int)>($i1);

     label4:
        virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: void log(org.slf4j.event.LoggingEvent)>(r1);

        goto label7;

     label5:
        if i2 != 0 goto label6;

        staticinvoke <org.slf4j.LoggerFactory: void emitSubstitutionWarning()>();

     label6:
        $r5 = virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r5);

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return;
    }

    private static final void fixSubstitutedLoggers()
    {
        java.util.List r0;
        java.util.Iterator r1;
        org.slf4j.helpers.SubstituteLogger r2;
        org.slf4j.Logger r3;
        org.slf4j.helpers.SubstituteLoggerFactory $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.String $r6;

        $r4 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY>;

        r0 = virtualinvoke $r4.<org.slf4j.helpers.SubstituteLoggerFactory: java.util.List getLoggers()>();

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.slf4j.helpers.SubstituteLogger) $r5;

        $r6 = virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: java.lang.String getName()>();

        r3 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r6);

        virtualinvoke r2.<org.slf4j.helpers.SubstituteLogger: void setDelegate(org.slf4j.Logger)>(r3);

        goto label2;

     label3:
        return;
    }

    private static void emitSubstitutionWarning()
    {
        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("The following set of substitute loggers may have been accessed");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("during the initialization phase. Logging calls during this");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("phase were not honored. However, subsequent logging calls to these");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("loggers will work as normally expected.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See also http://www.slf4j.org/codes.html#substituteLogger");

        return;
    }

    private static void emitReplayWarning(int)
    {
        int i0;
        java.lang.StringBuilder $r0, $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A number (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") of logging calls during the initialization phase have been intercepted and are");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r4);

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("now being replayed. These are suject to the filtering rules of the underlying logging system.");

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See also http://www.slf4j.org/codes.html#replay");

        return;
    }

    private static final void versionSanityCheck()
    {
        java.lang.String[] r0, $r6;
        int i0, i1;
        java.lang.String r1, $r8, $r10, r13;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9;
        java.util.List $r7;
        boolean $z0, z1;
        java.lang.Throwable $r11;
        java.lang.NoSuchFieldError $r12;

     label1:
        r13 = <org.slf4j.impl.StaticLoggerBinder: java.lang.String REQUESTED_API_VERSION>;

        z1 = 0;

        r0 = <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST>;

        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r1 = r0[i1];

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        z1 = 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if z1 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The requested version ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" by your slf4j binding is not compatible with ");

        $r6 = <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST>;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r10);

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#version_mismatch for further details.");

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        goto label8;

     label7:
        $r11 := @caughtexception;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Unexpected problem occured during version sanity check", $r11);

     label8:
        return;

        catch java.lang.NoSuchFieldError from label1 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label7;
    }

    static java.util.Set findPossibleStaticLoggerBinderPathSet()
    {
        java.net.URL r1;
        java.util.LinkedHashSet $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;
        java.lang.Object $r5;
        java.io.IOException $r7;
        java.lang.ClassLoader r8;
        java.util.Enumeration r9;
        boolean $z1;

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

     label1:
        $r3 = class "Lorg/slf4j/LoggerFactory;";

        r8 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r8 != null goto label2;

        $r6 = <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH>;

        r9 = staticinvoke <java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>($r6);

        goto label3;

     label2:
        $r4 = <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH>;

        r9 = virtualinvoke r8.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r4);

     label3:
        $z1 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r9.<java.util.Enumeration: java.lang.Object nextElement()>();

        r1 = (java.net.URL) $r5;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label3;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>("Error getting resources from path", $r7);

     label6:
        return $r2;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private static boolean isAmbiguousStaticLoggerBinderPathSet(java.util.Set)
    {
        java.util.Set r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.util.Set;

        $i0 = interfaceinvoke r0.<java.util.Set: int size()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static void reportMultipleBindingAmbiguity(java.util.Set)
    {
        java.util.Set r0;
        java.util.Iterator r1;
        java.net.URL r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: java.util.Set;

        $z0 = staticinvoke <org.slf4j.LoggerFactory: boolean isAndroid()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <org.slf4j.LoggerFactory: boolean isAmbiguousStaticLoggerBinderPathSet(java.util.Set)>(r0);

        if $z1 == 0 goto label4;

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("Class path contains multiple SLF4J bindings.");

        r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.net.URL) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found binding in [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r8);

        goto label2;

     label3:
        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.");

     label4:
        return;
    }

    private static boolean isAndroid()
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 = staticinvoke <org.slf4j.helpers.Util: java.lang.String safeGetSystemProperty(java.lang.String)>("java.vendor.url");

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("android");

        return $z0;
    }

    private static void reportActualBinding(java.util.Set)
    {
        java.util.Set r0;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        org.slf4j.impl.StaticLoggerBinder $r3;
        java.lang.String $r4, $r7;

        r0 := @parameter0: java.util.Set;

        $z0 = staticinvoke <org.slf4j.LoggerFactory: boolean isAmbiguousStaticLoggerBinderPathSet(java.util.Set)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual binding is of type [");

        $r3 = staticinvoke <org.slf4j.impl.StaticLoggerBinder: org.slf4j.impl.StaticLoggerBinder getSingleton()>();

        $r4 = virtualinvoke $r3.<org.slf4j.impl.StaticLoggerBinder: java.lang.String getLoggerFactoryClassStr()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r7);

     label1:
        return;
    }

    public static org.slf4j.Logger getLogger(java.lang.String)
    {
        java.lang.String r0;
        org.slf4j.ILoggerFactory r1;
        org.slf4j.Logger $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();

        $r2 = interfaceinvoke r1.<org.slf4j.ILoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(r0);

        return $r2;
    }

    public static org.slf4j.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0, r2;
        org.slf4j.Logger r1;
        java.lang.String $r3, $r5, $r6, $r7;
        boolean $z0, $z1;
        java.lang.Object[] $r4;

        r0 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>($r3);

        $z0 = <org.slf4j.LoggerFactory: boolean DETECT_LOGGER_NAME_MISMATCH>;

        if $z0 == 0 goto label1;

        r2 = staticinvoke <org.slf4j.helpers.Util: java.lang.Class getCallingClass()>();

        if r2 == null goto label1;

        $z1 = staticinvoke <org.slf4j.LoggerFactory: boolean nonMatchingClasses(java.lang.Class,java.lang.Class)>(r0, r2);

        if $z1 == 0 goto label1;

        $r4 = newarray (java.lang.Object)[2];

        $r5 = interfaceinvoke r1.<org.slf4j.Logger: java.lang.String getName()>();

        $r4[0] = $r5;

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\".", $r4);

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>($r7);

        staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String)>("See http://www.slf4j.org/codes.html#loggerNameMismatch for an explanation");

     label1:
        return r1;
    }

    private static boolean nonMatchingClasses(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.slf4j.ILoggerFactory getILoggerFactory()
    {
        int $i0, $i1, $i2;
        org.slf4j.helpers.NOPLoggerFactory $r2;
        org.slf4j.impl.StaticLoggerBinder $r3;
        org.slf4j.ILoggerFactory $r4;
        java.lang.IllegalStateException $r5, $r7;
        org.slf4j.helpers.SubstituteLoggerFactory $r6;
        java.lang.Throwable $r8;

        $i0 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        if $i0 != 0 goto label06;

        entermonitor class "Lorg/slf4j/LoggerFactory;";

     label01:
        $i2 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        if $i2 != 0 goto label02;

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 1;

        staticinvoke <org.slf4j.LoggerFactory: void performInitialization()>();

     label02:
        exitmonitor class "Lorg/slf4j/LoggerFactory;";

     label03:
        goto label06;

     label04:
        $r8 := @caughtexception;

        exitmonitor class "Lorg/slf4j/LoggerFactory;";

     label05:
        throw $r8;

     label06:
        $i1 = <org.slf4j.LoggerFactory: int INITIALIZATION_STATE>;

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label09;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label11;
        };

     label07:
        $r3 = staticinvoke <org.slf4j.impl.StaticLoggerBinder: org.slf4j.impl.StaticLoggerBinder getSingleton()>();

        $r4 = virtualinvoke $r3.<org.slf4j.impl.StaticLoggerBinder: org.slf4j.ILoggerFactory getLoggerFactory()>();

        return $r4;

     label08:
        $r2 = <org.slf4j.LoggerFactory: org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY>;

        return $r2;

     label09:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit");

        throw $r5;

     label10:
        $r6 = <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY>;

        return $r6;

     label11:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unreachable code");

        throw $r7;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    static void <clinit>()
    {
        org.slf4j.helpers.SubstituteLoggerFactory $r0;
        org.slf4j.helpers.NOPLoggerFactory $r1;
        boolean $z0;
        java.lang.String[] $r2;

        <org.slf4j.LoggerFactory: java.lang.String JAVA_VENDOR_PROPERTY> = "java.vendor.url";

        <org.slf4j.LoggerFactory: java.lang.String DETECT_LOGGER_NAME_MISMATCH_PROPERTY> = "slf4j.detectLoggerNameMismatch";

        <org.slf4j.LoggerFactory: int NOP_FALLBACK_INITIALIZATION> = 4;

        <org.slf4j.LoggerFactory: int SUCCESSFUL_INITIALIZATION> = 3;

        <org.slf4j.LoggerFactory: int FAILED_INITIALIZATION> = 2;

        <org.slf4j.LoggerFactory: int ONGOING_INITIALIZATION> = 1;

        <org.slf4j.LoggerFactory: int UNINITIALIZED> = 0;

        <org.slf4j.LoggerFactory: java.lang.String UNSUCCESSFUL_INIT_MSG> = "org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit";

        <org.slf4j.LoggerFactory: java.lang.String UNSUCCESSFUL_INIT_URL> = "http://www.slf4j.org/codes.html#unsuccessfulInit";

        <org.slf4j.LoggerFactory: java.lang.String REPLAY_URL> = "http://www.slf4j.org/codes.html#replay";

        <org.slf4j.LoggerFactory: java.lang.String LOGGER_NAME_MISMATCH_URL> = "http://www.slf4j.org/codes.html#loggerNameMismatch";

        <org.slf4j.LoggerFactory: java.lang.String SUBSTITUTE_LOGGER_URL> = "http://www.slf4j.org/codes.html#substituteLogger";

        <org.slf4j.LoggerFactory: java.lang.String VERSION_MISMATCH> = "http://www.slf4j.org/codes.html#version_mismatch";

        <org.slf4j.LoggerFactory: java.lang.String NULL_LF_URL> = "http://www.slf4j.org/codes.html#null_LF";

        <org.slf4j.LoggerFactory: java.lang.String MULTIPLE_BINDINGS_URL> = "http://www.slf4j.org/codes.html#multiple_bindings";

        <org.slf4j.LoggerFactory: java.lang.String NO_STATICLOGGERBINDER_URL> = "http://www.slf4j.org/codes.html#StaticLoggerBinder";

        <org.slf4j.LoggerFactory: java.lang.String CODES_PREFIX> = "http://www.slf4j.org/codes.html";

        <org.slf4j.LoggerFactory: int INITIALIZATION_STATE> = 0;

        $r0 = new org.slf4j.helpers.SubstituteLoggerFactory;

        specialinvoke $r0.<org.slf4j.helpers.SubstituteLoggerFactory: void <init>()>();

        <org.slf4j.LoggerFactory: org.slf4j.helpers.SubstituteLoggerFactory SUBST_FACTORY> = $r0;

        $r1 = new org.slf4j.helpers.NOPLoggerFactory;

        specialinvoke $r1.<org.slf4j.helpers.NOPLoggerFactory: void <init>()>();

        <org.slf4j.LoggerFactory: org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY> = $r1;

        $z0 = staticinvoke <org.slf4j.helpers.Util: boolean safeGetBooleanSystemProperty(java.lang.String)>("slf4j.detectLoggerNameMismatch");

        <org.slf4j.LoggerFactory: boolean DETECT_LOGGER_NAME_MISMATCH> = $z0;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "1.6";

        $r2[1] = "1.7";

        <org.slf4j.LoggerFactory: java.lang.String[] API_COMPATIBILITY_LIST> = $r2;

        <org.slf4j.LoggerFactory: java.lang.String STATIC_LOGGER_BINDER_PATH> = "org/slf4j/impl/StaticLoggerBinder.class";

        return;
    }
}
