public abstract class org.apache.flink.core.fs.FileSystemBehaviorTestSuite extends java.lang.Object
{
    private static final java.util.Random RND;
    private org.apache.flink.core.fs.FileSystem fs;
    private org.apache.flink.core.fs.Path basePath;

    public void <init>()
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.apache.flink.core.fs.FileSystem getFileSystem() throws java.lang.Exception;

    public abstract org.apache.flink.core.fs.Path getBasePath() throws java.lang.Exception;

    public abstract org.apache.flink.core.fs.FileSystemKind getFileSystemKind();

    public void prepare() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.FileSystem $r1, $r6;
        org.apache.flink.core.fs.Path $r2, $r3, $r5;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs> = $r1;

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path getBasePath()>();

        $r4 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r3, $r4);

        r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath> = $r2;

        $r6 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r5 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath>;

        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r5);

        return;
    }

    public void cleanup() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r1;
        org.apache.flink.core.fs.FileSystem $r2;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r2 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r1 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath>;

        virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r1, 1);

        return;
    }

    public void testFileSystemKind()
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.FileSystemKind $r1, $r3;
        org.apache.flink.core.fs.FileSystem $r2;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystemKind getFileSystemKind()>();

        $r2 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r3 = virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystemKind getKind()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r1, $r3);

        return;
    }

    public void testPathAndScheme() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.FileSystem $r1, $r4, $r6;
        java.net.URI $r2, $r5, $r7, $r10;
        org.apache.flink.core.fs.Path $r3, $r9;
        java.lang.String $r8, $r11;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r1 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path getBasePath()>();

        $r4 = virtualinvoke $r3.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r6 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r7 = virtualinvoke $r6.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getScheme()>();

        $r9 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path getBasePath()>();

        $r10 = virtualinvoke $r9.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r11);

        return;
    }

    public void testHomeAndWorkDir()
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.FileSystem $r1, $r4, $r8, $r11;
        java.net.URI $r2, $r6, $r9, $r13;
        java.lang.String $r3, $r7, $r10, $r14;
        org.apache.flink.core.fs.Path $r5, $r12;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r1 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String getScheme()>();

        $r4 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r5 = virtualinvoke $r4.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        $r6 = virtualinvoke $r5.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r7);

        $r8 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r9 = virtualinvoke $r8.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String getScheme()>();

        $r11 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r12 = virtualinvoke $r11.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getHomeDirectory()>();

        $r13 = virtualinvoke $r12.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r14);

        return;
    }

    public void testMkdirsReturnsTrueWhenCreatingDirectory() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r2, $r3;
        java.lang.String $r4;
        org.apache.flink.core.fs.FileSystem $r5, $r8;
        boolean $z0, $z1;
        org.apache.flink.core.fs.FileSystemKind $r6, $r7;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath>;

        $r4 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r3, $r4);

        $r5 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $z0 = virtualinvoke $r5.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystemKind getFileSystemKind()>();

        $r7 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind OBJECT_STORE>;

        if $r6 == $r7 goto label1;

        $r8 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $z1 = virtualinvoke $r8.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label1:
        return;
    }

    public void testMkdirsCreatesParentDirectories() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r2, $r3, $r4, $r5;
        java.lang.String $r6, $r7, $r8;
        org.apache.flink.core.fs.FileSystem $r9, $r12;
        boolean $z0, $z1;
        org.apache.flink.core.fs.FileSystemKind $r10, $r11;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = new org.apache.flink.core.fs.Path;

        $r4 = new org.apache.flink.core.fs.Path;

        $r5 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath>;

        $r6 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r5, $r6);

        $r7 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r4, $r7);

        $r8 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r3, $r8);

        $r9 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $z0 = virtualinvoke $r9.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r10 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystemKind getFileSystemKind()>();

        $r11 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind OBJECT_STORE>;

        if $r10 == $r11 goto label1;

        $r12 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $z1 = virtualinvoke $r12.<org.apache.flink.core.fs.FileSystem: boolean exists(org.apache.flink.core.fs.Path)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

     label1:
        return;
    }

    public void testMkdirsReturnsTrueForExistingDirectory() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r2, $r3;
        java.lang.String $r4;
        org.apache.flink.core.fs.FileSystem $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path basePath>;

        $r4 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r3, $r4);

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void createRandomFileInDirectory(org.apache.flink.core.fs.Path)>($r2);

        $r5 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $z0 = virtualinvoke $r5.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testMkdirsFailsForExistingFile() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r3, $r4;
        java.lang.String $r5;
        org.apache.flink.core.fs.FileSystem $r6;
        java.io.IOException $r7;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void assumeNotObjectStore()>();

        $r3 = new org.apache.flink.core.fs.Path;

        $r4 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path getBasePath()>();

        $r5 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r4, $r5);

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void createFile(org.apache.flink.core.fs.Path)>($r3);

     label1:
        $r6 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        virtualinvoke $r6.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IOException");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void testMkdirsFailsWithExistingParentFile() throws java.lang.Exception
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        org.apache.flink.core.fs.FileSystem $r9;
        java.io.IOException $r10;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void assumeNotObjectStore()>();

        $r4 = new org.apache.flink.core.fs.Path;

        $r5 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.Path getBasePath()>();

        $r6 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r5, $r6);

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void createFile(org.apache.flink.core.fs.Path)>($r4);

        $r7 = new org.apache.flink.core.fs.Path;

        $r8 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r4, $r8);

     label1:
        $r9 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        virtualinvoke $r9.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>($r7);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should fail with an IOException");

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.lang.String randomName()
    {
        java.util.Random $r0;
        java.lang.String $r1;

        $r0 = <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.util.Random RND>;

        $r1 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String getRandomString(java.util.Random,int,int,char,char)>($r0, 16, 16, 97, 122);

        return $r1;
    }

    private void createFile(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FSDataOutputStream r2;
        org.apache.flink.core.fs.FileSystem$WriteMode $r5;
        org.apache.flink.core.fs.FileSystem $r6;
        byte[] $r7;
        java.lang.Throwable $r8, $r9, $r11, r12;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r6 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        $r5 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r2 = virtualinvoke $r6.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>(r1, $r5);

        r12 = null;

     label01:
        $r7 = newarray (byte)[8];

        $r7[0] = 1;

        $r7[1] = 2;

        $r7[2] = 3;

        $r7[3] = 4;

        $r7[4] = 5;

        $r7[5] = 6;

        $r7[6] = 7;

        $r7[7] = 8;

        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void write(byte[])>($r7);

     label02:
        if r2 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label12;

     label04:
        $r9 := @caughtexception;

        r12 = $r9;

        throw $r9;

     label05:
        $r8 := @caughtexception;

     label06:
        if r2 == null goto label11;

        if r12 == null goto label10;

     label07:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        virtualinvoke r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label11;

     label10:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label11:
        throw $r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private void createRandomFileInDirectory(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.Path r1, $r3;
        org.apache.flink.core.fs.FileSystem $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystem fs>;

        virtualinvoke $r2.<org.apache.flink.core.fs.FileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

        $r3 = new org.apache.flink.core.fs.Path;

        $r4 = staticinvoke <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.lang.String randomName()>();

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, $r4);

        specialinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: void createFile(org.apache.flink.core.fs.Path)>($r3);

        return;
    }

    private void assumeNotObjectStore()
    {
        org.apache.flink.core.fs.FileSystemBehaviorTestSuite r0;
        org.apache.flink.core.fs.FileSystemKind $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.FileSystemBehaviorTestSuite;

        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.FileSystemBehaviorTestSuite: org.apache.flink.core.fs.FileSystemKind getFileSystemKind()>();

        $r3 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind OBJECT_STORE>;

        if $r2 == $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assume: void assumeTrue(java.lang.String,boolean)>("Test does not apply to object stores", $z0);

        return;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <org.apache.flink.core.fs.FileSystemBehaviorTestSuite: java.util.Random RND> = $r0;

        return;
    }
}
