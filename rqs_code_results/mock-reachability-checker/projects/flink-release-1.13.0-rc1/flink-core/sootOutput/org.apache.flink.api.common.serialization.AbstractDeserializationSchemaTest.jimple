public class org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testTypeExtractionTuple()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$TupleSchema $r3;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1 $r4;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        $r3 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$TupleSchema;

        specialinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$TupleSchema: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1)>(null);

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$TupleSchema: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        $r4 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1;

        specialinvoke $r4.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public void testTypeExtractionTupleAnonymous()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$2 $r3;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$3 $r4;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        $r3 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$2;

        specialinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$2: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$2: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        $r4 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$3;

        specialinvoke $r4.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$3: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public void testTypeExtractionGeneric()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$JsonSchema $r3;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$4 $r4;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        $r3 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$JsonSchema;

        specialinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$JsonSchema: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1)>(null);

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$JsonSchema: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        $r4 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$4;

        specialinvoke $r4.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$4: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public void testTypeExtractionGenericAnonymous()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$5 $r3;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$6 $r4;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        $r3 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$5;

        specialinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$5: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r1 = virtualinvoke $r3.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$5: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        $r4 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$6;

        specialinvoke $r4.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$6: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest)>(r0);

        r2 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(org.apache.flink.api.common.typeinfo.TypeHint)>($r4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public void testTypeExtractionRawException()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$RawSchema $r2;
        org.apache.flink.util.FlinkRuntimeException $r3;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

     label1:
        $r2 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$RawSchema;

        specialinvoke $r2.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$RawSchema: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.util.FlinkRuntimeException from label1 to label2 with label3;
    }

    public void testTypeExtractionGenericException()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$GenericSchema $r2;
        org.apache.flink.util.FlinkRuntimeException $r3;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

     label1:
        $r2 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$GenericSchema;

        specialinvoke $r2.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$GenericSchema: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1)>(null);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch org.apache.flink.util.FlinkRuntimeException from label1 to label2 with label3;
    }

    public void testIndirectGenericExtension()
    {
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1;
        org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$IndirectExtension $r2;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r3;

        r0 := @this: org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest;

        $r2 = new org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$IndirectExtension;

        specialinvoke $r2.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$IndirectExtension: void <init>(org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$1)>(null);

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.serialization.AbstractDeserializationSchemaTest$IndirectExtension: org.apache.flink.api.common.typeinfo.TypeInformation getProducedType()>();

        $r3 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }
}
