public abstract enum class org.powermock.core.classloader.ByteCodeFramework extends java.lang.Enum
{
    public static final enum org.powermock.core.classloader.ByteCodeFramework Javassist;
    private static final org.powermock.core.classloader.ByteCodeFramework[] $VALUES;

    public static org.powermock.core.classloader.ByteCodeFramework[] values()
    {
        org.powermock.core.classloader.ByteCodeFramework[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.powermock.core.classloader.ByteCodeFramework[]) $r1;

        return $r2;
    }

    public static org.powermock.core.classloader.ByteCodeFramework valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.powermock.core.classloader.ByteCodeFramework $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/powermock/core/classloader/ByteCodeFramework;", r0);

        $r2 = (org.powermock.core.classloader.ByteCodeFramework) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        org.powermock.core.classloader.ByteCodeFramework r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.powermock.core.classloader.ByteCodeFramework;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public static org.powermock.core.classloader.ByteCodeFramework getByteCodeFrameworkForMethod(java.lang.Class, java.lang.reflect.Method)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4, $r5, $r6;
        org.powermock.core.classloader.ByteCodeFramework r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method;

        r7 = staticinvoke <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework(java.lang.reflect.AnnotatedElement)>(r1);

        if r7 != null goto label1;

        r7 = staticinvoke <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework(java.lang.reflect.AnnotatedElement)>(r0);

     label1:
        if r7 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Either method %s or class %s is annotated by PrepareForTest/PrepareEverythingForTest", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return r7;
    }

    public static org.powermock.core.classloader.ByteCodeFramework getByteCodeFrameworkForTestClass(java.lang.Class)
    {
        java.lang.Class r0;
        org.powermock.configuration.PowerMockConfiguration $r1;
        org.powermock.core.classloader.ByteCodeFramework r2;

        r0 := @parameter0: java.lang.Class;

        r2 = staticinvoke <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework(java.lang.reflect.AnnotatedElement)>(r0);

        if r2 != null goto label1;

        $r1 = staticinvoke <org.powermock.configuration.GlobalConfiguration: org.powermock.configuration.PowerMockConfiguration powerMockConfiguration()>();

        r2 = virtualinvoke $r1.<org.powermock.configuration.PowerMockConfiguration: org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework()>();

     label1:
        return r2;
    }

    private static org.powermock.core.classloader.ByteCodeFramework getByteCodeFramework(java.lang.reflect.AnnotatedElement)
    {
        java.lang.reflect.AnnotatedElement r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.'annotation'.Annotation $r1, $r4, $r7, $r10;
        org.powermock.core.classloader.annotations.SuppressStaticInitializationFor $r2;
        org.powermock.core.classloader.ByteCodeFramework $r3, $r6, $r9, $r12;
        org.powermock.core.classloader.annotations.PrepareEverythingForTest $r5;
        org.powermock.core.classloader.annotations.PrepareOnlyThisForTest $r8;
        org.powermock.core.classloader.annotations.PrepareForTest $r11;

        r0 := @parameter0: java.lang.reflect.AnnotatedElement;

        $z0 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareForTest;");

        if $z0 == 0 goto label1;

        $r10 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareForTest;");

        $r11 = (org.powermock.core.classloader.annotations.PrepareForTest) $r10;

        $r12 = interfaceinvoke $r11.<org.powermock.core.classloader.annotations.PrepareForTest: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework()>();

        return $r12;

     label1:
        $z1 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareOnlyThisForTest;");

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareOnlyThisForTest;");

        $r8 = (org.powermock.core.classloader.annotations.PrepareOnlyThisForTest) $r7;

        $r9 = interfaceinvoke $r8.<org.powermock.core.classloader.annotations.PrepareOnlyThisForTest: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework()>();

        return $r9;

     label2:
        $z2 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareEverythingForTest;");

        if $z2 == 0 goto label3;

        $r4 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/PrepareEverythingForTest;");

        $r5 = (org.powermock.core.classloader.annotations.PrepareEverythingForTest) $r4;

        $r6 = interfaceinvoke $r5.<org.powermock.core.classloader.annotations.PrepareEverythingForTest: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework()>();

        return $r6;

     label3:
        $z3 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/SuppressStaticInitializationFor;");

        if $z3 == 0 goto label4;

        $r1 = interfaceinvoke r0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/powermock/core/classloader/annotations/SuppressStaticInitializationFor;");

        $r2 = (org.powermock.core.classloader.annotations.SuppressStaticInitializationFor) $r1;

        $r3 = interfaceinvoke $r2.<org.powermock.core.classloader.annotations.SuppressStaticInitializationFor: org.powermock.core.classloader.ByteCodeFramework byteCodeFramework()>();

        return $r3;

     label4:
        return null;
    }

    abstract org.powermock.core.classloader.MockClassLoader createClassloader(org.powermock.core.classloader.MockClassLoaderConfiguration, org.powermock.core.classloader.annotations.UseClassPathAdjuster);

    abstract org.powermock.core.transformers.MockTransformerChainFactory createTransformerChainFactory();

    void <init>(java.lang.String, int, org.powermock.core.classloader.ByteCodeFramework$1)
    {
        org.powermock.core.classloader.ByteCodeFramework r0;
        java.lang.String r1;
        int i0;
        org.powermock.core.classloader.ByteCodeFramework$1 r2;

        r0 := @this: org.powermock.core.classloader.ByteCodeFramework;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.powermock.core.classloader.ByteCodeFramework$1;

        specialinvoke r0.<org.powermock.core.classloader.ByteCodeFramework: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        org.powermock.core.classloader.ByteCodeFramework$1 $r0;
        org.powermock.core.classloader.ByteCodeFramework[] $r1;
        org.powermock.core.classloader.ByteCodeFramework $r2;

        $r0 = new org.powermock.core.classloader.ByteCodeFramework$1;

        specialinvoke $r0.<org.powermock.core.classloader.ByteCodeFramework$1: void <init>(java.lang.String,int)>("Javassist", 0);

        <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework Javassist> = $r0;

        $r1 = newarray (org.powermock.core.classloader.ByteCodeFramework)[1];

        $r2 = <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework Javassist>;

        $r1[0] = $r2;

        <org.powermock.core.classloader.ByteCodeFramework: org.powermock.core.classloader.ByteCodeFramework[] $VALUES> = $r1;

        return;
    }
}
