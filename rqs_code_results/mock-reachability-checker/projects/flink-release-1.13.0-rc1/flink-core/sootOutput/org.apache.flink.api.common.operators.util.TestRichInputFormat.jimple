public class org.apache.flink.api.common.operators.util.TestRichInputFormat extends org.apache.flink.api.common.io.GenericInputFormat implements org.apache.flink.api.common.io.NonParallelInput
{
    private static final long serialVersionUID;
    private static final int NUM;
    private static final java.lang.String[] NAMES;
    private int count;
    private boolean openCalled;
    private boolean closeCalled;

    public void <init>()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.GenericInputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count> = 0;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean openCalled> = 0;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean closeCalled> = 0;

        return;
    }

    public boolean reachedEnd() throws java.io.IOException
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        $i0 = r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count>;

        if $i0 < 5 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String nextRecord(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;
        java.lang.String r1, $r4, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r2, $r5, $r7, $r8, $r10;
        java.lang.String[] $r3;
        org.apache.flink.api.common.functions.RuntimeContext $r6, $r9;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count> = $i1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <org.apache.flink.api.common.operators.util.TestRichInputFormat: java.lang.String[] NAMES>;

        $i2 = r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count>;

        $i3 = $i2 - 1;

        $r4 = $r3[$i3];

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: org.apache.flink.api.common.functions.RuntimeContext getRuntimeContext()>();

        $i4 = interfaceinvoke $r6.<org.apache.flink.api.common.functions.RuntimeContext: int getIndexOfThisSubtask()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r9 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: org.apache.flink.api.common.functions.RuntimeContext getRuntimeContext()>();

        $i5 = interfaceinvoke $r9.<org.apache.flink.api.common.functions.RuntimeContext: int getNumberOfParallelSubtasks()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void reset()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: int count> = 0;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean openCalled> = 0;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean closeCalled> = 0;

        return;
    }

    public void openInputFormat()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean openCalled> = 1;

        return;
    }

    public void closeInputFormat()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean closeCalled> = 1;

        return;
    }

    public boolean hasBeenOpened()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        $z0 = r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean openCalled>;

        return $z0;
    }

    public boolean hasBeenClosed()
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        $z0 = r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: boolean closeCalled>;

        return $z0;
    }

    public volatile java.lang.Object nextRecord(java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.api.common.operators.util.TestRichInputFormat r0;
        java.lang.Object r1;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.TestRichInputFormat;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.operators.util.TestRichInputFormat: java.lang.String nextRecord(java.lang.String)>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.flink.api.common.operators.util.TestRichInputFormat: int NUM> = 5;

        <org.apache.flink.api.common.operators.util.TestRichInputFormat: long serialVersionUID> = 1L;

        $r0 = <org.apache.flink.api.common.operators.util.TestIOData: java.lang.String[] NAMES>;

        <org.apache.flink.api.common.operators.util.TestRichInputFormat: java.lang.String[] NAMES> = $r0;

        return;
    }
}
