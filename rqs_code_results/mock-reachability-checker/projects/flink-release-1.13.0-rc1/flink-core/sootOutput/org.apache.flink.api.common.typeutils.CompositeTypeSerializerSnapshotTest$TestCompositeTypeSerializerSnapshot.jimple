public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot
{
    private org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;");

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility getMockOuterSchemaCompatibility()>();

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility> = $r2;

        return;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3, r1);

        return $r2;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        return $r2;
    }

    protected void writeOuterSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility>;

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: int ordinal()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public void readOuterSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        int i0, $i1, $i4;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        long $l2, $l3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: int getCurrentOuterSnapshotVersion()>();

        $l3 = (long) $i1;

        $l2 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l2);

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility[] values()>();

        $i4 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r4 = $r3[$i4];

        r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility mockOuterSchemaCompatibility> = $r4;

        return;
    }

    protected org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility getMockOuterSchemaCompatibility()>();

        return $r2;
    }

    public int getCurrentOuterSnapshotVersion()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        return 1;
    }

    protected volatile org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility resolveOuterSchemaCompatibility(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)>($r2);

        return $r3;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer createOuterSerializerWithNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        return $r2;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer)>($r2);

        return $r3;
    }
}
