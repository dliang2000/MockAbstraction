public class org.apache.commons.lang3.SerializationUtils extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang3.SerializationUtils r0;

        r0 := @this: org.apache.commons.lang3.SerializationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.Serializable clone(java.io.Serializable)
    {
        java.io.Serializable r0, r22;
        byte[] r1;
        java.io.ByteArrayInputStream $r7;
        org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream $r8, r21;
        java.lang.Class $r9;
        java.lang.ClassLoader $r10;
        java.lang.Object $r11;
        java.io.IOException $r12, $r14, $r19;
        org.apache.commons.lang3.SerializationException $r13, $r15, $r17, $r20;
        java.lang.ClassNotFoundException $r16;
        java.lang.Throwable $r18;

        r0 := @parameter0: java.io.Serializable;

        if r0 != null goto label01;

        return null;

     label01:
        r1 = staticinvoke <org.apache.commons.lang3.SerializationUtils: byte[] serialize(java.io.Serializable)>(r0);

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r21 = null;

     label02:
        $r8 = new org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r8.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>($r7, $r10);

        r21 = $r8;

        $r11 = virtualinvoke $r8.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: java.lang.Object readObject()>();

        r22 = (java.io.Serializable) $r11;

     label03:
        if $r8 == null goto label04;

        virtualinvoke $r8.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

        $r20 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r20.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException on closing cloned object data InputStream.", $r19);

        throw $r20;

     label06:
        return r22;

     label07:
        $r16 := @caughtexception;

        $r17 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r17.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("ClassNotFoundException while reading cloned object data", $r16);

        throw $r17;

     label08:
        $r14 := @caughtexception;

        $r15 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r15.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException while reading cloned object data", $r14);

        throw $r15;

     label09:
        $r18 := @caughtexception;

     label10:
        if r21 == null goto label11;

        virtualinvoke r21.<org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r13.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.String,java.lang.Throwable)>("IOException on closing cloned object data InputStream.", $r12);

        throw $r13;

     label13:
        throw $r18;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.ClassNotFoundException from label02 to label03 with label07;
        catch java.io.IOException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    public static java.io.Serializable roundtrip(java.io.Serializable)
    {
        java.io.Serializable r0, $r3;
        byte[] $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.Serializable;

        $r1 = staticinvoke <org.apache.commons.lang3.SerializationUtils: byte[] serialize(java.io.Serializable)>(r0);

        $r2 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.lang.Object deserialize(byte[])>($r1);

        $r3 = (java.io.Serializable) $r2;

        return $r3;
    }

    public static void serialize(java.io.Serializable, java.io.OutputStream)
    {
        java.io.Serializable r0;
        java.io.OutputStream r1;
        java.io.ObjectOutputStream $r4, r11;
        java.lang.IllegalArgumentException $r5;
        java.lang.Throwable $r6;
        java.io.IOException $r7, $r8, $r10;
        org.apache.commons.lang3.SerializationException $r9;

        r0 := @parameter0: java.io.Serializable;

        r1 := @parameter1: java.io.OutputStream;

        if r1 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The OutputStream must not be null");

        throw $r5;

     label01:
        r11 = null;

     label02:
        $r4 = new java.io.ObjectOutputStream;

        specialinvoke $r4.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>(r1);

        r11 = $r4;

        virtualinvoke $r4.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r0);

     label03:
        if $r4 == null goto label04;

        virtualinvoke $r4.<java.io.ObjectOutputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r7 := @caughtexception;

        goto label12;

     label06:
        $r8 := @caughtexception;

        $r9 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r9.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label07:
        $r6 := @caughtexception;

     label08:
        if r11 == null goto label09;

        virtualinvoke r11.<java.io.ObjectOutputStream: void close()>();

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        throw $r6;

     label12:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.io.IOException from label08 to label09 with label10;
        catch java.lang.Throwable from label06 to label08 with label07;
    }

    public static byte[] serialize(java.io.Serializable)
    {
        java.io.Serializable r0;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.Serializable;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(512);

        staticinvoke <org.apache.commons.lang3.SerializationUtils: void serialize(java.io.Serializable,java.io.OutputStream)>(r0, $r2);

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static java.lang.Object deserialize(java.io.InputStream)
    {
        java.io.InputStream r0;
        java.io.ObjectInputStream $r5, r16;
        java.lang.IllegalArgumentException $r6;
        java.lang.ClassNotFoundException $r7;
        org.apache.commons.lang3.SerializationException $r8, $r10, $r13;
        java.io.IOException $r9, $r11, $r15;
        java.lang.ClassCastException $r12;
        java.lang.Throwable $r14;
        java.lang.Object r17;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The InputStream must not be null");

        throw $r6;

     label01:
        r16 = null;

     label02:
        $r5 = new java.io.ObjectInputStream;

        specialinvoke $r5.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(r0);

        r16 = $r5;

        r17 = virtualinvoke $r5.<java.io.ObjectInputStream: java.lang.Object readObject()>();

     label03:
        if $r5 == null goto label04;

        virtualinvoke $r5.<java.io.ObjectInputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r15 := @caughtexception;

     label06:
        return r17;

     label07:
        $r12 := @caughtexception;

        $r13 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r13.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label08:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r8.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label09:
        $r9 := @caughtexception;

        $r10 = new org.apache.commons.lang3.SerializationException;

        specialinvoke $r10.<org.apache.commons.lang3.SerializationException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label10:
        $r14 := @caughtexception;

     label11:
        if r16 == null goto label12;

        virtualinvoke r16.<java.io.ObjectInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

     label14:
        throw $r14;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.ClassCastException from label02 to label03 with label07;
        catch java.lang.ClassNotFoundException from label02 to label03 with label08;
        catch java.io.IOException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Throwable from label07 to label11 with label10;
    }

    public static java.lang.Object deserialize(byte[])
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The byte[] must not be null");

        throw $r3;

     label1:
        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r2 = staticinvoke <org.apache.commons.lang3.SerializationUtils: java.lang.Object deserialize(java.io.InputStream)>($r1);

        return $r2;
    }
}
