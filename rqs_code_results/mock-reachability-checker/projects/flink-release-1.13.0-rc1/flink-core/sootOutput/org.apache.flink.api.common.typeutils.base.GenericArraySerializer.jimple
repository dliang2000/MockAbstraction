public final class org.apache.flink.api.common.typeutils.base.GenericArraySerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final java.lang.Class componentClass;
    private final org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer;
    private transient java.lang.Object[] EMPTY;

    public void <init>(java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Class r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r5;

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer> = $r6;

        return;
    }

    public java.lang.Class getComponentClass()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        return $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getComponentSerializer()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.base.GenericArraySerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r2, $r3;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        r1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer duplicate()>();

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        if r1 != $r3 goto label1;

        return r0;

     label1:
        $r4 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer)>($r5, r1);

        return $r4;
    }

    public java.lang.Object[] createInstance()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] $r1, $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] EMPTY>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] create(int)>(0);

        r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] EMPTY> = $r3;

     label1:
        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] EMPTY>;

        return $r2;
    }

    public java.lang.Object[] copy(java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] r1, r3, $r6;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.lang.Object r4, $r5;
        boolean $z0;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean isImmutableType()>();

        if $z0 == 0 goto label1;

        $i2 = lengthof r1;

        $r6 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i2);

        return $r6;

     label1:
        $i0 = lengthof r1;

        r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] create(int)>($i0);

        i3 = 0;

     label2:
        $i1 = lengthof r3;

        if i3 >= $i1 goto label4;

        r4 = r1[i3];

        if r4 == null goto label3;

        $r5 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object copy(java.lang.Object)>(r4);

        r3[i3] = $r5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return r3;
    }

    public java.lang.Object[] copy(java.lang.Object[], java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] r1, r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] copy(java.lang.Object[])>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        return -1;
    }

    public void serialize(java.lang.Object[], org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Object r3;
        int $i0, $i1, i2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $i0 = lengthof r1;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        r3 = r1[i2];

        if r3 != null goto label2;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        goto label3;

     label2:
        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r2);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public java.lang.Object[] deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i1;
        java.lang.Object[] r2;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] create(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label2;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        $r4 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        r2[i1] = $r4;

        goto label3;

     label2:
        r2[i1] = null;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return r2;
    }

    public java.lang.Object[] deserialize(java.lang.Object[], org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        int i0, i1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(z0);

        if z0 == 0 goto label2;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializer: void copy(org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r1, r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private final java.lang.Object[] create(int)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        int i0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, i0);

        $r3 = (java.lang.Object[]) $r2;

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Class $r1;
        int $i0, $i1, $i2, $i3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializer: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5, $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.common.typeutils.base.GenericArraySerializer) r1;

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        $r3 = r2.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        $r5 = r2.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.TypeSerializer componentSerializer>;

        $z1 = virtualinvoke $r6.<org.apache.flink.api.common.typeutils.TypeSerializer: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Serializer ");

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Class componentClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = new org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.base.GenericArraySerializer)>(r0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.base.GenericArraySerializerSnapshot snapshotConfiguration()>();

        return $r1;
    }

    public volatile java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.Object[] $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (java.lang.Object[]) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] deserialize(java.lang.Object[],org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] deserialize(org.apache.flink.core.memory.DataInputView)>(r1);

        return $r2;
    }

    public volatile void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (java.lang.Object[]) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: void serialize(java.lang.Object[],org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object r1, r2;
        java.lang.Object[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Object[]) r1;

        $r3 = (java.lang.Object[]) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] copy(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Object[]) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] copy(java.lang.Object[])>($r2);

        return $r3;
    }

    public volatile java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: java.lang.Object[] createInstance()>();

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.base.GenericArraySerializer r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.GenericArraySerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.GenericArraySerializer: org.apache.flink.api.common.typeutils.base.GenericArraySerializer duplicate()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.GenericArraySerializer: long serialVersionUID> = 1L;

        return;
    }
}
