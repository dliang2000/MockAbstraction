class org.mockito.internal.listeners.VerificationStartedNotifier$Event extends java.lang.Object implements org.mockito.listeners.VerificationStartedEvent
{
    private final org.mockito.MockingDetails originalMockingDetails;
    private java.lang.Object mock;

    public void <init>(org.mockito.MockingDetails)
    {
        org.mockito.internal.listeners.VerificationStartedNotifier$Event r0;
        org.mockito.MockingDetails r1;
        java.lang.Object $r2;

        r0 := @this: org.mockito.internal.listeners.VerificationStartedNotifier$Event;

        r1 := @parameter0: org.mockito.MockingDetails;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: org.mockito.MockingDetails originalMockingDetails> = r1;

        $r2 = interfaceinvoke r1.<org.mockito.MockingDetails: java.lang.Object getMock()>();

        r0.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: java.lang.Object mock> = $r2;

        return;
    }

    public void setMock(java.lang.Object)
    {
        org.mockito.internal.listeners.VerificationStartedNotifier$Event r0;
        java.lang.Object r1;
        org.mockito.MockingDetails r2, $r4;
        org.mockito.mock.MockCreationSettings r3;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r7, $r10;
        org.mockito.exceptions.base.MockitoException $r11, $r12;

        r0 := @this: org.mockito.internal.listeners.VerificationStartedNotifier$Event;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r12 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>("VerificationStartedEvent.setMock", "null parameter.");

        throw $r12;

     label1:
        r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockingDetails mockingDetails(java.lang.Object)>(r1);

        $z0 = interfaceinvoke r2.<org.mockito.MockingDetails: boolean isMock()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parameter which is not a Mockito mock.\n  Received parameter: ");

        $r7 = staticinvoke <org.mockito.internal.matchers.text.ValuePrinter: java.lang.String print(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException methodDoesNotAcceptParameter(java.lang.String,java.lang.String)>("VerificationStartedEvent.setMock", $r10);

        throw $r11;

     label2:
        $r4 = r0.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: org.mockito.MockingDetails originalMockingDetails>;

        r3 = interfaceinvoke $r4.<org.mockito.MockingDetails: org.mockito.mock.MockCreationSettings getMockCreationSettings()>();

        staticinvoke <org.mockito.internal.listeners.VerificationStartedNotifier: void assertCompatibleTypes(java.lang.Object,org.mockito.mock.MockCreationSettings)>(r1, r3);

        r0.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: java.lang.Object mock> = r1;

        return;
    }

    public java.lang.Object getMock()
    {
        org.mockito.internal.listeners.VerificationStartedNotifier$Event r0;
        java.lang.Object $r1;

        r0 := @this: org.mockito.internal.listeners.VerificationStartedNotifier$Event;

        $r1 = r0.<org.mockito.internal.listeners.VerificationStartedNotifier$Event: java.lang.Object mock>;

        return $r1;
    }
}
