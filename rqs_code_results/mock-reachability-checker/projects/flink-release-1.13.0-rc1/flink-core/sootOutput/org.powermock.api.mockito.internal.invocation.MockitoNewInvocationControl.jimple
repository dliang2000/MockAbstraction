public class org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl extends java.lang.Object implements org.powermock.core.spi.NewInvocationControl
{
    private final org.powermock.core.spi.support.InvocationSubstitute substitute;

    public void <init>(org.powermock.core.spi.support.InvocationSubstitute)
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        org.powermock.core.spi.support.InvocationSubstitute r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: org.powermock.core.spi.support.InvocationSubstitute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: substitute cannot be null.");

        throw $r2;

     label1:
        r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute> = r1;

        return;
    }

    public java.lang.Object invoke(java.lang.Class, java.lang.Object[], java.lang.Class[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Class r1;
        java.lang.Class[] r2;
        java.lang.reflect.Constructor r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.Object[] r4, r9;
        boolean $z0;
        org.powermock.core.spi.support.InvocationSubstitute $r5;
        java.lang.Object $r6, $r7, r10;
        org.mockito.exceptions.base.MockitoAssertionError $r8;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: java.lang.Class;

        r9 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r1, r2);

        $z0 = virtualinvoke r3.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label2;

        $i1 = lengthof r9;

        $i2 = $i1 - 1;

        r10 = r9[$i2];

        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r10);

        r4 = r9;

        $i3 = lengthof r9;

        $i4 = $i3 + i0;

        $i5 = $i4 - 1;

        r9 = newarray (java.lang.Object)[$i5];

        $i6 = lengthof r4;

        $i7 = $i6 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r9, 0, $i7);

        $i8 = lengthof r4;

        i10 = $i8 - 1;

        i11 = 0;

     label1:
        $i9 = lengthof r9;

        if i10 >= $i9 goto label2;

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r10, i11);

        r9[i10] = $r7;

        i10 = i10 + 1;

        i11 = i11 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        $r6 = interfaceinvoke $r5.<org.powermock.core.spi.support.InvocationSubstitute: java.lang.Object performSubstitutionLogic(java.lang.Object[])>(r9);

     label3:
        return $r6;

     label4:
        $r8 := @caughtexception;

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void throwAssertionErrorForNewSubstitutionFailure(java.lang.AssertionError,java.lang.Class)>($r8, r1);

        return null;

        catch org.mockito.exceptions.base.MockitoAssertionError from label2 to label3 with label4;
    }

    public transient org.mockito.stubbing.OngoingStubbing expectSubstitutionLogic(java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Object[] r1;
        org.powermock.core.spi.support.InvocationSubstitute $r2;
        java.lang.Object $r3;
        org.mockito.stubbing.OngoingStubbing $r4;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        $r3 = interfaceinvoke $r2.<org.powermock.core.spi.support.InvocationSubstitute: java.lang.Object performSubstitutionLogic(java.lang.Object[])>(r1);

        $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3);

        return $r4;
    }

    public org.powermock.core.spi.support.InvocationSubstitute getSubstitute()
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        org.powermock.core.spi.support.InvocationSubstitute $r1;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        $r1 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        return $r1;
    }

    public synchronized transient java.lang.Object replay(java.lang.Object[])
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Object[] r1;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        return null;
    }

    public synchronized void verify(org.mockito.verification.VerificationMode)
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        org.mockito.verification.VerificationMode r1;
        org.powermock.core.spi.support.InvocationSubstitute $r2;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: org.mockito.verification.VerificationMode;

        $r2 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        staticinvoke <org.mockito.Mockito: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>($r2, r1);

        return;
    }

    public synchronized transient java.lang.Object reset(java.lang.Object[])
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Object[] r1;
        org.powermock.core.spi.support.InvocationSubstitute[] $r2;
        org.powermock.core.spi.support.InvocationSubstitute $r3;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = newarray (org.powermock.core.spi.support.InvocationSubstitute)[1];

        $r3 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        $r2[0] = $r3;

        staticinvoke <org.mockito.Mockito: void reset(java.lang.Object[])>($r2);

        return null;
    }

    public void verifyNoMoreInteractions()
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Object[] $r2;
        org.powermock.core.spi.support.InvocationSubstitute $r3;
        org.mockito.exceptions.base.MockitoAssertionError $r4;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

     label1:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.powermock.core.spi.support.InvocationSubstitute substitute>;

        $r2[0] = $r3;

        staticinvoke <org.mockito.Mockito: void verifyNoMoreInteractions(java.lang.Object[])>($r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <org.powermock.api.mockito.internal.invocation.InvocationControlAssertionError: void updateErrorMessageForVerifyNoMoreInteractions(java.lang.AssertionError)>($r4);

        throw $r4;

     label4:
        return;

        catch org.mockito.exceptions.base.MockitoAssertionError from label1 to label2 with label3;
    }

    public volatile java.lang.Object expectSubstitutionLogic(java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl r0;
        java.lang.Object[] r1;
        org.mockito.stubbing.OngoingStubbing $r2;

        r0 := @this: org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: org.mockito.stubbing.OngoingStubbing expectSubstitutionLogic(java.lang.Object[])>(r1);

        return $r2;
    }
}
