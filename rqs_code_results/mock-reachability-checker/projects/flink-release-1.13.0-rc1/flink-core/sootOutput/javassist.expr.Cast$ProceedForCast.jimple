class javassist.expr.Cast$ProceedForCast extends java.lang.Object implements javassist.compiler.ProceedHandler
{
    int index;
    javassist.CtClass retType;

    void <init>(int, javassist.CtClass)
    {
        javassist.expr.Cast$ProceedForCast r0;
        int i0;
        javassist.CtClass r1;

        r0 := @this: javassist.expr.Cast$ProceedForCast;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.CtClass;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.expr.Cast$ProceedForCast: int index> = i0;

        r0.<javassist.expr.Cast$ProceedForCast: javassist.CtClass retType> = r1;

        return;
    }

    public void doit(javassist.compiler.JvstCodeGen, javassist.bytecode.Bytecode, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.Cast$ProceedForCast r0;
        javassist.compiler.JvstCodeGen r1;
        javassist.bytecode.Bytecode r2;
        javassist.compiler.ast.ASTList r3;
        int $i0, $i1;
        java.lang.String[] $r4;
        int[] $r5, $r6;
        javassist.CtClass $r7;
        javassist.compiler.CompileError $r8;

        r0 := @this: javassist.expr.Cast$ProceedForCast;

        r1 := @parameter0: javassist.compiler.JvstCodeGen;

        r2 := @parameter1: javassist.bytecode.Bytecode;

        r3 := @parameter2: javassist.compiler.ast.ASTList;

        $i0 = virtualinvoke r1.<javassist.compiler.JvstCodeGen: int getMethodArgsLength(javassist.compiler.ast.ASTList)>(r3);

        if $i0 == 1 goto label1;

        $r8 = new javassist.compiler.CompileError;

        specialinvoke $r8.<javassist.compiler.CompileError: void <init>(java.lang.String)>("$proceed() cannot take more than one parameter for cast");

        throw $r8;

     label1:
        $r6 = newarray (int)[1];

        $r5 = newarray (int)[1];

        $r4 = newarray (java.lang.String)[1];

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])>(r3, $r6, $r5, $r4);

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addOpcode(int)>(192);

        $i1 = r0.<javassist.expr.Cast$ProceedForCast: int index>;

        virtualinvoke r2.<javassist.bytecode.Bytecode: void addIndex(int)>($i1);

        $r7 = r0.<javassist.expr.Cast$ProceedForCast: javassist.CtClass retType>;

        virtualinvoke r1.<javassist.compiler.JvstCodeGen: void setType(javassist.CtClass)>($r7);

        return;
    }

    public void setReturnType(javassist.compiler.JvstTypeChecker, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.expr.Cast$ProceedForCast r0;
        javassist.compiler.JvstTypeChecker r1;
        javassist.compiler.ast.ASTList r2;
        java.lang.String[] $r3;
        int[] $r4, $r5;
        javassist.CtClass $r6;

        r0 := @this: javassist.expr.Cast$ProceedForCast;

        r1 := @parameter0: javassist.compiler.JvstTypeChecker;

        r2 := @parameter1: javassist.compiler.ast.ASTList;

        $r5 = newarray (int)[1];

        $r4 = newarray (int)[1];

        $r3 = newarray (java.lang.String)[1];

        virtualinvoke r1.<javassist.compiler.JvstTypeChecker: void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])>(r2, $r5, $r4, $r3);

        $r6 = r0.<javassist.expr.Cast$ProceedForCast: javassist.CtClass retType>;

        virtualinvoke r1.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass)>($r6);

        return;
    }
}
