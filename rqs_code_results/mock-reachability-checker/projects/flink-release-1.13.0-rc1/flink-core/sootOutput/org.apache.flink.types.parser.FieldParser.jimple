public abstract class org.apache.flink.types.parser.FieldParser extends java.lang.Object
{
    private java.nio.charset.Charset charset;
    private org.apache.flink.types.parser.FieldParser$ParseErrorState errorState;
    private static final java.util.Map PARSERS;

    public void <init>()
    {
        org.apache.flink.types.parser.FieldParser r0;
        java.nio.charset.Charset $r1;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r2;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r0.<org.apache.flink.types.parser.FieldParser: java.nio.charset.Charset charset> = $r1;

        $r2 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NONE>;

        r0.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState errorState> = $r2;

        return;
    }

    public int resetErrorStateAndParse(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.FieldParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        virtualinvoke r0.<org.apache.flink.types.parser.FieldParser: void resetParserState()>();

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.FieldParser: int parseField(byte[],int,int,byte[],java.lang.Object)>(r1, i0, i1, r2, r3);

        return $i2;
    }

    protected abstract int parseField(byte[], int, int, byte[], java.lang.Object);

    protected void resetParserState()
    {
        org.apache.flink.types.parser.FieldParser r0;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r1;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        $r1 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NONE>;

        r0.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState errorState> = $r1;

        return;
    }

    public abstract java.lang.Object getLastResult();

    public abstract java.lang.Object createValue();

    public static final boolean delimiterNext(byte[], int, byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, i5;
        byte $b3, $b4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i5 = 0;

     label1:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label3;

        $b4 = r1[i5];

        $i2 = i0 + i5;

        $b3 = r0[$i2];

        if $b4 == $b3 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static final boolean endsWithDelimiter(byte[], int, byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i10;
        byte $b8, $b9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        if i0 >= $i2 goto label1;

        return 0;

     label1:
        i10 = 0;

     label2:
        $i3 = lengthof r1;

        if i10 >= $i3 goto label4;

        $b9 = r1[i10];

        $i4 = lengthof r1;

        $i5 = i0 - $i4;

        $i6 = $i5 + 1;

        $i7 = $i6 + i10;

        $b8 = r0[$i7];

        if $b9 == $b8 goto label3;

        return 0;

     label3:
        i10 = i10 + 1;

        goto label2;

     label4:
        return 1;
    }

    protected void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)
    {
        org.apache.flink.types.parser.FieldParser r0;
        org.apache.flink.types.parser.FieldParser$ParseErrorState r1;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        r1 := @parameter0: org.apache.flink.types.parser.FieldParser$ParseErrorState;

        r0.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState errorState> = r1;

        return;
    }

    public org.apache.flink.types.parser.FieldParser$ParseErrorState getErrorState()
    {
        org.apache.flink.types.parser.FieldParser r0;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r1;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        $r1 = r0.<org.apache.flink.types.parser.FieldParser: org.apache.flink.types.parser.FieldParser$ParseErrorState errorState>;

        return $r1;
    }

    protected final int nextStringEndPos(byte[], int, int, byte[])
    {
        org.apache.flink.types.parser.FieldParser r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, i5;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i5 = i0;

        $i3 = lengthof r2;

        $i4 = i1 - $i3;

        i2 = $i4 + 1;

     label1:
        if i5 >= i1 goto label3;

        if i5 >= i2 goto label2;

        $z0 = staticinvoke <org.apache.flink.types.parser.FieldParser: boolean delimiterNext(byte[],int,byte[])>(r1, i5, r2);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if i5 != i0 goto label4;

        $r3 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.FieldParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r3);

        return -1;

     label4:
        return i5;
    }

    protected static final int nextStringLength(byte[], int, int, char)
    {
        byte[] r0;
        int i0, i1, $i4, i6;
        char c2;
        byte b3, $b5;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        if i1 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid input: Empty string");

        throw $r1;

     label1:
        i6 = 0;

        b3 = (byte) c2;

     label2:
        if i6 >= i1 goto label3;

        $i4 = i0 + i6;

        $b5 = r0[$i4];

        if $b5 == b3 goto label3;

        i6 = i6 + 1;

        goto label2;

     label3:
        return i6;
    }

    public java.nio.charset.Charset getCharset()
    {
        org.apache.flink.types.parser.FieldParser r0;
        java.nio.charset.Charset $r1;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        $r1 = r0.<org.apache.flink.types.parser.FieldParser: java.nio.charset.Charset charset>;

        return $r1;
    }

    public void setCharset(java.nio.charset.Charset)
    {
        org.apache.flink.types.parser.FieldParser r0;
        java.nio.charset.Charset r1;

        r0 := @this: org.apache.flink.types.parser.FieldParser;

        r1 := @parameter0: java.nio.charset.Charset;

        r0.<org.apache.flink.types.parser.FieldParser: java.nio.charset.Charset charset> = r1;

        return;
    }

    public static java.lang.Class getParserForType(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        $r3 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.Class) $r4;

        if r1 != null goto label1;

        return null;

     label1:
        return r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS> = $r0;

        $r1 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", class "Lorg/apache/flink/types/parser/ByteParser;");

        $r3 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", class "Lorg/apache/flink/types/parser/ShortParser;");

        $r5 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", class "Lorg/apache/flink/types/parser/IntParser;");

        $r7 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", class "Lorg/apache/flink/types/parser/LongParser;");

        $r9 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", class "Lorg/apache/flink/types/parser/StringParser;");

        $r11 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", class "Lorg/apache/flink/types/parser/FloatParser;");

        $r13 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", class "Lorg/apache/flink/types/parser/DoubleParser;");

        $r15 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", class "Lorg/apache/flink/types/parser/BooleanParser;");

        $r17 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/math/BigDecimal;", class "Lorg/apache/flink/types/parser/BigDecParser;");

        $r19 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/math/BigInteger;", class "Lorg/apache/flink/types/parser/BigIntParser;");

        $r21 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/ByteValue;", class "Lorg/apache/flink/types/parser/ByteValueParser;");

        $r23 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/ShortValue;", class "Lorg/apache/flink/types/parser/ShortValueParser;");

        $r25 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/IntValue;", class "Lorg/apache/flink/types/parser/IntValueParser;");

        $r27 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/LongValue;", class "Lorg/apache/flink/types/parser/LongValueParser;");

        $r29 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/StringValue;", class "Lorg/apache/flink/types/parser/StringValueParser;");

        $r31 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/FloatValue;", class "Lorg/apache/flink/types/parser/FloatValueParser;");

        $r33 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/DoubleValue;", class "Lorg/apache/flink/types/parser/DoubleValueParser;");

        $r35 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/apache/flink/types/BooleanValue;", class "Lorg/apache/flink/types/parser/BooleanValueParser;");

        $r37 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/sql/Time;", class "Lorg/apache/flink/types/parser/SqlTimeParser;");

        $r39 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/sql/Date;", class "Lorg/apache/flink/types/parser/SqlDateParser;");

        $r41 = <org.apache.flink.types.parser.FieldParser: java.util.Map PARSERS>;

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/sql/Timestamp;", class "Lorg/apache/flink/types/parser/SqlTimestampParser;");

        return;
    }
}
