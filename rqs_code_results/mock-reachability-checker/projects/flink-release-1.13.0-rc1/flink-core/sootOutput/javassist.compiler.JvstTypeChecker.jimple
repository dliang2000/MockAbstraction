public class javassist.compiler.JvstTypeChecker extends javassist.compiler.TypeChecker
{
    private javassist.compiler.JvstCodeGen codeGen;

    public void <init>(javassist.CtClass, javassist.ClassPool, javassist.compiler.JvstCodeGen)
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.CtClass r1;
        javassist.ClassPool r2;
        javassist.compiler.JvstCodeGen r3;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.ClassPool;

        r3 := @parameter2: javassist.compiler.JvstCodeGen;

        specialinvoke r0.<javassist.compiler.TypeChecker: void <init>(javassist.CtClass,javassist.ClassPool)>(r1, r2);

        r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen> = r3;

        return;
    }

    public void addNullIfVoid()
    {
        javassist.compiler.JvstTypeChecker r0;
        int $i0;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        $i0 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        if $i0 != 344 goto label1;

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = "java/lang/Object";

     label1:
        return;
    }

    public void atMember(javassist.compiler.ast.Member) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.Member r1;
        java.lang.String r2, $r4;
        javassist.compiler.JvstCodeGen $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Member;

        r2 = virtualinvoke r1.<javassist.compiler.ast.Member: java.lang.String get()>();

        $r3 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r4 = $r3.<javassist.compiler.JvstCodeGen: java.lang.String paramArrayName>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 1;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = "java/lang/Object";

        goto label5;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("$sig");

        if $z1 == 0 goto label2;

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 1;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = "java/lang/Class";

        goto label5;

     label2:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("$type");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("$class");

        if $z3 == 0 goto label4;

     label3:
        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = "java/lang/Class";

        goto label5;

     label4:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atMember(javassist.compiler.ast.Member)>(r1);

     label5:
        return;
    }

    protected void atFieldAssign(javassist.compiler.ast.Expr, int, javassist.compiler.ast.ASTree, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.Expr r1;
        int i0, i1, i2;
        javassist.compiler.ast.ASTree r2, r3;
        javassist.CtClass[] r4;
        boolean $z0, $z1;
        javassist.compiler.ast.Member $r5;
        java.lang.String $r6, $r8;
        javassist.compiler.JvstCodeGen $r7, $r9;
        javassist.CtClass $r10;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.compiler.ast.ASTree;

        r3 := @parameter3: javassist.compiler.ast.ASTree;

        $z0 = r2 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label4;

        $r5 = (javassist.compiler.ast.Member) r2;

        $r6 = virtualinvoke $r5.<javassist.compiler.ast.Member: java.lang.String get()>();

        $r7 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r8 = $r7.<javassist.compiler.JvstCodeGen: java.lang.String paramArrayName>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label4;

        virtualinvoke r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $r9 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        r4 = $r9.<javassist.compiler.JvstCodeGen: javassist.CtClass[] paramTypeList>;

        if r4 != null goto label1;

        return;

     label1:
        i1 = lengthof r4;

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $r10 = r4[i2];

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void compileUnwrapValue(javassist.CtClass)>($r10);

        i2 = i2 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r1, i0, r2, r3);

     label5:
        return;
    }

    public void atCastExpr(javassist.compiler.ast.CastExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.CastExpr r1;
        javassist.compiler.ast.ASTList r2, $r5;
        javassist.compiler.ast.ASTree r3;
        java.lang.String r4, $r8;
        int $i0;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Symbol $r6;
        javassist.compiler.JvstCodeGen $r7;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CastExpr;

        r2 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: javassist.compiler.ast.ASTList getClassName()>();

        if r2 == null goto label2;

        $i0 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: int getArrayDim()>();

        if $i0 != 0 goto label2;

        r3 = virtualinvoke r2.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        $z0 = r3 instanceof javassist.compiler.ast.Symbol;

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r2.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        if $r5 != null goto label2;

        $r6 = (javassist.compiler.ast.Symbol) r3;

        r4 = virtualinvoke $r6.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $r7 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r8 = $r7.<javassist.compiler.JvstCodeGen: java.lang.String returnCastName>;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void atCastToRtype(javassist.compiler.ast.CastExpr)>(r1);

        return;

     label1:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("$w");

        if $z2 == 0 goto label2;

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void atCastToWrapper(javassist.compiler.ast.CastExpr)>(r1);

        return;

     label2:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atCastExpr(javassist.compiler.ast.CastExpr)>(r1);

        return;
    }

    protected void atCastToRtype(javassist.compiler.ast.CastExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.CastExpr r1;
        javassist.CtClass r2;
        javassist.CtPrimitiveType r3;
        int i0, $i1, $i2, $i3;
        javassist.compiler.JvstCodeGen $r4;
        javassist.compiler.ast.ASTree $r5;
        boolean $z0, $z1;
        char $c4;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CastExpr;

        $r4 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        r2 = $r4.<javassist.compiler.JvstCodeGen: javassist.CtClass returnType>;

        $r5 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: javassist.compiler.ast.ASTree getOprand()>();

        virtualinvoke $r5.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i1 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        if $i1 == 344 goto label1;

        $i2 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        $z0 = staticinvoke <javassist.compiler.CodeGen: boolean isRefType(int)>($i2);

        if $z0 != 0 goto label1;

        $i3 = r0.<javassist.compiler.JvstTypeChecker: int arrayDim>;

        if $i3 <= 0 goto label2;

     label1:
        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void compileUnwrapValue(javassist.CtClass)>(r2);

        goto label3;

     label2:
        $z1 = r2 instanceof javassist.CtPrimitiveType;

        if $z1 == 0 goto label3;

        r3 = (javassist.CtPrimitiveType) r2;

        $c4 = virtualinvoke r3.<javassist.CtPrimitiveType: char getDescriptor()>();

        i0 = staticinvoke <javassist.compiler.MemberResolver: int descToType(char)>($c4);

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = i0;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = null;

     label3:
        return;
    }

    protected void atCastToWrapper(javassist.compiler.ast.CastExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.CastExpr r1;
        javassist.CtClass r2;
        javassist.compiler.ast.ASTree $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.String $r4;
        javassist.compiler.MemberResolver $r5;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CastExpr;

        $r3 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: javassist.compiler.ast.ASTree getOprand()>();

        virtualinvoke $r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i0 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        $z0 = staticinvoke <javassist.compiler.CodeGen: boolean isRefType(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = r0.<javassist.compiler.JvstTypeChecker: int arrayDim>;

        if $i1 <= 0 goto label2;

     label1:
        return;

     label2:
        $r5 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.MemberResolver resolver>;

        $i3 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        $i2 = r0.<javassist.compiler.JvstTypeChecker: int arrayDim>;

        $r4 = r0.<javassist.compiler.JvstTypeChecker: java.lang.String className>;

        r2 = virtualinvoke $r5.<javassist.compiler.MemberResolver: javassist.CtClass lookupClass(int,int,java.lang.String)>($i3, $i2, $r4);

        $z1 = r2 instanceof javassist.CtPrimitiveType;

        if $z1 == 0 goto label3;

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = "java/lang/Object";

     label3:
        return;
    }

    public void atCallExpr(javassist.compiler.ast.CallExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.CallExpr r1;
        javassist.compiler.ast.ASTree r2, $r7, $r13;
        java.lang.String r3, $r10;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Member $r4;
        javassist.compiler.JvstCodeGen $r5, $r9, $r11;
        javassist.compiler.ProceedHandler $r6, $r12;
        javassist.compiler.ast.ASTList $r8, $r14;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CallExpr;

        r2 = virtualinvoke r1.<javassist.compiler.ast.CallExpr: javassist.compiler.ast.ASTree oprand1()>();

        $z0 = r2 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label2;

        $r4 = (javassist.compiler.ast.Member) r2;

        r3 = virtualinvoke $r4.<javassist.compiler.ast.Member: java.lang.String get()>();

        $r5 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r6 = $r5.<javassist.compiler.JvstCodeGen: javassist.compiler.ProceedHandler procHandler>;

        if $r6 == null goto label1;

        $r9 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r10 = $r9.<javassist.compiler.JvstCodeGen: java.lang.String proceedName>;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label1;

        $r11 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r12 = $r11.<javassist.compiler.JvstCodeGen: javassist.compiler.ProceedHandler procHandler>;

        $r13 = virtualinvoke r1.<javassist.compiler.ast.CallExpr: javassist.compiler.ast.ASTree oprand2()>();

        $r14 = (javassist.compiler.ast.ASTList) $r13;

        interfaceinvoke $r12.<javassist.compiler.ProceedHandler: void setReturnType(javassist.compiler.JvstTypeChecker,javassist.compiler.ast.ASTList)>(r0, $r14);

        return;

     label1:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("$cflow");

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<javassist.compiler.ast.CallExpr: javassist.compiler.ast.ASTree oprand2()>();

        $r8 = (javassist.compiler.ast.ASTList) $r7;

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void atCflow(javassist.compiler.ast.ASTList)>($r8);

        return;

     label2:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atCallExpr(javassist.compiler.ast.CallExpr)>(r1);

        return;
    }

    protected void atCflow(javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.ASTList r1;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTList;

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 324;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = null;

        return;
    }

    public boolean isParamListName(javassist.compiler.ast.ASTList)
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.ASTList r1, $r5;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.JvstCodeGen $r3, $r8;
        javassist.CtClass[] $r4;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Member $r6;
        java.lang.String $r7, $r9;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTList;

        $r3 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r4 = $r3.<javassist.compiler.JvstCodeGen: javassist.CtClass[] paramTypeList>;

        if $r4 == null goto label3;

        if r1 == null goto label3;

        $r5 = virtualinvoke r1.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        if $r5 != null goto label3;

        r2 = virtualinvoke r1.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        $z0 = r2 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label1;

        $r6 = (javassist.compiler.ast.Member) r2;

        $r7 = virtualinvoke $r6.<javassist.compiler.ast.Member: java.lang.String get()>();

        $r8 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r9 = $r8.<javassist.compiler.JvstCodeGen: java.lang.String paramListName>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    public int getMethodArgsLength(javassist.compiler.ast.ASTList)
    {
        javassist.compiler.JvstTypeChecker r0;
        java.lang.String r1, $r5;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.JvstCodeGen $r3, $r6, $r8;
        boolean $z0, $z1;
        javassist.compiler.ast.Member $r4;
        javassist.CtClass[] $r7, $r9;
        int $i0, i1;
        javassist.compiler.ast.ASTList r10;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r10 := @parameter0: javassist.compiler.ast.ASTList;

        $r3 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        r1 = $r3.<javassist.compiler.JvstCodeGen: java.lang.String paramListName>;

        i1 = 0;

     label1:
        if r10 == null goto label4;

        r2 = virtualinvoke r10.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        $z0 = r2 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label2;

        $r4 = (javassist.compiler.ast.Member) r2;

        $r5 = virtualinvoke $r4.<javassist.compiler.ast.Member: java.lang.String get()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r7 = $r6.<javassist.compiler.JvstCodeGen: javassist.CtClass[] paramTypeList>;

        if $r7 == null goto label3;

        $r8 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        $r9 = $r8.<javassist.compiler.JvstCodeGen: javassist.CtClass[] paramTypeList>;

        $i0 = lengthof $r9;

        i1 = i1 + $i0;

        goto label3;

     label2:
        i1 = i1 + 1;

     label3:
        r10 = virtualinvoke r10.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        goto label1;

     label4:
        return i1;
    }

    public void atMethodArgs(javassist.compiler.ast.ASTList, int[], int[], java.lang.String[]) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        int[] r1, r2;
        java.lang.String[] r3;
        javassist.CtClass[] r4;
        java.lang.String r5, $r10, $r12, $r13;
        javassist.compiler.ast.ASTree r6;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        javassist.CtClass r7;
        javassist.compiler.JvstCodeGen $r8, $r9;
        boolean $z0, $z1;
        javassist.compiler.ast.Member $r11;
        javassist.compiler.ast.ASTList r14;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r14 := @parameter0: javassist.compiler.ast.ASTList;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String[];

        $r8 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        r4 = $r8.<javassist.compiler.JvstCodeGen: javassist.CtClass[] paramTypeList>;

        $r9 = r0.<javassist.compiler.JvstTypeChecker: javassist.compiler.JvstCodeGen codeGen>;

        r5 = $r9.<javassist.compiler.JvstCodeGen: java.lang.String paramListName>;

        i5 = 0;

     label1:
        if r14 == null goto label6;

        r6 = virtualinvoke r14.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        $z0 = r6 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label4;

        $r11 = (javassist.compiler.ast.Member) r6;

        $r12 = virtualinvoke $r11.<javassist.compiler.ast.Member: java.lang.String get()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label4;

        if r4 == null goto label5;

        i0 = lengthof r4;

        i6 = 0;

     label2:
        if i6 >= i0 goto label3;

        r7 = r4[i6];

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass)>(r7);

        $i3 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        r1[i5] = $i3;

        $i4 = r0.<javassist.compiler.JvstTypeChecker: int arrayDim>;

        r2[i5] = $i4;

        $r13 = r0.<javassist.compiler.JvstTypeChecker: java.lang.String className>;

        r3[i5] = $r13;

        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        virtualinvoke r6.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i1 = r0.<javassist.compiler.JvstTypeChecker: int exprType>;

        r1[i5] = $i1;

        $i2 = r0.<javassist.compiler.JvstTypeChecker: int arrayDim>;

        r2[i5] = $i2;

        $r10 = r0.<javassist.compiler.JvstTypeChecker: java.lang.String className>;

        r3[i5] = $r10;

        i5 = i5 + 1;

     label5:
        r14 = virtualinvoke r14.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        goto label1;

     label6:
        return;
    }

    void compileInvokeSpecial(javassist.compiler.ast.ASTree, java.lang.String, java.lang.String, java.lang.String, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.compiler.ast.ASTree r1;
        java.lang.String r2, r3, r4;
        javassist.compiler.ast.ASTList r5;
        int i0;
        java.lang.String[] $r6;
        int[] $r7, $r8;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: javassist.compiler.ast.ASTList;

        virtualinvoke r1.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        i0 = virtualinvoke r0.<javassist.compiler.JvstTypeChecker: int getMethodArgsLength(javassist.compiler.ast.ASTList)>(r5);

        $r8 = newarray (int)[i0];

        $r7 = newarray (int)[i0];

        $r6 = newarray (java.lang.String)[i0];

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])>(r5, $r8, $r7, $r6);

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void setReturnType(java.lang.String)>(r4);

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void addNullIfVoid()>();

        return;
    }

    protected void compileUnwrapValue(javassist.CtClass) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.CtClass r1, $r2;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.CtClass;

        $r2 = <javassist.CtClass: javassist.CtClass voidType>;

        if r1 != $r2 goto label1;

        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void addNullIfVoid()>();

        goto label2;

     label1:
        virtualinvoke r0.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass)>(r1);

     label2:
        return;
    }

    public void setType(javassist.CtClass) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.CtClass r1;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.CtClass;

        specialinvoke r0.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass,int)>(r1, 0);

        return;
    }

    private void setType(javassist.CtClass, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.JvstTypeChecker r0;
        javassist.CtClass r1, $r4;
        int i0, $i1, $i3;
        boolean $z0, $z1;
        java.lang.String $r2, $r3, $r9, $r11;
        char $c2;
        javassist.NotFoundException $r5;
        javassist.compiler.CompileError $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        javassist.CtPrimitiveType r12;

        r0 := @this: javassist.compiler.JvstTypeChecker;

        r1 := @parameter0: javassist.CtClass;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r1.<javassist.CtClass: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        r12 = (javassist.CtPrimitiveType) r1;

        $c2 = virtualinvoke r12.<javassist.CtPrimitiveType: char getDescriptor()>();

        $i3 = staticinvoke <javassist.compiler.MemberResolver: int descToType(char)>($c2);

        r0.<javassist.compiler.JvstTypeChecker: int exprType> = $i3;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = i0;

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = null;

        goto label6;

     label1:
        $z1 = virtualinvoke r1.<javassist.CtClass: boolean isArray()>();

        if $z1 == 0 goto label5;

     label2:
        $r4 = virtualinvoke r1.<javassist.CtClass: javassist.CtClass getComponentType()>();

        $i1 = i0 + 1;

        specialinvoke r0.<javassist.compiler.JvstTypeChecker: void setType(javassist.CtClass,int)>($r4, $i1);

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        $r6 = new javassist.compiler.CompileError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("undefined type: ");

        $r9 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javassist.compiler.CompileError: void <init>(java.lang.String)>($r11);

        throw $r6;

     label5:
        r0.<javassist.compiler.JvstTypeChecker: int exprType> = 307;

        r0.<javassist.compiler.JvstTypeChecker: int arrayDim> = i0;

        $r2 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        $r3 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String javaToJvmName(java.lang.String)>($r2);

        r0.<javassist.compiler.JvstTypeChecker: java.lang.String className> = $r3;

     label6:
        return;

        catch javassist.NotFoundException from label2 to label3 with label4;
    }
}
