public class org.powermock.reflect.internal.proxy.ProxyFrameworks extends java.lang.Object
{
    private static final org.powermock.reflect.internal.proxy.UnproxiedTypeFactory UNPROXIED_TYPE_FACTORY;

    public void <init>()
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;
        java.lang.Class r1, $r5;
        boolean $z0, $z1;
        org.powermock.reflect.internal.proxy.UnproxiedTypeFactory $r2, $r4, $r8;
        org.powermock.reflect.internal.proxy.UnproxiedType $r3, $r7, $r10;
        java.lang.Class[] $r6, $r9;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = specialinvoke r0.<org.powermock.reflect.internal.proxy.ProxyFrameworks: boolean isJavaProxy(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        $r8 = <org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedTypeFactory UNPROXIED_TYPE_FACTORY>;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r10 = virtualinvoke $r8.<org.powermock.reflect.internal.proxy.UnproxiedTypeFactory: org.powermock.reflect.internal.proxy.UnproxiedType createFromInterfaces(java.lang.Class[])>($r9);

        return $r10;

     label2:
        $z1 = specialinvoke r0.<org.powermock.reflect.internal.proxy.ProxyFrameworks: boolean isCglibProxyClass(java.lang.Class)>(r1);

        if $z1 == 0 goto label3;

        $r4 = <org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedTypeFactory UNPROXIED_TYPE_FACTORY>;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r7 = virtualinvoke $r4.<org.powermock.reflect.internal.proxy.UnproxiedTypeFactory: org.powermock.reflect.internal.proxy.UnproxiedType createFromSuperclassAndInterfaces(java.lang.Class,java.lang.Class[])>($r5, $r6);

        return $r7;

     label3:
        $r2 = <org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedTypeFactory UNPROXIED_TYPE_FACTORY>;

        $r3 = virtualinvoke $r2.<org.powermock.reflect.internal.proxy.UnproxiedTypeFactory: org.powermock.reflect.internal.proxy.UnproxiedType createFromType(java.lang.Class)>(r1);

        return $r3;
    }

    public org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Object)
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        org.powermock.reflect.internal.proxy.UnproxiedType $r3;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)>($r2);

        return $r3;
    }

    private boolean isJavaProxy(java.lang.Class)
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;
        java.lang.Class r1;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        r1 := @parameter0: java.lang.Class;

        if r1 == null goto label1;

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private boolean isCglibProxyClass(java.lang.Class)
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;
        java.lang.Class r1;
        java.lang.reflect.Method[] r2;
        int i0, i1;
        java.lang.reflect.Method r4;
        boolean $z0;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r2[i1];

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.proxy.ProxyFrameworks: boolean isCglibCallbackMethod(java.lang.reflect.Method)>(r4);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private boolean isCglibCallbackMethod(java.lang.reflect.Method)
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks r0;
        java.lang.reflect.Method r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1;
        java.lang.Class[] $r4;
        int $i0;

        r0 := @this: org.powermock.reflect.internal.proxy.ProxyFrameworks;

        r1 := @parameter0: java.lang.reflect.Method;

        $r2 = "CGLIB$SET_THREAD_CALLBACKS";

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        if $i0 != 1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static void <clinit>()
    {
        org.powermock.reflect.internal.proxy.UnproxiedTypeFactory $r0;

        $r0 = new org.powermock.reflect.internal.proxy.UnproxiedTypeFactory;

        specialinvoke $r0.<org.powermock.reflect.internal.proxy.UnproxiedTypeFactory: void <init>()>();

        <org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedTypeFactory UNPROXIED_TYPE_FACTORY> = $r0;

        return;
    }
}
