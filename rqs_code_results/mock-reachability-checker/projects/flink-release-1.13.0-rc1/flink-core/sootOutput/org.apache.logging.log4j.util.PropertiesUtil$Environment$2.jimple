class org.apache.logging.log4j.util.PropertiesUtil$Environment$2 extends java.lang.Object implements org.apache.logging.log4j.util.BiConsumer
{
    final org.apache.logging.log4j.util.PropertySource val$source;
    final org.apache.logging.log4j.util.PropertiesUtil$Environment this$0;

    void <init>(org.apache.logging.log4j.util.PropertiesUtil$Environment, org.apache.logging.log4j.util.PropertySource)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment$2 r0;
        org.apache.logging.log4j.util.PropertiesUtil$Environment r1;
        org.apache.logging.log4j.util.PropertySource r2;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment$2;

        r1 := @parameter0: org.apache.logging.log4j.util.PropertiesUtil$Environment;

        r2 := @parameter1: org.apache.logging.log4j.util.PropertySource;

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertiesUtil$Environment this$0> = r1;

        r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertySource val$source> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void accept(java.lang.String, java.lang.String)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment$2 r0;
        java.lang.String r1, r2;
        java.util.List r3;
        org.apache.logging.log4j.util.PropertiesUtil$Environment $r4, $r7, $r12, $r15;
        java.util.Map $r5, $r8, $r13, $r16;
        boolean $z0;
        org.apache.logging.log4j.util.PropertySource $r9, $r17;
        java.lang.CharSequence $r10, $r19;
        java.util.Set $r18;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment$2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label2;

        if r2 == null goto label2;

        $r4 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertiesUtil$Environment this$0>;

        $r5 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map access$400(org.apache.logging.log4j.util.PropertiesUtil$Environment)>($r4);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        r3 = staticinvoke <org.apache.logging.log4j.util.PropertySource$Util: java.util.List tokenize(java.lang.CharSequence)>(r1);

        $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r15 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertiesUtil$Environment this$0>;

        $r16 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map access$500(org.apache.logging.log4j.util.PropertiesUtil$Environment)>($r15);

        $r17 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertySource val$source>;

        $r18 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1);

        $r19 = interfaceinvoke $r17.<org.apache.logging.log4j.util.PropertySource: java.lang.CharSequence getNormalForm(java.lang.Iterable)>($r18);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r2);

        goto label2;

     label1:
        $r7 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertiesUtil$Environment this$0>;

        $r8 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map access$500(org.apache.logging.log4j.util.PropertiesUtil$Environment)>($r7);

        $r9 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertySource val$source>;

        $r10 = interfaceinvoke $r9.<org.apache.logging.log4j.util.PropertySource: java.lang.CharSequence getNormalForm(java.lang.Iterable)>(r3);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

        $r12 = r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: org.apache.logging.log4j.util.PropertiesUtil$Environment this$0>;

        $r13 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil$Environment: java.util.Map access$600(org.apache.logging.log4j.util.PropertiesUtil$Environment)>($r12);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

     label2:
        return;
    }

    public volatile void accept(java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.util.PropertiesUtil$Environment$2 r0;
        java.lang.Object r1, r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.logging.log4j.util.PropertiesUtil$Environment$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil$Environment$2: void accept(java.lang.String,java.lang.String)>($r4, $r3);

        return;
    }
}
