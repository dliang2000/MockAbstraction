class javassist.util.proxy.DefineClassHelper$Java9 extends javassist.util.proxy.DefineClassHelper$Helper
{
    private final java.lang.Object stack;
    private final java.lang.reflect.Method getCallerClass;
    private final javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe sunMiscUnsafe;

    void <init>()
    {
        javassist.util.proxy.DefineClassHelper$Java9 r0;
        javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe $r1;
        java.lang.Class[] $r2, $r8;
        java.lang.reflect.Method $r3, $r9;
        java.lang.Object[] $r4, $r5;
        java.lang.Object $r6, $r7;
        java.lang.Throwable $r10;
        java.lang.RuntimeException $r11;
        java.lang.ClassNotFoundException $r12;
        java.lang.Class r13, r15;

        r0 := @this: javassist.util.proxy.DefineClassHelper$Java9;

        specialinvoke r0.<javassist.util.proxy.DefineClassHelper$Helper: void <init>(javassist.util.proxy.DefineClassHelper$1)>(null);

        $r1 = specialinvoke r0.<javassist.util.proxy.DefineClassHelper$Java9: javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe getReferencedUnsafe()>();

        r0.<javassist.util.proxy.DefineClassHelper$Java9: javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe sunMiscUnsafe> = $r1;

        r13 = null;

     label1:
        r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.StackWalker");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        if r13 == null goto label8;

     label5:
        r15 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.StackWalker$Option");

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = r15;

        $r3 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r2);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r15.<java.lang.Class: java.lang.Object[] getEnumConstants()>();

        $r6 = $r5[0];

        $r4[0] = $r6;

        $r7 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.Object stack> = $r7;

        $r8 = newarray (java.lang.Class)[0];

        $r9 = virtualinvoke r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCallerClass", $r8);

        r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.reflect.Method getCallerClass> = $r9;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("cannot initialize", $r10);

        throw $r11;

     label8:
        r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.Object stack> = null;

        r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.reflect.Method getCallerClass> = null;

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private final javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe getReferencedUnsafe()
    {
        javassist.util.proxy.DefineClassHelper$Java9 r0;
        java.util.List r1;
        java.lang.invoke.MethodHandle r2;
        javassist.util.proxy.DefineClassHelper$Helper $r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r7, $r11, $r13;
        java.lang.invoke.MethodHandles$Lookup $r6;
        java.lang.reflect.Method $r8, $r12;
        javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe $r9;
        java.lang.Object[] $r10;
        java.lang.Class $r14;
        java.lang.IllegalAccessError $r15;
        java.lang.Throwable $r16;
        java.lang.RuntimeException $r17, $r19;
        java.lang.Exception $r18;
        javassist.util.proxy.SecurityActions$TheUnsafe r21;

        r0 := @this: javassist.util.proxy.DefineClassHelper$Java9;

     label1:
        $r3 = staticinvoke <javassist.util.proxy.DefineClassHelper: javassist.util.proxy.DefineClassHelper$Helper access$400()>();

        if $r3 == null goto label2;

        $r12 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.reflect.Method getCallerClass>;

        $r11 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.Object stack>;

        $r10 = newarray (java.lang.Object)[0];

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r11, $r10);

        $r14 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r13 == $r14 goto label2;

        $r15 = new java.lang.IllegalAccessError;

        specialinvoke $r15.<java.lang.IllegalAccessError: void <init>(java.lang.String)>("Access denied for caller.");

        throw $r15;

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("cannot initialize", $r18);

        throw $r19;

     label4:
        r21 = staticinvoke <javassist.util.proxy.SecurityActions: javassist.util.proxy.SecurityActions$TheUnsafe getSunMiscUnsafeAnonymously()>();

        $r4 = r21.<javassist.util.proxy.SecurityActions$TheUnsafe: java.util.Map methods>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("defineClass");

        r1 = (java.util.List) $r5;

        if null != r1 goto label6;

     label5:
        return null;

     label6:
        $r6 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r8 = (java.lang.reflect.Method) $r7;

        r2 = virtualinvoke $r6.<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)>($r8);

        $r9 = new javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe;

        specialinvoke $r9.<javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe: void <init>(javassist.util.proxy.DefineClassHelper$Java9,javassist.util.proxy.SecurityActions$TheUnsafe,java.lang.invoke.MethodHandle)>(r0, r21, r2);

     label7:
        return $r9;

     label8:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("cannot initialize", $r16);

        throw $r17;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    java.lang.Class defineClass(java.lang.String, byte[], int, int, java.lang.Class, java.lang.ClassLoader, java.security.ProtectionDomain) throws java.lang.ClassFormatError
    {
        javassist.util.proxy.DefineClassHelper$Java9 r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.lang.Class r3, $r12;
        java.lang.ClassLoader r4;
        java.security.ProtectionDomain r5;
        java.lang.Object[] $r7;
        java.lang.Object $r8, $r10;
        java.lang.reflect.Method $r9;
        javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe $r11;
        java.lang.IllegalAccessError $r13;
        java.lang.Exception $r14;
        java.lang.RuntimeException $r15;

        r0 := @this: javassist.util.proxy.DefineClassHelper$Java9;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.Class;

        r4 := @parameter5: java.lang.ClassLoader;

        r5 := @parameter6: java.security.ProtectionDomain;

     label1:
        $r9 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.reflect.Method getCallerClass>;

        $r8 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.Object stack>;

        $r7 = newarray (java.lang.Object)[0];

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r7);

        if $r10 == class "Ljavassist/util/proxy/DefineClassHelper;" goto label2;

        $r13 = new java.lang.IllegalAccessError;

        specialinvoke $r13.<java.lang.IllegalAccessError: void <init>(java.lang.String)>("Access denied for caller.");

        throw $r13;

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("cannot initialize", $r14);

        throw $r15;

     label4:
        $r11 = r0.<javassist.util.proxy.DefineClassHelper$Java9: javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe sunMiscUnsafe>;

        $r12 = virtualinvoke $r11.<javassist.util.proxy.DefineClassHelper$Java9$ReferencedUnsafe: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)>(r1, r2, i0, i1, r4, r5);

        return $r12;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.lang.Object access$100(javassist.util.proxy.DefineClassHelper$Java9)
    {
        javassist.util.proxy.DefineClassHelper$Java9 r0;
        java.lang.Object $r1;

        r0 := @parameter0: javassist.util.proxy.DefineClassHelper$Java9;

        $r1 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.Object stack>;

        return $r1;
    }

    static java.lang.reflect.Method access$200(javassist.util.proxy.DefineClassHelper$Java9)
    {
        javassist.util.proxy.DefineClassHelper$Java9 r0;
        java.lang.reflect.Method $r1;

        r0 := @parameter0: javassist.util.proxy.DefineClassHelper$Java9;

        $r1 = r0.<javassist.util.proxy.DefineClassHelper$Java9: java.lang.reflect.Method getCallerClass>;

        return $r1;
    }
}
