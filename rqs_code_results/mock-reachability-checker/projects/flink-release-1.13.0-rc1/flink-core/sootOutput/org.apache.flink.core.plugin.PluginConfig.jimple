public class org.apache.flink.core.plugin.PluginConfig extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;
    private final java.util.Optional pluginsPath;
    private final java.lang.String[] alwaysParentFirstPatterns;

    private void <init>(java.util.Optional, java.lang.String[])
    {
        org.apache.flink.core.plugin.PluginConfig r0;
        java.util.Optional r1;
        java.lang.String[] r2;

        r0 := @this: org.apache.flink.core.plugin.PluginConfig;

        r1 := @parameter0: java.util.Optional;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.plugin.PluginConfig: java.util.Optional pluginsPath> = r1;

        r0.<org.apache.flink.core.plugin.PluginConfig: java.lang.String[] alwaysParentFirstPatterns> = r2;

        return;
    }

    public java.util.Optional getPluginsPath()
    {
        org.apache.flink.core.plugin.PluginConfig r0;
        java.util.Optional $r1;

        r0 := @this: org.apache.flink.core.plugin.PluginConfig;

        $r1 = r0.<org.apache.flink.core.plugin.PluginConfig: java.util.Optional pluginsPath>;

        return $r1;
    }

    public java.lang.String[] getAlwaysParentFirstPatterns()
    {
        org.apache.flink.core.plugin.PluginConfig r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.core.plugin.PluginConfig;

        $r1 = r0.<org.apache.flink.core.plugin.PluginConfig: java.lang.String[] alwaysParentFirstPatterns>;

        return $r1;
    }

    public static org.apache.flink.core.plugin.PluginConfig fromConfiguration(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.core.plugin.PluginConfig $r1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;
        java.lang.String[] $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = new org.apache.flink.core.plugin.PluginConfig;

        $r2 = staticinvoke <org.apache.flink.core.plugin.PluginConfig: java.util.Optional getPluginsDir()>();

        $r3 = staticinvoke <org.apache.flink.core.plugin.PluginConfig$toPath__535: java.util.function.Function bootstrap$()>();

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <org.apache.flink.configuration.CoreOptions: java.lang.String[] getPluginParentFirstLoaderPatterns(org.apache.flink.configuration.Configuration)>(r0);

        specialinvoke $r1.<org.apache.flink.core.plugin.PluginConfig: void <init>(java.util.Optional,java.lang.String[])>($r4, $r5);

        return $r1;
    }

    public static java.util.Optional getPluginsDir()
    {
        java.lang.String r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.io.File $r4;
        boolean $z0;
        java.util.Optional $r5, $r7;
        org.slf4j.Logger $r6;

        $r2 = staticinvoke <java.lang.System: java.util.Map getenv()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>("FLINK_PLUGINS_DIR", "plugins");

        r0 = (java.lang.String) $r3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $z0 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $r6 = <org.apache.flink.core.plugin.PluginConfig: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("The plugins directory [{}] does not exist.", $r4);

        $r7 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r7;

     label1:
        $r5 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r4);

        return $r5;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/core/plugin/PluginConfig;");

        <org.apache.flink.core.plugin.PluginConfig: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
