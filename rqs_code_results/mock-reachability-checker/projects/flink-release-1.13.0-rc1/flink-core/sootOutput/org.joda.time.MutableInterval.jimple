public class org.joda.time.MutableInterval extends org.joda.time.base.BaseInterval implements org.joda.time.ReadWritableInterval, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;

    public static org.joda.time.MutableInterval parse(java.lang.String)
    {
        java.lang.String r0;
        org.joda.time.MutableInterval $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.joda.time.MutableInterval;

        specialinvoke $r1.<org.joda.time.MutableInterval: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public void <init>()
    {
        org.joda.time.MutableInterval r0;

        r0 := @this: org.joda.time.MutableInterval;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(0L, 0L, null);

        return;
    }

    public void <init>(long, long)
    {
        org.joda.time.MutableInterval r0;
        long l0, l1;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, null);

        return;
    }

    public void <init>(long, long, org.joda.time.Chronology)
    {
        org.joda.time.MutableInterval r0;
        long l0, l1;
        org.joda.time.Chronology r1;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, r1);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1, r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadableDuration)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadableDuration r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableDuration;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadableDuration)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableDuration, org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableDuration r1;
        org.joda.time.ReadableInstant r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableDuration,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadableInstant, org.joda.time.ReadablePeriod)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1;
        org.joda.time.ReadablePeriod r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadablePeriod;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadableInstant,org.joda.time.ReadablePeriod)>(r1, r2);

        return;
    }

    public void <init>(org.joda.time.ReadablePeriod, org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadablePeriod r1;
        org.joda.time.ReadableInstant r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(org.joda.time.ReadablePeriod,org.joda.time.ReadableInstant)>(r1, r2);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.joda.time.MutableInterval r0;
        java.lang.Object r1;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, null);

        return;
    }

    public void <init>(java.lang.Object, org.joda.time.Chronology)
    {
        org.joda.time.MutableInterval r0;
        java.lang.Object r1;
        org.joda.time.Chronology r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.BaseInterval: void <init>(java.lang.Object,org.joda.time.Chronology)>(r1, r2);

        return;
    }

    public void setInterval(long, long)
    {
        org.joda.time.MutableInterval r0;
        long l0, l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, l1, $r1);

        return;
    }

    public void setInterval(org.joda.time.ReadableInterval)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInterval r1;
        long l0, l1;
        org.joda.time.Chronology r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInterval;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Interval must not be null");

        throw $r3;

     label1:
        l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>();

        l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>();

        r2 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, l1, r2);

        return;
    }

    public void setInterval(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1, r2;
        long l0, l1, l2;
        org.joda.time.Chronology r3;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        r2 := @parameter1: org.joda.time.ReadableInstant;

        if r1 != null goto label1;

        if r2 != null goto label1;

        l1 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        virtualinvoke r0.<org.joda.time.MutableInterval: void setInterval(long,long)>(l1, l1);

        goto label2;

     label1:
        l2 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2);

        r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l2, l0, r3);

     label2:
        return;
    }

    public void setChronology(org.joda.time.Chronology)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.Chronology r1;
        long $l0, $l1;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.Chronology;

        $l0 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>($l0, $l1, r1);

        return;
    }

    public void setStartMillis(long)
    {
        org.joda.time.MutableInterval r0;
        long l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, $l1, $r1);

        return;
    }

    public void setStart(org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1;
        long l0, $l1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, $l1, $r2);

        return;
    }

    public void setEndMillis(long)
    {
        org.joda.time.MutableInterval r0;
        long l0, $l1;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>($l1, l0, $r1);

        return;
    }

    public void setEnd(org.joda.time.ReadableInstant)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableInstant r1;
        long l0, $l1;
        org.joda.time.Chronology $r2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $r2 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>($l1, l0, $r2);

        return;
    }

    public void setDurationAfterStart(long)
    {
        org.joda.time.MutableInterval r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, l0);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setEndMillis(long)>($l2);

        return;
    }

    public void setDurationBeforeEnd(long)
    {
        org.joda.time.MutableInterval r0;
        long l0, $l1, $l2, $l3;

        r0 := @this: org.joda.time.MutableInterval;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        $l2 = neg l0;

        $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l3);

        return;
    }

    public void setDurationAfterStart(org.joda.time.ReadableDuration)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableDuration r1;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r1);

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, l0);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setEndMillis(long)>($l2);

        return;
    }

    public void setDurationBeforeEnd(org.joda.time.ReadableDuration)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadableDuration r1;
        long l0, $l1, $l2, $l3;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadableDuration;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getDurationMillis(org.joda.time.ReadableDuration)>(r1);

        $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        $l2 = neg l0;

        $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>($l1, $l2);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l3);

        return;
    }

    public void setPeriodAfterStart(org.joda.time.ReadablePeriod)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadablePeriod r1;
        org.joda.time.Chronology $r2;
        long $l0, $l1, $l2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        if r1 != null goto label1;

        $l2 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        virtualinvoke r0.<org.joda.time.MutableInterval: void setEndMillis(long)>($l2);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l0, 1);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setEndMillis(long)>($l1);

     label2:
        return;
    }

    public void setPeriodBeforeEnd(org.joda.time.ReadablePeriod)
    {
        org.joda.time.MutableInterval r0;
        org.joda.time.ReadablePeriod r1;
        org.joda.time.Chronology $r2;
        long $l0, $l1, $l2;

        r0 := @this: org.joda.time.MutableInterval;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        if r1 != null goto label1;

        $l2 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l2);

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.MutableInterval: org.joda.time.Chronology getChronology()>();

        $l0 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>();

        $l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l0, -1);

        virtualinvoke r0.<org.joda.time.MutableInterval: void setStartMillis(long)>($l1);

     label2:
        return;
    }

    public org.joda.time.MutableInterval copy()
    {
        org.joda.time.MutableInterval r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.joda.time.MutableInterval;

        $r1 = virtualinvoke r0.<org.joda.time.MutableInterval: java.lang.Object clone()>();

        $r2 = (org.joda.time.MutableInterval) $r1;

        return $r2;
    }

    public java.lang.Object clone()
    {
        org.joda.time.MutableInterval r0;
        java.lang.Object $r2;
        java.lang.CloneNotSupportedException $r3;
        java.lang.InternalError $r4;

        r0 := @this: org.joda.time.MutableInterval;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.InternalError;

        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.String)>("Clone error");

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.joda.time.MutableInterval: long serialVersionUID> = -5982824024992428470L;

        return;
    }
}
