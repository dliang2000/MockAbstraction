public final class org.apache.flink.core.plugin.PluginUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.flink.core.plugin.PluginUtils r0;
        java.lang.AssertionError $r1;

        r0 := @this: org.apache.flink.core.plugin.PluginUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Singleton class.");

        throw $r1;
    }

    public static org.apache.flink.core.plugin.PluginManager createPluginManagerFromRootFolder(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.core.plugin.PluginConfig $r1;
        org.apache.flink.core.plugin.PluginManager $r2;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = staticinvoke <org.apache.flink.core.plugin.PluginConfig: org.apache.flink.core.plugin.PluginConfig fromConfiguration(org.apache.flink.configuration.Configuration)>(r0);

        $r2 = staticinvoke <org.apache.flink.core.plugin.PluginUtils: org.apache.flink.core.plugin.PluginManager createPluginManagerFromRootFolder(org.apache.flink.core.plugin.PluginConfig)>($r1);

        return $r2;
    }

    private static org.apache.flink.core.plugin.PluginManager createPluginManagerFromRootFolder(org.apache.flink.core.plugin.PluginConfig)
    {
        org.apache.flink.core.plugin.PluginConfig r0;
        java.util.Optional $r1, $r6;
        boolean $z0;
        org.apache.flink.core.plugin.DefaultPluginManager $r2, $r9;
        java.util.List $r3;
        java.lang.String[] $r4, $r10;
        org.apache.flink.core.plugin.DirectoryBasedPluginFinder $r5;
        java.lang.Object $r7;
        java.nio.file.Path $r8;
        java.io.IOException $r11;
        org.apache.flink.util.FlinkRuntimeException $r12;
        java.util.Collection r13;

        r0 := @parameter0: org.apache.flink.core.plugin.PluginConfig;

        $r1 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginConfig: java.util.Optional getPluginsPath()>();

        $z0 = virtualinvoke $r1.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label4;

     label1:
        $r5 = new org.apache.flink.core.plugin.DirectoryBasedPluginFinder;

        $r6 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginConfig: java.util.Optional getPluginsPath()>();

        $r7 = virtualinvoke $r6.<java.util.Optional: java.lang.Object get()>();

        $r8 = (java.nio.file.Path) $r7;

        specialinvoke $r5.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: void <init>(java.nio.file.Path)>($r8);

        r13 = virtualinvoke $r5.<org.apache.flink.core.plugin.DirectoryBasedPluginFinder: java.util.Collection findPlugins()>();

        $r9 = new org.apache.flink.core.plugin.DefaultPluginManager;

        $r10 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginConfig: java.lang.String[] getAlwaysParentFirstPatterns()>();

        specialinvoke $r9.<org.apache.flink.core.plugin.DefaultPluginManager: void <init>(java.util.Collection,java.lang.String[])>(r13, $r10);

     label2:
        return $r9;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.flink.util.FlinkRuntimeException;

        specialinvoke $r12.<org.apache.flink.util.FlinkRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Exception when trying to initialize plugin system.", $r11);

        throw $r12;

     label4:
        $r2 = new org.apache.flink.core.plugin.DefaultPluginManager;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke r0.<org.apache.flink.core.plugin.PluginConfig: java.lang.String[] getAlwaysParentFirstPatterns()>();

        specialinvoke $r2.<org.apache.flink.core.plugin.DefaultPluginManager: void <init>(java.util.Collection,java.lang.String[])>($r3, $r4);

        return $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
