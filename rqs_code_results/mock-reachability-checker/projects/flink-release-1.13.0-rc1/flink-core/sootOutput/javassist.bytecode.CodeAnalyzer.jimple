class javassist.bytecode.CodeAnalyzer extends java.lang.Object implements javassist.bytecode.Opcode
{
    private javassist.bytecode.ConstPool constPool;
    private javassist.bytecode.CodeAttribute codeAttr;

    public void <init>(javassist.bytecode.CodeAttribute)
    {
        javassist.bytecode.CodeAnalyzer r0;
        javassist.bytecode.CodeAttribute r1;
        javassist.bytecode.ConstPool $r2;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.CodeAttribute codeAttr> = r1;

        $r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool> = $r2;

        return;
    }

    public int computeMaxStack() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAnalyzer r0;
        javassist.bytecode.CodeIterator r1;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        int[] r2;
        javassist.bytecode.CodeAttribute $r3, $r4, $r6;
        javassist.bytecode.ConstPool $r5;
        boolean z0;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        $r3 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.CodeAttribute codeAttr>;

        r1 = virtualinvoke $r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        i0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        r2 = newarray (int)[i0];

        $r4 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.CodeAttribute codeAttr>;

        $r5 = virtualinvoke $r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool> = $r5;

        $r6 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.CodeAttribute codeAttr>;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void initStack(int[],javassist.bytecode.CodeAttribute)>(r2, $r6);

     label1:
        z0 = 0;

        i4 = 0;

     label2:
        if i4 >= i0 goto label4;

        $i3 = r2[i4];

        if $i3 >= 0 goto label3;

        z0 = 1;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void visitBytecode(javassist.bytecode.CodeIterator,int[],int)>(r1, r2, i4);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        if z0 != 0 goto label1;

        i5 = 1;

        i6 = 0;

     label5:
        if i6 >= i0 goto label7;

        $i2 = r2[i6];

        if $i2 <= i5 goto label6;

        i5 = r2[i6];

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        $i1 = i5 - 1;

        return $i1;
    }

    private void initStack(int[], javassist.bytecode.CodeAttribute)
    {
        javassist.bytecode.CodeAnalyzer r0;
        int[] r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.ExceptionTable r3;
        int i0, $i1, i2;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        r1 := @parameter0: int[];

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        r1[0] = -1;

        r3 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        if r3 == null goto label2;

        i0 = virtualinvoke r3.<javassist.bytecode.ExceptionTable: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = virtualinvoke r3.<javassist.bytecode.ExceptionTable: int handlerPc(int)>(i2);

        r1[$i1] = -2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void visitBytecode(javassist.bytecode.CodeIterator, int[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAnalyzer r0;
        javassist.bytecode.CodeIterator r1;
        int[] r2, r3;
        int i0, i1, $i2, i3, i4, i5;
        boolean $z0, $z1, $z2;
        javassist.bytecode.BadBytecode $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        r1 := @parameter0: javassist.bytecode.CodeIterator;

        r2 := @parameter1: int[];

        i3 := @parameter2: int;

        i0 = lengthof r2;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i3);

        $i2 = r2[i3];

        i4 = neg $i2;

        r3 = newarray (int)[1];

        r3[0] = -1;

     label1:
        $z0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        i5 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        r2[i5] = i4;

        i1 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>(i5);

        i4 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: int visitInst(int,javassist.bytecode.CodeIterator,int,int)>(i1, r1, i5, i4);

        if i4 >= 1 goto label2;

        $r4 = new javassist.bytecode.BadBytecode;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stack underflow at ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $z1 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: boolean processBranch(int,javassist.bytecode.CodeIterator,int,int,int[],int,int[])>(i1, r1, i5, i0, r2, i4, r3);

        if $z1 == 0 goto label3;

        goto label7;

     label3:
        $z2 = staticinvoke <javassist.bytecode.CodeAnalyzer: boolean isEnd(int)>(i1);

        if $z2 == 0 goto label4;

        goto label7;

     label4:
        if i1 == 168 goto label5;

        if i1 != 201 goto label6;

     label5:
        i4 = i4 + -1;

     label6:
        goto label1;

     label7:
        return;
    }

    private boolean processBranch(int, javassist.bytecode.CodeIterator, int, int, int[], int, int[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAnalyzer r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45;
        javassist.bytecode.CodeIterator r1;
        int[] r2, r3;
        javassist.bytecode.BadBytecode $r4, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r10, $r17;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: int[];

        i3 := @parameter5: int;

        r3 := @parameter6: int[];

        if 153 > i0 goto label01;

        if i0 <= 166 goto label02;

     label01:
        if i0 == 198 goto label02;

        if i0 != 199 goto label03;

     label02:
        $i29 = i1 + 1;

        $i30 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i29);

        i31 = i1 + $i30;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i31, i2, r2, i3);

        goto label20;

     label03:
        lookupswitch(i0)
        {
            case 167: goto label04;
            case 168: goto label06;
            case 169: goto label11;
            case 170: goto label14;
            case 171: goto label14;
            case 200: goto label05;
            case 201: goto label06;
            default: goto label20;
        };

     label04:
        $i27 = i1 + 1;

        $i28 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i27);

        i32 = i1 + $i28;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i32, i2, r2, i3);

        return 1;

     label05:
        $i5 = i1 + 1;

        $i6 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i5);

        i33 = i1 + $i6;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i33, i2, r2, i3);

        return 1;

     label06:
        if i0 != 168 goto label07;

        $i25 = i1 + 1;

        $i26 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s16bitAt(int)>($i25);

        i34 = i1 + $i26;

        goto label08;

     label07:
        $i20 = i1 + 1;

        $i21 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i20);

        i34 = i1 + $i21;

     label08:
        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i34, i2, r2, i3);

        $i22 = r3[0];

        if $i22 >= 0 goto label09;

        r3[0] = i3;

        return 0;

     label09:
        $i23 = r3[0];

        if i3 != $i23 goto label10;

        return 0;

     label10:
        $r11 = new javassist.bytecode.BadBytecode;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sorry, cannot compute this data flow due to JSR: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i24 = r3[0];

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r17);

        throw $r11;

     label11:
        $i15 = r3[0];

        if $i15 >= 0 goto label12;

        $i19 = i3 + 1;

        r3[0] = $i19;

        return 0;

     label12:
        $i17 = i3 + 1;

        $i16 = r3[0];

        if $i17 != $i16 goto label13;

        return 1;

     label13:
        $r4 = new javassist.bytecode.BadBytecode;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sorry, cannot compute this data flow due to RET: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i18 = r3[0];

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r10);

        throw $r4;

     label14:
        $i7 = i1 & -4;

        i35 = $i7 + 4;

        $i8 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i35);

        i36 = i1 + $i8;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i36, i2, r2, i3);

        if i0 != 171 goto label17;

        $i13 = i35 + 4;

        i37 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i13);

        i38 = i35 + 12;

        i39 = 0;

     label15:
        if i39 >= i37 goto label16;

        $i14 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i38);

        i40 = i1 + $i14;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i40, i2, r2, i3);

        i38 = i38 + 8;

        i39 = i39 + 1;

        goto label15;

     label16:
        goto label19;

     label17:
        $i9 = i35 + 4;

        i41 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i9);

        $i10 = i35 + 8;

        i42 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>($i10);

        $i11 = i42 - i41;

        i4 = $i11 + 1;

        i43 = i35 + 12;

        i44 = 0;

     label18:
        if i44 >= i4 goto label19;

        $i12 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i43);

        i45 = i1 + $i12;

        specialinvoke r0.<javassist.bytecode.CodeAnalyzer: void checkTarget(int,int,int,int[],int)>(i1, i45, i2, r2, i3);

        i43 = i43 + 4;

        i44 = i44 + 1;

        goto label18;

     label19:
        return 1;

     label20:
        return 0;
    }

    private void checkTarget(int, int, int, int[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAnalyzer r0;
        int i0, i1, i2, i3, i4, $i5, $i6;
        int[] r1;
        javassist.bytecode.BadBytecode $r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r6, $r15;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: int[];

        i3 := @parameter4: int;

        if i1 < 0 goto label1;

        if i2 > i1 goto label2;

     label1:
        $r2 = new javassist.bytecode.BadBytecode;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad branch offset at ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        i4 = r1[i1];

        if i4 != 0 goto label3;

        $i6 = neg i3;

        r1[i1] = $i6;

        goto label4;

     label3:
        if i4 == i3 goto label4;

        $i5 = neg i3;

        if i4 == $i5 goto label4;

        $r7 = new javassist.bytecode.BadBytecode;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("verification error (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") at ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r15);

        throw $r7;

     label4:
        return;
    }

    private static boolean isEnd(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 172 > i0 goto label1;

        if i0 <= 177 goto label2;

     label1:
        if i0 != 191 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private int visitInst(int, javassist.bytecode.CodeIterator, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAnalyzer r0;
        javassist.bytecode.CodeIterator r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28;
        int[] $r2;
        javassist.bytecode.ConstPool $r3, $r4, $r5, $r6;
        java.lang.String r7, r8, r9, r10;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        i26 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        i0 := @parameter2: int;

        i27 := @parameter3: int;

        tableswitch(i26)
        {
            case 178: goto label03;
            case 179: goto label04;
            case 180: goto label01;
            case 181: goto label02;
            case 182: goto label05;
            case 183: goto label05;
            case 184: goto label06;
            case 185: goto label07;
            case 186: goto label08;
            case 187: goto label12;
            case 188: goto label12;
            case 189: goto label12;
            case 190: goto label12;
            case 191: goto label09;
            case 192: goto label12;
            case 193: goto label12;
            case 194: goto label12;
            case 195: goto label12;
            case 196: goto label11;
            case 197: goto label10;
            default: goto label12;
        };

     label01:
        $i22 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: int getFieldSize(javassist.bytecode.CodeIterator,int)>(r1, i0);

        $i23 = $i22 - 1;

        i28 = i27 + $i23;

        goto label13;

     label02:
        $i20 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: int getFieldSize(javassist.bytecode.CodeIterator,int)>(r1, i0);

        $i21 = $i20 + 1;

        i28 = i27 - $i21;

        goto label13;

     label03:
        $i25 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: int getFieldSize(javassist.bytecode.CodeIterator,int)>(r1, i0);

        i28 = i27 + $i25;

        goto label13;

     label04:
        $i24 = specialinvoke r0.<javassist.bytecode.CodeAnalyzer: int getFieldSize(javassist.bytecode.CodeIterator,int)>(r1, i0);

        i28 = i27 - $i24;

        goto label13;

     label05:
        $r6 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool>;

        $i16 = i0 + 1;

        $i17 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i16);

        r7 = virtualinvoke $r6.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>($i17);

        $i18 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r7);

        $i19 = $i18 - 1;

        i28 = i27 + $i19;

        goto label13;

     label06:
        $r5 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool>;

        $i13 = i0 + 1;

        $i14 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i13);

        r8 = virtualinvoke $r5.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>($i14);

        $i15 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r8);

        i28 = i27 + $i15;

        goto label13;

     label07:
        $r4 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool>;

        $i9 = i0 + 1;

        $i10 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i9);

        r9 = virtualinvoke $r4.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefType(int)>($i10);

        $i11 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r9);

        $i12 = $i11 - 1;

        i28 = i27 + $i12;

        goto label13;

     label08:
        $r3 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool>;

        $i6 = i0 + 1;

        $i7 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i6);

        r10 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getInvokeDynamicType(int)>($i7);

        $i8 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r10);

        i28 = i27 + $i8;

        goto label13;

     label09:
        i28 = 1;

        goto label13;

     label10:
        $i1 = i0 + 3;

        $i2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>($i1);

        $i3 = 1 - $i2;

        i28 = i27 + $i3;

        goto label13;

     label11:
        $i4 = i0 + 1;

        i26 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>($i4);

     label12:
        $r2 = <javassist.bytecode.CodeAnalyzer: int[] STACK_GROW>;

        $i5 = $r2[i26];

        i28 = i27 + $i5;

     label13:
        return i28;
    }

    private int getFieldSize(javassist.bytecode.CodeIterator, int)
    {
        javassist.bytecode.CodeAnalyzer r0;
        javassist.bytecode.CodeIterator r1;
        int i0, $i1, $i2, $i3;
        java.lang.String r2;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.CodeAnalyzer;

        r1 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        $r3 = r0.<javassist.bytecode.CodeAnalyzer: javassist.bytecode.ConstPool constPool>;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i1);

        r2 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>($i2);

        $i3 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r2);

        return $i3;
    }
}
