public class org.mockito.internal.configuration.InjectingAnnotationEngine extends java.lang.Object implements org.mockito.plugins.AnnotationEngine, org.mockito.configuration.AnnotationEngine
{
    private final org.mockito.plugins.AnnotationEngine delegate;
    private final org.mockito.plugins.AnnotationEngine spyAnnotationEngine;

    public void <init>()
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        org.mockito.internal.configuration.IndependentAnnotationEngine $r1;
        org.mockito.internal.configuration.SpyAnnotationEngine $r2;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mockito.internal.configuration.IndependentAnnotationEngine;

        specialinvoke $r1.<org.mockito.internal.configuration.IndependentAnnotationEngine: void <init>()>();

        r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: org.mockito.plugins.AnnotationEngine delegate> = $r1;

        $r2 = new org.mockito.internal.configuration.SpyAnnotationEngine;

        specialinvoke $r2.<org.mockito.internal.configuration.SpyAnnotationEngine: void <init>()>();

        r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: org.mockito.plugins.AnnotationEngine spyAnnotationEngine> = $r2;

        return;
    }

    public void process(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        java.lang.Class r1, $r3, $r4;
        java.lang.Object r2;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: void processIndependentAnnotations(java.lang.Class,java.lang.Object)>($r3, r2);

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: void processInjectMocks(java.lang.Class,java.lang.Object)>($r4, r2);

        return;
    }

    private void processInjectMocks(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        java.lang.Class r1, r3;
        java.lang.Object r2;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r3 = r1;

     label1:
        if r3 == class "Ljava/lang/Object;" goto label2;

        virtualinvoke r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: void injectMocks(java.lang.Object)>(r2);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return;
    }

    private void processIndependentAnnotations(java.lang.Class, java.lang.Object)
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        java.lang.Class r1, r5;
        java.lang.Object r2;
        org.mockito.plugins.AnnotationEngine $r3, $r4;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        r5 = r1;

     label1:
        if r5 == class "Ljava/lang/Object;" goto label2;

        $r3 = r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: org.mockito.plugins.AnnotationEngine delegate>;

        interfaceinvoke $r3.<org.mockito.plugins.AnnotationEngine: void process(java.lang.Class,java.lang.Object)>(r5, r2);

        $r4 = r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: org.mockito.plugins.AnnotationEngine spyAnnotationEngine>;

        interfaceinvoke $r4.<org.mockito.plugins.AnnotationEngine: void process(java.lang.Class,java.lang.Object)>(r5, r2);

        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return;
    }

    public void injectMocks(java.lang.Object)
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        java.lang.Object r1;
        java.util.Set r3;
        java.util.HashSet $r4;
        java.lang.Object[] $r5;
        org.mockito.internal.configuration.DefaultInjectionEngine $r6;
        org.mockito.internal.configuration.injection.scanner.InjectMocksScanner $r7;
        org.mockito.internal.configuration.injection.scanner.MockScanner $r8;
        java.lang.Class r9;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        r1 := @parameter0: java.lang.Object;

        r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = newarray (java.lang.Object)[0];

        r3 = staticinvoke <org.mockito.internal.util.collections.Sets: java.util.Set newMockSafeHashSet(java.lang.Object[])>($r5);

     label1:
        if r9 == class "Ljava/lang/Object;" goto label2;

        $r7 = new org.mockito.internal.configuration.injection.scanner.InjectMocksScanner;

        specialinvoke $r7.<org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: void <init>(java.lang.Class)>(r9);

        virtualinvoke $r7.<org.mockito.internal.configuration.injection.scanner.InjectMocksScanner: void addTo(java.util.Set)>($r4);

        $r8 = new org.mockito.internal.configuration.injection.scanner.MockScanner;

        specialinvoke $r8.<org.mockito.internal.configuration.injection.scanner.MockScanner: void <init>(java.lang.Object,java.lang.Class)>(r1, r9);

        virtualinvoke $r8.<org.mockito.internal.configuration.injection.scanner.MockScanner: void addPreparedMocks(java.util.Set)>(r3);

        virtualinvoke r0.<org.mockito.internal.configuration.InjectingAnnotationEngine: void onInjection(java.lang.Object,java.lang.Class,java.util.Set,java.util.Set)>(r1, r9, $r4, r3);

        r9 = virtualinvoke r9.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        $r6 = new org.mockito.internal.configuration.DefaultInjectionEngine;

        specialinvoke $r6.<org.mockito.internal.configuration.DefaultInjectionEngine: void <init>()>();

        virtualinvoke $r6.<org.mockito.internal.configuration.DefaultInjectionEngine: void injectMocksOnFields(java.util.Set,java.util.Set,java.lang.Object)>($r4, r3, r1);

        return;
    }

    protected void onInjection(java.lang.Object, java.lang.Class, java.util.Set, java.util.Set)
    {
        org.mockito.internal.configuration.InjectingAnnotationEngine r0;
        java.lang.Object r1;
        java.lang.Class r2;
        java.util.Set r3, r4;

        r0 := @this: org.mockito.internal.configuration.InjectingAnnotationEngine;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.Set;

        r4 := @parameter3: java.util.Set;

        return;
    }
}
