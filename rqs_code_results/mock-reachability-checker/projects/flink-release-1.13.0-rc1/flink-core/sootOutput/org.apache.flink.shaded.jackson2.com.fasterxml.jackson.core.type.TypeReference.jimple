public abstract class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference extends java.lang.Object implements java.lang.Comparable
{
    protected final java.lang.reflect.Type _type;

    protected void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r0;
        java.lang.reflect.Type r1, $r5;
        java.lang.Class $r2;
        boolean $z0;
        java.lang.reflect.ParameterizedType $r3;
        java.lang.reflect.Type[] $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        $z0 = r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: TypeReference constructed without actual type information");

        throw $r6;

     label1:
        $r3 = (java.lang.reflect.ParameterizedType) r1;

        $r4 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r5 = $r4[0];

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type _type> = $r5;

        return;
    }

    public java.lang.reflect.Type getType()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r0;
        java.lang.reflect.Type $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type _type>;

        return $r1;
    }

    public int compareTo(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r0, r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        return 0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference: int compareTo(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.type.TypeReference)>($r2);

        return $i0;
    }
}
