public class org.apache.flink.types.ShortValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private short value;

    public void <init>()
    {
        org.apache.flink.types.ShortValue r0;

        r0 := @this: org.apache.flink.types.ShortValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.ShortValue: short value> = 0;

        return;
    }

    public void <init>(short)
    {
        org.apache.flink.types.ShortValue r0;
        short s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        s0 := @parameter0: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.ShortValue: short value> = s0;

        return;
    }

    public short getValue()
    {
        org.apache.flink.types.ShortValue r0;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        return $s0;
    }

    public void setValue(short)
    {
        org.apache.flink.types.ShortValue r0;
        short s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        s0 := @parameter0: short;

        r0.<org.apache.flink.types.ShortValue: short value> = s0;

        return;
    }

    public void setValue(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.types.ShortValue r0, r1;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $s0 = r1.<org.apache.flink.types.ShortValue: short value>;

        r0.<org.apache.flink.types.ShortValue: short value> = $s0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.ShortValue r0;
        short $s0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.ShortValue;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($s0);

        return $r1;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.ShortValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $s0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: short readShort()>();

        r0.<org.apache.flink.types.ShortValue: short value> = $s0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.ShortValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeShort(int)>($s0);

        return;
    }

    public int compareTo(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.types.ShortValue r0, r1;
        short s0, $s1, $s2;
        byte $b3;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        s0 = r1.<org.apache.flink.types.ShortValue: short value>;

        $s1 = r0.<org.apache.flink.types.ShortValue: short value>;

        if $s1 >= s0 goto label1;

        $b3 = -1;

        goto label3;

     label1:
        $s2 = r0.<org.apache.flink.types.ShortValue: short value>;

        if $s2 <= s0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        return $b3;
    }

    public int hashCode()
    {
        org.apache.flink.types.ShortValue r0;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        return $s0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.ShortValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        short $s0, $s1;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.ShortValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        $s1 = $r2.<org.apache.flink.types.ShortValue: short value>;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        if $s1 != $s0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.ShortValue r0;

        r0 := @this: org.apache.flink.types.ShortValue;

        return 2;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.ShortValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, $i8, $i9, $i19, i21, i23, i25, i26;
        short $s2, $s3, $s5, $s6, $s10, $s11, $s13, $s14, $s16, $s17, s20, s22, s24;
        byte $b4, $b7, $b12, $b15, $b18;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 2 goto label1;

        $s13 = r0.<org.apache.flink.types.ShortValue: short value>;

        $s14 = $s13 >>> 8;

        s20 = $s14 & 255;

        i21 = s20 + 128;

        $b15 = (byte) i21;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b15);

        $i19 = i0 + 1;

        $s16 = r0.<org.apache.flink.types.ShortValue: short value>;

        $s17 = $s16 & 255;

        $b18 = (byte) $s17;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i19, $b18);

        goto label5;

     label1:
        if i1 > 0 goto label2;

        goto label5;

     label2:
        if i1 != 1 goto label3;

        $s10 = r0.<org.apache.flink.types.ShortValue: short value>;

        $s11 = $s10 >>> 8;

        s22 = $s11 & 255;

        i23 = s22 + 128;

        $b12 = (byte) i23;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b12);

        goto label5;

     label3:
        $s2 = r0.<org.apache.flink.types.ShortValue: short value>;

        $s3 = $s2 >>> 8;

        s24 = $s3 & 255;

        i25 = s24 + 128;

        $b4 = (byte) i25;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b4);

        $i8 = i0 + 1;

        $s5 = r0.<org.apache.flink.types.ShortValue: short value>;

        $s6 = $s5 & 255;

        $b7 = (byte) $s6;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i8, $b7);

        i26 = 2;

     label4:
        if i26 >= i1 goto label5;

        $i9 = i0 + i26;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i9, 0);

        i26 = i26 + 1;

        goto label4;

     label5:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.ShortValue r0;

        r0 := @this: org.apache.flink.types.ShortValue;

        return 2;
    }

    public void copyTo(org.apache.flink.types.ShortValue)
    {
        org.apache.flink.types.ShortValue r0, r1;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.types.ShortValue;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        r1.<org.apache.flink.types.ShortValue: short value> = $s0;

        return;
    }

    public org.apache.flink.types.ShortValue copy()
    {
        org.apache.flink.types.ShortValue r0, $r1;
        short $s0;

        r0 := @this: org.apache.flink.types.ShortValue;

        $r1 = new org.apache.flink.types.ShortValue;

        $s0 = r0.<org.apache.flink.types.ShortValue: short value>;

        specialinvoke $r1.<org.apache.flink.types.ShortValue: void <init>(short)>($s0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.ShortValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 2);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.ShortValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.ShortValue: int compareTo(org.apache.flink.types.ShortValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.ShortValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.types.ShortValue: void setValue(org.apache.flink.types.ShortValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.ShortValue r0, $r1;

        r0 := @this: org.apache.flink.types.ShortValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.ShortValue: org.apache.flink.types.ShortValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.ShortValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.ShortValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ShortValue) r1;

        virtualinvoke r0.<org.apache.flink.types.ShortValue: void copyTo(org.apache.flink.types.ShortValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.ShortValue: long serialVersionUID> = 1L;

        return;
    }
}
