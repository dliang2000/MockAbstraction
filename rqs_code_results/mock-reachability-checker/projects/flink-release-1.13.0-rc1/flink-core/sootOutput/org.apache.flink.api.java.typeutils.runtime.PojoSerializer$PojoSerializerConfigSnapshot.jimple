public final class org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot
{
    private static final int VERSION;
    private java.util.LinkedHashMap fieldToSerializerConfigSnapshot;
    private java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots;
    private java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots;
    private boolean ignoreTypeSerializerSerialization;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.HashMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.lang.Class r1;
        java.util.LinkedHashMap r2, r3;
        java.util.HashMap r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.LinkedHashMap;

        r3 := @parameter2: java.util.LinkedHashMap;

        r4 := @parameter3: java.util.HashMap;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.HashMap,boolean)>(r1, r2, r3, r4, 0);

        return;
    }

    public void <init>(java.lang.Class, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.HashMap, boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.lang.Class r1;
        java.util.LinkedHashMap r2, r3, $r6, $r8;
        java.util.HashMap r4, $r10;
        boolean z0;
        java.lang.Object $r5, $r7, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.LinkedHashMap;

        r3 := @parameter2: java.util.LinkedHashMap;

        r4 := @parameter3: java.util.HashMap;

        z0 := @parameter4: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>(java.lang.Class)>(r1);

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r6 = (java.util.LinkedHashMap) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r8 = (java.util.LinkedHashMap) $r7;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots> = $r8;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r10 = (java.util.HashMap) $r9;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots> = $r10;

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean ignoreTypeSerializerSerialization> = z0;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.util.LinkedHashMap r2, $r6, $r17, $r19, $r21;
        int i0;
        java.util.ArrayList $r7, $r8;
        java.util.function.BiConsumer $r9;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot $r10;
        java.lang.Class $r11;
        java.lang.reflect.Field[] $r12, $r15;
        java.lang.Object[] $r13, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r14, $r18;
        java.util.HashMap $r20;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r22;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap preprocessLegacySerializerSnapshotTuples(java.util.Map)>($r6);

        i0 = virtualinvoke r2.<java.util.LinkedHashMap: int size()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot$lambda_resolveSchemaCompatibility_0__198: java.util.function.BiConsumer bootstrap$(org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot,java.util.ArrayList,java.util.ArrayList)>(r0, $r7, $r8);

        virtualinvoke r2.<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>($r9);

        $r10 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        $r11 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        $r12 = newarray (java.lang.reflect.Field)[i0];

        $r13 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r15 = (java.lang.reflect.Field[]) $r13;

        $r14 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[i0];

        $r16 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r18 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r16;

        $r17 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $r19 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap preprocessLegacySerializerSnapshotTuples(java.util.Map)>($r17);

        $r20 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $r21 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap preprocessLegacySerializerSnapshotTuples(java.util.Map)>($r20);

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],java.util.LinkedHashMap,java.util.Map)>($r11, $r15, $r18, $r19, $r21);

        $r22 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r22;
    }

    private static java.util.LinkedHashMap preprocessLegacySerializerSnapshotTuples(java.util.Map)
    {
        java.util.Map r0;
        java.util.LinkedHashMap $r2;
        int $i0;
        java.util.function.BiConsumer $r3;

        r0 := @parameter0: java.util.Map;

        $r2 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot$lambda_preprocessLegacySerializerSnapshotTuples_1__199: java.util.function.BiConsumer bootstrap$(java.util.LinkedHashMap)>($r2);

        interfaceinvoke r0.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        return $r2;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r7;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r8;
        java.util.LinkedHashMap $r9, $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.Set $r11, $r14, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.HashMap $r15, $r16;
        byte[] $r18;
        java.lang.Object $r19, $r20, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r36, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r52, $r54, $r56, $r58, $r60, $r62, $r64;
        java.lang.Class $r21, $r37;
        java.lang.String $r22, $r38, $r53;
        org.apache.flink.api.java.tuple.Tuple2 $r24, $r28, $r32, $r40, $r44, $r48, $r55, $r59, $r63;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r26, $r42, $r57;
        org.apache.flink.api.common.typeutils.TypeSerializer $r30, $r34, $r46, $r50, $r61, $r65;
        java.lang.Throwable $r66, $r68, $r69, $r70, $r72, $r73, r74, r76;
        java.util.Iterator r77, r79, r81;
        java.util.Map$Entry r78, r80, r82;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r7 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r74 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r7);

        r76 = null;

     label02:
        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        $i0 = virtualinvoke $r9.<java.util.LinkedHashMap: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        $r11 = virtualinvoke $r10.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r77 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r77.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r51 = interfaceinvoke r77.<java.util.Iterator: java.lang.Object next()>();

        r78 = (java.util.Map$Entry) $r51;

        $r52 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r53 = (java.lang.String) $r52;

        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void writeUTF(java.lang.String)>($r53);

        $i9 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i9);

        $z5 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean ignoreTypeSerializerSerialization>;

        if $z5 != 0 goto label04;

        $r62 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r63 = (org.apache.flink.api.java.tuple.Tuple2) $r62;

        $r64 = $r63.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r65 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r64;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r65);

     label04:
        $i10 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i10);

        $r54 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r55 = (org.apache.flink.api.java.tuple.Tuple2) $r54;

        $r56 = $r55.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r57 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r56;

        $r58 = interfaceinvoke r78.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r59 = (org.apache.flink.api.java.tuple.Tuple2) $r58;

        $r60 = $r59.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r61 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r60;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r57, $r61);

        goto label03;

     label05:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $i1 = virtualinvoke $r12.<java.util.LinkedHashMap: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $r14 = virtualinvoke $r13.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r79 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r35 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>();

        r80 = (java.util.Map$Entry) $r35;

        $r36 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r37 = (java.lang.Class) $r36;

        $r38 = virtualinvoke $r37.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void writeUTF(java.lang.String)>($r38);

        $i7 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i7);

        $z4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean ignoreTypeSerializerSerialization>;

        if $z4 != 0 goto label07;

        $r47 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r48 = (org.apache.flink.api.java.tuple.Tuple2) $r47;

        $r49 = $r48.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r50 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r49;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r50);

     label07:
        $i8 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i8);

        $r39 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r40 = (org.apache.flink.api.java.tuple.Tuple2) $r39;

        $r41 = $r40.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r42 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r41;

        $r43 = interfaceinvoke r80.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r44 = (org.apache.flink.api.java.tuple.Tuple2) $r43;

        $r45 = $r44.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r46 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r45;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r42, $r46);

        goto label06;

     label08:
        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $i2 = virtualinvoke $r15.<java.util.HashMap: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i2);

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        r81 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r19 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>();

        r82 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (java.lang.Class) $r20;

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void writeUTF(java.lang.String)>($r22);

        $i5 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i5);

        $z3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: boolean ignoreTypeSerializerSerialization>;

        if $z3 != 0 goto label10;

        $r31 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r32 = (org.apache.flink.api.java.tuple.Tuple2) $r31;

        $r33 = $r32.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r34 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r33;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: void writeSerializer(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r34);

     label10:
        $i6 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i6);

        $r23 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r24 = (org.apache.flink.api.java.tuple.Tuple2) $r23;

        $r25 = $r24.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r26 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r25;

        $r27 = interfaceinvoke r82.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (org.apache.flink.api.java.tuple.Tuple2) $r27;

        $r29 = $r28.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r30 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r29;

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r26, $r30);

        goto label09;

     label11:
        $i3 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i3);

        $r18 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i4 = virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r18, 0, $i4);

     label12:
        if $r8 == null goto label22;

        goto label13;

     label13:
        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

        goto label22;

     label14:
        $r73 := @caughtexception;

        r76 = $r73;

        throw $r73;

     label15:
        $r68 := @caughtexception;

     label16:
        if $r8 == null goto label21;

        if r76 == null goto label20;

     label17:
        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label18:
        goto label21;

     label19:
        $r66 := @caughtexception;

        virtualinvoke r76.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r66);

        goto label21;

     label20:
        virtualinvoke $r8.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void close()>();

     label21:
        throw $r68;

     label22:
        if $r7 == null goto label32;

        goto label23;

     label23:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label32;

     label24:
        $r70 := @caughtexception;

        r74 = $r70;

        throw $r70;

     label25:
        $r72 := @caughtexception;

     label26:
        if $r7 == null goto label31;

        if r74 == null goto label30;

     label27:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label28:
        goto label31;

     label29:
        $r69 := @caughtexception;

        virtualinvoke r74.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r69);

        goto label31;

     label30:
        virtualinvoke $r7.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label31:
        throw $r72;

     label32:
        return;

        catch java.lang.Throwable from label02 to label12 with label14;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label14 to label16 with label15;
        catch java.lang.Throwable from label01 to label22 with label24;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label24 to label26 with label25;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, i36, i37, i38, i39, i40, i41, i42;
        int[] r2, r3, r4;
        byte[] r5;
        org.apache.flink.api.common.typeutils.TypeSerializer r7, r10, r12;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r8, r11, r13;
        java.lang.Class r9, r70;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r19;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r20;
        java.util.LinkedHashMap $r21, $r22, $r34, $r39;
        java.util.HashMap $r23, $r28;
        java.lang.ClassLoader $r24, $r25, $r26, $r30, $r31, $r32, $r36, $r37;
        org.apache.flink.api.java.tuple.Tuple2 $r27, $r33, $r38;
        java.lang.Throwable $r41, $r42, $r51, $r52, $r53, $r54, r63, r65;
        java.lang.ClassNotFoundException $r44, $r56;
        java.io.IOException $r45, $r57;
        java.lang.StringBuilder $r46, $r47, $r48, $r49, $r58, $r59, $r60, $r61;
        java.lang.String $r50, $r62, r66, r67, r69;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i1 = i0 * 2;

        r2 = newarray (int)[$i1];

        i34 = 0;

     label01:
        if i34 >= i0 goto label02;

        $i29 = i34 * 2;

        $i30 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2[$i29] = $i30;

        $i31 = i34 * 2;

        $i32 = $i31 + 1;

        $i33 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2[$i32] = $i33;

        i34 = i34 + 1;

        goto label01;

     label02:
        i35 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i2 = i35 * 2;

        r3 = newarray (int)[$i2];

        i36 = 0;

     label03:
        if i36 >= i35 goto label04;

        $i24 = i36 * 2;

        $i25 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r3[$i24] = $i25;

        $i26 = i36 * 2;

        $i27 = $i26 + 1;

        $i28 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r3[$i27] = $i28;

        i36 = i36 + 1;

        goto label03;

     label04:
        i37 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $i3 = i37 * 2;

        r4 = newarray (int)[$i3];

        i38 = 0;

     label05:
        if i38 >= i37 goto label06;

        $i19 = i38 * 2;

        $i20 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r4[$i19] = $i20;

        $i21 = i38 * 2;

        $i22 = $i21 + 1;

        $i23 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r4[$i22] = $i23;

        i38 = i38 + 1;

        goto label05;

     label06:
        i39 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r5 = newarray (byte)[i39];

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r5);

        $r19 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r5);

        r63 = null;

     label07:
        $r20 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r19);

        r65 = null;

     label08:
        $r21 = new java.util.LinkedHashMap;

        specialinvoke $r21.<java.util.LinkedHashMap: void <init>(int)>(i0);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot> = $r21;

        i40 = 0;

     label09:
        if i40 >= i0 goto label10;

        r66 = virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: java.lang.String readUTF()>();

        $i14 = i40 * 2;

        $i15 = r2[$i14];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i15);

        $r36 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r20, $r36, 1);

        $i16 = i40 * 2;

        $i17 = $i16 + 1;

        $i18 = r2[$i17];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i18);

        $r37 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r20, $r37, r7);

        $r39 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        $r38 = new org.apache.flink.api.java.tuple.Tuple2;

        specialinvoke $r38.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>(r7, r8);

        virtualinvoke $r39.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r66, $r38);

        i40 = i40 + 1;

        goto label09;

     label10:
        $r22 = new java.util.LinkedHashMap;

        specialinvoke $r22.<java.util.LinkedHashMap: void <init>(int)>(i35);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots> = $r22;

        i41 = 0;

     label11:
        if i41 >= i35 goto label16;

        r67 = virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: java.lang.String readUTF()>();

     label12:
        $r30 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r67, 1, $r30);

     label13:
        goto label15;

     label14:
        $r44 := @caughtexception;

        $r45 = new java.io.IOException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find requested class ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r67);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath.");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r50, $r44);

        throw $r45;

     label15:
        $i9 = i41 * 2;

        $i10 = r3[$i9];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i10);

        $r31 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r10 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r20, $r31, 1);

        $i11 = i41 * 2;

        $i12 = $i11 + 1;

        $i13 = r3[$i12];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i13);

        $r32 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r11 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r20, $r32, r10);

        $r34 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $r33 = new org.apache.flink.api.java.tuple.Tuple2;

        specialinvoke $r33.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>(r10, r11);

        virtualinvoke $r34.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r33);

        i41 = i41 + 1;

        goto label11;

     label16:
        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>(int)>(i37);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots> = $r23;

        i42 = 0;

     label17:
        if i42 >= i37 goto label22;

        r69 = virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: java.lang.String readUTF()>();

     label18:
        $r24 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r70 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r69, 1, $r24);

     label19:
        goto label21;

     label20:
        $r56 := @caughtexception;

        $r57 = new java.io.IOException;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find requested class ");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r69);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath.");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r62, $r56);

        throw $r57;

     label21:
        $i4 = i42 * 2;

        $i5 = r4[$i4];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i5);

        $r25 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r12 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,boolean)>($r20, $r25, 1);

        $i6 = i42 * 2;

        $i7 = $i6 + 1;

        $i8 = r4[$i7];

        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void setPosition(int)>($i8);

        $r26 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        r13 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r20, $r26, r12);

        $r28 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $r27 = new org.apache.flink.api.java.tuple.Tuple2;

        specialinvoke $r27.<org.apache.flink.api.java.tuple.Tuple2: void <init>(java.lang.Object,java.lang.Object)>(r12, r13);

        virtualinvoke $r28.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r70, $r27);

        i42 = i42 + 1;

        goto label17;

     label22:
        if $r20 == null goto label32;

        goto label23;

     label23:
        virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label32;

     label24:
        $r51 := @caughtexception;

        r65 = $r51;

        throw $r51;

     label25:
        $r52 := @caughtexception;

     label26:
        if $r20 == null goto label31;

        if r65 == null goto label30;

     label27:
        virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label28:
        goto label31;

     label29:
        $r54 := @caughtexception;

        virtualinvoke r65.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r54);

        goto label31;

     label30:
        virtualinvoke $r20.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label31:
        throw $r52;

     label32:
        if $r19 == null goto label42;

        goto label33;

     label33:
        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label42;

     label34:
        $r53 := @caughtexception;

        r63 = $r53;

        throw $r53;

     label35:
        $r42 := @caughtexception;

     label36:
        if $r19 == null goto label41;

        if r63 == null goto label40;

     label37:
        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label38:
        goto label41;

     label39:
        $r41 := @caughtexception;

        virtualinvoke r63.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r41);

        goto label41;

     label40:
        virtualinvoke $r19.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label41:
        throw $r42;

     label42:
        return;

        catch java.lang.ClassNotFoundException from label12 to label13 with label14;
        catch java.lang.ClassNotFoundException from label18 to label19 with label20;
        catch java.lang.Throwable from label08 to label22 with label24;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label24 to label26 with label25;
        catch java.lang.Throwable from label07 to label32 with label34;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label34 to label36 with label35;
    }

    public int getVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        return 1;
    }

    public java.util.LinkedHashMap getFieldToSerializerConfigSnapshot()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        return $r1;
    }

    public java.util.LinkedHashMap getRegisteredSubclassesToSerializerConfigSnapshots()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        return $r1;
    }

    public java.util.HashMap getNonRegisteredSubclassesToSerializerConfigSnapshots()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0, $r2, $r5, $r8;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.LinkedHashMap $r3, $r4, $r6, $r7;
        java.util.HashMap $r9, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        if $z1 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        $r2 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap getFieldToSerializerConfigSnapshot()>();

        $z2 = virtualinvoke $r3.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $r5 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot) r1;

        $r7 = virtualinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap getRegisteredSubclassesToSerializerConfigSnapshots()>();

        $z3 = virtualinvoke $r6.<java.util.LinkedHashMap: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $r8 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot) r1;

        $r9 = $r8.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $z4 = virtualinvoke $r10.<java.util.HashMap: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1;
        java.util.LinkedHashMap $r2, $r3;
        java.util.HashMap $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: int hashCode()>();

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap fieldToSerializerConfigSnapshot>;

        $r1[0] = $r2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.LinkedHashMap registeredSubclassesToSerializerConfigSnapshots>;

        $r1[1] = $r3;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.util.HashMap nonRegisteredSubclassesToSerializerConfigSnapshots>;

        $r1[2] = $r4;

        $i1 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        $i2 = $i0 + $i1;

        return $i2;
    }

    public static void lambda$preprocessLegacySerializerSnapshotTuples$1(java.util.LinkedHashMap, java.lang.Object, org.apache.flink.api.java.tuple.Tuple2)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r4, $r5;
        org.apache.flink.api.java.tuple.Tuple2 r2;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer $r7;
        org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot $r8;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r9;

        r0 := @parameter0: java.util.LinkedHashMap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.apache.flink.api.java.tuple.Tuple2;

        $r4 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r4;

        $r5 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        r9 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r5;

        $z0 = r9 instanceof org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot;

        if $z0 == 0 goto label1;

        $r8 = (org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot) r9;

        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypeSerializerConfigSnapshot: void setPriorSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>(r3);

     label1:
        $z1 = r3 instanceof org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer) r3;

        r9 = interfaceinvoke $r7.<org.apache.flink.api.common.typeutils.LegacySerializerSnapshotTransformer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot transformLegacySerializerSnapshot(org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>(r9);

     label2:
        virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9);

        return;
    }

    public void lambda$resolveSchemaCompatibility$0(java.util.ArrayList, java.util.ArrayList, java.lang.String, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot r0;
        java.util.ArrayList r1, r2;
        java.lang.String r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4;
        java.lang.Class $r5;
        java.lang.reflect.Field $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.util.ArrayList;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoFieldUtils: java.lang.reflect.Field getField(java.lang.String,java.lang.Class)>(r3, $r5);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.PojoSerializer$PojoSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
