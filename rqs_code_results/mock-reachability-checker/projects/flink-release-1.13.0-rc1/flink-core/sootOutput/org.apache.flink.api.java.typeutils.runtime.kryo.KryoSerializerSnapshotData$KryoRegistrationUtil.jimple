final class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void writeKryoRegistration(org.apache.flink.core.memory.DataOutputView, org.apache.flink.api.java.typeutils.runtime.KryoRegistration) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataOutputView r0;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration r1;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType r2;
        java.lang.Class $r6, r22;
        java.lang.String $r7, $r11, $r17;
        int $i0, $i1, $i2;
        int[] $r8;
        org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream $r9;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r10;
        boolean $z0;
        java.lang.AssertionError $r12;
        java.lang.IllegalStateException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;
        java.lang.Throwable $r18, $r20, $r21, r24;

        r0 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        r1 := @parameter1: org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r6 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: java.lang.Class getRegisteredClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r7);

        r2 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType getSerializerDefinitionType()>();

        $i0 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r8 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1: int[] $SwitchMap$org$apache$flink$api$java$typeutils$runtime$KryoRegistration$SerializerDefinitionType>;

        $i1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        $i2 = $r8[$i1];

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label04;
            default: goto label17;
        };

     label01:
        goto label18;

     label02:
        r22 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: java.lang.Class getSerializerClass()>();

        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label03;

        if r22 != null goto label03;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label03:
        $r11 = virtualinvoke r22.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke r0.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>($r11);

        goto label18;

     label04:
        $r9 = new org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void <init>(org.apache.flink.core.memory.DataOutputView)>(r0);

        r24 = null;

     label05:
        $r10 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer getSerializableSerializerInstance()>();

        staticinvoke <org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>($r9, $r10);

     label06:
        if $r9 == null goto label16;

        goto label07;

     label07:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

        goto label16;

     label08:
        $r20 := @caughtexception;

        r24 = $r20;

        throw $r20;

     label09:
        $r21 := @caughtexception;

     label10:
        if $r9 == null goto label15;

        if r24 == null goto label14;

     label11:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label12:
        goto label15;

     label13:
        $r18 := @caughtexception;

        virtualinvoke r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label15;

     label14:
        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void close()>();

     label15:
        throw $r21;

     label16:
        goto label18;

     label17:
        $r13 = new java.lang.IllegalStateException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Kryo registration serializer definition type: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label18:
        return;

        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    static org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadKryoRegistration(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, $r13, $r20;
        java.lang.Class r3;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType[] $r4;
        int $i0, $i1, $i2;
        int[] $r5;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r6, $r7, $r8;
        java.lang.IllegalStateException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r16, $r17, $r18, $r19;
        java.lang.ClassNotFoundException $r14;
        org.slf4j.Logger $r15;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType r22;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label1:
        r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r2, 1, r1);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger access$200()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered class ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for Kryo serialization in classpath; using a dummy class as a placeholder.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r20, $r14);

        return null;

     label4:
        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType[] values()>();

        $i0 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r22 = $r4[$i0];

        $r5 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$1: int[] $SwitchMap$org$apache$flink$api$java$typeutils$runtime$KryoRegistration$SerializerDefinitionType>;

        $i1 = virtualinvoke r22.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: int ordinal()>();

        $i2 = $r5[$i1];

        tableswitch($i2)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label8;
        };

     label5:
        $r8 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>(r3);

        return $r8;

     label6:
        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadWithSerializerClass(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,java.lang.String,java.lang.Class)>(r0, r1, r2, r3);

        return $r7;

     label7:
        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadWithSerializerInstance(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,java.lang.String,java.lang.Class)>(r0, r1, r2, r3);

        return $r6;

     label8:
        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized Kryo registration serializer definition type: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadWithSerializerClass(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, java.lang.String, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, r4, $r14;
        java.lang.Class r3, r5;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r7;
        java.lang.ClassNotFoundException $r8;
        org.slf4j.Logger $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class;

        r4 = interfaceinvoke r0.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

     label1:
        r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r4, 1, r1);

        $r7 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,java.lang.Class)>(r3, r5);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r9 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger access$200()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered Kryo serializer class for class ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r14, $r8);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static org.apache.flink.api.java.typeutils.runtime.KryoRegistration tryReadWithSerializerInstance(org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader, java.lang.String, java.lang.Class) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputView r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, $r20, $r27;
        java.lang.Class r3;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer r4;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r8;
        java.lang.Object $r9;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r10;
        java.lang.Throwable $r11, $r13, $r28, r30;
        java.io.InvalidClassException $r14;
        org.slf4j.Logger $r15, $r22;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r26;
        java.lang.ClassNotFoundException $r21;

        r0 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r1 := @parameter1: java.lang.ClassLoader;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class;

     label01:
        $r8 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r0);

        r30 = null;

     label02:
        $r9 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>($r8, r1);

        r4 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r9;

        $r10 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>(r3, r4);

     label03:
        if $r8 == null goto label05;

        goto label04;

     label04:
        virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label05:
        return $r10;

     label06:
        $r11 := @caughtexception;

        r30 = $r11;

        throw $r11;

     label07:
        $r13 := @caughtexception;

     label08:
        if $r8 == null goto label13;

        if r30 == null goto label12;

     label09:
        virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label10:
        goto label13;

     label11:
        $r28 := @caughtexception;

        virtualinvoke r30.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r28);

        goto label13;

     label12:
        virtualinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label13:
        throw $r13;

     label14:
        $r21 := @caughtexception;

        $r22 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger access$200()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find registered Kryo serializer class for class ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in classpath; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r27, $r21);

        goto label16;

     label15:
        $r14 := @caughtexception;

        $r15 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData: org.slf4j.Logger access$200()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The registered Kryo serializer class for class ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has changed and is no longer valid; using a dummy Kryo serializer that should be replaced as soon as a new Kryo serializer for the class is present.");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r15.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r20, $r14);

     label16:
        return null;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label06 to label08 with label07;
        catch java.lang.ClassNotFoundException from label01 to label05 with label14;
        catch java.lang.ClassNotFoundException from label06 to label14 with label14;
        catch java.io.InvalidClassException from label01 to label05 with label15;
        catch java.io.InvalidClassException from label06 to label14 with label15;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerSnapshotData;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshotData$KryoRegistrationUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
