public class junit.framework.Assert extends java.lang.Object
{

    protected void <init>()
    {
        junit.framework.Assert r0;

        r0 := @this: junit.framework.Assert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertTrue(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void assertTrue(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(null, z0);

        return;
    }

    public static void assertFalse(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(r0, $z1);

        return;
    }

    public static void assertFalse(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <junit.framework.Assert: void assertFalse(java.lang.String,boolean)>(null, z0);

        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String r0;
        junit.framework.AssertionFailedError $r1, $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new junit.framework.AssertionFailedError;

        specialinvoke $r2.<junit.framework.AssertionFailedError: void <init>()>();

        throw $r2;

     label1:
        $r1 = new junit.framework.AssertionFailedError;

        specialinvoke $r1.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static void fail()
    {
        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(null);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        staticinvoke <junit.framework.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, $r5;
        junit.framework.ComparisonFailure $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return;

     label1:
        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        if r0 != null goto label3;

        $r5 = "";

        goto label4;

     label3:
        $r5 = r0;

     label4:
        $r4 = new junit.framework.ComparisonFailure;

        specialinvoke $r4.<junit.framework.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r5, r1, r2);

        throw $r4;
    }

    public static void assertEquals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, double, double, double)
    {
        java.lang.String r0;
        double d0, d1, d2, $d3, $d4;
        int $i0;
        byte $b1;
        java.lang.Double $r1, $r2;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d1);

        if $i0 != 0 goto label1;

        return;

     label1:
        $d3 = d0 - d1;

        $d4 = staticinvoke <java.lang.Math: double abs(double)>($d3);

        $b1 = $d4 cmpg d2;

        if $b1 <= 0 goto label2;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d1);

        staticinvoke <junit.framework.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

     label2:
        return;
    }

    public static void assertEquals(double, double, double)
    {
        double d0, d1, d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,double,double,double)>(null, d0, d1, d2);

        return;
    }

    public static void assertEquals(java.lang.String, float, float, float)
    {
        java.lang.String r0;
        float f0, f1, f2, $f3, $f4;
        int $i0;
        byte $b1;
        java.lang.Float $r1, $r2;

        r0 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>(f0, f1);

        if $i0 != 0 goto label1;

        return;

     label1:
        $f3 = f0 - f1;

        $f4 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $b1 = $f4 cmpg f2;

        if $b1 <= 0 goto label2;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        $r2 = new java.lang.Float;

        specialinvoke $r2.<java.lang.Float: void <init>(float)>(f1);

        staticinvoke <junit.framework.Assert: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

     label2:
        return;
    }

    public static void assertEquals(float, float, float)
    {
        float f0, f1, f2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,float,float,float)>(null, f0, f1, f2);

        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String r0;
        long l0, l1;
        java.lang.Long $r1, $r2;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,long,long)>(null, l0, l1);

        return;
    }

    public static void assertEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String r0;
        boolean z0, z1;
        java.lang.Boolean $r1, $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(boolean, boolean)
    {
        boolean z0, z1;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>(null, z0, z1);

        return;
    }

    public static void assertEquals(java.lang.String, byte, byte)
    {
        java.lang.String r0;
        byte b0, b1;
        java.lang.Byte $r1, $r2;

        r0 := @parameter0: java.lang.String;

        b0 := @parameter1: byte;

        b1 := @parameter2: byte;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(byte, byte)
    {
        byte b0, b1;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,byte,byte)>(null, b0, b1);

        return;
    }

    public static void assertEquals(java.lang.String, char, char)
    {
        java.lang.String r0;
        char c0, c1;
        java.lang.Character $r1, $r2;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(char, char)
    {
        char c0, c1;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,char,char)>(null, c0, c1);

        return;
    }

    public static void assertEquals(java.lang.String, short, short)
    {
        java.lang.String r0;
        short s0, s1;
        java.lang.Short $r1, $r2;

        r0 := @parameter0: java.lang.String;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0);

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(short, short)
    {
        short s0, s1;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,short,short)>(null, s0, s1);

        return;
    }

    public static void assertEquals(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        java.lang.Integer $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r0, $r1, $r2);

        return;
    }

    public static void assertEquals(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(null, i0, i1);

        return;
    }

    public static void assertNotNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>(null, r0);

        return;
    }

    public static void assertNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(r0, $z0);

        return;
    }

    public static void assertNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected: <null> but was: ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertNull(java.lang.String,java.lang.Object)>($r5, r0);

     label1:
        return;
    }

    public static void assertNull(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(r0, $z0);

        return;
    }

    public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != r2 goto label1;

        return;

     label1:
        staticinvoke <junit.framework.Assert: void failNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void assertSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r1 != r2 goto label1;

        staticinvoke <junit.framework.Assert: void failSame(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void assertNotSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <junit.framework.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void failSame(java.lang.String)
    {
        java.lang.String r0, $r5, $r9;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r9 = "";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected not same");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r5);

        return;
    }

    public static void failNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, $r11, $r15;
        java.lang.Object r1, r2;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r15 = "";

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected same:<");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> was not:<");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r11);

        return;
    }

    public static void failNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, $r3;
        java.lang.Object r1, r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <junit.framework.Assert: java.lang.String format(java.lang.String,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r3);

        return;
    }

    public static java.lang.String format(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String r0, r6, $r14;
        java.lang.Object r1, r2;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r6 = "";

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected:<");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }
}
