public abstract class org.apache.flink.api.common.io.FileOutputFormat extends org.apache.flink.api.common.io.RichOutputFormat implements org.apache.flink.api.common.io.InitializeOnMaster, org.apache.flink.api.common.io.CleanupWhenUnsuccessful
{
    private static final long serialVersionUID;
    private static org.apache.flink.core.fs.FileSystem$WriteMode DEFAULT_WRITE_MODE;
    private static org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode DEFAULT_OUTPUT_DIRECTORY_MODE;
    private static final org.slf4j.Logger LOG;
    public static final java.lang.String FILE_PARAMETER_KEY;
    protected org.apache.flink.core.fs.Path outputFilePath;
    private org.apache.flink.core.fs.FileSystem$WriteMode writeMode;
    private org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode;
    protected transient org.apache.flink.core.fs.FSDataOutputStream stream;
    private transient org.apache.flink.core.fs.Path actualFilePath;
    private transient boolean fileCreated;

    public static void initDefaultsFromConfiguration(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        boolean z0, z1;
        org.apache.flink.configuration.ConfigOption $r1, $r2;
        org.apache.flink.core.fs.FileSystem$WriteMode $r3;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r4;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FILESYTEM_DEFAULT_OVERRIDE>;

        z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(org.apache.flink.configuration.ConfigOption)>($r1);

        if z0 == 0 goto label1;

        $r3 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode OVERWRITE>;

        goto label2;

     label1:
        $r3 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

     label2:
        <org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode DEFAULT_WRITE_MODE> = $r3;

        $r2 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY>;

        z1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(org.apache.flink.configuration.ConfigOption)>($r2);

        if z1 == 0 goto label3;

        $r4 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        goto label4;

     label3:
        $r4 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

     label4:
        <org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode DEFAULT_OUTPUT_DIRECTORY_MODE> = $r4;

        return;
    }

    public void <init>()
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        specialinvoke r0.<org.apache.flink.api.common.io.RichOutputFormat: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.Path r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        specialinvoke r0.<org.apache.flink.api.common.io.RichOutputFormat: void <init>()>();

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath> = r1;

        return;
    }

    public void setOutputFilePath(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.Path r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output file path may not be null.");

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath> = r1;

        return;
    }

    public org.apache.flink.core.fs.Path getOutputFilePath()
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.Path $r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath>;

        return $r1;
    }

    public void setWriteMode(org.apache.flink.core.fs.FileSystem$WriteMode)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.FileSystem$WriteMode r1;
        java.lang.NullPointerException $r2;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 := @parameter0: org.apache.flink.core.fs.FileSystem$WriteMode;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode> = r1;

        return;
    }

    public org.apache.flink.core.fs.FileSystem$WriteMode getWriteMode()
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.FileSystem$WriteMode $r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        return $r1;
    }

    public void setOutputDirectoryMode(org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode r1;
        java.lang.NullPointerException $r2;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 := @parameter0: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode> = r1;

        return;
    }

    public org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode getOutputDirectoryMode()
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        $r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode>;

        return $r1;
    }

    public void configure(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.configuration.Configuration r1;
        java.lang.String r2, $r15, $r17;
        org.apache.flink.core.fs.Path $r4, $r9;
        org.apache.flink.core.fs.FileSystem$WriteMode $r5, $r8;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r6, $r7;
        java.lang.IllegalArgumentException $r10;
        java.lang.RuntimeException $r11, $r12;
        java.lang.StringBuilder $r13, $r14, $r16;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 := @parameter0: org.apache.flink.configuration.Configuration;

        $r4 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath>;

        if $r4 != null goto label4;

        r2 = virtualinvoke r1.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>("flink.output.file", null);

        if r2 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The output path has been specified neither via constructor/setters, nor via the Configuration.");

        throw $r10;

     label1:
        $r9 = new org.apache.flink.core.fs.Path;

        specialinvoke $r9.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r2);

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath> = $r9;

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a valid URI from the given file path name: ");

        $r15 = virtualinvoke $r11.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label4:
        $r5 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        if $r5 != null goto label5;

        $r8 = <org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode DEFAULT_WRITE_MODE>;

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode> = $r8;

     label5:
        $r6 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode>;

        if $r6 != null goto label6;

        $r7 = <org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode DEFAULT_OUTPUT_DIRECTORY_MODE>;

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode> = $r7;

     label6:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void open(int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        int i0, i1, $i2;
        org.apache.flink.core.fs.Path r1, $r17, $r54;
        org.apache.flink.core.fs.FileSystem r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r14, $r24, $r25, $r27, $r28, $r34, $r35, $r37, $r38, $r41, $r43, $r44, $r45, $r46, $r47, $r49, $r50, $r52;
        java.lang.String $r9, $r13, $r15, $r26, $r29, $r36, $r39, $r53;
        org.slf4j.Logger $r10, $r42;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.core.fs.FileSystem$WriteMode $r16, $r22, $r32, $r48;
        org.apache.flink.core.fs.FSDataOutputStream $r18;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode $r19, $r20, $r30, $r31, $r51;
        java.io.IOException $r23, $r33, $r40;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 >= 1 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TaskNumber: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numTasks: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r10 = <org.apache.flink.api.common.io.FileOutputFormat: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r42 = <org.apache.flink.api.common.io.FileOutputFormat: org.slf4j.Logger LOG>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Opening stream for output (");

        $i2 = i0 + 1;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). WriteMode=");

        $r48 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", OutputDirectoryMode=");

        $r51 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void debug(java.lang.String)>($r53);

     label3:
        r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path outputFilePath>;

        if r1 != null goto label4;

        $r40 = new java.io.IOException;

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>("The file path is null.");

        throw $r40;

     label4:
        r2 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $z1 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        if $z1 != 0 goto label6;

        if i1 != 1 goto label5;

        $r31 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode>;

        $r30 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        if $r31 != $r30 goto label5;

        $r32 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        $z3 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean initOutPathLocalFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, $r32, 0);

        if $z3 != 0 goto label6;

        $r33 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output path \'");

        $r36 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be initialized. Canceling task...");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r33;

     label5:
        $r22 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        $z2 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean initOutPathLocalFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, $r22, 1);

        if $z2 != 0 goto label6;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output directory \'");

        $r26 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String toString()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be created. Canceling task...");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label6:
        if i1 > 1 goto label7;

        $r20 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode outputDirectoryMode>;

        $r19 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode ALWAYS>;

        if $r20 != $r19 goto label8;

     label7:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r13 = virtualinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: java.lang.String getDirectoryFileName(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path suffix(java.lang.String)>($r15);

        goto label9;

     label8:
        $r54 = r1;

     label9:
        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path actualFilePath> = $r54;

        $r17 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path actualFilePath>;

        $r16 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode writeMode>;

        $r18 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r17, $r16);

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FSDataOutputStream stream> = $r18;

        r0.<org.apache.flink.api.common.io.FileOutputFormat: boolean fileCreated> = 1;

        return;
    }

    protected java.lang.String getDirectoryFileName(int)
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        org.apache.flink.core.fs.FSDataOutputStream r1;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FSDataOutputStream stream>;

        if r1 == null goto label1;

        r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FSDataOutputStream stream> = null;

        virtualinvoke r1.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label1:
        return;
    }

    public void initializeGlobal(int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        int i0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.fs.FileSystem r2;
        org.apache.flink.core.fs.FileSystem$WriteMode r3;
        org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode r4, $r6;
        boolean $z0, $z1, $z2;
        java.io.IOException $r5, $r7;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path getOutputFilePath()>();

        r2 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $z0 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean isDistributedFS()>();

        if $z0 == 0 goto label2;

        r3 = virtualinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.FileSystem$WriteMode getWriteMode()>();

        r4 = virtualinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode getOutputDirectoryMode()>();

        if i0 != 1 goto label1;

        $r6 = <org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode: org.apache.flink.api.common.io.FileOutputFormat$OutputDirectoryMode PARONLY>;

        if r4 != $r6 goto label1;

        $z2 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean initOutPathDistFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, r3, 0);

        if $z2 != 0 goto label2;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Output path could not be initialized.");

        throw $r7;

     label1:
        $z1 = virtualinvoke r2.<org.apache.flink.core.fs.FileSystem: boolean initOutPathDistFS(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode,boolean)>(r1, r3, 1);

        if $z1 != 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Output directory could not be created.");

        throw $r5;

     label2:
        return;
    }

    public void tryCleanupOnError()
    {
        org.apache.flink.api.common.io.FileOutputFormat r0;
        boolean $z0;
        org.apache.flink.core.fs.Path $r1, $r4, $r9;
        java.net.URI $r2;
        org.apache.flink.core.fs.FileSystem $r3;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6, $r8, $r10, $r11;
        org.slf4j.Logger $r7, $r15;
        java.lang.String $r12;
        java.io.FileNotFoundException $r13;
        java.io.IOException $r14;

        r0 := @this: org.apache.flink.api.common.io.FileOutputFormat;

        $z0 = r0.<org.apache.flink.api.common.io.FileOutputFormat: boolean fileCreated>;

        if $z0 == 0 goto label8;

        r0.<org.apache.flink.api.common.io.FileOutputFormat: boolean fileCreated> = 0;

     label1:
        virtualinvoke r0.<org.apache.flink.api.common.io.FileOutputFormat: void close()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r15 = <org.apache.flink.api.common.io.FileOutputFormat: org.slf4j.Logger LOG>;

        interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Could not properly close FileOutputFormat.", $r14);

     label4:
        $r1 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path actualFilePath>;

        $r2 = virtualinvoke $r1.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r3 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r2);

        $r4 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path actualFilePath>;

        virtualinvoke $r3.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r4, 0);

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        goto label8;

     label7:
        $r5 := @caughtexception;

        $r7 = <org.apache.flink.api.common.io.FileOutputFormat: org.slf4j.Logger LOG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not remove the incomplete file ");

        $r9 = r0.<org.apache.flink.api.common.io.FileOutputFormat: org.apache.flink.core.fs.Path actualFilePath>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r12, $r5);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.Configuration $r0;
        org.slf4j.Logger $r1;

        <org.apache.flink.api.common.io.FileOutputFormat: java.lang.String FILE_PARAMETER_KEY> = "flink.output.file";

        <org.apache.flink.api.common.io.FileOutputFormat: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.apache.flink.configuration.GlobalConfiguration: org.apache.flink.configuration.Configuration loadConfiguration()>();

        staticinvoke <org.apache.flink.api.common.io.FileOutputFormat: void initDefaultsFromConfiguration(org.apache.flink.configuration.Configuration)>($r0);

        $r1 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/common/io/FileOutputFormat;");

        <org.apache.flink.api.common.io.FileOutputFormat: org.slf4j.Logger LOG> = $r1;

        return;
    }
}
