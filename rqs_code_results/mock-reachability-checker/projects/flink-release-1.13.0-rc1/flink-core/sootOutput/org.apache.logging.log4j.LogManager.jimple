public class org.apache.logging.log4j.LogManager extends java.lang.Object
{
    public static final java.lang.String FACTORY_PROPERTY_NAME;
    public static final java.lang.String ROOT_LOGGER_NAME;
    private static final org.apache.logging.log4j.Logger LOGGER;
    private static final java.lang.String FQCN;
    private static volatile org.apache.logging.log4j.spi.LoggerContextFactory factory;

    protected void <init>()
    {
        org.apache.logging.log4j.LogManager r0;

        r0 := @this: org.apache.logging.log4j.LogManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean exists(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.spi.LoggerContext $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext()>();

        $z0 = interfaceinvoke $r1.<org.apache.logging.log4j.spi.LoggerContext: boolean hasLogger(java.lang.String)>(r0);

        return $z0;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext()
    {
        java.lang.String $r1, $r7, $r10, $r12;
        org.apache.logging.log4j.spi.LoggerContextFactory $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3, $r13;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r8, $r9;
        org.apache.logging.log4j.Logger $r6;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r11;

     label1:
        $r2 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r1 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r3 = interfaceinvoke $r2.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r1, null, null, 1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r10);

        $r11 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r12 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r13 = virtualinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r12, null, null, 1);

        return $r13;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(boolean)
    {
        boolean z0;
        java.lang.String $r1, $r7, $r10, $r12;
        org.apache.logging.log4j.spi.LoggerContextFactory $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3, $r13;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r8, $r9;
        org.apache.logging.log4j.Logger $r6;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r11;

        z0 := @parameter0: boolean;

     label1:
        $r2 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r1 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r3 = interfaceinvoke $r2.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r1, null, null, z0, null, null);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r10);

        $r11 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r12 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r13 = virtualinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r12, null, null, z0, null, null);

        return $r13;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader, boolean)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.lang.String $r2, $r8, $r11, $r13;
        org.apache.logging.log4j.spi.LoggerContextFactory $r3;
        org.apache.logging.log4j.spi.LoggerContext $r4, $r14;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r9, $r10;
        org.apache.logging.log4j.Logger $r7;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r12;

        r0 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

     label1:
        $r3 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r2 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r4 = interfaceinvoke $r3.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r2, r0, null, z0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r11);

        $r12 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r12.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r13 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r14 = virtualinvoke $r12.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r13, r0, null, z0);

        return $r14;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader, boolean, java.lang.Object)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.String $r3, $r9, $r12, $r14;
        org.apache.logging.log4j.spi.LoggerContextFactory $r4;
        org.apache.logging.log4j.spi.LoggerContext $r5, $r15;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r10, $r11;
        org.apache.logging.log4j.Logger $r8;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r13;

        r0 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Object;

     label1:
        $r4 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r3 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r5 = interfaceinvoke $r4.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r3, r0, r1, z0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r8 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r12);

        $r13 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r13.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r14 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r15 = virtualinvoke $r13.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>($r14, r0, r1, z0);

        return $r15;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader, boolean, java.net.URI)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.net.URI r1;
        java.lang.String $r3, $r9, $r12, $r14;
        org.apache.logging.log4j.spi.LoggerContextFactory $r4;
        org.apache.logging.log4j.spi.LoggerContext $r5, $r15;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r10, $r11;
        org.apache.logging.log4j.Logger $r8;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r13;

        r0 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.net.URI;

     label1:
        $r4 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r3 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r5 = interfaceinvoke $r4.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r3, r0, null, z0, r1, null);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r8 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r12);

        $r13 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r13.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r14 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r15 = virtualinvoke $r13.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r14, r0, null, z0, r1, null);

        return $r15;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader, boolean, java.lang.Object, java.net.URI)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.lang.Object r1;
        java.net.URI r2;
        java.lang.String $r4, $r10, $r13, $r15;
        org.apache.logging.log4j.spi.LoggerContextFactory $r5;
        org.apache.logging.log4j.spi.LoggerContext $r6, $r16;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r11, $r12;
        org.apache.logging.log4j.Logger $r9;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r14;

        r0 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.net.URI;

     label1:
        $r5 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r4 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r6 = interfaceinvoke $r5.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r4, r0, r1, z0, r2, null);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r9 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r13);

        $r14 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r14.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r15 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r16 = virtualinvoke $r14.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r15, r0, r1, z0, r2, null);

        return $r16;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader, boolean, java.lang.Object, java.net.URI, java.lang.String)
    {
        java.lang.ClassLoader r0;
        boolean z0;
        java.lang.Object r1;
        java.net.URI r2;
        java.lang.String r3, $r5, $r11, $r14, $r16;
        org.apache.logging.log4j.spi.LoggerContextFactory $r6;
        org.apache.logging.log4j.spi.LoggerContext $r7, $r17;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r12, $r13;
        org.apache.logging.log4j.Logger $r10;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r15;

        r0 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.net.URI;

        r3 := @parameter4: java.lang.String;

     label1:
        $r6 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r5 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r7 = interfaceinvoke $r6.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r5, r0, r1, z0, r2, r3);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        $r10 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r8.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r14);

        $r15 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r15.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r16 = <org.apache.logging.log4j.LogManager: java.lang.String FQCN>;

        $r17 = virtualinvoke $r15.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>($r16, r0, r1, z0, r2, r3);

        return $r17;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String, boolean)
    {
        java.lang.String r0, $r7, $r10;
        boolean z0;
        org.apache.logging.log4j.spi.LoggerContextFactory $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3, $r12;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r8, $r9;
        org.apache.logging.log4j.Logger $r6;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r11;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r2 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r3 = interfaceinvoke $r2.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, null, null, z0);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r6 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r4.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r10);

        $r11 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r12 = virtualinvoke $r11.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, null, null, z0);

        return $r12;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String, java.lang.ClassLoader, boolean)
    {
        java.lang.String r0, $r8, $r11;
        java.lang.ClassLoader r1;
        boolean z0;
        org.apache.logging.log4j.spi.LoggerContextFactory $r3;
        org.apache.logging.log4j.spi.LoggerContext $r4, $r13;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r9, $r10;
        org.apache.logging.log4j.Logger $r7;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

     label1:
        $r3 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r4 = interfaceinvoke $r3.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, r1, null, z0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r7 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r11);

        $r12 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r12.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r13 = virtualinvoke $r12.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, r1, null, z0);

        return $r13;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    protected static org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String, java.lang.ClassLoader, boolean, java.net.URI, java.lang.String)
    {
        java.lang.String r0, r3, $r10, $r13;
        java.lang.ClassLoader r1;
        boolean z0;
        java.net.URI r2;
        org.apache.logging.log4j.spi.LoggerContextFactory $r5;
        org.apache.logging.log4j.spi.LoggerContext $r6, $r15;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8, $r11, $r12;
        org.apache.logging.log4j.Logger $r9;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r14;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.net.URI;

        r3 := @parameter4: java.lang.String;

     label1:
        $r5 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r6 = interfaceinvoke $r5.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)>(r0, r1, null, z0, r2, r3);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r9 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Using SimpleLogger");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r13);

        $r14 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r14.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        $r15 = virtualinvoke $r14.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, r1, null, z0);

        return $r15;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static void shutdown()
    {
        staticinvoke <org.apache.logging.log4j.LogManager: void shutdown(boolean)>(0);

        return;
    }

    public static void shutdown(boolean)
    {
        boolean z0;
        org.apache.logging.log4j.spi.LoggerContext $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(boolean)>(z0);

        staticinvoke <org.apache.logging.log4j.LogManager: void shutdown(org.apache.logging.log4j.spi.LoggerContext)>($r0);

        return;
    }

    public static void shutdown(org.apache.logging.log4j.spi.LoggerContext)
    {
        org.apache.logging.log4j.spi.LoggerContext r0;
        boolean $z0;
        org.apache.logging.log4j.spi.Terminable $r1;

        r0 := @parameter0: org.apache.logging.log4j.spi.LoggerContext;

        if r0 == null goto label1;

        $z0 = r0 instanceof org.apache.logging.log4j.spi.Terminable;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.logging.log4j.spi.Terminable) r0;

        interfaceinvoke $r1.<org.apache.logging.log4j.spi.Terminable: void terminate()>();

     label1:
        return;
    }

    private static java.lang.String toLoggerName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

     label2:
        return $r2;
    }

    public static org.apache.logging.log4j.spi.LoggerContextFactory getFactory()
    {
        org.apache.logging.log4j.spi.LoggerContextFactory $r0;

        $r0 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        return $r0;
    }

    public static void setFactory(org.apache.logging.log4j.spi.LoggerContextFactory)
    {
        org.apache.logging.log4j.spi.LoggerContextFactory r0;

        r0 := @parameter0: org.apache.logging.log4j.spi.LoggerContextFactory;

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = r0;

        return;
    }

    public static org.apache.logging.log4j.Logger getFormatterLogger()
    {
        java.lang.Class $r0;
        org.apache.logging.log4j.Logger $r1;

        $r0 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r1 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getFormatterLogger(java.lang.Class)>($r0);

        return $r1;
    }

    public static org.apache.logging.log4j.Logger getFormatterLogger(java.lang.Class)
    {
        java.lang.Class r0, $r3;
        org.apache.logging.log4j.message.StringFormatterMessageFactory $r1;
        org.apache.logging.log4j.Logger $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

     label2:
        $r1 = <org.apache.logging.log4j.message.StringFormatterMessageFactory: org.apache.logging.log4j.message.StringFormatterMessageFactory INSTANCE>;

        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class,org.apache.logging.log4j.message.MessageFactory)>($r3, $r1);

        return $r2;
    }

    public static org.apache.logging.log4j.Logger getFormatterLogger(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.logging.log4j.message.StringFormatterMessageFactory $r1;
        org.apache.logging.log4j.Logger $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

     label2:
        $r1 = <org.apache.logging.log4j.message.StringFormatterMessageFactory: org.apache.logging.log4j.message.StringFormatterMessageFactory INSTANCE>;

        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class,org.apache.logging.log4j.message.MessageFactory)>($r3, $r1);

        return $r2;
    }

    public static org.apache.logging.log4j.Logger getFormatterLogger(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.message.StringFormatterMessageFactory $r1;
        java.lang.Class $r2;
        org.apache.logging.log4j.Logger $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r3 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getFormatterLogger(java.lang.Class)>($r2);

        goto label2;

     label1:
        $r1 = <org.apache.logging.log4j.message.StringFormatterMessageFactory: org.apache.logging.log4j.message.StringFormatterMessageFactory INSTANCE>;

        $r3 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>(r0, $r1);

     label2:
        return $r3;
    }

    private static java.lang.Class callerClass(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        return r0;

     label1:
        r1 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(3);

        if r1 != null goto label2;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No class provided, and an appropriate one cannot be found.");

        throw $r2;

     label2:
        return r1;
    }

    public static org.apache.logging.log4j.Logger getLogger()
    {
        java.lang.Class $r0;
        org.apache.logging.log4j.Logger $r1;

        $r0 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r1 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class)>($r0);

        return $r1;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.ClassLoader $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3;
        java.lang.String $r4;
        org.apache.logging.log4j.spi.ExtendedLogger $r5;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <org.apache.logging.log4j.LogManager: java.lang.Class callerClass(java.lang.Class)>(r0);

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader,boolean)>($r2, 0);

        $r4 = staticinvoke <org.apache.logging.log4j.LogManager: java.lang.String toLoggerName(java.lang.Class)>(r1);

        $r5 = interfaceinvoke $r3.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)>($r4);

        return $r5;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.Class, org.apache.logging.log4j.message.MessageFactory)
    {
        java.lang.Class r0, r2;
        org.apache.logging.log4j.message.MessageFactory r1;
        java.lang.ClassLoader $r3;
        org.apache.logging.log4j.spi.LoggerContext $r4;
        java.lang.String $r5;
        org.apache.logging.log4j.spi.ExtendedLogger $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        r2 = staticinvoke <org.apache.logging.log4j.LogManager: java.lang.Class callerClass(java.lang.Class)>(r0);

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.ClassLoader,boolean)>($r3, 0);

        $r5 = staticinvoke <org.apache.logging.log4j.LogManager: java.lang.String toLoggerName(java.lang.Class)>(r2);

        $r6 = interfaceinvoke $r4.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>($r5, r1);

        return $r6;
    }

    public static org.apache.logging.log4j.Logger getLogger(org.apache.logging.log4j.message.MessageFactory)
    {
        org.apache.logging.log4j.message.MessageFactory r0;
        java.lang.Class $r1;
        org.apache.logging.log4j.Logger $r2;

        r0 := @parameter0: org.apache.logging.log4j.message.MessageFactory;

        $r1 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class,org.apache.logging.log4j.message.MessageFactory)>($r1, r0);

        return $r2;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.Object)
    {
        java.lang.Object r0;
        org.apache.logging.log4j.Logger $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r2 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

     label2:
        $r1 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class)>($r2);

        return $r1;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.Object, org.apache.logging.log4j.message.MessageFactory)
    {
        java.lang.Object r0;
        org.apache.logging.log4j.message.MessageFactory r1;
        org.apache.logging.log4j.Logger $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

     label2:
        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class,org.apache.logging.log4j.message.MessageFactory)>($r3, r1);

        return $r2;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Class $r1;
        org.apache.logging.log4j.spi.LoggerContext $r2;
        org.apache.logging.log4j.Logger $r3;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r2 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(boolean)>(0);

        $r3 = interfaceinvoke $r2.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)>(r0);

        goto label2;

     label1:
        $r1 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r3 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class)>($r1);

     label2:
        return $r3;
    }

    public static org.apache.logging.log4j.Logger getLogger(java.lang.String, org.apache.logging.log4j.message.MessageFactory)
    {
        java.lang.String r0;
        org.apache.logging.log4j.message.MessageFactory r1;
        java.lang.Class $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3;
        org.apache.logging.log4j.Logger $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.logging.log4j.message.MessageFactory;

        if r0 == null goto label1;

        $r3 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContext getContext(boolean)>(0);

        $r4 = interfaceinvoke $r3.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)>(r0, r1);

        goto label2;

     label1:
        $r2 = staticinvoke <org.apache.logging.log4j.util.StackLocatorUtil: java.lang.Class getCallerClass(int)>(2);

        $r4 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.Class,org.apache.logging.log4j.message.MessageFactory)>($r2, r1);

     label2:
        return $r4;
    }

    protected static org.apache.logging.log4j.Logger getLogger(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        org.apache.logging.log4j.spi.LoggerContextFactory $r2;
        org.apache.logging.log4j.spi.LoggerContext $r3;
        org.apache.logging.log4j.spi.ExtendedLogger $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r3 = interfaceinvoke $r2.<org.apache.logging.log4j.spi.LoggerContextFactory: org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)>(r0, null, null, 0);

        $r4 = interfaceinvoke $r3.<org.apache.logging.log4j.spi.LoggerContext: org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)>(r1);

        return $r4;
    }

    public static org.apache.logging.log4j.Logger getRootLogger()
    {
        org.apache.logging.log4j.Logger $r0;

        $r0 = staticinvoke <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger getLogger(java.lang.String)>("");

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.logging.log4j.util.PropertiesUtil r0;
        java.lang.String r1, $r5, $r18, $r21, $r27, $r46;
        org.apache.logging.log4j.status.StatusLogger $r3;
        java.lang.Class $r4, $r17, $r26, r58;
        java.util.TreeMap $r6;
        boolean $z0, $z1, $z2, $z3;
        org.apache.logging.log4j.Logger $r7, $r20, $r36, $r45, $r49, $r51;
        org.apache.logging.log4j.simple.SimpleLoggerContextFactory $r8, $r37;
        java.lang.Iterable $r9;
        int $i0;
        java.lang.StringBuilder $r10, $r15, $r23, $r29, $r31;
        java.util.Set $r11;
        java.lang.Object $r12, $r13, $r22, $r24, $r30, $r33, $r34, $r38, $r40, $r42;
        org.apache.logging.log4j.spi.LoggerContextFactory $r14, $r16, $r25, $r35, $r43, $r54;
        java.lang.Integer $r39;
        java.lang.Exception $r44, $r48;
        java.net.URL $r47;
        java.lang.ClassNotFoundException $r50;
        java.util.Iterator r56, r60;
        org.apache.logging.log4j.spi.Provider r57;
        java.util.Map$Entry r61;

        <org.apache.logging.log4j.LogManager: java.lang.String ROOT_LOGGER_NAME> = "";

        <org.apache.logging.log4j.LogManager: java.lang.String FACTORY_PROPERTY_NAME> = "log4j2.loggerContextFactory";

        $r3 = staticinvoke <org.apache.logging.log4j.status.StatusLogger: org.apache.logging.log4j.status.StatusLogger getLogger()>();

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER> = $r3;

        $r4 = class "Lorg/apache/logging/log4j/LogManager;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        <org.apache.logging.log4j.LogManager: java.lang.String FQCN> = $r5;

        r0 = staticinvoke <org.apache.logging.log4j.util.PropertiesUtil: org.apache.logging.log4j.util.PropertiesUtil getProperties()>();

        r1 = virtualinvoke r0.<org.apache.logging.log4j.util.PropertiesUtil: java.lang.String getStringProperty(java.lang.String)>("log4j2.loggerContextFactory");

        if r1 == null goto label05;

     label01:
        $r42 = staticinvoke <org.apache.logging.log4j.util.LoaderUtil: java.lang.Object newCheckedInstanceOf(java.lang.String,java.lang.Class)>(r1, class "Lorg/apache/logging/log4j/spi/LoggerContextFactory;");

        $r43 = (org.apache.logging.log4j.spi.LoggerContextFactory) $r42;

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = $r43;

     label02:
        goto label05;

     label03:
        $r50 := @caughtexception;

        $r51 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r51.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object)>("Unable to locate configured LoggerContextFactory {}", r1);

        goto label05;

     label04:
        $r48 := @caughtexception;

        $r49 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r49.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to create configured LoggerContextFactory {}", r1, $r48);

     label05:
        $r54 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        if $r54 != null goto label17;

        $r6 = new java.util.TreeMap;

        specialinvoke $r6.<java.util.TreeMap: void <init>()>();

        $z0 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: boolean hasProviders()>();

        if $z0 == 0 goto label16;

        $r9 = staticinvoke <org.apache.logging.log4j.util.ProviderUtil: java.lang.Iterable getProviders()>();

        r56 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r38 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (org.apache.logging.log4j.spi.Provider) $r38;

        r58 = virtualinvoke r57.<org.apache.logging.log4j.spi.Provider: java.lang.Class loadLoggerContextFactory()>();

        if r58 == null goto label10;

     label07:
        $r39 = virtualinvoke r57.<org.apache.logging.log4j.spi.Provider: java.lang.Integer getPriority()>();

        $r40 = virtualinvoke r58.<java.lang.Class: java.lang.Object newInstance()>();

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r40);

     label08:
        goto label10;

     label09:
        $r44 := @caughtexception;

        $r45 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r46 = virtualinvoke r58.<java.lang.Class: java.lang.String getName()>();

        $r47 = virtualinvoke r57.<org.apache.logging.log4j.spi.Provider: java.net.URL getUrl()>();

        interfaceinvoke $r45.<org.apache.logging.log4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("Unable to create class {} specified in provider URL {}", $r46, $r47, $r44);

     label10:
        goto label06;

     label11:
        $z2 = interfaceinvoke $r6.<java.util.SortedMap: boolean isEmpty()>();

        if $z2 == 0 goto label12;

        $r36 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r36.<org.apache.logging.log4j.Logger: void error(java.lang.String)>("Log4j2 could not find a logging implementation. Please add log4j-core to the classpath. Using SimpleLogger to log to the console...");

        $r37 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r37.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = $r37;

        goto label17;

     label12:
        $i0 = interfaceinvoke $r6.<java.util.SortedMap: int size()>();

        if $i0 != 1 goto label13;

        $r33 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r34 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r33);

        $r35 = (org.apache.logging.log4j.spi.LoggerContextFactory) $r34;

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = $r35;

        goto label17;

     label13:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Multiple logging implementations found: \n");

        $r11 = interfaceinvoke $r6.<java.util.SortedMap: java.util.Set entrySet()>();

        r60 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r22 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (java.util.Map$Entry) $r22;

        $r23 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Factory: ");

        $r24 = interfaceinvoke r61.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (org.apache.logging.log4j.spi.LoggerContextFactory) $r24;

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Weighting: ");

        $r30 = interfaceinvoke r61.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label14;

     label15:
        $r12 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object lastKey()>();

        $r13 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (org.apache.logging.log4j.spi.LoggerContextFactory) $r13;

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = $r14;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using factory: ");

        $r16 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory>;

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        $r21 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r20.<org.apache.logging.log4j.Logger: void warn(java.lang.String)>($r21);

        goto label17;

     label16:
        $r7 = <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.Logger LOGGER>;

        interfaceinvoke $r7.<org.apache.logging.log4j.Logger: void error(java.lang.String)>("Log4j2 could not find a logging implementation. Please add log4j-core to the classpath. Using SimpleLogger to log to the console...");

        $r8 = new org.apache.logging.log4j.simple.SimpleLoggerContextFactory;

        specialinvoke $r8.<org.apache.logging.log4j.simple.SimpleLoggerContextFactory: void <init>()>();

        <org.apache.logging.log4j.LogManager: org.apache.logging.log4j.spi.LoggerContextFactory factory> = $r8;

     label17:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label07 to label08 with label09;
    }
}
