final class org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector extends java.lang.Object implements org.apache.flink.util.Visitor
{
    private final java.util.Set visited;
    private final java.util.Set dynamicPathOperations;

    public void <init>(java.util.Set)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector r0;
        java.util.Set r1;
        java.util.HashSet $r2;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set visited> = $r2;

        r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations> = r1;

        return;
    }

    public boolean preVisit(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector r0;
        org.apache.flink.api.common.operators.Operator r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        $r2 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set visited>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public void postVisit(org.apache.flink.api.common.operators.Operator)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector r0;
        org.apache.flink.api.common.operators.Operator r1, $r13, $r15, $r24, r33, r36;
        boolean $z0, $z1, $z3, $z4, $z5, $z6, $z7, $z11, $z12, $z13;
        java.lang.Class $r2, $r3, $r4, $r8;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.String $r9, $r11;
        java.util.Set $r12, $r14, $r19, $r20, $r21, $r22, $r23, $r28, $r29, $r30, $r37;
        java.util.Map $r16, $r25;
        java.util.Collection $r17, $r26;
        java.lang.Object $r18, $r27;
        org.apache.flink.api.common.operators.SingleInputOperator r31;
        java.util.Iterator r32, r35;
        org.apache.flink.api.common.operators.DualInputOperator r34;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector;

        r1 := @parameter0: org.apache.flink.api.common.operators.Operator;

        $z0 = r1 instanceof org.apache.flink.api.common.operators.SingleInputOperator;

        if $z0 == 0 goto label05;

        r31 = (org.apache.flink.api.common.operators.SingleInputOperator) r1;

        $r23 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        $r24 = virtualinvoke r31.<org.apache.flink.api.common.operators.SingleInputOperator: org.apache.flink.api.common.operators.Operator getInput()>();

        $z11 = interfaceinvoke $r23.<java.util.Set: boolean contains(java.lang.Object)>($r24);

        if $z11 == 0 goto label01;

        $r30 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r30.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label04;

     label01:
        $r25 = virtualinvoke r31.<org.apache.flink.api.common.operators.SingleInputOperator: java.util.Map getBroadcastInputs()>();

        $r26 = interfaceinvoke $r25.<java.util.Map: java.util.Collection values()>();

        r32 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z12 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label04;

        $r27 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.flink.api.common.operators.Operator) $r27;

        $r28 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        $z13 = interfaceinvoke $r28.<java.util.Set: boolean contains(java.lang.Object)>(r33);

        if $z13 == 0 goto label03;

        $r29 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label04;

     label03:
        goto label02;

     label04:
        goto label15;

     label05:
        $z1 = r1 instanceof org.apache.flink.api.common.operators.DualInputOperator;

        if $z1 == 0 goto label11;

        r34 = (org.apache.flink.api.common.operators.DualInputOperator) r1;

        $r12 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        $r13 = virtualinvoke r34.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator getFirstInput()>();

        $z4 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r13);

        if $z4 == 0 goto label06;

        $r22 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label10;

     label06:
        $r14 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        $r15 = virtualinvoke r34.<org.apache.flink.api.common.operators.DualInputOperator: org.apache.flink.api.common.operators.Operator getSecondInput()>();

        $z5 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>($r15);

        if $z5 == 0 goto label07;

        $r21 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label10;

     label07:
        $r16 = virtualinvoke r34.<org.apache.flink.api.common.operators.DualInputOperator: java.util.Map getBroadcastInputs()>();

        $r17 = interfaceinvoke $r16.<java.util.Map: java.util.Collection values()>();

        r35 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r18 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.apache.flink.api.common.operators.Operator) $r18;

        $r19 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        $z7 = interfaceinvoke $r19.<java.util.Set: boolean contains(java.lang.Object)>(r36);

        if $z7 == 0 goto label09;

        $r20 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label10;

     label09:
        goto label08;

     label10:
        goto label15;

     label11:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == class "Lorg/apache/flink/api/common/operators/base/BulkIterationBase$PartialSolutionPlaceHolder;" goto label12;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "Lorg/apache/flink/api/common/operators/base/DeltaIterationBase$WorksetPlaceHolder;" goto label12;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 != class "Lorg/apache/flink/api/common/operators/base/DeltaIterationBase$SolutionSetPlaceHolder;" goto label13;

     label12:
        $r37 = r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: java.util.Set dynamicPathOperations>;

        interfaceinvoke $r37.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label15;

     label13:
        $z3 = r1 instanceof org.apache.flink.api.common.operators.GenericDataSourceBase;

        if $z3 == 0 goto label14;

        goto label15;

     label14:
        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot handle operator type ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label15:
        return;
    }

    public volatile void postVisit(org.apache.flink.util.Visitable)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector r0;
        org.apache.flink.util.Visitable r1;
        org.apache.flink.api.common.operators.Operator $r2;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector;

        r1 := @parameter0: org.apache.flink.util.Visitable;

        $r2 = (org.apache.flink.api.common.operators.Operator) r1;

        virtualinvoke r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: void postVisit(org.apache.flink.api.common.operators.Operator)>($r2);

        return;
    }

    public volatile boolean preVisit(org.apache.flink.util.Visitable)
    {
        org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector r0;
        org.apache.flink.util.Visitable r1;
        org.apache.flink.api.common.operators.Operator $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector;

        r1 := @parameter0: org.apache.flink.util.Visitable;

        $r2 = (org.apache.flink.api.common.operators.Operator) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.CollectionExecutor$DynamicPathCollector: boolean preVisit(org.apache.flink.api.common.operators.Operator)>($r2);

        return $z0;
    }
}
