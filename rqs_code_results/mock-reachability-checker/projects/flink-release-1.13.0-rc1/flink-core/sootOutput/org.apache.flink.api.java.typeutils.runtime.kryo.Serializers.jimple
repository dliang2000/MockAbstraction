public class org.apache.flink.api.java.typeutils.runtime.kryo.Serializers extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.Serializers r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.Serializers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.ExecutionConfig, java.util.Set)
    {
        org.apache.flink.api.common.typeinfo.TypeInformation r0, $r5;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.util.Set r2;
        java.util.Iterator r3;
        org.apache.flink.api.java.typeutils.GenericTypeInfo r4, r11;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r6;
        org.apache.flink.api.common.typeutils.CompositeType $r7;
        java.lang.Object $r8;
        java.lang.Class $r9, $r10;
        org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo r13;

        r0 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter2: java.util.Set;

        $z0 = r0 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z0 == 0 goto label1;

        r11 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) r0;

        $r10 = virtualinvoke r11.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r10, r1, r2);

        goto label5;

     label1:
        $z1 = r0 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z1 == 0 goto label4;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = (org.apache.flink.api.common.typeutils.CompositeType) r0;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void getContainedGenericTypes(org.apache.flink.api.common.typeutils.CompositeType,java.util.List)>($r7, $r6);

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) $r8;

        $r9 = virtualinvoke r4.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class getTypeClass()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r9, r1, r2);

        goto label2;

     label3:
        goto label5;

     label4:
        $z2 = r0 instanceof org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo;

        if $z2 == 0 goto label5;

        r13 = (org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo) r0;

        $r5 = virtualinvoke r13.<org.apache.flink.api.java.typeutils.ObjectArrayTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation getComponentInfo()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r5, r1, r2);

     label5:
        return;
    }

    public static void recursivelyRegisterType(java.lang.Class, org.apache.flink.api.common.ExecutionConfig, java.util.Set)
    {
        java.lang.Class r0, $r8;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.util.Set r2;
        java.lang.reflect.Field[] r3;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Field r5;
        java.lang.reflect.Type r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.java.typeutils.AvroUtils $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter2: java.util.Set;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        if r0 != class "Ljava/lang/Object;" goto label2;

     label1:
        return;

     label2:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        if $z1 != 0 goto label3;

        return;

     label3:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label4;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r8, r1, r2);

        goto label8;

     label4:
        virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(r0);

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.java.typeutils.AvroUtils getAvroUtils()>();

        virtualinvoke $r7.<org.apache.flink.api.java.typeutils.AvroUtils: void addAvroSerializersIfRequired(org.apache.flink.api.common.ExecutionConfig,java.lang.Class)>(r1, r0);

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i3 = 0;

     label5:
        if i3 >= i0 goto label8;

        r5 = r3[i3];

        $i1 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z3 != 0 goto label7;

        $i2 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i2);

        if $z4 == 0 goto label6;

        goto label7;

     label6:
        r6 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterGenericType(java.lang.reflect.Type,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>(r6, r1, r2);

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        return;
    }

    private static void recursivelyRegisterGenericType(java.lang.reflect.Type, org.apache.flink.api.common.ExecutionConfig, java.util.Set)
    {
        java.lang.reflect.Type r0, r4, $r5, $r6;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.util.Set r2;
        java.lang.reflect.Type[] r3;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r7, r10;
        java.lang.reflect.ParameterizedType r8;
        java.lang.reflect.GenericArrayType r9;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        r2 := @parameter2: java.util.Set;

        $z0 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label4;

        r8 = (java.lang.reflect.ParameterizedType) r0;

        r3 = interfaceinvoke r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $z3 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: boolean isClassType(java.lang.reflect.Type)>(r4);

        if $z3 == 0 goto label2;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractionUtils: java.lang.Class typeToClass(java.lang.reflect.Type)>(r4);

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r7, r1, r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = interfaceinvoke r8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterGenericType(java.lang.reflect.Type,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r6, r1, r2);

        goto label6;

     label4:
        $z1 = r0 instanceof java.lang.reflect.GenericArrayType;

        if $z1 == 0 goto label5;

        r9 = (java.lang.reflect.GenericArrayType) r0;

        $r5 = interfaceinvoke r9.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterGenericType(java.lang.reflect.Type,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>($r5, r1, r2);

        goto label6;

     label5:
        $z2 = r0 instanceof java.lang.Class;

        if $z2 == 0 goto label6;

        r10 = (java.lang.Class) r0;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void recursivelyRegisterType(java.lang.Class,org.apache.flink.api.common.ExecutionConfig,java.util.Set)>(r10, r1, r2);

     label6:
        return;
    }

    private static void getContainedGenericTypes(org.apache.flink.api.common.typeutils.CompositeType, java.util.List)
    {
        org.apache.flink.api.common.typeutils.CompositeType r0, $r4;
        java.util.List r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2;
        int $i0, i1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.java.typeutils.GenericTypeInfo $r3;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.CompositeType;

        r1 := @parameter1: java.util.List;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: int getArity()>();

        if i1 >= $i0 goto label4;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeType: org.apache.flink.api.common.typeinfo.TypeInformation getTypeAt(int)>(i1);

        $z0 = r2 instanceof org.apache.flink.api.common.typeutils.CompositeType;

        if $z0 == 0 goto label2;

        $r4 = (org.apache.flink.api.common.typeutils.CompositeType) r2;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.Serializers: void getContainedGenericTypes(org.apache.flink.api.common.typeutils.CompositeType,java.util.List)>($r4, r1);

        goto label3;

     label2:
        $z1 = r2 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z1 == 0 goto label3;

        $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z2 != 0 goto label3;

        $r3 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) r2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }
}
