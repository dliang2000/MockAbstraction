public final class org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration extends org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.time.Time initialBackoff;
    private final org.apache.flink.api.common.time.Time maxBackoff;
    private final double backoffMultiplier;
    private final org.apache.flink.api.common.time.Time resetBackoffThreshold;
    private final double jitterFactor;

    public void <init>(org.apache.flink.api.common.time.Time, org.apache.flink.api.common.time.Time, double, org.apache.flink.api.common.time.Time, double)
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        org.apache.flink.api.common.time.Time r1, r2, r3;
        double d0, d1;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        r1 := @parameter0: org.apache.flink.api.common.time.Time;

        r2 := @parameter1: org.apache.flink.api.common.time.Time;

        d0 := @parameter2: double;

        r3 := @parameter3: org.apache.flink.api.common.time.Time;

        d1 := @parameter4: double;

        specialinvoke r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$RestartStrategyConfiguration: void <init>(org.apache.flink.api.common.restartstrategy.RestartStrategies$1)>(null);

        r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff> = r1;

        r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff> = r2;

        r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier> = d0;

        r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold> = r3;

        r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor> = d1;

        return;
    }

    public org.apache.flink.api.common.time.Time getInitialBackoff()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        org.apache.flink.api.common.time.Time $r1;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $r1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff>;

        return $r1;
    }

    public org.apache.flink.api.common.time.Time getMaxBackoff()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        org.apache.flink.api.common.time.Time $r1;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $r1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff>;

        return $r1;
    }

    public double getBackoffMultiplier()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        double $d0;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $d0 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier>;

        return $d0;
    }

    public org.apache.flink.api.common.time.Time getResetBackoffThreshold()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        org.apache.flink.api.common.time.Time $r1;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $r1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold>;

        return $r1;
    }

    public double getJitterFactor()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        double $d0;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $d0 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor>;

        return $d0;
    }

    public java.lang.String getDescription()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        java.lang.Object[] $r1;
        org.apache.flink.api.common.time.Time $r2, $r4, $r5;
        double $d0, $d1;
        java.lang.Double $r3, $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $r1 = newarray (java.lang.Object)[5];

        $r2 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff>;

        $r1[0] = $r2;

        $d0 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[1] = $r3;

        $r4 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff>;

        $r1[2] = $r4;

        $r5 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold>;

        $r1[3] = $r5;

        $d1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1[4] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Restart with exponential delay: starting at %s, increasing by %f, with maximum %s. Delay resets after %s with jitter %f", $r1);

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1;
        org.apache.flink.api.common.time.Time $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration) r1;

        $d1 = r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier>;

        $d0 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        if $i0 != 0 goto label4;

        $d3 = r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor>;

        $d2 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor>;

        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d3, $d2);

        if $i1 != 0 goto label4;

        $r6 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff>;

        $r5 = r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z0 == 0 goto label4;

        $r8 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff>;

        $r7 = r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z1 == 0 goto label4;

        $r10 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold>;

        $r9 = r2.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration r0;
        org.apache.flink.api.common.time.Time $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        double $d0, $d1;

        r0 := @this: org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration;

        $r1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time initialBackoff>;

        i8 = virtualinvoke $r1.<org.apache.flink.api.common.time.Time: int hashCode()>();

        $i0 = 31 * i8;

        $r2 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time maxBackoff>;

        $i1 = virtualinvoke $r2.<org.apache.flink.api.common.time.Time: int hashCode()>();

        i9 = $i0 + $i1;

        $i3 = 31 * i9;

        $d0 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double backoffMultiplier>;

        $i2 = (int) $d0;

        i10 = $i3 + $i2;

        $i4 = 31 * i10;

        $r3 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: org.apache.flink.api.common.time.Time resetBackoffThreshold>;

        $i5 = virtualinvoke $r3.<org.apache.flink.api.common.time.Time: int hashCode()>();

        i11 = $i4 + $i5;

        $i7 = 31 * i11;

        $d1 = r0.<org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: double jitterFactor>;

        $i6 = (int) $d1;

        i12 = $i7 + $i6;

        return i12;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.restartstrategy.RestartStrategies$ExponentialDelayRestartStrategyConfiguration: long serialVersionUID> = 1467941615941965194L;

        return;
    }
}
