class org.powermock.reflect.internal.ParametersMatcher extends java.lang.Object
{
    private final java.lang.Class[] parameterTypes;
    private final java.lang.Object[] arguments;
    private boolean isVarArgs;

    public void <init>(boolean, java.lang.Class[], java.lang.Object[])
    {
        org.powermock.reflect.internal.ParametersMatcher r0;
        boolean z0;
        java.lang.Class[] r1;
        java.lang.Object[] r2;

        r0 := @this: org.powermock.reflect.internal.ParametersMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs> = z0;

        r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes> = r1;

        r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Object[] arguments> = r2;

        return;
    }

    public boolean match()
    {
        org.powermock.reflect.internal.ParametersMatcher r0;
        java.lang.Object[] $r1, $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r3, $r5, $r7;
        int $i0, $i1, $i2;

        r0 := @this: org.powermock.reflect.internal.ParametersMatcher;

        $r1 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Object[] arguments>;

        if $r1 == null goto label2;

        $r3 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $i1 = lengthof $r3;

        $r4 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Object[] arguments>;

        $i0 = lengthof $r4;

        if $i1 != $i0 goto label2;

        $r5 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $i2 = lengthof $r5;

        if $i2 != 0 goto label1;

        return 1;

     label1:
        $z1 = r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs>;

        $r7 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $r6 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Object[] arguments>;

        $z2 = virtualinvoke r0.<org.powermock.reflect.internal.ParametersMatcher: boolean checkArgumentTypesMatchParameterTypes(boolean,java.lang.Class[],java.lang.Object[])>($z1, $r7, $r6);

        return $z2;

     label2:
        $r2 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Object[] arguments>;

        $z0 = virtualinvoke r0.<org.powermock.reflect.internal.ParametersMatcher: boolean doesParameterTypesMatchForVarArgsInvocation(java.lang.Object[])>($r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    boolean checkArgumentTypesMatchParameterTypes(boolean, java.lang.Class[], java.lang.Object[])
    {
        org.powermock.reflect.internal.ParametersMatcher r0;
        boolean z0, $z1, $z2, $z3, $z4, z5, $z6;
        java.lang.Class[] r1;
        java.lang.Object[] r2;
        java.lang.Object r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, r10;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.powermock.reflect.internal.ParametersMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        if r1 != null goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameter types cannot be null");

        throw $r9;

     label01:
        if z0 != 0 goto label02;

        $i6 = lengthof r2;

        $i5 = lengthof r1;

        if $i6 == $i5 goto label02;

        return 0;

     label02:
        i7 = 0;

     label03:
        $i8 = lengthof r2;

        if i7 >= $i8 goto label12;

        r3 = r2[i7];

        if r3 != null goto label06;

        $i3 = lengthof r1;

        if i7 < $i3 goto label04;

        $i4 = lengthof r1;

        i9 = $i4 - 1;

        goto label05;

     label04:
        i9 = i7;

     label05:
        r10 = r1[i9];

        $z4 = virtualinvoke r10.<java.lang.Class: boolean isPrimitive()>();

        if $z4 == 0 goto label11;

        return 0;

     label06:
        $i0 = lengthof r1;

        if i7 < $i0 goto label08;

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $r7 = r1[$i2];

        $r8 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r3);

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>($r7, $r8);

        if $z3 == 0 goto label07;

        goto label11;

     label07:
        return 0;

     label08:
        $r4 = r1[i7];

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r3);

        z5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>($r4, $r5);

        $r6 = r1[i7];

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Class;");

        if $z1 == 0 goto label09;

        $z2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r3);

        if $z2 == 0 goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        if z5 != 0 goto label11;

        if $z6 != 0 goto label11;

        return 0;

     label11:
        i7 = i7 + 1;

        goto label03;

     label12:
        return 1;
    }

    boolean doesParameterTypesMatchForVarArgsInvocation(java.lang.Object[])
    {
        org.powermock.reflect.internal.ParametersMatcher r0;
        java.lang.Object[] r1;
        java.lang.Class r2, r4, r5, $r11;
        java.lang.Object r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class[] $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.powermock.reflect.internal.ParametersMatcher;

        r1 := @parameter0: java.lang.Object[];

        $z0 = r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 < 1 goto label1;

        $r7 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        if $r7 == null goto label1;

        $r8 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $i1 = lengthof $r8;

        if $i1 < 1 goto label1;

        $r10 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $r9 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $i2 = lengthof $r9;

        $i3 = $i2 - 1;

        $r11 = $r10[$i3];

        r2 = virtualinvoke $r11.<java.lang.Class: java.lang.Class getComponentType()>();

        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        r3 = r1[$i5];

        if r3 == null goto label1;

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getTypeAsPrimitiveIfWrapped(java.lang.Object)>(r3);

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getTypeAsPrimitiveIfWrapped(java.lang.Object)>(r2);

        $z3 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs> = $z3;

     label1:
        $z4 = r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs>;

        if $z4 == 0 goto label2;

        $z1 = r0.<org.powermock.reflect.internal.ParametersMatcher: boolean isVarArgs>;

        $r6 = r0.<org.powermock.reflect.internal.ParametersMatcher: java.lang.Class[] parameterTypes>;

        $z2 = virtualinvoke r0.<org.powermock.reflect.internal.ParametersMatcher: boolean checkArgumentTypesMatchParameterTypes(boolean,java.lang.Class[],java.lang.Object[])>($z1, $r6, r1);

        if $z2 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }
}
