class org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem extends org.apache.flink.core.fs.local.LocalFileSystem
{
    private final org.apache.flink.core.testutils.OneShotLatch deleteTriggerLatch;
    private final org.apache.flink.core.testutils.OneShotLatch mkdirsTriggerLatch;
    private final org.apache.flink.core.testutils.OneShotLatch deleteAwaitLatch;
    private final org.apache.flink.core.testutils.OneShotLatch mkdirsAwaitLatch;

    void <init>(org.apache.flink.core.testutils.OneShotLatch, org.apache.flink.core.testutils.OneShotLatch, org.apache.flink.core.testutils.OneShotLatch, org.apache.flink.core.testutils.OneShotLatch)
    {
        org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem r0;
        org.apache.flink.core.testutils.OneShotLatch r1, r2, r3, r4;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem;

        r1 := @parameter0: org.apache.flink.core.testutils.OneShotLatch;

        r2 := @parameter1: org.apache.flink.core.testutils.OneShotLatch;

        r3 := @parameter2: org.apache.flink.core.testutils.OneShotLatch;

        r4 := @parameter3: org.apache.flink.core.testutils.OneShotLatch;

        specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: void <init>()>();

        r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch deleteTriggerLatch> = r1;

        r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch mkdirsTriggerLatch> = r2;

        r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch deleteAwaitLatch> = r3;

        r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch mkdirsAwaitLatch> = r4;

        return;
    }

    public boolean delete(org.apache.flink.core.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0, $z1;
        org.apache.flink.core.testutils.OneShotLatch $r3, $r4;
        java.lang.InterruptedException $r5;
        java.lang.Thread $r6;
        java.io.IOException $r7;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        $r3 = r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch deleteTriggerLatch>;

        virtualinvoke $r3.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

     label1:
        $r4 = r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch deleteAwaitLatch>;

        virtualinvoke $r4.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("interrupted");

        throw $r7;

     label4:
        $z1 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>(r1, z0);

        return $z1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public boolean mkdirs(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        org.apache.flink.core.testutils.OneShotLatch $r3, $r4;
        boolean $z0;
        java.lang.InterruptedException $r5;
        java.lang.Thread $r6;
        java.io.IOException $r7;

        r0 := @this: org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        $r3 = r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch mkdirsTriggerLatch>;

        virtualinvoke $r3.<org.apache.flink.core.testutils.OneShotLatch: void trigger()>();

     label1:
        $r4 = r0.<org.apache.flink.core.fs.InitOutputPathTest$SyncedFileSystem: org.apache.flink.core.testutils.OneShotLatch mkdirsAwaitLatch>;

        virtualinvoke $r4.<org.apache.flink.core.testutils.OneShotLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("interrupted");

        throw $r7;

     label4:
        $z0 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r1);

        return $z0;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
