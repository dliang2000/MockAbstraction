public class javassist.bytecode.ByteArray extends java.lang.Object
{

    public void <init>()
    {
        javassist.bytecode.ByteArray r0;

        r0 := @this: javassist.bytecode.ByteArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int readU16bit(byte[], int)
    {
        byte[] r0;
        int i0, $i3, $i6, $i7;
        byte $b1, $b4;
        short $s2, $s5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $s2 = $b1 & 255;

        $i6 = $s2 << 8;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s5 = $b4 & 255;

        $i7 = $i6 | $s5;

        return $i7;
    }

    public static int readS16bit(byte[], int)
    {
        byte[] r0;
        int i0, $i2, $i5, $i6;
        byte $b1, $b3;
        short $s4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $i5 = $b1 << 8;

        $i2 = i0 + 1;

        $b3 = r0[$i2];

        $s4 = $b3 & 255;

        $i6 = $i5 | $s4;

        return $i6;
    }

    public static void write16bit(int, byte[], int)
    {
        int i0, i1, $i2, $i5;
        byte[] r0;
        byte $b3, $b4;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $i2 = i0 >>> 8;

        $b3 = (byte) $i2;

        r0[i1] = $b3;

        $i5 = i1 + 1;

        $b4 = (byte) i0;

        r0[$i5] = $b4;

        return;
    }

    public static int read32bit(byte[], int)
    {
        byte[] r0;
        int i0, $i2, $i5, $i6, $i7, $i10, $i11, $i12, $i15, $i16;
        byte $b1, $b3, $b8, $b13;
        short $s4, $s9, $s14;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $i6 = $b1 << 24;

        $i2 = i0 + 1;

        $b3 = r0[$i2];

        $s4 = $b3 & 255;

        $i5 = $s4 << 16;

        $i11 = $i6 | $i5;

        $i7 = i0 + 2;

        $b8 = r0[$i7];

        $s9 = $b8 & 255;

        $i10 = $s9 << 8;

        $i15 = $i11 | $i10;

        $i12 = i0 + 3;

        $b13 = r0[$i12];

        $s14 = $b13 & 255;

        $i16 = $i15 | $s14;

        return $i16;
    }

    public static void write32bit(int, byte[], int)
    {
        int i0, i1, $i2, $i4, $i6, $i7, $i9, $i11;
        byte[] r0;
        byte $b3, $b5, $b8, $b10;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $i2 = i0 >>> 24;

        $b3 = (byte) $i2;

        r0[i1] = $b3;

        $i6 = i1 + 1;

        $i4 = i0 >>> 16;

        $b5 = (byte) $i4;

        r0[$i6] = $b5;

        $i9 = i1 + 2;

        $i7 = i0 >>> 8;

        $b8 = (byte) $i7;

        r0[$i9] = $b8;

        $i11 = i1 + 3;

        $b10 = (byte) i0;

        r0[$i11] = $b10;

        return;
    }

    static void copy32bit(byte[], int, byte[], int)
    {
        byte[] r0, r1;
        int i0, i1, $i3, $i5, $i6, $i8, $i9, $i11;
        byte $b2, $b4, $b7, $b10;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        $b2 = r0[i0];

        r1[i1] = $b2;

        $i5 = i1 + 1;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        r1[$i5] = $b4;

        $i8 = i1 + 2;

        $i6 = i0 + 2;

        $b7 = r0[$i6];

        r1[$i8] = $b7;

        $i11 = i1 + 3;

        $i9 = i0 + 3;

        $b10 = r0[$i9];

        r1[$i11] = $b10;

        return;
    }
}
