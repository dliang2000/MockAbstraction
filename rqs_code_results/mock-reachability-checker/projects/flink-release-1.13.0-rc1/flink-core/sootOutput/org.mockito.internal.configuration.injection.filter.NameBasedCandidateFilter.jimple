public class org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter extends java.lang.Object implements org.mockito.internal.configuration.injection.filter.MockCandidateFilter
{
    private final org.mockito.internal.configuration.injection.filter.MockCandidateFilter next;

    public void <init>(org.mockito.internal.configuration.injection.filter.MockCandidateFilter)
    {
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter r0;
        org.mockito.internal.configuration.injection.filter.MockCandidateFilter r1;

        r0 := @this: org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        r1 := @parameter0: org.mockito.internal.configuration.injection.filter.MockCandidateFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: org.mockito.internal.configuration.injection.filter.MockCandidateFilter next> = r1;

        return;
    }

    public org.mockito.internal.configuration.injection.filter.OngoingInjector filterCandidate(java.util.Collection, java.lang.reflect.Field, java.util.List, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter r0;
        java.util.Collection r1, $r8;
        java.lang.reflect.Field r2;
        java.util.List r3;
        java.lang.Object r4;
        int $i0;
        org.mockito.internal.configuration.injection.filter.MockCandidateFilter $r5;
        boolean $z0, $z1;
        org.mockito.internal.configuration.injection.filter.OngoingInjector $r6, $r7;

        r0 := @this: org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Object;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 != 1 goto label1;

        $z1 = specialinvoke r0.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: boolean anotherCandidateMatchesMockName(java.util.Collection,java.lang.reflect.Field,java.util.List)>(r1, r2, r3);

        if $z1 == 0 goto label1;

        $r7 = <org.mockito.internal.configuration.injection.filter.OngoingInjector: org.mockito.internal.configuration.injection.filter.OngoingInjector 'nop'>;

        return $r7;

     label1:
        $r5 = r0.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: org.mockito.internal.configuration.injection.filter.MockCandidateFilter next>;

        $z0 = specialinvoke r0.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: boolean tooMany(java.util.Collection)>(r1);

        if $z0 == 0 goto label2;

        $r8 = specialinvoke r0.<org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter: java.util.List selectMatchingName(java.util.Collection,java.lang.reflect.Field)>(r1, r2);

        goto label3;

     label2:
        $r8 = r1;

     label3:
        $r6 = interfaceinvoke $r5.<org.mockito.internal.configuration.injection.filter.MockCandidateFilter: org.mockito.internal.configuration.injection.filter.OngoingInjector filterCandidate(java.util.Collection,java.lang.reflect.Field,java.util.List,java.lang.Object)>($r8, r2, r3, r4);

        return $r6;
    }

    private boolean tooMany(java.util.Collection)
    {
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private java.util.List selectMatchingName(java.util.Collection, java.lang.reflect.Field)
    {
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter r0;
        java.util.Collection r1;
        java.lang.reflect.Field r2;
        java.util.Iterator r4;
        java.lang.Object r5;
        java.util.ArrayList $r6;
        boolean $z0, $z1;
        java.lang.String $r7, $r9;
        org.mockito.mock.MockName $r8;

        r0 := @this: org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.reflect.Field;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r7 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r8 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>(r5);

        $r9 = interfaceinvoke $r8.<org.mockito.mock.MockName: java.lang.String toString()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r5);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    private boolean anotherCandidateMatchesMockName(java.util.Collection, java.lang.reflect.Field, java.util.List)
    {
        org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter r0;
        java.util.Collection r1;
        java.lang.reflect.Field r2, r6;
        java.util.List r3;
        java.lang.String r4, $r13;
        java.util.Iterator r5, $r7;
        java.lang.Object $r8, $r10;
        org.mockito.mock.MockName $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r11, $r12;

        r0 := @this: org.mockito.internal.configuration.injection.filter.NameBasedCandidateFilter;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 := @parameter2: java.util.List;

        $r7 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = staticinvoke <org.mockito.internal.util.MockUtil: org.mockito.mock.MockName getMockName(java.lang.Object)>($r8);

        r4 = interfaceinvoke $r9.<org.mockito.mock.MockName: java.lang.String toString()>();

        r5 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.reflect.Field) $r10;

        $z1 = virtualinvoke r6.<java.lang.reflect.Field: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        $r11 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r12 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label2;

        $r13 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }
}
