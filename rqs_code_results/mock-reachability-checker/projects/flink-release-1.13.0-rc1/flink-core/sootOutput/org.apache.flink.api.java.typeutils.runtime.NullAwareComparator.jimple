public class org.apache.flink.api.java.typeutils.runtime.NullAwareComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator;
    private final boolean order;
    private final int flatFields;
    private boolean nullReference;

    public void <init>(org.apache.flink.api.common.typeutils.TypeComparator, boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference> = 0;

        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order> = z0;

        $r2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()>();

        $i0 = lengthof $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int flatFields> = $i0;

        return;
    }

    public int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.TypeComparator $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i0 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r1);

        return $i0;

     label1:
        return 0;
    }

    public void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.TypeComparator $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference> = 1;

        goto label2;

     label1:
        r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference> = 0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: void setReference(java.lang.Object)>(r1);

     label2:
        return;
    }

    public boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeComparator $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $z2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference>;

        if $z2 == 0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference>;

        if $z0 == 0 goto label3;

     label2:
        return 0;

     label3:
        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $z1 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: boolean equalToReference(java.lang.Object)>(r1);

        return $z1;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0, r2;
        org.apache.flink.api.common.typeutils.TypeComparator r1, $r3, $r4;
        boolean z0, $z1, $z2, $z3, $z4;
        int $i0;
        byte $b1, $b2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        r2 = (org.apache.flink.api.java.typeutils.runtime.NullAwareComparator) r1;

        z0 = r2.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference>;

        $z1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference>;

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        return 0;

     label1:
        $z2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean nullReference>;

        if $z2 == 0 goto label4;

        $z4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        if $z4 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = -1;

     label3:
        return $b1;

     label4:
        if z0 == 0 goto label7;

        $z3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        if $z3 == 0 goto label5;

        $b2 = -1;

        goto label6;

     label5:
        $b2 = 1;

     label6:
        return $b2;

     label7:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i0 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeComparator: int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)>($r3);

        return $i0;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.api.common.typeutils.TypeComparator $r3;
        int $i0;
        boolean $z0, $z1;
        byte $b1, $b2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        if r2 != null goto label1;

        return 0;

     label1:
        if r1 != null goto label4;

        $z1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        if $z1 == 0 goto label2;

        $b1 = -1;

        goto label3;

     label2:
        $b1 = 1;

     label3:
        return $b1;

     label4:
        if r2 != null goto label7;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        if $z0 == 0 goto label5;

        $b2 = 1;

        goto label6;

     label5:
        $b2 = -1;

     label6:
        return $b2;

     label7:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        return $i0;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Comparator does not support null-aware serialized comparision.");

        throw $r3;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean supportsNormalizedKey()>();

        return $z0;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        int i0, $i1;
        org.apache.flink.api.common.typeutils.TypeComparator $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeComparator: int getNormalizeKeyLen()>();

        if i0 != 2147483647 goto label1;

        return 2147483647;

     label1:
        $i1 = i0 + 1;

        return $i1;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        int i0, $i1;
        org.apache.flink.api.common.typeutils.TypeComparator $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i1 = i0 - 1;

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean isNormalizedKeyPrefixOnly(int)>($i1);

        return $z0;
    }

    public void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.flink.api.common.typeutils.TypeComparator $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 <= 0 goto label4;

        if r1 != null goto label3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(i0, 0);

        i7 = 0;

     label1:
        $i4 = i1 - 1;

        if i7 >= $i4 goto label2;

        $i5 = i0 + 1;

        $i6 = $i5 + i7;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i6, 0);

        i7 = i7 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void putBoolean(int,boolean)>(i0, 1);

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i3 = i0 + 1;

        $i2 = i1 - 1;

        virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: void putNormalizedKey(java.lang.Object,org.apache.flink.core.memory.MemorySegment,int,int)>(r1, r2, $i3, $i2);

     label4:
        return;
    }

    public void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Record serialization with leading normalized keys not supported.");

        throw $r3;
    }

    public java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Record deserialization with leading normalized keys not supported.");

        throw $r3;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $z0 = virtualinvoke $r1.<org.apache.flink.api.common.typeutils.TypeComparator: boolean invertNormalizedKey()>();

        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0, $r1;
        org.apache.flink.api.common.typeutils.TypeComparator $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: org.apache.flink.api.common.typeutils.TypeComparator duplicate()>();

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: void <init>(org.apache.flink.api.common.typeutils.TypeComparator,boolean)>($r3, $z0);

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.apache.flink.api.common.typeutils.TypeComparator $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        if r1 != null goto label3;

        i5 = 0;

     label1:
        $i2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int flatFields>;

        if i5 >= $i2 goto label2;

        $i4 = i0 + i5;

        r2[$i4] = null;

        i5 = i5 + 1;

        goto label1;

     label2:
        $i3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: int flatFields>;

        return $i3;

     label3:
        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $i1 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeComparator: int extractKeys(java.lang.Object,java.lang.Object[],int)>(r1, r2, i0);

        return $i1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.java.typeutils.runtime.NullAwareComparator r0, $r6;
        org.apache.flink.api.common.typeutils.TypeComparator[] r2;
        java.util.ArrayList $r3;
        org.apache.flink.api.common.typeutils.TypeComparator $r4, $r5, $r8, $r9;
        boolean $z0, $z2;
        int $i0, i1, $i2;
        java.lang.Object $r7;
        org.apache.flink.api.common.typeutils.CompositeTypeComparator $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $z0 = $r4 instanceof org.apache.flink.api.common.typeutils.CompositeTypeComparator;

        if $z0 == 0 goto label1;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        $r10 = (org.apache.flink.api.common.typeutils.CompositeTypeComparator) $r9;

        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.CompositeTypeComparator: void getFlatComparator(java.util.List)>($r3);

        goto label2;

     label1:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: org.apache.flink.api.common.typeutils.TypeComparator wrappedComparator>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[$i0];

        i1 = 0;

     label3:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label4;

        $r6 = new org.apache.flink.api.java.typeutils.runtime.NullAwareComparator;

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r8 = (org.apache.flink.api.common.typeutils.TypeComparator) $r7;

        $z2 = r0.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: boolean order>;

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: void <init>(org.apache.flink.api.common.typeutils.TypeComparator,boolean)>($r8, $z2);

        r2[i1] = $r6;

        i1 = i1 + 1;

        goto label3;

     label4:
        return r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.NullAwareComparator: long serialVersionUID> = 1L;

        return;
    }
}
