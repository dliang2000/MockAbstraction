public class org.hamcrest.MatcherAssert extends java.lang.Object
{

    public void <init>()
    {
        org.hamcrest.MatcherAssert r0;

        r0 := @this: org.hamcrest.MatcherAssert;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertThat(java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.hamcrest.Matcher;

        staticinvoke <org.hamcrest.MatcherAssert: void assertThat(java.lang.String,java.lang.Object,org.hamcrest.Matcher)>("", r0, r1);

        return;
    }

    public static void assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher)
    {
        java.lang.String r0, $r10;
        java.lang.Object r1;
        org.hamcrest.Matcher r2;
        boolean $z0;
        org.hamcrest.StringDescription $r4;
        org.hamcrest.Description $r5, $r6, $r7;
        java.lang.AssertionError $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.hamcrest.Matcher;

        $z0 = interfaceinvoke r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new org.hamcrest.StringDescription;

        specialinvoke $r4.<org.hamcrest.StringDescription: void <init>()>();

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(r0);

        $r6 = interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\nExpected: ");

        $r7 = interfaceinvoke $r6.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>(r2);

        interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("\n     but: ");

        interfaceinvoke r2.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, $r4);

        $r9 = new java.lang.AssertionError;

        $r10 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r9;

     label1:
        return;
    }

    public static void assertThat(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        java.lang.AssertionError $r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>(r0);

        throw $r1;

     label1:
        return;
    }
}
