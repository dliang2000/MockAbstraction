public abstract class org.joda.time.field.BaseDateTimeField extends org.joda.time.DateTimeField
{
    private final org.joda.time.DateTimeFieldType iType;

    protected void <init>(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DateTimeFieldType r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        specialinvoke r0.<org.joda.time.DateTimeField: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The type must not be null");

        throw $r2;

     label1:
        r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> = r1;

        return;
    }

    public final org.joda.time.DateTimeFieldType getType()
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DateTimeFieldType $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        return $r1;
    }

    public final java.lang.String getName()
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.DateTimeFieldType $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>;

        $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        return $r2;
    }

    public final boolean isSupported()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return 1;
    }

    public abstract int get(long);

    public java.lang.String getAsText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        java.util.Locale r1;
        int $i1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i1, r1);

        return $r2;
    }

    public final java.lang.String getAsText(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getAsText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0;
        java.util.Locale r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r2);

        return $r3;
    }

    public final java.lang.String getAsText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        java.util.Locale r2;
        org.joda.time.DateTimeFieldType $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>(r1, $i0, r2);

        return $r4;
    }

    public java.lang.String getAsText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int i0;
        java.util.Locale r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r2;
    }

    public java.lang.String getAsShortText(long, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        java.util.Locale r1;
        int $i1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.Locale;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1);

        return $r2;
    }

    public final java.lang.String getAsShortText(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, null);

        return $r1;
    }

    public java.lang.String getAsShortText(org.joda.time.ReadablePartial, int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0;
        java.util.Locale r2;
        java.lang.String $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r2);

        return $r3;
    }

    public final java.lang.String getAsShortText(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        java.util.Locale r2;
        org.joda.time.DateTimeFieldType $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: java.util.Locale;

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r3);

        $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>(r1, $i0, r2);

        return $r4;
    }

    public java.lang.String getAsShortText(int, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int i0;
        java.util.Locale r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1);

        return $r2;
    }

    public long add(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l2;
        int i1;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1);

        return $l2;
    }

    public long add(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l1, $l2;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1);

        return $l2;
    }

    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i27;
        int[] $r2, r15;
        long $l4, $l15, l26, l28;
        byte $b5, $b16;
        org.joda.time.DurationField $r3, $r5, $r9, $r11;
        org.joda.time.DurationFieldType $r4, $r6, $r10, $r12;
        java.lang.IllegalArgumentException $r7, $r8, $r13, $r14;
        org.joda.time.DateTimeField r16;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r15 := @parameter2: int[];

        i24 := @parameter3: int;

        if i24 != 0 goto label01;

        return r15;

     label01:
        r16 = null;

     label02:
        if i24 <= 0 goto label06;

        i25 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r15);

        $i13 = r15[i0];

        $i14 = $i13 + i24;

        l26 = (long) $i14;

        $l15 = (long) i25;

        $b16 = l26 cmp $l15;

        if $b16 > 0 goto label03;

        $i23 = (int) l26;

        r15[i0] = $i23;

        goto label06;

     label03:
        if r16 != null goto label05;

        if i0 != 0 goto label04;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r14;

     label04:
        $i22 = i0 - 1;

        r16 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i22);

        $r9 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r10 = virtualinvoke $r9.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r11 = virtualinvoke r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r10 == $r12 goto label05;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r13;

     label05:
        $i18 = i25 + 1;

        $i17 = r15[i0];

        $i19 = $i18 - $i17;

        i24 = i24 - $i19;

        $i20 = i0 - 1;

        r15 = virtualinvoke r16.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i20, r15, 1);

        $i21 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r15);

        r15[i0] = $i21;

        goto label02;

     label06:
        if i24 >= 0 goto label10;

        i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r15);

        $i2 = r15[i0];

        $i3 = $i2 + i24;

        l28 = (long) $i3;

        $l4 = (long) i27;

        $b5 = l28 cmp $l4;

        if $b5 < 0 goto label07;

        $i12 = (int) l28;

        r15[i0] = $i12;

        goto label10;

     label07:
        if r16 != null goto label09;

        if i0 != 0 goto label08;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add");

        throw $r8;

     label08:
        $i11 = i0 - 1;

        r16 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i11);

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r5 = virtualinvoke r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r4 == $r6 goto label09;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r7;

     label09:
        $i7 = i27 - 1;

        $i6 = r15[i0];

        $i8 = $i7 - $i6;

        i24 = i24 - $i8;

        $i9 = i0 - 1;

        r15 = virtualinvoke r16.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i9, r15, -1);

        $i10 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r15);

        r15[i0] = $i10;

        goto label06;

     label10:
        $i1 = r15[i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r15, $i1);

        return $r2;
    }

    public int[] addWrapPartial(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i35;
        int[] $r2, r13;
        long $l4, $l19, l34, l36;
        byte $b5, $b20;
        org.joda.time.DurationField $r3, $r5, $r8, $r10;
        org.joda.time.DurationFieldType $r4, $r6, $r9, $r11;
        java.lang.IllegalArgumentException $r7, $r12;
        org.joda.time.DateTimeField r14;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r13 := @parameter2: int[];

        i32 := @parameter3: int;

        if i32 != 0 goto label01;

        return r13;

     label01:
        r14 = null;

     label02:
        if i32 <= 0 goto label06;

        i33 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        $i17 = r13[i0];

        $i18 = $i17 + i32;

        l34 = (long) $i18;

        $l19 = (long) i33;

        $b20 = l34 cmp $l19;

        if $b20 > 0 goto label03;

        $i31 = (int) l34;

        r13[i0] = $i31;

        goto label06;

     label03:
        if r14 != null goto label05;

        if i0 != 0 goto label04;

        $i28 = i33 + 1;

        $i27 = r13[i0];

        $i29 = $i28 - $i27;

        i32 = i32 - $i29;

        $i30 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        r13[i0] = $i30;

        goto label02;

     label04:
        $i26 = i0 - 1;

        r14 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i26);

        $r8 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r9 = virtualinvoke $r8.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r10 = virtualinvoke r14.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r11 = virtualinvoke $r10.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r9 == $r11 goto label05;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r12;

     label05:
        $i22 = i33 + 1;

        $i21 = r13[i0];

        $i23 = $i22 - $i21;

        i32 = i32 - $i23;

        $i24 = i0 - 1;

        r13 = virtualinvoke r14.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i24, r13, 1);

        $i25 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        r13[i0] = $i25;

        goto label02;

     label06:
        if i32 >= 0 goto label10;

        i35 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        $i2 = r13[i0];

        $i3 = $i2 + i32;

        l36 = (long) $i3;

        $l4 = (long) i35;

        $b5 = l36 cmp $l4;

        if $b5 < 0 goto label07;

        $i16 = (int) l36;

        r13[i0] = $i16;

        goto label10;

     label07:
        if r14 != null goto label09;

        if i0 != 0 goto label08;

        $i13 = i35 - 1;

        $i12 = r13[i0];

        $i14 = $i13 - $i12;

        i32 = i32 - $i14;

        $i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        r13[i0] = $i15;

        goto label06;

     label08:
        $i11 = i0 - 1;

        r14 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i11);

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>();

        $r4 = virtualinvoke $r3.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r5 = virtualinvoke r14.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>();

        $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        if $r4 == $r6 goto label09;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add");

        throw $r7;

     label09:
        $i7 = i35 - 1;

        $i6 = r13[i0];

        $i8 = $i7 - $i6;

        i32 = i32 - $i8;

        $i9 = i0 - 1;

        r13 = virtualinvoke r14.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i9, r13, -1);

        $i10 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r13);

        r13[i0] = $i10;

        goto label06;

     label10:
        $i1 = r13[i0];

        $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r13, $i1);

        return $r2;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l6;
        int i1, i2, i3, $i4, $i5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0);

        $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(long)>(l0);

        $i5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(long)>(l0);

        i3 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>(i2, i1, $i4, $i5);

        $l6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l0, i3);

        return $l6;
    }

    public int[] addWrapField(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1, i2, i3, $i4, $i5;
        int[] r2, $r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i1 := @parameter3: int;

        i2 = r2[i0];

        $i4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1);

        $i5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1);

        i3 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>(i2, i1, $i4, $i5);

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i3);

        return $r3;
    }

    public int getDifference(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l1;
        org.joda.time.DurationField $r1;
        int $i2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $i2 = virtualinvoke $r1.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l1);

        return $i2;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l1, $l2;
        org.joda.time.DurationField $r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>();

        $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long getDifferenceAsLong(long,long)>(l0, l1);

        return $l2;
    }

    public abstract long set(long, int);

    public int[] set(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        int[] r2;
        org.joda.time.DateTimeField r3;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i1 := @parameter3: int;

        $i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3);

        r2[i0] = i1;

        i11 = i0 + 1;

     label1:
        $i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        if i11 >= $i4 goto label4;

        r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i11);

        $i5 = r2[i11];

        $i6 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if $i5 <= $i6 goto label2;

        $i10 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        r2[i11] = $i10;

     label2:
        $i7 = r2[i11];

        $i8 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        if $i7 >= $i8 goto label3;

        $i9 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2);

        r2[i11] = $i9;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        return r2;
    }

    public long set(long, java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l2;
        java.lang.String r1;
        java.util.Locale r2;
        int i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Locale;

        i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2);

        $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l0, i1);

        return $l2;
    }

    public final long set(long, java.lang.String)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1;
        java.lang.String r1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,java.lang.String,java.util.Locale)>(l0, r1, null);

        return $l1;
    }

    public int[] set(org.joda.time.ReadablePartial, int, int[], java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1;
        int[] r2, $r5;
        java.lang.String r3;
        java.util.Locale r4;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.util.Locale;

        i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r3, r4);

        $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1);

        return $r5;
    }

    protected int convertText(java.lang.String, java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.String r1;
        java.util.Locale r2;
        int $i0;
        java.lang.NumberFormatException $r4;
        org.joda.time.IllegalFieldValueException $r5;
        org.joda.time.DateTimeFieldType $r6;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return $i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.joda.time.IllegalFieldValueException;

        $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>();

        specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r6, r1);

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public abstract org.joda.time.DurationField getDurationField();

    public abstract org.joda.time.DurationField getRangeDurationField();

    public boolean isLeap(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        return 0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        return 0;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.field.BaseDateTimeField r0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        return null;
    }

    public abstract int getMinimumValue();

    public int getMinimumValue(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        int $i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i1;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>();

        return $i0;
    }

    public int getMinimumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public abstract int getMaximumValue();

    public int getMaximumValue(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0;
        int $i1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i1;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial)
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        return $i0;
    }

    public int getMaximumValue(org.joda.time.ReadablePartial, int[])
    {
        org.joda.time.field.BaseDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int[] r2;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        r2 := @parameter1: int[];

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1);

        return $i0;
    }

    public int getMaximumTextLength(java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int i0, $i1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: java.util.Locale;

        i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>();

        if i0 < 0 goto label3;

        if i0 >= 10 goto label1;

        return 1;

     label1:
        if i0 >= 100 goto label2;

        return 2;

     label2:
        if i0 >= 1000 goto label3;

        return 3;

     label3:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        return $i1;
    }

    public int getMaximumShortTextLength(java.util.Locale)
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.util.Locale r1;
        int $i0;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        r1 := @parameter0: java.util.Locale;

        $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>(r1);

        return $i0;
    }

    public abstract long roundFloor(long);

    public long roundCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l2;
        byte $b1;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l2 := @parameter0: long;

        l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l2);

        $b1 = l0 cmp l2;

        if $b1 == 0 goto label1;

        l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l0, 1);

     label1:
        return l2;
    }

    public long roundHalfFloor(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l1, l2, l3, l4;
        byte $b5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0);

        l3 = l0 - l1;

        l4 = l2 - l0;

        $b5 = l3 cmp l4;

        if $b5 > 0 goto label1;

        return l1;

     label1:
        return l2;
    }

    public long roundHalfCeiling(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, l1, l2, l3, l4;
        byte $b5;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0);

        l3 = l0 - l1;

        l4 = l2 - l0;

        $b5 = l4 cmp l3;

        if $b5 > 0 goto label1;

        return l2;

     label1:
        return l1;
    }

    public long roundHalfEven(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        int $i0, $i8;
        long l1, l2, l3, l4, l5;
        byte $b6, $b7;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l1 := @parameter0: long;

        l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l1);

        l3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l1);

        l4 = l1 - l2;

        l5 = l3 - l1;

        $b6 = l4 cmp l5;

        if $b6 >= 0 goto label1;

        return l2;

     label1:
        $b7 = l5 cmp l4;

        if $b7 >= 0 goto label2;

        return l3;

     label2:
        $i8 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l3);

        $i0 = $i8 & 1;

        if $i0 != 0 goto label3;

        return l3;

     label3:
        return l2;
    }

    public long remainder(long)
    {
        org.joda.time.field.BaseDateTimeField r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    public java.lang.String toString()
    {
        org.joda.time.field.BaseDateTimeField r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.joda.time.field.BaseDateTimeField;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DateTimeField[");

        $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
