public class org.mockito.internal.invocation.SerializableMethod extends java.lang.Object implements java.io.Serializable, org.mockito.internal.invocation.MockitoMethod
{
    private static final long serialVersionUID;
    private final java.lang.Class declaringClass;
    private final java.lang.String methodName;
    private final java.lang.Class[] parameterTypes;
    private final java.lang.Class returnType;
    private final java.lang.Class[] exceptionTypes;
    private final boolean isVarArgs;
    private final boolean isAbstract;
    private transient volatile java.lang.reflect.Method method;

    public void <init>(java.lang.reflect.Method)
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.reflect.Method r1;
        java.lang.Class $r2, $r6;
        java.lang.String $r3;
        java.lang.Class[] $r4, $r5, $r7;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.reflect.Method method> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass> = $r2;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName> = $r3;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r5 = staticinvoke <org.mockito.internal.creation.SuspendMethod: java.lang.Class[] trimSuspendParameterTypes(java.lang.Class[])>($r4);

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] parameterTypes> = $r5;

        $r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType> = $r6;

        $r7 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] exceptionTypes> = $r7;

        $z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isVarArgs()>();

        r0.<org.mockito.internal.invocation.SerializableMethod: boolean isVarArgs> = $z0;

        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<org.mockito.internal.invocation.SerializableMethod: boolean isAbstract> = $z1;

        return;
    }

    public java.lang.String getName()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.String $r1;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $r1 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        return $r1;
    }

    public java.lang.Class getReturnType()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.Class $r1;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $r1 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType>;

        return $r1;
    }

    public java.lang.Class[] getParameterTypes()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.Class[] $r1;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $r1 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] parameterTypes>;

        return $r1;
    }

    public java.lang.Class[] getExceptionTypes()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.Class[] $r1;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $r1 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] exceptionTypes>;

        return $r1;
    }

    public boolean isVarArgs()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $z0 = r0.<org.mockito.internal.invocation.SerializableMethod: boolean isVarArgs>;

        return $z0;
    }

    public boolean isAbstract()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $z0 = r0.<org.mockito.internal.invocation.SerializableMethod: boolean isAbstract>;

        return $z0;
    }

    public java.lang.reflect.Method getJavaMethod()
    {
        org.mockito.internal.invocation.SerializableMethod r0;
        java.lang.reflect.Method $r1, $r5, $r6, $r7;
        java.lang.Class[] $r2;
        java.lang.String $r3, $r11, $r16, r19, r21;
        java.lang.Class $r4, $r10, $r15;
        java.lang.NoSuchMethodException $r8;
        java.lang.Object[] $r9, $r14;
        org.mockito.exceptions.base.MockitoException $r12, $r17;
        java.lang.SecurityException $r13;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        $r1 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.reflect.Method method>;

        if $r1 == null goto label1;

        $r7 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.reflect.Method method>;

        return $r7;

     label1:
        $r4 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        $r3 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        $r2 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] parameterTypes>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>($r3, $r2);

        r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.reflect.Method method> = $r5;

        $r6 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.reflect.Method method>;

     label2:
        return $r6;

     label3:
        $r13 := @caughtexception;

        $r14 = newarray (java.lang.Object)[2];

        $r15 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        $r14[0] = $r15;

        $r16 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        $r14[1] = $r16;

        r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The method %1$s.%2$s is probably private or protected and cannot be mocked.\nPlease report this as a defect with an example of how to reproduce it.", $r14);

        $r17 = new org.mockito.exceptions.base.MockitoException;

        specialinvoke $r17.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>(r19, $r13);

        throw $r17;

     label4:
        $r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        $r9[0] = $r10;

        $r11 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        $r9[1] = $r11;

        r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The method %1$s.%2$s does not exists and you should not get to this point.\nPlease report this as a defect with an example of how to reproduce it.", $r9);

        $r12 = new org.mockito.exceptions.base.MockitoException;

        specialinvoke $r12.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>(r21, $r8);

        throw $r12;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label4;
    }

    public int hashCode()
    {
        org.mockito.internal.invocation.SerializableMethod r0;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.mockito.internal.invocation.SerializableMethod r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r16, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r8, $r9, $r10, $r17;
        java.lang.Class[] $r11, $r12;

        r0 := @this: org.mockito.internal.invocation.SerializableMethod;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r1 != null goto label02;

        return 0;

     label02:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label03;

        return 0;

     label03:
        r2 = (org.mockito.internal.invocation.SerializableMethod) r1;

        $r5 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        if $r5 != null goto label04;

        $r18 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        if $r18 == null goto label05;

        return 0;

     label04:
        $r7 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        $r6 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class declaringClass>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label05;

        return 0;

     label05:
        $r8 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        if $r8 != null goto label06;

        $r17 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        if $r17 == null goto label07;

        return 0;

     label06:
        $r10 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        $r9 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.String methodName>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label07;

        return 0;

     label07:
        $r12 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] parameterTypes>;

        $r11 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class[] parameterTypes>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r12, $r11);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        $r13 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType>;

        if $r13 != null goto label09;

        $r16 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType>;

        if $r16 == null goto label10;

        return 0;

     label09:
        $r15 = r0.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType>;

        $r14 = r2.<org.mockito.internal.invocation.SerializableMethod: java.lang.Class returnType>;

        $z3 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>($r14);

        if $z3 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.invocation.SerializableMethod: long serialVersionUID> = 6005610965006048445L;

        return;
    }
}
