public class javassist.bytecode.stackmap.TypeData$BasicType extends javassist.bytecode.stackmap.TypeData
{
    private java.lang.String name;
    private int typeTag;
    private char decodedName;

    public void <init>(java.lang.String, int, char)
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        java.lang.String r1;
        int i0;
        char c1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        specialinvoke r0.<javassist.bytecode.stackmap.TypeData: void <init>()>();

        r0.<javassist.bytecode.stackmap.TypeData$BasicType: java.lang.String name> = r1;

        r0.<javassist.bytecode.stackmap.TypeData$BasicType: int typeTag> = i0;

        r0.<javassist.bytecode.stackmap.TypeData$BasicType: char decodedName> = c1;

        return;
    }

    public int getTypeTag()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        int $i0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        $i0 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: int typeTag>;

        return $i0;
    }

    public int getTypeData(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        javassist.bytecode.ConstPool r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        return 0;
    }

    public javassist.bytecode.stackmap.TypeData join()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0, $r1;
        javassist.bytecode.stackmap.TypeData $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        $r1 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        if r0 != $r1 goto label1;

        return r0;

     label1:
        $r2 = specialinvoke r0.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData join()>();

        return $r2;
    }

    public javassist.bytecode.stackmap.TypeData$BasicType isBasicType()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        return r0;
    }

    public boolean is2WordType()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        $i0 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: int typeTag>;

        if $i0 == 4 goto label1;

        $i1 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: int typeTag>;

        if $i1 != 3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean eq(javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        javassist.bytecode.stackmap.TypeData r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        if r0 != r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        java.lang.String $r1;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        $r1 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: java.lang.String name>;

        return $r1;
    }

    public char getDecodedName()
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        char $c0;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        $c0 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: char decodedName>;

        return $c0;
    }

    public void setType(java.lang.String, javassist.ClassPool) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        java.lang.String r1, $r6, $r10;
        javassist.ClassPool r2;
        javassist.bytecode.BadBytecode $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: javassist.ClassPool;

        $r3 = new javassist.bytecode.BadBytecode;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("conflict: ");

        $r6 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: java.lang.String name>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r10);

        throw $r3;
    }

    public javassist.bytecode.stackmap.TypeData getArrayType(int) throws javassist.NotFoundException
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0, $r2;
        int i0, $i1, i3;
        char[] r1;
        char $c2;
        javassist.bytecode.stackmap.TypeData$ClassName $r3;
        java.lang.String $r4, $r8, $r10;
        javassist.NotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        i0 := @parameter0: int;

        $r2 = <javassist.bytecode.stackmap.TypeTag: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        if r0 != $r2 goto label1;

        return r0;

     label1:
        if i0 >= 0 goto label2;

        $r5 = new javassist.NotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no element type: ");

        $r8 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: java.lang.String name>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javassist.NotFoundException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        if i0 != 0 goto label3;

        return r0;

     label3:
        $i1 = i0 + 1;

        r1 = newarray (char)[$i1];

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        r1[i3] = 91;

        i3 = i3 + 1;

        goto label4;

     label5:
        $c2 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: char decodedName>;

        r1[i0] = $c2;

        $r3 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1);

        specialinvoke $r3.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r4);

        return $r3;
    }

    java.lang.String toString2(java.util.Set)
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        java.util.Set r1;
        java.lang.String $r2;

        r0 := @this: javassist.bytecode.stackmap.TypeData$BasicType;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: java.lang.String name>;

        return $r2;
    }

    static char access$100(javassist.bytecode.stackmap.TypeData$BasicType)
    {
        javassist.bytecode.stackmap.TypeData$BasicType r0;
        char $c0;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData$BasicType;

        $c0 = r0.<javassist.bytecode.stackmap.TypeData$BasicType: char decodedName>;

        return $c0;
    }
}
