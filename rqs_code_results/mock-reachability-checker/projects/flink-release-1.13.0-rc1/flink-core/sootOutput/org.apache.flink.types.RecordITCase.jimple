public class org.apache.flink.types.RecordITCase extends org.apache.flink.util.TestLogger
{
    private static final long SEED;
    private final java.util.Random rand;
    private org.apache.flink.core.memory.DataInputView in;
    private org.apache.flink.core.memory.DataOutputView out;

    public void <init>()
    {
        org.apache.flink.types.RecordITCase r0;
        java.util.Random $r1;

        r0 := @this: org.apache.flink.types.RecordITCase;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(354144423270432543L);

        r0.<org.apache.flink.types.RecordITCase: java.util.Random rand> = $r1;

        return;
    }

    public void setUp() throws java.lang.Exception
    {
        org.apache.flink.types.RecordITCase r0;
        java.io.PipedInputStream $r2;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r3;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r4;
        java.io.PipedOutputStream $r5;

        r0 := @this: org.apache.flink.types.RecordITCase;

        $r2 = new java.io.PipedInputStream;

        specialinvoke $r2.<java.io.PipedInputStream: void <init>(int)>(33554432);

        $r3 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r3.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r2);

        r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataInputView in> = $r3;

        $r4 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        $r5 = new java.io.PipedOutputStream;

        specialinvoke $r5.<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)>($r2);

        specialinvoke $r4.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r5);

        r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataOutputView out> = $r4;

        return;
    }

    public void massiveRandomBlackBoxTests()
    {
        org.apache.flink.types.RecordITCase r0;
        java.util.Random $r1, $r4, $r5, $r8, $r9, $r12;
        org.apache.flink.core.memory.DataOutputView $r2, $r6, $r10;
        org.apache.flink.core.memory.DataInputView $r3, $r7, $r11;
        java.lang.Throwable $r13;
        java.lang.StringBuilder $r14, $r15, $r17;
        java.lang.String $r16, $r18;
        int i0, i1, i2;
        org.apache.flink.types.Value[] r19, r20, r21;

        r0 := @this: org.apache.flink.types.RecordITCase;

     label1:
        i0 = 0;

     label2:
        if i0 >= 100000 goto label3;

        $r9 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        r19 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Value[] createRandomValues(java.util.Random,int,int)>($r9, 0, 32);

        $r12 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        $r11 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataInputView in>;

        $r10 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r19, $r12, $r11, $r10);

        i0 = i0 + 1;

        goto label2;

     label3:
        i1 = 0;

     label4:
        if i1 >= 2000 goto label5;

        $r5 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        r20 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Value[] createRandomValues(java.util.Random,int,int)>($r5, 20, 200);

        $r8 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        $r7 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataInputView in>;

        $r6 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r20, $r8, $r7, $r6);

        i1 = i1 + 1;

        goto label4;

     label5:
        i2 = 0;

     label6:
        if i2 >= 200 goto label7;

        $r1 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        r21 = staticinvoke <org.apache.flink.types.RecordTest: org.apache.flink.types.Value[] createRandomValues(java.util.Random,int,int)>($r1, 500, 2000);

        $r4 = r0.<org.apache.flink.types.RecordITCase: java.util.Random rand>;

        $r3 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataInputView in>;

        $r2 = r0.<org.apache.flink.types.RecordITCase: org.apache.flink.core.memory.DataOutputView out>;

        staticinvoke <org.apache.flink.types.RecordTest: void blackboxTestRecordWithValues(org.apache.flink.types.Value[],java.util.Random,org.apache.flink.core.memory.DataInputView,org.apache.flink.core.memory.DataOutputView)>(r21, $r4, $r3, $r2);

        i2 = i2 + 1;

        goto label6;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to an exception: ");

        $r16 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r18);

     label9:
        return;

        catch java.lang.Throwable from label1 to label7 with label8;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.RecordITCase: long SEED> = 354144423270432543L;

        return;
    }
}
