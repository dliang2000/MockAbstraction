class org.mockito.internal.junit.StubbingArgMismatches extends java.lang.Object
{
    final java.util.Map mismatches;

    void <init>()
    {
        org.mockito.internal.junit.StubbingArgMismatches r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.mockito.internal.junit.StubbingArgMismatches;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches> = $r1;

        return;
    }

    public void add(org.mockito.invocation.Invocation, org.mockito.invocation.Invocation)
    {
        org.mockito.internal.junit.StubbingArgMismatches r0;
        org.mockito.invocation.Invocation r1, r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4;
        java.util.LinkedHashSet $r5;
        java.util.Set r8;

        r0 := @this: org.mockito.internal.junit.StubbingArgMismatches;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 := @parameter1: org.mockito.invocation.Invocation;

        $r3 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r8 = (java.util.Set) $r4;

        if r8 != null goto label1;

        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r8 = $r5;

        $r6 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

     label1:
        interfaceinvoke r8.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void format(java.lang.String, org.mockito.internal.util.MockitoLogger)
    {
        org.mockito.internal.junit.StubbingArgMismatches r0;
        java.lang.String r1, $r12;
        org.mockito.internal.util.MockitoLogger r2;
        java.util.Iterator r4, r6;
        java.util.Map$Entry r5;
        org.mockito.invocation.Invocation r7, $r17;
        java.util.Map $r8, $r10;
        boolean $z0, $z1, $z2;
        org.mockito.internal.junit.StubbingHint $r9;
        java.util.Set $r11, $r20;
        java.lang.Object $r13, $r16, $r19, $r21;
        java.lang.Object[] $r14, $r22;
        int $i0, i1;
        java.lang.Integer $r15;
        org.mockito.invocation.Location $r18, $r23;

        r0 := @this: org.mockito.internal.junit.StubbingArgMismatches;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.mockito.internal.util.MockitoLogger;

        $r8 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        $z0 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r9 = new org.mockito.internal.junit.StubbingHint;

        specialinvoke $r9.<org.mockito.internal.junit.StubbingHint: void <init>(java.lang.String)>(r1);

        i1 = 1;

        $r10 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r13;

        $r14 = newarray (java.lang.Object)[3];

        $i0 = i1;

        i1 = i1 + 1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14[0] = $r15;

        $r14[1] = ". Unused... ";

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (org.mockito.invocation.Invocation) $r16;

        $r18 = interfaceinvoke $r17.<org.mockito.invocation.Invocation: org.mockito.invocation.Location getLocation()>();

        $r14[2] = $r18;

        virtualinvoke $r9.<org.mockito.internal.junit.StubbingHint: void appendLine(java.lang.Object[])>($r14);

        $r19 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r20 = (java.util.Set) $r19;

        r6 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r21 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.mockito.invocation.Invocation) $r21;

        $r22 = newarray (java.lang.Object)[2];

        $r22[0] = " ...args ok? ";

        $r23 = interfaceinvoke r7.<org.mockito.invocation.Invocation: org.mockito.invocation.Location getLocation()>();

        $r22[1] = $r23;

        virtualinvoke $r9.<org.mockito.internal.junit.StubbingHint: void appendLine(java.lang.Object[])>($r22);

        goto label3;

     label4:
        goto label2;

     label5:
        $r12 = virtualinvoke $r9.<org.mockito.internal.junit.StubbingHint: java.lang.String toString()>();

        interfaceinvoke r2.<org.mockito.internal.util.MockitoLogger: void log(java.lang.Object)>($r12);

        return;
    }

    public int size()
    {
        org.mockito.internal.junit.StubbingArgMismatches r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.mockito.internal.junit.StubbingArgMismatches;

        $r1 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.junit.StubbingArgMismatches r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.util.Map $r3;
        java.lang.String $r5;

        r0 := @this: org.mockito.internal.junit.StubbingArgMismatches;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = r0.<org.mockito.internal.junit.StubbingArgMismatches: java.util.Map mismatches>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }
}
