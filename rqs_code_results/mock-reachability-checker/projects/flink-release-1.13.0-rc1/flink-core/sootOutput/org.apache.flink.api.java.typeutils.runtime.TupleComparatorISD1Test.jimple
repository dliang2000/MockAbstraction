public class org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test extends org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase
{
    org.apache.flink.api.java.tuple.Tuple3[] dataISD;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;
        org.apache.flink.api.java.tuple.Tuple3 $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23;
        java.lang.Integer $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24;
        java.lang.Double $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: void <init>()>();

        $r1 = newarray (org.apache.flink.api.java.tuple.Tuple3)[8];

        $r2 = new org.apache.flink.api.java.tuple.Tuple3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r2.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, "hello", $r4);

        $r1[0] = $r2;

        $r5 = new org.apache.flink.api.java.tuple.Tuple3;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r5.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, "hello", $r7);

        $r1[1] = $r5;

        $r8 = new org.apache.flink.api.java.tuple.Tuple3;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r8.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r9, "world", $r10);

        $r1[2] = $r8;

        $r11 = new org.apache.flink.api.java.tuple.Tuple3;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r11.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r12, "hello", $r13);

        $r1[3] = $r11;

        $r14 = new org.apache.flink.api.java.tuple.Tuple3;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r14.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r15, "hello", $r16);

        $r1[4] = $r14;

        $r17 = new org.apache.flink.api.java.tuple.Tuple3;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r17.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r18, "world", $r19);

        $r1[5] = $r17;

        $r20 = new org.apache.flink.api.java.tuple.Tuple3;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r20.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r21, "hello", $r22);

        $r1[6] = $r20;

        $r23 = new org.apache.flink.api.java.tuple.Tuple3;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11);

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r23.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r24, "hello", $r25);

        $r1[7] = $r23;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD> = $r1;

        return;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;
        int[] $r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        org.apache.flink.api.common.typeutils.base.IntComparator $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r4 = new org.apache.flink.api.common.typeutils.base.IntComparator;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.IntComparator: void <init>(boolean)>(z0);

        $r3[0] = $r4;

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r6 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r5[0] = $r6;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2, $r3, $r5);

        return $r1;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r3;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r4;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r3 = new org.apache.flink.api.common.typeutils.base.IntSerializer;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.IntSerializer: void <init>()>();

        $r2[0] = $r3;

        $r4 = new org.apache.flink.api.common.typeutils.base.StringSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.StringSerializer: void <init>()>();

        $r2[1] = $r4;

        $r5 = new org.apache.flink.api.common.typeutils.base.DoubleSerializer;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.base.DoubleSerializer: void <init>()>();

        $r2[2] = $r5;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r2);

        return $r1;
    }

    protected org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD>;

        return $r1;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test: org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorISD1Test: org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)>(z0);

        return $r1;
    }
}
