public final class org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy extends org.apache.flink.core.io.VersionedIOReadableWritable
{
    private static final int VERSION;
    private java.lang.ClassLoader userClassLoader;
    private org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer;

    public void <init>(java.lang.ClassLoader)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;
        java.lang.ClassLoader r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: java.lang.ClassLoader userClassLoader> = r1;

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer> = $r3;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer getTypeSerializer()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        $r1 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer>;

        return $r1;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r4, $r6, $r8;
        boolean $z0;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r5;
        int $i0, $i1, $i2;
        byte[] $r7, r14;
        java.lang.Throwable $r10, $r11, $r12, r16;
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r13;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer>;

        $z0 = $r4 instanceof org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        if $z0 == 0 goto label01;

        $r8 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer>;

        r13 = (org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer) $r8;

        r14 = virtualinvoke r13.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] getActualBytes()>();

        $i2 = lengthof r14;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(int)>($i2);

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>(r14);

        goto label13;

     label01:
        $r5 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r16 = null;

     label02:
        $r6 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer>;

        staticinvoke <org.apache.flink.util.InstantiationUtil: void serializeObject(java.io.OutputStream,java.lang.Object)>($r5, $r6);

        $i0 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r7 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] getBuf()>();

        $i1 = virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: int getPosition()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void write(byte[],int,int)>($r7, 0, $i1);

     label03:
        if $r5 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label13;

     label05:
        $r10 := @caughtexception;

        r16 = $r10;

        throw $r10;

     label06:
        $r11 := @caughtexception;

     label07:
        if $r5 == null goto label12;

        if r16 == null goto label11;

     label08:
        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

        goto label12;

     label11:
        virtualinvoke $r5.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label12:
        throw $r11;

     label13:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0;
        byte[] r2;
        java.lang.ClassLoader r3, $r10, $r12;
        java.lang.Thread $r7, $r11, $r21, $r27;
        org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream $r8;
        java.io.ByteArrayInputStream $r9;
        java.lang.Object $r13;
        org.apache.flink.api.common.typeutils.TypeSerializer $r14;
        java.lang.Exception $r15;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException $r16;
        java.lang.Throwable $r18, $r19, $r20, $r22, r24;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.core.io.VersionedIOReadableWritable: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = newarray (byte)[i0];

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r2);

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r3 = virtualinvoke $r7.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label01:
        $r8 = new org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream;

        $r9 = new java.io.ByteArrayInputStream;

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r10 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: java.lang.ClassLoader userClassLoader>;

        specialinvoke $r8.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void <init>(java.io.InputStream,java.lang.ClassLoader)>($r9, $r10);

        r24 = null;

     label02:
        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r12 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: java.lang.ClassLoader userClassLoader>;

        virtualinvoke $r11.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r12);

        $r13 = virtualinvoke $r8.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: java.lang.Object readObject()>();

        $r14 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r13;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: org.apache.flink.api.common.typeutils.TypeSerializer typeSerializer> = $r14;

     label03:
        if $r8 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r8.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void close()>();

        goto label13;

     label05:
        $r19 := @caughtexception;

        r24 = $r19;

        throw $r19;

     label06:
        $r22 := @caughtexception;

     label07:
        if $r8 == null goto label12;

        if r24 == null goto label11;

     label08:
        virtualinvoke $r8.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        virtualinvoke r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label12;

     label11:
        virtualinvoke $r8.<org.apache.flink.util.InstantiationUtil$FailureTolerantObjectInputStream: void close()>();

     label12:
        throw $r22;

     label13:
        $r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r27.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);

        goto label17;

     label14:
        $r15 := @caughtexception;

        $r16 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException;

        specialinvoke $r16.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$UnloadableTypeSerializerException: void <init>(java.lang.Exception,byte[])>($r15, r2);

        throw $r16;

     label15:
        $r20 := @caughtexception;

     label16:
        $r21 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r21.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r3);

        throw $r20;

     label17:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Exception from label01 to label13 with label14;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label14 to label16 with label15;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy r0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil$TypeSerializerSerializationProxy: int VERSION> = 1;

        return;
    }
}
