public class org.apache.flink.api.java.typeutils.GenericTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation implements org.apache.flink.api.common.typeinfo.AtomicType
{
    private static final long serialVersionUID;
    private final java.lang.Class typeClass;

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Class) $r2;

        r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass> = $r3;

        return;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        return 1;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        return $r1;
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        $r2 = class "Ljava/lang/Comparable;";

        $r1 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        boolean $z0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r2;
        java.lang.Class $r3, $r7;
        java.lang.UnsupportedOperationException $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10;
        java.lang.String $r8, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $z0 = virtualinvoke r1.<org.apache.flink.api.common.ExecutionConfig: boolean hasGenericTypesDisabled()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generic types have been disabled in the ExecutionConfig and type ");

        $r7 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is treated as a generic type.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label1:
        $r2 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r3 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>($r3, r1);

        return $r2;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        boolean z0, $z1;
        org.apache.flink.api.common.ExecutionConfig r1;
        java.lang.UnsupportedOperationException $r3;
        org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        java.lang.Class $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        $z1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: boolean isKeyType()>();

        if $z1 == 0 goto label1;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator;

        $r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        $r6 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.GenericTypeComparator: void <init>(boolean,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class)>(z0, $r5, $r6);

        return $r4;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Types that do not implement java.lang.Comparable cannot be used as keys.");

        throw $r3;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Class $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.GenericTypeInfo;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.GenericTypeInfo) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        if $r4 != $r3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.GenericTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r5, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.GenericTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GenericType<");

        $r3 = r0.<org.apache.flink.api.java.typeutils.GenericTypeInfo: java.lang.Class typeClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.GenericTypeInfo: long serialVersionUID> = -7959114120287706504L;

        return;
    }
}
