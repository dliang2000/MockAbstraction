public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache extends java.lang.Object
{
    private final java.util.HashMap _sharedMap;
    private final java.util.concurrent.atomic.AtomicReference _readOnlyMap;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.util.HashMap $r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(64);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap> = $r2;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r1, $r4;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap()>();

        return $r4;
    }

    private final synchronized org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.util.concurrent.atomic.AtomicReference $r1, $r4;
        java.lang.Object $r2;
        java.util.HashMap $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap) $r2;

        if r5 != null goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        r5 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)>($r3);

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r5);

     label1:
        return r5;
    }

    public synchronized int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        return $i0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        entermonitor r0;

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(r1, 0);

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) $r7;

        exitmonitor r0;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        entermonitor r0;

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r1, 0);

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) $r7;

        exitmonitor r0;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        entermonitor r0;

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r1, 1);

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) $r7;

        exitmonitor r0;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r5;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        entermonitor r0;

     label1:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r5 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(r1, 1);

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) $r7;

        exitmonitor r0;

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void addTypedSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r6;
        java.util.HashMap $r7;
        java.lang.Object $r8;
        java.util.concurrent.atomic.AtomicReference $r9;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        entermonitor r0;

     label1:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r6 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r1, 1);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        if $r8 != null goto label2;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addTypedSerializer(java.lang.Class, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r6;
        java.util.HashMap $r7;
        java.lang.Object $r8;
        java.util.concurrent.atomic.AtomicReference $r9;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        entermonitor r0;

     label1:
        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r6 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(r1, 1);

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r2);

        if $r8 != null goto label2;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addAndResolveNonTypedSerializer(java.lang.Class, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r7;
        java.util.HashMap $r8;
        java.lang.Object $r9;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer $r10;
        java.util.concurrent.atomic.AtomicReference $r11;
        java.lang.Throwable $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        entermonitor r0;

     label1:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r7 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(r1, 0);

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        if $r9 != null goto label2;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label2:
        $z0 = r2 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer;

        if $z0 == 0 goto label3;

        $r10 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer) r2;

        interfaceinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>(r3);

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r12;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addAndResolveNonTypedSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r7;
        java.util.HashMap $r8;
        java.lang.Object $r9;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer $r10;
        java.util.concurrent.atomic.AtomicReference $r11;
        java.lang.Throwable $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        entermonitor r0;

     label1:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r7 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r7.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r1, 0);

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2);

        if $r9 != null goto label2;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r11.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label2:
        $z0 = r2 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer;

        if $z0 == 0 goto label3;

        $r10 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer) r2;

        interfaceinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>(r3);

     label3:
        exitmonitor r0;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        exitmonitor r0;

     label6:
        throw $r12;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void addAndResolveNonTypedSerializer(java.lang.Class, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider) throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider r4;
        java.lang.Object r6, r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey $r10, $r12;
        java.util.HashMap $r11, $r13;
        java.util.concurrent.atomic.AtomicReference $r14;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer $r15;
        java.lang.Throwable $r16;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        r3 := @parameter2: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer;

        r4 := @parameter3: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider;

        entermonitor r0;

     label1:
        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r10 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(java.lang.Class,boolean)>(r1, 0);

        r6 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3);

        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r12 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey;

        specialinvoke $r12.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType,boolean)>(r2, 0);

        r7 = virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r3);

        if r6 == null goto label2;

        if r7 != null goto label3;

     label2:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.concurrent.atomic.AtomicReference _readOnlyMap>;

        virtualinvoke $r14.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label3:
        $z0 = r3 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer;

        if $z0 == 0 goto label4;

        $r15 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer) r3;

        interfaceinvoke $r15.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.SerializerProvider)>(r4);

     label4:
        exitmonitor r0;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r16;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public synchronized void flush()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }
}
