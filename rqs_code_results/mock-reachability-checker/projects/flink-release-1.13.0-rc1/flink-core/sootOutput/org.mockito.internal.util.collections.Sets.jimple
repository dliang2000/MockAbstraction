public abstract class org.mockito.internal.util.collections.Sets extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.util.collections.Sets r0;

        r0 := @this: org.mockito.internal.util.collections.Sets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Set newMockSafeHashSet(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet of(java.lang.Iterable)>(r0);

        return $r1;
    }

    public static transient java.util.Set newMockSafeHashSet(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet: org.mockito.internal.util.collections.HashCodeAndEqualsSafeSet of(java.lang.Object[])>(r0);

        return $r1;
    }

    public static transient java.util.Set newSet(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.LinkedHashSet $r1;
        java.util.List $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected an array of elements (or empty array) but received a null.");

        throw $r3;

     label1:
        $r1 = new java.util.LinkedHashSet;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2);

        return $r1;
    }
}
