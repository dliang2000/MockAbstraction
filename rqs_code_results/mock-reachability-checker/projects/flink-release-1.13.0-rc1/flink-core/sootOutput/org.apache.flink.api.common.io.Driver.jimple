public class org.apache.flink.api.common.io.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.io.Driver r0;

        r0 := @this: org.apache.flink.api.common.io.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.io.Driver r0;
        org.apache.flink.api.common.io.DefaultFilterTest $r7;
        org.apache.flink.api.common.io.GlobFilePathFilterTest $r8;
        org.apache.flink.api.common.io.FileInputFormatTest $r9;
        org.apache.flink.api.common.io.EnumerateNestedFilesTest $r10;
        org.apache.flink.api.common.io.FileOutputFormatTest $r11;
        org.apache.flink.api.common.io.RichOutputFormatTest $r12;
        org.apache.flink.api.common.io.BinaryInputFormatTest $r13;
        org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest $r14;
        org.apache.flink.api.common.io.RichInputFormatTest $r15;
        org.apache.flink.api.common.io.DelimitedInputFormatTest $r16;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest $r17;
        org.apache.flink.api.common.io.InputStreamFSInputWrapperTest $r18;
        java.io.IOException $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r58, $r59, $r60, $r61, $r62;
        java.lang.Exception $r24, $r27, $r30, $r45, $r57, $r63;

        r0 := @this: org.apache.flink.api.common.io.Driver;

        $r7 = new org.apache.flink.api.common.io.DefaultFilterTest;

        specialinvoke $r7.<org.apache.flink.api.common.io.DefaultFilterTest: void <init>(java.lang.String,boolean)>(null, 0);

        virtualinvoke $r7.<org.apache.flink.api.common.io.DefaultFilterTest: void test()>();

        $r8 = new org.apache.flink.api.common.io.GlobFilePathFilterTest;

        specialinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testDefaultConstructorCreateMatchAllFilter()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testMatchAllFilesByDefault()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testExcludeFilesNotInIncludePatterns()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testExcludeFilesIfMatchesExclude()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testIncludeFileWithAnyCharacterMatcher()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testIncludeFileWithCharacterSetMatcher()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testIncludeFileWithCharacterRangeMatcher()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testExcludeHDFSFile()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testExcludeFilenameWithStart()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testSingleStarPattern()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testDoubleStarPattern()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testIncluePatternIsNull()>();

        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testExcludePatternIsNull()>();

     label001:
        virtualinvoke $r8.<org.apache.flink.api.common.io.GlobFilePathFilterTest: void testGlobFilterSerializable()>();

     label002:
        goto label004;

     label003:
        $r41 := @caughtexception;

        virtualinvoke $r41.<java.io.IOException: void printStackTrace()>();

     label004:
        $r9 = new org.apache.flink.api.common.io.FileInputFormatTest;

        specialinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetPathWithoutSettingFirst()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetPathsWithoutSettingFirst()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testToStringWithoutPathSet()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathsNull()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathNullString()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathNullPath()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathsOnePathNull()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathsEmptyArray()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPath()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathOnMulti()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathsSingleWithMulti()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetPathsMulti()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testMultiPathSetOnSinglePathIF()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testMultiPathSetOnSinglePathIF2()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSinglePathGetOnMultiPathIF()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetFileViaConfiguration()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testSetFileViaConfigurationEmptyPath()>();

     label005:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testCreateInputSplitSingleFile()>();

     label006:
        goto label008;

     label007:
        $r42 := @caughtexception;

        virtualinvoke $r42.<java.io.IOException: void printStackTrace()>();

     label008:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testCreateInputSplitMultiFiles()>();

     label009:
        goto label011;

     label010:
        $r40 := @caughtexception;

        virtualinvoke $r40.<java.io.IOException: void printStackTrace()>();

     label011:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsNonExistingFile()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsOneFileNoCachedVersion()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleFilesNoCachedVersion()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsOneFileWithCachedVersion()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleFilesWithCachedVersion()>();

     label012:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleNonExistingFile()>();

     label013:
        goto label015;

     label014:
        $r31 := @caughtexception;

        virtualinvoke $r31.<java.io.IOException: void printStackTrace()>();

     label015:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleOneFileNoCachedVersion()>();

     label016:
        goto label018;

     label017:
        $r36 := @caughtexception;

        virtualinvoke $r36.<java.io.IOException: void printStackTrace()>();

     label018:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleFilesMultiplePathsNoCachedVersion()>();

     label019:
        goto label021;

     label020:
        $r60 := @caughtexception;

        virtualinvoke $r60.<java.io.IOException: void printStackTrace()>();

     label021:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatisticsMultipleOneFileWithCachedVersion()>();

     label022:
        goto label024;

     label023:
        $r59 := @caughtexception;

        virtualinvoke $r59.<java.io.IOException: void printStackTrace()>();

     label024:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testFileInputSplit()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testIgnoredUnderscoreFiles()>();

        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testExcludeFiles()>();

     label025:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testReadMultiplePatterns()>();

     label026:
        goto label028;

     label027:
        $r63 := @caughtexception;

        virtualinvoke $r63.<java.lang.Exception: void printStackTrace()>();

     label028:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testGetStatsIgnoredUnderscoreFiles()>();

     label029:
        virtualinvoke $r9.<org.apache.flink.api.common.io.FileInputFormatTest: void testDecorateInputStream()>();

     label030:
        goto label032;

     label031:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.io.IOException: void printStackTrace()>();

     label032:
        $r10 = new org.apache.flink.api.common.io.EnumerateNestedFilesTest;

        specialinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void setup()>();

     label033:
        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void setdown()>();

     label034:
        goto label036;

     label035:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

     label036:
        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testNoNestedDirectoryTrue()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testOneNestedDirectoryTrue()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testOneNestedDirectoryFalse()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testTwoNestedDirectoriesTrue()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testOnlyLevel2NestedDirectories()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testTwoNestedDirectoriesWithFilteredFilesTrue()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testGetStatisticsOneFileInNestedDir()>();

        virtualinvoke $r10.<org.apache.flink.api.common.io.EnumerateNestedFilesTest: void testGetStatisticsMultipleNestedFiles()>();

        $r11 = new org.apache.flink.api.common.io.FileOutputFormatTest;

        specialinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest: void <init>()>();

     label037:
        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest: void testCreateNonParallelLocalFS()>();

     label038:
        goto label040;

     label039:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.io.IOException: void printStackTrace()>();

     label040:
        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest: void testCreateParallelLocalFS()>();

     label041:
        goto label043;

     label042:
        $r62 := @caughtexception;

        virtualinvoke $r62.<java.io.IOException: void printStackTrace()>();

     label043:
        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest: void testOverwriteNonParallelLocalFS()>();

     label044:
        goto label046;

     label045:
        $r61 := @caughtexception;

        virtualinvoke $r61.<java.io.IOException: void printStackTrace()>();

     label046:
        virtualinvoke $r11.<org.apache.flink.api.common.io.FileOutputFormatTest: void testOverwriteParallelLocalFS()>();

     label047:
        goto label049;

     label048:
        $r53 := @caughtexception;

        virtualinvoke $r53.<java.io.IOException: void printStackTrace()>();

     label049:
        $r12 = new org.apache.flink.api.common.io.RichOutputFormatTest;

        specialinvoke $r12.<org.apache.flink.api.common.io.RichOutputFormatTest: void <init>()>();

        virtualinvoke $r12.<org.apache.flink.api.common.io.RichOutputFormatTest: void testCheckRuntimeContextAccess()>();

        $r13 = new org.apache.flink.api.common.io.BinaryInputFormatTest;

        specialinvoke $r13.<org.apache.flink.api.common.io.BinaryInputFormatTest: void <init>()>();

     label050:
        virtualinvoke $r13.<org.apache.flink.api.common.io.BinaryInputFormatTest: void testCreateInputSplitsWithOneFile()>();

     label051:
        goto label053;

     label052:
        $r29 := @caughtexception;

        virtualinvoke $r29.<java.io.IOException: void printStackTrace()>();

     label053:
        virtualinvoke $r13.<org.apache.flink.api.common.io.BinaryInputFormatTest: void testCreateInputSplitsWithMulitpleFiles()>();

     label054:
        goto label056;

     label055:
        $r55 := @caughtexception;

        virtualinvoke $r55.<java.io.IOException: void printStackTrace()>();

     label056:
        virtualinvoke $r13.<org.apache.flink.api.common.io.BinaryInputFormatTest: void testGetStatisticsNonExistingFiles()>();

     label057:
        virtualinvoke $r13.<org.apache.flink.api.common.io.BinaryInputFormatTest: void testGetStatisticsMultiplePaths()>();

     label058:
        goto label060;

     label059:
        $r34 := @caughtexception;

        virtualinvoke $r34.<java.io.IOException: void printStackTrace()>();

     label060:
        $r14 = new org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest;

        specialinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void <init>()>();

        staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void initialize()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testNumSamplesOneFile()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testNumSamplesMultipleFiles()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testSamplingOneFile()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testSamplingDirectory()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testDifferentDelimiter()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testSamplingOverlyLongRecord()>();

        virtualinvoke $r14.<org.apache.flink.api.common.io.DelimitedInputFormatSamplingTest: void testCachedStatistics()>();

        $r15 = new org.apache.flink.api.common.io.RichInputFormatTest;

        specialinvoke $r15.<org.apache.flink.api.common.io.RichInputFormatTest: void <init>()>();

        virtualinvoke $r15.<org.apache.flink.api.common.io.RichInputFormatTest: void testCheckRuntimeContextAccess()>();

        $r16 = new org.apache.flink.api.common.io.DelimitedInputFormatTest;

        specialinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void <init>()>();

        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void setup()>();

     label061:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void shutdown()>();

     label062:
        goto label064;

     label063:
        $r45 := @caughtexception;

        virtualinvoke $r45.<java.lang.Exception: void printStackTrace()>();

     label064:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testConfigure()>();

     label065:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testSerialization()>();

     label066:
        goto label068;

     label067:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label068:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testOpen()>();

     label069:
        goto label071;

     label070:
        $r33 := @caughtexception;

        virtualinvoke $r33.<java.io.IOException: void printStackTrace()>();

     label071:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadWithoutTrailingDelimiter()>();

     label072:
        goto label074;

     label073:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.io.IOException: void printStackTrace()>();

     label074:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadWithTrailingDelimiter()>();

     label075:
        goto label077;

     label076:
        $r28 := @caughtexception;

        virtualinvoke $r28.<java.io.IOException: void printStackTrace()>();

     label077:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadCustomDelimiter()>();

     label078:
        goto label080;

     label079:
        $r49 := @caughtexception;

        virtualinvoke $r49.<java.io.IOException: void printStackTrace()>();

     label080:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testMultiCharDelimiter()>();

     label081:
        goto label083;

     label082:
        $r47 := @caughtexception;

        virtualinvoke $r47.<java.io.IOException: void printStackTrace()>();

     label083:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadCustomDelimiterWithCharset()>();

     label084:
        goto label086;

     label085:
        $r50 := @caughtexception;

        virtualinvoke $r50.<java.io.IOException: void printStackTrace()>();

     label086:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadOverSplitBoundariesUnaligned()>();

     label087:
        goto label089;

     label088:
        $r44 := @caughtexception;

        virtualinvoke $r44.<java.io.IOException: void printStackTrace()>();

     label089:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadWithBufferSizeIsMultiple()>();

     label090:
        goto label092;

     label091:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.io.IOException: void printStackTrace()>();

     label092:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadExactlyBufferSize()>();

     label093:
        goto label095;

     label094:
        $r35 := @caughtexception;

        virtualinvoke $r35.<java.io.IOException: void printStackTrace()>();

     label095:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testReadRecordsLargerThanBuffer()>();

     label096:
        goto label098;

     label097:
        $r58 := @caughtexception;

        virtualinvoke $r58.<java.io.IOException: void printStackTrace()>();

     label098:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testDelimiterOnBufferBoundary()>();

     label099:
        goto label101;

     label100:
        $r39 := @caughtexception;

        virtualinvoke $r39.<java.io.IOException: void printStackTrace()>();

     label101:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testDelimiterOnBufferBoundaryWithWholeFileSplit()>();

     label102:
        goto label104;

     label103:
        $r52 := @caughtexception;

        virtualinvoke $r52.<java.io.IOException: void printStackTrace()>();

     label104:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testGetStatistics()>();

     label105:
        goto label107;

     label106:
        $r48 := @caughtexception;

        virtualinvoke $r48.<java.io.IOException: void printStackTrace()>();

     label107:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testGetStatisticsFileDoesNotExist()>();

     label108:
        goto label110;

     label109:
        $r43 := @caughtexception;

        virtualinvoke $r43.<java.io.IOException: void printStackTrace()>();

     label110:
        virtualinvoke $r16.<org.apache.flink.api.common.io.DelimitedInputFormatTest: void testGetStatisticsSingleFileWithCachedVersion()>();

     label111:
        goto label113;

     label112:
        $r37 := @caughtexception;

        virtualinvoke $r37.<java.io.IOException: void printStackTrace()>();

     label113:
        $r17 = new org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        specialinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void <init>()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void setup()>();

     label114:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void setdown()>();

     label115:
        goto label117;

     label116:
        $r57 := @caughtexception;

        virtualinvoke $r57.<java.lang.Exception: void printStackTrace()>();

     label117:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testSparseFieldArray()>();

     label118:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadNoPosAll()>();

     label119:
        goto label121;

     label120:
        $r38 := @caughtexception;

        virtualinvoke $r38.<java.io.IOException: void printStackTrace()>();

     label121:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadNoPosAllDeflate()>();

     label122:
        goto label124;

     label123:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.io.IOException: void printStackTrace()>();

     label124:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadNoPosAllGzip()>();

     label125:
        goto label127;

     label126:
        $r46 := @caughtexception;

        virtualinvoke $r46.<java.io.IOException: void printStackTrace()>();

     label127:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadNoPosAllZStandard()>();

     label128:
        goto label130;

     label129:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.io.IOException: void printStackTrace()>();

     label130:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadNoPosFirstN()>();

     label131:
        goto label133;

     label132:
        $r54 := @caughtexception;

        virtualinvoke $r54.<java.io.IOException: void printStackTrace()>();

     label133:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testSparseParse()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testLongLongLong()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testSparseParseWithIndices()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testSparseParseWithIndicesMultiCharDelimiter()>();

     label134:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadTooShortInput()>();

     label135:
        goto label137;

     label136:
        $r51 := @caughtexception;

        virtualinvoke $r51.<java.io.IOException: void printStackTrace()>();

     label137:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadTooShortInputLenient()>();

     label138:
        goto label140;

     label139:
        $r56 := @caughtexception;

        virtualinvoke $r56.<java.io.IOException: void printStackTrace()>();

     label140:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadInvalidContents()>();

     label141:
        goto label143;

     label142:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.io.IOException: void printStackTrace()>();

     label143:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadInvalidContentsLenient()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadInvalidContentsLenientWithSkipping()>();

     label144:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void testReadWithCharset()>();

     label145:
        goto label147;

     label146:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.io.IOException: void printStackTrace()>();

     label147:
        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void readWithEmptyField()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void readWithParseQuotedStrings()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void readWithHeaderLine()>();

        virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: void readWithHeaderLineAndInvalidIntermediate()>();

        $r18 = new org.apache.flink.api.common.io.InputStreamFSInputWrapperTest;

        specialinvoke $r18.<org.apache.flink.api.common.io.InputStreamFSInputWrapperTest: void <init>()>();

     label148:
        virtualinvoke $r18.<org.apache.flink.api.common.io.InputStreamFSInputWrapperTest: void testClose()>();

     label149:
        goto label151;

     label150:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

     label151:
        return;

        catch java.io.IOException from label001 to label002 with label003;
        catch java.io.IOException from label005 to label006 with label007;
        catch java.io.IOException from label008 to label009 with label010;
        catch java.io.IOException from label012 to label013 with label014;
        catch java.io.IOException from label015 to label016 with label017;
        catch java.io.IOException from label018 to label019 with label020;
        catch java.io.IOException from label021 to label022 with label023;
        catch java.lang.Exception from label025 to label026 with label027;
        catch java.io.IOException from label029 to label030 with label031;
        catch java.lang.Exception from label033 to label034 with label035;
        catch java.io.IOException from label037 to label038 with label039;
        catch java.io.IOException from label040 to label041 with label042;
        catch java.io.IOException from label043 to label044 with label045;
        catch java.io.IOException from label046 to label047 with label048;
        catch java.io.IOException from label050 to label051 with label052;
        catch java.io.IOException from label053 to label054 with label055;
        catch java.io.IOException from label057 to label058 with label059;
        catch java.lang.Exception from label061 to label062 with label063;
        catch java.lang.Exception from label065 to label066 with label067;
        catch java.io.IOException from label068 to label069 with label070;
        catch java.io.IOException from label071 to label072 with label073;
        catch java.io.IOException from label074 to label075 with label076;
        catch java.io.IOException from label077 to label078 with label079;
        catch java.io.IOException from label080 to label081 with label082;
        catch java.io.IOException from label083 to label084 with label085;
        catch java.io.IOException from label086 to label087 with label088;
        catch java.io.IOException from label089 to label090 with label091;
        catch java.io.IOException from label092 to label093 with label094;
        catch java.io.IOException from label095 to label096 with label097;
        catch java.io.IOException from label098 to label099 with label100;
        catch java.io.IOException from label101 to label102 with label103;
        catch java.io.IOException from label104 to label105 with label106;
        catch java.io.IOException from label107 to label108 with label109;
        catch java.io.IOException from label110 to label111 with label112;
        catch java.lang.Exception from label114 to label115 with label116;
        catch java.io.IOException from label118 to label119 with label120;
        catch java.io.IOException from label121 to label122 with label123;
        catch java.io.IOException from label124 to label125 with label126;
        catch java.io.IOException from label127 to label128 with label129;
        catch java.io.IOException from label130 to label131 with label132;
        catch java.io.IOException from label134 to label135 with label136;
        catch java.io.IOException from label137 to label138 with label139;
        catch java.io.IOException from label140 to label141 with label142;
        catch java.io.IOException from label144 to label145 with label146;
        catch java.lang.Exception from label148 to label149 with label150;
    }
}
