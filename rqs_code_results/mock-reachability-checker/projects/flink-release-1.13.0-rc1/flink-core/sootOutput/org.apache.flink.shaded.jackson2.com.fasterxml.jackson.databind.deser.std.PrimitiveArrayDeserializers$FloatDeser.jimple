final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers: void <init>(java.lang.Class)>(class "[F");

        return;
    }

    protected void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0, r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider r2;
        java.lang.Boolean r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider;

        r3 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)>(r1, r2, r3);

        return;
    }

    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers withResolved(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0, $r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider r1;
        java.lang.Boolean r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider;

        r2 := @parameter1: java.lang.Boolean;

        $r3 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        specialinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider,java.lang.Boolean)>(r0, r1, r2);

        return $r3;
    }

    protected float[] _constructEmpty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        float[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        $r1 = newarray (float)[0];

        return $r1;
    }

    public float[] deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder r3;
        float f0;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders $r4;
        java.lang.Object $r5, $r6, $r9, $r13;
        float[] $r7, $r14, r17;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r8, $r18, $r20;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider $r10, $r11;
        java.lang.Exception $r15;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException $r16;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $z0 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: java.lang.Object handleNonArray(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        $r14 = (float[]) $r13;

        return $r14;

     label1:
        $r4 = virtualinvoke r2.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders getArrayBuilders()>();

        r3 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder getFloatBuilder()>();

        $r5 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object resetAndStart()>();

        r17 = (float[]) $r5;

        i4 = 0;

     label2:
        $r18 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r20 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        if $r18 == $r20 goto label5;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r18 != $r8 goto label3;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider _nuller>;

        if $r10 == null goto label3;

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider _nuller>;

        interfaceinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.NullValueProvider: java.lang.Object getNullValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r2);

        goto label2;

     label3:
        f0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float _parseFloatPrimitive(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        $i0 = lengthof r17;

        if i4 < $i0 goto label4;

        $r9 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>(r17, i4);

        r17 = (float[]) $r9;

        i4 = 0;

     label4:
        $i1 = i4;

        i4 = i4 + 1;

        r17[$i1] = f0;

        goto label2;

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        $i2 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: int bufferedSize()>();

        $i3 = $i2 + i4;

        $r16 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>($r15, r17, $i3);

        throw $r16;

     label7:
        $r6 = virtualinvoke r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>(r17, i4);

        $r7 = (float[]) $r6;

        return $r7;

        catch java.lang.Exception from label2 to label5 with label6;
    }

    protected float[] handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        float[] $r3;
        float $f0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = newarray (float)[1];

        $f0 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float _parseFloatPrimitive(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        $r3[0] = $f0;

        return $r3;
    }

    protected float[] _concat(float[], float[])
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        float[] r1, r2, r3;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        i0 = lengthof r1;

        i1 = lengthof r2;

        $i2 = i0 + i1;

        r3 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r1, $i2);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, i1);

        return r3;
    }

    protected volatile java.lang.Object _constructEmpty()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        float[] $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] _constructEmpty()>();

        return $r1;
    }

    protected volatile java.lang.Object handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        float[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] handleSingleElementUnwrapped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        return $r3;
    }

    protected volatile java.lang.Object _concat(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        java.lang.Object r1, r2;
        float[] $r3, $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (float[]) r1;

        $r3 = (float[]) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] _concat(float[],float[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonProcessingException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext r2;
        float[] $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] deserialize(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.DeserializationContext)>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: long serialVersionUID> = 1L;

        return;
    }
}
