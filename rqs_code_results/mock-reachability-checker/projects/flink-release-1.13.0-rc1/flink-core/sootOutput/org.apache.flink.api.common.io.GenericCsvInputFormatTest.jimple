public class org.apache.flink.api.common.io.GenericCsvInputFormatTest extends java.lang.Object
{
    private org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format;

    public void <init>()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setup()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        $r1 = new org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat;

        specialinvoke $r1.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void <init>(org.apache.flink.api.common.io.GenericCsvInputFormatTest$1)>(null);

        r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format> = $r1;

        $r2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r2.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFilePath(java.lang.String)>("file:///some/file/that/will/not/be/read");

        return;
    }

    public void setdown() throws java.lang.Exception
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r1, $r2;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        $r1 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r2.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void close()>();

     label1:
        return;
    }

    public void testSparseFieldArray()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        java.lang.Class[] $r2, $r7;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r3, $r4, $r5, $r6;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        $r2 = newarray (java.lang.Class)[6];

        $r2[0] = class "Lorg/apache/flink/types/IntValue;";

        $r2[1] = null;

        $r2[2] = null;

        $r2[3] = class "Lorg/apache/flink/types/StringValue;";

        $r2[4] = null;

        $r2[5] = class "Lorg/apache/flink/types/DoubleValue;";

        $r3 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r3.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r2);

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $i0 = virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: int getNumberOfNonNullFields()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l1);

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $i2 = virtualinvoke $r5.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: int getNumberOfFieldsTotal()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(6L, $l3);

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Class[] getGenericFieldTypes()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r7);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testReadNoPosAll() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r21, $r33, $r35;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r22, $r34;
        org.apache.flink.types.Value $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r29, $r31;
        org.apache.flink.types.IntValue $r12, $r14, $r16, $r18, $r20, $r24, $r26, $r28, $r30, $r32;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;
        boolean $z0;
        java.lang.Exception $r36;
        java.lang.StringBuilder $r37, $r38, $r41, $r42, $r44;
        java.lang.Class $r39;
        java.lang.String $r40, $r43, $r45;
        org.apache.flink.types.Value[] r47, r48, r49;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|222|333|444|555\n666|777|888|999|000|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[5];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = class "Lorg/apache/flink/types/IntValue;";

        $r5[2] = class "Lorg/apache/flink/types/IntValue;";

        $r5[3] = class "Lorg/apache/flink/types/IntValue;";

        $r5[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r47 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r47);

        r48 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r48);

        $r11 = r48[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r48[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(222L, $l3);

        $r15 = r48[2];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l5);

        $r17 = r48[3];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i6 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l7);

        $r19 = r48[4];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i8 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(555L, $l9);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r48);

        r49 = (org.apache.flink.types.Value[]) $r22;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r23 = r49[0];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(666L, $l11);

        $r25 = r49[1];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i12 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l13);

        $r27 = r49[2];

        $r28 = (org.apache.flink.types.IntValue) $r27;

        $i14 = virtualinvoke $r28.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l15);

        $r29 = r49[3];

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i16 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(999L, $l17);

        $r31 = r49[4];

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i18 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $r33 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r49);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r34);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r36 := @caughtexception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r39 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getSimpleName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = virtualinvoke $r36.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r45);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadNoPosAllDeflate() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r21, $r33, $r35;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r22, $r34;
        org.apache.flink.types.Value $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r29, $r31;
        org.apache.flink.types.IntValue $r12, $r14, $r16, $r18, $r20, $r24, $r26, $r28, $r30, $r32;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;
        boolean $z0;
        java.lang.Exception $r36;
        java.lang.StringBuilder $r37, $r38, $r41, $r42, $r44;
        java.lang.Class $r39;
        java.lang.String $r40, $r43, $r45;
        org.apache.flink.types.Value[] r47, r48, r49;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempDeflateFile(java.lang.String)>("111|222|333|444|555\n666|777|888|999|000|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[5];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = class "Lorg/apache/flink/types/IntValue;";

        $r5[2] = class "Lorg/apache/flink/types/IntValue;";

        $r5[3] = class "Lorg/apache/flink/types/IntValue;";

        $r5[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r47 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r47);

        r48 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r48);

        $r11 = r48[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r48[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(222L, $l3);

        $r15 = r48[2];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l5);

        $r17 = r48[3];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i6 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l7);

        $r19 = r48[4];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i8 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(555L, $l9);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r48);

        r49 = (org.apache.flink.types.Value[]) $r22;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r23 = r49[0];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(666L, $l11);

        $r25 = r49[1];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i12 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l13);

        $r27 = r49[2];

        $r28 = (org.apache.flink.types.IntValue) $r27;

        $i14 = virtualinvoke $r28.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l15);

        $r29 = r49[3];

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i16 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(999L, $l17);

        $r31 = r49[4];

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i18 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $r33 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r49);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r34);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r36 := @caughtexception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r39 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getSimpleName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = virtualinvoke $r36.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r45);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadNoPosAllGzip() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r21, $r33, $r35;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r22, $r34;
        org.apache.flink.types.Value $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r29, $r31;
        org.apache.flink.types.IntValue $r12, $r14, $r16, $r18, $r20, $r24, $r26, $r28, $r30, $r32;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;
        boolean $z0;
        java.lang.Exception $r36;
        java.lang.StringBuilder $r37, $r38, $r41, $r42, $r44;
        java.lang.Class $r39;
        java.lang.String $r40, $r43, $r45;
        org.apache.flink.types.Value[] r47, r48, r49;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempGzipFile(java.lang.String)>("111|222|333|444|555\n666|777|888|999|000|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[5];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = class "Lorg/apache/flink/types/IntValue;";

        $r5[2] = class "Lorg/apache/flink/types/IntValue;";

        $r5[3] = class "Lorg/apache/flink/types/IntValue;";

        $r5[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r47 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r47);

        r48 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r48);

        $r11 = r48[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r48[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(222L, $l3);

        $r15 = r48[2];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l5);

        $r17 = r48[3];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i6 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l7);

        $r19 = r48[4];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i8 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(555L, $l9);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r48);

        r49 = (org.apache.flink.types.Value[]) $r22;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r23 = r49[0];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(666L, $l11);

        $r25 = r49[1];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i12 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l13);

        $r27 = r49[2];

        $r28 = (org.apache.flink.types.IntValue) $r27;

        $i14 = virtualinvoke $r28.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l15);

        $r29 = r49[3];

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i16 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(999L, $l17);

        $r31 = r49[4];

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i18 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $r33 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r49);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r34);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r36 := @caughtexception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r39 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getSimpleName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = virtualinvoke $r36.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r45);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadNoPosAllZStandard() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r21, $r33, $r35;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r22, $r34;
        org.apache.flink.types.Value $r11, $r13, $r15, $r17, $r19, $r23, $r25, $r27, $r29, $r31;
        org.apache.flink.types.IntValue $r12, $r14, $r16, $r18, $r20, $r24, $r26, $r28, $r30, $r32;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19;
        boolean $z0;
        java.lang.Exception $r36;
        java.lang.StringBuilder $r37, $r38, $r41, $r42, $r44;
        java.lang.Class $r39;
        java.lang.String $r40, $r43, $r45;
        org.apache.flink.types.Value[] r47, r48, r49;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempZStandardFile(java.lang.String)>("111|222|333|444|555\n666|777|888|999|000|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[5];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = class "Lorg/apache/flink/types/IntValue;";

        $r5[2] = class "Lorg/apache/flink/types/IntValue;";

        $r5[3] = class "Lorg/apache/flink/types/IntValue;";

        $r5[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r47 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r47);

        r48 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r48);

        $r11 = r48[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r48[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(222L, $l3);

        $r15 = r48[2];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l5);

        $r17 = r48[3];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i6 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l7);

        $r19 = r48[4];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i8 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(555L, $l9);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r48);

        r49 = (org.apache.flink.types.Value[]) $r22;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r49);

        $r23 = r49[0];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(666L, $l11);

        $r25 = r49[1];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i12 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l13);

        $r27 = r49[2];

        $r28 = (org.apache.flink.types.IntValue) $r27;

        $i14 = virtualinvoke $r28.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l15);

        $r29 = r49[3];

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i16 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(999L, $l17);

        $r31 = r49[4];

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i18 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l19);

        $r33 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r34 = virtualinvoke $r33.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r49);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r34);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r36 := @caughtexception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r39 = virtualinvoke $r36.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getSimpleName()>();

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = virtualinvoke $r36.<java.lang.Exception: java.lang.String getMessage()>();

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r45);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadNoPosFirstN() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r15, $r21, $r23;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r16, $r22;
        org.apache.flink.types.Value $r11, $r13, $r17, $r19;
        org.apache.flink.types.IntValue $r12, $r14, $r18, $r20;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        boolean $z0;
        java.lang.Exception $r24;
        java.lang.StringBuilder $r25, $r26, $r29, $r30, $r32;
        java.lang.Class $r27;
        java.lang.String $r28, $r31, $r33;
        org.apache.flink.types.Value[] r35, r36, r37;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|222|333|444|555|\n666|777|888|999|000|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r35 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(2);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r35);

        r36 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r36);

        $r11 = r36[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r36[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(222L, $l3);

        $r15 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r36);

        r37 = (org.apache.flink.types.Value[]) $r16;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r37);

        $r17 = r37[0];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i4 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(666L, $l5);

        $r19 = r37[1];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i6 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l7);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r22);

        $r23 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r23.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r27 = virtualinvoke $r24.<java.lang.Object: java.lang.Class getClass()>();

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getSimpleName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r31 = virtualinvoke $r24.<java.lang.Exception: java.lang.String getMessage()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r33);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testSparseParse()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r17, $r25, $r27;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r18, $r26;
        org.apache.flink.types.Value $r11, $r13, $r15, $r19, $r21, $r23;
        org.apache.flink.types.IntValue $r12, $r14, $r16, $r20, $r22, $r24;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        boolean $z0;
        java.lang.Exception $r28;
        java.io.PrintStream $r29;
        java.lang.String $r30;
        org.apache.flink.types.Value[] r32, r33, r34;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|222|333|444|555|666|777|888|999|000|\n000|999|888|777|666|555|444|333|222|111|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[8];

        $r5[0] = class "Lorg/apache/flink/types/IntValue;";

        $r5[1] = null;

        $r5[2] = null;

        $r5[3] = class "Lorg/apache/flink/types/IntValue;";

        $r5[4] = null;

        $r5[5] = null;

        $r5[6] = null;

        $r5[7] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r32 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(3);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r32);

        r33 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r33);

        $r11 = r33[0];

        $r12 = (org.apache.flink.types.IntValue) $r11;

        $i0 = virtualinvoke $r12.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r13 = r33[1];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i2 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l3);

        $r15 = r33[2];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i4 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l5);

        $r17 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r33);

        r34 = (org.apache.flink.types.Value[]) $r18;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r34);

        $r19 = r34[0];

        $r20 = (org.apache.flink.types.IntValue) $r19;

        $i6 = virtualinvoke $r20.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r21 = r34[1];

        $r22 = (org.apache.flink.types.IntValue) $r21;

        $i8 = virtualinvoke $r22.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l9);

        $r23 = r34[2];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i10 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l11);

        $r25 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r34);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r26);

        $r27 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r27.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        $r29 = <java.lang.System: java.io.PrintStream err>;

        $r30 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r30);

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test erroneous");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testLongLongLong()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r17, $r25, $r27;
        java.lang.Class[] $r5;
        java.lang.Object $r10, $r18, $r26;
        org.apache.flink.types.Value $r11, $r13, $r15, $r19, $r21, $r23;
        org.apache.flink.types.LongValue $r12, $r14, $r16, $r20, $r22, $r24;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        boolean $z0;
        java.lang.Exception $r28;
        java.io.PrintStream $r29;
        java.lang.String $r30;
        org.apache.flink.types.Value[] r32, r33, r34;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("1,2,3\n3,2,1");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>(",");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[3];

        $r5[0] = class "Lorg/apache/flink/types/LongValue;";

        $r5[1] = class "Lorg/apache/flink/types/LongValue;";

        $r5[2] = class "Lorg/apache/flink/types/LongValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r32 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createLongValues(int)>(3);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r32);

        r33 = (org.apache.flink.types.Value[]) $r10;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r33);

        $r11 = r33[0];

        $r12 = (org.apache.flink.types.LongValue) $r11;

        $l0 = virtualinvoke $r12.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l0);

        $r13 = r33[1];

        $r14 = (org.apache.flink.types.LongValue) $r13;

        $l1 = virtualinvoke $r14.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l1);

        $r15 = r33[2];

        $r16 = (org.apache.flink.types.LongValue) $r15;

        $l2 = virtualinvoke $r16.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l2);

        $r17 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r33);

        r34 = (org.apache.flink.types.Value[]) $r18;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r34);

        $r19 = r34[0];

        $r20 = (org.apache.flink.types.LongValue) $r19;

        $l3 = virtualinvoke $r20.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l3);

        $r21 = r34[1];

        $r22 = (org.apache.flink.types.LongValue) $r21;

        $l4 = virtualinvoke $r22.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(2L, $l4);

        $r23 = r34[2];

        $r24 = (org.apache.flink.types.LongValue) $r23;

        $l5 = virtualinvoke $r24.<org.apache.flink.types.LongValue: long getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l5);

        $r25 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r34);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r26);

        $r27 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r27.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r28 := @caughtexception;

        $r29 = <java.lang.System: java.io.PrintStream err>;

        $r30 = virtualinvoke $r28.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>($r30);

        virtualinvoke $r28.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test erroneous");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testSparseParseWithIndices()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r8, $r9, $r10, $r11, $r19, $r27, $r29;
        int[] $r5;
        java.lang.Class[] $r6, $r7;
        java.lang.Object $r12, $r20, $r28;
        org.apache.flink.types.Value $r13, $r15, $r17, $r21, $r23, $r25;
        org.apache.flink.types.IntValue $r14, $r16, $r18, $r22, $r24, $r26;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        long $l1, $l3, $l5, $l7, $l9, $l11;
        boolean $z0;
        java.lang.Exception $r30;
        java.io.PrintStream $r31;
        java.lang.String $r32;
        org.apache.flink.types.Value[] r34, r35, r36;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|222|333|444|555|666|777|888|999|000|\n000|999|888|777|666|555|444|333|222|111|");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (int)[3];

        $r5[0] = 0;

        $r5[1] = 3;

        $r5[2] = 7;

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Lorg/apache/flink/types/IntValue;";

        $r6[1] = class "Lorg/apache/flink/types/IntValue;";

        $r6[2] = class "Lorg/apache/flink/types/IntValue;";

        $r7 = (java.lang.Class[]) $r6;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldsGeneric(int[],java.lang.Class[])>($r5, $r7);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r34 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(3);

        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r34);

        r35 = (org.apache.flink.types.Value[]) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r35);

        $r13 = r35[0];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i0 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r15 = r35[1];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i2 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l3);

        $r17 = r35[2];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i4 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l5);

        $r19 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r35);

        r36 = (org.apache.flink.types.Value[]) $r20;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r36);

        $r21 = r36[0];

        $r22 = (org.apache.flink.types.IntValue) $r21;

        $i6 = virtualinvoke $r22.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r23 = r36[1];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i8 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l9);

        $r25 = r36[2];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i10 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l11);

        $r27 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r28 = virtualinvoke $r27.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r36);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r28);

        $r29 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r29.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r30 := @caughtexception;

        $r31 = <java.lang.System: java.io.PrintStream err>;

        $r32 = virtualinvoke $r30.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r32);

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test erroneous");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testSparseParseWithIndicesMultiCharDelimiter()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r8, $r9, $r10, $r11, $r19, $r27, $r35, $r43, $r45;
        int[] $r5;
        java.lang.Class[] $r6, $r7;
        java.lang.Object $r12, $r20, $r28, $r36, $r44;
        org.apache.flink.types.Value $r13, $r15, $r17, $r21, $r23, $r25, $r29, $r31, $r33, $r37, $r39, $r41;
        org.apache.flink.types.IntValue $r14, $r16, $r18, $r22, $r24, $r26, $r30, $r32, $r34, $r38, $r40, $r42;
        int $i0, $i2, $i4, $i6, $i8, $i10, $i12, $i14, $i16, $i18, $i20, $i22;
        long $l1, $l3, $l5, $l7, $l9, $l11, $l13, $l15, $l17, $l19, $l21, $l23;
        boolean $z0;
        java.lang.Exception $r46;
        java.io.PrintStream $r47;
        java.lang.String $r48;
        org.apache.flink.types.Value[] r50, r51, r52, r53, r54;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|-|222|-|333|-|444|-|555|-|666|-|777|-|888|-|999|-|000|-|\n000|-|999|-|888|-|777|-|666|-|555|-|444|-|333|-|222|-|111\n555|-|999|-|888|-|111|-|666|-|555|-|444|-|777|-|222|-|111|-|\n22222|-|99999|-|8|-|99999999|-|6666666|-|5|-|4444|-|8|-|22222|-|1\n");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|-|");

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (int)[3];

        $r5[0] = 0;

        $r5[1] = 3;

        $r5[2] = 7;

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Lorg/apache/flink/types/IntValue;";

        $r6[1] = class "Lorg/apache/flink/types/IntValue;";

        $r6[2] = class "Lorg/apache/flink/types/IntValue;";

        $r7 = (java.lang.Class[]) $r6;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldsGeneric(int[],java.lang.Class[])>($r5, $r7);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r50 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(3);

        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r50);

        r51 = (org.apache.flink.types.Value[]) $r12;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r51);

        $r13 = r51[0];

        $r14 = (org.apache.flink.types.IntValue) $r13;

        $i0 = virtualinvoke $r14.<org.apache.flink.types.IntValue: int getValue()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l1);

        $r15 = r51[1];

        $r16 = (org.apache.flink.types.IntValue) $r15;

        $i2 = virtualinvoke $r16.<org.apache.flink.types.IntValue: int getValue()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(444L, $l3);

        $r17 = r51[2];

        $r18 = (org.apache.flink.types.IntValue) $r17;

        $i4 = virtualinvoke $r18.<org.apache.flink.types.IntValue: int getValue()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(888L, $l5);

        $r19 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r20 = virtualinvoke $r19.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r51);

        r52 = (org.apache.flink.types.Value[]) $r20;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r52);

        $r21 = r52[0];

        $r22 = (org.apache.flink.types.IntValue) $r21;

        $i6 = virtualinvoke $r22.<org.apache.flink.types.IntValue: int getValue()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        $r23 = r52[1];

        $r24 = (org.apache.flink.types.IntValue) $r23;

        $i8 = virtualinvoke $r24.<org.apache.flink.types.IntValue: int getValue()>();

        $l9 = (long) $i8;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l9);

        $r25 = r52[2];

        $r26 = (org.apache.flink.types.IntValue) $r25;

        $i10 = virtualinvoke $r26.<org.apache.flink.types.IntValue: int getValue()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(333L, $l11);

        $r27 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r28 = virtualinvoke $r27.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r52);

        r53 = (org.apache.flink.types.Value[]) $r28;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r53);

        $r29 = r53[0];

        $r30 = (org.apache.flink.types.IntValue) $r29;

        $i12 = virtualinvoke $r30.<org.apache.flink.types.IntValue: int getValue()>();

        $l13 = (long) $i12;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(555L, $l13);

        $r31 = r53[1];

        $r32 = (org.apache.flink.types.IntValue) $r31;

        $i14 = virtualinvoke $r32.<org.apache.flink.types.IntValue: int getValue()>();

        $l15 = (long) $i14;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(111L, $l15);

        $r33 = r53[2];

        $r34 = (org.apache.flink.types.IntValue) $r33;

        $i16 = virtualinvoke $r34.<org.apache.flink.types.IntValue: int getValue()>();

        $l17 = (long) $i16;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(777L, $l17);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r36 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r53);

        r54 = (org.apache.flink.types.Value[]) $r36;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r54);

        $r37 = r54[0];

        $r38 = (org.apache.flink.types.IntValue) $r37;

        $i18 = virtualinvoke $r38.<org.apache.flink.types.IntValue: int getValue()>();

        $l19 = (long) $i18;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(22222L, $l19);

        $r39 = r54[1];

        $r40 = (org.apache.flink.types.IntValue) $r39;

        $i20 = virtualinvoke $r40.<org.apache.flink.types.IntValue: int getValue()>();

        $l21 = (long) $i20;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(99999999L, $l21);

        $r41 = r54[2];

        $r42 = (org.apache.flink.types.IntValue) $r41;

        $i22 = virtualinvoke $r42.<org.apache.flink.types.IntValue: int getValue()>();

        $l23 = (long) $i22;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(8L, $l23);

        $r43 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r44 = virtualinvoke $r43.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r54);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r44);

        $r45 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r45.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r46 := @caughtexception;

        $r47 = <java.lang.System: java.io.PrintStream err>;

        $r48 = virtualinvoke $r46.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r47.<java.io.PrintStream: void println(java.lang.String)>($r48);

        virtualinvoke $r46.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Test erroneous");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadTooShortInput() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.types.Value[] r3;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r6, $r8, $r9, $r10, $r11;
        java.lang.Class[] $r7;
        org.apache.flink.api.common.io.ParseException $r13;
        java.lang.Exception $r14;
        java.lang.StringBuilder $r15, $r16, $r19, $r20, $r22;
        java.lang.Class $r17;
        java.lang.String $r18, $r21, $r23;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("111|222|333|444\n666|777|888|999");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r7 = newarray (java.lang.Class)[5];

        $r7[0] = class "Lorg/apache/flink/types/IntValue;";

        $r7[1] = class "Lorg/apache/flink/types/IntValue;";

        $r7[2] = class "Lorg/apache/flink/types/IntValue;";

        $r7[3] = class "Lorg/apache/flink/types/IntValue;";

        $r7[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r7);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r3 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

     label2:
        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Should have thrown a parse exception on too short input.");

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r17 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getSimpleName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r23);

     label7:
        return;

        catch org.apache.flink.api.common.io.ParseException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testReadTooShortInputLenient() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.types.Value[] r3;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r5, $r7, $r8, $r9, $r10, $r11, $r13, $r15;
        java.lang.Class[] $r6;
        java.lang.Object $r12, $r14, $r16;
        java.lang.Exception $r17;
        java.lang.StringBuilder $r18, $r19, $r22, $r23, $r25;
        java.lang.Class $r20;
        java.lang.String $r21, $r24, $r26;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("666|777|888|999|555\n111|222|333|444\n666|777|888|999|555");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r5.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r6 = newarray (java.lang.Class)[5];

        $r6[0] = class "Lorg/apache/flink/types/IntValue;";

        $r6[1] = class "Lorg/apache/flink/types/IntValue;";

        $r6[2] = class "Lorg/apache/flink/types/IntValue;";

        $r6[3] = class "Lorg/apache/flink/types/IntValue;";

        $r6[4] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setLenient(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        r3 = specialinvoke r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.types.Value[] createIntValues(int)>(5);

        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r12);

        $r13 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r14);

        $r15 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r16);

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r20 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getSimpleName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = virtualinvoke $r17.<java.lang.Exception: java.lang.String getMessage()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r26);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadInvalidContents() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r6, $r8, $r9, $r10, $r16, $r18;
        java.lang.Class[] $r7;
        org.apache.flink.types.Value[] $r11;
        org.apache.flink.types.StringValue $r12, $r14;
        org.apache.flink.types.IntValue $r13, $r15;
        java.lang.Object $r17;
        java.lang.Exception $r20;
        java.lang.StringBuilder $r21, $r22, $r25, $r26, $r28;
        java.lang.Class $r23;
        java.lang.String $r24, $r27, $r29;
        org.apache.flink.api.common.io.ParseException $r30;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("abc|222|def|444\nkkz|777|888|hhg");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r7 = newarray (java.lang.Class)[4];

        $r7[0] = class "Lorg/apache/flink/types/StringValue;";

        $r7[1] = class "Lorg/apache/flink/types/IntValue;";

        $r7[2] = class "Lorg/apache/flink/types/StringValue;";

        $r7[3] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r7);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r11 = newarray (org.apache.flink.types.Value)[4];

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[0] = $r12;

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[1] = $r13;

        $r14 = new org.apache.flink.types.StringValue;

        specialinvoke $r14.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[2] = $r14;

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[3] = $r15;

        $r16 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

     label2:
        $r18 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r18.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Input format accepted on invalid input.");

     label3:
        goto label5;

     label4:
        $r30 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r23 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getSimpleName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r27 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r29);

     label7:
        return;

        catch org.apache.flink.api.common.io.ParseException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testReadInvalidContentsLenient()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r5, $r7, $r8, $r9, $r10, $r16, $r18;
        java.lang.Class[] $r6;
        org.apache.flink.types.Value[] $r11;
        org.apache.flink.types.StringValue $r12, $r14;
        org.apache.flink.types.IntValue $r13, $r15;
        java.lang.Object $r17, $r19;
        java.lang.Exception $r20;
        java.lang.StringBuilder $r21, $r22, $r25, $r26, $r28;
        java.lang.Class $r23;
        java.lang.String $r24, $r27, $r29;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("abc|222|def|444\nkkz|777|888|hhg");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r5.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r6 = newarray (java.lang.Class)[4];

        $r6[0] = class "Lorg/apache/flink/types/StringValue;";

        $r6[1] = class "Lorg/apache/flink/types/IntValue;";

        $r6[2] = class "Lorg/apache/flink/types/StringValue;";

        $r6[3] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setLenient(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r11 = newarray (org.apache.flink.types.Value)[4];

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[0] = $r12;

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[1] = $r13;

        $r14 = new org.apache.flink.types.StringValue;

        specialinvoke $r14.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[2] = $r14;

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[3] = $r15;

        $r16 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r19);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r23 = virtualinvoke $r20.<java.lang.Object: java.lang.Class getClass()>();

        $r24 = virtualinvoke $r23.<java.lang.Class: java.lang.String getSimpleName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r27 = virtualinvoke $r20.<java.lang.Exception: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r29);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadInvalidContentsLenientWithSkipping()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r5, $r7, $r8, $r9, $r10, $r14, $r16, $r18, $r20;
        java.lang.Class[] $r6;
        org.apache.flink.types.Value[] $r11;
        org.apache.flink.types.StringValue $r12;
        org.apache.flink.types.IntValue $r13;
        java.lang.Object $r15, $r17, $r19, $r21;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r23, $r24, $r27, $r28, $r30;
        java.lang.Class $r25;
        java.lang.String $r26, $r29, $r31;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("abc|dfgsdf|777|444\nkkz|777|foobar|hhg\nkkz|777foobarhhg  \nxyx|ignored|42|\n");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r5.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r6 = newarray (java.lang.Class)[3];

        $r6[0] = class "Lorg/apache/flink/types/StringValue;";

        $r6[1] = null;

        $r6[2] = class "Lorg/apache/flink/types/IntValue;";

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setLenient(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r11 = newarray (org.apache.flink.types.Value)[2];

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[0] = $r12;

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[1] = $r13;

        $r14 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r15 = virtualinvoke $r14.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r15);

        $r16 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r19);

        $r20 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r21);

     label2:
        goto label4;

     label3:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r25 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getSimpleName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r29 = virtualinvoke $r22.<java.lang.Exception: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testReadWithCharset() throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        java.lang.String r3, r6, $r16, $r17, $r29;
        int i0, i1, i3, $i4;
        java.io.File r7;
        java.lang.String[] $r10, $r12, $r30, $r34, r37;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$1 $r11;
        java.io.OutputStreamWriter $r13;
        java.io.FileOutputStream $r14;
        java.lang.Object $r15, $r36;
        boolean $z0;
        java.lang.Throwable $r18, $r19, $r20, r23;
        org.apache.flink.core.fs.FileInputSplit $r26;
        org.apache.flink.core.fs.Path $r27;
        java.net.URI $r28;
        long $l2;
        java.lang.Class[] $r32;
        org.apache.flink.configuration.Configuration $r33;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        $r10 = newarray (java.lang.String)[3];

        $r10[0] = "\u020e\u021f";

        $r10[1] = "Flink";

        $r10[2] = "\u020b\u020f";

        r3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($r10, "\u05c0\u05c0");

        $r11 = new org.apache.flink.api.common.io.GenericCsvInputFormatTest$1;

        specialinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$1: void <init>(org.apache.flink.api.common.io.GenericCsvInputFormatTest)>(r0);

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void setFilePath(java.lang.String)>("file:///some/file/that/will/not/be/read");

        $r12 = newarray (java.lang.String)[3];

        $r12[0] = "UTF-8";

        $r12[1] = "UTF-16BE";

        $r12[2] = "UTF-16LE";

        i0 = lengthof $r12;

        i1 = 0;

     label01:
        if i1 >= i0 goto label16;

        r6 = $r12[i1];

        r7 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp");

        virtualinvoke r7.<java.io.File: void deleteOnExit()>();

        $r13 = new java.io.OutputStreamWriter;

        $r14 = new java.io.FileOutputStream;

        specialinvoke $r14.<java.io.FileOutputStream: void <init>(java.io.File)>(r7);

        specialinvoke $r13.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r14, r6);

        r23 = null;

     label02:
        virtualinvoke $r13.<java.io.Writer: void write(java.lang.String)>(r3);

     label03:
        if $r13 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r13.<java.io.Writer: void close()>();

        goto label13;

     label05:
        $r20 := @caughtexception;

        r23 = $r20;

        throw $r20;

     label06:
        $r19 := @caughtexception;

     label07:
        if $r13 == null goto label12;

        if r23 == null goto label11;

     label08:
        virtualinvoke $r13.<java.io.Writer: void close()>();

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        virtualinvoke r23.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label12;

     label11:
        virtualinvoke $r13.<java.io.Writer: void close()>();

     label12:
        throw $r19;

     label13:
        $r26 = new org.apache.flink.core.fs.FileInputSplit;

        $r27 = new org.apache.flink.core.fs.Path;

        $r28 = virtualinvoke r7.<java.io.File: java.net.URI toURI()>();

        $r29 = virtualinvoke $r28.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r29);

        $l2 = virtualinvoke r7.<java.io.File: long length()>();

        $r30 = newarray (java.lang.String)[1];

        $r30[0] = "localhost";

        specialinvoke $r26.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r27, 0L, $l2, $r30);

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void setFieldDelimiter(java.lang.String)>("\u05c0\u05c0");

        $r32 = newarray (java.lang.Class)[3];

        $r32[0] = class "Ljava/lang/String;";

        $r32[1] = class "Ljava/lang/String;";

        $r32[2] = class "Ljava/lang/String;";

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r32);

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void setCharset(java.lang.String)>(r6);

        $r33 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r33.<org.apache.flink.configuration.Configuration: void <init>()>();

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r33);

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>($r26);

        $r34 = newarray (java.lang.String)[3];

        $r34[0] = "";

        $r34[1] = "";

        $r34[2] = "";

        $r36 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r34);

        r37 = (java.lang.String[]) $r36;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r37);

        i3 = 0;

     label14:
        $i4 = lengthof $r10;

        if i3 >= $i4 goto label15;

        $r17 = $r10[i3];

        $r16 = r37[i3];

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r17, $r16);

        i3 = i3 + 1;

        goto label14;

     label15:
        $r15 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r37);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r15);

        $z0 = virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        i1 = i1 + 1;

        goto label01;

     label16:
        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormat: void close()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public void readWithEmptyField()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r13, $r24, $r35;
        java.lang.Class[] $r5;
        org.apache.flink.types.Value[] $r9, r58, r59, r60;
        org.apache.flink.types.StringValue $r10, $r11, $r12, $r16, $r19, $r22, $r27, $r30, $r33, $r38, $r41, $r44;
        java.lang.Object $r14, $r25, $r36;
        org.apache.flink.types.Value $r15, $r18, $r21, $r26, $r29, $r32, $r37, $r40, $r43;
        java.lang.String $r17, $r20, $r23, $r28, $r31, $r34, $r39, $r42, $r45, $r50, $r53, $r55;
        java.lang.Exception $r46;
        java.lang.StringBuilder $r47, $r48, $r51, $r52, $r54;
        java.lang.Class $r49;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("abc|def|ghijk\nabc||hhg\n|||");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[3];

        $r5[0] = class "Lorg/apache/flink/types/StringValue;";

        $r5[1] = class "Lorg/apache/flink/types/StringValue;";

        $r5[2] = class "Lorg/apache/flink/types/StringValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r9 = newarray (org.apache.flink.types.Value)[3];

        $r10 = new org.apache.flink.types.StringValue;

        specialinvoke $r10.<org.apache.flink.types.StringValue: void <init>()>();

        $r9[0] = $r10;

        $r11 = new org.apache.flink.types.StringValue;

        specialinvoke $r11.<org.apache.flink.types.StringValue: void <init>()>();

        $r9[1] = $r11;

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>()>();

        $r9[2] = $r12;

        $r13 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r9);

        r58 = (org.apache.flink.types.Value[]) $r14;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r58);

        $r15 = r58[0];

        $r16 = (org.apache.flink.types.StringValue) $r15;

        $r17 = virtualinvoke $r16.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r17);

        $r18 = r58[1];

        $r19 = (org.apache.flink.types.StringValue) $r18;

        $r20 = virtualinvoke $r19.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("def", $r20);

        $r21 = r58[2];

        $r22 = (org.apache.flink.types.StringValue) $r21;

        $r23 = virtualinvoke $r22.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ghijk", $r23);

        $r24 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r25 = virtualinvoke $r24.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r58);

        r59 = (org.apache.flink.types.Value[]) $r25;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r59);

        $r26 = r59[0];

        $r27 = (org.apache.flink.types.StringValue) $r26;

        $r28 = virtualinvoke $r27.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r28);

        $r29 = r59[1];

        $r30 = (org.apache.flink.types.StringValue) $r29;

        $r31 = virtualinvoke $r30.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r31);

        $r32 = r59[2];

        $r33 = (org.apache.flink.types.StringValue) $r32;

        $r34 = virtualinvoke $r33.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("hhg", $r34);

        $r35 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r36 = virtualinvoke $r35.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r59);

        r60 = (org.apache.flink.types.Value[]) $r36;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r60);

        $r37 = r60[0];

        $r38 = (org.apache.flink.types.StringValue) $r37;

        $r39 = virtualinvoke $r38.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r39);

        $r40 = r60[1];

        $r41 = (org.apache.flink.types.StringValue) $r40;

        $r42 = virtualinvoke $r41.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r42);

        $r43 = r60[2];

        $r44 = (org.apache.flink.types.StringValue) $r43;

        $r45 = virtualinvoke $r44.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("", $r45);

     label2:
        goto label4;

     label3:
        $r46 := @caughtexception;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r49 = virtualinvoke $r46.<java.lang.Object: java.lang.Class getClass()>();

        $r50 = virtualinvoke $r49.<java.lang.Class: java.lang.String getSimpleName()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r53 = virtualinvoke $r46.<java.lang.Exception: java.lang.String getMessage()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r55);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void readWithParseQuotedStrings()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r4, $r6, $r7, $r8, $r9, $r13, $r21;
        java.lang.Class[] $r5;
        org.apache.flink.types.Value[] $r10, r41, r42;
        org.apache.flink.types.StringValue $r11, $r12, $r16, $r19, $r24, $r27;
        java.lang.Object $r14, $r22;
        org.apache.flink.types.Value $r15, $r18, $r23, $r26;
        java.lang.String $r17, $r20, $r25, $r28, $r33, $r36, $r38;
        java.lang.Exception $r29;
        java.lang.StringBuilder $r30, $r31, $r34, $r35, $r37;
        java.lang.Class $r32;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("\"ab\\\"c\"|\"def\"\n\"ghijk\"|\"abc\"");

        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r4 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r4.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r5 = newarray (java.lang.Class)[2];

        $r5[0] = class "Lorg/apache/flink/types/StringValue;";

        $r5[1] = class "Lorg/apache/flink/types/StringValue;";

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r5);

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void enableQuotedStringParsing(char)>(34);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r3);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r10 = newarray (org.apache.flink.types.Value)[2];

        $r11 = new org.apache.flink.types.StringValue;

        specialinvoke $r11.<org.apache.flink.types.StringValue: void <init>()>();

        $r10[0] = $r11;

        $r12 = new org.apache.flink.types.StringValue;

        specialinvoke $r12.<org.apache.flink.types.StringValue: void <init>()>();

        $r10[1] = $r12;

        $r13 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r10);

        r41 = (org.apache.flink.types.Value[]) $r14;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r41);

        $r15 = r41[0];

        $r16 = (org.apache.flink.types.StringValue) $r15;

        $r17 = virtualinvoke $r16.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ab\\\"c", $r17);

        $r18 = r41[1];

        $r19 = (org.apache.flink.types.StringValue) $r18;

        $r20 = virtualinvoke $r19.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("def", $r20);

        $r21 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r22 = virtualinvoke $r21.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>(r41);

        r42 = (org.apache.flink.types.Value[]) $r22;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r42);

        $r23 = r42[0];

        $r24 = (org.apache.flink.types.StringValue) $r23;

        $r25 = virtualinvoke $r24.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("ghijk", $r25);

        $r26 = r42[1];

        $r27 = (org.apache.flink.types.StringValue) $r26;

        $r28 = virtualinvoke $r27.<org.apache.flink.types.StringValue: java.lang.String getValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("abc", $r28);

     label2:
        goto label4;

     label3:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r32 = virtualinvoke $r29.<java.lang.Object: java.lang.Class getClass()>();

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getSimpleName()>();

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r36 = virtualinvoke $r29.<java.lang.Exception: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r38);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void readWithHeaderLine()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r4;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r5, $r7, $r8, $r9, $r10, $r16, $r18, $r20, $r22;
        java.lang.Class[] $r6;
        org.apache.flink.types.Value[] $r11;
        org.apache.flink.types.IntValue $r12, $r14;
        org.apache.flink.types.StringValue $r13, $r15;
        java.lang.Object $r17, $r19, $r21;
        boolean $z0;
        java.lang.Exception $r23;
        java.lang.StringBuilder $r24, $r25, $r28, $r29, $r31;
        java.lang.Class $r26;
        java.lang.String $r27, $r30, $r32;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("colname-1|colname-2|some name 3|column four|\n123|abc|456|def|\n987|xyz|654|pqr|\n");

        $r4 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r4.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r5 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r5.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r7 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r6 = newarray (java.lang.Class)[4];

        $r6[0] = class "Lorg/apache/flink/types/IntValue;";

        $r6[1] = class "Lorg/apache/flink/types/StringValue;";

        $r6[2] = class "Lorg/apache/flink/types/IntValue;";

        $r6[3] = class "Lorg/apache/flink/types/StringValue;";

        virtualinvoke $r7.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r6);

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setSkipFirstLineAsHeader(boolean)>(1);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r4);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r11 = newarray (org.apache.flink.types.Value)[4];

        $r12 = new org.apache.flink.types.IntValue;

        specialinvoke $r12.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[0] = $r12;

        $r13 = new org.apache.flink.types.StringValue;

        specialinvoke $r13.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[1] = $r13;

        $r14 = new org.apache.flink.types.IntValue;

        specialinvoke $r14.<org.apache.flink.types.IntValue: void <init>()>();

        $r11[2] = $r14;

        $r15 = new org.apache.flink.types.StringValue;

        specialinvoke $r15.<org.apache.flink.types.StringValue: void <init>()>();

        $r11[3] = $r15;

        $r16 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r19 = virtualinvoke $r18.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r19);

        $r20 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r21 = virtualinvoke $r20.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r21);

        $r22 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $z0 = virtualinvoke $r22.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: boolean reachedEnd()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r26 = virtualinvoke $r23.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r26.<java.lang.Class: java.lang.String getSimpleName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r30 = virtualinvoke $r23.<java.lang.Exception: java.lang.String getMessage()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r32);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void readWithHeaderLineAndInvalidIntermediate()
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        org.apache.flink.core.fs.FileInputSplit r1;
        org.apache.flink.configuration.Configuration $r5;
        org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat $r6, $r8, $r9, $r10, $r11, $r17, $r19;
        java.lang.Class[] $r7;
        org.apache.flink.types.Value[] $r12;
        org.apache.flink.types.IntValue $r13, $r15;
        org.apache.flink.types.StringValue $r14, $r16;
        java.lang.Object $r18;
        org.apache.flink.api.common.io.ParseException $r21;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r23, $r24, $r27, $r28, $r30;
        java.lang.Class $r25;
        java.lang.String $r26, $r29, $r31;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

     label1:
        r1 = staticinvoke <org.apache.flink.api.common.io.DelimitedInputFormatTest: org.apache.flink.core.fs.FileInputSplit createTempFile(java.lang.String)>("colname-1|colname-2|some name 3|column four|\n123|abc|456|def|\ncolname-1|colname-2|some name 3|column four|\n987|xyz|654|pqr|\n");

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r6.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldDelimiter(java.lang.String)>("|");

        $r8 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r7 = newarray (java.lang.Class)[4];

        $r7[0] = class "Lorg/apache/flink/types/IntValue;";

        $r7[1] = class "Lorg/apache/flink/types/StringValue;";

        $r7[2] = class "Lorg/apache/flink/types/IntValue;";

        $r7[3] = class "Lorg/apache/flink/types/StringValue;";

        virtualinvoke $r8.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setFieldTypesGeneric(java.lang.Class[])>($r7);

        $r9 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r9.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void setSkipFirstLineAsHeader(boolean)>(1);

        $r10 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r10.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void configure(org.apache.flink.configuration.Configuration)>($r5);

        $r11 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r11.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: void open(org.apache.flink.core.fs.FileInputSplit)>(r1);

        $r12 = newarray (org.apache.flink.types.Value)[4];

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>()>();

        $r12[0] = $r13;

        $r14 = new org.apache.flink.types.StringValue;

        specialinvoke $r14.<org.apache.flink.types.StringValue: void <init>()>();

        $r12[1] = $r14;

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>()>();

        $r12[2] = $r15;

        $r16 = new org.apache.flink.types.StringValue;

        specialinvoke $r16.<org.apache.flink.types.StringValue: void <init>()>();

        $r12[3] = $r16;

        $r17 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        $r18 = virtualinvoke $r17.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r18);

     label2:
        $r19 = r0.<org.apache.flink.api.common.io.GenericCsvInputFormatTest: org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat format>;

        virtualinvoke $r19.<org.apache.flink.api.common.io.GenericCsvInputFormatTest$TestCsvInputFormat: java.lang.Object nextRecord(java.lang.Object)>($r12);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Format accepted invalid line.");

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test failed due to a ");

        $r25 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.String getSimpleName()>();

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r29 = virtualinvoke $r22.<java.lang.Exception: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label7:
        return;

        catch org.apache.flink.api.common.io.ParseException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    private org.apache.flink.core.fs.FileInputSplit createTempDeflateFile(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        java.lang.String r1, $r10;
        java.io.File r2;
        java.io.DataOutputStream $r4;
        java.util.zip.DeflaterOutputStream $r5;
        java.io.FileOutputStream $r6;
        org.apache.flink.core.fs.FileInputSplit $r7;
        org.apache.flink.core.fs.Path $r8;
        java.net.URI $r9;
        long $l0;
        java.lang.String[] $r11;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp.deflate");

        virtualinvoke r2.<java.io.File: void deleteOnExit()>();

        $r4 = new java.io.DataOutputStream;

        $r5 = new java.util.zip.DeflaterOutputStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r5.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>($r6);

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        virtualinvoke $r4.<java.io.DataOutputStream: void writeBytes(java.lang.String)>(r1);

        virtualinvoke $r4.<java.io.DataOutputStream: void close()>();

        $r7 = new org.apache.flink.core.fs.FileInputSplit;

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r10);

        $l0 = virtualinvoke r2.<java.io.File: long length()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "localhost";

        specialinvoke $r7.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r8, 0L, $l0, $r11);

        return $r7;
    }

    private org.apache.flink.core.fs.FileInputSplit createTempGzipFile(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        java.lang.String r1, $r10;
        java.io.File r2;
        java.io.DataOutputStream $r4;
        java.util.zip.GZIPOutputStream $r5;
        java.io.FileOutputStream $r6;
        org.apache.flink.core.fs.FileInputSplit $r7;
        org.apache.flink.core.fs.Path $r8;
        java.net.URI $r9;
        long $l0;
        java.lang.String[] $r11;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp.gz");

        virtualinvoke r2.<java.io.File: void deleteOnExit()>();

        $r4 = new java.io.DataOutputStream;

        $r5 = new java.util.zip.GZIPOutputStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r5.<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>($r6);

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        virtualinvoke $r4.<java.io.DataOutputStream: void writeBytes(java.lang.String)>(r1);

        virtualinvoke $r4.<java.io.DataOutputStream: void close()>();

        $r7 = new org.apache.flink.core.fs.FileInputSplit;

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r10);

        $l0 = virtualinvoke r2.<java.io.File: long length()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "localhost";

        specialinvoke $r7.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r8, 0L, $l0, $r11);

        return $r7;
    }

    private org.apache.flink.core.fs.FileInputSplit createTempZStandardFile(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        java.lang.String r1, $r10;
        java.io.File r2;
        java.io.DataOutputStream $r4;
        org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream $r5;
        java.io.FileOutputStream $r6;
        org.apache.flink.core.fs.FileInputSplit $r7;
        org.apache.flink.core.fs.Path $r8;
        java.net.URI $r9;
        long $l0;
        java.lang.String[] $r11;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("test_contents", "tmp.zst");

        virtualinvoke r2.<java.io.File: void deleteOnExit()>();

        $r4 = new java.io.DataOutputStream;

        $r5 = new org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream;

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r5.<org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream: void <init>(java.io.OutputStream)>($r6);

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

        virtualinvoke $r4.<java.io.DataOutputStream: void writeBytes(java.lang.String)>(r1);

        virtualinvoke $r4.<java.io.DataOutputStream: void close()>();

        $r7 = new org.apache.flink.core.fs.FileInputSplit;

        $r8 = new org.apache.flink.core.fs.Path;

        $r9 = virtualinvoke r2.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r10);

        $l0 = virtualinvoke r2.<java.io.File: long length()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "localhost";

        specialinvoke $r7.<org.apache.flink.core.fs.FileInputSplit: void <init>(int,org.apache.flink.core.fs.Path,long,long,java.lang.String[])>(0, $r8, 0L, $l0, $r11);

        return $r7;
    }

    private org.apache.flink.types.Value[] createIntValues(int)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        int i0, i1;
        org.apache.flink.types.Value[] r1;
        org.apache.flink.types.IntValue $r2;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        i0 := @parameter0: int;

        r1 = newarray (org.apache.flink.types.Value)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = new org.apache.flink.types.IntValue;

        specialinvoke $r2.<org.apache.flink.types.IntValue: void <init>()>();

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    private org.apache.flink.types.Value[] createLongValues(int)
    {
        org.apache.flink.api.common.io.GenericCsvInputFormatTest r0;
        int i0, i1;
        org.apache.flink.types.Value[] r1;
        org.apache.flink.types.LongValue $r2;

        r0 := @this: org.apache.flink.api.common.io.GenericCsvInputFormatTest;

        i0 := @parameter0: int;

        r1 = newarray (org.apache.flink.types.Value)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = new org.apache.flink.types.LongValue;

        specialinvoke $r2.<org.apache.flink.types.LongValue: void <init>()>();

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }
}
