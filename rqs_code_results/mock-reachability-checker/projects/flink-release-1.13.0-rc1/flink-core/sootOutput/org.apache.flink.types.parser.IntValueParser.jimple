public class org.apache.flink.types.parser.IntValueParser extends org.apache.flink.types.parser.FieldParser
{
    private static final long OVERFLOW_BOUND;
    private static final long UNDERFLOW_BOUND;
    private org.apache.flink.types.IntValue result;

    public void <init>()
    {
        org.apache.flink.types.parser.IntValueParser r0;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        return;
    }

    public int parseField(byte[], int, int, byte[], org.apache.flink.types.IntValue)
    {
        org.apache.flink.types.parser.IntValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i5, $i9, $i13, $i14, $i15, i16, i18;
        org.apache.flink.types.IntValue r3;
        byte $b4, $b6, $b7, $b8, $b11, $b12;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r5, $r6, $r8, $r9, $r10;
        long $l10, l17, $l19, l20, $l21;
        boolean $z0, $z1, z2;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        r1 := @parameter0: byte[];

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: org.apache.flink.types.IntValue;

        if i16 != i0 goto label01;

        $r10 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r10);

        return -1;

     label01:
        l17 = 0L;

        z2 = 0;

        $i2 = lengthof r2;

        $i3 = i0 - $i2;

        i1 = $i3 + 1;

        r0.<org.apache.flink.types.parser.IntValueParser: org.apache.flink.types.IntValue result> = r3;

        $b4 = r1[i16];

        if $b4 != 45 goto label03;

        z2 = 1;

        i16 = i16 + 1;

        if i16 == i0 goto label02;

        if i16 >= i1 goto label03;

        $z1 = staticinvoke <org.apache.flink.types.parser.IntValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i16, r2);

        if $z1 == 0 goto label03;

     label02:
        $r9 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ORPHAN_SIGN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r9);

        return -1;

     label03:
        i18 = i16;

     label04:
        if i18 >= i0 goto label13;

        if i18 >= i1 goto label08;

        $z0 = staticinvoke <org.apache.flink.types.parser.IntValueParser: boolean delimiterNext(byte[],int,byte[])>(r1, i18, r2);

        if $z0 == 0 goto label08;

        if i18 != i16 goto label05;

        $r8 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState EMPTY_COLUMN>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r8);

        return -1;

     label05:
        if z2 == 0 goto label06;

        $l19 = neg l17;

        goto label07;

     label06:
        $l19 = l17;

     label07:
        $i13 = (int) $l19;

        virtualinvoke r3.<org.apache.flink.types.IntValue: void setValue(int)>($i13);

        $i14 = lengthof r2;

        $i15 = i18 + $i14;

        return $i15;

     label08:
        $b6 = r1[i18];

        if $b6 < 48 goto label09;

        $b7 = r1[i18];

        if $b7 <= 57 goto label10;

     label09:
        $r5 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r5);

        return -1;

     label10:
        l20 = l17 * 10L;

        $b8 = r1[i18];

        $i9 = $b8 - 48;

        $l10 = (long) $i9;

        l17 = l20 + $l10;

        $b11 = l17 cmp 2147483647L;

        if $b11 <= 0 goto label12;

        if z2 == 0 goto label11;

        $b12 = l17 cmp 2147483648L;

        if $b12 <= 0 goto label12;

     label11:
        $r6 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_OVERFLOW_UNDERFLOW>;

        virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r6);

        return -1;

     label12:
        i18 = i18 + 1;

        goto label04;

     label13:
        if z2 == 0 goto label14;

        $l21 = neg l17;

        goto label15;

     label14:
        $l21 = l17;

     label15:
        $i5 = (int) $l21;

        virtualinvoke r3.<org.apache.flink.types.IntValue: void setValue(int)>($i5);

        return i0;
    }

    public org.apache.flink.types.IntValue createValue()
    {
        org.apache.flink.types.parser.IntValueParser r0;
        org.apache.flink.types.IntValue $r1;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        $r1 = new org.apache.flink.types.IntValue;

        specialinvoke $r1.<org.apache.flink.types.IntValue: void <init>()>();

        return $r1;
    }

    public org.apache.flink.types.IntValue getLastResult()
    {
        org.apache.flink.types.parser.IntValueParser r0;
        org.apache.flink.types.IntValue $r1;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        $r1 = r0.<org.apache.flink.types.parser.IntValueParser: org.apache.flink.types.IntValue result>;

        return $r1;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.IntValueParser r0;
        org.apache.flink.types.IntValue $r1;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: org.apache.flink.types.IntValue createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.IntValueParser r0;
        org.apache.flink.types.IntValue $r1;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: org.apache.flink.types.IntValue getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.IntValueParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        org.apache.flink.types.IntValue $r4;

        r0 := @this: org.apache.flink.types.parser.IntValueParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (org.apache.flink.types.IntValue) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.IntValueParser: int parseField(byte[],int,int,byte[],org.apache.flink.types.IntValue)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.parser.IntValueParser: long UNDERFLOW_BOUND> = 2147483648L;

        <org.apache.flink.types.parser.IntValueParser: long OVERFLOW_BOUND> = 2147483647L;

        return;
    }
}
