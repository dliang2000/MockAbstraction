public final class org.apache.flink.api.common.eventtime.Watermark extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final java.lang.ThreadLocal TS_FORMATTER;
    public static final org.apache.flink.api.common.eventtime.Watermark MAX_WATERMARK;
    private final long timestamp;

    public void <init>(long)
    {
        org.apache.flink.api.common.eventtime.Watermark r0;
        long l0;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp> = l0;

        return;
    }

    public long getTimestamp()
    {
        org.apache.flink.api.common.eventtime.Watermark r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        $l0 = r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        return $l0;
    }

    public java.lang.String getFormattedTimestamp()
    {
        org.apache.flink.api.common.eventtime.Watermark r0;
        java.lang.ThreadLocal $r1;
        java.lang.Object $r2;
        java.util.Date $r3;
        long $l0;
        java.text.SimpleDateFormat $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        $r1 = <org.apache.flink.api.common.eventtime.Watermark: java.lang.ThreadLocal TS_FORMATTER>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.text.SimpleDateFormat) $r2;

        $r3 = new java.util.Date;

        $l0 = r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l0);

        $r5 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        return $r5;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.eventtime.Watermark r0, $r3;
        java.lang.Object r1;
        java.lang.Class $r2;
        long $l0, $l1;
        byte $b2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        r1 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Lorg/apache/flink/api/common/eventtime/Watermark;" goto label2;

        $r3 = (org.apache.flink.api.common.eventtime.Watermark) r1;

        $l1 = $r3.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        $l0 = r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.eventtime.Watermark r0;
        long $l0;
        int $i1;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        $l0 = r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        $i1 = staticinvoke <java.lang.Long: int hashCode(long)>($l0);

        return $i1;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.eventtime.Watermark r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6, $r7;
        long $l0;
        java.lang.String $r5, $r8;

        r0 := @this: org.apache.flink.api.common.eventtime.Watermark;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Watermark @ ");

        $l0 = r0.<org.apache.flink.api.common.eventtime.Watermark: long timestamp>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.eventtime.Watermark: java.lang.String getFormattedTimestamp()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.text.SimpleDateFormat lambda$static$0()
    {
        java.text.SimpleDateFormat $r0;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSS");

        return $r0;
    }

    static void <clinit>()
    {
        java.util.function.Supplier $r0;
        java.lang.ThreadLocal $r1;
        org.apache.flink.api.common.eventtime.Watermark $r2;

        <org.apache.flink.api.common.eventtime.Watermark: long serialVersionUID> = 1L;

        $r0 = staticinvoke <org.apache.flink.api.common.eventtime.Watermark$lambda_static_0__40: java.util.function.Supplier bootstrap$()>();

        $r1 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>($r0);

        <org.apache.flink.api.common.eventtime.Watermark: java.lang.ThreadLocal TS_FORMATTER> = $r1;

        $r2 = new org.apache.flink.api.common.eventtime.Watermark;

        specialinvoke $r2.<org.apache.flink.api.common.eventtime.Watermark: void <init>(long)>(9223372036854775807L);

        <org.apache.flink.api.common.eventtime.Watermark: org.apache.flink.api.common.eventtime.Watermark MAX_WATERMARK> = $r2;

        return;
    }
}
