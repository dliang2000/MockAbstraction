public final class org.apache.flink.api.common.typeutils.base.BigDecComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;
    private static final long SMALLEST_MAGNITUDE;
    private static final long LARGEST_MAGNITUDE;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        java.math.BigDecimal r3, r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r3 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal readBigDecimal(org.apache.flink.core.memory.DataInputView)>(r1);

        r4 = staticinvoke <org.apache.flink.api.common.typeutils.base.BigDecSerializer: java.math.BigDecimal readBigDecimal(org.apache.flink.core.memory.DataInputView)>(r2);

        i0 = virtualinvoke r3.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r4);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BigDecComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        return 1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        return 5;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        i0 := @parameter0: int;

        return 1;
    }

    public void putNormalizedKey(java.math.BigDecimal, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;
        java.math.BigDecimal r1;
        org.apache.flink.core.memory.MemorySegment r2;
        long l0, l1, l2, $l6, $l8, $l9, $l15, $l20, l21;
        byte b3, $b10, $b11, $b12;
        int $i4, $i5, $i7, $i13, $i14, $i16, $i17, i18, i19, i23;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i18 := @parameter2: int;

        i19 := @parameter3: int;

        $i4 = virtualinvoke r1.<java.math.BigDecimal: int signum()>();

        l0 = (long) $i4;

        $i5 = virtualinvoke r1.<java.math.BigDecimal: int scale()>();

        $l6 = (long) $i5;

        $i7 = virtualinvoke r1.<java.math.BigDecimal: int precision()>();

        $l8 = (long) $i7;

        $l9 = $l6 - $l8;

        l1 = $l9 + 1L;

        l2 = 4294967294L + l1;

        $b10 = l0 cmp 0L;

        if $b10 >= 0 goto label1;

        $l20 = l2;

        goto label2;

     label1:
        $l20 = 6442450941L - l2;

     label2:
        l21 = $l20;

        $b11 = l0 cmp 0L;

        if $b11 != 0 goto label3;

        l21 = 0L | 17179869184L;

        goto label4;

     label3:
        $b12 = l0 cmp 0L;

        if $b12 <= 0 goto label4;

        l21 = $l20 | 34359738368L;

     label4:
        i23 = 0;

     label5:
        if i23 >= 5 goto label6;

        if i19 <= 0 goto label6;

        $i13 = 4 - i23;

        $i14 = 8 * $i13;

        $l15 = l21 >>> $i14;

        $i16 = (int) $l15;

        b3 = (byte) $i16;

        $i17 = i18;

        i18 = i18 + 1;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i17, b3);

        i23 = i23 + 1;

        i19 = i19 + -1;

        goto label5;

     label6:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.BigDecComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigDecComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.BigDecComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigDecComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecComparator: org.apache.flink.api.common.typeutils.base.BigDecComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.math.BigDecimal $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.math.BigDecimal) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecComparator: void putNormalizedKey(java.math.BigDecimal,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.BigDecComparator: long LARGEST_MAGNITUDE> = -4294967294L;

        <org.apache.flink.api.common.typeutils.base.BigDecComparator: long SMALLEST_MAGNITUDE> = 2147483647L;

        <org.apache.flink.api.common.typeutils.base.BigDecComparator: long serialVersionUID> = 1L;

        return;
    }
}
