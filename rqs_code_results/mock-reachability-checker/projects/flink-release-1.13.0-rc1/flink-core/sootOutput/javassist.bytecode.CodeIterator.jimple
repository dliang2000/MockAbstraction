public class javassist.bytecode.CodeIterator extends java.lang.Object implements javassist.bytecode.Opcode
{
    protected javassist.bytecode.CodeAttribute codeAttr;
    protected byte[] bytecode;
    protected int endPos;
    protected int currentPos;
    protected int mark;
    private static final int[] opcodeLength;

    protected void <init>(javassist.bytecode.CodeAttribute)
    {
        javassist.bytecode.CodeIterator r0;
        javassist.bytecode.CodeAttribute r1;
        byte[] $r2;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: javassist.bytecode.CodeAttribute;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr> = r1;

        $r2 = virtualinvoke r1.<javassist.bytecode.CodeAttribute: byte[] getCode()>();

        r0.<javassist.bytecode.CodeIterator: byte[] bytecode> = $r2;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void begin()>();

        return;
    }

    public void begin()
    {
        javassist.bytecode.CodeIterator r0;
        int $i1;

        r0 := @this: javassist.bytecode.CodeIterator;

        r0.<javassist.bytecode.CodeIterator: int mark> = 0;

        r0.<javassist.bytecode.CodeIterator: int currentPos> = 0;

        $i1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        r0.<javassist.bytecode.CodeIterator: int endPos> = $i1;

        return;
    }

    public void move(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.CodeIterator: int currentPos> = i0;

        return;
    }

    public void setMark(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.CodeIterator: int mark> = i0;

        return;
    }

    public int getMark()
    {
        javassist.bytecode.CodeIterator r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i0 = r0.<javassist.bytecode.CodeIterator: int mark>;

        return $i0;
    }

    public javassist.bytecode.CodeAttribute get()
    {
        javassist.bytecode.CodeIterator r0;
        javassist.bytecode.CodeAttribute $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        $r1 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        return $r1;
    }

    public int getCodeLength()
    {
        javassist.bytecode.CodeIterator r0;
        byte[] $r1;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int byteAt(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0;
        byte[] $r1;
        byte $b1;
        short $s2;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $b1 = $r1[i0];

        $s2 = $b1 & 255;

        return $s2;
    }

    public int signedByteAt(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $b1 = $r1[i0];

        return $b1;
    }

    public void writeByte(int, int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1;
        byte $b2;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $b2 = (byte) i0;

        $r1[i1] = $b2;

        return;
    }

    public int u16bitAt(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, i0);

        return $i1;
    }

    public int s16bitAt(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = staticinvoke <javassist.bytecode.ByteArray: int readS16bit(byte[],int)>($r1, i0);

        return $i1;
    }

    public void write16bit(int, int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i0, $r1, i1);

        return;
    }

    public int s32bitAt(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>($r1, i0);

        return $i1;
    }

    public void write32bit(int, int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i0, $r1, i1);

        return;
    }

    public void write(byte[], int)
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1, $r2;
        int i0, $i1, i3, i4;
        byte $b2;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r2 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = i3;

        i3 = i3 + 1;

        $b2 = r1[i4];

        $r2[$i1] = $b2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean hasNext()
    {
        javassist.bytecode.CodeIterator r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i1 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $i0 = r0.<javassist.bytecode.CodeIterator: int endPos>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int next() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = staticinvoke <javassist.bytecode.CodeIterator: int nextOpcode(byte[],int)>($r1, i0);

        r0.<javassist.bytecode.CodeIterator: int currentPos> = $i1;

        return i0;
    }

    public int lookAhead()
    {
        javassist.bytecode.CodeIterator r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i0 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        return $i0;
    }

    public int skipConstructor() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i0 = specialinvoke r0.<javassist.bytecode.CodeIterator: int skipSuperConstructor0(int)>(-1);

        return $i0;
    }

    public int skipSuperConstructor() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i0 = specialinvoke r0.<javassist.bytecode.CodeIterator: int skipSuperConstructor0(int)>(0);

        return $i0;
    }

    public int skipThisConstructor() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeIterator;

        $i0 = specialinvoke r0.<javassist.bytecode.CodeIterator: int skipSuperConstructor0(int)>(1);

        return $i0;
    }

    private int skipSuperConstructor0(int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, i2, i3, $i4, i5;
        javassist.bytecode.ConstPool r1;
        java.lang.String r2, r3, $r7;
        javassist.bytecode.CodeAttribute $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r6;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void begin()>();

        $r4 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        r1 = virtualinvoke $r4.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        $r5 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        r2 = virtualinvoke $r5.<javassist.bytecode.CodeAttribute: java.lang.String getDeclaringClass()>();

        i5 = 0;

     label1:
        $z0 = virtualinvoke r0.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        i1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int next()>();

        i2 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int byteAt(int)>(i1);

        if i2 != 187 goto label2;

        i5 = i5 + 1;

        goto label6;

     label2:
        if i2 != 183 goto label6;

        $r6 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i4 = i1 + 1;

        i3 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r6, $i4);

        $r7 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getMethodrefName(int)>(i3);

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z1 == 0 goto label6;

        i5 = i5 + -1;

        if i5 >= 0 goto label6;

        if i0 >= 0 goto label3;

        return i1;

     label3:
        r3 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getMethodrefClassName(int)>(i3);

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if i0 <= 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        if $z2 != $z3 goto label7;

        return i1;

     label6:
        goto label1;

     label7:
        virtualinvoke r0.<javassist.bytecode.CodeIterator: void begin()>();

        return -1;
    }

    public int insert(byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: byte[];

        $i0 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $i1 = specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>($i0, r1, 0);

        return $i1;
    }

    public void insert(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>(i0, r1, 0);

        return;
    }

    public int insertAt(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i1 = specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>(i0, r1, 0);

        return $i1;
    }

    public int insertEx(byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: byte[];

        $i0 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $i1 = specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>($i0, r1, 1);

        return $i1;
    }

    public void insertEx(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>(i0, r1, 1);

        return;
    }

    public int insertExAt(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1;
        byte[] r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i1 = specialinvoke r0.<javassist.bytecode.CodeIterator: int insert0(int,byte[],boolean)>(i0, r1, 1);

        return $i1;
    }

    private int insert0(int, byte[], boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1, $r3;
        boolean z0;
        int i0, $i1, i3, i4, i5, i6;
        javassist.bytecode.CodeIterator$Gap $r2;
        byte $b2;

        r0 := @this: javassist.bytecode.CodeIterator;

        i3 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        i0 = lengthof r1;

        if i0 > 0 goto label1;

        return i3;

     label1:
        $r2 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i3, i0, z0);

        i4 = $r2.<javassist.bytecode.CodeIterator$Gap: int position>;

        i5 = i4;

        i6 = 0;

     label2:
        if i6 >= i0 goto label3;

        $r3 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i1 = i5;

        i5 = i5 + 1;

        $b2 = r1[i6];

        $r3[$i1] = $b2;

        i6 = i6 + 1;

        goto label2;

     label3:
        return i4;
    }

    public int insertGap(int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator$Gap $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $i1 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $r1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>($i1, i0, 0);

        $i2 = $r1.<javassist.bytecode.CodeIterator$Gap: int position>;

        return $i2;
    }

    public int insertGap(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, $i2;
        javassist.bytecode.CodeIterator$Gap $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i0, i1, 0);

        $i2 = $r1.<javassist.bytecode.CodeIterator$Gap: int length>;

        return $i2;
    }

    public int insertExGap(int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, $i1, $i2;
        javassist.bytecode.CodeIterator$Gap $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        $i1 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $r1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>($i1, i0, 1);

        $i2 = $r1.<javassist.bytecode.CodeIterator$Gap: int position>;

        return $i2;
    }

    public int insertExGap(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, $i2;
        javassist.bytecode.CodeIterator$Gap $r1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeIterator$Gap insertGapAt(int,int,boolean)>(i0, i1, 1);

        $i2 = $r1.<javassist.bytecode.CodeIterator$Gap: int length>;

        return $i2;
    }

    public javassist.bytecode.CodeIterator$Gap insertGapAt(int, int, boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i13;
        boolean z0;
        javassist.bytecode.CodeIterator$Gap $r2;
        byte[] $r3, $r4, $r8, $r10, r14;
        javassist.bytecode.CodeAttribute $r5, $r7, $r11, $r13, $r15;
        javassist.bytecode.ExceptionTable $r6, $r12;

        r0 := @this: javassist.bytecode.CodeIterator;

        i11 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = new javassist.bytecode.CodeIterator$Gap;

        specialinvoke $r2.<javassist.bytecode.CodeIterator$Gap: void <init>()>();

        if i0 > 0 goto label1;

        $r2.<javassist.bytecode.CodeIterator$Gap: int position> = i11;

        $r2.<javassist.bytecode.CodeIterator$Gap: int length> = 0;

        return $r2;

     label1:
        $r3 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i2 = lengthof $r3;

        $i3 = $i2 + i0;

        if $i3 <= 32767 goto label2;

        $r10 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $r11 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        $r12 = virtualinvoke $r11.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $r13 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        r14 = specialinvoke r0.<javassist.bytecode.CodeIterator: byte[] insertGapCore0w(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute,javassist.bytecode.CodeIterator$Gap)>($r10, i11, i0, z0, $r12, $r13, $r2);

        i11 = $r2.<javassist.bytecode.CodeIterator$Gap: int position>;

        i12 = i0;

        goto label5;

     label2:
        i1 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $r4 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $r5 = virtualinvoke r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

        $r6 = virtualinvoke $r5.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $r7 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        r14 = staticinvoke <javassist.bytecode.CodeIterator: byte[] insertGapCore0(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>($r4, i11, i0, z0, $r6, $r7);

        $i5 = lengthof r14;

        $r8 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        $i4 = lengthof $r8;

        i12 = $i5 - $i4;

        $r2.<javassist.bytecode.CodeIterator$Gap: int position> = i11;

        $r2.<javassist.bytecode.CodeIterator$Gap: int length> = i12;

        if i1 < i11 goto label3;

        $i10 = i1 + i12;

        r0.<javassist.bytecode.CodeIterator: int currentPos> = $i10;

     label3:
        $i6 = r0.<javassist.bytecode.CodeIterator: int mark>;

        if $i6 > i11 goto label4;

        $i9 = r0.<javassist.bytecode.CodeIterator: int mark>;

        if $i9 != i11 goto label5;

        if z0 == 0 goto label5;

     label4:
        $i7 = r0.<javassist.bytecode.CodeIterator: int mark>;

        $i8 = $i7 + i12;

        r0.<javassist.bytecode.CodeIterator: int mark> = $i8;

     label5:
        $r15 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        virtualinvoke $r15.<javassist.bytecode.CodeAttribute: void setCode(byte[])>(r14);

        r0.<javassist.bytecode.CodeIterator: byte[] bytecode> = r14;

        $i13 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        r0.<javassist.bytecode.CodeIterator: int endPos> = $i13;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void updateCursors(int,int)>(i11, i12);

        return $r2;
    }

    protected void updateCursors(int, int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void insert(javassist.bytecode.ExceptionTable, int)
    {
        javassist.bytecode.CodeIterator r0;
        javassist.bytecode.ExceptionTable r1, $r3;
        int i0;
        javassist.bytecode.CodeAttribute $r2;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: javassist.bytecode.ExceptionTable;

        i0 := @parameter1: int;

        $r2 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        $r3 = virtualinvoke $r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        virtualinvoke $r3.<javassist.bytecode.ExceptionTable: void add(int,javassist.bytecode.ExceptionTable,int)>(0, r1, i0);

        return;
    }

    public int append(byte[])
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1, r2;
        int i0, i1, $i3, i4;
        byte $b2;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: byte[];

        i0 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        i1 = lengthof r1;

        if i1 > 0 goto label1;

        return i0;

     label1:
        virtualinvoke r0.<javassist.bytecode.CodeIterator: void appendGap(int)>(i1);

        r2 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $i3 = i4 + i0;

        $b2 = r1[i4];

        r2[$i3] = $b2;

        i4 = i4 + 1;

        goto label2;

     label3:
        return i0;
    }

    public void appendGap(int)
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, $i2, $i3, $i4, i6, i7;
        byte[] r1, r2;
        javassist.bytecode.CodeAttribute $r3;
        byte $b5;

        r0 := @this: javassist.bytecode.CodeIterator;

        i0 := @parameter0: int;

        r1 = r0.<javassist.bytecode.CodeIterator: byte[] bytecode>;

        i1 = lengthof r1;

        $i2 = i1 + i0;

        r2 = newarray (byte)[$i2];

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        $b5 = r1[i6];

        r2[i6] = $b5;

        i6 = i6 + 1;

        goto label1;

     label2:
        i7 = i1;

     label3:
        $i3 = i1 + i0;

        if i7 >= $i3 goto label4;

        r2[i7] = 0;

        i7 = i7 + 1;

        goto label3;

     label4:
        $r3 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        virtualinvoke $r3.<javassist.bytecode.CodeAttribute: void setCode(byte[])>(r2);

        r0.<javassist.bytecode.CodeIterator: byte[] bytecode> = r2;

        $i4 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int getCodeLength()>();

        r0.<javassist.bytecode.CodeIterator: int endPos> = $i4;

        return;
    }

    public void append(javassist.bytecode.ExceptionTable, int)
    {
        javassist.bytecode.CodeIterator r0;
        javassist.bytecode.ExceptionTable r1, r2;
        int i0, $i1;
        javassist.bytecode.CodeAttribute $r3;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: javassist.bytecode.ExceptionTable;

        i0 := @parameter1: int;

        $r3 = r0.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute codeAttr>;

        r2 = virtualinvoke $r3.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $i1 = virtualinvoke r2.<javassist.bytecode.ExceptionTable: int size()>();

        virtualinvoke r2.<javassist.bytecode.ExceptionTable: void add(int,javassist.bytecode.ExceptionTable,int)>($i1, r1, i0);

        return;
    }

    static int nextOpcode(byte[], int) throws javassist.bytecode.BadBytecode
    {
        byte[] r0;
        int i0, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, i20, i21, i22;
        short s1;
        byte $b4, $b16;
        int[] $r1;
        javassist.bytecode.BadBytecode $r2, $r4;
        java.lang.IndexOutOfBoundsException $r3, $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

     label01:
        $b4 = r0[i0];

        s1 = $b4 & 255;

     label02:
        goto label04;

     label03:
        $r3 := @caughtexception;

        $r4 = new javassist.bytecode.BadBytecode;

        specialinvoke $r4.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>("invalid opcode address");

        throw $r4;

     label04:
        $r1 = <javassist.bytecode.CodeIterator: int[] opcodeLength>;

        i20 = $r1[s1];

        if i20 <= 0 goto label06;

        $i19 = i0 + i20;

     label05:
        return $i19;

     label06:
        if s1 != 196 goto label10;

        $i15 = i0 + 1;

        $b16 = r0[$i15];

        if $b16 != -124 goto label08;

        $i18 = i0 + 6;

     label07:
        return $i18;

     label08:
        $i17 = i0 + 4;

     label09:
        return $i17;

     label10:
        $i5 = i0 & -4;

        i2 = $i5 + 8;

        if s1 != 171 goto label12;

        i21 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i2);

        $i12 = i21 * 8;

        $i13 = i2 + $i12;

        $i14 = $i13 + 4;

     label11:
        return $i14;

     label12:
        if s1 != 170 goto label14;

        i22 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i2);

        $i6 = i2 + 4;

        i3 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i6);

        $i7 = i3 - i22;

        $i8 = $i7 + 1;

        $i9 = $i8 * 4;

        $i10 = i2 + $i9;

        $i11 = $i10 + 8;

     label13:
        return $i11;

     label14:
        goto label16;

     label15:
        $r5 := @caughtexception;

     label16:
        $r2 = new javassist.bytecode.BadBytecode;

        specialinvoke $r2.<javassist.bytecode.BadBytecode: void <init>(int)>(s1);

        throw $r2;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label03;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label15;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label15;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label15;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label15;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label15;
    }

    static byte[] insertGapCore0(byte[], int, int, boolean, javassist.bytecode.ExceptionTable, javassist.bytecode.CodeAttribute) throws javassist.bytecode.BadBytecode
    {
        byte[] r0, $r5, $r7;
        int i0, i1, $i2, $i3;
        boolean z0;
        javassist.bytecode.ExceptionTable r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.CodeIterator$AlignmentException $r6, $r8;
        java.lang.RuntimeException $r9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: javassist.bytecode.ExceptionTable;

        r2 := @parameter5: javassist.bytecode.CodeAttribute;

        if i1 > 0 goto label1;

        return r0;

     label1:
        $r5 = staticinvoke <javassist.bytecode.CodeIterator: byte[] insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>(r0, i0, i1, z0, r1, r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        $i2 = i1 + 3;

        $i3 = $i2 & -4;

        $r7 = staticinvoke <javassist.bytecode.CodeIterator: byte[] insertGapCore1(byte[],int,int,boolean,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>(r0, i0, $i3, z0, r1, r2);

     label5:
        return $r7;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal error?");

        throw $r9;

        catch javassist.bytecode.CodeIterator$AlignmentException from label1 to label2 with label3;
        catch javassist.bytecode.CodeIterator$AlignmentException from label4 to label5 with label6;
    }

    private static byte[] insertGapCore1(byte[], int, int, boolean, javassist.bytecode.ExceptionTable, javassist.bytecode.CodeAttribute) throws javassist.bytecode.BadBytecode, javassist.bytecode.CodeIterator$AlignmentException
    {
        byte[] r0, r3;
        int i0, i1, i2, $i3;
        boolean z0;
        javassist.bytecode.ExceptionTable r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.LineNumberAttribute r4;
        javassist.bytecode.LocalVariableAttribute r5, r6;
        javassist.bytecode.StackMapTable r7;
        javassist.bytecode.StackMap r8;
        javassist.bytecode.AttributeInfo $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: javassist.bytecode.ExceptionTable;

        r2 := @parameter5: javassist.bytecode.CodeAttribute;

        i2 = lengthof r0;

        $i3 = i2 + i1;

        r3 = newarray (byte)[$i3];

        staticinvoke <javassist.bytecode.CodeIterator: void insertGap2(byte[],int,int,int,byte[],boolean)>(r0, i0, i1, i2, r3, z0);

        virtualinvoke r1.<javassist.bytecode.ExceptionTable: void shiftPc(int,int,boolean)>(i0, i1, z0);

        $r9 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LineNumberTable");

        r4 = (javassist.bytecode.LineNumberAttribute) $r9;

        if r4 == null goto label1;

        virtualinvoke r4.<javassist.bytecode.LineNumberAttribute: void shiftPc(int,int,boolean)>(i0, i1, z0);

     label1:
        $r10 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTable");

        r5 = (javassist.bytecode.LocalVariableAttribute) $r10;

        if r5 == null goto label2;

        virtualinvoke r5.<javassist.bytecode.LocalVariableAttribute: void shiftPc(int,int,boolean)>(i0, i1, z0);

     label2:
        $r11 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("LocalVariableTypeTable");

        r6 = (javassist.bytecode.LocalVariableAttribute) $r11;

        if r6 == null goto label3;

        virtualinvoke r6.<javassist.bytecode.LocalVariableAttribute: void shiftPc(int,int,boolean)>(i0, i1, z0);

     label3:
        $r12 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMapTable");

        r7 = (javassist.bytecode.StackMapTable) $r12;

        if r7 == null goto label4;

        virtualinvoke r7.<javassist.bytecode.StackMapTable: void shiftPc(int,int,boolean)>(i0, i1, z0);

     label4:
        $r13 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("StackMap");

        r8 = (javassist.bytecode.StackMap) $r13;

        if r8 == null goto label5;

        virtualinvoke r8.<javassist.bytecode.StackMap: void shiftPc(int,int,boolean)>(i0, i1, z0);

     label5:
        return r3;
    }

    private static void insertGap2(byte[], int, int, int, byte[], boolean) throws javassist.bytecode.BadBytecode, javassist.bytecode.CodeIterator$AlignmentException
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, $i6, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, $i36, $i38, $i39, i42, i43, $i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62;
        boolean z0;
        byte $b5, $b7, $b10, $b37, $b40, $b44;
        javassist.bytecode.CodeIterator$AlignmentException $r2, $r3;
        short s35, $s41;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: byte[];

        z0 := @parameter5: boolean;

        i32 = 0;

        i33 = 0;

     label01:
        if i32 >= i2 goto label18;

        if i32 != i0 goto label03;

        i34 = i33 + i1;

     label02:
        if i33 >= i34 goto label03;

        $i31 = i33;

        i33 = i33 + 1;

        r1[$i31] = 0;

        goto label02;

     label03:
        i3 = staticinvoke <javassist.bytecode.CodeIterator: int nextOpcode(byte[],int)>(r0, i32);

        $b5 = r0[i32];

        s35 = $b5 & 255;

        if 153 > s35 goto label04;

        if s35 <= 168 goto label05;

     label04:
        if s35 == 198 goto label05;

        if s35 != 199 goto label06;

     label05:
        $i36 = i32 + 1;

        $b37 = r0[$i36];

        $i38 = $b37 << 8;

        $i39 = i32 + 2;

        $b40 = r0[$i39];

        $s41 = $b40 & 255;

        i42 = $i38 | $s41;

        i43 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, i42, i0, i1, z0);

        $b44 = r0[i32];

        r1[i33] = $b44;

        $i45 = i33 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>(i43, r1, $i45);

        i33 = i33 + 3;

        goto label17;

     label06:
        if s35 == 200 goto label07;

        if s35 != 201 goto label08;

     label07:
        $i6 = i32 + 1;

        i46 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i6);

        i47 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, i46, i0, i1, z0);

        i48 = i33 + 1;

        $b7 = r0[i32];

        r1[i33] = $b7;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i47, r1, i48);

        i33 = i48 + 4;

        goto label17;

     label08:
        if s35 != 170 goto label12;

        if i32 == i33 goto label09;

        $i30 = i1 & 3;

        if $i30 == 0 goto label09;

        $r3 = new javassist.bytecode.CodeIterator$AlignmentException;

        specialinvoke $r3.<javassist.bytecode.CodeIterator$AlignmentException: void <init>()>();

        throw $r3;

     label09:
        $i20 = i32 & -4;

        i49 = $i20 + 4;

        i50 = staticinvoke <javassist.bytecode.CodeIterator: int copyGapBytes(byte[],int,byte[],int,int)>(r1, i33, r0, i32, i49);

        $i21 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i49);

        i51 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, $i21, i0, i1, z0);

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i51, r1, i50);

        $i22 = i49 + 4;

        i52 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i22);

        $i23 = i50 + 4;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i52, r1, $i23);

        $i24 = i49 + 8;

        i53 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i24);

        $i25 = i50 + 8;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i53, r1, $i25);

        i33 = i50 + 12;

        i54 = i49 + 12;

        $i26 = i53 - i52;

        $i27 = $i26 + 1;

        $i28 = $i27 * 4;

        i55 = i54 + $i28;

     label10:
        if i54 >= i55 goto label11;

        $i29 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i54);

        i4 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, $i29, i0, i1, z0);

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i4, r1, i33);

        i33 = i33 + 4;

        i54 = i54 + 4;

        goto label10;

     label11:
        goto label17;

     label12:
        if s35 != 171 goto label16;

        if i32 == i33 goto label13;

        $i19 = i1 & 3;

        if $i19 == 0 goto label13;

        $r2 = new javassist.bytecode.CodeIterator$AlignmentException;

        specialinvoke $r2.<javassist.bytecode.CodeIterator$AlignmentException: void <init>()>();

        throw $r2;

     label13:
        $i11 = i32 & -4;

        i56 = $i11 + 4;

        i57 = staticinvoke <javassist.bytecode.CodeIterator: int copyGapBytes(byte[],int,byte[],int,int)>(r1, i33, r0, i32, i56);

        $i12 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i56);

        i58 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, $i12, i0, i1, z0);

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i58, r1, i57);

        $i13 = i56 + 4;

        i59 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i13);

        $i14 = i57 + 4;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i59, r1, $i14);

        i33 = i57 + 8;

        i60 = i56 + 8;

        $i15 = i59 * 8;

        i61 = i60 + $i15;

     label14:
        if i60 >= i61 goto label15;

        staticinvoke <javassist.bytecode.ByteArray: void copy32bit(byte[],int,byte[],int)>(r0, i60, r1, i33);

        $i16 = i60 + 4;

        $i17 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i16);

        i62 = staticinvoke <javassist.bytecode.CodeIterator: int newOffset(int,int,int,int,boolean)>(i32, $i17, i0, i1, z0);

        $i18 = i33 + 4;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i62, r1, $i18);

        i33 = i33 + 8;

        i60 = i60 + 8;

        goto label14;

     label15:
        goto label17;

     label16:
        if i32 >= i3 goto label17;

        $i8 = i33;

        i33 = i33 + 1;

        $i9 = i32;

        i32 = i32 + 1;

        $b10 = r0[$i9];

        r1[$i8] = $b10;

        goto label16;

     label17:
        i32 = i3;

        goto label01;

     label18:
        return;
    }

    private static int copyGapBytes(byte[], int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3, $i5, $i6, i8, i9, $i10, $i11, $i13;
        byte $b4, $b7, $b12, $b15;

        r0 := @parameter0: byte[];

        i8 := @parameter1: int;

        r1 := @parameter2: byte[];

        i9 := @parameter3: int;

        i0 := @parameter4: int;

        $i1 = i0 - i9;

        tableswitch($i1)
        {
            case 1: goto label4;
            case 2: goto label3;
            case 3: goto label2;
            case 4: goto label1;
            default: goto label5;
        };

     label1:
        $i2 = i8;

        i8 = i8 + 1;

        $i3 = i9;

        i9 = i9 + 1;

        $b4 = r1[$i3];

        r0[$i2] = $b4;

     label2:
        $i5 = i8;

        i8 = i8 + 1;

        $i6 = i9;

        i9 = i9 + 1;

        $b7 = r1[$i6];

        r0[$i5] = $b7;

     label3:
        $i10 = i8;

        i8 = i8 + 1;

        $i11 = i9;

        i9 = i9 + 1;

        $b12 = r1[$i11];

        r0[$i10] = $b12;

     label4:
        $i13 = i8;

        i8 = i8 + 1;

        $b15 = r1[i9];

        r0[$i13] = $b15;

     label5:
        return i8;
    }

    private static int newOffset(int, int, int, int, boolean)
    {
        int i0, i1, i2, i3, i4;
        boolean z0;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        i3 = i0 + i4;

        if i0 >= i1 goto label2;

        if i1 < i3 goto label1;

        if z0 == 0 goto label5;

        if i1 != i3 goto label5;

     label1:
        i4 = i4 + i2;

        goto label5;

     label2:
        if i0 != i1 goto label3;

        if i3 >= i1 goto label5;

        i4 = i4 - i2;

        goto label5;

     label3:
        if i3 < i1 goto label4;

        if z0 != 0 goto label5;

        if i1 != i3 goto label5;

     label4:
        i4 = i4 - i2;

     label5:
        return i4;
    }

    static byte[] changeLdcToLdcW(byte[], javassist.bytecode.ExceptionTable, javassist.bytecode.CodeAttribute, javassist.bytecode.CodeAttribute$LdcEntry) throws javassist.bytecode.BadBytecode
    {
        byte[] r0, r5;
        javassist.bytecode.ExceptionTable r1;
        javassist.bytecode.CodeAttribute r2;
        java.util.List r4;
        javassist.bytecode.CodeIterator$Pointers $r6;
        int $i0;
        javassist.bytecode.CodeAttribute$LdcEntry r7;

        r0 := @parameter0: byte[];

        r1 := @parameter1: javassist.bytecode.ExceptionTable;

        r2 := @parameter2: javassist.bytecode.CodeAttribute;

        r7 := @parameter3: javassist.bytecode.CodeAttribute$LdcEntry;

        $r6 = new javassist.bytecode.CodeIterator$Pointers;

        specialinvoke $r6.<javassist.bytecode.CodeIterator$Pointers: void <init>(int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>(0, 0, 0, r1, r2);

        $i0 = lengthof r0;

        r4 = staticinvoke <javassist.bytecode.CodeIterator: java.util.List makeJumpList(byte[],int,javassist.bytecode.CodeIterator$Pointers)>(r0, $i0, $r6);

     label1:
        if r7 == null goto label2;

        staticinvoke <javassist.bytecode.CodeIterator: void addLdcW(javassist.bytecode.CodeAttribute$LdcEntry,java.util.List)>(r7, r4);

        r7 = r7.<javassist.bytecode.CodeAttribute$LdcEntry: javassist.bytecode.CodeAttribute$LdcEntry next>;

        goto label1;

     label2:
        r5 = staticinvoke <javassist.bytecode.CodeIterator: byte[] insertGap2w(byte[],int,int,boolean,java.util.List,javassist.bytecode.CodeIterator$Pointers)>(r0, 0, 0, 0, r4, $r6);

        return r5;
    }

    private static void addLdcW(javassist.bytecode.CodeAttribute$LdcEntry, java.util.List)
    {
        javassist.bytecode.CodeAttribute$LdcEntry r0;
        java.util.List r1;
        int i0, i1, $i2, $i3, i4;
        javassist.bytecode.CodeIterator$LdcW $r3;
        java.lang.Object $r4;
        javassist.bytecode.CodeIterator$Branch $r5;

        r0 := @parameter0: javassist.bytecode.CodeAttribute$LdcEntry;

        r1 := @parameter1: java.util.List;

        i0 = r0.<javassist.bytecode.CodeAttribute$LdcEntry: int where>;

        $r3 = new javassist.bytecode.CodeIterator$LdcW;

        $i2 = r0.<javassist.bytecode.CodeAttribute$LdcEntry: int index>;

        specialinvoke $r3.<javassist.bytecode.CodeIterator$LdcW: void <init>(int,int)>(i0, $i2);

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (javassist.bytecode.CodeIterator$Branch) $r4;

        $i3 = $r5.<javassist.bytecode.CodeIterator$Branch: int orgPos>;

        if i0 >= $i3 goto label2;

        interfaceinvoke r1.<java.util.List: void add(int,java.lang.Object)>(i4, $r3);

        return;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    private byte[] insertGapCore0w(byte[], int, int, boolean, javassist.bytecode.ExceptionTable, javassist.bytecode.CodeAttribute, javassist.bytecode.CodeIterator$Gap) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        byte[] r1, r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean z0;
        javassist.bytecode.ExceptionTable r2;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.CodeIterator$Gap r4;
        java.util.List r6;
        javassist.bytecode.CodeIterator$Pointers $r8;

        r0 := @this: javassist.bytecode.CodeIterator;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: javassist.bytecode.ExceptionTable;

        r3 := @parameter5: javassist.bytecode.CodeAttribute;

        r4 := @parameter6: javassist.bytecode.CodeIterator$Gap;

        if i1 > 0 goto label1;

        return r1;

     label1:
        $r8 = new javassist.bytecode.CodeIterator$Pointers;

        $i3 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $i2 = r0.<javassist.bytecode.CodeIterator: int mark>;

        specialinvoke $r8.<javassist.bytecode.CodeIterator$Pointers: void <init>(int,int,int,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>($i3, $i2, i0, r2, r3);

        $i4 = lengthof r1;

        r6 = staticinvoke <javassist.bytecode.CodeIterator: java.util.List makeJumpList(byte[],int,javassist.bytecode.CodeIterator$Pointers)>(r1, $i4, $r8);

        r7 = staticinvoke <javassist.bytecode.CodeIterator: byte[] insertGap2w(byte[],int,int,boolean,java.util.List,javassist.bytecode.CodeIterator$Pointers)>(r1, i0, i1, z0, r6, $r8);

        $i5 = $r8.<javassist.bytecode.CodeIterator$Pointers: int cursor>;

        r0.<javassist.bytecode.CodeIterator: int currentPos> = $i5;

        $i6 = $r8.<javassist.bytecode.CodeIterator$Pointers: int mark>;

        r0.<javassist.bytecode.CodeIterator: int mark> = $i6;

        i10 = $r8.<javassist.bytecode.CodeIterator$Pointers: int mark0>;

        $i7 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        if i10 != $i7 goto label2;

        if z0 != 0 goto label2;

        $i8 = r0.<javassist.bytecode.CodeIterator: int currentPos>;

        $i9 = $i8 + i1;

        r0.<javassist.bytecode.CodeIterator: int currentPos> = $i9;

     label2:
        if z0 == 0 goto label3;

        i10 = i10 - i1;

     label3:
        r4.<javassist.bytecode.CodeIterator$Gap: int position> = i10;

        r4.<javassist.bytecode.CodeIterator$Gap: int length> = i1;

        return r7;
    }

    private static byte[] insertGap2w(byte[], int, int, boolean, java.util.List, javassist.bytecode.CodeIterator$Pointers) throws javassist.bytecode.BadBytecode
    {
        byte[] r0, $r3;
        int i0, i1, i2, i3, i4, i5;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.util.List r1;
        javassist.bytecode.CodeIterator$Pointers r2;
        java.lang.Object $r4, $r5, $r6, $r7, $r8;
        java.util.Iterator r9, r11, r13, r15, r17;
        javassist.bytecode.CodeIterator$Branch r10, r12, r14, r16, r18;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.util.List;

        r2 := @parameter5: javassist.bytecode.CodeIterator$Pointers;

        if i1 <= 0 goto label02;

        virtualinvoke r2.<javassist.bytecode.CodeIterator$Pointers: void shiftPc(int,int,boolean)>(i0, i1, z0);

        r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z6 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label02;

        $r8 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (javassist.bytecode.CodeIterator$Branch) $r8;

        virtualinvoke r10.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i0, i1, z0);

        goto label01;

     label02:
        z7 = 1;

     label03:
        if z7 == 0 goto label08;

        z7 = 0;

        r11 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (javassist.bytecode.CodeIterator$Branch) $r6;

        $z4 = virtualinvoke r12.<javassist.bytecode.CodeIterator$Branch: boolean expanded()>();

        if $z4 == 0 goto label06;

        z7 = 1;

        i2 = r12.<javassist.bytecode.CodeIterator$Branch: int pos>;

        i3 = virtualinvoke r12.<javassist.bytecode.CodeIterator$Branch: int deltaSize()>();

        virtualinvoke r2.<javassist.bytecode.CodeIterator$Pointers: void shiftPc(int,int,boolean)>(i2, i3, 0);

        r13 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r7 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (javassist.bytecode.CodeIterator$Branch) $r7;

        virtualinvoke r14.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i2, i3, 0);

        goto label05;

     label06:
        goto label04;

     label07:
        goto label03;

     label08:
        r15 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r4 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (javassist.bytecode.CodeIterator$Branch) $r4;

        i4 = virtualinvoke r16.<javassist.bytecode.CodeIterator$Branch: int gapChanged()>();

        if i4 <= 0 goto label11;

        z7 = 1;

        i5 = r16.<javassist.bytecode.CodeIterator$Branch: int pos>;

        virtualinvoke r2.<javassist.bytecode.CodeIterator$Pointers: void shiftPc(int,int,boolean)>(i5, i4, 0);

        r17 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r5 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (javassist.bytecode.CodeIterator$Branch) $r5;

        virtualinvoke r18.<javassist.bytecode.CodeIterator$Branch: void shift(int,int,boolean)>(i5, i4, 0);

        goto label10;

     label11:
        goto label09;

     label12:
        if z7 != 0 goto label03;

        $r3 = staticinvoke <javassist.bytecode.CodeIterator: byte[] makeExapndedCode(byte[],java.util.List,int,int)>(r0, r1, i0, i1);

        return $r3;
    }

    private static java.util.List makeJumpList(byte[], int, javassist.bytecode.CodeIterator$Pointers) throws javassist.bytecode.BadBytecode
    {
        byte[] r0;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i18, $i19, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35;
        javassist.bytecode.CodeIterator$Pointers r1;
        short s2, $s21;
        java.util.ArrayList $r3;
        byte $b3, $b17, $b20;
        javassist.bytecode.CodeIterator$Jump16 $r4;
        javassist.bytecode.CodeIterator$If16 $r5;
        javassist.bytecode.CodeIterator$Jump32 $r6;
        javassist.bytecode.CodeIterator$Lookup $r7;
        javassist.bytecode.CodeIterator$Table $r8;
        javassist.bytecode.CodeIterator$Branch16 r9;
        int[] r10, r11, r12;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: javassist.bytecode.CodeIterator$Pointers;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i15 = 0;

     label01:
        if i15 >= i0 goto label16;

        i1 = staticinvoke <javassist.bytecode.CodeIterator: int nextOpcode(byte[],int)>(r0, i15);

        $b3 = r0[i15];

        s2 = $b3 & 255;

        if 153 > s2 goto label02;

        if s2 <= 168 goto label03;

     label02:
        if s2 == 198 goto label03;

        if s2 != 199 goto label07;

     label03:
        $i16 = i15 + 1;

        $b17 = r0[$i16];

        $i18 = $b17 << 8;

        $i19 = i15 + 2;

        $b20 = r0[$i19];

        $s21 = $b20 & 255;

        i22 = $i18 | $s21;

        if s2 == 167 goto label04;

        if s2 != 168 goto label05;

     label04:
        $r4 = new javassist.bytecode.CodeIterator$Jump16;

        specialinvoke $r4.<javassist.bytecode.CodeIterator$Jump16: void <init>(int,int)>(i15, i22);

        r9 = $r4;

        goto label06;

     label05:
        $r5 = new javassist.bytecode.CodeIterator$If16;

        specialinvoke $r5.<javassist.bytecode.CodeIterator$If16: void <init>(int,int)>(i15, i22);

        r9 = $r5;

     label06:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label15;

     label07:
        if s2 == 200 goto label08;

        if s2 != 201 goto label09;

     label08:
        $i4 = i15 + 1;

        i23 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i4);

        $r6 = new javassist.bytecode.CodeIterator$Jump32;

        specialinvoke $r6.<javassist.bytecode.CodeIterator$Jump32: void <init>(int,int)>(i15, i23);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label15;

     label09:
        if s2 != 170 goto label12;

        $i10 = i15 & -4;

        i24 = $i10 + 4;

        i25 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i24);

        $i11 = i24 + 4;

        i26 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i11);

        $i12 = i24 + 8;

        i27 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i12);

        i28 = i24 + 12;

        $i13 = i27 - i26;

        i29 = $i13 + 1;

        r10 = newarray (int)[i29];

        i30 = 0;

     label10:
        if i30 >= i29 goto label11;

        $i14 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i28);

        r10[i30] = $i14;

        i28 = i28 + 4;

        i30 = i30 + 1;

        goto label10;

     label11:
        $r8 = new javassist.bytecode.CodeIterator$Table;

        specialinvoke $r8.<javassist.bytecode.CodeIterator$Table: void <init>(int,int,int,int,int[],javassist.bytecode.CodeIterator$Pointers)>(i15, i25, i26, i27, r10, r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label15;

     label12:
        if s2 != 171 goto label15;

        $i5 = i15 & -4;

        i31 = $i5 + 4;

        i32 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i31);

        $i6 = i31 + 4;

        i33 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i6);

        i34 = i31 + 8;

        r11 = newarray (int)[i33];

        r12 = newarray (int)[i33];

        i35 = 0;

     label13:
        if i35 >= i33 goto label14;

        $i7 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, i34);

        r11[i35] = $i7;

        $i8 = i34 + 4;

        $i9 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r0, $i8);

        r12[i35] = $i9;

        i34 = i34 + 8;

        i35 = i35 + 1;

        goto label13;

     label14:
        $r7 = new javassist.bytecode.CodeIterator$Lookup;

        specialinvoke $r7.<javassist.bytecode.CodeIterator$Lookup: void <init>(int,int,int[],int[],javassist.bytecode.CodeIterator$Pointers)>(i15, i32, r11, r12, r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

     label15:
        i15 = i1;

        goto label01;

     label16:
        return $r3;
    }

    private static byte[] makeExapndedCode(byte[], java.util.List, int, int) throws javassist.bytecode.BadBytecode
    {
        byte[] r0, r7;
        java.util.List r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i12, i13, i14, i15, i16, i17, i18;
        boolean $z0;
        java.lang.Object $r2, $r3, $r4;
        byte $b9;
        java.util.Iterator r5;
        javassist.bytecode.CodeIterator$Branch r6, r8;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $i4 = lengthof r0;

        i12 = $i4 + i1;

        r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r4 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (javassist.bytecode.CodeIterator$Branch) $r4;

        $i11 = virtualinvoke r6.<javassist.bytecode.CodeIterator$Branch: int deltaSize()>();

        i12 = i12 + $i11;

        goto label01;

     label02:
        r7 = newarray (byte)[i12];

        i13 = 0;

        i14 = 0;

        i15 = 0;

        i3 = lengthof r0;

        if 0 >= i2 goto label03;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (javassist.bytecode.CodeIterator$Branch) $r3;

        i16 = r8.<javassist.bytecode.CodeIterator$Branch: int orgPos>;

        goto label04;

     label03:
        r8 = null;

        i16 = i3;

     label04:
        if i13 >= i3 goto label10;

        if i13 != i0 goto label06;

        i17 = i14 + i1;

     label05:
        if i14 >= i17 goto label06;

        $i10 = i14;

        i14 = i14 + 1;

        r7[$i10] = 0;

        goto label05;

     label06:
        if i13 == i16 goto label07;

        $i7 = i14;

        i14 = i14 + 1;

        $i8 = i13;

        i13 = i13 + 1;

        $b9 = r0[$i8];

        r7[$i7] = $b9;

        goto label04;

     label07:
        i18 = virtualinvoke r8.<javassist.bytecode.CodeIterator$Branch: int write(int,byte[],int,byte[])>(i13, r0, i14, r7);

        i13 = i13 + i18;

        $i5 = virtualinvoke r8.<javassist.bytecode.CodeIterator$Branch: int deltaSize()>();

        $i6 = i18 + $i5;

        i14 = i14 + $i6;

        i15 = i15 + 1;

        if i15 >= i2 goto label08;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i15);

        r8 = (javassist.bytecode.CodeIterator$Branch) $r2;

        i16 = r8.<javassist.bytecode.CodeIterator$Branch: int orgPos>;

        goto label09;

     label08:
        r8 = null;

        i16 = i3;

     label09:
        goto label04;

     label10:
        return r7;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[202];

        $r0[0] = 1;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 1;

        $r0[4] = 1;

        $r0[5] = 1;

        $r0[6] = 1;

        $r0[7] = 1;

        $r0[8] = 1;

        $r0[9] = 1;

        $r0[10] = 1;

        $r0[11] = 1;

        $r0[12] = 1;

        $r0[13] = 1;

        $r0[14] = 1;

        $r0[15] = 1;

        $r0[16] = 2;

        $r0[17] = 3;

        $r0[18] = 2;

        $r0[19] = 3;

        $r0[20] = 3;

        $r0[21] = 2;

        $r0[22] = 2;

        $r0[23] = 2;

        $r0[24] = 2;

        $r0[25] = 2;

        $r0[26] = 1;

        $r0[27] = 1;

        $r0[28] = 1;

        $r0[29] = 1;

        $r0[30] = 1;

        $r0[31] = 1;

        $r0[32] = 1;

        $r0[33] = 1;

        $r0[34] = 1;

        $r0[35] = 1;

        $r0[36] = 1;

        $r0[37] = 1;

        $r0[38] = 1;

        $r0[39] = 1;

        $r0[40] = 1;

        $r0[41] = 1;

        $r0[42] = 1;

        $r0[43] = 1;

        $r0[44] = 1;

        $r0[45] = 1;

        $r0[46] = 1;

        $r0[47] = 1;

        $r0[48] = 1;

        $r0[49] = 1;

        $r0[50] = 1;

        $r0[51] = 1;

        $r0[52] = 1;

        $r0[53] = 1;

        $r0[54] = 2;

        $r0[55] = 2;

        $r0[56] = 2;

        $r0[57] = 2;

        $r0[58] = 2;

        $r0[59] = 1;

        $r0[60] = 1;

        $r0[61] = 1;

        $r0[62] = 1;

        $r0[63] = 1;

        $r0[64] = 1;

        $r0[65] = 1;

        $r0[66] = 1;

        $r0[67] = 1;

        $r0[68] = 1;

        $r0[69] = 1;

        $r0[70] = 1;

        $r0[71] = 1;

        $r0[72] = 1;

        $r0[73] = 1;

        $r0[74] = 1;

        $r0[75] = 1;

        $r0[76] = 1;

        $r0[77] = 1;

        $r0[78] = 1;

        $r0[79] = 1;

        $r0[80] = 1;

        $r0[81] = 1;

        $r0[82] = 1;

        $r0[83] = 1;

        $r0[84] = 1;

        $r0[85] = 1;

        $r0[86] = 1;

        $r0[87] = 1;

        $r0[88] = 1;

        $r0[89] = 1;

        $r0[90] = 1;

        $r0[91] = 1;

        $r0[92] = 1;

        $r0[93] = 1;

        $r0[94] = 1;

        $r0[95] = 1;

        $r0[96] = 1;

        $r0[97] = 1;

        $r0[98] = 1;

        $r0[99] = 1;

        $r0[100] = 1;

        $r0[101] = 1;

        $r0[102] = 1;

        $r0[103] = 1;

        $r0[104] = 1;

        $r0[105] = 1;

        $r0[106] = 1;

        $r0[107] = 1;

        $r0[108] = 1;

        $r0[109] = 1;

        $r0[110] = 1;

        $r0[111] = 1;

        $r0[112] = 1;

        $r0[113] = 1;

        $r0[114] = 1;

        $r0[115] = 1;

        $r0[116] = 1;

        $r0[117] = 1;

        $r0[118] = 1;

        $r0[119] = 1;

        $r0[120] = 1;

        $r0[121] = 1;

        $r0[122] = 1;

        $r0[123] = 1;

        $r0[124] = 1;

        $r0[125] = 1;

        $r0[126] = 1;

        $r0[127] = 1;

        $r0[128] = 1;

        $r0[129] = 1;

        $r0[130] = 1;

        $r0[131] = 1;

        $r0[132] = 3;

        $r0[133] = 1;

        $r0[134] = 1;

        $r0[135] = 1;

        $r0[136] = 1;

        $r0[137] = 1;

        $r0[138] = 1;

        $r0[139] = 1;

        $r0[140] = 1;

        $r0[141] = 1;

        $r0[142] = 1;

        $r0[143] = 1;

        $r0[144] = 1;

        $r0[145] = 1;

        $r0[146] = 1;

        $r0[147] = 1;

        $r0[148] = 1;

        $r0[149] = 1;

        $r0[150] = 1;

        $r0[151] = 1;

        $r0[152] = 1;

        $r0[153] = 3;

        $r0[154] = 3;

        $r0[155] = 3;

        $r0[156] = 3;

        $r0[157] = 3;

        $r0[158] = 3;

        $r0[159] = 3;

        $r0[160] = 3;

        $r0[161] = 3;

        $r0[162] = 3;

        $r0[163] = 3;

        $r0[164] = 3;

        $r0[165] = 3;

        $r0[166] = 3;

        $r0[167] = 3;

        $r0[168] = 3;

        $r0[169] = 2;

        $r0[170] = 0;

        $r0[171] = 0;

        $r0[172] = 1;

        $r0[173] = 1;

        $r0[174] = 1;

        $r0[175] = 1;

        $r0[176] = 1;

        $r0[177] = 1;

        $r0[178] = 3;

        $r0[179] = 3;

        $r0[180] = 3;

        $r0[181] = 3;

        $r0[182] = 3;

        $r0[183] = 3;

        $r0[184] = 3;

        $r0[185] = 5;

        $r0[186] = 5;

        $r0[187] = 3;

        $r0[188] = 2;

        $r0[189] = 3;

        $r0[190] = 1;

        $r0[191] = 1;

        $r0[192] = 3;

        $r0[193] = 3;

        $r0[194] = 1;

        $r0[195] = 1;

        $r0[196] = 0;

        $r0[197] = 4;

        $r0[198] = 3;

        $r0[199] = 3;

        $r0[200] = 5;

        $r0[201] = 5;

        <javassist.bytecode.CodeIterator: int[] opcodeLength> = $r0;

        return;
    }
}
