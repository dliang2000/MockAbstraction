public class org.apache.logging.log4j.message.ReusableObjectMessage extends java.lang.Object implements org.apache.logging.log4j.message.ReusableMessage, org.apache.logging.log4j.message.ParameterVisitable, org.apache.logging.log4j.message.Clearable
{
    private static final long serialVersionUID;
    private transient java.lang.Object obj;

    public void <init>()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void set(java.lang.Object)
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object r1;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        r1 := @parameter0: java.lang.Object;

        r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj> = r1;

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r2;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.StringBuilder r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void appendValue(java.lang.StringBuilder,java.lang.Object)>(r1, $r2);

        return;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.String $r3;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $r3 = (java.lang.String) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object getParameter()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        return $r1;
    }

    public java.lang.Object[] getParameters()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $r1[0] = $r2;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.String getFormattedMessage()>();

        return $r1;
    }

    public java.lang.Throwable getThrowable()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $z0 = $r1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        $r3 = (java.lang.Throwable) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object[] swapParameters(java.lang.Object[])
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        java.lang.Object[] r1, r2;
        int $i0;
        java.lang.Object $r3, $r4;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        r2 = newarray (java.lang.Object)[10];

        $r4 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        r2[0] = $r4;

        return r2;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        r1[0] = $r3;

        return r1;
    }

    public short getParameterCount()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        return 1;
    }

    public void forEachParameter(org.apache.logging.log4j.message.ParameterConsumer, java.lang.Object)
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        org.apache.logging.log4j.message.ParameterConsumer r1;
        java.lang.Object r2, $r3;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        r1 := @parameter0: org.apache.logging.log4j.message.ParameterConsumer;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        interfaceinvoke r1.<org.apache.logging.log4j.message.ParameterConsumer: void accept(java.lang.Object,int,java.lang.Object)>($r3, 0, r2);

        return;
    }

    public org.apache.logging.log4j.message.Message memento()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;
        org.apache.logging.log4j.message.ObjectMessage $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        $r1 = new org.apache.logging.log4j.message.ObjectMessage;

        $r2 = r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj>;

        specialinvoke $r1.<org.apache.logging.log4j.message.ObjectMessage: void <init>(java.lang.Object)>($r2);

        return $r1;
    }

    public void clear()
    {
        org.apache.logging.log4j.message.ReusableObjectMessage r0;

        r0 := @this: org.apache.logging.log4j.message.ReusableObjectMessage;

        r0.<org.apache.logging.log4j.message.ReusableObjectMessage: java.lang.Object obj> = null;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.message.ReusableObjectMessage: long serialVersionUID> = 6922476812535519960L;

        return;
    }
}
