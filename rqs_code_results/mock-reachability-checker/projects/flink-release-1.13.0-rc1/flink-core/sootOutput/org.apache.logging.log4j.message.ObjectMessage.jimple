public class org.apache.logging.log4j.message.ObjectMessage extends java.lang.Object implements org.apache.logging.log4j.message.Message, org.apache.logging.log4j.util.StringBuilderFormattable
{
    private static final long serialVersionUID;
    private transient java.lang.Object obj;
    private transient java.lang.String objectString;

    public void <init>(java.lang.Object)
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object r1, $r3;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = "null";

        goto label2;

     label1:
        $r3 = r1;

     label2:
        r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj> = $r3;

        return;
    }

    public java.lang.String getFormattedMessage()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.String $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String objectString>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String objectString> = $r4;

     label1:
        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String objectString>;

        return $r2;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.lang.StringBuilder;

        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String objectString>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String objectString>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        goto label2;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        staticinvoke <org.apache.logging.log4j.util.StringBuilders: void appendValue(java.lang.StringBuilder,java.lang.Object)>(r1, $r3);

     label2:
        return;
    }

    public java.lang.String getFormat()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String getFormattedMessage()>();

        return $r1;
    }

    public java.lang.Object getParameter()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        return $r1;
    }

    public java.lang.Object[] getParameters()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $r1[0] = $r2;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.message.ObjectMessage r0, r2;
        java.lang.Object r1, $r5, $r6, $r7, $r8;
        java.lang.Class $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.logging.log4j.message.ObjectMessage) r1;

        $r5 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        if $r5 != null goto label5;

        $r8 = r2.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        if $r8 != null goto label4;

        $z0 = 1;

        goto label6;

     label4:
        $z0 = 0;

        goto label6;

     label5:
        $r7 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $r6 = r2.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $z0 = specialinvoke r0.<org.apache.logging.log4j.message.ObjectMessage: boolean equalObjectsOrStrings(java.lang.Object,java.lang.Object)>($r7, $r6);

     label6:
        return $z0;
    }

    private boolean equalObjectsOrStrings(java.lang.Object, java.lang.Object)
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object $r1, $r2;
        int $i0;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.String getFormattedMessage()>();

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object $r2, $r3, $r5;
        boolean $z0;
        java.lang.String $r4;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $z0 = $r2 instanceof java.io.Serializable;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        goto label2;

     label1:
        $r3 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.io.ObjectInputStream r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj> = $r2;

        return;
    }

    public java.lang.Throwable getThrowable()
    {
        org.apache.logging.log4j.message.ObjectMessage r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: org.apache.logging.log4j.message.ObjectMessage;

        $r1 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $z0 = $r1 instanceof java.lang.Throwable;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.logging.log4j.message.ObjectMessage: java.lang.Object obj>;

        $r3 = (java.lang.Throwable) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.message.ObjectMessage: long serialVersionUID> = -5903272448334166185L;

        return;
    }
}
