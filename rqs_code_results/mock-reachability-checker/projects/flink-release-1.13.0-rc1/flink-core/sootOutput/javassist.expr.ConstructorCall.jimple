public class javassist.expr.ConstructorCall extends javassist.expr.MethodCall
{

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.expr.ConstructorCall r0;
        int i0;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;

        r0 := @this: javassist.expr.ConstructorCall;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        specialinvoke r0.<javassist.expr.MethodCall: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>(i0, r1, r2, r3);

        return;
    }

    public java.lang.String getMethodName()
    {
        javassist.expr.ConstructorCall r0;
        boolean $z0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.ConstructorCall;

        $z0 = virtualinvoke r0.<javassist.expr.ConstructorCall: boolean isSuper()>();

        if $z0 == 0 goto label1;

        $r1 = "super";

        goto label2;

     label1:
        $r1 = "this";

     label2:
        return $r1;
    }

    public javassist.CtMethod getMethod() throws javassist.NotFoundException
    {
        javassist.expr.ConstructorCall r0;
        javassist.NotFoundException $r1;

        r0 := @this: javassist.expr.ConstructorCall;

        $r1 = new javassist.NotFoundException;

        specialinvoke $r1.<javassist.NotFoundException: void <init>(java.lang.String)>("this is a constructor call.  Call getConstructor().");

        throw $r1;
    }

    public javassist.CtConstructor getConstructor() throws javassist.NotFoundException
    {
        javassist.expr.ConstructorCall r0;
        javassist.CtClass $r1;
        java.lang.String $r2;
        javassist.CtConstructor $r3;

        r0 := @this: javassist.expr.ConstructorCall;

        $r1 = virtualinvoke r0.<javassist.expr.ConstructorCall: javassist.CtClass getCtClass()>();

        $r2 = virtualinvoke r0.<javassist.expr.ConstructorCall: java.lang.String getSignature()>();

        $r3 = virtualinvoke $r1.<javassist.CtClass: javassist.CtConstructor getConstructor(java.lang.String)>($r2);

        return $r3;
    }

    public boolean isSuper()
    {
        javassist.expr.ConstructorCall r0;
        boolean $z0;

        r0 := @this: javassist.expr.ConstructorCall;

        $z0 = specialinvoke r0.<javassist.expr.MethodCall: boolean isSuper()>();

        return $z0;
    }
}
