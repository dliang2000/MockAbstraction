class org.joda.time.chrono.BasicMonthOfYearDateTimeField extends org.joda.time.field.ImpreciseDateTimeField
{
    private static final long serialVersionUID;
    private static final int MIN;
    private final org.joda.time.chrono.BasicChronology iChronology;
    private final int iMax;
    private final int iLeapMonth;

    void <init>(org.joda.time.chrono.BasicChronology, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology r1, $r3;
        int i0, $i2;
        org.joda.time.DateTimeFieldType $r2;
        long $l1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        r1 := @parameter0: org.joda.time.chrono.BasicChronology;

        i0 := @parameter1: int;

        $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $l1 = virtualinvoke r1.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerMonth()>();

        specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,long)>($r2, $l1);

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> = r1;

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>();

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> = $i2;

        r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth> = i0;

        return;
    }

    public boolean isLenient()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 0;
    }

    public int get(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0;
        org.joda.time.chrono.BasicChronology $r1;
        int $i1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0);

        return $i1;
    }

    public long add(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, l2, l6, $l15;
        int i1, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        return l0;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i7 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0);

        l2 = (long) $i7;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3);

        $i8 = i4 - 1;

        i20 = $i8 + i1;

        if i20 < 0 goto label2;

        $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i17 = i20 / $i16;

        i21 = i3 + $i17;

        $i18 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i19 = i20 % $i18;

        i22 = $i19 + 1;

        goto label4;

     label2:
        $i9 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i10 = i20 / $i9;

        $i11 = i3 + $i10;

        i21 = $i11 - 1;

        i23 = staticinvoke <java.lang.Math: int abs(int)>(i20);

        $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        i24 = i23 % $i12;

        if i24 != 0 goto label3;

        i24 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label3:
        $i13 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i14 = $i13 - i24;

        i22 = $i14 + 1;

        if i22 != 1 goto label4;

        i21 = i21 + 1;

     label4:
        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i25 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4);

        $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i5 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i21, i22);

        if i25 <= i5 goto label5;

        i25 = i5;

     label5:
        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i21, i22, i25);

        $l15 = l6 + l2;

        return $l15;
    }

    public long add(long, long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, l1, l3, l8, $l9, $l13, $l16, $l17, $l18, $l19, $l21, $l22, $l28, $l30, $l32, $l33, $l34, $l36, $l37, $l38, l39, l40, l41, l42, $l45;
        int i2, i4, i5, i6, i7, $i11, $i12, $i15, $i20, $i23, $i24, $i25, $i27, $i31, $i35, i43, $i44, i47, i48;
        byte $b10, $b14, $b26, $b29, $b46;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r9, $r10, $r11, $r12, $r13;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 = (int) l1;

        $l9 = (long) i2;

        $b10 = $l9 cmp l1;

        if $b10 != 0 goto label1;

        $l38 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l0, i2);

        return $l38;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i11 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0);

        l3 = (long) $i11;

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i4 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i5 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i4);

        $i12 = i5 - 1;

        $l13 = (long) $i12;

        l39 = $l13 + l1;

        $b14 = l39 cmp 0L;

        if $b14 < 0 goto label2;

        $l34 = (long) i4;

        $i31 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l32 = (long) $i31;

        $l33 = l39 / $l32;

        l40 = $l34 + $l33;

        $i35 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l36 = (long) $i35;

        $l37 = l39 % $l36;

        l41 = $l37 + 1L;

        goto label4;

     label2:
        $l18 = (long) i4;

        $i15 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l16 = (long) $i15;

        $l17 = l39 / $l16;

        $l19 = $l18 + $l17;

        l40 = $l19 - 1L;

        l42 = staticinvoke <java.lang.Math: long abs(long)>(l39);

        $i20 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l21 = (long) $i20;

        $l22 = l42 % $l21;

        i43 = (int) $l22;

        if i43 != 0 goto label3;

        i43 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

     label3:
        $i23 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i24 = $i23 - i43;

        $i25 = $i24 + 1;

        l41 = (long) $i25;

        $b26 = l41 cmp 1L;

        if $b26 != 0 goto label4;

        l40 = l40 + 1L;

     label4:
        $r13 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i44 = virtualinvoke $r13.<org.joda.time.chrono.BasicChronology: int getMinYear()>();

        $l45 = (long) $i44;

        $b46 = l40 cmp $l45;

        if $b46 < 0 goto label5;

        $r9 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i27 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: int getMaxYear()>();

        $l28 = (long) $i27;

        $b29 = l40 cmp $l28;

        if $b29 <= 0 goto label6;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Magnitude of add amount is too large: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label6:
        i47 = (int) l40;

        i6 = (int) l41;

        $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i48 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i4, i5);

        $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i7 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i47, i6);

        if i48 <= i7 goto label7;

        i48 = i7;

     label7:
        $r12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        l8 = virtualinvoke $r12.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i47, i6, i48);

        $l30 = l8 + l3;

        return $l30;
    }

    public int[] add(org.joda.time.ReadablePartial, int, int[], int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.ReadablePartial r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i13;
        int[] r2, $r3, $r5, $r11;
        org.joda.time.chrono.BasicChronology $r4, $r7;
        org.joda.time.DateTimeFieldType $r6, $r9, $r10;
        org.joda.time.DateTimeField $r8;
        boolean $z0, $z1;
        long l12, l14;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i1 := @parameter3: int;

        if i1 != 0 goto label1;

        return r2;

     label1:
        $i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        if $i4 <= 0 goto label2;

        $r9 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(0);

        $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>();

        $z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label2;

        if i0 != 0 goto label2;

        $i6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(0);

        i11 = $i6 - 1;

        $i7 = i1 % 12;

        $i8 = i11 + $i7;

        $i9 = $i8 + 12;

        $i10 = $i9 % 12;

        i2 = $i10 + 1;

        $r11 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, 0, r2, i2);

        return $r11;

     label2:
        $z1 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1);

        if $z1 == 0 goto label5;

        l12 = 0L;

        i13 = 0;

        i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

     label3:
        if i13 >= i3 goto label4;

        $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i13);

        $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r8 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r7);

        $i5 = r2[i13];

        l12 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(l12, $i5);

        i13 = i13 + 1;

        goto label3;

     label4:
        l14 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l12, i1);

        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l14);

        return $r5;

     label5:
        $r3 = specialinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1);

        return $r3;
    }

    public long addWrapField(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l5;
        int i1, $i2, $i3, $i4;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int get(long)>(l0);

        $i3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int getWrappedValue(int,int,int,int)>($i2, i1, 1, $i3);

        $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long set(long,int)>(l0, $i4);

        return $l5;
    }

    public long getDifferenceAsLong(long, long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, l6, $l10, $l11, $l12, $l13, $l14, $l15, $l19, l20, l21, $l23, l24, $l25;
        int i1, i2, i3, i4, i5, $i8, $i9, $i16, $i17, $i18, i22;
        byte $b7, $b26;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        org.joda.time.DateTimeField $r9;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        l20 := @parameter1: long;

        $b7 = l0 cmp l20;

        if $b7 >= 0 goto label1;

        $i17 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>(l20, l0);

        $i18 = neg $i17;

        $l19 = (long) $i18;

        return $l19;

     label1:
        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l20);

        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l20, i3);

        $i8 = i1 - i3;

        $l11 = (long) $i8;

        $i9 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        $l10 = (long) $i9;

        $l13 = $l11 * $l10;

        $l12 = (long) i2;

        $l15 = $l13 + $l12;

        $l14 = (long) i4;

        l21 = $l15 - $l14;

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2);

        $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i16 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2);

        if i5 != $i16 goto label2;

        $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i22 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l20, i3, i4);

        if i22 <= i5 goto label2;

        $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>();

        l20 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l20, i5);

     label2:
        $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2);

        l24 = l0 - $l23;

        $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i3, i4);

        l6 = l20 - $l25;

        $b26 = l24 cmp l6;

        if $b26 >= 0 goto label3;

        l21 = l21 - 1L;

     label3:
        return l21;
    }

    public long set(long, int)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l5, $l7, $l8;
        int i1, i2, i3, $i4, $i6, i9;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $i4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i4);

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i9 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1);

        if i9 <= i3 goto label1;

        i9 = i3;

     label1:
        $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i9);

        $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i6 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0);

        $l7 = (long) $i6;

        $l8 = $l5 + $l7;

        return $l8;
    }

    public org.joda.time.DurationField getRangeDurationField()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>();

        return $r2;
    }

    public boolean isLeap(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0;
        int i1, $i2, $i3;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $z0 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i1);

        if $z0 == 0 goto label3;

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $i2 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1);

        $i3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iLeapMonth>;

        if $i2 != $i3 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getLeapAmount(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0;
        boolean $z0;
        byte $b1;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: boolean isLeap(long)>(l0);

        if $z0 == 0 goto label1;

        $b1 = 1;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        return $b1;
    }

    public org.joda.time.DurationField getLeapDurationField()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DurationField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>();

        return $r2;
    }

    public int getMinimumValue()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        return 1;
    }

    public int getMaximumValue()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        int $i0;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>;

        return $i0;
    }

    public long roundFloor(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l3;
        int i1, i2;
        org.joda.time.chrono.BasicChronology $r1, $r2, $r3;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0);

        $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1);

        $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2);

        return $l3;
    }

    public long remainder(long)
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        long l0, $l1, $l2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>(l0);

        $l2 = l0 - $l1;

        return $l2;
    }

    private java.lang.Object readResolve()
    {
        org.joda.time.chrono.BasicMonthOfYearDateTimeField r0;
        org.joda.time.chrono.BasicChronology $r1;
        org.joda.time.DateTimeField $r2;

        r0 := @this: org.joda.time.chrono.BasicMonthOfYearDateTimeField;

        $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>;

        $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField monthOfYear()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.joda.time.chrono.BasicMonthOfYearDateTimeField: int MIN> = 1;

        <org.joda.time.chrono.BasicMonthOfYearDateTimeField: long serialVersionUID> = -8258715387168736L;

        return;
    }
}
