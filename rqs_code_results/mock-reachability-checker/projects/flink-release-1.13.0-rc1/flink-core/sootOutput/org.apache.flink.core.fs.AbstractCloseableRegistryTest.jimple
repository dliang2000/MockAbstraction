public abstract class org.apache.flink.core.fs.AbstractCloseableRegistryTest extends java.lang.Object
{
    private static final int TEST_TIMEOUT_SECONDS;
    protected org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads;
    protected org.apache.flink.util.AbstractCloseableRegistry closeableRegistry;
    protected java.util.concurrent.atomic.AtomicInteger unclosedCounter;

    public void <init>()
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void registerCloseable(java.io.Closeable) throws java.io.IOException;

    protected abstract org.apache.flink.util.AbstractCloseableRegistry createRegistry();

    protected abstract org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread createProducerThread(org.apache.flink.util.AbstractCloseableRegistry, java.util.concurrent.atomic.AtomicInteger, int);

    public void setup(int)
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        int i0, $i1, i2;
        boolean $z0;
        org.apache.flink.util.AbstractCloseableRegistry $r1, $r6;
        java.util.concurrent.atomic.AtomicInteger $r2, $r5;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] $r3, $r4, $r7;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread $r8;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.flink.core.fs.SafetyNetCloseableRegistry: boolean isReaperThreadRunning()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry createRegistry()>();

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry> = $r1;

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter> = $r2;

        $r3 = newarray (org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread)[10];

        r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads> = $r3;

        i2 = 0;

     label1:
        $r4 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r7 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads>;

        $r6 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        $r5 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter>;

        $r8 = virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread createProducerThread(org.apache.flink.util.AbstractCloseableRegistry,java.util.concurrent.atomic.AtomicInteger,int)>($r6, $r5, i0);

        $r7[i2] = $r8;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected void startThreads()
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] r1;
        int i0, i1;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread r2;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        r1 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread: void start()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void joinThreads() throws java.lang.InterruptedException
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] r1;
        int i0, i1;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread r2;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        r1 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.core.fs.AbstractCloseableRegistryTest$ProducerThread[] streamOpenThreads>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<java.lang.Thread: void join()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void testClose() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        org.apache.flink.util.AbstractCloseableRegistry $r2, $r4, $r7;
        java.util.concurrent.atomic.AtomicInteger $r3, $r6;
        int $i0, $i2, $i4, $i6, i8;
        long $l1, $l3, $l5, $l7;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable $r5;
        boolean $z0;
        java.io.IOException $r8;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void setup(int)>(2147483647);

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void startThreads()>();

        i8 = 0;

     label1:
        if i8 >= 5 goto label2;

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(40L);

        i8 = i8 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        virtualinvoke $r2.<org.apache.flink.util.AbstractCloseableRegistry: void close()>();

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void joinThreads()>();

        $r3 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l1);

        $r4 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        $i2 = virtualinvoke $r4.<org.apache.flink.util.AbstractCloseableRegistry: int getNumberOfRegisteredCloseables()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        $r5 = new org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable;

        specialinvoke $r5.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable: void <init>(org.apache.flink.core.fs.AbstractCloseableRegistryTest$1)>(null);

     label3:
        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void registerCloseable(java.io.Closeable)>($r5);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Closed registry should not accept closeables!");

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        $z0 = virtualinvoke $r5.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r6 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: java.util.concurrent.atomic.AtomicInteger unclosedCounter>;

        $i4 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l5);

        $r7 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        $i6 = virtualinvoke $r7.<org.apache.flink.util.AbstractCloseableRegistry: int getNumberOfRegisteredCloseables()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l7);

        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void testNonBlockingClose() throws java.lang.Exception
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$BlockingTestCloseable $r5;
        org.apache.flink.util.AbstractCloseableRegistry $r6, $r11;
        int $i0, $i2;
        long $l1, $l3;
        java.lang.Thread $r7;
        java.lang.Runnable $r8;
        java.util.concurrent.TimeUnit $r9;
        org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable $r10;
        boolean $z0;
        java.io.IOException $r12;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void setup(int)>(2147483647);

        $r5 = new org.apache.flink.core.fs.AbstractCloseableRegistryTest$BlockingTestCloseable;

        specialinvoke $r5.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$BlockingTestCloseable: void <init>(org.apache.flink.core.fs.AbstractCloseableRegistryTest$1)>(null);

        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void registerCloseable(java.io.Closeable)>($r5);

        $r6 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        $i0 = virtualinvoke $r6.<org.apache.flink.util.AbstractCloseableRegistry: int getNumberOfRegisteredCloseables()>();

        $l1 = (long) $i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l1);

        $r7 = new java.lang.Thread;

        $r8 = staticinvoke <org.apache.flink.core.fs.AbstractCloseableRegistryTest$lambda_testNonBlockingClose_0__725: java.lang.Runnable bootstrap$(org.apache.flink.core.fs.AbstractCloseableRegistryTest)>(r0);

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r8);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r5.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$BlockingTestCloseable: void awaitClose(long,java.util.concurrent.TimeUnit)>(10L, $r9);

        $r10 = new org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable;

        specialinvoke $r10.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable: void <init>(org.apache.flink.core.fs.AbstractCloseableRegistryTest$1)>(null);

     label1:
        virtualinvoke r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: void registerCloseable(java.io.Closeable)>($r10);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Closed registry should not accept closeables!");

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        virtualinvoke $r5.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$BlockingTestCloseable: void unblockClose()>();

        virtualinvoke $r7.<java.lang.Thread: void join()>();

        $z0 = virtualinvoke $r10.<org.apache.flink.core.fs.AbstractCloseableRegistryTest$TestCloseable: boolean isClosed()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r11 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        $i2 = virtualinvoke $r11.<org.apache.flink.util.AbstractCloseableRegistry: int getNumberOfRegisteredCloseables()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(0L, $l3);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void lambda$testNonBlockingClose$0()
    {
        org.apache.flink.core.fs.AbstractCloseableRegistryTest r0;
        org.apache.flink.util.AbstractCloseableRegistry $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.flink.core.fs.AbstractCloseableRegistryTest;

     label1:
        $r2 = r0.<org.apache.flink.core.fs.AbstractCloseableRegistryTest: org.apache.flink.util.AbstractCloseableRegistry closeableRegistry>;

        virtualinvoke $r2.<org.apache.flink.util.AbstractCloseableRegistry: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.flink.core.fs.AbstractCloseableRegistryTest: int TEST_TIMEOUT_SECONDS> = 10;

        return;
    }
}
