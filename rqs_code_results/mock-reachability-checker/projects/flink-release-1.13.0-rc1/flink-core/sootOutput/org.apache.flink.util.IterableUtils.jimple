public class org.apache.flink.util.IterableUtils extends java.lang.Object
{

    public static java.util.stream.Stream toStream(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        boolean $z0;
        java.util.Spliterator $r2;
        java.util.Collection $r3;
        java.util.stream.Stream $r4;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r3 = (java.util.Collection) r0;

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.stream.Stream stream()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Spliterator spliterator()>();

        $r4 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r2, 0);

     label2:
        return $r4;
    }

    public static java.lang.Iterable flatMap(java.lang.Iterable, java.util.function.Function)
    {
        java.lang.Iterable r0, $r2;
        java.util.function.Function r1;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.function.Function;

        $r2 = staticinvoke <org.apache.flink.util.IterableUtils$lambda_flatMap_0__489: java.lang.Iterable bootstrap$(java.lang.Iterable,java.util.function.Function)>(r0, r1);

        return $r2;
    }

    private void <init>()
    {
        org.apache.flink.util.IterableUtils r0;

        r0 := @this: org.apache.flink.util.IterableUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Iterator lambda$flatMap$0(java.lang.Iterable, java.util.function.Function)
    {
        java.lang.Iterable r0;
        java.util.function.Function r1;
        org.apache.flink.util.IterableUtils$1 $r2;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.function.Function;

        $r2 = new org.apache.flink.util.IterableUtils$1;

        specialinvoke $r2.<org.apache.flink.util.IterableUtils$1: void <init>(java.lang.Iterable,java.util.function.Function)>(r0, r1);

        return $r2;
    }
}
