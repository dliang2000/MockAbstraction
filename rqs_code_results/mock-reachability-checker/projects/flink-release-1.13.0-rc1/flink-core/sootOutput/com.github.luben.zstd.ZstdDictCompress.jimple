public class com.github.luben.zstd.ZstdDictCompress extends com.github.luben.zstd.SharedDictBase
{
    private long nativePtr;
    private int level;

    private native void init(byte[], int, int, int);

    private native void free();

    public void <init>(byte[], int)
    {
        com.github.luben.zstd.ZstdDictCompress r0;
        byte[] r1;
        int i0, $i1;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r1;

        specialinvoke r0.<com.github.luben.zstd.ZstdDictCompress: void <init>(byte[],int,int,int)>(r1, 0, $i1, i0);

        return;
    }

    public void <init>(byte[], int, int, int)
    {
        com.github.luben.zstd.ZstdDictCompress r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        long $l5;
        byte $b6;
        java.lang.IllegalStateException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void <init>()>();

        r0.<com.github.luben.zstd.ZstdDictCompress: long nativePtr> = 0L;

        r0.<com.github.luben.zstd.ZstdDictCompress: int level> = 3;

        r0.<com.github.luben.zstd.ZstdDictCompress: int level> = i2;

        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if $i4 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dictionary buffer is to short");

        throw $r3;

     label1:
        specialinvoke r0.<com.github.luben.zstd.ZstdDictCompress: void init(byte[],int,int,int)>(r1, i0, i1, i2);

        $l5 = r0.<com.github.luben.zstd.ZstdDictCompress: long nativePtr>;

        $b6 = 0L cmp $l5;

        if $b6 != 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ZSTD_createCDict failed");

        throw $r2;

     label2:
        virtualinvoke r0.<com.github.luben.zstd.ZstdDictCompress: void storeFence()>();

        return;
    }

    int level()
    {
        com.github.luben.zstd.ZstdDictCompress r0;
        int $i0;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        $i0 = r0.<com.github.luben.zstd.ZstdDictCompress: int level>;

        return $i0;
    }

    void doClose()
    {
        com.github.luben.zstd.ZstdDictCompress r0;
        long $l0;
        byte $b1;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        $l0 = r0.<com.github.luben.zstd.ZstdDictCompress: long nativePtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        specialinvoke r0.<com.github.luben.zstd.ZstdDictCompress: void free()>();

        r0.<com.github.luben.zstd.ZstdDictCompress: long nativePtr> = 0L;

     label1:
        return;
    }

    public volatile void close()
    {
        com.github.luben.zstd.ZstdDictCompress r0;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void close()>();

        return;
    }

    public volatile void setFinalize(boolean)
    {
        com.github.luben.zstd.ZstdDictCompress r0;
        boolean z0;

        r0 := @this: com.github.luben.zstd.ZstdDictCompress;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.github.luben.zstd.SharedDictBase: void setFinalize(boolean)>(z0);

        return;
    }

    static void <clinit>()
    {
        staticinvoke <com.github.luben.zstd.util.Native: void load()>();

        return;
    }
}
