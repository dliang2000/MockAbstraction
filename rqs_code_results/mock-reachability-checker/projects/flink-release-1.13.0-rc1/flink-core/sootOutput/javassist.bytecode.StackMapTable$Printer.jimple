class javassist.bytecode.StackMapTable$Printer extends javassist.bytecode.StackMapTable$Walker
{
    private java.io.PrintWriter writer;
    private int offset;

    public static void print(javassist.bytecode.StackMapTable, java.io.PrintWriter)
    {
        javassist.bytecode.StackMapTable r0;
        java.io.PrintWriter r1;
        javassist.bytecode.StackMapTable$Printer $r3;
        byte[] $r4;
        javassist.bytecode.BadBytecode $r5;
        java.lang.String $r6;

        r0 := @parameter0: javassist.bytecode.StackMapTable;

        r1 := @parameter1: java.io.PrintWriter;

     label1:
        $r3 = new javassist.bytecode.StackMapTable$Printer;

        $r4 = virtualinvoke r0.<javassist.bytecode.StackMapTable: byte[] get()>();

        specialinvoke $r3.<javassist.bytecode.StackMapTable$Printer: void <init>(byte[],java.io.PrintWriter)>($r4, r1);

        virtualinvoke $r3.<javassist.bytecode.StackMapTable$Printer: void parse()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<javassist.bytecode.BadBytecode: java.lang.String getMessage()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

     label4:
        return;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label3;
    }

    void <init>(byte[], java.io.PrintWriter)
    {
        javassist.bytecode.StackMapTable$Printer r0;
        byte[] r1;
        java.io.PrintWriter r2;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: void <init>(byte[])>(r1);

        r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer> = r2;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = -1;

        return;
    }

    public void sameFrame(int, int)
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.io.PrintWriter $r2;
        java.lang.String $r6;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $i2 = i1 + 1;

        $i4 = $i3 + $i2;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = $i4;

        $r2 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i5 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" same frame: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return;
    }

    public void sameLocals(int, int, int, int)
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.io.PrintWriter $r2;
        java.lang.String $r6;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i5 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $i4 = i1 + 1;

        $i6 = $i5 + $i4;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = $i6;

        $r2 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i7 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" same locals: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Printer: void printTypeInfo(int,int)>(i2, i3);

        return;
    }

    public void chopFrame(int, int, int)
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        java.io.PrintWriter $r2;
        java.lang.String $r9;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $i3 = i1 + 1;

        $i5 = $i4 + $i3;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = $i5;

        $r2 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i6 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" chop frame: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",    ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" last locals");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return;
    }

    public void appendFrame(int, int, int[], int[])
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        int[] r1, r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        java.io.PrintWriter $r4;
        java.lang.String $r8;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        $i3 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $i2 = i1 + 1;

        $i4 = $i3 + $i2;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = $i4;

        $r4 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i5 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" append frame: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        i9 = 0;

     label1:
        $i6 = lengthof r1;

        if i9 >= $i6 goto label2;

        $i8 = r1[i9];

        $i7 = r2[i9];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Printer: void printTypeInfo(int,int)>($i8, $i7);

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }

    public void fullFrame(int, int, int[], int[], int[], int[])
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        int[] r1, r2, r3, r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.io.PrintWriter $r6, $r11, $r12;
        java.lang.String $r10;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        r4 := @parameter5: int[];

        $i3 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $i2 = i1 + 1;

        $i4 = $i3 + $i2;

        r0.<javassist.bytecode.StackMapTable$Printer: int offset> = $i4;

        $r6 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i5 = r0.<javassist.bytecode.StackMapTable$Printer: int offset>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" full frame: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>("[locals]");

        i12 = 0;

     label1:
        $i6 = lengthof r1;

        if i12 >= $i6 goto label2;

        $i11 = r1[i12];

        $i10 = r2[i12];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Printer: void printTypeInfo(int,int)>($i11, $i10);

        i12 = i12 + 1;

        goto label1;

     label2:
        $r12 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        virtualinvoke $r12.<java.io.PrintWriter: void println(java.lang.String)>("[stack]");

        i13 = 0;

     label3:
        $i7 = lengthof r3;

        if i13 >= $i7 goto label4;

        $i9 = r3[i13];

        $i8 = r4[i13];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Printer: void printTypeInfo(int,int)>($i9, $i8);

        i13 = i13 + 1;

        goto label3;

     label4:
        return;
    }

    private void printTypeInfo(int, int)
    {
        javassist.bytecode.StackMapTable$Printer r0;
        int i0, i1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.String r9;
        java.io.PrintWriter $r10, $r11;

        r0 := @this: javassist.bytecode.StackMapTable$Printer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 = null;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            default: goto label10;
        };

     label01:
        r9 = "top";

        goto label10;

     label02:
        r9 = "integer";

        goto label10;

     label03:
        r9 = "float";

        goto label10;

     label04:
        r9 = "double";

        goto label10;

     label05:
        r9 = "long";

        goto label10;

     label06:
        r9 = "null";

        goto label10;

     label07:
        r9 = "this";

        goto label10;

     label08:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("object (cpool_index ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label09:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uninitialized (offset ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r10 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        virtualinvoke $r10.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r11 = r0.<javassist.bytecode.StackMapTable$Printer: java.io.PrintWriter writer>;

        virtualinvoke $r11.<java.io.PrintWriter: void println(java.lang.String)>(r9);

        return;
    }
}
