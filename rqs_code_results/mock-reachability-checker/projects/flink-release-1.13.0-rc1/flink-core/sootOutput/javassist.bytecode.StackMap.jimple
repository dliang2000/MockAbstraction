public class javassist.bytecode.StackMap extends javassist.bytecode.AttributeInfo
{
    public static final java.lang.String tag;
    public static final int TOP;
    public static final int INTEGER;
    public static final int FLOAT;
    public static final int DOUBLE;
    public static final int LONG;
    public static final int NULL;
    public static final int THIS;
    public static final int OBJECT;
    public static final int UNINIT;

    void <init>(javassist.bytecode.ConstPool, byte[])
    {
        javassist.bytecode.StackMap r0;
        javassist.bytecode.ConstPool r1;
        byte[] r2;

        r0 := @this: javassist.bytecode.StackMap;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: byte[];

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String,byte[])>(r1, "StackMap", r2);

        return;
    }

    void <init>(javassist.bytecode.ConstPool, int, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.StackMap r0;
        javassist.bytecode.ConstPool r1;
        int i0;
        java.io.DataInputStream r2;

        r0 := @this: javassist.bytecode.StackMap;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.DataInputStream;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,int,java.io.DataInputStream)>(r1, i0, r2);

        return;
    }

    public int numOfEntries()
    {
        javassist.bytecode.StackMap r0;
        byte[] $r1;
        int $i0;

        r0 := @this: javassist.bytecode.StackMap;

        $r1 = r0.<javassist.bytecode.StackMap: byte[] info>;

        $i0 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, 0);

        return $i0;
    }

    public javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool, java.util.Map)
    {
        javassist.bytecode.StackMap r0, $r5;
        javassist.bytecode.ConstPool r1;
        java.util.Map r2;
        javassist.bytecode.StackMap$Copier $r4;

        r0 := @this: javassist.bytecode.StackMap;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

        $r4 = new javassist.bytecode.StackMap$Copier;

        specialinvoke $r4.<javassist.bytecode.StackMap$Copier: void <init>(javassist.bytecode.StackMap,javassist.bytecode.ConstPool,java.util.Map)>(r0, r1, r2);

        virtualinvoke $r4.<javassist.bytecode.StackMap$Copier: void visit()>();

        $r5 = virtualinvoke $r4.<javassist.bytecode.StackMap$Copier: javassist.bytecode.StackMap getStackMap()>();

        return $r5;
    }

    public void insertLocal(int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMap r0;
        int i0, i1, i2;
        byte[] r1;
        javassist.bytecode.StackMap$InsertLocal $r2;

        r0 := @this: javassist.bytecode.StackMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = new javassist.bytecode.StackMap$InsertLocal;

        specialinvoke $r2.<javassist.bytecode.StackMap$InsertLocal: void <init>(javassist.bytecode.StackMap,int,int,int)>(r0, i0, i1, i2);

        r1 = virtualinvoke $r2.<javassist.bytecode.StackMap$InsertLocal: byte[] doit()>();

        virtualinvoke r0.<javassist.bytecode.StackMap: void set(byte[])>(r1);

        return;
    }

    void shiftPc(int, int, boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMap r0;
        int i0, i1;
        boolean z0;
        javassist.bytecode.StackMap$Shifter $r1;

        r0 := @this: javassist.bytecode.StackMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = new javassist.bytecode.StackMap$Shifter;

        specialinvoke $r1.<javassist.bytecode.StackMap$Shifter: void <init>(javassist.bytecode.StackMap,int,int,boolean)>(r0, i0, i1, z0);

        virtualinvoke $r1.<javassist.bytecode.StackMap$Shifter: void visit()>();

        return;
    }

    void shiftForSwitch(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMap r0;
        int i0, i1;
        javassist.bytecode.StackMap$SwitchShifter $r1;

        r0 := @this: javassist.bytecode.StackMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new javassist.bytecode.StackMap$SwitchShifter;

        specialinvoke $r1.<javassist.bytecode.StackMap$SwitchShifter: void <init>(javassist.bytecode.StackMap,int,int)>(r0, i0, i1);

        virtualinvoke $r1.<javassist.bytecode.StackMap$SwitchShifter: void visit()>();

        return;
    }

    public void removeNew(int) throws javassist.CannotCompileException
    {
        javassist.bytecode.StackMap r0;
        int i0;
        byte[] r1;
        javassist.bytecode.StackMap$NewRemover $r2;

        r0 := @this: javassist.bytecode.StackMap;

        i0 := @parameter0: int;

        $r2 = new javassist.bytecode.StackMap$NewRemover;

        specialinvoke $r2.<javassist.bytecode.StackMap$NewRemover: void <init>(javassist.bytecode.StackMap,int)>(r0, i0);

        r1 = virtualinvoke $r2.<javassist.bytecode.StackMap$NewRemover: byte[] doit()>();

        virtualinvoke r0.<javassist.bytecode.StackMap: void set(byte[])>(r1);

        return;
    }

    public void print(java.io.PrintWriter)
    {
        javassist.bytecode.StackMap r0;
        java.io.PrintWriter r1;
        javassist.bytecode.StackMap$Printer $r2;

        r0 := @this: javassist.bytecode.StackMap;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = new javassist.bytecode.StackMap$Printer;

        specialinvoke $r2.<javassist.bytecode.StackMap$Printer: void <init>(javassist.bytecode.StackMap,java.io.PrintWriter)>(r0, r1);

        virtualinvoke $r2.<javassist.bytecode.StackMap$Printer: void print()>();

        return;
    }

    public static void <clinit>()
    {
        <javassist.bytecode.StackMap: int UNINIT> = 8;

        <javassist.bytecode.StackMap: int OBJECT> = 7;

        <javassist.bytecode.StackMap: int THIS> = 6;

        <javassist.bytecode.StackMap: int NULL> = 5;

        <javassist.bytecode.StackMap: int LONG> = 4;

        <javassist.bytecode.StackMap: int DOUBLE> = 3;

        <javassist.bytecode.StackMap: int FLOAT> = 2;

        <javassist.bytecode.StackMap: int INTEGER> = 1;

        <javassist.bytecode.StackMap: int TOP> = 0;

        <javassist.bytecode.StackMap: java.lang.String tag> = "StackMap";

        return;
    }
}
