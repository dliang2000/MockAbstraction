public class org.apache.flink.util.TimeUtils extends java.lang.Object
{
    private static final java.util.Map LABEL_TO_UNIT_MAP;

    public void <init>()
    {
        org.apache.flink.util.TimeUtils r0;

        r0 := @this: org.apache.flink.util.TimeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.time.Duration parseDuration(java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, $r12, $r14, $r25, $r26, $r27;
        int i0, i4;
        long l2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r7, $r20;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r21, $r22, $r23, $r24;
        java.time.Duration $r15, $r17;
        java.time.temporal.ChronoUnit $r16, r30;
        java.lang.NumberFormatException $r18, $r19;
        char $c3;
        java.util.Locale $r28;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "argument is an empty- or whitespace-only string");

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i4 = 0;

     label03:
        if i4 >= i0 goto label04;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i4);

        if $c3 < 48 goto label04;

        if $c3 > 57 goto label04;

        i4 = i4 + 1;

        goto label03;

     label04:
        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i4);

        $r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i4);

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String trim()>();

        $r28 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke $r27.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r28);

        $z3 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label05;

        $r18 = new java.lang.NumberFormatException;

        specialinvoke $r18.<java.lang.NumberFormatException: void <init>(java.lang.String)>("text does not start with a number");

        throw $r18;

     label05:
        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value \'");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be re represented as 64bit number (numeric overflow).");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label08:
        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        $r16 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MILLIS>;

        $r17 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(l2, $r16);

        return $r17;

     label09:
        $r5 = <org.apache.flink.util.TimeUtils: java.util.Map LABEL_TO_UNIT_MAP>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r30 = (java.time.temporal.ChronoUnit) $r6;

        if r30 == null goto label10;

        $r15 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>(l2, r30);

        return $r15;

     label10:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time interval unit label \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not match any of the recognized units: ");

        $r12 = staticinvoke <org.apache.flink.util.TimeUtils$TimeUnit: java.lang.String getAllUnits()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r7;

        catch java.lang.NumberFormatException from label05 to label06 with label07;
    }

    private static java.util.Map initMap()
    {
        org.apache.flink.util.TimeUtils$TimeUnit[] r1;
        int i0, i1;
        org.apache.flink.util.TimeUtils$TimeUnit r2;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.HashMap $r5;
        java.util.List $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.time.temporal.ChronoUnit $r8;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r1 = staticinvoke <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit[] values()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $r6 = virtualinvoke r2.<org.apache.flink.util.TimeUtils$TimeUnit: java.util.List getLabels()>();

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $r8 = virtualinvoke r2.<org.apache.flink.util.TimeUtils$TimeUnit: java.time.temporal.ChronoUnit getUnit()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r8);

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return $r5;
    }

    public static java.lang.String getStringInMillis(java.time.Duration)
    {
        java.time.Duration r0;
        java.lang.StringBuilder $r1, $r2, $r7;
        long $l0;
        org.apache.flink.util.TimeUtils$TimeUnit $r3;
        java.util.List $r4;
        java.lang.Object $r5;
        java.lang.String $r6, $r8;

        r0 := @parameter0: java.time.Duration;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $l0 = virtualinvoke r0.<java.time.Duration: long toMillis()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit MILLISECONDS>;

        $r4 = staticinvoke <org.apache.flink.util.TimeUtils$TimeUnit: java.util.List access$000(org.apache.flink.util.TimeUtils$TimeUnit)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String formatWithHighestUnit(java.time.Duration)
    {
        java.time.Duration r0, $r23;
        long l0, $l2, $l3;
        java.util.List r1, $r25;
        org.apache.flink.util.TimeUtils$TimeUnit r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r19;
        org.apache.flink.util.TimeUtils$TimeUnit[] $r3;
        int $i1;
        java.util.stream.IntStream $r11, $r12, $r14;
        java.util.function.IntPredicate $r13;
        java.util.stream.Stream $r15;
        java.util.Optional $r16, $r18;
        java.util.function.Function $r17;
        java.lang.Object $r20, $r26;
        java.lang.Object[] $r21;
        java.time.temporal.ChronoUnit $r22;
        java.lang.Long $r24;
        java.lang.String $r27;

        r0 := @parameter0: java.time.Duration;

        l0 = virtualinvoke r0.<java.time.Duration: long toNanos()>();

        $r3 = newarray (org.apache.flink.util.TimeUtils$TimeUnit)[7];

        $r4 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit NANOSECONDS>;

        $r3[0] = $r4;

        $r5 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit MICROSECONDS>;

        $r3[1] = $r5;

        $r6 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit MILLISECONDS>;

        $r3[2] = $r6;

        $r7 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit SECONDS>;

        $r3[3] = $r7;

        $r8 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit MINUTES>;

        $r3[4] = $r8;

        $r9 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit HOURS>;

        $r3[5] = $r9;

        $r10 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit DAYS>;

        $r3[6] = $r10;

        r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r11 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i1);

        $r12 = interfaceinvoke $r11.<java.util.stream.IntStream: java.util.stream.IntStream sequential()>();

        $r13 = staticinvoke <org.apache.flink.util.TimeUtils$lambda_formatWithHighestUnit_0__24: java.util.function.IntPredicate bootstrap$(long,java.util.List)>(l0, r1);

        $r14 = interfaceinvoke $r12.<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>($r13);

        $r15 = interfaceinvoke $r14.<java.util.stream.IntStream: java.util.stream.Stream boxed()>();

        $r16 = interfaceinvoke $r15.<java.util.stream.Stream: java.util.Optional findFirst()>();

        $r17 = staticinvoke <org.apache.flink.util.TimeUtils$lambda_formatWithHighestUnit_1__25: java.util.function.Function bootstrap$(java.util.List)>(r1);

        $r18 = virtualinvoke $r16.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r17);

        $r19 = <org.apache.flink.util.TimeUtils$TimeUnit: org.apache.flink.util.TimeUtils$TimeUnit MILLISECONDS>;

        $r20 = virtualinvoke $r18.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r19);

        r2 = (org.apache.flink.util.TimeUtils$TimeUnit) $r20;

        $r21 = newarray (java.lang.Object)[2];

        $r22 = staticinvoke <org.apache.flink.util.TimeUtils$TimeUnit: java.time.temporal.ChronoUnit access$100(org.apache.flink.util.TimeUtils$TimeUnit)>(r2);

        $r23 = virtualinvoke $r22.<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>();

        $l2 = virtualinvoke $r23.<java.time.Duration: long toNanos()>();

        $l3 = l0 / $l2;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r21[0] = $r24;

        $r25 = virtualinvoke r2.<org.apache.flink.util.TimeUtils$TimeUnit: java.util.List getLabels()>();

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(0);

        $r21[1] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d %s", $r21);

        return $r27;
    }

    public static java.time.Duration toDuration(org.apache.flink.api.common.time.Time)
    {
        org.apache.flink.api.common.time.Time r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        java.time.temporal.ChronoUnit $r2;
        java.time.Duration $r3;

        r0 := @parameter0: org.apache.flink.api.common.time.Time;

        $l0 = virtualinvoke r0.<org.apache.flink.api.common.time.Time: long getSize()>();

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.time.Time: java.util.concurrent.TimeUnit getUnit()>();

        $r2 = staticinvoke <org.apache.flink.util.TimeUtils: java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)>($r1);

        $r3 = staticinvoke <java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>($l0, $r2);

        return $r3;
    }

    private static java.time.temporal.ChronoUnit toChronoUnit(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r0;
        int[] $r1;
        int $i0, $i1;
        java.time.temporal.ChronoUnit $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @parameter0: java.util.concurrent.TimeUnit;

        $r1 = <org.apache.flink.util.TimeUtils$1: int[] $SwitchMap$java$util$concurrent$TimeUnit>;

        $i0 = virtualinvoke r0.<java.util.concurrent.TimeUnit: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        $r8 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit NANOS>;

        return $r8;

     label2:
        $r7 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MICROS>;

        return $r7;

     label3:
        $r6 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MILLIS>;

        return $r6;

     label4:
        $r5 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit SECONDS>;

        return $r5;

     label5:
        $r4 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit MINUTES>;

        return $r4;

     label6:
        $r3 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit HOURS>;

        return $r3;

     label7:
        $r2 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;

        return $r2;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r0;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unsupported time unit %s.", $r10);

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r9;
    }

    public static org.apache.flink.util.TimeUtils$TimeUnit lambda$formatWithHighestUnit$1(java.util.List, java.lang.Integer)
    {
        java.util.List r0;
        java.lang.Integer r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r4;
        org.apache.flink.util.TimeUtils$TimeUnit $r3, $r5;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.Integer;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label1;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (org.apache.flink.util.TimeUtils$TimeUnit) $r4;

        return $r5;

     label1:
        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (org.apache.flink.util.TimeUtils$TimeUnit) $r2;

        return $r3;
    }

    public static boolean lambda$formatWithHighestUnit$0(long, java.util.List, int)
    {
        long l0, $l2, $l3;
        java.util.List r0;
        int i1;
        java.lang.Object $r1;
        org.apache.flink.util.TimeUtils$TimeUnit $r2;
        java.time.temporal.ChronoUnit $r3;
        java.time.Duration $r4;
        byte $b4;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.List;

        i1 := @parameter2: int;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r2 = (org.apache.flink.util.TimeUtils$TimeUnit) $r1;

        $r3 = staticinvoke <org.apache.flink.util.TimeUtils$TimeUnit: java.time.temporal.ChronoUnit access$100(org.apache.flink.util.TimeUtils$TimeUnit)>($r2);

        $r4 = virtualinvoke $r3.<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>();

        $l2 = virtualinvoke $r4.<java.time.Duration: long toNanos()>();

        $l3 = l0 % $l2;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.util.Map $r0, $r1;

        $r0 = staticinvoke <org.apache.flink.util.TimeUtils: java.util.Map initMap()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0);

        <org.apache.flink.util.TimeUtils: java.util.Map LABEL_TO_UNIT_MAP> = $r1;

        return;
    }
}
