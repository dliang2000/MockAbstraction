public class org.mockito.Mockito extends org.mockito.ArgumentMatchers
{
    static final org.mockito.internal.MockitoCore MOCKITO_CORE;
    public static final org.mockito.stubbing.Answer RETURNS_DEFAULTS;
    public static final org.mockito.stubbing.Answer RETURNS_SMART_NULLS;
    public static final org.mockito.stubbing.Answer RETURNS_MOCKS;
    public static final org.mockito.stubbing.Answer RETURNS_DEEP_STUBS;
    public static final org.mockito.stubbing.Answer CALLS_REAL_METHODS;
    public static final org.mockito.stubbing.Answer RETURNS_SELF;

    public void <init>()
    {
        org.mockito.Mockito r0;

        r0 := @this: org.mockito.Mockito;

        specialinvoke r0.<org.mockito.ArgumentMatchers: void <init>()>();

        return;
    }

    public static java.lang.Object mock(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.MockSettings $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Object mock(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        org.mockito.MockSettings $r2, $r3, $r5;
        org.mockito.stubbing.Answer $r4;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings name(java.lang.String)>(r1);

        $r4 = <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_DEFAULTS>;

        $r5 = interfaceinvoke $r3.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r4);

        $r6 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, $r5);

        return $r6;
    }

    public static org.mockito.MockingDetails mockingDetails(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.MockingDetails $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.MockingDetails mockingDetails(java.lang.Object)>(r0);

        return $r2;
    }

    public static java.lang.Object mock(java.lang.Class, org.mockito.stubbing.Answer)
    {
        java.lang.Class r0;
        org.mockito.stubbing.Answer r1;
        org.mockito.MockSettings $r2, $r3;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.stubbing.Answer;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>(r1);

        $r4 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, $r3);

        return $r4;
    }

    public static java.lang.Object mock(java.lang.Class, org.mockito.MockSettings)
    {
        java.lang.Class r0;
        org.mockito.MockSettings r1;
        org.mockito.internal.MockitoCore $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.mockito.MockSettings;

        $r2 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.mockito.internal.MockitoCore: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, r1);

        return $r3;
    }

    public static java.lang.Object spy(java.lang.Object)
    {
        java.lang.Object r0, $r7;
        org.mockito.internal.MockitoCore $r1;
        java.lang.Class $r2;
        org.mockito.MockSettings $r3, $r4, $r6;
        org.mockito.stubbing.Answer $r5;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r4 = interfaceinvoke $r3.<org.mockito.MockSettings: org.mockito.MockSettings spiedInstance(java.lang.Object)>(r0);

        $r5 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        $r6 = interfaceinvoke $r4.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r5);

        $r7 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>($r2, $r6);

        return $r7;
    }

    public static java.lang.Object spy(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.MockSettings $r2, $r4, $r6;
        java.lang.Object[] $r3;
        org.mockito.stubbing.Answer $r5;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.MockSettings withSettings()>();

        $r3 = newarray (java.lang.Object)[0];

        $r4 = interfaceinvoke $r2.<org.mockito.MockSettings: org.mockito.MockSettings useConstructor(java.lang.Object[])>($r3);

        $r5 = <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS>;

        $r6 = interfaceinvoke $r4.<org.mockito.MockSettings: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r5);

        $r7 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: java.lang.Object mock(java.lang.Class,org.mockito.MockSettings)>(r0, $r6);

        return $r7;
    }

    public static org.mockito.stubbing.OngoingStubbing when(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.stubbing.OngoingStubbing $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>(r0);

        return $r2;
    }

    public static java.lang.Object verify(java.lang.Object)
    {
        java.lang.Object r0, $r3;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.verification.VerificationMode $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r3 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, $r2);

        return $r3;
    }

    public static java.lang.Object verify(java.lang.Object, org.mockito.verification.VerificationMode)
    {
        java.lang.Object r0, $r3;
        org.mockito.verification.VerificationMode r1;
        org.mockito.internal.MockitoCore $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.mockito.verification.VerificationMode;

        $r2 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.mockito.internal.MockitoCore: java.lang.Object verify(java.lang.Object,org.mockito.verification.VerificationMode)>(r0, r1);

        return $r3;
    }

    public static transient void reset(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.MockitoCore $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        virtualinvoke $r1.<org.mockito.internal.MockitoCore: void reset(java.lang.Object[])>(r0);

        return;
    }

    public static transient void clearInvocations(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.MockitoCore $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        virtualinvoke $r1.<org.mockito.internal.MockitoCore: void clearInvocations(java.lang.Object[])>(r0);

        return;
    }

    public static transient void verifyNoMoreInteractions(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.MockitoCore $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        virtualinvoke $r1.<org.mockito.internal.MockitoCore: void verifyNoMoreInteractions(java.lang.Object[])>(r0);

        return;
    }

    public static transient void verifyZeroInteractions(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.MockitoCore $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        virtualinvoke $r1.<org.mockito.internal.MockitoCore: void verifyNoMoreInteractions(java.lang.Object[])>(r0);

        return;
    }

    public static transient org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])
    {
        java.lang.Throwable[] r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.stubbing.Stubber $r2, $r3;

        r0 := @parameter0: java.lang.Throwable[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r3 = interfaceinvoke $r2.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doThrow(java.lang.Throwable[])>(r0);

        return $r3;
    }

    public static org.mockito.stubbing.Stubber doThrow(java.lang.Class)
    {
        java.lang.Class r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.stubbing.Stubber $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r3 = interfaceinvoke $r2.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doThrow(java.lang.Class)>(r0);

        return $r3;
    }

    public static transient org.mockito.stubbing.Stubber doThrow(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        org.mockito.internal.MockitoCore $r2;
        org.mockito.stubbing.Stubber $r3, $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doThrow(java.lang.Class,java.lang.Class[])>(r0, r1);

        return $r4;
    }

    public static org.mockito.stubbing.Stubber doCallRealMethod()
    {
        org.mockito.internal.MockitoCore $r0;
        org.mockito.stubbing.Stubber $r1, $r2;

        $r0 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r1 = virtualinvoke $r0.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r2 = interfaceinvoke $r1.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doCallRealMethod()>();

        return $r2;
    }

    public static org.mockito.stubbing.Stubber doAnswer(org.mockito.stubbing.Answer)
    {
        org.mockito.stubbing.Answer r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.stubbing.Stubber $r2, $r3;

        r0 := @parameter0: org.mockito.stubbing.Answer;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r3 = interfaceinvoke $r2.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doAnswer(org.mockito.stubbing.Answer)>(r0);

        return $r3;
    }

    public static org.mockito.stubbing.Stubber doNothing()
    {
        org.mockito.internal.MockitoCore $r0;
        org.mockito.stubbing.Stubber $r1, $r2;

        $r0 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r1 = virtualinvoke $r0.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r2 = interfaceinvoke $r1.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doNothing()>();

        return $r2;
    }

    public static org.mockito.stubbing.Stubber doReturn(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.stubbing.Stubber $r2, $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r3 = interfaceinvoke $r2.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doReturn(java.lang.Object)>(r0);

        return $r3;
    }

    public static transient org.mockito.stubbing.Stubber doReturn(java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.Object[] r1;
        org.mockito.internal.MockitoCore $r2;
        org.mockito.stubbing.Stubber $r3, $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r3 = virtualinvoke $r2.<org.mockito.internal.MockitoCore: org.mockito.stubbing.Stubber stubber()>();

        $r4 = interfaceinvoke $r3.<org.mockito.stubbing.Stubber: org.mockito.stubbing.Stubber doReturn(java.lang.Object,java.lang.Object[])>(r0, r1);

        return $r4;
    }

    public static transient org.mockito.InOrder inOrder(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.mockito.internal.MockitoCore $r1;
        org.mockito.InOrder $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: org.mockito.InOrder inOrder(java.lang.Object[])>(r0);

        return $r2;
    }

    public static transient java.lang.Object[] ignoreStubs(java.lang.Object[])
    {
        java.lang.Object[] r0, $r2;
        org.mockito.internal.MockitoCore $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r2 = virtualinvoke $r1.<org.mockito.internal.MockitoCore: java.lang.Object[] ignoreStubs(java.lang.Object[])>(r0);

        return $r2;
    }

    public static org.mockito.verification.VerificationMode times(int)
    {
        int i0;
        org.mockito.internal.verification.Times $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.Times times(int)>(i0);

        return $r0;
    }

    public static org.mockito.verification.VerificationMode never()
    {
        org.mockito.verification.VerificationMode $r0;

        $r0 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(0);

        return $r0;
    }

    public static org.mockito.verification.VerificationMode atLeastOnce()
    {
        org.mockito.verification.VerificationMode $r0;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode atLeastOnce()>();

        return $r0;
    }

    public static org.mockito.verification.VerificationMode atLeast(int)
    {
        int i0;
        org.mockito.verification.VerificationMode $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode atLeast(int)>(i0);

        return $r0;
    }

    public static org.mockito.verification.VerificationMode atMost(int)
    {
        int i0;
        org.mockito.verification.VerificationMode $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode atMost(int)>(i0);

        return $r0;
    }

    public static org.mockito.verification.VerificationMode calls(int)
    {
        int i0;
        org.mockito.internal.verification.Calls $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.Calls calls(int)>(i0);

        return $r0;
    }

    public static org.mockito.verification.VerificationMode only()
    {
        org.mockito.verification.VerificationMode $r0;

        $r0 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.verification.VerificationMode only()>();

        return $r0;
    }

    public static org.mockito.verification.VerificationWithTimeout timeout(long)
    {
        long l0;
        org.mockito.verification.Timeout $r0;
        org.mockito.internal.verification.Times $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.verification.Timeout;

        $r1 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.Times times(int)>(1);

        specialinvoke $r0.<org.mockito.verification.Timeout: void <init>(long,org.mockito.verification.VerificationMode)>(l0, $r1);

        return $r0;
    }

    public static org.mockito.verification.VerificationAfterDelay after(long)
    {
        long l0;
        org.mockito.verification.After $r0;
        org.mockito.internal.verification.Times $r1;

        l0 := @parameter0: long;

        $r0 = new org.mockito.verification.After;

        $r1 = staticinvoke <org.mockito.internal.verification.VerificationModeFactory: org.mockito.internal.verification.Times times(int)>(1);

        specialinvoke $r0.<org.mockito.verification.After: void <init>(long,org.mockito.verification.VerificationMode)>(l0, $r1);

        return $r0;
    }

    public static void validateMockitoUsage()
    {
        org.mockito.internal.MockitoCore $r0;

        $r0 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        virtualinvoke $r0.<org.mockito.internal.MockitoCore: void validateMockitoUsage()>();

        return;
    }

    public static org.mockito.MockSettings withSettings()
    {
        org.mockito.internal.creation.MockSettingsImpl $r0;
        org.mockito.stubbing.Answer $r1;
        org.mockito.MockSettings $r2;

        $r0 = new org.mockito.internal.creation.MockSettingsImpl;

        specialinvoke $r0.<org.mockito.internal.creation.MockSettingsImpl: void <init>()>();

        $r1 = <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_DEFAULTS>;

        $r2 = virtualinvoke $r0.<org.mockito.internal.creation.MockSettingsImpl: org.mockito.MockSettings defaultAnswer(org.mockito.stubbing.Answer)>($r1);

        return $r2;
    }

    public static org.mockito.verification.VerificationMode description(java.lang.String)
    {
        java.lang.String r0;
        org.mockito.verification.VerificationMode $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.mockito.Mockito: org.mockito.verification.VerificationMode times(int)>(1);

        $r2 = interfaceinvoke $r1.<org.mockito.verification.VerificationMode: org.mockito.verification.VerificationMode description(java.lang.String)>(r0);

        return $r2;
    }

    static org.mockito.MockitoDebugger debug()
    {
        org.mockito.internal.debugging.MockitoDebuggerImpl $r0;

        $r0 = new org.mockito.internal.debugging.MockitoDebuggerImpl;

        specialinvoke $r0.<org.mockito.internal.debugging.MockitoDebuggerImpl: void <init>()>();

        return $r0;
    }

    public static org.mockito.MockitoFramework framework()
    {
        org.mockito.internal.framework.DefaultMockitoFramework $r0;

        $r0 = new org.mockito.internal.framework.DefaultMockitoFramework;

        specialinvoke $r0.<org.mockito.internal.framework.DefaultMockitoFramework: void <init>()>();

        return $r0;
    }

    public static org.mockito.session.MockitoSessionBuilder mockitoSession()
    {
        org.mockito.internal.session.DefaultMockitoSessionBuilder $r0;

        $r0 = new org.mockito.internal.session.DefaultMockitoSessionBuilder;

        specialinvoke $r0.<org.mockito.internal.session.DefaultMockitoSessionBuilder: void <init>()>();

        return $r0;
    }

    public static org.mockito.stubbing.LenientStubber lenient()
    {
        org.mockito.internal.MockitoCore $r0;
        org.mockito.stubbing.LenientStubber $r1;

        $r0 = <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE>;

        $r1 = virtualinvoke $r0.<org.mockito.internal.MockitoCore: org.mockito.stubbing.LenientStubber lenient()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.mockito.internal.MockitoCore $r0;
        org.mockito.Answers $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = new org.mockito.internal.MockitoCore;

        specialinvoke $r0.<org.mockito.internal.MockitoCore: void <init>()>();

        <org.mockito.Mockito: org.mockito.internal.MockitoCore MOCKITO_CORE> = $r0;

        $r1 = <org.mockito.Answers: org.mockito.Answers RETURNS_DEFAULTS>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_DEFAULTS> = $r1;

        $r2 = <org.mockito.Answers: org.mockito.Answers RETURNS_SMART_NULLS>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_SMART_NULLS> = $r2;

        $r3 = <org.mockito.Answers: org.mockito.Answers RETURNS_MOCKS>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_MOCKS> = $r3;

        $r4 = <org.mockito.Answers: org.mockito.Answers RETURNS_DEEP_STUBS>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_DEEP_STUBS> = $r4;

        $r5 = <org.mockito.Answers: org.mockito.Answers CALLS_REAL_METHODS>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer CALLS_REAL_METHODS> = $r5;

        $r6 = <org.mockito.Answers: org.mockito.Answers RETURNS_SELF>;

        <org.mockito.Mockito: org.mockito.stubbing.Answer RETURNS_SELF> = $r6;

        return;
    }
}
