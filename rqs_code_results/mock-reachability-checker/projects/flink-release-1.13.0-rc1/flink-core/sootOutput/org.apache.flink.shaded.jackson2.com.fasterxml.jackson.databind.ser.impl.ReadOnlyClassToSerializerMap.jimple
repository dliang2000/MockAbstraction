public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap extends java.lang.Object
{
    private final org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets;
    private final int _size;
    private final int _mask;

    public void <init>(java.util.Map)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        java.util.Map r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket $r9, $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        i0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int findSize(int)>($i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _size> = i0;

        $i3 = i0 - 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask> = $i3;

        r2 = newarray (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket)[i0];

        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey) $r8;

        $i4 = virtualinvoke r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>();

        $i5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask>;

        i1 = $i4 & $i5;

        $r9 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket;

        $r10 = r2[i1];

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer) $r11;

        specialinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer)>($r10, r5, $r12);

        r2[i1] = $r9;

        goto label1;

     label2:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets> = r2;

        return;
    }

    private static final int findSize(int)
    {
        int i0, i1, $i2, $i3, i4;

        i0 := @parameter0: int;

        if i0 > 64 goto label1;

        $i3 = i0 + i0;

        goto label2;

     label1:
        $i2 = i0 >> 2;

        $i3 = i0 + $i2;

     label2:
        i1 = $i3;

        i4 = 8;

     label3:
        if i4 >= i1 goto label4;

        i4 = i4 + i4;

        goto label3;

     label4:
        return i4;
    }

    public static org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)
    {
        java.util.HashMap r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap $r1;

        r0 := @parameter0: java.util.HashMap;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: void <init>(java.util.Map)>(r0);

        return $r1;
    }

    public int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _size>;

        return $i0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket $r3, r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets>;

        $i0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: int typedHash(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask>;

        $i2 = $i0 & $i1;

        r6 = $r2[$i2];

        if r6 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesTyped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r5;

     label2:
        $r3 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket next>;

        r6 = $r3;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesTyped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        if $z1 == 0 goto label2;

        $r4 = $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r4;

     label3:
        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket $r3, r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets>;

        $i0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: int typedHash(java.lang.Class)>(r1);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask>;

        $i2 = $i0 & $i1;

        r6 = $r2[$i2];

        if r6 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesTyped(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r5;

     label2:
        $r3 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket next>;

        r6 = $r3;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesTyped(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

        $r4 = $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r4;

     label3:
        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket $r3, r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets>;

        $i0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: int untypedHash(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask>;

        $i2 = $i0 & $i1;

        r6 = $r2[$i2];

        if r6 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r5;

     label2:
        $r3 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket next>;

        r6 = $r3;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JavaType)>(r1);

        if $z1 == 0 goto label2;

        $r4 = $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r4;

     label3:
        return null;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap r0;
        java.lang.Class r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket $r3, r6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer $r4, $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket[] _buckets>;

        $i0 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TypeKey: int untypedHash(java.lang.Class)>(r1);

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: int _mask>;

        $i2 = $i0 & $i1;

        r6 = $r2[$i2];

        if r6 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(java.lang.Class)>(r1);

        if $z0 == 0 goto label2;

        $r5 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r5;

     label2:
        $r3 = r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket next>;

        r6 = $r3;

        if $r3 == null goto label3;

        $z1 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: boolean matchesUntyped(java.lang.Class)>(r1);

        if $z1 == 0 goto label2;

        $r4 = $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.JsonSerializer value>;

        return $r4;

     label3:
        return null;
    }
}
