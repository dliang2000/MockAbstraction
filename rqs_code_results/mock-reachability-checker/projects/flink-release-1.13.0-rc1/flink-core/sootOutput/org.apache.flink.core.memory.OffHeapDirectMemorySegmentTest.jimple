public class org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest extends org.apache.flink.core.memory.MemorySegmentTestBase
{

    public void <init>(int)
    {
        org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest r0;
        int i0;

        r0 := @this: org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void <init>(int)>(i0);

        return;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int)
    {
        org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest r0;
        int i0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int)>(i0);

        return $r1;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int, java.lang.Object)
    {
        org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest r0;
        int i0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment $r2;

        r0 := @this: org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateUnpooledOffHeapMemory(int,java.lang.Object)>(i0, r1);

        return $r2;
    }

    public void testHeapSegmentSpecifics()
    {
        org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest r0;
        org.apache.flink.core.memory.MemorySegment r1;
        java.nio.ByteBuffer r2, r6;
        boolean $z0, $z1;
        int $i1, $i3, $i5, $i7, $i9;
        long $l2, $l4, $l6, $l8, $l10;
        java.lang.IllegalStateException $r4;

        r0 := @this: org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest;

        r1 = virtualinvoke r0.<org.apache.flink.core.memory.OffHeapDirectMemorySegmentTest: org.apache.flink.core.memory.MemorySegment createSegment(int)>(411);

        $z0 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean isFreed()>();

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        $z1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: boolean isOffHeap()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $i1 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: int size()>();

        $l2 = (long) $i1;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(411L, $l2);

     label1:
        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: byte[] getArray()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        r6 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(1, 2);

        r2 = virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(3, 4);

        staticinvoke <org.junit.Assert: void assertNotSame(java.lang.Object,java.lang.Object)>(r6, r2);

        $i3 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();

        $l4 = (long) $i3;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(1L, $l4);

        $i5 = virtualinvoke r6.<java.nio.ByteBuffer: int limit()>();

        $l6 = (long) $i5;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l6);

        $i7 = virtualinvoke r2.<java.nio.ByteBuffer: int position()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(3L, $l8);

        $i9 = virtualinvoke r2.<java.nio.ByteBuffer: int limit()>();

        $l10 = (long) $i9;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>(7L, $l10);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }
}
