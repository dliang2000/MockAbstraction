public class javassist.bytecode.analysis.SubroutineScanner extends java.lang.Object implements javassist.bytecode.Opcode
{
    private javassist.bytecode.analysis.Subroutine[] subroutines;
    java.util.Map subTable;
    java.util.Set done;

    public void <init>()
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        java.util.HashMap $r1;
        java.util.HashSet $r2;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Map subTable> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Set done> = $r2;

        return;
    }

    public javassist.bytecode.analysis.Subroutine[] scan(javassist.bytecode.MethodInfo) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.CodeIterator r3;
        javassist.bytecode.ExceptionTable r4;
        int i0, $i1, $i2, $i3, i4;
        javassist.bytecode.analysis.Subroutine[] $r5, $r8, $r9;
        java.util.Map $r6;
        java.util.Set $r7;
        javassist.bytecode.analysis.Subroutine $r10;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        r3 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

        $i1 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getCodeLength()>();

        $r5 = newarray (javassist.bytecode.analysis.Subroutine)[$i1];

        r0.<javassist.bytecode.analysis.SubroutineScanner: javassist.bytecode.analysis.Subroutine[] subroutines> = $r5;

        $r6 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Map subTable>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Set done>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(0, r3, null);

        r4 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        i4 = 0;

     label1:
        $i2 = virtualinvoke r4.<javassist.bytecode.ExceptionTable: int size()>();

        if i4 >= $i2 goto label2;

        i0 = virtualinvoke r4.<javassist.bytecode.ExceptionTable: int handlerPc(int)>(i4);

        $r9 = r0.<javassist.bytecode.analysis.SubroutineScanner: javassist.bytecode.analysis.Subroutine[] subroutines>;

        $i3 = virtualinvoke r4.<javassist.bytecode.ExceptionTable: int startPc(int)>(i4);

        $r10 = $r9[$i3];

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i0, r3, $r10);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = r0.<javassist.bytecode.analysis.SubroutineScanner: javassist.bytecode.analysis.Subroutine[] subroutines>;

        return $r8;
    }

    private void scan(int, javassist.bytecode.CodeIterator, javassist.bytecode.analysis.Subroutine) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.analysis.Subroutine r2;
        int i0, i1, i2;
        java.util.Set $r3, $r5;
        java.lang.Integer $r4, $r6;
        boolean $z1, $z3, $z4, $z5;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        i1 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.bytecode.analysis.Subroutine;

        $r3 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Set done>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r5 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Set done>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int lookAhead()>();

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i1);

     label2:
        i2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int next()>();

        $z3 = specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: boolean scanOp(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i2, r1, r2);

        if $z3 == 0 goto label3;

        $z4 = virtualinvoke r1.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z4 == 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        if $z5 != 0 goto label2;

        virtualinvoke r1.<javassist.bytecode.CodeIterator: void move(int)>(i0);

        return;
    }

    private boolean scanOp(int, javassist.bytecode.CodeIterator, javassist.bytecode.analysis.Subroutine) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        int i0, i1, i2;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.analysis.Subroutine r2, $r7, r11;
        javassist.bytecode.analysis.Subroutine[] $r3;
        boolean $z0, $z1, $z2;
        java.util.Map $r4, $r8;
        java.lang.Integer $r5, $r9;
        java.lang.Object $r6;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.bytecode.analysis.Subroutine;

        $r3 = r0.<javassist.bytecode.analysis.SubroutineScanner: javassist.bytecode.analysis.Subroutine[] subroutines>;

        $r3[i0] = r2;

        i1 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int byteAt(int)>(i0);

        if i1 != 170 goto label1;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scanTableSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i0, r1, r2);

        return 0;

     label1:
        if i1 != 171 goto label2;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scanLookupSwitch(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i0, r1, r2);

        return 0;

     label2:
        $z0 = staticinvoke <javassist.bytecode.analysis.Util: boolean isReturn(int)>(i1);

        if $z0 != 0 goto label3;

        if i1 == 169 goto label3;

        if i1 != 191 goto label4;

     label3:
        return 0;

     label4:
        $z1 = staticinvoke <javassist.bytecode.analysis.Util: boolean isJumpInstruction(int)>(i1);

        if $z1 == 0 goto label9;

        i2 = staticinvoke <javassist.bytecode.analysis.Util: int getJumpTarget(int,javassist.bytecode.CodeIterator)>(i0, r1);

        if i1 == 168 goto label5;

        if i1 != 201 goto label8;

     label5:
        $r4 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Map subTable>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r11 = (javassist.bytecode.analysis.Subroutine) $r6;

        if r11 != null goto label6;

        $r7 = new javassist.bytecode.analysis.Subroutine;

        specialinvoke $r7.<javassist.bytecode.analysis.Subroutine: void <init>(int,int)>(i2, i0);

        $r8 = r0.<javassist.bytecode.analysis.SubroutineScanner: java.util.Map subTable>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i2, r1, $r7);

        goto label7;

     label6:
        virtualinvoke r11.<javassist.bytecode.analysis.Subroutine: void addCaller(int)>(i0);

     label7:
        goto label9;

     label8:
        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i2, r1, r2);

        $z2 = staticinvoke <javassist.bytecode.analysis.Util: boolean isGoto(int)>(i1);

        if $z2 == 0 goto label9;

        return 0;

     label9:
        return 1;
    }

    private void scanLookupSwitch(int, javassist.bytecode.CodeIterator, javassist.bytecode.analysis.Subroutine) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.analysis.Subroutine r2;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.bytecode.analysis.Subroutine;

        $i4 = i0 & -4;

        i9 = $i4 + 4;

        $i5 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i9);

        $i6 = i0 + $i5;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>($i6, r1, r2);

        i10 = i9 + 4;

        i1 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i10);

        $i7 = i1 * 8;

        i11 = i10 + 4;

        i2 = $i7 + i11;

        i12 = i11 + 4;

     label1:
        if i12 >= i2 goto label2;

        $i8 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i12);

        i3 = $i8 + i0;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i3, r1, r2);

        i12 = i12 + 8;

        goto label1;

     label2:
        return;
    }

    private void scanTableSwitch(int, javassist.bytecode.CodeIterator, javassist.bytecode.analysis.Subroutine) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.analysis.SubroutineScanner r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        javassist.bytecode.CodeIterator r1;
        javassist.bytecode.analysis.Subroutine r2;

        r0 := @this: javassist.bytecode.analysis.SubroutineScanner;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.bytecode.analysis.Subroutine;

        $i5 = i0 & -4;

        i12 = $i5 + 4;

        $i6 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i12);

        $i7 = i0 + $i6;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>($i7, r1, r2);

        i13 = i12 + 4;

        i1 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i13);

        i14 = i13 + 4;

        i2 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i14);

        $i8 = i2 - i1;

        $i9 = $i8 + 1;

        $i10 = $i9 * 4;

        i15 = i14 + 4;

        i3 = $i10 + i15;

     label1:
        if i15 >= i3 goto label2;

        $i11 = virtualinvoke r1.<javassist.bytecode.CodeIterator: int s32bitAt(int)>(i15);

        i4 = $i11 + i0;

        specialinvoke r0.<javassist.bytecode.analysis.SubroutineScanner: void scan(int,javassist.bytecode.CodeIterator,javassist.bytecode.analysis.Subroutine)>(i4, r1, r2);

        i15 = i15 + 4;

        goto label1;

     label2:
        return;
    }
}
