public class org.apache.flink.core.fs.FSDataInputStreamWrapper extends org.apache.flink.core.fs.FSDataInputStream implements org.apache.flink.util.WrappingProxy
{
    protected final org.apache.flink.core.fs.FSDataInputStream inputStream;

    public void <init>(org.apache.flink.core.fs.FSDataInputStream)
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        r1 := @parameter0: org.apache.flink.core.fs.FSDataInputStream;

        specialinvoke r0.<org.apache.flink.core.fs.FSDataInputStream: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.core.fs.FSDataInputStream) $r2;

        r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream> = $r3;

        return;
    }

    public void seek(long) throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        long l0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: void seek(long)>(l0);

        return;
    }

    public long getPos() throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        long $l0;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $l0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: long getPos()>();

        return $l0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $i0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: int read()>();

        return $i0;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        byte[] r1;
        org.apache.flink.core.fs.FSDataInputStream $r2;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $i0 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[])>(r1);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        byte[] r1;
        int i0, i1, $i2;
        org.apache.flink.core.fs.FSDataInputStream $r2;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $i2 = virtualinvoke $r2.<org.apache.flink.core.fs.FSDataInputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        long l0, $l1;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $l1 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: long skip(long)>(l0);

        return $l1;
    }

    public int available() throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $i0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: void close()>();

        return;
    }

    public void mark(int)
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        int i0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: void mark(int)>(i0);

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: void reset()>();

        return;
    }

    public boolean markSupported()
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        $z0 = virtualinvoke $r1.<org.apache.flink.core.fs.FSDataInputStream: boolean markSupported()>();

        return $z0;
    }

    public org.apache.flink.core.fs.FSDataInputStream getWrappedDelegate()
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream inputStream>;

        return $r1;
    }

    public volatile java.lang.Object getWrappedDelegate()
    {
        org.apache.flink.core.fs.FSDataInputStreamWrapper r0;
        org.apache.flink.core.fs.FSDataInputStream $r1;

        r0 := @this: org.apache.flink.core.fs.FSDataInputStreamWrapper;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.FSDataInputStreamWrapper: org.apache.flink.core.fs.FSDataInputStream getWrappedDelegate()>();

        return $r1;
    }
}
