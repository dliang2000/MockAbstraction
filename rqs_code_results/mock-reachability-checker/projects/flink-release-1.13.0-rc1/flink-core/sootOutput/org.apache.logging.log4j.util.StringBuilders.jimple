public final class org.apache.logging.log4j.util.StringBuilders extends java.lang.Object
{

    private void <init>()
    {
        org.apache.logging.log4j.util.StringBuilders r0;

        r0 := @this: org.apache.logging.log4j.util.StringBuilders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.StringBuilder appendDqValue(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r2, $r3, $r4;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return $r4;
    }

    public static java.lang.StringBuilder appendKeyDqValue(java.lang.StringBuilder, java.util.Map$Entry)
    {
        java.lang.StringBuilder r0, $r5;
        java.util.Map$Entry r1;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: java.lang.StringBuilder appendKeyDqValue(java.lang.StringBuilder,java.lang.String,java.lang.Object)>(r0, $r3, $r4);

        return $r5;
    }

    public static java.lang.StringBuilder appendKeyDqValue(java.lang.StringBuilder, java.lang.String, java.lang.Object)
    {
        java.lang.StringBuilder r0, $r3, $r4, $r5, $r6, $r7;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r3 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        return $r7;
    }

    public static void appendValue(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: boolean appendSpecificTypes(java.lang.StringBuilder,java.lang.Object)>(r0, r1);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

     label1:
        return;
    }

    public static boolean appendSpecificTypes(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.Byte $r4;
        byte $b0;
        java.lang.Float $r6;
        float $f0;
        java.lang.Short $r8;
        short $s1;
        java.lang.Character $r10;
        char $c2;
        java.lang.Boolean $r12;
        java.lang.Double $r14;
        double $d0;
        java.lang.Long $r16;
        long $l3;
        java.lang.Integer $r18;
        int $i4;
        java.lang.CharSequence $r20;
        org.apache.logging.log4j.util.StringBuilderFormattable $r22;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label01;

        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label02;

     label01:
        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        goto label13;

     label02:
        $z1 = r1 instanceof org.apache.logging.log4j.util.StringBuilderFormattable;

        if $z1 == 0 goto label03;

        $r22 = (org.apache.logging.log4j.util.StringBuilderFormattable) r1;

        interfaceinvoke $r22.<org.apache.logging.log4j.util.StringBuilderFormattable: void formatTo(java.lang.StringBuilder)>(r0);

        goto label13;

     label03:
        $z2 = r1 instanceof java.lang.CharSequence;

        if $z2 == 0 goto label04;

        $r20 = (java.lang.CharSequence) r1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r20);

        goto label13;

     label04:
        $z3 = r1 instanceof java.lang.Integer;

        if $z3 == 0 goto label05;

        $r18 = (java.lang.Integer) r1;

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        goto label13;

     label05:
        $z4 = r1 instanceof java.lang.Long;

        if $z4 == 0 goto label06;

        $r16 = (java.lang.Long) r1;

        $l3 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        goto label13;

     label06:
        $z5 = r1 instanceof java.lang.Double;

        if $z5 == 0 goto label07;

        $r14 = (java.lang.Double) r1;

        $d0 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        goto label13;

     label07:
        $z6 = r1 instanceof java.lang.Boolean;

        if $z6 == 0 goto label08;

        $r12 = (java.lang.Boolean) r1;

        $z11 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        goto label13;

     label08:
        $z7 = r1 instanceof java.lang.Character;

        if $z7 == 0 goto label09;

        $r10 = (java.lang.Character) r1;

        $c2 = virtualinvoke $r10.<java.lang.Character: char charValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label13;

     label09:
        $z8 = r1 instanceof java.lang.Short;

        if $z8 == 0 goto label10;

        $r8 = (java.lang.Short) r1;

        $s1 = virtualinvoke $r8.<java.lang.Short: short shortValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        goto label13;

     label10:
        $z9 = r1 instanceof java.lang.Float;

        if $z9 == 0 goto label11;

        $r6 = (java.lang.Float) r1;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        goto label13;

     label11:
        $z10 = r1 instanceof java.lang.Byte;

        if $z10 == 0 goto label12;

        $r4 = (java.lang.Byte) r1;

        $b0 = virtualinvoke $r4.<java.lang.Byte: byte byteValue()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        goto label13;

     label12:
        return 0;

     label13:
        return 1;
    }

    public static boolean equals(java.lang.CharSequence, int, int, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, i2, i3, $i4, $i6, i8;
        char $c5, $c7;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.CharSequence;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        if i1 != i3 goto label4;

        i8 = 0;

     label1:
        if i8 >= i3 goto label3;

        $i4 = i8 + i0;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $i6 = i8 + i2;

        $c7 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i6);

        if $c5 == $c7 goto label2;

        return 0;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static boolean equalsIgnoreCase(java.lang.CharSequence, int, int, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, i2, i3, $i4, $i7, i10;
        char $c5, $c6, $c8, $c9;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.CharSequence;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        if i1 != i3 goto label4;

        i10 = 0;

     label1:
        if i10 >= i3 goto label3;

        $i4 = i10 + i0;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        $c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        $i7 = i10 + i2;

        $c8 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i7);

        $c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c8);

        if $c6 == $c9 goto label2;

        return 0;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static void trimToMaxSize(java.lang.StringBuilder, int)
    {
        java.lang.StringBuilder r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.StringBuilder: int capacity()>();

        if $i1 <= i0 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(i0);

        virtualinvoke r0.<java.lang.StringBuilder: void trimToSize()>();

     label1:
        return;
    }

    public static void escapeJson(java.lang.StringBuilder, int)
    {
        java.lang.StringBuilder r0;
        int i0, $i2, $i3, $i4, $i5, $i6, i12, i13, i15, i16, i17, i18, i19, i20, i21, i22;
        char c1, $c7, $c8, $c9, $c10, $c11, c14;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i12 = 0;

        i13 = i0;

     label01:
        $i2 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if i13 >= $i2 goto label05;

        c14 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i13);

        lookupswitch(c14)
        {
            case 8: goto label02;
            case 9: goto label02;
            case 10: goto label02;
            case 12: goto label02;
            case 13: goto label02;
            case 34: goto label02;
            case 92: goto label02;
            default: goto label03;
        };

     label02:
        i12 = i12 + 1;

        goto label04;

     label03:
        $z1 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c14);

        if $z1 == 0 goto label04;

        i12 = i12 + 5;

     label04:
        i13 = i13 + 1;

        goto label01;

     label05:
        $i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        i15 = $i3 - 1;

        $i4 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 + i12;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>($i5);

        $i6 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        i16 = $i6 - 1;

        i17 = i15;

     label06:
        if i16 <= i17 goto label16;

        c1 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i17);

        lookupswitch(c1)
        {
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label10;
            case 12: goto label09;
            case 13: goto label11;
            case 34: goto label12;
            case 92: goto label12;
            default: goto label13;
        };

     label07:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, 98);

        goto label15;

     label08:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, 116);

        goto label15;

     label09:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, 102);

        goto label15;

     label10:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, 110);

        goto label15;

     label11:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, 114);

        goto label15;

     label12:
        i16 = staticinvoke <org.apache.logging.log4j.util.StringBuilders: int escapeAndDecrement(java.lang.StringBuilder,int,char)>(r0, i16, c1);

        goto label15;

     label13:
        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(c1);

        if $z0 == 0 goto label14;

        i18 = i16 + -1;

        $c7 = c1 & 15;

        $c8 = staticinvoke <org.apache.logging.log4j.util.Chars: char getUpperCaseHex(int)>($c7);

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i16, $c8);

        i19 = i18 + -1;

        $c9 = c1 & 240;

        $c10 = $c9 >> 4;

        $c11 = staticinvoke <org.apache.logging.log4j.util.Chars: char getUpperCaseHex(int)>($c10);

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i18, $c11);

        i20 = i19 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i19, 48);

        i21 = i20 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i20, 48);

        i22 = i21 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i21, 117);

        i16 = i22 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i22, 92);

        goto label15;

     label14:
        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i16, c1);

        i16 = i16 + -1;

     label15:
        i17 = i17 + -1;

        goto label06;

     label16:
        return;
    }

    private static int escapeAndDecrement(java.lang.StringBuilder, int, char)
    {
        java.lang.StringBuilder r0;
        char c0;
        int i1, i2, i3;

        r0 := @parameter0: java.lang.StringBuilder;

        i1 := @parameter1: int;

        c0 := @parameter2: char;

        i2 = i1 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i1, c0);

        i3 = i2 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i2, 92);

        return i3;
    }

    public static void escapeXml(java.lang.StringBuilder, int)
    {
        java.lang.StringBuilder r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33;
        char c1, c10;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        i8 = 0;

        i9 = i0;

     label01:
        $i2 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if i9 >= $i2 goto label06;

        c10 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i9);

        lookupswitch(c10)
        {
            case 34: goto label04;
            case 38: goto label02;
            case 39: goto label04;
            case 60: goto label03;
            case 62: goto label03;
            default: goto label05;
        };

     label02:
        i8 = i8 + 4;

        goto label05;

     label03:
        i8 = i8 + 3;

        goto label05;

     label04:
        i8 = i8 + 5;

     label05:
        i9 = i9 + 1;

        goto label01;

     label06:
        $i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        i11 = $i3 - 1;

        $i4 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 + i8;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>($i5);

        $i6 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        i12 = $i6 - 1;

        i13 = i11;

     label07:
        if i12 <= i13 goto label15;

        c1 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i13);

        lookupswitch(c1)
        {
            case 34: goto label11;
            case 38: goto label08;
            case 39: goto label12;
            case 60: goto label09;
            case 62: goto label10;
            default: goto label13;
        };

     label08:
        i14 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, 59);

        i15 = i14 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i14, 112);

        i16 = i15 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i15, 109);

        i17 = i16 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i16, 97);

        i12 = i17 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i17, 38);

        goto label14;

     label09:
        i18 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, 59);

        i19 = i18 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i18, 116);

        i20 = i19 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i19, 108);

        i12 = i20 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i20, 38);

        goto label14;

     label10:
        i21 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, 59);

        i22 = i21 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i21, 116);

        i23 = i22 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i22, 103);

        i12 = i23 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i23, 38);

        goto label14;

     label11:
        i24 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, 59);

        i25 = i24 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i24, 116);

        i26 = i25 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i25, 111);

        i27 = i26 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i26, 117);

        i28 = i27 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i27, 113);

        i12 = i28 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i28, 38);

        goto label14;

     label12:
        i29 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, 59);

        i30 = i29 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i29, 115);

        i31 = i30 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i30, 111);

        i32 = i31 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i31, 112);

        i33 = i32 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i32, 97);

        i12 = i33 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i33, 38);

        goto label14;

     label13:
        $i7 = i12;

        i12 = i12 + -1;

        virtualinvoke r0.<java.lang.StringBuilder: void setCharAt(int,char)>($i7, c1);

     label14:
        i13 = i13 + -1;

        goto label07;

     label15:
        return;
    }
}
