public class org.apache.flink.core.memory.DataInputDeserializer extends java.lang.Object implements org.apache.flink.core.memory.DataInputView, java.io.Serializable
{
    private static final byte[] EMPTY;
    private static final long serialVersionUID;
    private byte[] buffer;
    private int end;
    private int position;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long BASE_OFFSET;
    private static final boolean LITTLE_ENDIAN;

    public void <init>()
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.apache.flink.core.memory.DataInputDeserializer: byte[] EMPTY>;

        virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBuffer(byte[])>($r1);

        return;
    }

    public void <init>(byte[])
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBufferInternal(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBuffer(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void <init>(java.nio.ByteBuffer)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        java.nio.ByteBuffer r1;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBuffer(java.nio.ByteBuffer)>(r1);

        return;
    }

    public void setBuffer(java.nio.ByteBuffer)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        java.nio.ByteBuffer r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte[] $r2, $r3, $r4, $r7;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer> = $r7;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i4 = $i2 + $i3;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i4;

        $i5 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i7 = $i5 + $i6;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int end> = $i7;

        goto label4;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isReadOnly()>();

        if $z2 == 0 goto label3;

     label2:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = newarray (byte)[$i0];

        r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer> = $r2;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = 0;

        $r3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i1 = lengthof $r3;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int end> = $i1;

        $r4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r4);

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The given buffer is neither an array-backed heap ByteBuffer, nor a direct ByteBuffer.");

        throw $r6;

     label4:
        return;
    }

    public void setBuffer(byte[], int, int)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = i0 + i1;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid bounds.");

        throw $r2;

     label2:
        specialinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBufferInternal(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void setBuffer(byte[])
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void setBufferInternal(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    private void setBufferInternal(byte[], int, int)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int i0, i1, $i2;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer> = r1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = i0;

        $i2 = i0 + i1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int end> = $i2;

        return;
    }

    public void releaseArrays()
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer> = null;

        return;
    }

    public int available()
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i1 >= $i0 goto label1;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i4 = $i3 - $i2;

        return $i4;

     label1:
        return 0;
    }

    public boolean readBoolean() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i1 >= $i0 goto label3;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i3;

        $b4 = $r2[$i2];

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public byte readByte() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i3;

        $b4 = $r2[$i2];

        return $b4;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public char readChar() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b5, $b10;
        short $s6, $s11;
        char $c13;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i4;

        $b5 = $r2[$i3];

        $s6 = $b5 & 255;

        $i9 = $s6 << 8;

        $r3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i7 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i8;

        $b10 = $r3[$i7];

        $s11 = $b10 & 255;

        $i12 = $i9 | $s11;

        $c13 = (char) $i12;

        return $c13;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public double readDouble() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        long $l0;
        double $d0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $l0 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public float readFloat() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0;
        float $f0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }

    public void readFully(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void readFully(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.io.EOFException $r4;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label3;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 > $i3 goto label2;

        $i6 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i5 = $i4 - i1;

        if $i6 > $i5 goto label1;

        $r5 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i7 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r1, i0, i1);

        $i8 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i9 = $i8 + i1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i9;

        goto label4;

     label1:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length may not be negative.");

        throw $r2;

     label4:
        return;
    }

    public int readInt() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, i10;
        java.io.EOFException $r1;
        long $l5, $l6, $l7;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        if $i0 < 0 goto label2;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i2 = $i1 - 3;

        if $i3 >= $i2 goto label2;

        $r3 = <org.apache.flink.core.memory.DataInputDeserializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $l6 = <org.apache.flink.core.memory.DataInputDeserializer: long BASE_OFFSET>;

        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        i10 = virtualinvoke $r3.<sun.misc.Unsafe: int getInt(java.lang.Object,long)>($r2, $l7);

        $z0 = <org.apache.flink.core.memory.DataInputDeserializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        i10 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i10);

     label1:
        $i8 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i9 = $i8 + 4;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i9;

        return i10;

     label2:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        java.lang.String r2;
        java.lang.StringBuilder $r3;
        char $c7, c10;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i2 >= $i1 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i3 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int readUnsignedByte()>();

        c10 = (char) $i3;

     label1:
        $i5 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i5 >= $i4 goto label2;

        if c10 == 10 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c10);

        $i9 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int readUnsignedByte()>();

        c10 = (char) $i9;

        goto label1;

     label2:
        i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i0 <= 0 goto label3;

        $i6 = i0 - 1;

        $c7 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>($i6);

        if $c7 != 13 goto label3;

        $i8 = i0 - 1;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>($i8);

     label3:
        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        return r2;

     label4:
        return null;
    }

    public long readLong() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9;
        java.io.EOFException $r1;
        long $l5, $l6, $l7, l10;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        if $i0 < 0 goto label2;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i2 = $i1 - 7;

        if $i3 >= $i2 goto label2;

        $r3 = <org.apache.flink.core.memory.DataInputDeserializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $l6 = <org.apache.flink.core.memory.DataInputDeserializer: long BASE_OFFSET>;

        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        l10 = virtualinvoke $r3.<sun.misc.Unsafe: long getLong(java.lang.Object,long)>($r2, $l7);

        $z0 = <org.apache.flink.core.memory.DataInputDeserializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        l10 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l10);

     label1:
        $i8 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i9 = $i8 + 8;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i9;

        return l10;

     label2:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public short readShort() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i13;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b6, $b11;
        short $s7, $s12, $s14;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        if $i0 < 0 goto label1;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i2 = $i1 - 1;

        if $i3 >= $i2 goto label1;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i5;

        $b6 = $r2[$i4];

        $s7 = $b6 & 255;

        $i10 = $s7 << 8;

        $r3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i8 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i9;

        $b11 = $r3[$i8];

        $s12 = $b11 & 255;

        $i13 = $i10 | $s12;

        $s14 = (short) $i13;

        return $s14;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public java.lang.String readUTF() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int i0, $i4, $i5, $i7, $i9, $i12, $i13, $i15, $i16, $i18, $i20, $i23, $i24, $i26, $i29, i31, i32;
        byte[] r1;
        char[] r2;
        byte b1, $b2, $b11, $b14, $b22, $b28, b35, b36;
        java.lang.String $r3, $r8, $r14, $r20;
        short $s3, $s6, $s8, $s10, $s19, $s21, s33, s34;
        java.io.UTFDataFormatException $r4, $r9, $r10, $r15, $r16;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r17, $r18, $r19;
        char $c17, $c25, $c27, $c30;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        i0 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int readUnsignedShort()>();

        r1 = newarray (byte)[i0];

        r2 = newarray (char)[i0];

        i31 = 0;

        i32 = 0;

        virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: void readFully(byte[],int,int)>(r1, 0, i0);

     label01:
        if i31 >= i0 goto label03;

        $b28 = r1[i31];

        s33 = $b28 & 255;

        if s33 <= 127 goto label02;

        goto label03;

     label02:
        i31 = i31 + 1;

        $i29 = i32;

        i32 = i32 + 1;

        $c30 = (char) s33;

        r2[$i29] = $c30;

        goto label01;

     label03:
        if i31 >= i0 goto label13;

        $b2 = r1[i31];

        s34 = $b2 & 255;

        $s3 = s34 >> 4;

        tableswitch($s3)
        {
            case 0: goto label04;
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label12;
            case 9: goto label12;
            case 10: goto label12;
            case 11: goto label12;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label08;
            default: goto label12;
        };

     label04:
        i31 = i31 + 1;

        $i26 = i32;

        i32 = i32 + 1;

        $c27 = (char) s34;

        r2[$i26] = $c27;

        goto label03;

     label05:
        i31 = i31 + 2;

        if i31 <= i0 goto label06;

        $r15 = new java.io.UTFDataFormatException;

        specialinvoke $r15.<java.io.UTFDataFormatException: void <init>(java.lang.String)>("malformed input: partial character at end");

        throw $r15;

     label06:
        $i18 = i31 - 1;

        b35 = r1[$i18];

        $s19 = b35 & 192;

        if $s19 == 128 goto label07;

        $r10 = new java.io.UTFDataFormatException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label07:
        $i20 = i32;

        i32 = i32 + 1;

        $s21 = s34 & 31;

        $i23 = $s21 << 6;

        $b22 = b35 & 63;

        $i24 = $i23 | $b22;

        $c25 = (char) $i24;

        r2[$i20] = $c25;

        goto label03;

     label08:
        i31 = i31 + 3;

        if i31 <= i0 goto label09;

        $r9 = new java.io.UTFDataFormatException;

        specialinvoke $r9.<java.io.UTFDataFormatException: void <init>(java.lang.String)>("malformed input: partial character at end");

        throw $r9;

     label09:
        $i4 = i31 - 2;

        b36 = r1[$i4];

        $i5 = i31 - 1;

        b1 = r1[$i5];

        $s6 = b36 & 192;

        if $s6 != 128 goto label10;

        $s8 = b1 & 192;

        if $s8 == 128 goto label11;

     label10:
        $r4 = new java.io.UTFDataFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $i7 = i31 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label11:
        $i9 = i32;

        i32 = i32 + 1;

        $s10 = s34 & 15;

        $i13 = $s10 << 12;

        $b11 = b36 & 63;

        $i12 = $b11 << 6;

        $i15 = $i13 | $i12;

        $b14 = b1 & 63;

        $i16 = $i15 | $b14;

        $c17 = (char) $i16;

        r2[$i9] = $c17;

        goto label03;

     label12:
        $r16 = new java.io.UTFDataFormatException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label13:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i32);

        return $r3;
    }

    public int readUnsignedByte() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;
        short $s5;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i1 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i3;

        $b4 = $r2[$i2];

        $s5 = $b4 & 255;

        return $s5;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public int readUnsignedShort() throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b5, $b10;
        short $s6, $s11;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i4;

        $b5 = $r2[$i3];

        $s6 = $b5 & 255;

        $i9 = $s6 << 8;

        $r3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i7 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i8;

        $b10 = $r3[$i7];

        $s11 = $b10 & 255;

        $i12 = $i9 | $s11;

        return $i12;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public int skipBytes(int)
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        i8 := @parameter0: int;

        $i2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i1 = $i0 - i8;

        if $i2 > $i1 goto label1;

        $i6 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i7 = $i6 + i8;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i7;

        return i8;

     label1:
        $i4 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i3 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        i9 = $i4 - $i3;

        $i5 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i5;

        return i9;
    }

    public void skipBytesToRead(int) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int i0, i1;
        java.io.EOFException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int skipBytes(int)>(i0);

        if i1 >= i0 goto label1;

        $r1 = new java.io.EOFException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not skip ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IndexOutOfBoundsException $r3, $r4, $r5;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r5;

     label1:
        if i1 >= 0 goto label2;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Length cannot be negative.");

        throw $r4;

     label2:
        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if $i4 >= i1 goto label3;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Byte array does not provide enough space to store requested data.");

        throw $r3;

     label3:
        $i6 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i5 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        if $i6 < $i5 goto label4;

        return -1;

     label4:
        $i8 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int end>;

        $i7 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i9 = $i8 - $i7;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i1);

        $r2 = r0.<org.apache.flink.core.memory.DataInputDeserializer: byte[] buffer>;

        $i10 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i10, r1, i0, i2);

        $i11 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        $i12 = $i11 + i2;

        r0.<org.apache.flink.core.memory.DataInputDeserializer: int position> = $i12;

        return i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.flink.core.memory.DataInputDeserializer: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int getPosition()
    {
        org.apache.flink.core.memory.DataInputDeserializer r0;
        int $i0;

        r0 := @this: org.apache.flink.core.memory.DataInputDeserializer;

        $i0 = r0.<org.apache.flink.core.memory.DataInputDeserializer: int position>;

        return $i0;
    }

    static void <clinit>()
    {
        byte[] $r0;
        sun.misc.Unsafe $r1, $r2;
        int $i0;
        long $l1;
        java.nio.ByteOrder $r3, $r4;
        boolean $z0;

        <org.apache.flink.core.memory.DataInputDeserializer: long serialVersionUID> = 1L;

        $r0 = newarray (byte)[0];

        <org.apache.flink.core.memory.DataInputDeserializer: byte[] EMPTY> = $r0;

        $r1 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        <org.apache.flink.core.memory.DataInputDeserializer: sun.misc.Unsafe UNSAFE> = $r1;

        $r2 = <org.apache.flink.core.memory.DataInputDeserializer: sun.misc.Unsafe UNSAFE>;

        $i0 = virtualinvoke $r2.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        $l1 = (long) $i0;

        <org.apache.flink.core.memory.DataInputDeserializer: long BASE_OFFSET> = $l1;

        $r4 = <org.apache.flink.core.memory.MemoryUtils: java.nio.ByteOrder NATIVE_BYTE_ORDER>;

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r4 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <org.apache.flink.core.memory.DataInputDeserializer: boolean LITTLE_ENDIAN> = $z0;

        return;
    }
}
