public final class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser extends org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase
{
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec;
    protected final boolean _hasNativeTypeIds;
    protected final boolean _hasNativeObjectIds;
    protected final boolean _hasNativeIds;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment;
    protected int _segmentPtr;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext;
    protected boolean _closed;
    protected transient org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder;
    protected org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation _location;

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec, boolean, boolean)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r2;
        boolean z0, z1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext)>(r1, r2, z0, z1, null);

        return;
    }

    public void <init>(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec, boolean, boolean, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r2;
        boolean z0, z1, $z2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r3;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment;

        r2 := @parameter1: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext;

        specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>(int)>(0);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation _location> = null;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment> = r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = -1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec> = r2;

        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext createRootContext(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext)>(r3);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = $r4;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeTypeIds> = z0;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeObjectIds> = z1;

        if z0 != 0 goto label1;

        if z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeIds> = $z2;

        return;
    }

    public void setLocation(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation _location> = r1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec getCodec()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec>;

        return $r1;
    }

    public void setCodec(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.ObjectCodec _codec> = r1;

        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version version()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.cfg.PackageVersion: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Version VERSION>;

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken peekNextToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        boolean $z0;
        int $i0, i1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment r1, $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        i1 = $i0 + 1;

        if i1 < 16 goto label4;

        i1 = 0;

        if r1 != null goto label2;

        $r2 = null;

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment next()>();

     label3:
        r1 = $r2;

     label4:
        if r1 != null goto label5;

        $r3 = null;

        goto label6;

     label5:
        $r3 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken type(int)>(i1);

     label6:
        return $r3;
    }

    public void close() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed> = 1;

     label1:
        return;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment $r3, $r4, $r24, $r25, $r26;
        int $i0, $i1, $i2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r28;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r14, $r15, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.String $r27;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label01;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        if $r3 != null goto label02;

     label01:
        return null;

     label02:
        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = $i1;

        if $i1 < 16 goto label03;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = 0;

        $r24 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $r25 = virtualinvoke $r24.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment next()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment> = $r25;

        $r26 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        if $r26 != null goto label03;

        return null;

     label03:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $i2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        $r5 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken type(int)>($i2);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r5;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r7 != $r6 goto label06;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label04;

        $r27 = (java.lang.String) r1;

        goto label05;

     label04:
        $r27 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label05:
        $r23 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        virtualinvoke $r23.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>($r27);

        goto label11;

     label06:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r9 != $r8 goto label07;

        $r21 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        $r22 = virtualinvoke $r21.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext createChildObjectContext()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = $r22;

        goto label11;

     label07:
        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r11 != $r10 goto label08;

        $r19 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        $r20 = virtualinvoke $r19.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext createChildArrayContext()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = $r20;

        goto label11;

     label08:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r12 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_OBJECT>;

        if $r13 == $r12 goto label09;

        $r17 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r16 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        if $r17 != $r16 goto label10;

     label09:
        $r14 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        $r15 = virtualinvoke $r14.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext parentOrCopy()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext> = $r15;

        goto label11;

     label10:
        $r18 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        virtualinvoke $r18.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: void updateForValue()>();

     label11:
        $r28 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        return $r28;
    }

    public java.lang.String nextFieldName() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment $r3, $r6, $r10;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r4, $r5, $r7, $r8, $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r11;
        java.lang.String $r12, $r13;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        i0 = $i1 + 1;

        if i0 >= 16 goto label5;

        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $r7 = virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken type(int)>(i0);

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r7 != $r8 goto label5;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr> = i0;

        $r9 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken> = $r9;

        $r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        r1 = virtualinvoke $r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object get(int)>(i0);

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r12 = (java.lang.String) r1;

        goto label4;

     label3:
        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label4:
        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        virtualinvoke $r11.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>($r12);

        return $r12;

     label5:
        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r4 != $r5 goto label6;

        $r13 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String currentName()>();

        goto label7;

     label6:
        $r13 = null;

     label7:
        return $r13;
    }

    public boolean isClosed()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _closed>;

        return $z0;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParsingContext()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getTokenLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>();

        return $r1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation $r1, $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation _location>;

        if $r1 != null goto label1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation NA>;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonLocation _location>;

     label2:
        return $r2;
    }

    public java.lang.String currentName()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r6, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r4, $r8;
        java.lang.String $r5, $r9;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r3 == $r2 goto label1;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r7 != $r6 goto label2;

     label1:
        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        r1 = virtualinvoke $r4.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParent()>();

        $r5 = virtualinvoke r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: java.lang.String getCurrentName()>();

        return $r5;

     label2:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        $r9 = virtualinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: java.lang.String getCurrentName()>();

        return $r9;
    }

    public java.lang.String getCurrentName()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String currentName()>();

        return $r1;
    }

    public void overrideCurrentName(java.lang.String)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.String r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r3, $r4, $r6, $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext $r5;
        java.io.IOException $r8;
        java.lang.RuntimeException $r9;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext r10;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: java.lang.String;

        r10 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext _parsingContext>;

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r4 == $r3 goto label1;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r7 != $r6 goto label2;

     label1:
        r10 = virtualinvoke r10.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonStreamContext getParent()>();

     label2:
        $z0 = r10 instanceof org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext;

        if $z0 == 0 goto label6;

     label3:
        $r5 = (org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext) r10;

        virtualinvoke $r5.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBufferReadContext: void setCurrentName(java.lang.String)>(r1);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public java.lang.String getText()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Object r1, $r11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r6, $r7, $r8, $r9, $r13;
        boolean $z0;
        java.lang.String $r4, $r5, $r12, $r14;
        int[] $r10;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 == $r2 goto label1;

        $r7 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r7 != $r6 goto label3;

     label1:
        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r5 = (java.lang.String) r1;

        return $r5;

     label2:
        $r4 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>(r1);

        return $r4;

     label3:
        $r8 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r8 != null goto label4;

        return null;

     label4:
        $r10 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $i0 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: int ordinal()>();

        $i1 = $r10[$i0];

        lookupswitch($i1)
        {
            case 7: goto label5;
            case 8: goto label5;
            default: goto label6;
        };

     label5:
        $r11 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r12 = staticinvoke <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nullOrToString(java.lang.Object)>($r11);

        return $r12;

     label6:
        $r13 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r14 = virtualinvoke $r13.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();

        return $r14;
    }

    public char[] getTextCharacters()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.String r1;
        char[] $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label2:
        return $r2;
    }

    public int getTextLength()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

     label2:
        return $i0;
    }

    public int getTextOffset()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        return 0;
    }

    public boolean hasTextCharacters()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        return 0;
    }

    public boolean isNaN()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Object r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Double r4;
        java.lang.Float r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r2 goto label8;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = r1 instanceof java.lang.Double;

        if $z0 == 0 goto label4;

        r4 = (java.lang.Double) r1;

        $z4 = virtualinvoke r4.<java.lang.Double: boolean isNaN()>();

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke r4.<java.lang.Double: boolean isInfinite()>();

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;

     label4:
        $z1 = r1 instanceof java.lang.Float;

        if $z1 == 0 goto label8;

        r5 = (java.lang.Float) r1;

        $z2 = virtualinvoke r5.<java.lang.Float: boolean isNaN()>();

        if $z2 != 0 goto label5;

        $z3 = virtualinvoke r5.<java.lang.Float: boolean isInfinite()>();

        if $z3 == 0 goto label6;

     label5:
        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        return $z7;

     label8:
        return 0;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r2, $r3;
        long $l0;
        java.math.BigInteger $r4, $r6, $r7;
        java.math.BigDecimal $r5;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label1;

        $r7 = (java.math.BigInteger) r1;

        return $r7;

     label1:
        $r2 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        if $r2 != $r3 goto label2;

        $r5 = (java.math.BigDecimal) r1;

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        return $r6;

     label2:
        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l0);

        return $r4;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0;
        int[] $r2;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r3;
        int $i0, $i1;
        java.math.BigDecimal $r4, $r6, $r7, $r8;
        java.math.BigInteger $r5;
        long $l2;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = r1 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label1;

        $r8 = (java.math.BigDecimal) r1;

        return $r8;

     label1:
        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonParser$NumberType>;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $i0 = virtualinvoke $r3.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label2;
            default: goto label4;
        };

     label2:
        $l2 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l2);

        return $r6;

     label3:
        $r4 = new java.math.BigDecimal;

        $r5 = (java.math.BigInteger) r1;

        specialinvoke $r4.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r5);

        return $r4;

     label4:
        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        return $r7;
    }

    public double getDoubleValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public float getFloatValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number $r1;
        float $f0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $f0 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public int getIntValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r2 goto label1;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r5 = (java.lang.Number) $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

     label2:
        r1 = $r5;

        $z0 = $r5 instanceof java.lang.Integer;

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _smallerThanInt(java.lang.Number)>($r5);

        if $z1 == 0 goto label4;

     label3:
        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        return $i0;

     label4:
        $i1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _convertNumberToInt(java.lang.Number)>($r5);

        return $i1;
    }

    public long getLongValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1, $r5;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3;
        boolean $z0, $z1;
        long $l0, $l1;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r2 goto label1;

        $r4 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $r5 = (java.lang.Number) $r4;

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

     label2:
        r1 = $r5;

        $z0 = $r5 instanceof java.lang.Long;

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _smallerThanLong(java.lang.Number)>($r5);

        if $z1 == 0 goto label4;

     label3:
        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        return $l0;

     label4:
        $l1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: long _convertNumberToLong(java.lang.Number)>($r5);

        return $l1;
    }

    public org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Number getNumberValue()>();

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r8 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        return $r8;

     label1:
        $z1 = r1 instanceof java.lang.Long;

        if $z1 == 0 goto label2;

        $r7 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        return $r7;

     label2:
        $z2 = r1 instanceof java.lang.Double;

        if $z2 == 0 goto label3;

        $r6 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType DOUBLE>;

        return $r6;

     label3:
        $z3 = r1 instanceof java.math.BigDecimal;

        if $z3 == 0 goto label4;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        return $r5;

     label4:
        $z4 = r1 instanceof java.math.BigInteger;

        if $z4 == 0 goto label5;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        return $r4;

     label5:
        $z5 = r1 instanceof java.lang.Float;

        if $z5 == 0 goto label6;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType FLOAT>;

        return $r3;

     label6:
        $z6 = r1 instanceof java.lang.Short;

        if $z6 == 0 goto label7;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        return $r2;

     label7:
        return null;
    }

    public final java.lang.Number getNumberValue() throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Object r1;
        java.lang.String r2, $r7, $r9;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Class $r6;
        int $i0;
        long $l1;
        java.lang.Long $r10;
        double $d0;
        java.lang.Double $r11;
        java.lang.Number $r12;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _checkIsNumber()>();

        r1 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r12 = (java.lang.Number) r1;

        return $r12;

     label1:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        r2 = (java.lang.String) r1;

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(46);

        if $i0 < 0 goto label2;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r11;

     label2:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r10;

     label3:
        if r1 != null goto label4;

        return null;

     label4:
        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: entry should be a Number, but is of type ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r3;
    }

    private final boolean _smallerThanInt(java.lang.Number)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: java.lang.Number;

        $z0 = r1 instanceof java.lang.Short;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Byte;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private final boolean _smallerThanLong(java.lang.Number)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: java.lang.Number;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Short;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Byte;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    protected int _convertNumberToInt(java.lang.Number) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        int i0, $i3, $i4, $i5, $i6, $i10, $i11;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte $b1, $b2, $b8;
        java.math.BigDecimal $r2, $r3, r7;
        java.math.BigInteger $r4, $r5, r6;
        long $l7, l9;
        double d0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: java.lang.Number;

        $z0 = r1 instanceof java.lang.Long;

        if $z0 == 0 goto label02;

        l9 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        i0 = (int) l9;

        $l7 = (long) i0;

        $b8 = $l7 cmp l9;

        if $b8 == 0 goto label01;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();

     label01:
        return i0;

     label02:
        $z1 = r1 instanceof java.math.BigInteger;

        if $z1 == 0 goto label05;

        r6 = (java.math.BigInteger) r1;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MIN_INT>;

        $i5 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r6);

        if $i5 > 0 goto label03;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MAX_INT>;

        $i6 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r6);

        if $i6 >= 0 goto label04;

     label03:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();

     label04:
        goto label13;

     label05:
        $z2 = r1 instanceof java.lang.Double;

        if $z2 != 0 goto label06;

        $z3 = r1 instanceof java.lang.Float;

        if $z3 == 0 goto label09;

     label06:
        d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $b1 = d0 cmpg -2.147483648E9;

        if $b1 < 0 goto label07;

        $b2 = d0 cmpl 2.147483647E9;

        if $b2 <= 0 goto label08;

     label07:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();

     label08:
        $i10 = (int) d0;

        return $i10;

     label09:
        $z4 = r1 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label12;

        r7 = (java.math.BigDecimal) r1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MIN_INT>;

        $i3 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r7);

        if $i3 > 0 goto label10;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MAX_INT>;

        $i4 = virtualinvoke $r3.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r7);

        if $i4 >= 0 goto label11;

     label10:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowInt()>();

     label11:
        goto label13;

     label12:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();

     label13:
        $i11 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        return $i11;
    }

    protected long _convertNumberToLong(java.lang.Number) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        java.lang.Number r1;
        boolean $z0, $z1, $z2, $z3;
        byte $b0, $b1;
        java.math.BigDecimal $r2, $r3, r7;
        int $i2, $i3, $i4, $i5;
        java.math.BigInteger $r4, $r5, r6;
        double d0;
        long $l6, $l7;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: java.lang.Number;

        $z0 = r1 instanceof java.math.BigInteger;

        if $z0 == 0 goto label03;

        r6 = (java.math.BigInteger) r1;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MIN_LONG>;

        $i4 = virtualinvoke $r4.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r6);

        if $i4 > 0 goto label01;

        $r5 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigInteger BI_MAX_LONG>;

        $i5 = virtualinvoke $r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r6);

        if $i5 >= 0 goto label02;

     label01:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();

     label02:
        goto label11;

     label03:
        $z1 = r1 instanceof java.lang.Double;

        if $z1 != 0 goto label04;

        $z2 = r1 instanceof java.lang.Float;

        if $z2 == 0 goto label07;

     label04:
        d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $b0 = d0 cmpg -9.223372036854776E18;

        if $b0 < 0 goto label05;

        $b1 = d0 cmpl 9.223372036854776E18;

        if $b1 <= 0 goto label06;

     label05:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();

     label06:
        $l6 = (long) d0;

        return $l6;

     label07:
        $z3 = r1 instanceof java.math.BigDecimal;

        if $z3 == 0 goto label10;

        r7 = (java.math.BigDecimal) r1;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MIN_LONG>;

        $i2 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r7);

        if $i2 > 0 goto label08;

        $r3 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.math.BigDecimal BD_MAX_LONG>;

        $i3 = virtualinvoke $r3.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>(r7);

        if $i3 >= 0 goto label09;

     label08:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void reportOverflowLong()>();

     label09:
        goto label11;

     label10:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();

     label11:
        $l7 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        return $l7;
    }

    public java.lang.Object getEmbeddedObject()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r2 != $r1 goto label1;

        $r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        return $r3;

     label1:
        return null;
    }

    public byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException, org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r2, $r3, $r4, $r5, $r11;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder $r6, $r8, r20;
        byte[] $r7, $r16, $r17;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;
        java.lang.String $r14, r19;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r15;
        boolean $z0;
        java.lang.Object r18;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        $r3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;

        if $r3 != $r2 goto label1;

        r18 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.Object _currentObject()>();

        $z0 = r18 instanceof byte[];

        if $z0 == 0 goto label1;

        $r16 = (byte[]) r18;

        $r17 = (byte[]) $r16;

        return $r17;

     label1:
        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r4 = <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r5 == $r4 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r11 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), cannot access as binary");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r14);

        throw $r15;

     label2:
        r19 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: java.lang.String getText()>();

        if r19 != null goto label3;

        return null;

     label3:
        r20 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder>;

        if r20 != null goto label4;

        $r8 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder;

        specialinvoke $r8.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>(int)>(100);

        r20 = $r8;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder> = $r8;

        goto label5;

     label4:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder>;

        virtualinvoke $r6.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: void reset()>();

     label5:
        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _decodeBase64(java.lang.String,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder,org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r19, r20, r1);

        $r7 = virtualinvoke r20.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();

        return $r7;
    }

    public int readBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant r1;
        java.io.OutputStream r2;
        byte[] r3;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        r1 := @parameter0: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant;

        r2 := @parameter1: java.io.OutputStream;

        r3 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: byte[] getBinaryValue(org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.Base64Variant)>(r1);

        if r3 == null goto label1;

        $i0 = lengthof r3;

        virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        $i1 = lengthof r3;

        return $i1;

     label1:
        return 0;
    }

    public boolean canReadObjectId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeObjectIds>;

        return $z0;
    }

    public boolean canReadTypeId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $z0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: boolean _hasNativeTypeIds>;

        return $z0;
    }

    public java.lang.Object getTypeId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findTypeId(int)>($i0);

        return $r2;
    }

    public java.lang.Object getObjectId()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object findObjectId(int)>($i0);

        return $r2;
    }

    protected final java.lang.Object _currentObject()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        int $i0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment _segment>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: int _segmentPtr>;

        $r2 = virtualinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Segment: java.lang.Object get(int)>($i0);

        return $r2;
    }

    protected final void _checkIsNumber() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken $r1, $r4, $r9;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r7;
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $z0 = virtualinvoke $r9.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r4 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonToken _currToken>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, cannot use numeric value accessors");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r7);

        throw $r8;

     label2:
        return;
    }

    protected void _handleEOF() throws org.apache.flink.shaded.jackson2.com.fasterxml.jackson.core.JsonParseException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser r0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.TokenBuffer$Parser: void _throwInternal()>();

        return;
    }
}
