public class org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{
    private final java.util.Random rnd;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;
        java.util.Random $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>(long)>(346283764872L);

        r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: java.util.Random rnd> = $r1;

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializer: void <init>()>();

        return $r1;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        return class "[B";
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        return -1;
    }

    protected byte[][] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;
        byte[][] $r1;
        byte[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        $r1 = newarray (byte[])[11];

        $r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[0] = $r2;

        $r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[1] = $r3;

        $r4 = newarray (byte)[0];

        $r1[2] = $r4;

        $r5 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[3] = $r5;

        $r6 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[4] = $r6;

        $r7 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[5] = $r7;

        $r8 = newarray (byte)[0];

        $r1[6] = $r8;

        $r9 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[7] = $r9;

        $r10 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[8] = $r10;

        $r11 = specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[] randomByteArray()>();

        $r1[9] = $r11;

        $r12 = newarray (byte)[0];

        $r1[10] = $r12;

        return $r1;
    }

    private final byte[] randomByteArray()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;
        int i0, $i1, i3;
        byte[] r1;
        java.util.Random $r2, $r3;
        byte $b2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        $r2 = r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: java.util.Random rnd>;

        i0 = virtualinvoke $r2.<java.util.Random: int nextInt(int)>(1048576);

        r1 = newarray (byte)[i0];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: java.util.Random rnd>;

        $i1 = virtualinvoke $r3.<java.util.Random: int nextInt()>();

        $b2 = (byte) $i1;

        r1[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest r0;
        byte[][] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.BytePrimitiveArraySerializerTest: byte[][] getTestData()>();

        return $r1;
    }
}
