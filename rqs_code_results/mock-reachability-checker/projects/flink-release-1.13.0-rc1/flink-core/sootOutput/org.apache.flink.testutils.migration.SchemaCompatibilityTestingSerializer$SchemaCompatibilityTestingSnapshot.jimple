public final class org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private final java.lang.String tokenForEqualityChecks;
    private final java.util.function.Function resolver;

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)>(null);

        return $r0;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializer(java.lang.String)
    {
        java.lang.String r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r1;
        java.util.function.Function $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r2 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializer_0__119: java.util.function.Function bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: void <init>(java.lang.String,java.util.function.Function)>(r0, $r2);

        return $r1;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration(java.lang.String)>(null);

        return $r0;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterReconfiguration(java.lang.String)
    {
        java.lang.String r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r2;
        java.util.function.Function $r3, $r5;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r3 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.util.function.Function access$000()>();

        specialinvoke $r2.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String,java.util.function.Function)>(r0, $r3);

        $r4 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r5 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterReconfiguration_1__106: java.util.function.Function bootstrap$(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)>($r2);

        specialinvoke $r4.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: void <init>(java.lang.String,java.util.function.Function)>(r0, $r5);

        return $r4;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration(java.lang.String)>(null);

        return $r0;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsCompatibleWithNextSerializerAfterMigration(java.lang.String)
    {
        java.lang.String r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r1;
        java.util.function.Function $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r2 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsCompatibleWithNextSerializerAfterMigration_2__105: java.util.function.Function bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: void <init>(java.lang.String,java.util.function.Function)>(r0, $r2);

        return $r1;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r0;

        $r0 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer(java.lang.String)>(null);

        return $r0;
    }

    public static org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot thatIsIncompatibleWithTheNextSerializer(java.lang.String)
    {
        java.lang.String r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot $r1;
        java.util.function.Function $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r2 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot$lambda_thatIsIncompatibleWithTheNextSerializer_3__104: java.util.function.Function bootstrap$()>();

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: void <init>(java.lang.String,java.util.function.Function)>(r0, $r2);

        return $r1;
    }

    void <init>(java.lang.String, java.util.function.Function)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        java.lang.String r1;
        java.util.function.Function r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.function.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.lang.String tokenForEqualityChecks> = r1;

        r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.util.function.Function resolver> = r2;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r2;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;
        java.util.function.Function $r5;
        java.lang.Object $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7, $r8, $r9;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        if $z0 != 0 goto label1;

        $r9 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r9;

     label1:
        r2 = (org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer) r1;

        $r3 = staticinvoke <org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: java.lang.String access$100(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer)>(r2);

        $r4 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.lang.String tokenForEqualityChecks>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 != 0 goto label2;

        $r8 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r8;

     label2:
        $r5 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.util.function.Function resolver>;

        $r6 = interfaceinvoke $r5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility) $r6;

        return $r7;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot r0;
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer $r1;
        java.util.function.Function $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot;

        $r1 = new org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        $r3 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.lang.String tokenForEqualityChecks>;

        $r2 = r0.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer$SchemaCompatibilityTestingSnapshot: java.util.function.Function resolver>;

        specialinvoke $r1.<org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer: void <init>(java.lang.String,java.util.function.Function)>($r3, $r2);

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$thatIsIncompatibleWithTheNextSerializer$3(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$thatIsCompatibleWithNextSerializerAfterMigration$2(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        return $r1;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$thatIsCompatibleWithNextSerializerAfterReconfiguration$1(org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r2;

        r0 := @parameter0: org.apache.flink.testutils.migration.SchemaCompatibilityTestingSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>(r0);

        return $r2;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility lambda$thatIsCompatibleWithNextSerializer$0(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r1 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r1;
    }
}
