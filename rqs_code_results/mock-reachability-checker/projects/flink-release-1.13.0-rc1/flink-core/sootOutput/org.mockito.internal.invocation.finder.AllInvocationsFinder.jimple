public class org.mockito.internal.invocation.finder.AllInvocationsFinder extends java.lang.Object
{

    private void <init>()
    {
        org.mockito.internal.invocation.finder.AllInvocationsFinder r0;

        r0 := @this: org.mockito.internal.invocation.finder.AllInvocationsFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List find(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.Collection r4;
        java.util.TreeSet $r5;
        org.mockito.internal.invocation.InvocationComparator $r6;
        boolean $z0;
        java.util.LinkedList $r7;
        org.mockito.internal.util.DefaultMockingDetails $r8;

        r0 := @parameter0: java.lang.Iterable;

        $r5 = new java.util.TreeSet;

        $r6 = new org.mockito.internal.invocation.InvocationComparator;

        specialinvoke $r6.<org.mockito.internal.invocation.InvocationComparator: void <init>()>();

        specialinvoke $r5.<java.util.TreeSet: void <init>(java.util.Comparator)>($r6);

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = new org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke $r8.<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>(r3);

        r4 = virtualinvoke $r8.<org.mockito.internal.util.DefaultMockingDetails: java.util.Collection getInvocations()>();

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r4);

        goto label1;

     label2:
        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>(java.util.Collection)>($r5);

        return $r7;
    }

    public static java.util.Set findStubbings(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.Collection r4;
        java.util.TreeSet $r5;
        org.mockito.internal.stubbing.StubbingComparator $r6;
        boolean $z0;
        org.mockito.internal.util.DefaultMockingDetails $r7;

        r0 := @parameter0: java.lang.Iterable;

        $r5 = new java.util.TreeSet;

        $r6 = new org.mockito.internal.stubbing.StubbingComparator;

        specialinvoke $r6.<org.mockito.internal.stubbing.StubbingComparator: void <init>()>();

        specialinvoke $r5.<java.util.TreeSet: void <init>(java.util.Comparator)>($r6);

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = new org.mockito.internal.util.DefaultMockingDetails;

        specialinvoke $r7.<org.mockito.internal.util.DefaultMockingDetails: void <init>(java.lang.Object)>(r3);

        r4 = virtualinvoke $r7.<org.mockito.internal.util.DefaultMockingDetails: java.util.Collection getStubbings()>();

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>(r4);

        goto label1;

     label2:
        return $r5;
    }
}
