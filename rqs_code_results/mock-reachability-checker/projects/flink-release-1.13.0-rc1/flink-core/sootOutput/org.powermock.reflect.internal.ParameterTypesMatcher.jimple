class org.powermock.reflect.internal.ParameterTypesMatcher extends java.lang.Object
{
    private boolean isVarArgs;
    private java.lang.Class[] expectedParameterTypes;
    private java.lang.Class[] actualParameterTypes;

    public transient void <init>(boolean, java.lang.Class[], java.lang.Class[])
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        boolean z0;
        java.lang.Class[] r1, r2;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean isVarArgs> = z0;

        r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes> = r1;

        r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] actualParameterTypes> = r2;

        return;
    }

    private boolean isRemainParamsVarArgs(int, java.lang.Class)
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        int i0, $i1, $i2;
        java.lang.Class r1, $r3, $r5;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r2, $r4;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Class;

        $z0 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean isVarArgs>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        $i1 = lengthof $r2;

        $i2 = $i1 - 1;

        if i0 != $i2 goto label1;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r4 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        $r5 = $r4[i0];

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private boolean isParameterTypesNotMatch(java.lang.Class, java.lang.Class)
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        java.lang.Class r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        if r1 != null goto label1;

        return 0;

     label1:
        if r2 != null goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean match()
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        boolean $z0, $z1;
        java.lang.Boolean $r1;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        specialinvoke r0.<org.powermock.reflect.internal.ParameterTypesMatcher: void assertParametersTypesNotNull()>();

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean isParametersLengthMatch()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = specialinvoke r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Boolean isParametersMatch()>();

        $z1 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;
    }

    private boolean isParametersLengthMatch()
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        java.lang.Class[] $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        $r1 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        $i1 = lengthof $r1;

        $r2 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] actualParameterTypes>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void assertParametersTypesNotNull()
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        java.lang.Class[] $r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        $r1 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        if $r1 == null goto label1;

        $r3 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] actualParameterTypes>;

        if $r3 != null goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameter types cannot be null");

        throw $r2;

     label2:
        return;
    }

    private java.lang.Boolean isParametersMatch()
    {
        org.powermock.reflect.internal.ParameterTypesMatcher r0;
        java.lang.Class r1, r2;
        java.lang.Class[] $r3, $r5, $r6;
        int $i0, i1;
        java.lang.Boolean $r4, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: org.powermock.reflect.internal.ParameterTypesMatcher;

        i1 = 0;

     label1:
        $r3 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r5 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] actualParameterTypes>;

        r1 = $r5[i1];

        $z0 = specialinvoke r0.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean isRemainParamsVarArgs(int,java.lang.Class)>(i1, r1);

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r8;

     label2:
        $r6 = r0.<org.powermock.reflect.internal.ParameterTypesMatcher: java.lang.Class[] expectedParameterTypes>;

        r2 = $r6[i1];

        $z1 = specialinvoke r0.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean isParameterTypesNotMatch(java.lang.Class,java.lang.Class)>(r1, r2);

        if $z1 == 0 goto label3;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r7;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r4;
    }
}
