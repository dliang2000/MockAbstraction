public class javassist.bytecode.StackMapTable$Writer extends java.lang.Object
{
    java.io.ByteArrayOutputStream output;
    int numOfEntries;

    public void <init>(int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0;
        java.io.ByteArrayOutputStream $r1, $r2, $r3;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output> = $r1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = 0;

        $r2 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(0);

        $r3 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>(0);

        return;
    }

    public byte[] toByteArray()
    {
        javassist.bytecode.StackMapTable$Writer r0;
        byte[] r1;
        java.io.ByteArrayOutputStream $r2;
        int $i0;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        $r2 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        r1 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i0, r1, 0);

        return r1;
    }

    public javassist.bytecode.StackMapTable toStackMapTable(javassist.bytecode.ConstPool)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.StackMapTable $r2;
        byte[] $r3;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        $r2 = new javassist.bytecode.StackMapTable;

        $r3 = virtualinvoke r0.<javassist.bytecode.StackMapTable$Writer: byte[] toByteArray()>();

        specialinvoke $r2.<javassist.bytecode.StackMapTable: void <init>(javassist.bytecode.ConstPool,byte[])>(r1, $r3);

        return $r2;
    }

    public void sameFrame(int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r1, $r2;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        $i1 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        $i2 = $i1 + 1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = $i2;

        if i0 >= 64 goto label1;

        $r2 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(251);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i0);

     label2:
        return;
    }

    public void sameLocals(int, int, int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.io.ByteArrayOutputStream $r1, $r2;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        $i4 = $i3 + 1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = $i4;

        if i0 >= 64 goto label1;

        $r2 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        $i5 = i0 + 64;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>($i5);

        goto label2;

     label1:
        $r1 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(247);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i0);

     label2:
        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void writeTypeInfo(int,int)>(i1, i2);

        return;
    }

    public void chopFrame(int, int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, i1, $i2, $i3, $i4;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        $i3 = $i2 + 1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = $i3;

        $r1 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        $i4 = 251 - i1;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i4);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i0);

        return;
    }

    public void appendFrame(int, int[], int[])
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        int[] r1, r2;
        java.io.ByteArrayOutputStream $r3;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        $i2 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        $i3 = $i2 + 1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = $i3;

        i1 = lengthof r1;

        $r3 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        $i4 = i1 + 251;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>($i4);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i0);

        i7 = 0;

     label1:
        if i7 >= i1 goto label2;

        $i6 = r1[i7];

        $i5 = r2[i7];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void writeTypeInfo(int,int)>($i6, $i5);

        i7 = i7 + 1;

        goto label1;

     label2:
        return;
    }

    public void fullFrame(int, int[], int[], int[], int[])
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        int[] r1, r2, r3, r4;
        java.io.ByteArrayOutputStream $r5;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        r3 := @parameter3: int[];

        r4 := @parameter4: int[];

        $i1 = r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries>;

        $i2 = $i1 + 1;

        r0.<javassist.bytecode.StackMapTable$Writer: int numOfEntries> = $i2;

        $r5 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(int)>(255);

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i0);

        i7 = lengthof r1;

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i7);

        i8 = 0;

     label1:
        if i8 >= i7 goto label2;

        $i6 = r1[i8];

        $i5 = r2[i8];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void writeTypeInfo(int,int)>($i6, $i5);

        i8 = i8 + 1;

        goto label1;

     label2:
        i9 = lengthof r3;

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i9);

        i10 = 0;

     label3:
        if i10 >= i9 goto label4;

        $i4 = r3[i10];

        $i3 = r4[i10];

        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void writeTypeInfo(int,int)>($i4, $i3);

        i10 = i10 + 1;

        goto label3;

     label4:
        return;
    }

    private void writeTypeInfo(int, int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, i1;
        java.io.ByteArrayOutputStream $r1;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0);

        if i0 == 7 goto label1;

        if i0 != 8 goto label2;

     label1:
        specialinvoke r0.<javassist.bytecode.StackMapTable$Writer: void write16(int)>(i1);

     label2:
        return;
    }

    private void write16(int)
    {
        javassist.bytecode.StackMapTable$Writer r0;
        int i0, $i1, $i2, $i3;
        java.io.ByteArrayOutputStream $r1, $r2;

        r0 := @this: javassist.bytecode.StackMapTable$Writer;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        $i1 = i0 >>> 8;

        $i2 = $i1 & 255;

        virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>($i2);

        $r2 = r0.<javassist.bytecode.StackMapTable$Writer: java.io.ByteArrayOutputStream output>;

        $i3 = i0 & 255;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(int)>($i3);

        return;
    }
}
