public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest extends java.lang.Object
{
    public org.junit.rules.ExpectedException thrown;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        org.junit.rules.ExpectedException $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.junit.rules.ExpectedException: org.junit.rules.ExpectedException none()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: org.junit.rules.ExpectedException thrown> = $r1;

        return;
    }

    public void testMigrationStrategyForRemovedAvroDependency() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r5;
        org.apache.flink.api.common.ExecutionConfig $r6;
        java.lang.Class $r7;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r8;
        java.lang.Thread $r9;
        java.lang.ClassLoader $r10;
        java.lang.Throwable $r11, $r12, $r13, r16;
        java.io.InputStream r15;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r19;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClass;", $r6);

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r15 = virtualinvoke $r7.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/kryo-serializer-flink1.3-snapshot");

        r16 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>(r15);

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r8, $r10, $r5);

     label02:
        if r15 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r15.<java.io.InputStream: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r16 = $r13;

        throw $r13;

     label05:
        $r12 := @caughtexception;

     label06:
        if r15 == null goto label11;

        if r16 == null goto label10;

     label07:
        virtualinvoke r15.<java.io.InputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        virtualinvoke r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label11;

     label10:
        virtualinvoke r15.<java.io.InputStream: void close()>();

     label11:
        throw $r12;

     label12:
        r19 = interfaceinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r5);

        $z0 = virtualinvoke r19.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void testDeserializingKryoSerializerWithoutAvro() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r2;
        java.io.InputStream r3;
        java.lang.Class $r6, $r9;
        java.lang.ClassLoader $r7, $r10;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r8;
        java.lang.Throwable $r11, $r12, $r14, r15;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r3 = virtualinvoke $r7.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("serialized-kryo-serializer-1.3");

        r15 = null;

     label01:
        $r8 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r8.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>(r3);

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializer tryReadSerializer(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r8, $r10);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r3.<java.io.InputStream: void close()>();

        goto label12;

     label04:
        $r12 := @caughtexception;

        r15 = $r12;

        throw $r12;

     label05:
        $r14 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r15 == null goto label10;

     label07:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        virtualinvoke r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label11;

     label10:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label11:
        throw $r14;

     label12:
        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r2);

        $z0 = r2 instanceof org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public void testMigrationStrategyWithDifferentKryoType() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        byte[] r2;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r6, $r24;
        org.apache.flink.api.common.ExecutionConfig $r7, $r25;
        java.io.ByteArrayOutputStream $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r16, r20, r29;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r18, r33;
        java.io.ByteArrayInputStream $r27;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r30;
        java.lang.Thread $r31;
        java.lang.ClassLoader $r32;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r36;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r6 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r7 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r7.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassA;", $r7);

        r18 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r8 = new java.io.ByteArrayOutputStream;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>()>();

        r20 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r9, r18, $r6);

        r2 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r20 = $r13;

        throw $r13;

     label05:
        $r11 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r20 == null goto label10;

     label07:
        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

        goto label11;

     label10:
        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r11;

     label12:
        $r24 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r25 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r25.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r24.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassB;", $r25);

        $r27 = new java.io.ByteArrayInputStream;

        specialinvoke $r27.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r29 = null;

     label13:
        $r30 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r30.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r27);

        $r31 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r32 = virtualinvoke $r31.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r33 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r30, $r32, $r24);

     label14:
        if $r27 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r14 := @caughtexception;

        r29 = $r14;

        throw $r14;

     label17:
        $r12 := @caughtexception;

     label18:
        if $r27 == null goto label23;

        if r29 == null goto label22;

     label19:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r16 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label23;

     label22:
        virtualinvoke $r27.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r12;

     label24:
        r36 = interfaceinvoke r33.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r24);

        $z0 = virtualinvoke r36.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testMigrationOfTypeWithAvroType() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        org.apache.flink.api.common.ExecutionConfig $r8;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r9;
        java.io.FileInputStream $r10;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r11;
        org.junit.rules.ExpectedException $r12;
        java.lang.Throwable $r14, $r15, $r16, $r18, $r19, $r20, r22, r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r9 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$1FakeAvroClass;", $r8);

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.lang.String)>("src/test/resources/type-with-avro-serialized-using-kryo");

        r22 = null;

     label01:
        $r11 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r10);

        r24 = null;

     label02:
        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest: org.junit.rules.ExpectedException thrown>;

        virtualinvoke $r12.<org.junit.rules.ExpectedException: void expectMessage(java.lang.String)>("Could not find required Avro dependency");

        virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r11);

     label03:
        if $r11 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label13;

     label05:
        $r15 := @caughtexception;

        r24 = $r15;

        throw $r15;

     label06:
        $r14 := @caughtexception;

     label07:
        if $r11 == null goto label12;

        if r24 == null goto label11;

     label08:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        virtualinvoke r24.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r18);

        goto label12;

     label11:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label12:
        throw $r14;

     label13:
        if $r10 == null goto label23;

        goto label14;

     label14:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

        goto label23;

     label15:
        $r20 := @caughtexception;

        r22 = $r20;

        throw $r20;

     label16:
        $r19 := @caughtexception;

     label17:
        if $r10 == null goto label22;

        if r22 == null goto label21;

     label18:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r16 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label22;

     label21:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

     label22:
        throw $r19;

     label23:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    public void testMigrationWithTypeDevoidOfAvroTypes() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        org.apache.flink.api.common.ExecutionConfig $r8;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r9;
        java.io.FileInputStream $r10;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r11;
        java.lang.Object $r12, $r14, $r18, $r22;
        java.util.List $r13, $r17, $r21;
        java.lang.Integer $r15, $r19, $r23;
        org.hamcrest.Matcher $r16, $r20, $r24;
        java.lang.Throwable $r25, $r27, $r28, $r29, $r30, $r32, r33, r35;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest$1FakeClass r36;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r8 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r8.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r9 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$1FakeClass;", $r8);

        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.lang.String)>("src/test/resources/type-without-avro-serialized-using-kryo");

        r33 = null;

     label01:
        $r11 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r10);

        r35 = null;

     label02:
        $r12 = virtualinvoke $r9.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>($r11);

        r36 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest$1FakeClass) $r12;

        $r13 = r36.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest$1FakeClass: java.util.List array>;

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r16 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r15);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r14, $r16);

        $r17 = r36.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest$1FakeClass: java.util.List array>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(1);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(20);

        $r20 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r19);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r18, $r20);

        $r21 = r36.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest$1FakeClass: java.util.List array>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(2);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r24 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r23);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r22, $r24);

     label03:
        if $r11 == null goto label13;

        goto label04;

     label04:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

        goto label13;

     label05:
        $r25 := @caughtexception;

        r35 = $r25;

        throw $r25;

     label06:
        $r29 := @caughtexception;

     label07:
        if $r11 == null goto label12;

        if r35 == null goto label11;

     label08:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label09:
        goto label12;

     label10:
        $r27 := @caughtexception;

        virtualinvoke r35.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r27);

        goto label12;

     label11:
        virtualinvoke $r11.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void close()>();

     label12:
        throw $r29;

     label13:
        if $r10 == null goto label23;

        goto label14;

     label14:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

        goto label23;

     label15:
        $r28 := @caughtexception;

        r33 = $r28;

        throw $r28;

     label16:
        $r30 := @caughtexception;

     label17:
        if $r10 == null goto label22;

        if r33 == null goto label21;

     label18:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r32 := @caughtexception;

        virtualinvoke r33.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r32);

        goto label22;

     label21:
        virtualinvoke $r10.<java.io.FileInputStream: void close()>();

     label22:
        throw $r30;

     label23:
        return;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
        catch java.lang.Throwable from label01 to label13 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label15 to label17 with label16;
    }

    public void testMigrationStrategyForDifferentRegistrationOrder() throws java.lang.Exception
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest r0;
        int i0, i1, i2, $i4, $i7, $i10;
        byte[] r1;
        org.apache.flink.api.common.ExecutionConfig $r6, $r31;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r7, $r33, r46;
        com.esotericsoftware.kryo.Kryo $r8, $r10, $r12, $r47, $r49, $r51;
        com.esotericsoftware.kryo.Registration $r9, $r11, $r13, $r48, $r50, $r52;
        java.io.ByteArrayOutputStream $r14;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r15;
        java.lang.Throwable $r16, $r17, $r20, $r21, $r22, $r23, r28, r37;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r26, r41;
        java.io.ByteArrayInputStream $r35;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r38;
        java.lang.Thread $r39;
        java.lang.ClassLoader $r40;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r44;
        boolean $z0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r45;
        long $l3, $l5, $l6, $l8, $l9, $l11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerCompatibilityTest;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassA;");

        virtualinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassB;");

        $r7 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClass;", $r6);

        $r8 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r9 = virtualinvoke $r8.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClass;");

        i0 = virtualinvoke $r9.<com.esotericsoftware.kryo.Registration: int getId()>();

        $r10 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r11 = virtualinvoke $r10.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassA;");

        i1 = virtualinvoke $r11.<com.esotericsoftware.kryo.Registration: int getId()>();

        $r12 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r13 = virtualinvoke $r12.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassB;");

        i2 = virtualinvoke $r13.<com.esotericsoftware.kryo.Registration: int getId()>();

        r26 = virtualinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r14 = new java.io.ByteArrayOutputStream;

        specialinvoke $r14.<java.io.ByteArrayOutputStream: void <init>()>();

        r28 = null;

     label01:
        $r15 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r15.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r14);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: void writeSerializerSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializer)>($r15, r26, $r7);

        r1 = virtualinvoke $r14.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label02:
        if $r14 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

        goto label12;

     label04:
        $r23 := @caughtexception;

        r28 = $r23;

        throw $r23;

     label05:
        $r20 := @caughtexception;

     label06:
        if $r14 == null goto label11;

        if r28 == null goto label10;

     label07:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r21 := @caughtexception;

        virtualinvoke r28.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r21);

        goto label11;

     label10:
        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        throw $r20;

     label12:
        $r31 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r31.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r31.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassB;");

        virtualinvoke $r31.<org.apache.flink.api.common.ExecutionConfig: void registerKryoType(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassA;");

        $r33 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r33.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClass;", $r31);

        $r35 = new java.io.ByteArrayInputStream;

        specialinvoke $r35.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        r37 = null;

     label13:
        $r38 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r38.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r35);

        $r39 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r40 = virtualinvoke $r39.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r41 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshotSerializationUtil: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readSerializerSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader,org.apache.flink.api.common.typeutils.TypeSerializer)>($r38, $r40, $r33);

     label14:
        if $r35 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r35.<java.io.ByteArrayInputStream: void close()>();

        goto label24;

     label16:
        $r22 := @caughtexception;

        r37 = $r22;

        throw $r22;

     label17:
        $r17 := @caughtexception;

     label18:
        if $r35 == null goto label23;

        if r37 == null goto label22;

     label19:
        virtualinvoke $r35.<java.io.ByteArrayInputStream: void close()>();

     label20:
        goto label23;

     label21:
        $r16 := @caughtexception;

        virtualinvoke r37.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label23;

     label22:
        virtualinvoke $r35.<java.io.ByteArrayInputStream: void close()>();

     label23:
        throw $r17;

     label24:
        r44 = interfaceinvoke r41.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r33);

        $z0 = virtualinvoke r44.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r45 = virtualinvoke r44.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r46 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer) $r45;

        $l3 = (long) i0;

        $r47 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r48 = virtualinvoke $r47.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClass;");

        $i4 = virtualinvoke $r48.<com.esotericsoftware.kryo.Registration: int getId()>();

        $l5 = (long) $i4;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l3, $l5);

        $l6 = (long) i1;

        $r49 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r50 = virtualinvoke $r49.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassA;");

        $i7 = virtualinvoke $r50.<com.esotericsoftware.kryo.Registration: int getId()>();

        $l8 = (long) $i7;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l6, $l8);

        $l9 = (long) i2;

        $r51 = virtualinvoke r46.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryo()>();

        $r52 = virtualinvoke $r51.<com.esotericsoftware.kryo.Kryo: com.esotericsoftware.kryo.Registration getRegistration(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializerCompatibilityTest$TestClassB;");

        $i10 = virtualinvoke $r52.<com.esotericsoftware.kryo.Registration: int getId()>();

        $l11 = (long) $i10;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l9, $l11);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }
}
