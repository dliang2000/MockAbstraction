public class org.apache.flink.core.io.VersionedIOWriteableTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.core.io.VersionedIOWriteableTest r0;

        r0 := @this: org.apache.flink.core.io.VersionedIOWriteableTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testReadSameVersion() throws java.lang.Exception
    {
        org.apache.flink.core.io.VersionedIOWriteableTest r0;
        byte[] r2;
        org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable $r7, $r23;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r16, $r17, r20, r27;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r25;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r28;
        java.lang.String $r31;

        r0 := @this: org.apache.flink.core.io.VersionedIOWriteableTest;

        $r7 = new org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable;

        specialinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void <init>(int,java.lang.String)>(1, "test");

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r20 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        r2 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r12 := @caughtexception;

        r20 = $r12;

        throw $r12;

     label05:
        $r14 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r20 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r14;

     label12:
        $r23 = new org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable;

        specialinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void <init>(int)>(1);

        $r25 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r27 = null;

     label13:
        $r28 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r28.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r25);

        virtualinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void read(org.apache.flink.core.memory.DataInputView)>($r28);

     label14:
        if $r25 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label24;

     label16:
        $r13 := @caughtexception;

        r27 = $r13;

        throw $r13;

     label17:
        $r17 := @caughtexception;

     label18:
        if $r25 == null goto label23;

        if r27 == null goto label22;

     label19:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label20:
        goto label23;

     label21:
        $r11 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label23;

     label22:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        throw $r17;

     label24:
        $r31 = virtualinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: java.lang.String getData()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("test", $r31);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReadCompatibleVersion() throws java.lang.Exception
    {
        org.apache.flink.core.io.VersionedIOWriteableTest r0;
        byte[] r2;
        org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable $r7;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.Throwable $r10, $r11, $r14, $r15, $r16, $r17, r20, r27;
        org.apache.flink.core.io.VersionedIOWriteableTest$1 $r23;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r25;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r28;
        java.lang.String $r31;

        r0 := @this: org.apache.flink.core.io.VersionedIOWriteableTest;

        $r7 = new org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable;

        specialinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void <init>(int,java.lang.String)>(1, "test");

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r20 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        r2 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r14 := @caughtexception;

        r20 = $r14;

        throw $r14;

     label05:
        $r15 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r20 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r15;

     label12:
        $r23 = new org.apache.flink.core.io.VersionedIOWriteableTest$1;

        specialinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$1: void <init>(org.apache.flink.core.io.VersionedIOWriteableTest,int)>(r0, 2);

        $r25 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r27 = null;

     label13:
        $r28 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r28.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r25);

        virtualinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void read(org.apache.flink.core.memory.DataInputView)>($r28);

     label14:
        if $r25 == null goto label24;

        goto label15;

     label15:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label24;

     label16:
        $r16 := @caughtexception;

        r27 = $r16;

        throw $r16;

     label17:
        $r10 := @caughtexception;

     label18:
        if $r25 == null goto label23;

        if r27 == null goto label22;

     label19:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label20:
        goto label23;

     label21:
        $r11 := @caughtexception;

        virtualinvoke r27.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

        goto label23;

     label22:
        virtualinvoke $r25.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label23:
        throw $r10;

     label24:
        $r31 = virtualinvoke $r23.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: java.lang.String getData()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("test", $r31);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label16 to label18 with label17;
    }

    public void testReadMismatchVersion() throws java.lang.Exception
    {
        org.apache.flink.core.io.VersionedIOWriteableTest r0;
        byte[] r2;
        org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable $r7, $r25;
        org.apache.flink.core.memory.ByteArrayOutputStreamWithPos $r8;
        org.apache.flink.core.memory.DataOutputViewStreamWrapper $r9;
        java.lang.String $r10;
        java.lang.Throwable $r11, $r13, $r14, $r15, $r17, $r19, r22, r29;
        org.apache.flink.core.io.VersionMismatchException $r16;
        org.apache.flink.core.memory.ByteArrayInputStreamWithPos $r27;
        org.apache.flink.core.memory.DataInputViewStreamWrapper $r30;

        r0 := @this: org.apache.flink.core.io.VersionedIOWriteableTest;

        $r7 = new org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable;

        specialinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void <init>(int,java.lang.String)>(1, "test");

        $r8 = new org.apache.flink.core.memory.ByteArrayOutputStreamWithPos;

        specialinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void <init>()>();

        r22 = null;

     label01:
        $r9 = new org.apache.flink.core.memory.DataOutputViewStreamWrapper;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputViewStreamWrapper: void <init>(java.io.OutputStream)>($r8);

        virtualinvoke $r7.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void write(org.apache.flink.core.memory.DataOutputView)>($r9);

        r2 = virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: byte[] toByteArray()>();

     label02:
        if $r8 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

        goto label12;

     label04:
        $r15 := @caughtexception;

        r22 = $r15;

        throw $r15;

     label05:
        $r13 := @caughtexception;

     label06:
        if $r8 == null goto label11;

        if r22 == null goto label10;

     label07:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        virtualinvoke r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

        goto label11;

     label10:
        virtualinvoke $r8.<org.apache.flink.core.memory.ByteArrayOutputStreamWithPos: void close()>();

     label11:
        throw $r13;

     label12:
        $r25 = new org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable;

        specialinvoke $r25.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void <init>(int)>(2);

     label13:
        $r27 = new org.apache.flink.core.memory.ByteArrayInputStreamWithPos;

        specialinvoke $r27.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void <init>(byte[])>(r2);

        r29 = null;

     label14:
        $r30 = new org.apache.flink.core.memory.DataInputViewStreamWrapper;

        specialinvoke $r30.<org.apache.flink.core.memory.DataInputViewStreamWrapper: void <init>(java.io.InputStream)>($r27);

        virtualinvoke $r25.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: void read(org.apache.flink.core.memory.DataInputView)>($r30);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Version mismatch expected.");

     label15:
        if $r27 == null goto label25;

        goto label16;

     label16:
        virtualinvoke $r27.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

        goto label25;

     label17:
        $r11 := @caughtexception;

        r29 = $r11;

        throw $r11;

     label18:
        $r19 := @caughtexception;

     label19:
        if $r27 == null goto label24;

        if r29 == null goto label23;

     label20:
        virtualinvoke $r27.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label21:
        goto label24;

     label22:
        $r14 := @caughtexception;

        virtualinvoke r29.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label24;

     label23:
        virtualinvoke $r27.<org.apache.flink.core.memory.ByteArrayInputStreamWithPos: void close()>();

     label24:
        throw $r19;

     label25:
        goto label27;

     label26:
        $r16 := @caughtexception;

     label27:
        $r10 = virtualinvoke $r25.<org.apache.flink.core.io.VersionedIOWriteableTest$TestWriteable: java.lang.String getData()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(null, $r10);

        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label17 to label19 with label18;
        catch org.apache.flink.core.io.VersionMismatchException from label13 to label25 with label26;
    }
}
