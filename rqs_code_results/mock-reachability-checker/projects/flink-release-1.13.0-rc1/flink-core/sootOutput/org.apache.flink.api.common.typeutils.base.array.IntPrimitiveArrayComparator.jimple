public class org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator extends org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator
{

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.IntComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.IntComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.IntComparator: void <init>(boolean)>(z0);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.array.PrimitiveArrayComparator: void <init>(boolean,org.apache.flink.api.common.typeutils.base.BasicTypeComparator)>(z0, $r1);

        return;
    }

    public int hash(int[])
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0;
        int[] r1;
        int i0, i1, i2, i3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        r1 := @parameter0: int[];

        i2 = 0;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        i1 = r1[i3];

        i2 = i2 + i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public int compare(int[], int[])
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0;
        int[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, $i11;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i8 = 0;

     label1:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        if i8 >= $i3 goto label5;

        $i7 = r1[i8];

        $i6 = r2[i8];

        i0 = $i7 - $i6;

        if i0 == 0 goto label4;

        $z1 = r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: boolean ascending>;

        if $z1 == 0 goto label2;

        $i9 = i0;

        goto label3;

     label2:
        $i9 = neg i0;

     label3:
        return $i9;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        $i5 = lengthof r1;

        $i4 = lengthof r2;

        i10 = $i5 - $i4;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: boolean ascending>;

        if $z0 == 0 goto label6;

        $i11 = i10;

        goto label7;

     label6:
        $i11 = neg i10;

     label7:
        return $i11;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0, $r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        $r2 = new org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: boolean ascending>;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: void <init>(boolean)>($z0);

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: java.lang.Object reference>;

        virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: void setReference(java.lang.Object)>($r3);

        return $r2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0;
        java.lang.Object r1, r2;
        int[] $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (int[]) r1;

        $r3 = (int[]) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: int compare(int[],int[])>($r4, $r3);

        return $i0;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator r0;
        java.lang.Object r1;
        int[] $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (int[]) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.array.IntPrimitiveArrayComparator: int hash(int[])>($r2);

        return $i0;
    }
}
