public final class org.apache.commons.compress.utils.IOUtils extends java.lang.Object
{
    private static final int COPY_BUF_SIZE;
    private static final int SKIP_BUF_SIZE;
    private static final byte[] SKIP_BUF;

    private void <init>()
    {
        org.apache.commons.compress.utils.IOUtils r0;

        r0 := @this: org.apache.commons.compress.utils.IOUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        long $l0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        $l0 = staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream,int)>(r0, r1, 8024);

        return $l0;
    }

    public static long copy(java.io.InputStream, java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.OutputStream r1;
        int i0, $i1;
        byte[] r2;
        long $l2, l3;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffersize must be bigger than 0");

        throw $r3;

     label1:
        r2 = newarray (byte)[i0];

        l3 = 0L;

     label2:
        $i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if -1 == $i1 goto label3;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i1);

        $l2 = (long) $i1;

        l3 = l3 + $l2;

        goto label2;

     label3:
        return l3;
    }

    public static long skip(java.io.InputStream, long) throws java.io.IOException
    {
        java.io.InputStream r0;
        long l0, $l2, $l3, $l5, l7, l8;
        byte $b1, $b6, $b9;
        byte[] $r1;
        int $i4, i10;

        r0 := @parameter0: java.io.InputStream;

        l7 := @parameter1: long;

        l0 = l7;

     label1:
        $b1 = l7 cmp 0L;

        if $b1 <= 0 goto label3;

        l8 = virtualinvoke r0.<java.io.InputStream: long skip(long)>(l7);

        $b6 = l8 cmp 0L;

        if $b6 != 0 goto label2;

        goto label3;

     label2:
        l7 = l7 - l8;

        goto label1;

     label3:
        $b9 = l7 cmp 0L;

        if $b9 <= 0 goto label5;

        $r1 = <org.apache.commons.compress.utils.IOUtils: byte[] SKIP_BUF>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l7, 4096L);

        $i4 = (int) $l3;

        i10 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>(r0, $r1, 0, $i4);

        if i10 >= 1 goto label4;

        goto label5;

     label4:
        $l5 = (long) i10;

        l7 = l7 - $l5;

        goto label3;

     label5:
        $l2 = l0 - l7;

        return $l2;
    }

    public static int read(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File r0;
        byte[] r1;
        java.io.FileInputStream $r6;
        int $i0, i1;
        java.lang.Throwable $r7, $r8, $r9, r11;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        r11 = null;

     label01:
        $i0 = lengthof r1;

        i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>($r6, r1, 0, $i0);

     label02:
        if $r6 == null goto label04;

        goto label03;

     label03:
        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

     label04:
        return i1;

     label05:
        $r8 := @caughtexception;

        r11 = $r8;

        throw $r8;

     label06:
        $r9 := @caughtexception;

     label07:
        if $r6 == null goto label12;

        if r11 == null goto label11;

     label08:
        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

        goto label12;

     label11:
        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

     label12:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    public static int readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $i1 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i1 < 0 goto label1;

        if i0 < 0 goto label1;

        $i3 = i1 + i0;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        i6 = 0;

     label3:
        if i6 == i1 goto label5;

        $i5 = i0 + i6;

        $i4 = i1 - i6;

        i7 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, $i5, $i4);

        if i7 != -1 goto label4;

        goto label5;

     label4:
        i6 = i6 + i7;

        goto label3;

     label5:
        return i6;
    }

    public static void readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.ReadableByteChannel r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2;
        java.io.EOFException $r2;

        r0 := @parameter0: java.nio.channels.ReadableByteChannel;

        r1 := @parameter1: java.nio.ByteBuffer;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = interfaceinvoke r0.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r1);

        if i1 > 0 goto label2;

        goto label3;

     label2:
        i2 = i2 + i1;

        goto label1;

     label3:
        if i2 >= i0 goto label4;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label4:
        return;
    }

    public static byte[] toByteArray(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.io.ByteArrayOutputStream $r2;
        byte[] $r3;

        r0 := @parameter0: java.io.InputStream;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        staticinvoke <org.apache.commons.compress.utils.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r0, $r2);

        $r3 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    public static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.Closeable;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.commons.compress.utils.IOUtils: int SKIP_BUF_SIZE> = 4096;

        <org.apache.commons.compress.utils.IOUtils: int COPY_BUF_SIZE> = 8024;

        $r0 = newarray (byte)[4096];

        <org.apache.commons.compress.utils.IOUtils: byte[] SKIP_BUF> = $r0;

        return;
    }
}
