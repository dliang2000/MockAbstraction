public class org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest extends org.apache.flink.core.memory.MemorySegmentTestBase
{

    public void <init>(int)
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        int i0;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.flink.core.memory.MemorySegmentTestBase: void <init>(int)>(i0);

        return;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int)
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        int i0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int)>(i0);

        return $r1;
    }

    org.apache.flink.core.memory.MemorySegment createSegment(int, java.lang.Object)
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        int i0;
        java.lang.Object r1;
        java.lang.Runnable $r2;
        org.apache.flink.core.memory.MemorySegment $r3;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest$lambda_createSegment_0__705: java.lang.Runnable bootstrap$()>();

        $r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int,java.lang.Object,java.lang.Runnable)>(i0, r1, $r2);

        return $r3;
    }

    public void testByteBufferWrapping()
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        org.apache.flink.core.memory.MemorySegment $r1;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        $r1 = virtualinvoke r0.<org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest: org.apache.flink.core.memory.MemorySegment createSegment(int)>(10);

        virtualinvoke $r1.<org.apache.flink.core.memory.MemorySegment: java.nio.ByteBuffer wrap(int,int)>(1, 2);

        return;
    }

    public void testCallCleanerOnFree()
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        java.util.concurrent.CompletableFuture $r2;
        java.lang.Runnable $r3;
        org.apache.flink.core.memory.MemorySegment $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest$lambda_testCallCleanerOnFree_1__83: java.lang.Runnable bootstrap$(java.util.concurrent.CompletableFuture)>($r2);

        $r4 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int,java.lang.Object,java.lang.Runnable)>(10, null, $r3);

        virtualinvoke $r4.<org.apache.flink.core.memory.MemorySegment: void free()>();

        $z0 = virtualinvoke $r2.<java.util.concurrent.CompletableFuture: boolean isDone()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCallCleanerOnceOnConcurrentFree() throws java.lang.InterruptedException
    {
        org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest r0;
        java.lang.Runnable r2, $r9, $r12;
        org.apache.flink.core.memory.MemorySegment r3;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.lang.Thread $r7, $r10;
        int $i0;
        java.lang.Integer $r13, $r14;
        org.hamcrest.Matcher $r15;

        r0 := @this: org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r2 = staticinvoke <org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest$lambda_testCallCleanerOnceOnConcurrentFree_2__84: java.lang.Runnable bootstrap$(java.util.concurrent.atomic.AtomicInteger)>($r6);

        r3 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment allocateOffHeapUnsafeMemory(int,java.lang.Object,java.lang.Runnable)>(10, null, r2);

        $r7 = new java.lang.Thread;

        virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = staticinvoke <org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest$free__85: java.lang.Runnable bootstrap$(org.apache.flink.core.memory.MemorySegment)>(r3);

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable)>($r9);

        $r10 = new java.lang.Thread;

        virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = staticinvoke <org.apache.flink.core.memory.OffHeapUnsafeMemorySegmentTest$free__86: java.lang.Runnable bootstrap$(org.apache.flink.core.memory.MemorySegment)>(r3);

        specialinvoke $r10.<java.lang.Thread: void <init>(java.lang.Runnable)>($r12);

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        virtualinvoke $r10.<java.lang.Thread: void start()>();

        virtualinvoke $r7.<java.lang.Thread: void join()>();

        virtualinvoke $r10.<java.lang.Thread: void join()>();

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r15 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r13, $r15);

        return;
    }

    public static void lambda$testCallCleanerOnceOnConcurrentFree$2(java.util.concurrent.atomic.AtomicInteger)
    {
        java.util.concurrent.atomic.AtomicInteger r0;
        java.lang.InterruptedException $r2;

        r0 := @parameter0: java.util.concurrent.atomic.AtomicInteger;

     label1:
        virtualinvoke r0.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void lambda$testCallCleanerOnFree$1(java.util.concurrent.CompletableFuture)
    {
        java.util.concurrent.CompletableFuture r0;

        r0 := @parameter0: java.util.concurrent.CompletableFuture;

        virtualinvoke r0.<java.util.concurrent.CompletableFuture: boolean complete(java.lang.Object)>(null);

        return;
    }

    public static void lambda$createSegment$0()
    {
        return;
    }
}
