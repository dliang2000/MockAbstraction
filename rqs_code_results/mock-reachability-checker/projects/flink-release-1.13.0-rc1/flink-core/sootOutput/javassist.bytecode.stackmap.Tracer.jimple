public abstract class javassist.bytecode.stackmap.Tracer extends java.lang.Object implements javassist.bytecode.stackmap.TypeTag
{
    protected javassist.ClassPool classPool;
    protected javassist.bytecode.ConstPool cpool;
    protected java.lang.String returnType;
    protected int stackTop;
    protected javassist.bytecode.stackmap.TypeData[] stackTypes;
    protected javassist.bytecode.stackmap.TypeData[] localsTypes;

    public void <init>(javassist.ClassPool, javassist.bytecode.ConstPool, int, int, java.lang.String)
    {
        javassist.bytecode.stackmap.Tracer r0;
        javassist.ClassPool r1;
        javassist.bytecode.ConstPool r2;
        int i0, i1;
        java.lang.String r3;
        javassist.bytecode.stackmap.TypeData[] $r4, $r5;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: javassist.ClassPool;

        r2 := @parameter1: javassist.bytecode.ConstPool;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool> = r1;

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool> = r2;

        r0.<javassist.bytecode.stackmap.Tracer: java.lang.String returnType> = r3;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = 0;

        $r4 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>(i0);

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes> = $r4;

        $r5 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>(i1);

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes> = $r5;

        return;
    }

    public void <init>(javassist.bytecode.stackmap.Tracer)
    {
        javassist.bytecode.stackmap.Tracer r0, r1;
        javassist.ClassPool $r2;
        javassist.bytecode.ConstPool $r3;
        java.lang.String $r4;
        int $i0, $i1, $i2;
        javassist.bytecode.stackmap.TypeData[] $r5, $r6, $r7, $r8;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: javassist.bytecode.stackmap.Tracer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool> = $r2;

        $r3 = r1.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool> = $r3;

        $r4 = r1.<javassist.bytecode.stackmap.Tracer: java.lang.String returnType>;

        r0.<javassist.bytecode.stackmap.Tracer: java.lang.String returnType> = $r4;

        $i0 = r1.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i0;

        $r5 = r1.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = lengthof $r5;

        $r6 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>($i1);

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes> = $r6;

        $r7 = r1.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i2 = lengthof $r7;

        $r8 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>($i2);

        r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes> = $r8;

        return;
    }

    protected int doOpcode(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i2, $i3, $i4, $i5;
        byte[] r1;
        byte $b1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        javassist.bytecode.BadBytecode $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;
        short s6;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

     label1:
        $b1 = r1[i0];

        s6 = $b1 & 255;

        if s6 >= 54 goto label3;

        $i5 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doOpcode0_53(int,byte[],int)>(i0, r1, s6);

     label2:
        return $i5;

     label3:
        if s6 >= 96 goto label5;

        $i4 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doOpcode54_95(int,byte[],int)>(i0, r1, s6);

     label4:
        return $i4;

     label5:
        if s6 >= 148 goto label7;

        $i3 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doOpcode96_147(int,byte[],int)>(i0, r1, s6);

     label6:
        return $i3;

     label7:
        $i2 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doOpcode148_201(int,byte[],int)>(i0, r1, s6);

     label8:
        return $i2;

     label9:
        $r2 := @caughtexception;

        $r3 = new javassist.bytecode.BadBytecode;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("inconsistent stack height ");

        $r6 = virtualinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: java.lang.String getMessage()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<javassist.bytecode.BadBytecode: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r2);

        throw $r3;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label9;
        catch java.lang.ArrayIndexOutOfBoundsException from label3 to label4 with label9;
        catch java.lang.ArrayIndexOutOfBoundsException from label5 to label6 with label9;
        catch java.lang.ArrayIndexOutOfBoundsException from label7 to label8 with label9;
    }

    protected void visitBranch(int, byte[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        return;
    }

    protected void visitGoto(int, byte[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        return;
    }

    protected void visitReturn(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        return;
    }

    protected void visitThrow(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        return;
    }

    protected void visitTableSwitch(int, byte[], int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, i2, i3;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected void visitLookupSwitch(int, byte[], int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, i2, i3;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected void visitJSR(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        return;
    }

    protected void visitRET(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0;
        byte[] r1;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        return;
    }

    private int doOpcode0_53(int, byte[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData[] r2, $r12;
        javassist.bytecode.stackmap.TypeData r3, $r5, $r13;
        javassist.bytecode.stackmap.TypeData$BasicType $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        byte $b38, $b48, $b66;
        short $s39, $s49;
        javassist.bytecode.stackmap.TypeData$NullType $r31;
        java.lang.RuntimeException $r32;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        tableswitch(i1)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label03;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label04;
            case 11: goto label05;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label06;
            case 15: goto label06;
            case 16: goto label07;
            case 17: goto label07;
            case 18: goto label10;
            case 19: goto label11;
            case 20: goto label11;
            case 21: goto label12;
            case 22: goto label13;
            case 23: goto label14;
            case 24: goto label15;
            case 25: goto label16;
            case 26: goto label17;
            case 27: goto label17;
            case 28: goto label17;
            case 29: goto label17;
            case 30: goto label18;
            case 31: goto label18;
            case 32: goto label18;
            case 33: goto label18;
            case 34: goto label19;
            case 35: goto label19;
            case 36: goto label19;
            case 37: goto label19;
            case 38: goto label20;
            case 39: goto label20;
            case 40: goto label20;
            case 41: goto label20;
            case 42: goto label21;
            case 43: goto label21;
            case 44: goto label21;
            case 45: goto label21;
            case 46: goto label22;
            case 47: goto label23;
            case 48: goto label24;
            case 49: goto label25;
            case 50: goto label26;
            case 51: goto label27;
            case 52: goto label27;
            case 53: goto label27;
            default: goto label28;
        };

     label01:
        goto label29;

     label02:
        $i64 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i65 = $i64 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i65;

        $r31 = new javassist.bytecode.stackmap.TypeData$NullType;

        specialinvoke $r31.<javassist.bytecode.stackmap.TypeData$NullType: void <init>()>();

        r2[$i64] = $r31;

        goto label29;

     label03:
        $i62 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i63 = $i62 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i63;

        $r30 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[$i62] = $r30;

        goto label29;

     label04:
        $i58 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i59 = $i58 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i59;

        $r28 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        r2[$i58] = $r28;

        $i60 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i61 = $i60 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i61;

        $r29 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i60] = $r29;

        goto label29;

     label05:
        $i56 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i57 = $i56 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i57;

        $r27 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        r2[$i56] = $r27;

        goto label29;

     label06:
        $i52 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i53 = $i52 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i53;

        $r25 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        r2[$i52] = $r25;

        $i54 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i55 = $i54 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i55;

        $r26 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i54] = $r26;

        goto label29;

     label07:
        $i50 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i51 = $i50 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i51;

        $r24 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[$i50] = $r24;

        if i1 != 17 goto label08;

        $b66 = 3;

        goto label09;

     label08:
        $b66 = 2;

     label09:
        return $b66;

     label10:
        $i47 = i0 + 1;

        $b48 = r1[$i47];

        $s49 = $b48 & 255;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doLDC(int)>($s49);

        return 2;

     label11:
        $i45 = i0 + 1;

        $i46 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i45);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doLDC(int)>($i46);

        return 3;

     label12:
        $r23 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $i44 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)>($r23, r1, i0);

        return $i44;

     label13:
        $r22 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $i43 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)>($r22, r1, i0);

        return $i43;

     label14:
        $r21 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $i42 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)>($r21, r1, i0);

        return $i42;

     label15:
        $r20 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $i41 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(javassist.bytecode.stackmap.TypeData,byte[],int)>($r20, r1, i0);

        return $i41;

     label16:
        $i37 = i0 + 1;

        $b38 = r1[$i37];

        $s39 = $b38 & 255;

        $i40 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doALOAD(int)>($s39);

        return $i40;

     label17:
        $i35 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i36 = $i35 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i36;

        $r19 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[$i35] = $r19;

        goto label29;

     label18:
        $i31 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i32 = $i31 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i32;

        $r17 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        r2[$i31] = $r17;

        $i33 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i34 = $i33 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i34;

        $r18 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i33] = $r18;

        goto label29;

     label19:
        $i29 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i30 = $i29 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i30;

        $r16 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        r2[$i29] = $r16;

        goto label29;

     label20:
        $i25 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i26 = $i25 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i26;

        $r14 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        r2[$i25] = $r14;

        $i27 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i28 = $i27 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i28;

        $r15 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i27] = $r15;

        goto label29;

     label21:
        i2 = i1 - 42;

        $i23 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i24 = $i23 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i24;

        $r12 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r13 = $r12[i2];

        r2[$i23] = $r13;

        goto label29;

     label22:
        $i20 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i21 = $i20 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i21;

        $i22 = $i21 - 1;

        $r11 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[$i22] = $r11;

        goto label29;

     label23:
        $i16 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i17 = $i16 - 2;

        $r9 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        r2[$i17] = $r9;

        $i18 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i19 = $i18 - 1;

        $r10 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i19] = $r10;

        goto label29;

     label24:
        $i13 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i14 = $i13 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i14;

        $i15 = $i14 - 1;

        $r8 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        r2[$i15] = $r8;

        goto label29;

     label25:
        $i9 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i10 = $i9 - 2;

        $r6 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        r2[$i10] = $r6;

        $i11 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i12 = $i11 - 1;

        $r7 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i12] = $r7;

        goto label29;

     label26:
        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i8 = $i7 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i8;

        i3 = $i8 - 1;

        r3 = r2[i3];

        $r5 = staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: javassist.bytecode.stackmap.TypeData make(javassist.bytecode.stackmap.TypeData)>(r3);

        r2[i3] = $r5;

        goto label29;

     label27:
        $i4 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i5 = $i4 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i5;

        $i6 = $i5 - 1;

        $r4 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[$i6] = $r4;

        goto label29;

     label28:
        $r32 = new java.lang.RuntimeException;

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal");

        throw $r32;

     label29:
        return 1;
    }

    private void doLDC(int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        javassist.bytecode.stackmap.TypeData[] r1;
        javassist.bytecode.ConstPool $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        javassist.bytecode.stackmap.TypeData$ClassName $r8, $r15;
        javassist.bytecode.stackmap.TypeData$BasicType $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        i1 = virtualinvoke $r2.<javassist.bytecode.ConstPool: int getTag(int)>(i0);

        if i1 != 8 goto label1;

        $i16 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i17 = $i16 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i17;

        $r15 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r15.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>("java.lang.String");

        r1[$i16] = $r15;

        goto label7;

     label1:
        if i1 != 3 goto label2;

        $i14 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i15 = $i14 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i15;

        $r14 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r1[$i14] = $r14;

        goto label7;

     label2:
        if i1 != 4 goto label3;

        $i12 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i13 = $i12 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i13;

        $r13 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        r1[$i12] = $r13;

        goto label7;

     label3:
        if i1 != 5 goto label4;

        $i8 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i9 = $i8 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i9;

        $r11 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        r1[$i8] = $r11;

        $i10 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i11 = $i10 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i11;

        $r12 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r1[$i10] = $r12;

        goto label7;

     label4:
        if i1 != 6 goto label5;

        $i4 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i5 = $i4 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i5;

        $r9 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        r1[$i4] = $r9;

        $i6 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i7 = $i6 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i7;

        $r10 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r1[$i6] = $r10;

        goto label7;

     label5:
        if i1 != 7 goto label6;

        $i2 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i3 = $i2 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i3;

        $r8 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r8.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>("java.lang.Class");

        r1[$i2] = $r8;

        goto label7;

     label6:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad LDC: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label7:
        return;
    }

    private int doXLOAD(javassist.bytecode.stackmap.TypeData, byte[], int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        javassist.bytecode.stackmap.TypeData r1;
        byte[] r2;
        int i0, $i2, $i4;
        short s1;
        byte $b3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i2 = i0 + 1;

        $b3 = r2[$i2];

        s1 = $b3 & 255;

        $i4 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(int,javassist.bytecode.stackmap.TypeData)>(s1, r1);

        return $i4;
    }

    private int doXLOAD(int, javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i1, $i2, $i3, $i4;
        javassist.bytecode.stackmap.TypeData r1;
        javassist.bytecode.stackmap.TypeData[] $r2, $r3;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$BasicType $r4;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.stackmap.TypeData;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

        $r2[$i1] = r1;

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i4 = $i3 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i4;

        $r4 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r3[$i3] = $r4;

     label1:
        return 2;
    }

    private int doALOAD(int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i1, $i2;
        javassist.bytecode.stackmap.TypeData[] $r1, $r2;
        javassist.bytecode.stackmap.TypeData $r3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r3 = $r2[i0];

        $r1[$i1] = $r3;

        return 2;
    }

    private int doOpcode54_95(int, byte[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i46, $i47, $i48, $i49, $i50, i51, i52, i53, i54, i55, i57, i58, i59, i60, i61, i62;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData[] $r2, $r3, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r26, $r28, $r30, $r32, $r34, $r36;
        javassist.bytecode.stackmap.TypeData $r4, $r8, $r11, $r14, $r17, $r22, $r23, r42;
        javassist.ClassPool $r21;
        javassist.bytecode.stackmap.TypeData$BasicType $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r38, $r39, $r40;
        byte $b44, $b56;
        short $s45;
        java.lang.RuntimeException $r41;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        tableswitch(i1)
        {
            case 54: goto label01;
            case 55: goto label02;
            case 56: goto label03;
            case 57: goto label04;
            case 58: goto label05;
            case 59: goto label06;
            case 60: goto label06;
            case 61: goto label06;
            case 62: goto label06;
            case 63: goto label07;
            case 64: goto label07;
            case 65: goto label07;
            case 66: goto label07;
            case 67: goto label08;
            case 68: goto label08;
            case 69: goto label08;
            case 70: goto label08;
            case 71: goto label09;
            case 72: goto label09;
            case 73: goto label09;
            case 74: goto label09;
            case 75: goto label10;
            case 76: goto label10;
            case 77: goto label10;
            case 78: goto label10;
            case 79: goto label11;
            case 80: goto label11;
            case 81: goto label11;
            case 82: goto label11;
            case 83: goto label15;
            case 84: goto label16;
            case 85: goto label16;
            case 86: goto label16;
            case 87: goto label17;
            case 88: goto label18;
            case 89: goto label19;
            case 90: goto label20;
            case 91: goto label20;
            case 92: goto label21;
            case 93: goto label22;
            case 94: goto label22;
            case 95: goto label23;
            default: goto label24;
        };

     label01:
        $r40 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $i50 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r40);

        return $i50;

     label02:
        $r39 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $i49 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r39);

        return $i49;

     label03:
        $r38 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $i48 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r38);

        return $i48;

     label04:
        $r37 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $i47 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r37);

        return $i47;

     label05:
        $i43 = i0 + 1;

        $b44 = r1[$i43];

        $s45 = $b44 & 255;

        $i46 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doASTORE(int)>($s45);

        return $i46;

     label06:
        i51 = i1 - 59;

        $r36 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r35 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r36[i51] = $r35;

        $i41 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i42 = $i41 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i42;

        goto label25;

     label07:
        i52 = i1 - 63;

        $r32 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r31 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $r32[i52] = $r31;

        $r34 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i38 = i52 + 1;

        $r33 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r34[$i38] = $r33;

        $i39 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i40 = $i39 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i40;

        goto label25;

     label08:
        i53 = i1 - 67;

        $r30 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r29 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $r30[i53] = $r29;

        $i36 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i37 = $i36 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i37;

        goto label25;

     label09:
        i54 = i1 - 71;

        $r26 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r25 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $r26[i54] = $r25;

        $r28 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i33 = i54 + 1;

        $r27 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r28[$i33] = $r27;

        $i34 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i35 = $i34 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i35;

        goto label25;

     label10:
        i55 = i1 - 75;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doASTORE(int)>(i55);

        goto label25;

     label11:
        $i30 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        if i1 == 80 goto label12;

        if i1 != 82 goto label13;

     label12:
        $b56 = 4;

        goto label14;

     label13:
        $b56 = 3;

     label14:
        $i31 = $i30 - $b56;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i31;

        goto label25;

     label15:
        $r19 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i24 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i25 = $i24 - 3;

        $r23 = $r19[$i25];

        $r20 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i26 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i27 = $i26 - 1;

        $r22 = $r20[$i27];

        $r21 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        staticinvoke <javassist.bytecode.stackmap.TypeData$ArrayElement: void aastore(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData,javassist.ClassPool)>($r23, $r22, $r21);

        $i28 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i29 = $i28 - 3;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i29;

        goto label25;

     label16:
        $i22 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i23 = $i22 - 3;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i23;

        goto label25;

     label17:
        $i20 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i21 = $i20 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i21;

        goto label25;

     label18:
        $i18 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i19 = $i18 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i19;

        goto label25;

     label19:
        i57 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r18 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r16 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i16 = i57 - 1;

        $r17 = $r16[$i16];

        $r18[i57] = $r17;

        $i17 = i57 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i17;

        goto label25;

     label20:
        $i13 = i1 - 90;

        i58 = $i13 + 2;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doDUP_XX(int,int)>(1, i58);

        i59 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r15 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i14 = i59 - i58;

        $r13 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r14 = $r13[i59];

        $r15[$i14] = $r14;

        $i15 = i59 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i15;

        goto label25;

     label21:
        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doDUP_XX(int,int)>(2, 2);

        $i11 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i12 = $i11 + 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i12;

        goto label25;

     label22:
        $i5 = i1 - 93;

        i60 = $i5 + 3;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doDUP_XX(int,int)>(2, i60);

        i61 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r9 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i6 = i61 - i60;

        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r8 = $r7[i61];

        $r9[$i6] = $r8;

        $r12 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i7 = i61 - i60;

        $i9 = $i7 + 1;

        $r10 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i8 = i61 + 1;

        $r11 = $r10[$i8];

        $r12[$i9] = $r11;

        $i10 = i61 + 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i10;

        goto label25;

     label23:
        $i2 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        i62 = $i2 - 1;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        r42 = $r2[i62];

        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = i62 - 1;

        $r4 = $r3[$i3];

        $r5[i62] = $r4;

        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i4 = i62 - 1;

        $r6[$i4] = r42;

        goto label25;

     label24:
        $r41 = new java.lang.RuntimeException;

        specialinvoke $r41.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal");

        throw $r41;

     label25:
        return 1;
    }

    private int doXSTORE(int, byte[], javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i2, $i4;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData r2;
        short s1;
        byte $b3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: javassist.bytecode.stackmap.TypeData;

        $i2 = i0 + 1;

        $b3 = r1[$i2];

        s1 = $b3 & 255;

        $i4 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,javassist.bytecode.stackmap.TypeData)>(s1, r2);

        return $i4;
    }

    private int doXSTORE(int, javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        javassist.bytecode.stackmap.TypeData r1;
        javassist.bytecode.stackmap.TypeData[] $r2, $r4;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$BasicType $r3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.stackmap.TypeData;

        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r2[i0] = r1;

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label1;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i4 = $i3 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i4;

        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i5 = i0 + 1;

        $r3 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r4[$i5] = $r3;

     label1:
        return 2;
    }

    private int doASTORE(int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i1, $i2, $i3;
        javassist.bytecode.stackmap.TypeData[] $r1, $r3;
        javassist.bytecode.stackmap.TypeData $r2;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r1 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r2 = $r1[$i3];

        $r3[i0] = $r2;

        return 2;
    }

    private void doDUP_XX(int, int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, i2, $i3, $i4, i5;
        javassist.bytecode.stackmap.TypeData[] r1;
        javassist.bytecode.stackmap.TypeData $r2;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        i5 = $i3 - 1;

        i2 = i5 - i1;

     label1:
        if i5 <= i2 goto label2;

        $i4 = i5 + i0;

        $r2 = r1[i5];

        r1[$i4] = $r2;

        i5 = i5 + -1;

        goto label1;

     label2:
        return;
    }

    private int doOpcode96_147(int, byte[], int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData[] $r2, $r5, $r6, $r9, $r11, $r13, $r15, $r17, $r19, $r20, $r22, $r25, $r27, $r29, $r31, $r33;
        javassist.bytecode.stackmap.TypeData$BasicType $r3, $r4, $r7, $r8, $r10, $r12, $r14, $r16, $r18, $r21, $r23, $r24, $r26, $r28, $r30, $r32;
        java.lang.RuntimeException $r34;
        int[] $r35;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        if i1 > 131 goto label01;

        $i43 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r35 = <javassist.bytecode.Opcode: int[] STACK_GROW>;

        $i42 = $r35[i1];

        $i44 = $i43 + $i42;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i44;

        return 1;

     label01:
        tableswitch(i1)
        {
            case 132: goto label02;
            case 133: goto label03;
            case 134: goto label04;
            case 135: goto label05;
            case 136: goto label06;
            case 137: goto label07;
            case 138: goto label08;
            case 139: goto label09;
            case 140: goto label10;
            case 141: goto label11;
            case 142: goto label12;
            case 143: goto label13;
            case 144: goto label14;
            case 145: goto label15;
            case 146: goto label15;
            case 147: goto label15;
            default: goto label16;
        };

     label02:
        return 3;

     label03:
        $r31 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i37 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i38 = $i37 - 1;

        $r30 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $r31[$i38] = $r30;

        $r33 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i39 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r32 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r33[$i39] = $r32;

        $i40 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i41 = $i40 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i41;

        goto label17;

     label04:
        $r29 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i35 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i36 = $i35 - 1;

        $r28 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $r29[$i36] = $r28;

        goto label17;

     label05:
        $r25 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i30 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i31 = $i30 - 1;

        $r24 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $r25[$i31] = $r24;

        $r27 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i32 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r26 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r27[$i32] = $r26;

        $i33 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i34 = $i33 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i34;

        goto label17;

     label06:
        $r22 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i27 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i28 = $i27 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i28;

        $i29 = $i28 - 1;

        $r23 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r22[$i29] = $r23;

        goto label17;

     label07:
        $r20 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i24 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i25 = $i24 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i25;

        $i26 = $i25 - 1;

        $r21 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $r20[$i26] = $r21;

        goto label17;

     label08:
        $r19 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i22 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i23 = $i22 - 2;

        $r18 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $r19[$i23] = $r18;

        goto label17;

     label09:
        $r17 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i20 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i21 = $i20 - 1;

        $r16 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r17[$i21] = $r16;

        goto label17;

     label10:
        $r13 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i15 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i16 = $i15 - 1;

        $r12 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $r13[$i16] = $r12;

        $r15 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i17 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r14 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r15[$i17] = $r14;

        $i18 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i19 = $i18 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i19;

        goto label17;

     label11:
        $r9 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i10 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i11 = $i10 - 1;

        $r8 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        $r9[$i11] = $r8;

        $r11 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i12 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r10 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        $r11[$i12] = $r10;

        $i13 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i14 = $i13 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i14;

        goto label17;

     label12:
        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i8 = $i7 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i8;

        $i9 = $i8 - 1;

        $r7 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r6[$i9] = $r7;

        goto label17;

     label13:
        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i5 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i6 = $i5 - 2;

        $r4 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        $r5[$i6] = $r4;

        goto label17;

     label14:
        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i2 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i3 = $i2 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i3;

        $i4 = $i3 - 1;

        $r3 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        $r2[$i4] = $r3;

        goto label17;

     label15:
        goto label17;

     label16:
        $r34 = new java.lang.RuntimeException;

        specialinvoke $r34.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal");

        throw $r34;

     label17:
        return 1;
    }

    private int doOpcode148_201(int, byte[], int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, i95, i96, i97, i98, i99, i100, i101;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData$BasicType $r2, $r13, $r34, $r37, $r38;
        javassist.bytecode.stackmap.TypeData[] $r3, $r6, $r7, $r10, $r14, $r22, $r26, $r30, $r35, $r36, $r39;
        javassist.bytecode.ConstPool $r4, $r15, $r28;
        char $c17, $c27;
        javassist.bytecode.stackmap.TypeData$ClassName $r5, $r21;
        javassist.ClassPool $r8, $r11, $r31;
        javassist.bytecode.stackmap.TypeData $r9, $r12, $r33;
        java.lang.String $r16, $r29, $r32, r40, r41, r42;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r23, $r24, $r25;
        javassist.bytecode.stackmap.TypeData$UninitData $r27;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        tableswitch(i1)
        {
            case 148: goto label01;
            case 149: goto label02;
            case 150: goto label02;
            case 151: goto label03;
            case 152: goto label03;
            case 153: goto label04;
            case 154: goto label04;
            case 155: goto label04;
            case 156: goto label04;
            case 157: goto label04;
            case 158: goto label04;
            case 159: goto label05;
            case 160: goto label05;
            case 161: goto label05;
            case 162: goto label05;
            case 163: goto label05;
            case 164: goto label05;
            case 165: goto label05;
            case 166: goto label05;
            case 167: goto label06;
            case 168: goto label07;
            case 169: goto label08;
            case 170: goto label09;
            case 171: goto label10;
            case 172: goto label11;
            case 173: goto label12;
            case 174: goto label13;
            case 175: goto label14;
            case 176: goto label15;
            case 177: goto label16;
            case 178: goto label17;
            case 179: goto label18;
            case 180: goto label19;
            case 181: goto label20;
            case 182: goto label21;
            case 183: goto label21;
            case 184: goto label22;
            case 185: goto label23;
            case 186: goto label24;
            case 187: goto label25;
            case 188: goto label26;
            case 189: goto label27;
            case 190: goto label30;
            case 191: goto label31;
            case 192: goto label32;
            case 193: goto label34;
            case 194: goto label35;
            case 195: goto label35;
            case 196: goto label36;
            case 197: goto label37;
            case 198: goto label38;
            case 199: goto label38;
            case 200: goto label39;
            case 201: goto label40;
            default: goto label41;
        };

     label01:
        $r39 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i91 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i92 = $i91 - 4;

        $r38 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r39[$i92] = $r38;

        $i93 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i94 = $i93 - 3;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i94;

        goto label41;

     label02:
        $r36 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i88 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i89 = $i88 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i89;

        $i90 = $i89 - 1;

        $r37 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r36[$i90] = $r37;

        goto label41;

     label03:
        $r35 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i84 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i85 = $i84 - 4;

        $r34 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r35[$i85] = $r34;

        $i86 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i87 = $i86 - 3;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i87;

        goto label41;

     label04:
        $i80 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i81 = $i80 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i81;

        $i82 = i0 + 1;

        $i83 = staticinvoke <javassist.bytecode.ByteArray: int readS16bit(byte[],int)>(r1, $i82);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitBranch(int,byte[],int)>(i0, r1, $i83);

        return 3;

     label05:
        $i76 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i77 = $i76 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i77;

        $i78 = i0 + 1;

        $i79 = staticinvoke <javassist.bytecode.ByteArray: int readS16bit(byte[],int)>(r1, $i78);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitBranch(int,byte[],int)>(i0, r1, $i79);

        return 3;

     label06:
        $i74 = i0 + 1;

        $i75 = staticinvoke <javassist.bytecode.ByteArray: int readS16bit(byte[],int)>(r1, $i74);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitGoto(int,byte[],int)>(i0, r1, $i75);

        return 3;

     label07:
        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitJSR(int,byte[])>(i0, r1);

        return 3;

     label08:
        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitRET(int,byte[])>(i0, r1);

        return 2;

     label09:
        $i62 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i63 = $i62 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i63;

        $i64 = i0 & -4;

        i95 = $i64 + 8;

        i96 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, i95);

        $i65 = i95 + 4;

        i2 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, $i65);

        $i66 = i2 - i96;

        i3 = $i66 + 1;

        $i68 = i95 + 8;

        $i67 = i95 - 4;

        $i69 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, $i67);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitTableSwitch(int,byte[],int,int,int)>(i0, r1, i3, $i68, $i69);

        $i70 = i3 * 4;

        $i72 = $i70 + 16;

        $i71 = i0 & 3;

        $i73 = $i72 - $i71;

        return $i73;

     label10:
        $i52 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i53 = $i52 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i53;

        $i54 = i0 & -4;

        i97 = $i54 + 8;

        i98 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, i97);

        $i56 = i97 + 4;

        $i55 = i97 - 4;

        $i57 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, $i55);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitLookupSwitch(int,byte[],int,int,int)>(i0, r1, i98, $i56, $i57);

        $i58 = i98 * 8;

        $i60 = $i58 + 12;

        $i59 = i0 & 3;

        $i61 = $i60 - $i59;

        return $i61;

     label11:
        $i50 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i51 = $i50 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i51;

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label12:
        $i48 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i49 = $i48 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i49;

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label13:
        $i46 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i47 = $i46 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i47;

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label14:
        $i44 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i45 = $i44 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i45;

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label15:
        $r30 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i42 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i43 = $i42 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i43;

        $r33 = $r30[$i43];

        $r32 = r0.<javassist.bytecode.stackmap.Tracer: java.lang.String returnType>;

        $r31 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r33.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>($r32, $r31);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label16:
        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitReturn(int,byte[])>(i0, r1);

        goto label41;

     label17:
        $i41 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doGetField(int,byte[],boolean)>(i0, r1, 0);

        return $i41;

     label18:
        $i40 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doPutField(int,byte[],boolean)>(i0, r1, 0);

        return $i40;

     label19:
        $i39 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doGetField(int,byte[],boolean)>(i0, r1, 1);

        return $i39;

     label20:
        $i38 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doPutField(int,byte[],boolean)>(i0, r1, 1);

        return $i38;

     label21:
        $i37 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doInvokeMethod(int,byte[],boolean)>(i0, r1, 1);

        return $i37;

     label22:
        $i36 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doInvokeMethod(int,byte[],boolean)>(i0, r1, 0);

        return $i36;

     label23:
        $i35 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doInvokeIntfMethod(int,byte[])>(i0, r1);

        return $i35;

     label24:
        $i34 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doInvokeDynamic(int,byte[])>(i0, r1);

        return $i34;

     label25:
        $i31 = i0 + 1;

        i99 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i31);

        $r26 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i32 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i33 = $i32 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i33;

        $r27 = new javassist.bytecode.stackmap.TypeData$UninitData;

        $r28 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        $r29 = virtualinvoke $r28.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i99);

        specialinvoke $r27.<javassist.bytecode.stackmap.TypeData$UninitData: void <init>(int,java.lang.String)>(i0, $r29);

        $r26[$i32] = $r27;

        return 3;

     label26:
        $i30 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doNEWARRAY(int,byte[])>(i0, r1);

        return $i30;

     label27:
        $i26 = i0 + 1;

        i100 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i26);

        $r15 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        $r16 = virtualinvoke $r15.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i100);

        r40 = virtualinvoke $r16.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $c27 = virtualinvoke r40.<java.lang.String: char charAt(int)>(0);

        if $c27 != 91 goto label28;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        r41 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label29;

     label28:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[L");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        r41 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label29:
        $r22 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i28 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i29 = $i28 - 1;

        $r21 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r21.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r41);

        $r22[$i29] = $r21;

        return 3;

     label30:
        $r10 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i22 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i23 = $i22 - 1;

        $r12 = $r10[$i23];

        $r11 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r12.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>("[Ljava.lang.Object;", $r11);

        $r14 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i24 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i25 = $i24 - 1;

        $r13 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r14[$i25] = $r13;

        goto label41;

     label31:
        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i20 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i21 = $i20 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i21;

        $r9 = $r7[$i21];

        $r8 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r9.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>("java.lang.Throwable", $r8);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitThrow(int,byte[])>(i0, r1);

        goto label41;

     label32:
        $i16 = i0 + 1;

        i101 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i16);

        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r42 = virtualinvoke $r4.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i101);

        $c17 = virtualinvoke r42.<java.lang.String: char charAt(int)>(0);

        if $c17 != 91 goto label33;

        r42 = virtualinvoke r42.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

     label33:
        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i18 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i19 = $i18 - 1;

        $r5 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r5.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r42);

        $r6[$i19] = $r5;

        return 3;

     label34:
        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i14 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i15 = $i14 - 1;

        $r2 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        $r3[$i15] = $r2;

        return 3;

     label35:
        $i12 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i13 = $i12 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i13;

        goto label41;

     label36:
        $i11 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doWIDE(int,byte[])>(i0, r1);

        return $i11;

     label37:
        $i10 = specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doMultiANewArray(int,byte[])>(i0, r1);

        return $i10;

     label38:
        $i6 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i7 = $i6 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i7;

        $i8 = i0 + 1;

        $i9 = staticinvoke <javassist.bytecode.ByteArray: int readS16bit(byte[],int)>(r1, $i8);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitBranch(int,byte[],int)>(i0, r1, $i9);

        return 3;

     label39:
        $i4 = i0 + 1;

        $i5 = staticinvoke <javassist.bytecode.ByteArray: int read32bit(byte[],int)>(r1, $i4);

        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitGoto(int,byte[],int)>(i0, r1, $i5);

        return 5;

     label40:
        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitJSR(int,byte[])>(i0, r1);

        return 5;

     label41:
        return 1;
    }

    private int doWIDE(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, $i2, $i4, $i6, i8, i9;
        byte[] r1;
        short s1;
        byte $b3;
        javassist.bytecode.stackmap.TypeData$BasicType $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i2 = i0 + 1;

        $b3 = r1[$i2];

        s1 = $b3 & 255;

        lookupswitch(s1)
        {
            case 21: goto label01;
            case 22: goto label02;
            case 23: goto label03;
            case 24: goto label04;
            case 25: goto label05;
            case 54: goto label06;
            case 55: goto label07;
            case 56: goto label08;
            case 57: goto label09;
            case 58: goto label10;
            case 132: goto label11;
            case 169: goto label12;
            default: goto label13;
        };

     label01:
        $r9 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r9);

        goto label14;

     label02:
        $r8 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r8);

        goto label14;

     label03:
        $r7 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r7);

        goto label14;

     label04:
        $r6 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_XLOAD(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r6);

        goto label14;

     label05:
        $i6 = i0 + 2;

        i8 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i6);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doALOAD(int)>(i8);

        goto label14;

     label06:
        $r5 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r5);

        goto label14;

     label07:
        $r4 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r4);

        goto label14;

     label08:
        $r3 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r3);

        goto label14;

     label09:
        $r2 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void doWIDE_STORE(int,byte[],javassist.bytecode.stackmap.TypeData)>(i0, r1, $r2);

        goto label14;

     label10:
        $i4 = i0 + 2;

        i9 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i4);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doASTORE(int)>(i9);

        goto label14;

     label11:
        return 6;

     label12:
        virtualinvoke r0.<javassist.bytecode.stackmap.Tracer: void visitRET(int,byte[])>(i0, r1);

        goto label14;

     label13:
        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad WIDE instruction: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label14:
        return 4;
    }

    private void doWIDE_XLOAD(int, byte[], javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData r2;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: javassist.bytecode.stackmap.TypeData;

        $i2 = i0 + 2;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXLOAD(int,javassist.bytecode.stackmap.TypeData)>(i1, r2);

        return;
    }

    private void doWIDE_STORE(int, byte[], javassist.bytecode.stackmap.TypeData)
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2;
        byte[] r1;
        javassist.bytecode.stackmap.TypeData r2;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: javassist.bytecode.stackmap.TypeData;

        $i2 = i0 + 2;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: int doXSTORE(int,javassist.bytecode.stackmap.TypeData)>(i1, r2);

        return;
    }

    private int doPutField(int, byte[], boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] r1;
        boolean z0;
        java.lang.String r2, $r9;
        char c2;
        javassist.bytecode.ConstPool $r3;
        javassist.bytecode.stackmap.TypeData[] $r4, $r7;
        javassist.ClassPool $r5, $r10;
        javassist.bytecode.stackmap.TypeData $r6, $r8;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $i3 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i3);

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r2 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>(i1);

        $i4 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i5 = staticinvoke <javassist.bytecode.Descriptor: int dataSize(java.lang.String)>(r2);

        $i6 = $i4 - $i5;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i6;

        c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if c2 != 76 goto label1;

        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i8 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r8 = $r7[$i8];

        $r9 = staticinvoke <javassist.bytecode.stackmap.Tracer: java.lang.String getFieldClassName(java.lang.String,int)>(r2, 0);

        $r10 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>($r9, $r10);

        goto label2;

     label1:
        if c2 != 91 goto label2;

        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r6 = $r4[$i7];

        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r6.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r2, $r5);

     label2:
        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void setFieldTarget(boolean,int)>(z0, i1);

        return 3;
    }

    private int doGetField(int, byte[], boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2;
        byte[] r1;
        boolean z0;
        java.lang.String r2;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $i2 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void setFieldTarget(boolean,int)>(z0, i1);

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r2 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getFieldrefType(int)>(i1);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void pushMemberType(java.lang.String)>(r2);

        return 3;
    }

    private void setFieldTarget(boolean, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        boolean z0;
        int i0, $i1, $i2;
        java.lang.String r1;
        javassist.bytecode.ConstPool $r2;
        javassist.bytecode.stackmap.TypeData[] $r3;
        javassist.ClassPool $r4;
        javassist.bytecode.stackmap.TypeData $r5;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r1 = virtualinvoke $r2.<javassist.bytecode.ConstPool: java.lang.String getFieldrefClassName(int)>(i0);

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

        $r5 = $r3[$i2];

        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r5.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r1, $r4);

     label1:
        return;
    }

    private int doNEWARRAY(int, byte[])
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3;
        byte[] r1;
        byte $b4;
        short $s5;
        java.lang.RuntimeException $r2;
        java.lang.String r3;
        javassist.bytecode.stackmap.TypeData[] $r4;
        javassist.bytecode.stackmap.TypeData$ClassName $r5;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i2 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        i1 = $i2 - 1;

        $i3 = i0 + 1;

        $b4 = r1[$i3];

        $s5 = $b4 & 255;

        tableswitch($s5)
        {
            case 4: goto label01;
            case 5: goto label02;
            case 6: goto label03;
            case 7: goto label04;
            case 8: goto label05;
            case 9: goto label06;
            case 10: goto label07;
            case 11: goto label08;
            default: goto label09;
        };

     label01:
        r3 = "[Z";

        goto label10;

     label02:
        r3 = "[C";

        goto label10;

     label03:
        r3 = "[F";

        goto label10;

     label04:
        r3 = "[D";

        goto label10;

     label05:
        r3 = "[B";

        goto label10;

     label06:
        r3 = "[S";

        goto label10;

     label07:
        r3 = "[I";

        goto label10;

     label08:
        r3 = "[J";

        goto label10;

     label09:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("bad newarray");

        throw $r2;

     label10:
        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r5 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r5.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r3);

        $r4[i1] = $r5;

        return 2;
    }

    private int doMultiANewArray(int, byte[])
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i3, $i4, $i6, $i7, $i8, $i9, $i10;
        byte[] r1;
        short s2;
        java.lang.String r2, $r4;
        byte $b5;
        javassist.bytecode.ConstPool $r3;
        javassist.bytecode.stackmap.TypeData$ClassName $r5;
        javassist.bytecode.stackmap.TypeData[] $r6;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i3 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i3);

        $i4 = i0 + 3;

        $b5 = r1[$i4];

        s2 = $b5 & 255;

        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i6 = s2 - 1;

        $i8 = $i7 - $i6;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i8;

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        $r4 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i1);

        r2 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i9 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i10 = $i9 - 1;

        $r5 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r5.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r2);

        $r6[$i10] = $r5;

        return 4;
    }

    private int doInvokeMethod(int, byte[], boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.String r2, r3;
        javassist.bytecode.stackmap.TypeData r4;
        javassist.bytecode.ConstPool $r5, $r6;
        javassist.bytecode.stackmap.TypeData[] $r7;
        javassist.bytecode.stackmap.TypeData$UninitData $r8;
        javassist.bytecode.stackmap.TypeData$UninitTypeVar $r9;
        javassist.ClassPool $r10;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $i2 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r2 = virtualinvoke $r5.<javassist.bytecode.ConstPool: java.lang.String getMethodrefType(int)>(i1);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void checkParamTypes(java.lang.String,int)>(r2, 1);

        if z0 == 0 goto label3;

        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r3 = virtualinvoke $r6.<javassist.bytecode.ConstPool: java.lang.String getMethodrefClassName(int)>(i1);

        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i4 = $i3 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i4;

        r4 = $r7[$i4];

        $z1 = r4 instanceof javassist.bytecode.stackmap.TypeData$UninitTypeVar;

        if $z1 == 0 goto label1;

        $z3 = virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: boolean isUninit()>();

        if $z3 == 0 goto label1;

        $r9 = (javassist.bytecode.stackmap.TypeData$UninitTypeVar) r4;

        $i6 = virtualinvoke $r9.<javassist.bytecode.stackmap.TypeData$UninitTypeVar: int offset()>();

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void constructorCalled(javassist.bytecode.stackmap.TypeData,int)>(r4, $i6);

        goto label2;

     label1:
        $z2 = r4 instanceof javassist.bytecode.stackmap.TypeData$UninitData;

        if $z2 == 0 goto label2;

        $r8 = (javassist.bytecode.stackmap.TypeData$UninitData) r4;

        $i5 = virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData$UninitData: int offset()>();

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void constructorCalled(javassist.bytecode.stackmap.TypeData,int)>(r4, $i5);

     label2:
        $r10 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r3, $r10);

     label3:
        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void pushMemberType(java.lang.String)>(r2);

        return 3;
    }

    private void constructorCalled(javassist.bytecode.stackmap.TypeData, int)
    {
        javassist.bytecode.stackmap.Tracer r0;
        javassist.bytecode.stackmap.TypeData r1, $r4, $r6;
        int i0, $i1, $i2, i3, i4;
        javassist.bytecode.stackmap.TypeData[] $r2, $r3, $r5;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        i0 := @parameter1: int;

        virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: void constructorCalled(int)>(i0);

        i3 = 0;

     label1:
        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        if i3 >= $i1 goto label2;

        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r6 = $r5[i3];

        virtualinvoke $r6.<javassist.bytecode.stackmap.TypeData: void constructorCalled(int)>(i0);

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i2 = lengthof $r2;

        if i4 >= $i2 goto label4;

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r4 = $r3[i4];

        virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData: void constructorCalled(int)>(i0);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    private int doInvokeIntfMethod(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2, $i3, $i4;
        byte[] r1;
        java.lang.String r2, r3;
        javassist.bytecode.ConstPool $r4, $r5;
        javassist.bytecode.stackmap.TypeData[] $r6;
        javassist.ClassPool $r7;
        javassist.bytecode.stackmap.TypeData $r8;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i2 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        $r4 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r2 = virtualinvoke $r4.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefType(int)>(i1);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void checkParamTypes(java.lang.String,int)>(r2, 1);

        $r5 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r3 = virtualinvoke $r5.<javassist.bytecode.ConstPool: java.lang.String getInterfaceMethodrefClassName(int)>(i1);

        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i4 = $i3 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i4;

        $r8 = $r6[$i4];

        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>(r3, $r7);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void pushMemberType(java.lang.String)>(r2);

        return 5;
    }

    private int doInvokeDynamic(int, byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        int i0, i1, $i2;
        byte[] r1;
        java.lang.String r2;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $i2 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, $i2);

        $r3 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.ConstPool cpool>;

        r2 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getInvokeDynamicType(int)>(i1);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void checkParamTypes(java.lang.String,int)>(r2, 1);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void pushMemberType(java.lang.String)>(r2);

        return 5;
    }

    private void pushMemberType(java.lang.String)
    {
        javassist.bytecode.stackmap.Tracer r0;
        java.lang.String r1, $r4, $r6, $r17;
        javassist.bytecode.stackmap.TypeData[] r2;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12;
        char $c1, $c2;
        javassist.bytecode.stackmap.TypeData$ClassName $r3, $r5;
        javassist.bytecode.stackmap.TypeData$BasicType $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.IndexOutOfBoundsException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: java.lang.String;

        i10 = 0;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c1 != 40 goto label1;

        $i9 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(41);

        i10 = $i9 + 1;

        if i10 >= 1 goto label1;

        $r13 = new java.lang.IndexOutOfBoundsException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad descriptor: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        i0 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10);

        lookupswitch($c2)
        {
            case 68: goto label6;
            case 70: goto label5;
            case 74: goto label4;
            case 76: goto label3;
            case 86: goto label7;
            case 91: goto label2;
            default: goto label8;
        };

     label2:
        $r3 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i10);

        specialinvoke $r3.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r4);

        r2[i0] = $r3;

        goto label9;

     label3:
        $r5 = new javassist.bytecode.stackmap.TypeData$ClassName;

        $r6 = staticinvoke <javassist.bytecode.stackmap.Tracer: java.lang.String getFieldClassName(java.lang.String,int)>(r1, i10);

        specialinvoke $r5.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>($r6);

        r2[i0] = $r5;

        goto label9;

     label4:
        $r7 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType LONG>;

        r2[i0] = $r7;

        $i3 = i0 + 1;

        $r8 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i3] = $r8;

        $i4 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i5 = $i4 + 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i5;

        return;

     label5:
        $r9 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType FLOAT>;

        r2[i0] = $r9;

        goto label9;

     label6:
        $r10 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType DOUBLE>;

        r2[i0] = $r10;

        $i6 = i0 + 1;

        $r11 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        r2[$i6] = $r11;

        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i8 = $i7 + 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i8;

        return;

     label7:
        return;

     label8:
        $r12 = <javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData$BasicType INTEGER>;

        r2[i0] = $r12;

     label9:
        $i11 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i12 = $i11 + 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i12;

        return;
    }

    private static java.lang.String getFieldClassName(java.lang.String, int)
    {
        java.lang.String r0, $r1, $r2;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r2;
    }

    private void checkParamTypes(java.lang.String, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.Tracer r0;
        java.lang.String r1, $r4, $r5, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12;
        javassist.bytecode.stackmap.TypeData[] $r2, $r7;
        javassist.bytecode.stackmap.TypeData $r3, $r8;
        javassist.ClassPool $r6, $r10;
        java.lang.IndexOutOfBoundsException $r13;
        char c10;
        boolean z0;

        r0 := @this: javassist.bytecode.stackmap.Tracer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c10 != 41 goto label01;

        return;

     label01:
        i11 = i0;

        z0 = 0;

     label02:
        if c10 != 91 goto label03;

        z0 = 1;

        i11 = i11 + 1;

        c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i11);

        goto label02;

     label03:
        if c10 != 76 goto label04;

        $i9 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(59, i11);

        i12 = $i9 + 1;

        if i12 > 0 goto label05;

        $r13 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r13.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("bad descriptor");

        throw $r13;

     label04:
        i12 = i11 + 1;

     label05:
        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void checkParamTypes(java.lang.String,int)>(r1, i12);

        if z0 != 0 goto label07;

        if c10 == 74 goto label06;

        if c10 != 68 goto label07;

     label06:
        $i7 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i8 = $i7 - 2;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i8;

        goto label08;

     label07:
        $i1 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $i2 = $i1 - 1;

        r0.<javassist.bytecode.stackmap.Tracer: int stackTop> = $i2;

     label08:
        if z0 == 0 goto label09;

        $r7 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i6 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r8 = $r7[$i6];

        $r9 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i12);

        $r10 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r8.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>($r9, $r10);

        goto label10;

     label09:
        if c10 != 76 goto label10;

        $r2 = r0.<javassist.bytecode.stackmap.Tracer: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i3 = r0.<javassist.bytecode.stackmap.Tracer: int stackTop>;

        $r3 = $r2[$i3];

        $i5 = i0 + 1;

        $i4 = i12 - 1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i5, $i4);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r6 = r0.<javassist.bytecode.stackmap.Tracer: javassist.ClassPool classPool>;

        virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData: void setType(java.lang.String,javassist.ClassPool)>($r5, $r6);

     label10:
        return;
    }
}
