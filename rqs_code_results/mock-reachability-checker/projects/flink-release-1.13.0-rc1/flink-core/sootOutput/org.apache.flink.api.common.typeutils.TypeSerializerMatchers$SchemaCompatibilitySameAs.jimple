class org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs extends org.hamcrest.TypeSafeMatcher
{
    private final org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility;

    private void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility) $r2;

        r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility> = $r3;

        return;
    }

    protected boolean matchesSafely(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        $r2 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility>;

        $z0 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        if $z0 == 0 goto label1;

        $z7 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        return $z7;

     label1:
        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility>;

        $z1 = virtualinvoke $r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        if $z1 == 0 goto label2;

        $z6 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        return $z6;

     label2:
        $r4 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility>;

        $z2 = virtualinvoke $r4.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        if $z2 == 0 goto label3;

        $z5 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        return $z5;

     label3:
        $r5 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility>;

        $z3 = virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z3 == 0 goto label4;

        $z4 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        return $z4;

     label4:
        return 0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs r0;
        org.hamcrest.Description r1, $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("same compatibility as ");

        $r3 = r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility expectedCompatibility>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        return;
    }

    protected volatile boolean matchesSafely(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs r0;
        java.lang.Object r1;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: boolean matchesSafely(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)>($r2);

        return $z0;
    }

    void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility, org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1)
    {
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r1;
        org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1 r2;

        r0 := @this: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializerMatchers$1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializerMatchers$SchemaCompatibilitySameAs: void <init>(org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility)>(r1);

        return;
    }
}
