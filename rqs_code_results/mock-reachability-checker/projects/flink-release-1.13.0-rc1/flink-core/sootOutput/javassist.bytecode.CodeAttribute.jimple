public class javassist.bytecode.CodeAttribute extends javassist.bytecode.AttributeInfo implements javassist.bytecode.Opcode
{
    public static final java.lang.String tag;
    private int maxStack;
    private int maxLocals;
    private javassist.bytecode.ExceptionTable exceptions;
    private java.util.List attributes;

    public void <init>(javassist.bytecode.ConstPool, int, int, byte[], javassist.bytecode.ExceptionTable)
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.ConstPool r1;
        int i0, i1;
        byte[] r2;
        javassist.bytecode.ExceptionTable r3;
        java.util.ArrayList $r4;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: javassist.bytecode.ExceptionTable;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String)>(r1, "Code");

        r0.<javassist.bytecode.CodeAttribute: int maxStack> = i0;

        r0.<javassist.bytecode.CodeAttribute: int maxLocals> = i1;

        r0.<javassist.bytecode.CodeAttribute: byte[] info> = r2;

        r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions> = r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.CodeAttribute: java.util.List attributes> = $r4;

        return;
    }

    private void <init>(javassist.bytecode.ConstPool, javassist.bytecode.CodeAttribute, java.util.Map) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAttribute r0, r2;
        javassist.bytecode.ConstPool r1;
        java.util.Map r3;
        java.util.List r4, $r12;
        int i0, $i1, $i2, i3;
        javassist.bytecode.AttributeInfo r5, $r13;
        javassist.bytecode.ExceptionTable $r6, $r7, $r9;
        java.util.ArrayList $r8;
        byte[] $r10;
        java.lang.Object $r11;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.CodeAttribute;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,java.lang.String)>(r1, "Code");

        $i1 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        r0.<javassist.bytecode.CodeAttribute: int maxStack> = $i1;

        $i2 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        r0.<javassist.bytecode.CodeAttribute: int maxLocals> = $i2;

        $r6 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable getExceptionTable()>();

        $r7 = virtualinvoke $r6.<javassist.bytecode.ExceptionTable: javassist.bytecode.ExceptionTable copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, r3);

        r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.CodeAttribute: java.util.List attributes> = $r8;

        r4 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: java.util.List getAttributes()>();

        i0 = interfaceinvoke r4.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r11 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i3);

        r5 = (javassist.bytecode.AttributeInfo) $r11;

        $r12 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        $r13 = virtualinvoke r5.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, r3);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r9 = r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions>;

        $r10 = specialinvoke r2.<javassist.bytecode.CodeAttribute: byte[] copyCode(javassist.bytecode.ConstPool,java.util.Map,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>(r1, r3, $r9, r0);

        r0.<javassist.bytecode.CodeAttribute: byte[] info> = $r10;

        return;
    }

    void <init>(javassist.bytecode.ConstPool, int, java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.ConstPool r1;
        int i0, i2, i3, $i4, $i5, i6;
        java.io.DataInputStream r2;
        byte[] $r3, $r4, $r5;
        javassist.bytecode.ExceptionTable $r6;
        java.util.ArrayList $r7;
        java.util.List $r8;
        javassist.bytecode.AttributeInfo $r9;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        i0 := @parameter1: int;

        r2 := @parameter2: java.io.DataInputStream;

        $r3 = (byte[]) null;

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void <init>(javassist.bytecode.ConstPool,int,byte[])>(r1, i0, $r3);

        virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        $i4 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.CodeAttribute: int maxStack> = $i4;

        $i5 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.CodeAttribute: int maxLocals> = $i5;

        i2 = virtualinvoke r2.<java.io.DataInputStream: int readInt()>();

        $r4 = newarray (byte)[i2];

        r0.<javassist.bytecode.CodeAttribute: byte[] info> = $r4;

        $r5 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        virtualinvoke r2.<java.io.DataInputStream: void readFully(byte[])>($r5);

        $r6 = new javassist.bytecode.ExceptionTable;

        specialinvoke $r6.<javassist.bytecode.ExceptionTable: void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream)>(r1, r2);

        r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.CodeAttribute: java.util.List attributes> = $r7;

        i3 = virtualinvoke r2.<java.io.DataInputStream: int readUnsignedShort()>();

        i6 = 0;

     label1:
        if i6 >= i3 goto label2;

        $r8 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        $r9 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo read(javassist.bytecode.ConstPool,java.io.DataInputStream)>(r1, r2);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool, java.util.Map) throws javassist.bytecode.CodeAttribute$RuntimeCopyException
    {
        javassist.bytecode.CodeAttribute r0, $r4;
        javassist.bytecode.ConstPool r1;
        java.util.Map r2;
        javassist.bytecode.BadBytecode $r5;
        javassist.bytecode.CodeAttribute$RuntimeCopyException $r6;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

     label1:
        $r4 = new javassist.bytecode.CodeAttribute;

        specialinvoke $r4.<javassist.bytecode.CodeAttribute: void <init>(javassist.bytecode.ConstPool,javassist.bytecode.CodeAttribute,java.util.Map)>(r1, r0, r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new javassist.bytecode.CodeAttribute$RuntimeCopyException;

        specialinvoke $r6.<javassist.bytecode.CodeAttribute$RuntimeCopyException: void <init>(java.lang.String)>("bad bytecode. fatal?");

        throw $r6;

        catch javassist.bytecode.BadBytecode from label1 to label2 with label3;
    }

    public int length()
    {
        javassist.bytecode.CodeAttribute r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        javassist.bytecode.ExceptionTable $r2;
        java.util.List $r3;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        $i0 = lengthof $r1;

        $i1 = 18 + $i0;

        $r2 = r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions>;

        $i2 = virtualinvoke $r2.<javassist.bytecode.ExceptionTable: int size()>();

        $i3 = $i2 * 8;

        $i4 = $i1 + $i3;

        $r3 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        $i5 = staticinvoke <javassist.bytecode.AttributeInfo: int getLength(java.util.List)>($r3);

        $i6 = $i4 + $i5;

        return $i6;
    }

    void write(java.io.DataOutputStream) throws java.io.IOException
    {
        javassist.bytecode.CodeAttribute r0;
        java.io.DataOutputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2, $r3;
        javassist.bytecode.ExceptionTable $r4;
        java.util.List $r5, $r6;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: java.io.DataOutputStream;

        $i0 = r0.<javassist.bytecode.CodeAttribute: int name>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i1 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: int length()>();

        $i2 = $i1 - 6;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i2);

        $i3 = r0.<javassist.bytecode.CodeAttribute: int maxStack>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $i4 = r0.<javassist.bytecode.CodeAttribute: int maxLocals>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i4);

        $r2 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        $i5 = lengthof $r2;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i5);

        $r3 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        virtualinvoke r1.<java.io.DataOutputStream: void write(byte[])>($r3);

        $r4 = r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions>;

        virtualinvoke $r4.<javassist.bytecode.ExceptionTable: void write(java.io.DataOutputStream)>(r1);

        $r5 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        $i6 = interfaceinvoke $r5.<java.util.List: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i6);

        $r6 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void writeAll(java.util.List,java.io.DataOutputStream)>($r6, r1);

        return;
    }

    public byte[] get()
    {
        javassist.bytecode.CodeAttribute r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CodeAttribute.get()");

        throw $r1;
    }

    public void set(byte[])
    {
        javassist.bytecode.CodeAttribute r0;
        byte[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CodeAttribute.set()");

        throw $r2;
    }

    void renameClass(java.lang.String, java.lang.String)
    {
        javassist.bytecode.CodeAttribute r0;
        java.lang.String r1, r2;
        java.util.List $r3;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.lang.String,java.lang.String)>($r3, r1, r2);

        return;
    }

    void renameClass(java.util.Map)
    {
        javassist.bytecode.CodeAttribute r0;
        java.util.Map r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.util.Map)>($r2, r1);

        return;
    }

    void getRefClasses(java.util.Map)
    {
        javassist.bytecode.CodeAttribute r0;
        java.util.Map r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void getRefClasses(java.util.List,java.util.Map)>($r2, r1);

        return;
    }

    public java.lang.String getDeclaringClass()
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.ConstPool r1;
        java.lang.String $r2;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        $r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getClassName()>();

        return $r2;
    }

    public int getMaxStack()
    {
        javassist.bytecode.CodeAttribute r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $i0 = r0.<javassist.bytecode.CodeAttribute: int maxStack>;

        return $i0;
    }

    public void setMaxStack(int)
    {
        javassist.bytecode.CodeAttribute r0;
        int i0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.CodeAttribute: int maxStack> = i0;

        return;
    }

    public int computeMaxStack() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.CodeAnalyzer $r1;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = new javassist.bytecode.CodeAnalyzer;

        specialinvoke $r1.<javassist.bytecode.CodeAnalyzer: void <init>(javassist.bytecode.CodeAttribute)>(r0);

        $i0 = virtualinvoke $r1.<javassist.bytecode.CodeAnalyzer: int computeMaxStack()>();

        r0.<javassist.bytecode.CodeAttribute: int maxStack> = $i0;

        $i1 = r0.<javassist.bytecode.CodeAttribute: int maxStack>;

        return $i1;
    }

    public int getMaxLocals()
    {
        javassist.bytecode.CodeAttribute r0;
        int $i0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $i0 = r0.<javassist.bytecode.CodeAttribute: int maxLocals>;

        return $i0;
    }

    public void setMaxLocals(int)
    {
        javassist.bytecode.CodeAttribute r0;
        int i0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.CodeAttribute: int maxLocals> = i0;

        return;
    }

    public int getCodeLength()
    {
        javassist.bytecode.CodeAttribute r0;
        byte[] $r1;
        int $i0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public byte[] getCode()
    {
        javassist.bytecode.CodeAttribute r0;
        byte[] $r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        return $r1;
    }

    void setCode(byte[])
    {
        javassist.bytecode.CodeAttribute r0;
        byte[] r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: byte[];

        specialinvoke r0.<javassist.bytecode.AttributeInfo: void set(byte[])>(r1);

        return;
    }

    public javassist.bytecode.CodeIterator iterator()
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.CodeIterator $r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = new javassist.bytecode.CodeIterator;

        specialinvoke $r1.<javassist.bytecode.CodeIterator: void <init>(javassist.bytecode.CodeAttribute)>(r0);

        return $r1;
    }

    public javassist.bytecode.ExceptionTable getExceptionTable()
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.ExceptionTable $r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ExceptionTable exceptions>;

        return $r1;
    }

    public java.util.List getAttributes()
    {
        javassist.bytecode.CodeAttribute r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.CodeAttribute;

        $r1 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        return $r1;
    }

    public javassist.bytecode.AttributeInfo getAttribute(java.lang.String)
    {
        javassist.bytecode.CodeAttribute r0;
        java.lang.String r1;
        java.util.List $r2;
        javassist.bytecode.AttributeInfo $r3;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        $r3 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo lookup(java.util.List,java.lang.String)>($r2, r1);

        return $r3;
    }

    public void setAttribute(javassist.bytecode.StackMapTable)
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.StackMapTable r1;
        java.util.List $r2, $r4;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.StackMapTable;

        $r2 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r2, "StackMapTable");

        if r1 == null goto label1;

        $r4 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void setAttribute(javassist.bytecode.StackMap)
    {
        javassist.bytecode.CodeAttribute r0;
        javassist.bytecode.StackMap r1;
        java.util.List $r2, $r4;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.StackMap;

        $r2 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r2, "StackMap");

        if r1 == null goto label1;

        $r4 = r0.<javassist.bytecode.CodeAttribute: java.util.List attributes>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private byte[] copyCode(javassist.bytecode.ConstPool, java.util.Map, javassist.bytecode.ExceptionTable, javassist.bytecode.CodeAttribute) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAttribute r0, r4;
        javassist.bytecode.ConstPool r1, $r8;
        java.util.Map r2;
        javassist.bytecode.ExceptionTable r3;
        int i0;
        byte[] r5, $r7, $r9;
        javassist.bytecode.CodeAttribute$LdcEntry r6;

        r0 := @this: javassist.bytecode.CodeAttribute;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: javassist.bytecode.ExceptionTable;

        r4 := @parameter3: javassist.bytecode.CodeAttribute;

        i0 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: int getCodeLength()>();

        r5 = newarray (byte)[i0];

        r4.<javassist.bytecode.CodeAttribute: byte[] info> = r5;

        $r7 = r0.<javassist.bytecode.CodeAttribute: byte[] info>;

        $r8 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.ConstPool getConstPool()>();

        r6 = staticinvoke <javassist.bytecode.CodeAttribute: javassist.bytecode.CodeAttribute$LdcEntry copyCode(byte[],int,int,javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)>($r7, 0, i0, $r8, r5, r1, r2);

        $r9 = staticinvoke <javassist.bytecode.CodeAttribute$LdcEntry: byte[] doit(byte[],javassist.bytecode.CodeAttribute$LdcEntry,javassist.bytecode.ExceptionTable,javassist.bytecode.CodeAttribute)>(r5, r6, r3, r4);

        return $r9;
    }

    private static javassist.bytecode.CodeAttribute$LdcEntry copyCode(byte[], int, int, javassist.bytecode.ConstPool, byte[], javassist.bytecode.ConstPool, java.util.Map) throws javassist.bytecode.BadBytecode
    {
        byte[] r0, r2;
        int i0, i1, i2, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i22, $i24, i26, i28;
        javassist.bytecode.ConstPool r1, r3;
        java.util.Map r4;
        byte b3, $b7, $b14, $b17, $b21, $b23, $b25;
        short $s4, s27;
        javassist.bytecode.CodeAttribute$LdcEntry $r6, r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: javassist.bytecode.ConstPool;

        r2 := @parameter4: byte[];

        r3 := @parameter5: javassist.bytecode.ConstPool;

        r4 := @parameter6: java.util.Map;

        r7 = null;

        i26 = i0;

     label01:
        if i26 >= i1 goto label10;

        i2 = staticinvoke <javassist.bytecode.CodeIterator: int nextOpcode(byte[],int)>(r0, i26);

        b3 = r0[i26];

        r2[i26] = b3;

        $s4 = b3 & 255;

        lookupswitch($s4)
        {
            case 18: goto label03;
            case 19: goto label02;
            case 20: goto label02;
            case 178: goto label02;
            case 179: goto label02;
            case 180: goto label02;
            case 181: goto label02;
            case 182: goto label02;
            case 183: goto label02;
            case 184: goto label02;
            case 185: goto label05;
            case 186: goto label06;
            case 187: goto label02;
            case 189: goto label02;
            case 192: goto label02;
            case 193: goto label02;
            case 197: goto label07;
            default: goto label08;
        };

     label02:
        $i19 = i26 + 1;

        staticinvoke <javassist.bytecode.CodeAttribute: void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)>($i19, r0, r1, r2, r3, r4);

        goto label09;

     label03:
        $i20 = i26 + 1;

        $b21 = r0[$i20];

        s27 = $b21 & 255;

        i28 = virtualinvoke r1.<javassist.bytecode.ConstPool: int copy(int,javassist.bytecode.ConstPool,java.util.Map)>(s27, r3, r4);

        if i28 >= 256 goto label04;

        $i24 = i26 + 1;

        $b23 = (byte) i28;

        r2[$i24] = $b23;

        goto label09;

     label04:
        r2[i26] = 0;

        $i22 = i26 + 1;

        r2[$i22] = 0;

        $r6 = new javassist.bytecode.CodeAttribute$LdcEntry;

        specialinvoke $r6.<javassist.bytecode.CodeAttribute$LdcEntry: void <init>()>();

        $r6.<javassist.bytecode.CodeAttribute$LdcEntry: int where> = i26;

        $r6.<javassist.bytecode.CodeAttribute$LdcEntry: int index> = i28;

        $r6.<javassist.bytecode.CodeAttribute$LdcEntry: javassist.bytecode.CodeAttribute$LdcEntry next> = r7;

        r7 = $r6;

        goto label09;

     label05:
        $i12 = i26 + 1;

        staticinvoke <javassist.bytecode.CodeAttribute: void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)>($i12, r0, r1, r2, r3, r4);

        $i15 = i26 + 3;

        $i13 = i26 + 3;

        $b14 = r0[$i13];

        r2[$i15] = $b14;

        $i18 = i26 + 4;

        $i16 = i26 + 4;

        $b17 = r0[$i16];

        r2[$i18] = $b17;

        goto label09;

     label06:
        $i9 = i26 + 1;

        staticinvoke <javassist.bytecode.CodeAttribute: void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)>($i9, r0, r1, r2, r3, r4);

        $i10 = i26 + 3;

        r2[$i10] = 0;

        $i11 = i26 + 4;

        r2[$i11] = 0;

        goto label09;

     label07:
        $i5 = i26 + 1;

        staticinvoke <javassist.bytecode.CodeAttribute: void copyConstPoolInfo(int,byte[],javassist.bytecode.ConstPool,byte[],javassist.bytecode.ConstPool,java.util.Map)>($i5, r0, r1, r2, r3, r4);

        $i8 = i26 + 3;

        $i6 = i26 + 3;

        $b7 = r0[$i6];

        r2[$i8] = $b7;

        goto label09;

     label08:
        i26 = i26 + 1;

        if i26 >= i2 goto label09;

        $b25 = r0[i26];

        r2[i26] = $b25;

        goto label08;

     label09:
        i26 = i2;

        goto label01;

     label10:
        return r7;
    }

    private static void copyConstPoolInfo(int, byte[], javassist.bytecode.ConstPool, byte[], javassist.bytecode.ConstPool, java.util.Map)
    {
        int i0, $i3, $i6, $i7, $i10, i11, i12;
        byte[] r0, r2;
        javassist.bytecode.ConstPool r1, r3;
        java.util.Map r4;
        byte $b1, $b4, $b8, $b9;
        short $s2, $s5;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        r1 := @parameter2: javassist.bytecode.ConstPool;

        r2 := @parameter3: byte[];

        r3 := @parameter4: javassist.bytecode.ConstPool;

        r4 := @parameter5: java.util.Map;

        $b1 = r0[i0];

        $s2 = $b1 & 255;

        $i6 = $s2 << 8;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s5 = $b4 & 255;

        i11 = $i6 | $s5;

        i12 = virtualinvoke r1.<javassist.bytecode.ConstPool: int copy(int,javassist.bytecode.ConstPool,java.util.Map)>(i11, r3, r4);

        $i7 = i12 >> 8;

        $b8 = (byte) $i7;

        r2[i0] = $b8;

        $i10 = i0 + 1;

        $b9 = (byte) i12;

        r2[$i10] = $b9;

        return;
    }

    public void insertLocalVar(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeAttribute r0;
        int i0, i1, $i2, $i3;
        javassist.bytecode.CodeIterator r1;
        boolean $z0;

        r0 := @this: javassist.bytecode.CodeAttribute;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: javassist.bytecode.CodeIterator iterator()>();

     label1:
        $z0 = virtualinvoke r1.<javassist.bytecode.CodeIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex(javassist.bytecode.CodeIterator,int,int)>(r1, i0, i1);

        goto label1;

     label2:
        $i2 = virtualinvoke r0.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $i3 = $i2 + i1;

        virtualinvoke r0.<javassist.bytecode.CodeAttribute: void setMaxLocals(int)>($i3);

        return;
    }

    private static void shiftIndex(javassist.bytecode.CodeIterator, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        byte b4;

        r0 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int next()>();

        i3 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int byteAt(int)>(i2);

        if i3 >= 21 goto label01;

        return;

     label01:
        if i3 >= 79 goto label06;

        if i3 >= 26 goto label02;

        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex8(javassist.bytecode.CodeIterator,int,int,int,int)>(r0, i2, i3, i0, i1);

        goto label13;

     label02:
        if i3 >= 46 goto label03;

        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex0(javassist.bytecode.CodeIterator,int,int,int,int,int,int)>(r0, i2, i3, i0, i1, 26, 21);

        goto label13;

     label03:
        if i3 >= 54 goto label04;

        return;

     label04:
        if i3 >= 59 goto label05;

        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex8(javassist.bytecode.CodeIterator,int,int,int,int)>(r0, i2, i3, i0, i1);

        goto label13;

     label05:
        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex0(javassist.bytecode.CodeIterator,int,int,int,int,int,int)>(r0, i2, i3, i0, i1, 59, 54);

        goto label13;

     label06:
        if i3 != 132 goto label10;

        $i8 = i2 + 1;

        i16 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int byteAt(int)>($i8);

        if i16 >= i0 goto label07;

        return;

     label07:
        i17 = i16 + i1;

        if i17 >= 256 goto label08;

        $i15 = i2 + 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i17, $i15);

        goto label09;

     label08:
        $i9 = i2 + 2;

        $i10 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int byteAt(int)>($i9);

        b4 = (byte) $i10;

        i5 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int insertExGap(int)>(3);

        $i11 = i5 - 3;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(196, $i11);

        $i12 = i5 - 2;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(132, $i12);

        $i13 = i5 - 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i17, $i13);

        $i14 = i5 + 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(b4, $i14);

     label09:
        goto label13;

     label10:
        if i3 != 169 goto label11;

        staticinvoke <javassist.bytecode.CodeAttribute: void shiftIndex8(javassist.bytecode.CodeIterator,int,int,int,int)>(r0, i2, i3, i0, i1);

        goto label13;

     label11:
        if i3 != 196 goto label13;

        $i6 = i2 + 2;

        i18 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i6);

        if i18 >= i0 goto label12;

        return;

     label12:
        i19 = i18 + i1;

        $i7 = i2 + 2;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i19, $i7);

     label13:
        return;
    }

    private static void shiftIndex8(javassist.bytecode.CodeIterator, int, int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, i10;

        r0 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i5 = i0 + 1;

        i9 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int byteAt(int)>($i5);

        if i9 >= i2 goto label1;

        return;

     label1:
        i10 = i9 + i3;

        if i10 >= 256 goto label2;

        $i8 = i0 + 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i10, $i8);

        goto label3;

     label2:
        i4 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int insertExGap(int)>(2);

        $i6 = i4 - 2;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(196, $i6);

        $i7 = i4 - 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i1, $i7);

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i10, i4);

     label3:
        return;
    }

    private static void shiftIndex0(javassist.bytecode.CodeIterator, int, int, int, int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.CodeIterator r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;

        r0 := @parameter0: javassist.bytecode.CodeIterator;

        i0 := @parameter1: int;

        i12 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $i5 = i12 - i3;

        i13 = $i5 % 4;

        if i13 >= i1 goto label1;

        return;

     label1:
        i14 = i13 + i2;

        if i14 >= 4 goto label2;

        $i11 = i12 + i2;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>($i11, i0);

        goto label4;

     label2:
        $i6 = i12 - i3;

        $i7 = $i6 / 4;

        i15 = $i7 + i4;

        if i14 >= 256 goto label3;

        i16 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int insertExGap(int)>(1);

        $i10 = i16 - 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i15, $i10);

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i14, i16);

        goto label4;

     label3:
        i17 = virtualinvoke r0.<javassist.bytecode.CodeIterator: int insertExGap(int)>(3);

        $i8 = i17 - 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(196, $i8);

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void writeByte(int,int)>(i15, i17);

        $i9 = i17 + 1;

        virtualinvoke r0.<javassist.bytecode.CodeIterator: void write16bit(int,int)>(i14, $i9);

     label4:
        return;
    }

    public static void <clinit>()
    {
        <javassist.bytecode.CodeAttribute: java.lang.String tag> = "Code";

        return;
    }
}
