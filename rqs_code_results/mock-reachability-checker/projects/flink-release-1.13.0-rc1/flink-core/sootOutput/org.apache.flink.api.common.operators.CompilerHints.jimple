public class org.apache.flink.api.common.operators.CompilerHints extends java.lang.Object
{
    private long outputSize;
    private long outputCardinality;
    private float avgOutputRecordSize;
    private float filterFactor;
    private java.util.Set uniqueFields;

    public void <init>()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputSize> = -1L;

        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputCardinality> = -1L;

        r0.<org.apache.flink.api.common.operators.CompilerHints: float avgOutputRecordSize> = -1.0F;

        r0.<org.apache.flink.api.common.operators.CompilerHints: float filterFactor> = -1.0F;

        return;
    }

    public long getOutputSize()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        $l0 = r0.<org.apache.flink.api.common.operators.CompilerHints: long outputSize>;

        return $l0;
    }

    public void setOutputSize(long)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The output size cannot be smaller than zero.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputSize> = l0;

        return;
    }

    public long getOutputCardinality()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        long $l0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        $l0 = r0.<org.apache.flink.api.common.operators.CompilerHints: long outputCardinality>;

        return $l0;
    }

    public void setOutputCardinality(long)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The output cardinality cannot be smaller than zero.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputCardinality> = l0;

        return;
    }

    public float getAvgOutputRecordSize()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        float $f0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        $f0 = r0.<org.apache.flink.api.common.operators.CompilerHints: float avgOutputRecordSize>;

        return $f0;
    }

    public void setAvgOutputRecordSize(float)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size of produced records must be positive.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.operators.CompilerHints: float avgOutputRecordSize> = f0;

        return;
    }

    public float getFilterFactor()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        float $f0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        $f0 = r0.<org.apache.flink.api.common.operators.CompilerHints: float filterFactor>;

        return $f0;
    }

    public void setFilterFactor(float)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filter factor cannot be smaller than zero.");

        throw $r1;

     label1:
        r0.<org.apache.flink.api.common.operators.CompilerHints: float filterFactor> = f0;

        return;
    }

    public java.util.Set getUniqueFields()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        java.util.Set $r1;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        $r1 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        return $r1;
    }

    public void addUniqueField(org.apache.flink.api.common.operators.util.FieldSet)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        org.apache.flink.api.common.operators.util.FieldSet r1;
        java.util.Set $r2, $r3;
        java.util.HashSet $r4;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.FieldSet;

        $r2 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        if $r2 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields> = $r4;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addUniqueField(int)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        int i0;
        java.util.Set $r1, $r3;
        org.apache.flink.api.common.operators.util.FieldSet $r2;
        java.lang.Integer $r4;
        java.util.HashSet $r5;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        if $r1 != null goto label1;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields> = $r5;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        $r2 = new org.apache.flink.api.common.operators.util.FieldSet;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.flink.api.common.operators.util.FieldSet: void <init>(java.lang.Integer)>($r4);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void addUniqueFields(java.util.Set)
    {
        org.apache.flink.api.common.operators.CompilerHints r0;
        java.util.Set r1, $r2, $r3;
        java.util.HashSet $r4;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        if $r2 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields> = $r4;

     label1:
        $r3 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public void clearUniqueFields()
    {
        org.apache.flink.api.common.operators.CompilerHints r0;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields> = null;

        return;
    }

    protected void copyFrom(org.apache.flink.api.common.operators.CompilerHints)
    {
        org.apache.flink.api.common.operators.CompilerHints r0, r1;
        long $l0, $l1;
        float $f0, $f1;
        java.util.Set $r2, $r3, $r4, $r5, $r6, $r7;
        int $i2;
        java.util.HashSet $r8;

        r0 := @this: org.apache.flink.api.common.operators.CompilerHints;

        r1 := @parameter0: org.apache.flink.api.common.operators.CompilerHints;

        $l0 = r1.<org.apache.flink.api.common.operators.CompilerHints: long outputSize>;

        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputSize> = $l0;

        $l1 = r1.<org.apache.flink.api.common.operators.CompilerHints: long outputCardinality>;

        r0.<org.apache.flink.api.common.operators.CompilerHints: long outputCardinality> = $l1;

        $f0 = r1.<org.apache.flink.api.common.operators.CompilerHints: float avgOutputRecordSize>;

        r0.<org.apache.flink.api.common.operators.CompilerHints: float avgOutputRecordSize> = $f0;

        $f1 = r1.<org.apache.flink.api.common.operators.CompilerHints: float filterFactor>;

        r0.<org.apache.flink.api.common.operators.CompilerHints: float filterFactor> = $f1;

        $r2 = r1.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        if $r2 == null goto label3;

        $r3 = r1.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        $i2 = interfaceinvoke $r3.<java.util.Set: int size()>();

        if $i2 <= 0 goto label3;

        $r4 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        if $r4 != null goto label1;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields> = $r8;

        goto label2;

     label1:
        $r5 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

     label2:
        $r7 = r0.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        $r6 = r1.<org.apache.flink.api.common.operators.CompilerHints: java.util.Set uniqueFields>;

        interfaceinvoke $r7.<java.util.Set: boolean addAll(java.util.Collection)>($r6);

     label3:
        return;
    }
}
