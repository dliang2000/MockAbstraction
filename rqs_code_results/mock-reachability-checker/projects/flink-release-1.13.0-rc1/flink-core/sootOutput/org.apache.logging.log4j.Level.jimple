public final class org.apache.logging.log4j.Level extends java.lang.Object implements java.lang.Comparable, java.io.Serializable
{
    public static final org.apache.logging.log4j.Level OFF;
    public static final org.apache.logging.log4j.Level FATAL;
    public static final org.apache.logging.log4j.Level ERROR;
    public static final org.apache.logging.log4j.Level WARN;
    public static final org.apache.logging.log4j.Level INFO;
    public static final org.apache.logging.log4j.Level DEBUG;
    public static final org.apache.logging.log4j.Level TRACE;
    public static final org.apache.logging.log4j.Level ALL;
    public static final java.lang.String CATEGORY;
    private static final java.util.concurrent.ConcurrentMap LEVELS;
    private static final long serialVersionUID;
    private final java.lang.String name;
    private final int intLevel;
    private final org.apache.logging.log4j.spi.StandardLevel standardLevel;

    private void <init>(java.lang.String, int)
    {
        org.apache.logging.log4j.Level r0;
        java.lang.String r1, $r10;
        int i0;
        boolean $z0;
        org.apache.logging.log4j.spi.StandardLevel $r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <org.apache.logging.log4j.util.Strings: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null or empty Level name.");

        throw $r12;

     label1:
        if i0 >= 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal Level int less than zero.");

        throw $r11;

     label2:
        r0.<org.apache.logging.log4j.Level: java.lang.String name> = r1;

        r0.<org.apache.logging.log4j.Level: int intLevel> = i0;

        $r2 = staticinvoke <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel getStandardLevel(int)>(i0);

        r0.<org.apache.logging.log4j.Level: org.apache.logging.log4j.spi.StandardLevel standardLevel> = $r2;

        $r3 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r0);

        if $r4 == null goto label3;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been defined.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        return;
    }

    public int intLevel()
    {
        org.apache.logging.log4j.Level r0;
        int $i0;

        r0 := @this: org.apache.logging.log4j.Level;

        $i0 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        return $i0;
    }

    public org.apache.logging.log4j.spi.StandardLevel getStandardLevel()
    {
        org.apache.logging.log4j.Level r0;
        org.apache.logging.log4j.spi.StandardLevel $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = r0.<org.apache.logging.log4j.Level: org.apache.logging.log4j.spi.StandardLevel standardLevel>;

        return $r1;
    }

    public boolean isInRange(org.apache.logging.log4j.Level, org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.Level r0, r1, r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        r2 := @parameter1: org.apache.logging.log4j.Level;

        $i1 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i0 = r1.<org.apache.logging.log4j.Level: int intLevel>;

        if $i1 < $i0 goto label1;

        $i3 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i2 = r2.<org.apache.logging.log4j.Level: int intLevel>;

        if $i3 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLessSpecificThan(org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.Level r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        $i1 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i0 = r1.<org.apache.logging.log4j.Level: int intLevel>;

        if $i1 < $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isMoreSpecificThan(org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.Level r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        $i1 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i0 = r1.<org.apache.logging.log4j.Level: int intLevel>;

        if $i1 > $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.logging.log4j.Level clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.logging.log4j.Level r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>()>();

        throw $r1;
    }

    public int compareTo(org.apache.logging.log4j.Level)
    {
        org.apache.logging.log4j.Level r0, r1;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: org.apache.logging.log4j.Level;

        $i1 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i0 = r1.<org.apache.logging.log4j.Level: int intLevel>;

        if $i1 >= $i0 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        $i3 = r0.<org.apache.logging.log4j.Level: int intLevel>;

        $i2 = r1.<org.apache.logging.log4j.Level: int intLevel>;

        if $i3 <= $i2 goto label2;

        $b4 = 1;

        goto label3;

     label2:
        $b4 = 0;

     label3:
        return $b4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.Level r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.logging.log4j.Level;

        if $z0 == 0 goto label1;

        if r1 != r0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Class getDeclaringClass()
    {
        org.apache.logging.log4j.Level r0;

        r0 := @this: org.apache.logging.log4j.Level;

        return class "Lorg/apache/logging/log4j/Level;";
    }

    public int hashCode()
    {
        org.apache.logging.log4j.Level r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = r0.<org.apache.logging.log4j.Level: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String name()
    {
        org.apache.logging.log4j.Level r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = r0.<org.apache.logging.log4j.Level: java.lang.String name>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.Level r0;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = r0.<org.apache.logging.log4j.Level: java.lang.String name>;

        return $r1;
    }

    public static org.apache.logging.log4j.Level forName(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        org.apache.logging.log4j.Level r1, $r5, $r9;
        java.util.concurrent.ConcurrentMap $r3, $r7;
        java.lang.Object $r4, $r8;
        java.lang.IllegalStateException $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (org.apache.logging.log4j.Level) $r4;

        if r1 == null goto label1;

        return r1;

     label1:
        $r5 = new org.apache.logging.log4j.Level;

        specialinvoke $r5.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>(r0, i0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        $r9 = (org.apache.logging.log4j.Level) $r8;

        return $r9;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public static org.apache.logging.log4j.Level getLevel(java.lang.String)
    {
        java.lang.String r0;
        java.util.concurrent.ConcurrentMap $r1;
        java.lang.Object $r2;
        org.apache.logging.log4j.Level $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.logging.log4j.Level) $r2;

        return $r3;
    }

    public static org.apache.logging.log4j.Level toLevel(java.lang.String)
    {
        java.lang.String r0;
        org.apache.logging.log4j.Level $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level DEBUG>;

        $r2 = staticinvoke <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level toLevel(java.lang.String,org.apache.logging.log4j.Level)>(r0, $r1);

        return $r2;
    }

    public static org.apache.logging.log4j.Level toLevel(java.lang.String, org.apache.logging.log4j.Level)
    {
        java.lang.String r0, $r4;
        org.apache.logging.log4j.Level r1, r2, $r6;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.logging.log4j.Level;

        if r0 != null goto label1;

        return r1;

     label1:
        $r3 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r4 = staticinvoke <org.apache.logging.log4j.Level: java.lang.String toUpperCase(java.lang.String)>(r0);

        $r5 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (org.apache.logging.log4j.Level) $r5;

        if r2 != null goto label2;

        $r6 = r1;

        goto label3;

     label2:
        $r6 = r2;

     label3:
        return $r6;
    }

    private static java.lang.String toUpperCase(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Locale $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        return $r2;
    }

    public static org.apache.logging.log4j.Level[] values()
    {
        java.util.Collection r0;
        java.util.concurrent.ConcurrentMap $r1;
        int $i0;
        org.apache.logging.log4j.Level[] $r2, $r4;
        java.lang.Object[] $r3;

        $r1 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        r0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r2 = newarray (org.apache.logging.log4j.Level)[$i0];

        $r3 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.apache.logging.log4j.Level[]) $r3;

        return $r4;
    }

    public static org.apache.logging.log4j.Level valueOf(java.lang.String)
    {
        java.lang.String r0, r1, $r11;
        org.apache.logging.log4j.Level r2;
        java.util.concurrent.ConcurrentMap $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, "No level name given.");

        r1 = staticinvoke <org.apache.logging.log4j.Level: java.lang.String toUpperCase(java.lang.String)>(r0);

        $r4 = <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.logging.log4j.Level) $r5;

        if r2 == null goto label1;

        return r2;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown level constant [");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;
    }

    public static java.lang.Enum valueOf(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Enum $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    protected java.lang.Object readResolve()
    {
        org.apache.logging.log4j.Level r0, $r2;
        java.lang.String $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = r0.<org.apache.logging.log4j.Level: java.lang.String name>;

        $r2 = staticinvoke <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level valueOf(java.lang.String)>($r1);

        return $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.logging.log4j.Level r0, $r1;

        r0 := @this: org.apache.logging.log4j.Level;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.Level: org.apache.logging.log4j.Level clone()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.logging.log4j.Level r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.Level;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.logging.log4j.Level) r1;

        $i0 = virtualinvoke r0.<org.apache.logging.log4j.Level: int compareTo(org.apache.logging.log4j.Level)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        org.apache.logging.log4j.Level $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;
        org.apache.logging.log4j.spi.StandardLevel $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        <org.apache.logging.log4j.Level: long serialVersionUID> = 1581082L;

        <org.apache.logging.log4j.Level: java.lang.String CATEGORY> = "Level";

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.logging.log4j.Level: java.util.concurrent.ConcurrentMap LEVELS> = $r0;

        $r1 = new org.apache.logging.log4j.Level;

        $r2 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel OFF>;

        $i0 = virtualinvoke $r2.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r1.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("OFF", $i0);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level OFF> = $r1;

        $r3 = new org.apache.logging.log4j.Level;

        $r4 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel FATAL>;

        $i1 = virtualinvoke $r4.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r3.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("FATAL", $i1);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level FATAL> = $r3;

        $r5 = new org.apache.logging.log4j.Level;

        $r6 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel ERROR>;

        $i2 = virtualinvoke $r6.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r5.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("ERROR", $i2);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level ERROR> = $r5;

        $r7 = new org.apache.logging.log4j.Level;

        $r8 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel WARN>;

        $i3 = virtualinvoke $r8.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r7.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("WARN", $i3);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level WARN> = $r7;

        $r9 = new org.apache.logging.log4j.Level;

        $r10 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel INFO>;

        $i4 = virtualinvoke $r10.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r9.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("INFO", $i4);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level INFO> = $r9;

        $r11 = new org.apache.logging.log4j.Level;

        $r12 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel DEBUG>;

        $i5 = virtualinvoke $r12.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r11.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("DEBUG", $i5);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level DEBUG> = $r11;

        $r13 = new org.apache.logging.log4j.Level;

        $r14 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel TRACE>;

        $i6 = virtualinvoke $r14.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r13.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("TRACE", $i6);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level TRACE> = $r13;

        $r15 = new org.apache.logging.log4j.Level;

        $r16 = <org.apache.logging.log4j.spi.StandardLevel: org.apache.logging.log4j.spi.StandardLevel ALL>;

        $i7 = virtualinvoke $r16.<org.apache.logging.log4j.spi.StandardLevel: int intLevel()>();

        specialinvoke $r15.<org.apache.logging.log4j.Level: void <init>(java.lang.String,int)>("ALL", $i7);

        <org.apache.logging.log4j.Level: org.apache.logging.log4j.Level ALL> = $r15;

        return;
    }
}
