public class org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot extends org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot
{
    public static final long serialVersionUID;
    private static final int VERSION;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot r0;
        java.lang.Class r1;
        java.util.LinkedHashMap $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.ValueSerializer: java.util.LinkedHashMap access$000(java.lang.Class)>(r1);

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.KryoRegistrationSerializerConfigSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap)>(r1, $r2);

        return;
    }

    public int getVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot $r2;
        java.lang.Class $r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = new org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        specialinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: void <init>(java.lang.Class)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot: int VERSION> = 1;

        <org.apache.flink.api.java.typeutils.runtime.ValueSerializer$ValueSerializerConfigSnapshot: long serialVersionUID> = 2277251654485371327L;

        return;
    }
}
