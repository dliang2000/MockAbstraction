public class org.mockito.internal.configuration.ClassPathLoader extends java.lang.Object
{
    public static final java.lang.String MOCKITO_CONFIGURATION_CLASS_NAME;

    public void <init>()
    {
        org.mockito.internal.configuration.ClassPathLoader r0;

        r0 := @this: org.mockito.internal.configuration.ClassPathLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.mockito.configuration.IMockitoConfiguration loadConfiguration()
    {
        org.mockito.internal.configuration.ClassPathLoader r0;
        java.lang.Class r1, $r11;
        java.lang.Object $r2;
        org.mockito.configuration.IMockitoConfiguration $r3;
        java.lang.Exception $r4;
        org.mockito.exceptions.misusing.MockitoConfigurationException $r5, $r8;
        java.lang.ClassNotFoundException $r6;
        java.lang.ClassCastException $r7;
        java.lang.StringBuilder $r9, $r10, $r13, $r14;
        java.lang.String $r12, $r15;

        r0 := @this: org.mockito.internal.configuration.ClassPathLoader;

     label1:
        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.mockito.configuration.MockitoConfiguration");

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        return null;

     label4:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (org.mockito.configuration.IMockitoConfiguration) $r2;

     label5:
        return $r3;

     label6:
        $r7 := @caughtexception;

        $r8 = new org.mockito.exceptions.misusing.MockitoConfigurationException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MockitoConfiguration class must implement ");

        $r11 = class "Lorg/mockito/configuration/IMockitoConfiguration;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interface.");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.mockito.exceptions.misusing.MockitoConfigurationException: void <init>(java.lang.String,java.lang.Exception)>($r15, $r7);

        throw $r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new org.mockito.exceptions.misusing.MockitoConfigurationException;

        specialinvoke $r5.<org.mockito.exceptions.misusing.MockitoConfigurationException: void <init>(java.lang.String,java.lang.Exception)>("Unable to instantiate org.mockito.configuration.MockitoConfiguration class. Does it have a safe, no-arg constructor?", $r4);

        throw $r5;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label4 to label5 with label6;
        catch java.lang.Exception from label4 to label5 with label7;
    }

    public static void <clinit>()
    {
        <org.mockito.internal.configuration.ClassPathLoader: java.lang.String MOCKITO_CONFIGURATION_CLASS_NAME> = "org.mockito.configuration.MockitoConfiguration";

        return;
    }
}
