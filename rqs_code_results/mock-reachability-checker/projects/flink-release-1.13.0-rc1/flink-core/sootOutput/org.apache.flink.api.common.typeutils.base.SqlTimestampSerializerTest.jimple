public class org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.SqlTimestampSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        return 12;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        return class "Ljava/sql/Timestamp;";
    }

    protected java.sql.Timestamp[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;
        java.sql.Timestamp[] $r1;
        java.sql.Timestamp $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        $r1 = newarray (java.sql.Timestamp)[8];

        $r2 = new java.sql.Timestamp;

        specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>(0L);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1970-01-01 00:00:00.000");

        $r1[1] = $r3;

        $r4 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123");

        $r1[2] = $r4;

        $r5 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123000001");

        $r1[3] = $r5;

        $r6 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("1990-10-14 02:42:25.123000002");

        $r1[4] = $r6;

        $r7 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2013-08-12 14:15:59.478");

        $r1[5] = $r7;

        $r8 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2013-08-12 14:15:59.479");

        $r1[6] = $r8;

        $r9 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>("2040-05-12 18:00:45.999");

        $r1[7] = $r9;

        return $r1;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest r0;
        java.sql.Timestamp[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.SqlTimestampSerializerTest: java.sql.Timestamp[] getTestData()>();

        return $r1;
    }
}
