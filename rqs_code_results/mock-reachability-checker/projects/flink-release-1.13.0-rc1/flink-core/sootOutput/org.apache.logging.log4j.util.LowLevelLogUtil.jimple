final class org.apache.logging.log4j.util.LowLevelLogUtil extends java.lang.Object
{
    private static java.io.PrintWriter writer;

    public static void log(java.lang.String)
    {
        java.lang.String r0;
        java.io.PrintWriter $r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $r1 = <org.apache.logging.log4j.util.LowLevelLogUtil: java.io.PrintWriter writer>;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>(r0);

     label1:
        return;
    }

    public static void logException(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter $r1;

        r0 := @parameter0: java.lang.Throwable;

        if r0 == null goto label1;

        $r1 = <org.apache.logging.log4j.util.LowLevelLogUtil: java.io.PrintWriter writer>;

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r1);

     label1:
        return;
    }

    public static void logException(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void log(java.lang.String)>(r0);

        staticinvoke <org.apache.logging.log4j.util.LowLevelLogUtil: void logException(java.lang.Throwable)>(r1);

        return;
    }

    public static void setOutputStream(java.io.OutputStream)
    {
        java.io.OutputStream r0, $r3;
        java.io.PrintWriter $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = new java.io.PrintWriter;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r3 = (java.io.OutputStream) $r2;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r3, 1);

        <org.apache.logging.log4j.util.LowLevelLogUtil: java.io.PrintWriter writer> = $r1;

        return;
    }

    public static void setWriter(java.io.Writer)
    {
        java.io.Writer r0, $r3;
        java.io.PrintWriter $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.io.Writer;

        $r1 = new java.io.PrintWriter;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r3 = (java.io.Writer) $r2;

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r3, 1);

        <org.apache.logging.log4j.util.LowLevelLogUtil: java.io.PrintWriter writer> = $r1;

        return;
    }

    private void <init>()
    {
        org.apache.logging.log4j.util.LowLevelLogUtil r0;

        r0 := @this: org.apache.logging.log4j.util.LowLevelLogUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.io.PrintWriter $r0;
        java.io.PrintStream $r1;

        $r0 = new java.io.PrintWriter;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r0.<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>($r1, 1);

        <org.apache.logging.log4j.util.LowLevelLogUtil: java.io.PrintWriter writer> = $r0;

        return;
    }
}
