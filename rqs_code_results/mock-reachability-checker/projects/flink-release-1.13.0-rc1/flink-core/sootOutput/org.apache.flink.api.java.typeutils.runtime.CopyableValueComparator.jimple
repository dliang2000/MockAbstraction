public class org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator extends org.apache.flink.api.common.typeutils.TypeComparator
{
    private static final long serialVersionUID;
    private final java.lang.Class type;
    private final boolean ascendingComparison;
    private transient org.apache.flink.types.CopyableValue reference;
    private transient org.apache.flink.types.CopyableValue tempReference;
    private final org.apache.flink.api.common.typeutils.TypeComparator[] comparators;

    public void <init>(boolean, java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        boolean z0;
        java.lang.Class r1;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r2;
        java.lang.Object $r3;
        org.apache.flink.types.CopyableValue $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeComparator: void <init>()>();

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r2[0] = r0;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators> = $r2;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: java.lang.Class type> = r1;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison> = z0;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>(r1, class "Lorg/apache/flink/types/CopyableValue;");

        $r4 = (org.apache.flink.types.CopyableValue) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference> = $r4;

        return;
    }

    public int hash(org.apache.flink.types.CopyableValue)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public void setReference(org.apache.flink.types.CopyableValue)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        interfaceinvoke r1.<org.apache.flink.types.CopyableValue: void copyTo(java.lang.Object)>($r2);

        return;
    }

    public boolean equalToReference(org.apache.flink.types.CopyableValue)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public int compareToReference(org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0, $r3;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        org.apache.flink.types.CopyableValue r2, $r4;
        int i0, $i1;
        java.lang.Comparable $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeComparator;

        $r3 = (org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator) r1;

        r2 = $r3.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        $r5 = (java.lang.Comparable) r2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        i0 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compare(org.apache.flink.types.CopyableValue, org.apache.flink.types.CopyableValue)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1, r2;
        int i0, $i1;
        java.lang.Comparable $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        r2 := @parameter1: org.apache.flink.types.CopyableValue;

        $r3 = (java.lang.Comparable) r1;

        i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        int i0, $i1;
        org.apache.flink.types.CopyableValue $r3, $r4, $r5, $r6, $r7, $r11;
        java.lang.Comparable $r8;
        boolean $z0;
        java.lang.Class $r9;
        java.lang.Object $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue tempReference>;

        if $r3 != null goto label1;

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: java.lang.Class type>;

        $r10 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>($r9, class "Lorg/apache/flink/types/CopyableValue;");

        $r11 = (org.apache.flink.types.CopyableValue) $r10;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue tempReference> = $r11;

     label1:
        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        interfaceinvoke $r4.<org.apache.flink.types.CopyableValue: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue tempReference>;

        interfaceinvoke $r5.<org.apache.flink.types.CopyableValue: void read(org.apache.flink.core.memory.DataInputView)>(r2);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        $r8 = (java.lang.Comparable) $r6;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue tempReference>;

        i0 = interfaceinvoke $r8.<java.lang.Comparable: int compareTo(java.lang.Object)>($r7);

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label2;

        $i1 = i0;

        goto label3;

     label2:
        $i1 = neg i0;

     label3:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Class $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $r2 = class "Lorg/apache/flink/types/NormalizableKey;";

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: java.lang.Class type>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        return $z0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.NormalizableKey r1;
        org.apache.flink.types.CopyableValue $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference>;

        r1 = (org.apache.flink.types.NormalizableKey) $r2;

        $i0 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int getMaxNormalizedKeyLen()>();

        return $i0;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: int getNormalizeKeyLen()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void putNormalizedKey(org.apache.flink.types.CopyableValue, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.NormalizableKey r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = (org.apache.flink.types.NormalizableKey) r1;

        interfaceinvoke r3.<org.apache.flink.types.NormalizableKey: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r2, i0, i1);

        return;
    }

    public boolean invertNormalizedKey()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0, $r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $z0 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean ascendingComparison>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: java.lang.Class type>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void <init>(boolean,java.lang.Class)>($z0, $r2);

        return $r1;
    }

    public int extractKeys(java.lang.Object, java.lang.Object[], int)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2[i0] = r1;

        return 1;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator[] getFlatComparators()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.api.common.typeutils.TypeComparator[] comparators>;

        return $r1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        return 0;
    }

    public void writeWithKeyNormalization(org.apache.flink.types.CopyableValue, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public org.apache.flink.types.CopyableValue readWithKeyDenormalization(org.apache.flink.types.CopyableValue, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        org.apache.flink.types.CopyableValue r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: org.apache.flink.types.CopyableValue;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.io.ObjectInputStream r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.apache.flink.types.CopyableValue $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: java.lang.Class type>;

        $r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>($r2, class "Lorg/apache/flink/types/CopyableValue;");

        $r4 = (org.apache.flink.types.CopyableValue) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue reference> = $r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue tempReference> = null;

        return;
    }

    public volatile java.lang.Object readWithKeyDenormalization(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        org.apache.flink.types.CopyableValue $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = (org.apache.flink.types.CopyableValue) r1;

        $r4 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: org.apache.flink.types.CopyableValue readWithKeyDenormalization(org.apache.flink.types.CopyableValue,org.apache.flink.core.memory.DataInputView)>($r3, r2);

        return $r4;
    }

    public volatile void writeWithKeyNormalization(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        org.apache.flink.types.CopyableValue $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = (org.apache.flink.types.CopyableValue) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void writeWithKeyNormalization(org.apache.flink.types.CopyableValue,org.apache.flink.core.memory.DataOutputView)>($r3, r2);

        return;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        org.apache.flink.types.CopyableValue $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (org.apache.flink.types.CopyableValue) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void putNormalizedKey(org.apache.flink.types.CopyableValue,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.CopyableValue $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.CopyableValue) r1;

        $r3 = (org.apache.flink.types.CopyableValue) r2;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: int compare(org.apache.flink.types.CopyableValue,org.apache.flink.types.CopyableValue)>($r4, $r3);

        return $i0;
    }

    public volatile boolean equalToReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.CopyableValue $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.CopyableValue) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: boolean equalToReference(org.apache.flink.types.CopyableValue)>($r2);

        return $z0;
    }

    public volatile void setReference(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.CopyableValue $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.CopyableValue) r1;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: void setReference(org.apache.flink.types.CopyableValue)>($r2);

        return;
    }

    public volatile int hash(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator r0;
        java.lang.Object r1;
        org.apache.flink.types.CopyableValue $r2;
        int $i0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.CopyableValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: int hash(org.apache.flink.types.CopyableValue)>($r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.CopyableValueComparator: long serialVersionUID> = 1L;

        return;
    }
}
