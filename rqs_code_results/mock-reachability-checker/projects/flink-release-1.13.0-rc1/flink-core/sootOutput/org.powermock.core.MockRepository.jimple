public class org.powermock.core.MockRepository extends java.lang.Object
{
    private static java.util.Set objectsToAutomaticallyReplayAndVerify;
    private static java.util.Map newSubstitutions;
    private static java.util.Map classMocks;
    private static java.util.Map instanceMocks;
    private static java.util.Map substituteReturnValues;
    private static java.util.Map methodProxies;
    private static java.util.Set suppressStaticInitializers;
    private static java.util.Map additionalState;
    private static final java.util.Set suppressConstructor;
    private static final java.util.Set suppressMethod;
    private static final java.util.Set suppressField;
    private static final java.util.Set suppressFieldTypes;
    private static final java.util.Set afterMethodRunners;

    public void <init>()
    {
        org.powermock.core.MockRepository r0;

        r0 := @this: org.powermock.core.MockRepository;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized void clear()
    {
        java.util.Iterator r0;
        java.lang.Runnable r1;
        java.util.Map $r2, $r3, $r4, $r6, $r9, $r12;
        java.util.Set $r5, $r7, $r8, $r10, $r11, $r13, $r14;
        boolean $z0;
        java.lang.Object $r15;

        $r2 = <org.powermock.core.MockRepository: java.util.Map newSubstitutions>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = <org.powermock.core.MockRepository: java.util.Map instanceMocks>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        $r5 = <org.powermock.core.MockRepository: java.util.Set objectsToAutomaticallyReplayAndVerify>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        $r6 = <org.powermock.core.MockRepository: java.util.Map additionalState>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        $r7 = <org.powermock.core.MockRepository: java.util.Set suppressConstructor>;

        interfaceinvoke $r7.<java.util.Set: void clear()>();

        $r8 = <org.powermock.core.MockRepository: java.util.Set suppressMethod>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

        $r9 = <org.powermock.core.MockRepository: java.util.Map substituteReturnValues>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        $r10 = <org.powermock.core.MockRepository: java.util.Set suppressField>;

        interfaceinvoke $r10.<java.util.Set: void clear()>();

        $r11 = <org.powermock.core.MockRepository: java.util.Set suppressFieldTypes>;

        interfaceinvoke $r11.<java.util.Set: void clear()>();

        $r12 = <org.powermock.core.MockRepository: java.util.Map methodProxies>;

        interfaceinvoke $r12.<java.util.Map: void clear()>();

        $r13 = <org.powermock.core.MockRepository: java.util.Set afterMethodRunners>;

        r0 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r15 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.Runnable) $r15;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        $r14 = <org.powermock.core.MockRepository: java.util.Set afterMethodRunners>;

        interfaceinvoke $r14.<java.util.Set: void clear()>();

        return;
    }

    public static void remove(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r1, $r2, $r4, $r5, $r6, $r8;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r4 = <org.powermock.core.MockRepository: java.util.Map newSubstitutions>;

        $z2 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z2 == 0 goto label1;

        $r8 = <org.powermock.core.MockRepository: java.util.Map newSubstitutions>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

     label1:
        $r5 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        $z3 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z3 == 0 goto label3;

        $r6 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        goto label3;

     label2:
        $r1 = <org.powermock.core.MockRepository: java.util.Map instanceMocks>;

        $z1 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r2 = <org.powermock.core.MockRepository: java.util.Map instanceMocks>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

     label3:
        return;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl getStaticMethodInvocationControl(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.powermock.core.spi.MethodInvocationControl $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.powermock.core.spi.MethodInvocationControl) $r2;

        return $r3;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl putStaticMethodInvocationControl(java.lang.Class, org.powermock.core.spi.MethodInvocationControl)
    {
        java.lang.Class r0;
        org.powermock.core.spi.MethodInvocationControl r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.powermock.core.spi.MethodInvocationControl;

        $r2 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r4 = (org.powermock.core.spi.MethodInvocationControl) $r3;

        return $r4;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl removeClassMethodInvocationControl(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.powermock.core.spi.MethodInvocationControl $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (org.powermock.core.spi.MethodInvocationControl) $r2;

        return $r3;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl getInstanceMethodInvocationControl(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        java.util.Map $r1;
        org.powermock.core.spi.MethodInvocationControl $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = <org.powermock.core.MockRepository: java.util.Map instanceMocks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.powermock.core.spi.MethodInvocationControl) $r2;

        return $r3;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl putInstanceMethodInvocationControl(java.lang.Object, org.powermock.core.spi.MethodInvocationControl)
    {
        java.lang.Object r0, $r3;
        org.powermock.core.spi.MethodInvocationControl r1, $r4;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.powermock.core.spi.MethodInvocationControl;

        $r2 = <org.powermock.core.MockRepository: java.util.Map instanceMocks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r4 = (org.powermock.core.spi.MethodInvocationControl) $r3;

        return $r4;
    }

    public static synchronized org.powermock.core.spi.MethodInvocationControl removeInstanceMethodInvocationControl(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.powermock.core.spi.MethodInvocationControl $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.core.MockRepository: java.util.Map classMocks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (org.powermock.core.spi.MethodInvocationControl) $r2;

        return $r3;
    }

    public static synchronized org.powermock.core.spi.NewInvocationControl getNewInstanceControl(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.powermock.core.spi.NewInvocationControl $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.core.MockRepository: java.util.Map newSubstitutions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.powermock.core.spi.NewInvocationControl) $r2;

        return $r3;
    }

    public static synchronized org.powermock.core.spi.NewInvocationControl putNewInstanceControl(java.lang.Class, org.powermock.core.spi.NewInvocationControl)
    {
        java.lang.Class r0;
        org.powermock.core.spi.NewInvocationControl r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: org.powermock.core.spi.NewInvocationControl;

        $r2 = <org.powermock.core.MockRepository: java.util.Map newSubstitutions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r4 = (org.powermock.core.spi.NewInvocationControl) $r3;

        return $r4;
    }

    public static synchronized void addSuppressStaticInitializer(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressStaticInitializers>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static synchronized void removeSuppressStaticInitializer(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressStaticInitializers>;

        interfaceinvoke $r1.<java.util.Set: boolean remove(java.lang.Object)>(r0);

        return;
    }

    public static synchronized boolean shouldSuppressStaticInitializerFor(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressStaticInitializers>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public static synchronized java.util.Set getObjectsToAutomaticallyReplayAndVerify()
    {
        java.util.Set $r0, $r1;

        $r0 = <org.powermock.core.MockRepository: java.util.Set objectsToAutomaticallyReplayAndVerify>;

        $r1 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r0);

        return $r1;
    }

    public static synchronized transient void addObjectsToAutomaticallyReplayAndVerify(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = <org.powermock.core.MockRepository: java.util.Set objectsToAutomaticallyReplayAndVerify>;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r1, r0);

        return;
    }

    public static synchronized java.lang.Object putAdditionalState(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $r2 = <org.powermock.core.MockRepository: java.util.Map additionalState>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r3;
    }

    public static synchronized java.lang.Object removeAdditionalState(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Map additionalState>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        return $r2;
    }

    public static synchronized java.lang.reflect.InvocationHandler removeMethodProxy(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.reflect.InvocationHandler $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Map methodProxies>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0);

        $r3 = (java.lang.reflect.InvocationHandler) $r2;

        return $r3;
    }

    public static synchronized java.lang.Object getAdditionalState(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Map additionalState>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r2;
    }

    public static synchronized void addMethodToSuppress(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressMethod>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static synchronized void addFieldToSuppress(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressField>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static synchronized void addFieldTypeToSuppress(java.lang.String)
    {
        java.lang.String r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressFieldTypes>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static synchronized void addConstructorToSuppress(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressConstructor>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    public static synchronized boolean hasMethodProxy(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Map methodProxies>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static synchronized boolean shouldSuppressMethod(java.lang.reflect.Method, java.lang.Class) throws java.lang.ClassNotFoundException
    {
        java.lang.reflect.Method r0, r3;
        java.lang.Class r1, r4, $r7, $r8, $r11;
        java.util.Iterator r2;
        java.util.Set $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r6;
        java.lang.String $r9, $r10, $r12, $r13;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        $r5 = <org.powermock.core.MockRepository: java.util.Set suppressMethod>;

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Method) $r6;

        r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r7 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label2;

        $r11 = staticinvoke <org.powermock.core.ClassLocator: java.lang.Class getCallerClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z3 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static synchronized boolean shouldSuppressField(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        java.util.Set $r1, $r2;
        boolean $z0, $z1, $z2;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.reflect.Field;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressField>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = <org.powermock.core.MockRepository: java.util.Set suppressFieldTypes>;

        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static synchronized boolean shouldSuppressConstructor(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;
        java.util.Set $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = <org.powermock.core.MockRepository: java.util.Set suppressConstructor>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        return $z0;
    }

    public static synchronized boolean shouldStubMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Map substituteReturnValues>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static synchronized java.lang.Object getMethodToStub(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Map substituteReturnValues>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        return $r2;
    }

    public static synchronized java.lang.Object putMethodToStub(java.lang.reflect.Method, java.lang.Object)
    {
        java.lang.reflect.Method r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object;

        $r2 = <org.powermock.core.MockRepository: java.util.Map substituteReturnValues>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r3;
    }

    public static synchronized java.lang.reflect.InvocationHandler getMethodProxy(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.reflect.InvocationHandler $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = <org.powermock.core.MockRepository: java.util.Map methodProxies>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.reflect.InvocationHandler) $r2;

        return $r3;
    }

    public static synchronized java.lang.reflect.InvocationHandler putMethodProxy(java.lang.reflect.Method, java.lang.reflect.InvocationHandler)
    {
        java.lang.reflect.Method r0;
        java.lang.reflect.InvocationHandler r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.InvocationHandler;

        $r2 = <org.powermock.core.MockRepository: java.util.Map methodProxies>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        $r4 = (java.lang.reflect.InvocationHandler) $r3;

        return $r4;
    }

    public static synchronized void addAfterMethodRunner(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = <org.powermock.core.MockRepository: java.util.Set afterMethodRunners>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    static void <clinit>()
    {
        org.powermock.core.IdentityHashSet $r0;
        java.util.HashMap $r1, $r2, $r4, $r5, $r7;
        org.powermock.core.ListMap $r3;
        java.util.HashSet $r6, $r8, $r9, $r10, $r11, $r12;

        $r0 = new org.powermock.core.IdentityHashSet;

        specialinvoke $r0.<org.powermock.core.IdentityHashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set objectsToAutomaticallyReplayAndVerify> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map newSubstitutions> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map classMocks> = $r2;

        $r3 = new org.powermock.core.ListMap;

        specialinvoke $r3.<org.powermock.core.ListMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map instanceMocks> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map substituteReturnValues> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map methodProxies> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set suppressStaticInitializers> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Map additionalState> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set suppressConstructor> = $r8;

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set suppressMethod> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set suppressField> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set suppressFieldTypes> = $r11;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<java.util.HashSet: void <init>()>();

        <org.powermock.core.MockRepository: java.util.Set afterMethodRunners> = $r12;

        return;
    }
}
