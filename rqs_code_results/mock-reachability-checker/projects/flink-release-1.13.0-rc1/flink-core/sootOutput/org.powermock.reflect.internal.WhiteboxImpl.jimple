public class org.powermock.reflect.internal.WhiteboxImpl extends java.lang.Object
{
    private static org.powermock.reflect.internal.proxy.ProxyFrameworks proxyFrameworks;
    private static java.util.concurrent.ConcurrentMap allClassMethodsCache;

    public void <init>()
    {
        org.powermock.reflect.internal.WhiteboxImpl r0;

        r0 := @this: org.powermock.reflect.internal.WhiteboxImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.lang.reflect.Method getMethod(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, $r15, r24;
        java.lang.reflect.Method[] r2, $r5, $r7, r25;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.reflect.Method r3, $r21;
        java.util.LinkedList $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object[] $r6, $r11;
        org.powermock.reflect.exceptions.MethodNotFoundException $r8;
        java.lang.StringBuilder $r9, $r10, $r13, $r14, $r17, $r18;
        java.lang.String $r12, $r16, $r19;
        java.lang.Object $r20;
        java.lang.Class[] $r22, r23;

        r0 := @parameter0: java.lang.Class;

        r23 := @parameter1: java.lang.Class[];

        r24 = r0;

        if r23 != null goto label01;

        r23 = newarray (java.lang.Class)[0];

     label01:
        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

     label02:
        if r24 == null goto label10;

        $z1 = virtualinvoke r24.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label03;

        r25 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllPublicMethods(java.lang.Class)>(r24);

        goto label04;

     label03:
        r25 = virtualinvoke r24.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label04:
        r2 = r25;

        i0 = lengthof r25;

        i5 = 0;

     label05:
        if i5 >= i0 goto label07;

        r3 = r2[i5];

        $z2 = virtualinvoke r3.<java.lang.reflect.Method: boolean isVarArgs()>();

        $r22 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z2, r23, $r22);

        if $z3 == 0 goto label06;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r3);

        $i4 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i4 != 1 goto label06;

        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label06:
        i5 = i5 + 1;

        goto label05;

     label07:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i2 != 1 goto label08;

        $r20 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (java.lang.reflect.Method) $r20;

        return $r21;

     label08:
        $i3 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i3 <= 1 goto label09;

        goto label10;

     label09:
        r24 = virtualinvoke r24.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label02;

     label10:
        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        $r8 = new org.powermock.reflect.exceptions.MethodNotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No method was found with parameter types: [ ");

        $r11 = (java.lang.Object[]) r23;

        $r12 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>($r11);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ] in class ");

        $r15 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.powermock.reflect.exceptions.MethodNotFoundException: void <init>(java.lang.String)>($r19);

        throw $r8;

     label11:
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r5 = newarray (java.lang.reflect.Method)[$i1];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.reflect.Method[]) $r6;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String,java.lang.reflect.Method[])>("method name", $r7);

        return null;
    }

    public static transient java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, r8;
        java.lang.String r1, $r5;
        java.lang.reflect.Method[] r2, r9;
        int i0, i1;
        java.lang.reflect.Method r3;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] $r6, r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Class[];

        r8 = r0;

        if r7 != null goto label1;

        r7 = newarray (java.lang.Class)[0];

     label1:
        if r8 == null goto label7;

        $z0 = virtualinvoke r8.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label2;

        r9 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllPublicMethods(java.lang.Class)>(r8);

        goto label3;

     label2:
        r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label3:
        r2 = r9;

        i0 = lengthof r9;

        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        $r5 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r3.<java.lang.reflect.Method: boolean isVarArgs()>();

        $r6 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z2, r7, $r6);

        if $z3 == 0 goto label5;

        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return r3;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        r8 = virtualinvoke r8.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label7:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r7;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(r0, r1, null, $r4);

        return null;
    }

    public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, r4, $r13, r17;
        java.lang.String r1, $r14;
        java.lang.reflect.Field[] r5;
        java.lang.reflect.Field r6;
        java.util.LinkedList $r7;
        java.util.HashSet $r8, $r10;
        boolean $z1, $z7;
        java.lang.Object $r9;
        java.lang.Class[] $r11;
        java.util.List $r12;
        int i0, i1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r0);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

     label1:
        $z1 = virtualinvoke $r7.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 != 0 goto label6;

        $r9 = virtualinvoke $r7.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r4 = (java.lang.Class) $r9;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r4);

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r6 = r5[i1];

        $r14 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.String getName()>();

        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z7 == 0 goto label3;

        virtualinvoke r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        return r6;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r17 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r17 == null goto label5;

        $r13 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label5:
        $r11 = virtualinvoke r4.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r11);

        interfaceinvoke $r10.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r8);

        virtualinvoke $r7.<java.util.LinkedList: boolean addAll(java.util.Collection)>($r10);

        goto label1;

     label6:
        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfFieldWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Field)>(r0, r1, null);

        return null;
    }

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class r0, $r5, $r6;
        int i0;
        org.objenesis.instantiator.ObjectInstantiator r2;
        boolean $z0, $z1, $z2;
        org.objenesis.ObjenesisStd $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.ClassLoader $r7;
        java.lang.Class[] $r8;
        org.powermock.reflect.internal.WhiteboxImpl$1 $r9;
        java.lang.Object r10;

        r0 := @parameter0: java.lang.Class;

        i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>(i0);

        if $z0 == 0 goto label1;

        $r6 = class "Lorg/powermock/reflect/internal/WhiteboxImpl;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r8 = newarray (java.lang.Class)[1];

        $r8[0] = r0;

        $r9 = new org.powermock.reflect.internal.WhiteboxImpl$1;

        specialinvoke $r9.<org.powermock.reflect.internal.WhiteboxImpl$1: void <init>()>();

        r10 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r7, $r8, $r9);

        goto label4;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, 0);

        goto label4;

     label2:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(i0);

        if $z2 == 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot instantiate an abstract class. Please use the ConcreteClassGenerator in PowerMock support to generate a concrete class first.");

        throw $r4;

     label3:
        $r3 = new org.objenesis.ObjenesisStd;

        specialinvoke $r3.<org.objenesis.ObjenesisStd: void <init>()>();

        r2 = interfaceinvoke $r3.<org.objenesis.Objenesis: org.objenesis.instantiator.ObjectInstantiator getInstantiatorOf(java.lang.Class)>(r0);

        r10 = interfaceinvoke r2.<org.objenesis.instantiator.ObjectInstantiator: java.lang.Object newInstance()>();

     label4:
        return r10;
    }

    public static transient java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, r2;
        java.lang.Class[] r1;
        java.lang.Throwable $r3;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r4;
        java.lang.Object[] $r5, $r6;
        java.lang.String $r7, $r8, $r9;
        java.lang.Error $r10;
        java.lang.RuntimeException $r11;
        java.lang.reflect.Constructor r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

     label1:
        r12 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);

        virtualinvoke r12.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        return r12;

     label3:
        $r11 := @caughtexception;

        throw $r11;

     label4:
        $r10 := @caughtexception;

        throw $r10;

     label5:
        $r3 := @caughtexception;

        $r4 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (java.lang.Object[]) r1;

        $r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>($r6);

        $r5[0] = $r7;

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to lookup constructor with parameter types [ %s ] in class %s.", $r5);

        specialinvoke $r4.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Error from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;
        java.lang.reflect.Field r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,java.lang.String)>(r0, r1);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r2, r3);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.String,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Class, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.Class r1;
        org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy $r3;
        java.lang.reflect.Field $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        $r3 = new org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;

        specialinvoke $r3.<org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy: void <init>(java.lang.Class)>(r1);

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)>(r0, $r3);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r2, $r4);

        return;
    }

    public static transient void setInternalState(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0, r1, r4;
        java.lang.Object[] r2;
        int i0, $i1, i2;
        org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy $r5, $r8;
        java.lang.Class $r6, $r9;
        java.lang.reflect.Field $r7, $r10;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

        $r5 = new org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r1);

        specialinvoke $r5.<org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy: void <init>(java.lang.Class)>($r6);

        $r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)>(r0, $r5);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r1, $r7);

        if r2 == null goto label2;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r2[i2];

        $r8 = new org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;

        $r9 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r4);

        specialinvoke $r8.<org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy: void <init>(java.lang.Class)>($r9);

        $r10 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)>(r0, $r8);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r4, $r10);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r1;
        java.lang.Class r2, $r4;
        org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy $r3;
        java.lang.reflect.Field $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        $r3 = new org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r1);

        specialinvoke $r3.<org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy: void <init>(java.lang.Class)>($r4);

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findField(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Class)>(r0, $r3, r2);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r1, $r5);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.Class, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r2;
        java.lang.Class r1, r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.reflect.Field $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Class;

        if r1 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fieldType and where cannot be null");

        throw $r4;

     label2:
        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldOrThrowException(java.lang.Class,java.lang.Class)>(r1, r3);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setField(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r2, $r5);

        return;
    }

    public static void setInternalState(java.lang.Object, java.lang.String, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;
        java.lang.Class r3;
        java.lang.reflect.Field r4;
        boolean $z0, $z1;
        java.lang.Exception $r6;
        java.lang.RuntimeException $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Class;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(" ");

        if $z1 == 0 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object, field name, and \"where\" must not be empty or null.");

        throw $r8;

     label2:
        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field getField(java.lang.String,java.lang.Class)>(r1, r3);

     label3:
        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r2);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal Error: Failed to set field in method setInternalState.", $r6);

        throw $r7;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0, $r4;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.IllegalAccessException $r5;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,java.lang.String)>(r0, r1);

     label1:
        $r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to get field in method getInternalState.", $r5);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    private static java.lang.reflect.Field findFieldInHierarchy(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;
        org.powermock.reflect.internal.matcherstrategies.FieldNameMatcherStrategy $r2;
        java.lang.reflect.Field $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        $r2 = new org.powermock.reflect.internal.matcherstrategies.FieldNameMatcherStrategy;

        specialinvoke $r2.<org.powermock.reflect.internal.matcherstrategies.FieldNameMatcherStrategy: void <init>(java.lang.String)>(r1);

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)>(r0, $r2);

        return $r3;
    }

    private static java.lang.reflect.Field findFieldInHierarchy(java.lang.Object, org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)
    {
        java.lang.Object r0;
        org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy r1;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void assertObjectInGetInternalStateIsNotNull(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findSingleFieldUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,java.lang.Class)>(r1, r0, 1, $r2);

        return $r3;
    }

    private static java.lang.reflect.Field findField(java.lang.Object, org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy, java.lang.Class)
    {
        java.lang.Object r0;
        org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy r1;
        java.lang.Class r2;
        java.lang.reflect.Field $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy;

        r2 := @parameter2: java.lang.Class;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findSingleFieldUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,java.lang.Class)>(r1, r0, 0, r2);

        return $r3;
    }

    private static java.lang.reflect.Field findSingleFieldUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy, java.lang.Object, boolean, java.lang.Class)
    {
        org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Class r2, r14;
        java.lang.reflect.Field[] r3;
        int i0, i1;
        java.lang.reflect.Field r5, r15;
        org.powermock.reflect.exceptions.TooManyFieldsFoundException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.String $r13;

        r0 := @parameter0: org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        r14 := @parameter3: java.lang.Class;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void assertObjectInGetInternalStateIsNotNull(java.lang.Object)>(r1);

        r15 = null;

        r2 = r14;

     label01:
        if r14 == null goto label08;

        r3 = virtualinvoke r14.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label05;

        r5 = r3[i1];

        $z2 = virtualinvoke r0.<org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy: boolean matches(java.lang.reflect.Field)>(r5);

        if $z2 == 0 goto label04;

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean hasFieldProperModifier(java.lang.Object,java.lang.reflect.Field,boolean)>(r1, r5, 0);

        if $z3 == 0 goto label04;

        if r15 == null goto label03;

        $r8 = new org.powermock.reflect.exceptions.TooManyFieldsFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Two or more fields matching ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.powermock.reflect.exceptions.TooManyFieldsFoundException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label03:
        r15 = r5;

     label04:
        i1 = i1 + 1;

        goto label02;

     label05:
        if r15 == null goto label06;

        goto label08;

     label06:
        if z0 != 0 goto label07;

        goto label08;

     label07:
        r14 = virtualinvoke r14.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label01;

     label08:
        if r15 != null goto label11;

        $z1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r1);

        if $z1 != 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        virtualinvoke r0.<org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy: void notFound(java.lang.Class,boolean)>(r2, $z4);

     label11:
        virtualinvoke r15.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        return r15;
    }

    private static java.util.Set findAllFieldsUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy, java.lang.Object, boolean, boolean, java.lang.Class)
    {
        org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy r0;
        java.lang.Object r1;
        boolean z0, z1, $z2, $z3;
        java.lang.reflect.Field[] r3;
        int i0, i1;
        java.lang.reflect.Field r5;
        java.util.LinkedHashSet $r7;
        java.util.Set $r8;
        java.lang.Exception $r9;
        java.lang.Class r10;

        r0 := @parameter0: org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy;

        r1 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r10 := @parameter4: java.lang.Class;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void assertObjectInGetInternalStateIsNotNull(java.lang.Object)>(r1);

        $r7 = new java.util.LinkedHashSet;

        specialinvoke $r7.<java.util.LinkedHashSet: void <init>()>();

     label1:
        if r10 == null goto label9;

        r3 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r5 = r3[i1];

        $z2 = virtualinvoke r0.<org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy: boolean matches(java.lang.reflect.Field)>(r5);

        if $z2 == 0 goto label6;

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean hasFieldProperModifier(java.lang.Object,java.lang.reflect.Field,boolean)>(r1, r5, z1);

        if $z3 == 0 goto label6;

     label3:
        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        if z0 != 0 goto label8;

        goto label9;

     label8:
        r10 = virtualinvoke r10.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label9:
        $r8 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r7);

        return $r8;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static boolean hasFieldProperModifier(java.lang.Object, java.lang.reflect.Field, boolean)
    {
        java.lang.Object r0;
        java.lang.reflect.Field r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Field;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label3;

        $i2 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;

     label3:
        $z1 = r0 instanceof java.lang.Class;

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        return $z3;

     label4:
        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z2 != 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, $r5;
        java.lang.Class r1;
        java.lang.reflect.Field r2;
        org.powermock.reflect.internal.matcherstrategies.AssignableToFieldTypeMatcherStrategy $r4;
        java.lang.IllegalAccessException $r6;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r4 = new org.powermock.reflect.internal.matcherstrategies.AssignableToFieldTypeMatcherStrategy;

        specialinvoke $r4.<org.powermock.reflect.internal.matcherstrategies.AssignableToFieldTypeMatcherStrategy: void <init>(java.lang.Class)>(r1);

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldInHierarchy(java.lang.Object,org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy)>(r0, $r4);

     label1:
        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to get field in method getInternalState.", $r6);

        throw $r7;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.Class, java.lang.Class)
    {
        java.lang.Object r0, $r5;
        java.lang.Class r1, r2;
        java.lang.reflect.Field $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.IllegalAccessException $r7;
        java.lang.RuntimeException $r8;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object and type are not allowed to be null");

        throw $r6;

     label1:
        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field findFieldOrThrowException(java.lang.Class,java.lang.Class)>(r1, r2);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to get field in method getInternalState.", $r7);

        throw $r8;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public static java.lang.Object getInternalState(java.lang.Object, java.lang.String, java.lang.Class)
    {
        java.lang.Object r0, $r3;
        java.lang.String r1, $r10, $r13;
        java.lang.Class r2;
        boolean $z0, $z1;
        java.lang.NoSuchFieldException $r4;
        org.powermock.reflect.exceptions.FieldNotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11, $r12;
        java.lang.Exception $r14;
        java.lang.RuntimeException $r15;
        java.lang.IllegalArgumentException $r16;
        java.lang.reflect.Field r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        if r0 == null goto label1;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(" ");

        if $z1 == 0 goto label2;

     label1:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object, field name, and \"where\" must not be empty or null.");

        throw $r16;

     label2:
        r17 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r17.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r3 = virtualinvoke r17.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = new org.powermock.reflect.exceptions.FieldNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not found in class ");

        $r10 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.powermock.reflect.exceptions.FieldNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r5;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to get field in method getInternalState.", $r14);

        throw $r15;

        catch java.lang.NoSuchFieldException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r2;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object doInvokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, null, null, r1);

        return $r2;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Class, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object doInvokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, null, null, r1);

        return $r2;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object doInvokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, null, r1, r2);

        return $r3;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r6;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.Object[] r3;
        java.lang.Class r4;
        java.lang.reflect.Method r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 := @parameter3: java.lang.Object[];

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r4, r1, r2);

        if r5 != null goto label1;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(r4, r1, null, r3);

     label1:
        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object performMethodInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, r5, r3);

        return $r6;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r6;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.Class[] r3;
        java.lang.Object[] r4;
        java.lang.reflect.Method r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.Object[];

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r2, r1, r3);

        if r5 != null goto label1;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(r2, r1, null, r4);

     label1:
        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object performMethodInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, r5, r4);

        return $r6;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r4;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object doInvokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, r2, r3);

        return $r4;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r6;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.Class[] r3;
        java.lang.Object[] r4;
        java.lang.reflect.Method r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Class[];

        r4 := @parameter4: java.lang.Object[];

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object cannot be null");

        throw $r7;

     label1:
        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, r2, r3);

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object performMethodInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, r5, r4);

        return $r6;
    }

    public static synchronized transient java.lang.Object invokeMethod(java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Object[] r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object doInvokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, null, r1, r2);

        return $r3;
    }

    private static transient java.lang.Object doInvokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, $r5;
        java.lang.Class r1;
        java.lang.String r2;
        java.lang.Object[] r3;
        java.lang.reflect.Method r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method findMethodOrThrowException(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])>(r0, r1, r2, r3);

        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object performMethodInvocation(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, r4, r3);

        return $r5;
    }

    public static java.lang.reflect.Method findMethodOrThrowException(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.Class r1, $r8, $r13, $r17, $r18, r21, $r24;
        java.lang.String r2, $r10, $r11, $r14, $r19;
        java.lang.Object[] r3;
        java.lang.reflect.Method[] r4, $r9, $r12, r22;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.reflect.Method r5, r7, $r16, r23;
        java.lang.Class[] r6, $r15;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.IllegalArgumentException $r20;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        if r0 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The object to perform the operation on cannot be null.");

        throw $r20;

     label01:
        $z1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

        r21 = (java.lang.Class) r0;

        goto label03;

     label02:
        r21 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        if r1 != null goto label04;

        r22 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r21);

        goto label05;

     label04:
        r22 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label05:
        r23 = null;

        r4 = r22;

        i0 = lengthof r22;

        i7 = 0;

     label06:
        if i7 >= i0 goto label19;

        r5 = r4[i7];

        if r2 == null goto label07;

        $r19 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z7 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label18;

     label07:
        r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if r3 == null goto label14;

        $i5 = lengthof r6;

        $i4 = lengthof r3;

        if $i5 != $i4 goto label14;

        $i6 = lengthof r6;

        if $i6 != 0 goto label08;

        r23 = r5;

        goto label19;

     label08:
        $z4 = virtualinvoke r5.<java.lang.reflect.Method: boolean isVarArgs()>();

        z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkArgumentTypesMatchParameterTypes(boolean,java.lang.Class[],java.lang.Object[])>($z4, r6, r3);

        if z0 == 0 goto label13;

        if r23 != null goto label09;

        r23 = r5;

        goto label13;

     label09:
        $r10 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z5 == 0 goto label11;

        $z6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean areAllArgumentsOfSameType(java.lang.Object[])>(r3);

        if $z6 == 0 goto label10;

        $r17 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r18 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        if $r17 == $r18 goto label10;

        return r23;

     label10:
        $r13 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r14 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class[] getTypes(java.lang.Object[])>(r3);

        $r16 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getBestMethodCandidate(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r13, $r14, $r15, 0);

        return $r16;

     label11:
        r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethodWithMostSpecificParameterTypes(java.lang.reflect.Method,java.lang.reflect.Method)>(r5, r23);

        if r7 == null goto label12;

        r23 = r7;

        goto label18;

     label12:
        $r12 = newarray (java.lang.reflect.Method)[2];

        $r12[0] = r23;

        $r12[1] = r5;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String,java.lang.reflect.Method[])>("argument parameter types", $r12);

     label13:
        goto label18;

     label14:
        $z2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isPotentialVarArgsMethod(java.lang.reflect.Method,java.lang.Object[])>(r5, r3);

        if $z2 == 0 goto label16;

        if r23 != null goto label15;

        r23 = r5;

        goto label19;

     label15:
        $r9 = newarray (java.lang.reflect.Method)[2];

        $r9[0] = r23;

        $r9[1] = r5;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String,java.lang.reflect.Method[])>("argument parameter types", $r9);

        goto label19;

     label16:
        if r3 == null goto label17;

        $i3 = lengthof r6;

        $i2 = lengthof r3;

        if $i3 == $i2 goto label17;

        goto label18;

     label17:
        if r3 != null goto label18;

        $i1 = lengthof r6;

        if $i1 != 1 goto label18;

        $r8 = r6[0];

        $z3 = virtualinvoke $r8.<java.lang.Class: boolean isPrimitive()>();

        if $z3 != 0 goto label18;

        r23 = r5;

     label18:
        i7 = i7 + 1;

        goto label06;

     label19:
        $r24 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>($r24, r2, r23, r3);

        return r23;
    }

    private static java.lang.reflect.Method getMethodWithMostSpecificParameterTypes(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0, r1, r8, r9;
        java.lang.Class[] r2, r3;
        java.lang.Class r4, r5, $r6, $r7;
        int $i0, i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r8 = null;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label6;

        $r6 = r2[i1];

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class toBoxedIfPrimitive(java.lang.Class)>($r6);

        $r7 = r3[i1];

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class toBoxedIfPrimitive(java.lang.Class)>($r7);

        $z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label5;

        r9 = null;

        $z1 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z1 == 0 goto label2;

        r9 = r1;

        goto label3;

     label2:
        $z2 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z2 == 0 goto label3;

        r9 = r0;

     label3:
        if r9 == null goto label5;

        if r8 == null goto label4;

        $z3 = virtualinvoke r9.<java.lang.reflect.Method: boolean equals(java.lang.Object)>(r8);

        if $z3 != 0 goto label4;

        return null;

     label4:
        r8 = r9;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return r8;
    }

    private static java.lang.Class toBoxedIfPrimitive(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <org.powermock.reflect.internal.primitivesupport.BoxedWrapper: java.lang.Class getBoxedFromPrimitiveType(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    private static java.lang.Class[] getTypes(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Class[] r1;
        int $i0, $i1, i2;
        java.lang.Object $r2;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.reflect.Method getBestMethodCandidate(java.lang.Class, java.lang.String, java.lang.Class[], boolean)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        boolean z0;
        java.lang.reflect.Method[] r3;
        int $i0;
        java.util.Comparator $r4;
        java.lang.reflect.Method r5;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        z0 := @parameter3: boolean;

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r0, r1, r2, z0);

        $i0 = lengthof r3;

        if $i0 != 1 goto label1;

        r5 = r3[0];

        goto label2;

     label1:
        $r4 = staticinvoke <org.powermock.reflect.internal.comparator.ComparatorFactory: java.util.Comparator createMethodComparator()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r3, $r4);

        r5 = r3[0];

     label2:
        return r5;
    }

    public static java.lang.reflect.Constructor findDefaultConstructorOrThrowException(java.lang.Class) throws org.powermock.reflect.exceptions.ConstructorNotFoundException
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor r1;
        java.lang.Class[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.NoSuchMethodException $r5;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8, $r9;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type cannot be null");

        throw $r4;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t find a default constructor in %s.", $r7);

        specialinvoke $r6.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label4:
        return r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Constructor findConstructorOrThrowException(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] r1, $r2;
        int $i0;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor[] filterPowerMockConstructor(java.lang.reflect.Constructor[])>($r2);

        $i0 = lengthof r1;

        if $i0 <= 1 goto label1;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleConstructorMatchesFound(java.lang.reflect.Constructor[])>(r1);

     label1:
        $r3 = r1[0];

        return $r3;
    }

    static java.lang.reflect.Constructor[] filterPowerMockConstructor(java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r0, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.reflect.Constructor r3;
        java.lang.Class[] r4;
        java.util.HashSet $r5;
        java.lang.Object[] $r7;
        java.lang.Class $r9;
        java.lang.String $r10;
        boolean $z1;

        r0 := @parameter0: java.lang.reflect.Constructor[];

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        i0 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        r3 = r0[i5];

        r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof r4;

        if $i2 < 1 goto label2;

        $i3 = lengthof r4;

        $i4 = $i3 - 1;

        $r9 = r4[$i4];

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("org.powermock.core.IndicateReloadClass");

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.reflect.Constructor)[$i1];

        $r7 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.reflect.Constructor[]) $r7;

        return $r8;
    }

    public static transient java.lang.reflect.Constructor findUniqueConstructorOrThrowException(java.lang.Class, java.lang.Object[])
    {
        java.lang.Class r0;
        java.lang.Object[] r1;
        org.powermock.reflect.internal.ConstructorFinder $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r2 = new org.powermock.reflect.internal.ConstructorFinder;

        specialinvoke $r2.<org.powermock.reflect.internal.ConstructorFinder: void <init>(java.lang.Class,java.lang.Object[])>(r0, r1);

        $r3 = virtualinvoke $r2.<org.powermock.reflect.internal.ConstructorFinder: java.lang.reflect.Constructor findConstructor()>();

        return $r3;
    }

    private static java.lang.Class[] convertArgumentTypesToPrimitive(java.lang.Class[], java.lang.Object[])
    {
        java.lang.Class[] r0, r2;
        java.lang.Object[] r1;
        java.lang.Class r3, r6;
        int $i0, $i1, i2;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Object[];

        $i0 = lengthof r1;

        r2 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label6;

        $r4 = r1[i2];

        if $r4 != null goto label2;

        r6 = r0[i2];

        goto label3;

     label2:
        $r5 = r1[i2];

        r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>($r5);

     label3:
        r3 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.lang.Class getPrimitiveFromWrapperType(java.lang.Class)>(r6);

        if r3 != null goto label4;

        r2[i2] = r6;

        goto label5;

     label4:
        r2[i2] = r3;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return r2;
    }

    public static transient void throwExceptionIfMethodWasNotFound(java.lang.Class, java.lang.String, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.Class r0, $r12;
        java.lang.String r1, $r9, $r13, $r16, r21;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        org.powermock.reflect.exceptions.MethodNotFoundException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r14, $r15, $r17, $r18, $r19, $r20;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.reflect.Method;

        r3 := @parameter3: java.lang.Object[];

        if r2 != null goto label2;

        r21 = "";

        if r1 == null goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with name \'");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = new org.powermock.reflect.exceptions.MethodNotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No method found ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with parameter types: [ ");

        $r9 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>(r3);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ] in class ");

        $r12 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.powermock.reflect.exceptions.MethodNotFoundException: void <init>(java.lang.String)>($r16);

        throw $r4;

     label2:
        return;
    }

    public static void throwExceptionIfFieldWasNotFound(java.lang.Class, java.lang.String, java.lang.reflect.Field)
    {
        java.lang.Class r0, $r8;
        java.lang.String r1, $r9, $r12;
        java.lang.reflect.Field r2;
        org.powermock.reflect.exceptions.FieldNotFoundException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.reflect.Field;

        if r2 != null goto label1;

        $r3 = new org.powermock.reflect.exceptions.FieldNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No field was found with name \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in class ");

        $r8 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.powermock.reflect.exceptions.FieldNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label1:
        return;
    }

    static transient void throwExceptionIfConstructorWasNotFound(java.lang.Class, java.lang.reflect.Constructor, java.lang.Object[])
    {
        java.lang.Class r0, $r6;
        java.lang.reflect.Constructor r1;
        java.lang.Object[] r2;
        java.lang.String r3, $r7, $r10;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r11, $r12;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r13;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Constructor;

        r2 := @parameter2: java.lang.Object[];

        if r1 != null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No constructor found in class \'");

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with parameter types: [ ");

        $r10 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ].");

        r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        specialinvoke $r13.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String)>(r3);

        throw $r13;

     label1:
        return;
    }

    static transient java.lang.String getArgumentTypesAsString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Object r2;
        java.lang.Class[] r3, $r6;
        java.lang.StringBuilder $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0, $z1;
        java.lang.Class $r5, $r8, $r9, $r10, $r12;
        java.lang.String $r7, r13, $r14, $r15;

        r0 := @parameter0: java.lang.Object[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if r0 == null goto label12;

        $i0 = lengthof r0;

        if $i0 == 0 goto label12;

        i6 = 0;

     label01:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label11;

        r2 = r0[i6];

        $z0 = r2 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r12 = (java.lang.Class) r2;

        r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        goto label10;

     label02:
        $z1 = r2 instanceof java.lang.Class[];

        if $z1 == 0 goto label08;

        $i2 = lengthof r0;

        if $i2 != 1 goto label08;

        $r6 = (java.lang.Class[]) r2;

        r3 = (java.lang.Class[]) $r6;

        $i3 = lengthof r3;

        if $i3 <= 0 goto label07;

        i7 = 0;

     label03:
        $i4 = lengthof r3;

        if i7 >= $i4 goto label06;

        $i5 = i7;

        $r8 = r3[i7];

        if $r8 != null goto label04;

        $r14 = "null";

        goto label05;

     label04:
        $r9 = r3[i7];

        $r10 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getUnproxyType(java.lang.Object)>($r9);

        $r14 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

     label05:
        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void appendArgument(java.lang.StringBuilder,int,java.lang.String,java.lang.Object[])>($r4, $i5, $r14, r3);

        i7 = i7 + 1;

        goto label03;

     label06:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label07:
        r13 = "<none>";

        goto label10;

     label08:
        if r2 != null goto label09;

        r13 = "null";

        goto label10;

     label09:
        $r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getUnproxyType(java.lang.Object)>(r2);

        r13 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

     label10:
        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void appendArgument(java.lang.StringBuilder,int,java.lang.String,java.lang.Object[])>($r4, i6, r13, r0);

        i6 = i6 + 1;

        goto label01;

     label11:
        goto label13;

     label12:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<none>");

     label13:
        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private static void appendArgument(java.lang.StringBuilder, int, java.lang.String, java.lang.Object[])
    {
        java.lang.StringBuilder r0;
        int i0, $i1, $i2;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.StringBuilder;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object[];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        if i0 == $i2 goto label1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label1:
        return;
    }

    public static java.lang.Object invokeConstructor(java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.Object[] r2;
        java.lang.Object $r4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5;
        java.lang.Exception $r6;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r7;
        java.lang.reflect.Constructor r8;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        if r1 == null goto label1;

        if r2 == null goto label1;

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 == $i0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameterTypes and arguments must have the same length");

        throw $r5;

     label1:
        r8 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        specialinvoke $r7.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("Could not lookup the constructor", $r6);

        throw $r7;

     label4:
        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object createInstance(java.lang.reflect.Constructor,java.lang.Object[])>(r8, r2);

        return $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static transient java.lang.Object invokeConstructor(java.lang.Class, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Class r0, $r4;
        java.lang.Object[] r1;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.Class[] r6;
        java.lang.reflect.Constructor r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The class should contain the constructor cannot be null.");

        throw $r5;

     label1:
        if r1 != null goto label2;

        r6 = newarray (java.lang.Class)[0];

        goto label4;

     label2:
        $i0 = lengthof r1;

        r6 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label3:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        $r3 = r1[i2];

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>($r3);

        r6[i2] = $r4;

        i2 = i2 + 1;

        goto label3;

     label4:
        r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getBestCandidateConstructor(java.lang.Class,java.lang.Class[],java.lang.Object[])>(r0, r6, r1);

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object createInstance(java.lang.reflect.Constructor,java.lang.Object[])>(r7, r1);

        return $r2;
    }

    private static java.lang.reflect.Constructor getBestCandidateConstructor(java.lang.Class, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.Object[] r2;
        java.lang.reflect.Constructor r3, r4, r13;
        int $i0;
        org.powermock.reflect.exceptions.TooManyConstructorsFoundException $r5;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String $r9, $r12;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Object[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getPotentialConstructorWrapped(java.lang.Class,java.lang.Class[])>(r0, r1);

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getPotentialConstructorPrimitive(java.lang.Class,java.lang.Class[])>(r0, r1);

        if r4 != null goto label1;

        if r3 != null goto label1;

        r13 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getPotentialVarArgsConstructor(java.lang.Class,java.lang.Object[])>(r0, r2);

        if r13 != null goto label6;

        $r6 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find a constructor with parameter types: [");

        $r9 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String getArgumentTypesAsString(java.lang.Object[])>(r2);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        if r4 != null goto label2;

        r13 = r3;

        goto label6;

     label2:
        if r3 != null goto label3;

        r13 = r4;

        goto label6;

     label3:
        if r2 == null goto label4;

        $i0 = lengthof r2;

        if $i0 != 0 goto label5;

        if r4 == null goto label5;

     label4:
        r13 = r4;

        goto label6;

     label5:
        $r5 = new org.powermock.reflect.exceptions.TooManyConstructorsFoundException;

        specialinvoke $r5.<org.powermock.reflect.exceptions.TooManyConstructorsFoundException: void <init>(java.lang.String)>("Could not determine which constructor to execute. Please specify the parameter types by hand.");

        throw $r5;

     label6:
        return r13;
    }

    private static java.lang.reflect.Constructor getPotentialConstructorWrapped(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        org.powermock.reflect.internal.CandidateConstructorSearcher $r2;
        java.lang.reflect.Constructor $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = new org.powermock.reflect.internal.CandidateConstructorSearcher;

        specialinvoke $r2.<org.powermock.reflect.internal.CandidateConstructorSearcher: void <init>(java.lang.Class,java.lang.Class[])>(r0, r1);

        $r3 = virtualinvoke $r2.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.reflect.Constructor findConstructor()>();

        return $r3;
    }

    private static java.lang.reflect.Constructor getPotentialConstructorPrimitive(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1, r5;
        boolean $z0;
        org.powermock.reflect.internal.CandidateConstructorSearcher $r2;
        java.lang.Exception $r3;
        java.lang.reflect.Constructor r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        r4 = null;

     label1:
        r5 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.lang.Class[] toPrimitiveType(java.lang.Class[])>(r1);

        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean argumentTypesEqualsPrimitiveTypes(java.lang.Class[],java.lang.Class[])>(r1, r5);

        if $z0 != 0 goto label2;

        $r2 = new org.powermock.reflect.internal.CandidateConstructorSearcher;

        specialinvoke $r2.<org.powermock.reflect.internal.CandidateConstructorSearcher: void <init>(java.lang.Class,java.lang.Class[])>(r0, r5);

        r4 = virtualinvoke $r2.<org.powermock.reflect.internal.CandidateConstructorSearcher: java.lang.reflect.Constructor findConstructor()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static boolean argumentTypesEqualsPrimitiveTypes(java.lang.Class[], java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        int $i0, i1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r3 = r0[i1];

        $r2 = r1[i1];

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static transient java.lang.reflect.Constructor getPotentialVarArgsConstructor(java.lang.Class, java.lang.Object[])
    {
        java.lang.Class r0, $r7, $r8, $r10;
        java.lang.Object[] r1;
        java.lang.reflect.Constructor[] r2, $r6;
        int i0, $i1, $i2, $i3, i4;
        java.lang.reflect.Constructor r4;
        java.lang.Class[] r5;
        boolean $z0, $z1;
        java.lang.Object $r9;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object[];

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        r2 = (java.lang.reflect.Constructor[]) $r6;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r4 = r2[i4];

        $z0 = virtualinvoke r4.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label4;

        if r1 == null goto label2;

        $i1 = lengthof r1;

        if $i1 != 0 goto label3;

     label2:
        return r4;

     label3:
        r5 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof r5;

        $i3 = $i2 - 1;

        $r7 = r5[$i3];

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = r1[0];

        $r10 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>($r9);

        $z1 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10);

        if $z1 == 0 goto label4;

        return r4;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return null;
    }

    private static transient java.lang.Object createInstance(java.lang.reflect.Constructor, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.reflect.Constructor r0;
        java.lang.Object[] r1, r4;
        java.lang.Class r2, $r5;
        java.lang.Object r3, r10;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.IllegalArgumentException $r6;
        java.lang.reflect.InvocationTargetException $r7;
        java.lang.Error $r8;
        java.lang.Exception $r9;
        java.lang.Class[] r11;
        java.lang.Throwable r13;

        r0 := @parameter0: java.lang.reflect.Constructor;

        r1 := @parameter1: java.lang.Object[];

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Constructor cannot be null");

        throw $r6;

     label1:
        virtualinvoke r0.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        r10 = null;

     label2:
        $z0 = virtualinvoke r0.<java.lang.reflect.Constructor: boolean isVarArgs()>();

        if $z0 == 0 goto label3;

        r11 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r11;

        i4 = $i0 - 1;

        $r5 = r11[i4];

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object createAndPopulateVarArgsArray(java.lang.Class,int,java.lang.Object[])>(r2, i4, r1);

        $i1 = lengthof r11;

        r4 = newarray (java.lang.Object)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r4, 0, i4);

        $i2 = lengthof r4;

        $i3 = $i2 - 1;

        r4[$i3] = r3;

        r10 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r4);

        goto label4;

     label3:
        r10 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r1);

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r13 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z1 = r13 instanceof java.lang.Exception;

        if $z1 == 0 goto label6;

        $r9 = (java.lang.Exception) r13;

        throw $r9;

     label6:
        $z2 = r13 instanceof java.lang.Error;

        if $z2 == 0 goto label7;

        $r8 = (java.lang.Error) r13;

        throw $r8;

     label7:
        return r10;

        catch java.lang.reflect.InvocationTargetException from label2 to label4 with label5;
    }

    private static transient java.lang.Object createAndPopulateVarArgsArray(java.lang.Class, int, java.lang.Object[])
    {
        java.lang.Class r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object[] r1;
        java.lang.Object r2, $r3;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        $i1 = lengthof r1;

        $i2 = $i1 - i0;

        r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r0, $i2);

        i5 = i0;

     label1:
        $i3 = lengthof r1;

        if i5 >= $i3 goto label2;

        $i4 = i5 - i0;

        $r3 = r1[i5];

        staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(r2, $i4, $r3);

        i5 = i5 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.lang.reflect.Constructor[] getAllConstructors(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Constructor[] r1;
        int i0, i1;
        java.lang.reflect.Constructor r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $z0 = virtualinvoke r3.<java.lang.reflect.Constructor: boolean isAccessible()>();

        if $z0 != 0 goto label2;

        virtualinvoke r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r1;
    }

    public static java.lang.reflect.Method[] getAllMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.concurrent.ConcurrentMap $r1, $r3;
        java.lang.Object $r2;
        java.lang.reflect.Method[] r5;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.WhiteboxImpl: java.util.concurrent.ConcurrentMap allClassMethodsCache>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0);

        r5 = (java.lang.reflect.Method[]) $r2;

        if r5 != null goto label1;

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] doGetAllMethods(java.lang.Class)>(r0);

        $r3 = <org.powermock.reflect.internal.WhiteboxImpl: java.util.concurrent.ConcurrentMap allClassMethodsCache>;

        interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r5);

     label1:
        return r5;
    }

    private static java.lang.reflect.Method[] doGetAllMethods(java.lang.Class)
    {
        java.lang.Class r0, r2, r16;
        java.lang.reflect.Method[] r3, $r7, $r9, $r12;
        int i0, $i1, i2;
        java.lang.reflect.Method r5;
        java.util.LinkedHashSet $r6;
        java.lang.Object[] $r8;
        org.powermock.reflect.internal.WhiteboxImpl$2 $r10;
        java.lang.Object $r11;
        java.lang.String $r13, $r14;
        boolean $z1;
        java.lang.IllegalArgumentException $r15;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a class in order to get the methods.");

        throw $r15;

     label1:
        $r6 = new java.util.LinkedHashSet;

        specialinvoke $r6.<java.util.LinkedHashSet: void <init>()>();

        r16 = r0;

     label2:
        if r16 == null goto label6;

        r2 = r16;

        $r10 = new org.powermock.reflect.internal.WhiteboxImpl$2;

        specialinvoke $r10.<org.powermock.reflect.internal.WhiteboxImpl$2: void <init>(java.lang.Class)>(r16);

        $r11 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r10);

        r3 = (java.lang.reflect.Method[]) $r11;

        i0 = lengthof r3;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r5 = r3[i2];

        $r13 = "finalize";

        $r14 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label4;

        virtualinvoke r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r5);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r12 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r6, $r12);

        r16 = virtualinvoke r16.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label6:
        $i1 = interfaceinvoke $r6.<java.util.Set: int size()>();

        $r7 = newarray (java.lang.reflect.Method)[$i1];

        $r8 = interfaceinvoke $r6.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.reflect.Method[]) $r8;

        return $r9;
    }

    private static java.lang.reflect.Method[] getAllPublicMethods(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Method[] r2, $r5, $r7;
        int i0, i1;
        java.lang.reflect.Method r3;
        java.util.LinkedHashSet $r4;
        java.lang.Object[] $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a class in order to get the methods.");

        throw $r8;

     label1:
        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = newarray (java.lang.reflect.Method)[0];

        $r6 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.lang.reflect.Method[]) $r6;

        return $r7;
    }

    public static java.lang.reflect.Field[] getAllFields(java.lang.Class)
    {
        java.lang.Class r0, r10;
        java.lang.reflect.Field[] r2, $r6, $r8;
        int i0, $i1, i2;
        java.lang.reflect.Field r4;
        java.util.LinkedHashSet $r5;
        java.lang.Object[] $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify the class that contains the fields");

        throw $r9;

     label1:
        $r5 = new java.util.LinkedHashSet;

        specialinvoke $r5.<java.util.LinkedHashSet: void <init>()>();

        r10 = r0;

     label2:
        if r10 == null goto label5;

        r2 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        r4 = r2[i2];

        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        r10 = virtualinvoke r10.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label5:
        $i1 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r6 = newarray (java.lang.reflect.Field)[$i1];

        $r7 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.reflect.Field[]) $r7;

        return $r8;
    }

    public static java.lang.reflect.Constructor getFirstParentConstructor(java.lang.Class)
    {
        java.lang.Class r0, $r2, $r3;
        java.lang.reflect.Constructor[] $r4;
        java.lang.reflect.Constructor $r5;
        java.lang.Exception $r6;
        org.powermock.reflect.exceptions.ConstructorNotFoundException $r7;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r0);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

        $r5 = $r4[0];

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.powermock.reflect.exceptions.ConstructorNotFoundException;

        specialinvoke $r7.<org.powermock.reflect.exceptions.ConstructorNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to lookup constructor.", $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static transient java.lang.reflect.Method findMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1, $r16;
        java.lang.Class[] r2, r5, $r14;
        java.lang.reflect.Method r4, r19, r21;
        java.util.LinkedList $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        java.lang.reflect.Method[] $r7, $r9, $r10, $r12, r18;
        java.lang.Object[] $r8, $r11;
        boolean $z0, $z2, $z3, $z4;
        java.lang.Object $r13, $r15;
        java.lang.IllegalArgumentException $r17;
        java.util.Iterator r20;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        if r1 != null goto label01;

        if r2 != null goto label01;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must specify a method name or parameter types.");

        throw $r17;

     label01:
        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r18 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r0);

        i6 = lengthof r18;

        i7 = 0;

     label02:
        if i7 >= i6 goto label06;

        r4 = r18[i7];

        if r1 == null goto label03;

        $r16 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label05;

     label03:
        if r2 == null goto label04;

        $i5 = lengthof r2;

        if $i5 <= 0 goto label04;

        r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z2 = virtualinvoke r4.<java.lang.reflect.Method: boolean isVarArgs()>();

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z2, r2, r5);

        if $z3 != 0 goto label04;

        goto label05;

     label04:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r4);

     label05:
        i7 = i7 + 1;

        goto label02;

     label06:
        r19 = null;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i0 <= 0 goto label14;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 != 1 goto label07;

        $r15 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        r19 = (java.lang.reflect.Method) $r15;

        goto label14;

     label07:
        if r2 == null goto label08;

        $i8 = lengthof r2;

        goto label09;

     label08:
        $i8 = 0;

     label09:
        if $i8 != 0 goto label13;

        r20 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r13 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.reflect.Method) $r13;

        $r14 = virtualinvoke r21.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i4 = lengthof $r14;

        if $i4 != 0 goto label11;

        r19 = r21;

        goto label12;

     label11:
        goto label10;

     label12:
        if r19 != null goto label14;

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r10 = newarray (java.lang.reflect.Method)[$i3];

        $r11 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.reflect.Method[]) $r11;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String,java.lang.reflect.Method[])>("argument parameter types", $r12);

        goto label14;

     label13:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = newarray (java.lang.reflect.Method)[$i2];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.reflect.Method[]) $r8;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String,java.lang.reflect.Method[])>("argument parameter types", $r9);

     label14:
        return r19;
    }

    public static java.lang.Class getOriginalUnmockedType(java.lang.Class)
    {
        java.lang.Class r0, $r2;
        org.powermock.reflect.internal.proxy.UnproxiedType $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)>(r0);

        $r2 = interfaceinvoke $r1.<org.powermock.reflect.internal.proxy.UnproxiedType: java.lang.Class getOriginalType()>();

        return $r2;
    }

    public static org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)
    {
        java.lang.Class r0;
        org.powermock.reflect.internal.proxy.ProxyFrameworks $r1;
        org.powermock.reflect.internal.proxy.UnproxiedType $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.WhiteboxImpl: org.powermock.reflect.internal.proxy.ProxyFrameworks proxyFrameworks>;

        $r2 = virtualinvoke $r1.<org.powermock.reflect.internal.proxy.ProxyFrameworks: org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)>(r0);

        return $r2;
    }

    static void throwExceptionWhenMultipleMethodMatchesFound(java.lang.String, java.lang.reflect.Method[])
    {
        java.lang.String r0, $r16, $r20, $r22, $r25, $r29;
        java.lang.reflect.Method[] r1;
        int i0, i1, $i2, i3, i4;
        java.lang.reflect.Method r4, $r14;
        java.lang.Class[] r5;
        java.lang.Class r7, $r15, $r21;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r13, $r17, $r23, $r26, $r30;
        org.powermock.reflect.exceptions.TooManyMethodsFoundException $r19;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.reflect.Method[];

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 >= 2 goto label2;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: throwExceptionWhenMultipleMethodMatchesFound needs at least two methods.");

        throw $r8;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Several matching methods found, please specify the ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" so that PowerMock can determine which method you\'re referring to.\n");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matching methods in class ");

        $r14 = r1[0];

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were:\n");

        i0 = lengthof r1;

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        r4 = r1[i3];

        $r21 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r25 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $r26 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof r5;

        i4 = 0;

     label4:
        if i4 >= i1 goto label5;

        r7 = r5[i4];

        $r29 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class ");

        i4 = i4 + 1;

        goto label4;

     label5:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        i3 = i3 + 1;

        goto label3;

     label6:
        $r19 = new org.powermock.reflect.exceptions.TooManyMethodsFoundException;

        $r20 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<org.powermock.reflect.exceptions.TooManyMethodsFoundException: void <init>(java.lang.String)>($r20);

        throw $r19;
    }

    static void throwExceptionWhenMultipleConstructorMatchesFound(java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r0;
        int i0, i1, $i2, i3, i4;
        java.lang.reflect.Constructor r3, $r11;
        java.lang.Class[] r4;
        java.lang.Class r6, $r12;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r10, $r14, $r19, $r23;
        java.lang.String $r13, $r17, $r18, $r22;
        org.powermock.reflect.exceptions.TooManyConstructorsFoundException $r16;

        r0 := @parameter0: java.lang.reflect.Constructor[];

        if r0 == null goto label1;

        $i2 = lengthof r0;

        if $i2 >= 2 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: throwExceptionWhenMultipleConstructorMatchesFound needs at least two constructors.");

        throw $r7;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Several matching constructors found, please specify the argument parameter types so that PowerMock can determine which method you\'re referring to.\n");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Matching constructors in class ");

        $r11 = r0[0];

        $r12 = virtualinvoke $r11.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" were:\n");

        i0 = lengthof r0;

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        r3 = r0[i3];

        $r18 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.String getName()>();

        $r19 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("( ");

        r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i1 = lengthof r4;

        i4 = 0;

     label4:
        if i4 >= i1 goto label5;

        r6 = r4[i4];

        $r22 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class ");

        i4 = i4 + 1;

        goto label4;

     label5:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n");

        i3 = i3 + 1;

        goto label3;

     label6:
        $r16 = new org.powermock.reflect.exceptions.TooManyConstructorsFoundException;

        $r17 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.powermock.reflect.exceptions.TooManyConstructorsFoundException: void <init>(java.lang.String)>($r17);

        throw $r16;
    }

    public static transient java.lang.reflect.Method findMethodOrThrowException(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method r3;
        java.lang.Object[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        $r4 = (java.lang.Object[]) r2;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void throwExceptionIfMethodWasNotFound(java.lang.Class,java.lang.String,java.lang.reflect.Method,java.lang.Object[])>(r0, r1, r3, $r4);

        return r3;
    }

    public static transient java.lang.reflect.Method[] getMethods(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0, $r13;
        java.lang.String[] r1;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.reflect.Method r3;
        java.lang.String r5, $r12, $r14, $r15;
        java.lang.IllegalArgumentException $r6;
        java.util.LinkedList $r7;
        boolean $z0, $z1;
        java.lang.reflect.Method[] $r8, r16, r17, r18;
        java.lang.Object[] $r9, $r11;
        org.powermock.reflect.exceptions.MethodNotFoundException $r10;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        if r1 == null goto label01;

        $i2 = lengthof r1;

        if $i2 != 0 goto label02;

     label01:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must supply at least one method name.");

        throw $r6;

     label02:
        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label03;

        r16 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllPublicMethods(java.lang.Class)>(r0);

        goto label04;

     label03:
        r16 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r0);

     label04:
        r17 = r16;

        i0 = lengthof r16;

        i4 = 0;

     label05:
        if i4 >= i0 goto label09;

        r3 = r17[i4];

        i1 = lengthof r1;

        i5 = 0;

     label06:
        if i5 >= i1 goto label08;

        r5 = r1[i5];

        $r15 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label07;

        virtualinvoke r3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label07:
        i5 = i5 + 1;

        goto label06;

     label08:
        i4 = i4 + 1;

        goto label05;

     label09:
        $r8 = newarray (java.lang.reflect.Method)[0];

        $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r18 = (java.lang.reflect.Method[]) $r9;

        $i3 = lengthof r18;

        if $i3 != 0 goto label10;

        $r10 = new org.powermock.reflect.exceptions.MethodNotFoundException;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String concatenateStrings(java.lang.String[])>(r1);

        $r11[0] = $r12;

        $r13 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No methods matching the name(s) %s were found in the class hierarchy of %s.", $r11);

        specialinvoke $r10.<org.powermock.reflect.exceptions.MethodNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label10:
        return r18;
    }

    public static java.lang.reflect.Method[] getMethods(java.lang.Class, java.lang.String, java.lang.Class[], boolean)
    {
        java.lang.Class r0, $r18;
        java.lang.String r1, $r17, $r19;
        java.lang.Class[] r2, r6, $r20;
        boolean z0, $z1, $z2, $z4, $z5;
        java.lang.reflect.Method[] r4, $r9, $r11, $r13, r22;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Method r5;
        java.util.LinkedList $r7;
        java.lang.String[] $r8, $r16;
        java.lang.Object[] $r10, $r12, $r15;
        org.powermock.reflect.exceptions.MethodNotFoundException $r14;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        z0 := @parameter3: boolean;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r1;

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, $r8);

        i0 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r5 = r4[i3];

        r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = virtualinvoke r5.<java.lang.reflect.Method: boolean isVarArgs()>();

        $z2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z1, r2, r6);

        if $z2 != 0 goto label2;

        if z0 != 0 goto label3;

        $z4 = virtualinvoke r5.<java.lang.reflect.Method: boolean isVarArgs()>();

        $r20 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class[] convertParameterTypesToPrimitive(java.lang.Class[])>(r2);

        $z5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkIfParameterTypesAreSame(boolean,java.lang.Class[],java.lang.Class[])>($z4, $r20, r6);

        if $z5 == 0 goto label3;

     label2:
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r5);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r9 = newarray (java.lang.reflect.Method)[0];

        $r10 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r22 = (java.lang.reflect.Method[]) $r10;

        $i1 = lengthof r22;

        if $i1 != 0 goto label5;

        $r14 = new org.powermock.reflect.exceptions.MethodNotFoundException;

        $r15 = newarray (java.lang.Object)[2];

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = r1;

        $r17 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String concatenateStrings(java.lang.String[])>($r16);

        $r15[0] = $r17;

        $r18 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r15[1] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No methods matching the name(s) %s were found in the class hierarchy of %s.", $r15);

        specialinvoke $r14.<org.powermock.reflect.exceptions.MethodNotFoundException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label5:
        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r11 = newarray (java.lang.reflect.Method)[$i2];

        $r12 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.lang.reflect.Method[]) $r12;

        return $r13;
    }

    public static transient java.lang.reflect.Field[] getFields(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0, $r12;
        java.lang.String[] r1;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.reflect.Field r3;
        java.lang.String r5, $r11, $r13, $r14;
        java.util.LinkedList $r6;
        java.lang.reflect.Field[] $r7, r15, r16;
        java.lang.Object[] $r8, $r10;
        org.powermock.reflect.exceptions.FieldNotFoundException $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r15 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Field[] getAllFields(java.lang.Class)>(r0);

        i0 = lengthof r15;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r3 = r15[i4];

        i1 = lengthof r1;

        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        r5 = r1[i5];

        $r14 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label3;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $i2 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = newarray (java.lang.reflect.Field)[$i2];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r16 = (java.lang.reflect.Field[]) $r8;

        $i3 = lengthof r16;

        if $i3 != 0 goto label6;

        $r9 = new org.powermock.reflect.exceptions.FieldNotFoundException;

        $r10 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.String concatenateStrings(java.lang.String[])>(r1);

        $r10[0] = $r11;

        $r12 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No fields matching the name(s) %s were found in the class hierarchy of %s.", $r10);

        specialinvoke $r9.<org.powermock.reflect.exceptions.FieldNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label6:
        return r16;
    }

    public static transient java.lang.Object performMethodInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Exception
    {
        java.lang.Object r0, r4, r6, r18;
        java.lang.reflect.Method r1;
        java.lang.Object[] r2, r5, $r17;
        boolean z0, $z1, $z2, $z3;
        java.lang.Class r3, $r10;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Throwable $r11, r20;
        java.lang.reflect.InvocationTargetException $r12;
        org.powermock.reflect.exceptions.MethodInvocationException $r13;
        java.lang.Error $r14;
        java.lang.Exception $r15;
        java.lang.Class[] r16;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

        z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isAccessible()>();

        if z0 != 0 goto label01;

        virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label01:
        $z1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isPotentialVarArgsMethod(java.lang.reflect.Method,java.lang.Object[])>(r1, r2);

        if $z1 == 0 goto label04;

        r16 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r16;

        i4 = $i0 - 1;

        $r10 = r16[i4];

        r3 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Object createAndPopulateVarArgsArray(java.lang.Class,int,java.lang.Object[])>(r3, i4, r2);

        $i1 = lengthof r16;

        r5 = newarray (java.lang.Object)[$i1];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r5, 0, i4);

        $i2 = lengthof r5;

        $i3 = $i2 - 1;

        r5[$i3] = r4;

        r6 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, r5);

     label02:
        if z0 != 0 goto label03;

        virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label03:
        return r6;

     label04:
        if r2 != null goto label05;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r2;

        goto label06;

     label05:
        $r17 = r2;

     label06:
        r18 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r17);

     label07:
        if z0 != 0 goto label08;

        virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label08:
        return r18;

     label09:
        $r12 := @caughtexception;

        r20 = virtualinvoke $r12.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z2 = r20 instanceof java.lang.Exception;

        if $z2 == 0 goto label10;

        $r15 = (java.lang.Exception) r20;

        throw $r15;

     label10:
        $z3 = r20 instanceof java.lang.Error;

        if $z3 == 0 goto label11;

        $r14 = (java.lang.Error) r20;

        throw $r14;

     label11:
        $r13 = new org.powermock.reflect.exceptions.MethodInvocationException;

        specialinvoke $r13.<org.powermock.reflect.exceptions.MethodInvocationException: void <init>(java.lang.Throwable)>(r20);

        throw $r13;

     label12:
        $r11 := @caughtexception;

     label13:
        if z0 != 0 goto label14;

        virtualinvoke r1.<java.lang.reflect.Method: void setAccessible(boolean)>(0);

     label14:
        throw $r11;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label09;
        catch java.lang.reflect.InvocationTargetException from label04 to label07 with label09;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label07 with label12;
        catch java.lang.Throwable from label09 to label13 with label12;
    }

    public static transient java.lang.reflect.Method[] getAllMethodExcept(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Method[] r3, $r9, $r11;
        int i0, i1, i2, i3;
        java.lang.reflect.Method r5;
        java.lang.String r7, $r12;
        java.util.LinkedList $r8;
        java.lang.Object[] $r10;
        boolean $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r0);

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        r5 = r3[i2];

        i1 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r7 = r1[i3];

        $r12 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label3;

        goto label5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r5);

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r9 = newarray (java.lang.reflect.Method)[0];

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.reflect.Method[]) $r10;

        return $r11;
    }

    public static java.lang.reflect.Method[] getAllMethodsExcept(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, $r13, $r14, $r15;
        java.lang.String r1, $r12;
        java.lang.Class[] r2, r7;
        java.lang.reflect.Method[] r3, $r9, $r11;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.reflect.Method r6;
        java.util.ArrayList $r8;
        java.lang.Object[] $r10;
        boolean $z0, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method[] getAllMethods(java.lang.Class)>(r0);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r3;

        i5 = 0;

     label1:
        if i5 >= i0 goto label6;

        r6 = r3[i5];

        $r12 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        if r2 == null goto label5;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label5;

        r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if r7 == null goto label4;

        $i3 = lengthof r7;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label4;

        i6 = 0;

     label2:
        $i4 = lengthof r7;

        if i6 >= $i4 goto label4;

        $r14 = r7[i6];

        $r13 = r2[i6];

        $r15 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>($r13);

        $z2 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r15);

        if $z2 == 0 goto label3;

        goto label5;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r6);

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $r9 = newarray (java.lang.reflect.Method)[0];

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.reflect.Method[]) $r10;

        return $r11;
    }

    public static transient boolean areAllMethodsStatic(java.lang.reflect.Method[])
    {
        java.lang.reflect.Method[] r0;
        int i0, $i1, i2;
        java.lang.reflect.Method r2;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method[];

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r0[i2];

        $i1 = virtualinvoke r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    static boolean areAllArgumentsOfSameType(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Class r1, $r3;
        java.lang.Object r2, r4;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 > 1 goto label2;

     label1:
        return 1;

     label2:
        i4 = 0;

        r4 = null;

     label3:
        if r4 != null goto label4;

        $i2 = lengthof r0;

        if i4 >= $i2 goto label4;

        $i3 = i4;

        i4 = i4 + 1;

        r4 = r0[$i3];

        goto label3;

     label4:
        if r4 != null goto label5;

        return 1;

     label5:
        r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r4);

        i5 = i4;

     label6:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label8;

        r2 = r0[i5];

        if r2 == null goto label7;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label7;

        return 0;

     label7:
        i5 = i5 + 1;

        goto label6;

     label8:
        return 1;
    }

    static boolean checkArgumentTypesMatchParameterTypes(boolean, java.lang.Class[], java.lang.Object[])
    {
        boolean z0, $z1, $z2, $z3, $z4, z5, $z6;
        java.lang.Class[] r0;
        java.lang.Object[] r1;
        java.lang.Object r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        java.lang.Class $r3, $r4, $r5, $r6, $r7, r9;
        java.lang.IllegalArgumentException $r8;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Class[];

        r1 := @parameter2: java.lang.Object[];

        if r0 != null goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameter types cannot be null");

        throw $r8;

     label01:
        if z0 != 0 goto label02;

        $i6 = lengthof r1;

        $i5 = lengthof r0;

        if $i6 == $i5 goto label02;

        return 0;

     label02:
        i7 = 0;

     label03:
        $i8 = lengthof r1;

        if i7 >= $i8 goto label12;

        r2 = r1[i7];

        if r2 != null goto label06;

        $i3 = lengthof r0;

        if i7 < $i3 goto label04;

        $i4 = lengthof r0;

        i9 = $i4 - 1;

        goto label05;

     label04:
        i9 = i7;

     label05:
        r9 = r0[i9];

        $z4 = virtualinvoke r9.<java.lang.Class: boolean isPrimitive()>();

        if $z4 == 0 goto label11;

        return 0;

     label06:
        $i0 = lengthof r0;

        if i7 < $i0 goto label08;

        $i1 = lengthof r0;

        $i2 = $i1 - 1;

        $r6 = r0[$i2];

        $r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r2);

        $z3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>($r6, $r7);

        if $z3 == 0 goto label07;

        goto label11;

     label07:
        return 0;

     label08:
        $r3 = r0[i7];

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r2);

        z5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>($r3, $r4);

        $r5 = r0[i7];

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Class;");

        if $z1 == 0 goto label09;

        $z2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r2);

        if $z2 == 0 goto label09;

        $z6 = 1;

        goto label10;

     label09:
        $z6 = 0;

     label10:
        if z5 != 0 goto label11;

        if $z6 != 0 goto label11;

        return 0;

     label11:
        i7 = i7 + 1;

        goto label03;

     label12:
        return 1;
    }

    static boolean isAssignableFrom(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, r2, r3, r4;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getComponentType(java.lang.Class)>(r0);

        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getComponentType(java.lang.Class)>(r1);

        z1 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r3);

        if z1 != 0 goto label1;

        $z0 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: boolean hasPrimitiveCounterPart(java.lang.Class)>(r3);

        if $z0 == 0 goto label1;

        r4 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.lang.Class getPrimitiveFromWrapperType(java.lang.Class)>(r3);

        if r4 == null goto label1;

        z1 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

     label1:
        return z1;
    }

    private static java.lang.Class getComponentType(java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 = r0;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Class getType(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.Class r1;

        r0 := @parameter0: java.lang.Object;

        r1 = null;

        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        goto label2;

     label1:
        if r0 == null goto label2;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        return r1;
    }

    public static java.lang.Class getUnproxyType(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.Class r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = null;

        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        r1 = (java.lang.Class) r0;

        goto label2;

     label1:
        if r0 == null goto label2;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        if r1 != null goto label3;

        $r2 = null;

        goto label4;

     label3:
        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r1);

     label4:
        return $r2;
    }

    public static java.lang.Class getInnerClassType(java.lang.Class, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r8;
        java.lang.String r1, $r3, $r7;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r7);

        return $r8;
    }

    public static java.lang.Class getLocalClassType(java.lang.Class, int, java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r9;
        int i0;
        java.lang.String r1, $r3, $r8;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r8);

        return $r9;
    }

    public static java.lang.Class getAnonymousInnerClassType(java.lang.Class, int) throws java.lang.ClassNotFoundException
    {
        java.lang.Class r0, $r7;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r6;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6);

        return $r7;
    }

    public static transient java.util.Set getFieldsAnnotatedWith(java.lang.Object, java.lang.Class, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class r1;
        java.lang.Class[] r2, $r3, $r5, r6;
        java.util.Set $r4;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = r1;

        r6 = (java.lang.Class[]) $r3;

        goto label3;

     label2:
        $i1 = lengthof r2;

        $i2 = $i1 + 1;

        $r5 = newarray (java.lang.Class)[$i2];

        r6 = (java.lang.Class[]) $r5;

        r6[0] = r1;

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r6, 1, $i3);

     label3:
        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getFieldsAnnotatedWith(java.lang.Object,java.lang.Class[])>(r0, r6);

        return $r4;
    }

    public static java.util.Set getFieldsAnnotatedWith(java.lang.Object, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class[] r1;
        org.powermock.reflect.internal.matcherstrategies.FieldAnnotationMatcherStrategy $r2;
        java.lang.Class $r3;
        java.util.Set $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class[];

        $r2 = new org.powermock.reflect.internal.matcherstrategies.FieldAnnotationMatcherStrategy;

        specialinvoke $r2.<org.powermock.reflect.internal.matcherstrategies.FieldAnnotationMatcherStrategy: void <init>(java.lang.Class[])>(r1);

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set findAllFieldsUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,boolean,java.lang.Class)>($r2, r0, 1, 0, $r3);

        return $r4;
    }

    public static java.util.Set getFieldsOfType(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3;
        org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy $r2;
        java.util.Set $r4;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        $r2 = new org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy;

        specialinvoke $r2.<org.powermock.reflect.internal.matcherstrategies.AssignableFromFieldTypeMatcherStrategy: void <init>(java.lang.Class)>(r1);

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set findAllFieldsUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,boolean,java.lang.Class)>($r2, r0, 1, 0, $r3);

        return $r4;
    }

    public static java.util.Set getAllInstanceFields(java.lang.Object)
    {
        java.lang.Object r0;
        org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy $r1;
        java.lang.Class $r2;
        java.util.Set $r3;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy;

        specialinvoke $r1.<org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy: void <init>()>();

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getUnproxyType(java.lang.Object)>(r0);

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set findAllFieldsUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,boolean,java.lang.Class)>($r1, r0, 1, 1, $r2);

        return $r3;
    }

    public static java.util.Set getAllStaticFields(java.lang.Class)
    {
        java.lang.Class r0;
        org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy $r1;
        java.util.Set $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy;

        specialinvoke $r1.<org.powermock.reflect.internal.matcherstrategies.AllFieldsMatcherStrategy: void <init>()>();

        $r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set findAllFieldsUsingStrategy(org.powermock.reflect.internal.matcherstrategies.FieldMatcherStrategy,java.lang.Object,boolean,boolean,java.lang.Class)>($r1, r0, 0, 0, r0);

        return $r2;
    }

    public static boolean isClass(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Class;

        return $z0;
    }

    public static boolean checkIfParameterTypesAreSame(boolean, java.lang.Class[], java.lang.Class[])
    {
        boolean z0, $z1;
        java.lang.Class[] r0, r1;
        org.powermock.reflect.internal.ParameterTypesMatcher $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Class[];

        r1 := @parameter2: java.lang.Class[];

        $r2 = new org.powermock.reflect.internal.ParameterTypesMatcher;

        specialinvoke $r2.<org.powermock.reflect.internal.ParameterTypesMatcher: void <init>(boolean,java.lang.Class[],java.lang.Class[])>(z0, r0, r1);

        $z1 = virtualinvoke $r2.<org.powermock.reflect.internal.ParameterTypesMatcher: boolean match()>();

        return $z1;
    }

    private static java.lang.reflect.Field getField(java.lang.String, java.lang.Class)
    {
        java.lang.String r0, $r9, $r12;
        java.lang.Class r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.NoSuchFieldException $r3;
        org.powermock.reflect.exceptions.FieldNotFoundException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11;
        java.lang.reflect.Field r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("where cannot be null");

        throw $r2;

     label1:
        r13 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        virtualinvoke r13.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.powermock.reflect.exceptions.FieldNotFoundException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not found in class ");

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.powermock.reflect.exceptions.FieldNotFoundException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label4:
        return r13;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    private static java.lang.reflect.Field findFieldOrThrowException(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, $r11;
        java.lang.reflect.Field[] r2;
        int i0, i1;
        java.lang.reflect.Field r3, r12;
        java.lang.IllegalArgumentException $r4;
        org.powermock.reflect.exceptions.FieldNotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fieldType and where cannot be null");

        throw $r4;

     label2:
        r12 = null;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r11 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        r12 = r3;

        goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        if r12 != null goto label6;

        $r5 = new org.powermock.reflect.exceptions.FieldNotFoundException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find a field of type ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("in where.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.powermock.reflect.exceptions.FieldNotFoundException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label6:
        return r12;
    }

    private static void setField(java.lang.Object, java.lang.Object, java.lang.reflect.Field)
    {
        java.lang.Object r0, r1;
        java.lang.reflect.Field r2;
        java.lang.IllegalAccessException $r3;
        java.lang.RuntimeException $r4;
        int i0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.reflect.Field;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label1:
        i0 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void removeFinalModifierIfPresent(java.lang.reflect.Field)>(r2);

        virtualinvoke r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r1);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void restoreModifiersToFieldIfChanged(int,java.lang.reflect.Field)>(i0, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to set field in method setInternalState.", $r3);

        throw $r4;

     label4:
        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    private static void removeFinalModifierIfPresent(java.lang.reflect.Field) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0;
        int i0, i1, $i2;
        boolean $z1;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = i0 & 16;

        if $i2 != 16 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        if $z1 == 0 goto label3;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void checkIfCanSetNewValue(java.lang.reflect.Field)>(r0);

        i1 = i0 & -17;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void sedModifiersToField(java.lang.reflect.Field,int)>(r0, i1);

     label3:
        return;
    }

    private static void checkIfCanSetNewValue(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        int i0, $i1, $i2;
        boolean z0, z2, z3, $z4, $z5;
        java.lang.Class $r1, $r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $i1 = i0 & 16;

        if $i1 != 16 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        z0 = $z4;

        $i2 = i0 & 8;

        if $i2 != 8 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        if z0 == 0 goto label6;

        if $z5 == 0 goto label6;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        z2 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if z2 == 0 goto label5;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You are trying to set a private static final primitive. Try using an object like Integer instead of int!");

        throw $r4;

     label5:
        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        z3 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if z3 == 0 goto label6;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You are trying to set a private static final String. Cannot set such fields!");

        throw $r3;

     label6:
        return;
    }

    private static void restoreModifiersToFieldIfChanged(int, java.lang.reflect.Field) throws java.lang.IllegalAccessException
    {
        int i0, i1;
        java.lang.reflect.Field r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.reflect.Field;

        i1 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        if i0 == i1 goto label1;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void sedModifiersToField(java.lang.reflect.Field,int)>(r0, i0);

     label1:
        return;
    }

    private static void sedModifiersToField(java.lang.reflect.Field, int) throws java.lang.IllegalAccessException
    {
        java.lang.reflect.Field r0, r3, r19;
        int i0, i1, i2;
        boolean z0, $z1, z2;
        java.lang.reflect.Field[] r1, $r12;
        java.lang.Class $r4, $r7, $r8;
        java.lang.NoSuchFieldException $r5, $r15;
        java.lang.Class[] $r6;
        java.lang.Object[] $r9;
        java.lang.Boolean $r10;
        java.lang.Object $r11;
        java.lang.String $r13, $r14;
        java.lang.RuntimeException $r16;
        java.lang.reflect.InvocationTargetException $r17;
        java.lang.NoSuchMethodException $r18;
        java.lang.reflect.Method r21;

        r0 := @parameter0: java.lang.reflect.Field;

        i0 := @parameter1: int;

     label01:
        r19 = null;

     label02:
        $r4 = class "Ljava/lang/reflect/Field;";

        r19 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("modifiers");

     label03:
        goto label12;

     label04:
        $r5 := @caughtexception;

     label05:
        $r8 = class "Ljava/lang/Class;";

        $r6 = newarray (java.lang.Class)[1];

        $r7 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r6[0] = $r7;

        r21 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getDeclaredFields0", $r6);

        z0 = virtualinvoke r21.<java.lang.reflect.Method: boolean isAccessible()>();

        virtualinvoke r21.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r9[0] = $r10;

        $r11 = virtualinvoke r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(class "Ljava/lang/reflect/Field;", $r9);

        $r12 = (java.lang.reflect.Field[]) $r11;

        r1 = (java.lang.reflect.Field[]) $r12;

        virtualinvoke r21.<java.lang.reflect.Method: void setAccessible(boolean)>(z0);

        i1 = lengthof r1;

        i2 = 0;

     label06:
        if i2 >= i1 goto label08;

        r3 = r1[i2];

        $r13 = "modifiers";

        $r14 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label07;

        r19 = r3;

        goto label08;

     label07:
        i2 = i2 + 1;

        goto label06;

     label08:
        if r19 != null goto label09;

        throw $r5;

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        virtualinvoke $r5.<java.lang.NoSuchFieldException: void addSuppressed(java.lang.Throwable)>($r18);

        throw $r5;

     label11:
        $r17 := @caughtexception;

        virtualinvoke $r5.<java.lang.NoSuchFieldException: void addSuppressed(java.lang.Throwable)>($r17);

        throw $r5;

     label12:
        z2 = virtualinvoke r19.<java.lang.reflect.Field: boolean isAccessible()>();

        virtualinvoke r19.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r19.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(r0, i0);

        virtualinvoke r19.<java.lang.reflect.Field: void setAccessible(boolean)>(z2);

     label13:
        goto label15;

     label14:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal error: Failed to find the \"modifiers\" field in method setInternalState.", $r15);

        throw $r16;

     label15:
        return;

        catch java.lang.NoSuchFieldException from label02 to label03 with label04;
        catch java.lang.NoSuchMethodException from label05 to label09 with label10;
        catch java.lang.reflect.InvocationTargetException from label05 to label09 with label11;
        catch java.lang.NoSuchFieldException from label01 to label13 with label14;
    }

    private static transient java.lang.String concatenateStrings(java.lang.String[])
    {
        java.lang.String[] r0;
        int i0, $i1, i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7;

        r0 := @parameter0: java.lang.String[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $i1 = i0 - 1;

        if i2 != $i1 goto label2;

        if i0 == 1 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        goto label3;

     label2:
        if i2 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $r7 = r0[i2];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static boolean isPotentialVarArgsMethod(java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.reflect.Method r0;
        java.lang.Object[] r1;
        boolean $z0, $z1;
        java.lang.Class[] $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.lang.reflect.Method: boolean isVarArgs()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $z1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean doesParameterTypesMatchForVarArgsInvocation(boolean,java.lang.Class[],java.lang.Object[])>($z0, $r2, r1);

        return $z1;
    }

    static boolean doesParameterTypesMatchForVarArgsInvocation(boolean, java.lang.Class[], java.lang.Object[])
    {
        java.lang.Class[] r0;
        java.lang.Object[] r1;
        java.lang.Class r2, r4, r5, $r6;
        java.lang.Object r3;
        boolean $z0, z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        z1 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Class[];

        r1 := @parameter2: java.lang.Object[];

        if z1 == 0 goto label1;

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 < 1 goto label1;

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 < 1 goto label1;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        $r6 = r0[$i3];

        r2 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        r3 = r1[$i5];

        if r3 == null goto label1;

        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getTypeAsPrimitiveIfWrapped(java.lang.Object)>(r3);

        r5 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getTypeAsPrimitiveIfWrapped(java.lang.Object)>(r2);

        z1 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

     label1:
        if z1 == 0 goto label2;

        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean checkArgumentTypesMatchParameterTypes(boolean,java.lang.Class[],java.lang.Object[])>(z1, r0, r1);

        if $z0 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static java.lang.Class getTypeAsPrimitiveIfWrapped(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label3;

        r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        $z0 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: boolean hasPrimitiveCounterPart(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.lang.Class getPrimitiveFromWrapperType(java.lang.Class)>(r1);

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;

     label3:
        return null;
    }

    public static void setInternalStateFromContext(java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object r0, r1, r4;
        java.lang.Object[] r2;
        int i0, $i1, i2;
        org.powermock.reflect.matching.FieldMatchingStrategy $r5, $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object[];

        $r5 = <org.powermock.reflect.matching.FieldMatchingStrategy: org.powermock.reflect.matching.FieldMatchingStrategy MATCHING>;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r1, $r5);

        if r2 == null goto label2;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r2[i2];

        $r6 = <org.powermock.reflect.matching.FieldMatchingStrategy: org.powermock.reflect.matching.FieldMatchingStrategy MATCHING>;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r4, $r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setInternalStateFromContext(java.lang.Object, java.lang.Object, org.powermock.reflect.matching.FieldMatchingStrategy)
    {
        java.lang.Object r0, r1;
        org.powermock.reflect.matching.FieldMatchingStrategy r2;
        boolean $z0;
        java.lang.Class $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.powermock.reflect.matching.FieldMatchingStrategy;

        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r1);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copyState(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, $r3, r2);

        goto label2;

     label1:
        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copyState(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r1, r2);

     label2:
        return;
    }

    public static void setInternalStateFromContext(java.lang.Object, java.lang.Class, java.lang.Class[])
    {
        java.lang.Object r0;
        java.lang.Class r1, r4;
        java.lang.Class[] r2;
        int i0, $i1, i2;
        org.powermock.reflect.matching.FieldMatchingStrategy $r5, $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class[];

        $r5 = <org.powermock.reflect.matching.FieldMatchingStrategy: org.powermock.reflect.matching.FieldMatchingStrategy MATCHING>;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r1, $r5);

        if r2 == null goto label2;

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r4 = r2[i2];

        $r6 = <org.powermock.reflect.matching.FieldMatchingStrategy: org.powermock.reflect.matching.FieldMatchingStrategy MATCHING>;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalStateFromContext(java.lang.Object,java.lang.Object,org.powermock.reflect.matching.FieldMatchingStrategy)>(r0, r4, $r6);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    static void copyState(java.lang.Object, java.lang.Object, org.powermock.reflect.matching.FieldMatchingStrategy)
    {
        java.lang.Object r0, r1, $r6, $r8, $r18;
        org.powermock.reflect.matching.FieldMatchingStrategy r2, $r16;
        java.util.Iterator r4;
        java.lang.reflect.Field r5;
        boolean $z0, $z1, z2;
        int $i0;
        java.lang.Class $r7, $r9;
        java.lang.IllegalArgumentException $r10, $r11, $r12;
        java.lang.IllegalAccessException $r13;
        java.lang.RuntimeException $r14;
        org.powermock.reflect.exceptions.FieldNotFoundException $r15;
        java.util.Set $r17;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.powermock.reflect.matching.FieldMatchingStrategy;

        if r0 != null goto label01;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("object to set state cannot be null");

        throw $r12;

     label01:
        if r1 != null goto label02;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context cannot be null");

        throw $r11;

     label02:
        if r2 != null goto label03;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("strategy cannot be null");

        throw $r10;

     label03:
        $z0 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: boolean isClass(java.lang.Object)>(r1);

        if $z0 == 0 goto label04;

        $r9 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r1);

        $r17 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getAllStaticFields(java.lang.Class)>($r9);

        goto label05;

     label04:
        $r17 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.util.Set getAllInstanceFields(java.lang.Object)>(r1);

     label05:
        r4 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.reflect.Field) $r6;

     label07:
        $i0 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if z2 == 0 goto label08;

        $r18 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getType(java.lang.Object)>(r0);

        goto label09;

     label08:
        $r18 = r0;

     label09:
        $r7 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r8 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void setInternalState(java.lang.Object,java.lang.Class,java.lang.Object)>($r18, $r7, $r8);

     label10:
        goto label14;

     label11:
        $r15 := @caughtexception;

        $r16 = <org.powermock.reflect.matching.FieldMatchingStrategy: org.powermock.reflect.matching.FieldMatchingStrategy STRICT>;

        if r2 != $r16 goto label12;

        throw $r15;

     label12:
        goto label14;

     label13:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Internal Error: Failed to get the field value in method setInternalStateFromContext.", $r13);

        throw $r14;

     label14:
        goto label06;

     label15:
        return;

        catch org.powermock.reflect.exceptions.FieldNotFoundException from label07 to label10 with label11;
        catch java.lang.IllegalAccessException from label07 to label10 with label13;
    }

    private static void assertObjectInGetInternalStateIsNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The object containing the field cannot be null");

        throw $r1;

     label1:
        return;
    }

    private static java.lang.Class[] convertParameterTypesToPrimitive(java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        java.lang.Class r2, $r3, $r4;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.Class[];

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label4;

        $r3 = r0[i2];

        r2 = staticinvoke <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.lang.Class getPrimitiveFromWrapperType(java.lang.Class)>($r3);

        if r2 != null goto label2;

        $r4 = r0[i2];

        r1[i2] = $r4;

        goto label3;

     label2:
        r1[i2] = r2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public static void copyToMock(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copy(java.lang.Object,java.lang.Object,java.lang.Class)>(r0, r1, $r2);

        return;
    }

    public static void copyToRealObject(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copy(java.lang.Object,java.lang.Object,java.lang.Class)>(r0, r1, $r2);

        return;
    }

    private static void copy(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

     label1:
        if r2 == class "Ljava/lang/Object;" goto label2;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copyValues(java.lang.Object,java.lang.Object,java.lang.Class)>(r0, r1, r2);

        r2 = virtualinvoke r2.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return;
    }

    private static void copyValues(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0, r1;
        java.lang.Class r2;
        java.lang.reflect.Field[] r3;
        int i0, $i1, i2;
        java.lang.reflect.Field r5;
        boolean z0, $z1;
        java.lang.Throwable $r8;
        java.lang.Exception $r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r3;

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        r5 = r3[i2];

        $i1 = virtualinvoke r5.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z1 == 0 goto label02;

        goto label09;

     label02:
        z0 = virtualinvoke r5.<java.lang.reflect.Field: boolean isAccessible()>();

     label03:
        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: void copyValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r0, r1, r5);

     label04:
        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(z0);

        goto label09;

     label05:
        $r9 := @caughtexception;

     label06:
        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(z0);

        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(z0);

        throw $r8;

     label09:
        i2 = i2 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private static void copyValue(java.lang.Object, java.lang.Object, java.lang.reflect.Field) throws java.lang.IllegalAccessException
    {
        java.lang.Object r0, r1, r3;
        java.lang.reflect.Field r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.reflect.Field;

        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        virtualinvoke r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    static void <clinit>()
    {
        org.powermock.reflect.internal.proxy.ProxyFrameworks $r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        $r0 = new org.powermock.reflect.internal.proxy.ProxyFrameworks;

        specialinvoke $r0.<org.powermock.reflect.internal.proxy.ProxyFrameworks: void <init>()>();

        <org.powermock.reflect.internal.WhiteboxImpl: org.powermock.reflect.internal.proxy.ProxyFrameworks proxyFrameworks> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.powermock.reflect.internal.WhiteboxImpl: java.util.concurrent.ConcurrentMap allClassMethodsCache> = $r1;

        return;
    }
}
