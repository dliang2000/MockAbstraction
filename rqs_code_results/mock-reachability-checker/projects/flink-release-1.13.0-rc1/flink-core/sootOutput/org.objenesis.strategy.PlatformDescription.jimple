public final class org.objenesis.strategy.PlatformDescription extends java.lang.Object
{
    public static final java.lang.String JROCKIT;
    public static final java.lang.String GNU;
    public static final java.lang.String SUN;
    public static final java.lang.String OPENJDK;
    public static final java.lang.String PERC;
    public static final java.lang.String DALVIK;
    public static final java.lang.String SPECIFICATION_VERSION;
    public static final java.lang.String VM_VERSION;
    public static final java.lang.String VM_INFO;
    public static final java.lang.String VENDOR_VERSION;
    public static final java.lang.String VENDOR;
    public static final java.lang.String JVM_NAME;
    public static final int ANDROID_VERSION;

    public static boolean isThisJVM(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.objenesis.strategy.PlatformDescription: java.lang.String JVM_NAME>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        return $z0;
    }

    private static int getAndroidVersion()
    {
        boolean $z0;
        int $i0;

        $z0 = staticinvoke <org.objenesis.strategy.PlatformDescription: boolean isThisJVM(java.lang.String)>("Dalvik");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = staticinvoke <org.objenesis.strategy.PlatformDescription: int getAndroidVersion0()>();

        return $i0;
    }

    private static int getAndroidVersion0()
    {
        java.lang.Class r0;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        java.lang.IllegalAccessException $r4;
        java.lang.RuntimeException $r5;
        java.lang.ClassNotFoundException $r6;
        org.objenesis.ObjenesisException $r7;
        java.lang.NoSuchFieldException $r8;
        int $i0, i1;
        java.lang.reflect.Field r10;

     label01:
        r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.os.Build$VERSION");

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

        $r7 = new org.objenesis.ObjenesisException;

        specialinvoke $r7.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label04:
        r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("SDK_INT");

     label05:
        goto label07;

     label06:
        $r8 := @caughtexception;

        $i0 = staticinvoke <org.objenesis.strategy.PlatformDescription: int getOldAndroidVersion(java.lang.Class)>(r0);

        return $i0;

     label07:
        $r2 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        $r3 = (java.lang.Integer) $r2;

        i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

     label08:
        goto label10;

     label09:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label10:
        return i1;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.NoSuchFieldException from label04 to label05 with label06;
        catch java.lang.IllegalAccessException from label07 to label08 with label09;
    }

    private static int getOldAndroidVersion(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.reflect.Field r1;
        java.lang.Object $r3;
        int $i0;
        java.lang.NoSuchFieldException $r4;
        org.objenesis.ObjenesisException $r5;
        java.lang.IllegalAccessException $r6;
        java.lang.RuntimeException $r7;
        java.lang.String r9;

        r0 := @parameter0: java.lang.Class;

     label1:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("SDK");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.objenesis.ObjenesisException;

        specialinvoke $r5.<org.objenesis.ObjenesisException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label4:
        $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r9 = (java.lang.String) $r3;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label7:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r9);

        return $i0;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label4 to label5 with label6;
    }

    private void <init>()
    {
        org.objenesis.strategy.PlatformDescription r0;

        r0 := @this: org.objenesis.strategy.PlatformDescription;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5;
        int $i0;

        <org.objenesis.strategy.PlatformDescription: java.lang.String DALVIK> = "Dalvik";

        <org.objenesis.strategy.PlatformDescription: java.lang.String PERC> = "PERC";

        <org.objenesis.strategy.PlatformDescription: java.lang.String OPENJDK> = "OpenJDK";

        <org.objenesis.strategy.PlatformDescription: java.lang.String SUN> = "Java HotSpot";

        <org.objenesis.strategy.PlatformDescription: java.lang.String GNU> = "GNU libgcj";

        <org.objenesis.strategy.PlatformDescription: java.lang.String JROCKIT> = "BEA";

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.specification.version");

        <org.objenesis.strategy.PlatformDescription: java.lang.String SPECIFICATION_VERSION> = $r0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.runtime.version");

        <org.objenesis.strategy.PlatformDescription: java.lang.String VM_VERSION> = $r1;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.info");

        <org.objenesis.strategy.PlatformDescription: java.lang.String VM_INFO> = $r2;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");

        <org.objenesis.strategy.PlatformDescription: java.lang.String VENDOR_VERSION> = $r3;

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor");

        <org.objenesis.strategy.PlatformDescription: java.lang.String VENDOR> = $r4;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.name");

        <org.objenesis.strategy.PlatformDescription: java.lang.String JVM_NAME> = $r5;

        $i0 = staticinvoke <org.objenesis.strategy.PlatformDescription: int getAndroidVersion()>();

        <org.objenesis.strategy.PlatformDescription: int ANDROID_VERSION> = $i0;

        return;
    }
}
