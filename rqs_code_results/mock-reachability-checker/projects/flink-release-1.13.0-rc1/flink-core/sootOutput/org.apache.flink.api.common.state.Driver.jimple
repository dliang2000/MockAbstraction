public class org.apache.flink.api.common.state.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.state.Driver r0;

        r0 := @this: org.apache.flink.api.common.state.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.state.Driver r0;
        org.apache.flink.api.common.state.ValueStateDescriptorTest $r3;
        org.apache.flink.api.common.state.ListStateDescriptorTest $r4;
        org.apache.flink.api.common.state.MapStateDescriptorTest $r5;
        org.apache.flink.api.common.state.StateTtlConfigTest $r6;
        org.apache.flink.api.common.state.StateDescriptorTest $r7;
        org.apache.flink.api.common.state.ReducingStateDescriptorTest $r8;
        java.lang.Exception $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r0 := @this: org.apache.flink.api.common.state.Driver;

        $r3 = new org.apache.flink.api.common.state.ValueStateDescriptorTest;

        specialinvoke $r3.<org.apache.flink.api.common.state.ValueStateDescriptorTest: void <init>()>();

     label01:
        virtualinvoke $r3.<org.apache.flink.api.common.state.ValueStateDescriptorTest: void testHashCodeEquals()>();

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r3.<org.apache.flink.api.common.state.ValueStateDescriptorTest: void testVeryLargeDefaultValue()>();

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

     label07:
        $r4 = new org.apache.flink.api.common.state.ListStateDescriptorTest;

        specialinvoke $r4.<org.apache.flink.api.common.state.ListStateDescriptorTest: void <init>()>();

     label08:
        virtualinvoke $r4.<org.apache.flink.api.common.state.ListStateDescriptorTest: void testListStateDescriptor()>();

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

     label11:
        virtualinvoke $r4.<org.apache.flink.api.common.state.ListStateDescriptorTest: void testHashCodeEquals()>();

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

     label14:
        virtualinvoke $r4.<org.apache.flink.api.common.state.ListStateDescriptorTest: void testSerializerDuplication()>();

        $r5 = new org.apache.flink.api.common.state.MapStateDescriptorTest;

        specialinvoke $r5.<org.apache.flink.api.common.state.MapStateDescriptorTest: void <init>()>();

     label15:
        virtualinvoke $r5.<org.apache.flink.api.common.state.MapStateDescriptorTest: void testMapStateDescriptor()>();

     label16:
        goto label18;

     label17:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

     label18:
        virtualinvoke $r5.<org.apache.flink.api.common.state.MapStateDescriptorTest: void testHashCodeEquals()>();

     label19:
        goto label21;

     label20:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label21:
        virtualinvoke $r5.<org.apache.flink.api.common.state.MapStateDescriptorTest: void testSerializerDuplication()>();

        $r6 = new org.apache.flink.api.common.state.StateTtlConfigTest;

        specialinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfigTest: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfigTest: void testStateTtlConfigBuildWithoutCleanupInBackground()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfigTest: void testStateTtlConfigBuildWithCleanupInBackground()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.StateTtlConfigTest: void testStateTtlConfigBuildWithNonPositiveCleanupIncrementalSize()>();

        $r7 = new org.apache.flink.api.common.state.StateDescriptorTest;

        specialinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void <init>()>();

     label22:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testInitializeWithSerializer()>();

     label23:
        goto label25;

     label24:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label25:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testInitializeSerializerBeforeSerialization()>();

     label26:
        goto label28;

     label27:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.lang.Exception: void printStackTrace()>();

     label28:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testInitializeSerializerAfterSerialization()>();

     label29:
        goto label31;

     label30:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.lang.Exception: void printStackTrace()>();

     label31:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testInitializeSerializerAfterSerializationWithCustomConfig()>();

     label32:
        goto label34;

     label33:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label34:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testSerializerDuplication()>();

     label35:
        goto label37;

     label36:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

     label37:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testHashCodeAndEquals()>();

     label38:
        goto label40;

     label39:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label40:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testEqualsSameNameAndTypeDifferentClass()>();

     label41:
        goto label43;

     label42:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.lang.Exception: void printStackTrace()>();

     label43:
        virtualinvoke $r7.<org.apache.flink.api.common.state.StateDescriptorTest: void testSerializerLazyInitializeInParallel()>();

     label44:
        goto label46;

     label45:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

     label46:
        $r8 = new org.apache.flink.api.common.state.ReducingStateDescriptorTest;

        specialinvoke $r8.<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void <init>()>();

     label47:
        virtualinvoke $r8.<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void testReducingStateDescriptor()>();

     label48:
        goto label50;

     label49:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

     label50:
        virtualinvoke $r8.<org.apache.flink.api.common.state.ReducingStateDescriptorTest: void testHashCodeEquals()>();

     label51:
        goto label53;

     label52:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label53:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label15 to label16 with label17;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.lang.Exception from label28 to label29 with label30;
        catch java.lang.Exception from label31 to label32 with label33;
        catch java.lang.Exception from label34 to label35 with label36;
        catch java.lang.Exception from label37 to label38 with label39;
        catch java.lang.Exception from label40 to label41 with label42;
        catch java.lang.Exception from label43 to label44 with label45;
        catch java.lang.Exception from label47 to label48 with label49;
        catch java.lang.Exception from label50 to label51 with label52;
    }
}
