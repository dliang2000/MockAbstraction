class org.powermock.configuration.support.ConfigurationBuilder extends java.lang.Object
{
    private final java.util.Map alias;
    private final java.lang.Class configurationType;

    static org.powermock.configuration.support.ConfigurationBuilder createConfigurationFor(java.lang.Class)
    {
        java.lang.Class r0;
        org.powermock.configuration.support.ConfigurationBuilder $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = new org.powermock.configuration.support.ConfigurationBuilder;

        specialinvoke $r1.<org.powermock.configuration.support.ConfigurationBuilder: void <init>(java.lang.Class)>(r0);

        return $r1;
    }

    private void <init>(java.lang.Class)
    {
        org.powermock.configuration.support.ConfigurationBuilder r0;
        java.lang.Class r1;
        java.util.HashMap $r2;

        r0 := @this: org.powermock.configuration.support.ConfigurationBuilder;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.configuration.support.ConfigurationBuilder: java.lang.Class configurationType> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.powermock.configuration.support.ConfigurationBuilder: java.util.Map alias> = $r2;

        return;
    }

    org.powermock.configuration.support.ConfigurationBuilder withValueAlias(java.lang.String, java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationBuilder r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: org.powermock.configuration.support.ConfigurationBuilder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.powermock.configuration.support.ConfigurationBuilder: java.util.Map alias>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return r0;
    }

    org.powermock.configuration.Configuration fromFile(java.lang.String)
    {
        org.powermock.configuration.support.ConfigurationBuilder r0;
        java.lang.String r1;
        java.util.Properties r2;
        org.powermock.configuration.support.PropertiesLoader $r3;
        org.powermock.configuration.Configuration $r4;

        r0 := @this: org.powermock.configuration.support.ConfigurationBuilder;

        r1 := @parameter0: java.lang.String;

        $r3 = new org.powermock.configuration.support.PropertiesLoader;

        specialinvoke $r3.<org.powermock.configuration.support.PropertiesLoader: void <init>()>();

        r2 = virtualinvoke $r3.<org.powermock.configuration.support.PropertiesLoader: java.util.Properties load(java.lang.String)>(r1);

        $r4 = virtualinvoke r0.<org.powermock.configuration.support.ConfigurationBuilder: org.powermock.configuration.Configuration fromProperties(java.util.Properties)>(r2);

        return $r4;
    }

    org.powermock.configuration.Configuration fromProperties(java.util.Properties)
    {
        org.powermock.configuration.support.ConfigurationBuilder r0;
        java.util.Properties r1;
        org.powermock.configuration.support.ConfigurationBuilder$ConfigurationCreator $r3;
        java.util.Map $r4;
        java.lang.Class $r5;
        org.powermock.configuration.Configuration $r6;

        r0 := @this: org.powermock.configuration.support.ConfigurationBuilder;

        r1 := @parameter0: java.util.Properties;

        $r3 = new org.powermock.configuration.support.ConfigurationBuilder$ConfigurationCreator;

        $r4 = r0.<org.powermock.configuration.support.ConfigurationBuilder: java.util.Map alias>;

        specialinvoke $r3.<org.powermock.configuration.support.ConfigurationBuilder$ConfigurationCreator: void <init>(java.util.Map,org.powermock.configuration.support.ConfigurationBuilder$1)>($r4, null);

        $r5 = r0.<org.powermock.configuration.support.ConfigurationBuilder: java.lang.Class configurationType>;

        $r6 = virtualinvoke $r3.<org.powermock.configuration.support.ConfigurationBuilder$ConfigurationCreator: org.powermock.configuration.Configuration create(java.lang.Class,java.util.Properties)>($r5, r1);

        return $r6;
    }
}
