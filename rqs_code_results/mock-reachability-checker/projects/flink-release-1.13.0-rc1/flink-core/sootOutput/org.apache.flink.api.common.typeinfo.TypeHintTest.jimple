public class org.apache.flink.api.common.typeinfo.TypeHintTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeinfo.TypeHintTest r0;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHintTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testTypeInfoDirect()
    {
        org.apache.flink.api.common.typeinfo.TypeHintTest r0;
        org.apache.flink.api.common.typeinfo.TypeHintTest$1 $r5;
        org.apache.flink.api.common.typeinfo.TypeHintTest$2 $r6;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r7, $r14, $r15, $r16;
        org.apache.flink.api.common.typeinfo.TypeInformation $r8, $r17;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.String $r9, $r10;
        org.apache.flink.api.common.typeinfo.TypeHintTest$3 $r11;
        org.apache.flink.api.java.typeutils.TupleTypeInfo $r12;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r13;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHintTest;

        $r5 = new org.apache.flink.api.common.typeinfo.TypeHintTest$1;

        specialinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeHintTest$1: void <init>(org.apache.flink.api.common.typeinfo.TypeHintTest)>(r0);

        $r6 = new org.apache.flink.api.common.typeinfo.TypeHintTest$2;

        specialinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeHintTest$2: void <init>(org.apache.flink.api.common.typeinfo.TypeHintTest)>(r0);

        $r7 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r8 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r8);

        $i0 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeHint: int hashCode()>();

        $i1 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeHint: int hashCode()>();

        if $i0 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $z0 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeHint: boolean equals(java.lang.Object)>($r6);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r9 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeHint: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeHint: java.lang.String toString()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r11 = new org.apache.flink.api.common.typeinfo.TypeHintTest$3;

        specialinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeHintTest$3: void <init>(org.apache.flink.api.common.typeinfo.TypeHintTest)>(r0);

        $r12 = new org.apache.flink.api.java.typeutils.TupleTypeInfo;

        $r13 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[3];

        $r14 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r13[0] = $r14;

        $r15 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo DOUBLE_TYPE_INFO>;

        $r13[1] = $r15;

        $r16 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo BOOLEAN_TYPE_INFO>;

        $r13[2] = $r16;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.TupleTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>($r13);

        $r17 = virtualinvoke $r11.<org.apache.flink.api.common.typeinfo.TypeHint: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r17);

        return;
    }

    public void testWithGenericParameter()
    {
        org.apache.flink.api.common.typeinfo.TypeHintTest r0;
        org.apache.flink.api.common.typeinfo.TypeHintTest$4 $r2;
        org.apache.flink.api.common.typeinfo.TypeHintTest$5 $r3;
        org.apache.flink.util.FlinkRuntimeException $r4;

        r0 := @this: org.apache.flink.api.common.typeinfo.TypeHintTest;

     label1:
        $r2 = new org.apache.flink.api.common.typeinfo.TypeHintTest$4;

        specialinvoke $r2.<org.apache.flink.api.common.typeinfo.TypeHintTest$4: void <init>(org.apache.flink.api.common.typeinfo.TypeHintTest)>(r0);

        staticinvoke <org.junit.Assert: void fail()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r3 = new org.apache.flink.api.common.typeinfo.TypeHintTest$5;

        specialinvoke $r3.<org.apache.flink.api.common.typeinfo.TypeHintTest$5: void <init>(org.apache.flink.api.common.typeinfo.TypeHintTest)>(r0);

        return;

        catch org.apache.flink.util.FlinkRuntimeException from label1 to label2 with label3;
    }
}
