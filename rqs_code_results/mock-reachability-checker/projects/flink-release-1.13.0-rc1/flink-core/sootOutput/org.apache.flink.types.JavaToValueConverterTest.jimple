public class org.apache.flink.types.JavaToValueConverterTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.JavaToValueConverterTest r0;

        r0 := @this: org.apache.flink.types.JavaToValueConverterTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testJavaToValueConversion()
    {
        org.apache.flink.types.JavaToValueConverterTest r0;
        org.apache.flink.types.Value $r1, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        org.apache.flink.types.StringValue $r2;
        org.apache.flink.types.ByteValue $r4;
        java.lang.Byte $r5;
        org.apache.flink.types.ShortValue $r7;
        java.lang.Short $r8;
        org.apache.flink.types.IntValue $r10;
        java.lang.Integer $r11;
        org.apache.flink.types.LongValue $r13;
        java.lang.Long $r14;
        org.apache.flink.types.FloatValue $r16;
        java.lang.Float $r17;
        org.apache.flink.types.DoubleValue $r19;
        java.lang.Double $r20;
        org.apache.flink.types.BooleanValue $r22;
        java.lang.Boolean $r23;
        org.apache.flink.types.CharValue $r25;
        java.lang.Character $r26;
        java.util.ArrayList $r28;
        java.lang.Exception $r30;
        java.lang.String $r31;
        java.lang.IllegalArgumentException $r32;

        r0 := @this: org.apache.flink.types.JavaToValueConverterTest;

     label1:
        $r1 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r1);

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("123Test");

        $r3 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>("123Test");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r4 = new org.apache.flink.types.ByteValue;

        specialinvoke $r4.<org.apache.flink.types.ByteValue: void <init>(byte)>(44);

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(44);

        $r6 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r7 = new org.apache.flink.types.ShortValue;

        specialinvoke $r7.<org.apache.flink.types.ShortValue: void <init>(short)>(10000);

        $r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(10000);

        $r9 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(3567564);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3567564);

        $r12 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = new org.apache.flink.types.LongValue;

        specialinvoke $r13.<org.apache.flink.types.LongValue: void <init>(long)>(767692734L);

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(767692734L);

        $r15 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $r16 = new org.apache.flink.types.FloatValue;

        specialinvoke $r16.<org.apache.flink.types.FloatValue: void <init>(float)>(17.5F);

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(17.5F);

        $r18 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r18);

        $r19 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r19.<org.apache.flink.types.DoubleValue: void <init>(double)>(3.1415926);

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.1415926);

        $r21 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r21);

        $r22 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r22.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(1);

        $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r24 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r24);

        $r25 = new org.apache.flink.types.CharValue;

        specialinvoke $r25.<org.apache.flink.types.CharValue: void <init>(char)>(64);

        $r26 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(64);

        $r27 = staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r27);

     label2:
        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.flink.types.JavaToValueConverter: org.apache.flink.types.Value convertBoxedJavaType(java.lang.Object)>($r28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Accepted invalid type.");

     label3:
        goto label5;

     label4:
        $r32 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

        $r31 = virtualinvoke $r30.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label7:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public void testValueToJavaConversion()
    {
        org.apache.flink.types.JavaToValueConverterTest r0;
        java.lang.Object $r1, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        org.apache.flink.types.StringValue $r2;
        java.lang.Byte $r4;
        org.apache.flink.types.ByteValue $r5;
        java.lang.Short $r7;
        org.apache.flink.types.ShortValue $r8;
        java.lang.Integer $r10;
        org.apache.flink.types.IntValue $r11;
        java.lang.Long $r13;
        org.apache.flink.types.LongValue $r14;
        java.lang.Float $r16;
        org.apache.flink.types.FloatValue $r17;
        java.lang.Double $r19;
        org.apache.flink.types.DoubleValue $r20;
        java.lang.Boolean $r22;
        org.apache.flink.types.BooleanValue $r23;
        java.lang.Character $r25;
        org.apache.flink.types.CharValue $r26;
        org.apache.flink.types.JavaToValueConverterTest$MyValue $r28;
        java.lang.Exception $r30;
        java.lang.String $r31;
        java.lang.IllegalArgumentException $r32;

        r0 := @this: org.apache.flink.types.JavaToValueConverterTest;

     label1:
        $r1 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>(null);

        staticinvoke <org.junit.Assert: void assertNull(java.lang.Object)>($r1);

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("123Test");

        $r3 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r2);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("123Test", $r3);

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(44);

        $r5 = new org.apache.flink.types.ByteValue;

        specialinvoke $r5.<org.apache.flink.types.ByteValue: void <init>(byte)>(44);

        $r6 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r5);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r7 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(10000);

        $r8 = new org.apache.flink.types.ShortValue;

        specialinvoke $r8.<org.apache.flink.types.ShortValue: void <init>(short)>(10000);

        $r9 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r8);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3567564);

        $r11 = new org.apache.flink.types.IntValue;

        specialinvoke $r11.<org.apache.flink.types.IntValue: void <init>(int)>(3567564);

        $r12 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r10, $r12);

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(767692734L);

        $r14 = new org.apache.flink.types.LongValue;

        specialinvoke $r14.<org.apache.flink.types.LongValue: void <init>(long)>(767692734L);

        $r15 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r14);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r13, $r15);

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(17.5F);

        $r17 = new org.apache.flink.types.FloatValue;

        specialinvoke $r17.<org.apache.flink.types.FloatValue: void <init>(float)>(17.5F);

        $r18 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r17);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r16, $r18);

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(3.1415926);

        $r20 = new org.apache.flink.types.DoubleValue;

        specialinvoke $r20.<org.apache.flink.types.DoubleValue: void <init>(double)>(3.1415926);

        $r21 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r20);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r19, $r21);

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r23 = new org.apache.flink.types.BooleanValue;

        specialinvoke $r23.<org.apache.flink.types.BooleanValue: void <init>(boolean)>(1);

        $r24 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r23);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, $r24);

        $r25 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(64);

        $r26 = new org.apache.flink.types.CharValue;

        specialinvoke $r26.<org.apache.flink.types.CharValue: void <init>(char)>(64);

        $r27 = staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r26);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r25, $r27);

     label2:
        $r28 = new org.apache.flink.types.JavaToValueConverterTest$MyValue;

        specialinvoke $r28.<org.apache.flink.types.JavaToValueConverterTest$MyValue: void <init>(org.apache.flink.types.JavaToValueConverterTest$1)>(null);

        staticinvoke <org.apache.flink.types.JavaToValueConverter: java.lang.Object convertValueType(org.apache.flink.types.Value)>($r28);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Accepted invalid type.");

     label3:
        goto label5;

     label4:
        $r32 := @caughtexception;

     label5:
        goto label7;

     label6:
        $r30 := @caughtexception;

        virtualinvoke $r30.<java.lang.Exception: void printStackTrace()>();

        $r31 = virtualinvoke $r30.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r31);

     label7:
        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label5 with label6;
    }
}
