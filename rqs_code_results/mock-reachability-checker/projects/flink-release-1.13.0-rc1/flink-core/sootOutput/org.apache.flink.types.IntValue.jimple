public class org.apache.flink.types.IntValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private int value;

    public void <init>()
    {
        org.apache.flink.types.IntValue r0;

        r0 := @this: org.apache.flink.types.IntValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.IntValue: int value> = 0;

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.types.IntValue r0;
        int i0;

        r0 := @this: org.apache.flink.types.IntValue;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.IntValue: int value> = i0;

        return;
    }

    public int getValue()
    {
        org.apache.flink.types.IntValue r0;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        return $i0;
    }

    public void setValue(int)
    {
        org.apache.flink.types.IntValue r0;
        int i0;

        r0 := @this: org.apache.flink.types.IntValue;

        i0 := @parameter0: int;

        r0.<org.apache.flink.types.IntValue: int value> = i0;

        return;
    }

    public void setValue(org.apache.flink.types.IntValue)
    {
        org.apache.flink.types.IntValue r0, r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.types.IntValue;

        $i0 = r1.<org.apache.flink.types.IntValue: int value>;

        r0.<org.apache.flink.types.IntValue: int value> = $i0;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.IntValue r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.IntValue;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.IntValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r0.<org.apache.flink.types.IntValue: int value> = $i0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.IntValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        return;
    }

    public int compareTo(org.apache.flink.types.IntValue)
    {
        org.apache.flink.types.IntValue r0, r1;
        int i0, $i1, $i2;
        byte $b3;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.types.IntValue;

        i0 = r1.<org.apache.flink.types.IntValue: int value>;

        $i1 = r0.<org.apache.flink.types.IntValue: int value>;

        if $i1 >= i0 goto label1;

        $b3 = -1;

        goto label3;

     label1:
        $i2 = r0.<org.apache.flink.types.IntValue: int value>;

        if $i2 <= i0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        return $b3;
    }

    public int hashCode()
    {
        org.apache.flink.types.IntValue r0;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.IntValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.IntValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.IntValue) r1;

        $i1 = $r2.<org.apache.flink.types.IntValue: int value>;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.IntValue r0;

        r0 := @this: org.apache.flink.types.IntValue;

        return 4;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.IntValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, i13, i14, i15, i16;
        byte $b9;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i13 := @parameter2: int;

        if i13 != 4 goto label1;

        $i11 = r0.<org.apache.flink.types.IntValue: int value>;

        $i12 = $i11 - -2147483648;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i0, $i12);

        goto label7;

     label1:
        if i13 > 0 goto label2;

        goto label7;

     label2:
        if i13 >= 4 goto label5;

        $i4 = r0.<org.apache.flink.types.IntValue: int value>;

        i14 = $i4 - -2147483648;

        i15 = 0;

     label3:
        if i13 <= 0 goto label4;

        $i10 = i0 + i15;

        $i5 = 3 - i15;

        $i6 = $i5 << 3;

        $i7 = i14 >>> $i6;

        $i8 = $i7 & 255;

        $b9 = (byte) $i8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, $b9);

        i13 = i13 + -1;

        i15 = i15 + 1;

        goto label3;

     label4:
        goto label7;

     label5:
        $i1 = r0.<org.apache.flink.types.IntValue: int value>;

        $i2 = $i1 - -2147483648;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void putIntBigEndian(int,int)>(i0, $i2);

        i16 = 4;

     label6:
        if i16 >= i13 goto label7;

        $i3 = i0 + i16;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i3, 0);

        i16 = i16 + 1;

        goto label6;

     label7:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.IntValue r0;

        r0 := @this: org.apache.flink.types.IntValue;

        return 4;
    }

    public void copyTo(org.apache.flink.types.IntValue)
    {
        org.apache.flink.types.IntValue r0, r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.types.IntValue;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        r1.<org.apache.flink.types.IntValue: int value> = $i0;

        return;
    }

    public org.apache.flink.types.IntValue copy()
    {
        org.apache.flink.types.IntValue r0, $r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        $r1 = new org.apache.flink.types.IntValue;

        $i0 = r0.<org.apache.flink.types.IntValue: int value>;

        specialinvoke $r1.<org.apache.flink.types.IntValue: void <init>(int)>($i0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.IntValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 4);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.IntValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.IntValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.IntValue: int compareTo(org.apache.flink.types.IntValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.IntValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.IntValue) r1;

        virtualinvoke r0.<org.apache.flink.types.IntValue: void setValue(org.apache.flink.types.IntValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.IntValue r0, $r1;

        r0 := @this: org.apache.flink.types.IntValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.IntValue: org.apache.flink.types.IntValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.IntValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.IntValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.IntValue) r1;

        virtualinvoke r0.<org.apache.flink.types.IntValue: void copyTo(org.apache.flink.types.IntValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.IntValue: long serialVersionUID> = 1L;

        return;
    }
}
