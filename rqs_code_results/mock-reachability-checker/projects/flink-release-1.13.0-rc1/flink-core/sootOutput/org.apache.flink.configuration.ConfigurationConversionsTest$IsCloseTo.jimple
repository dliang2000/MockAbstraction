class org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo extends org.hamcrest.TypeSafeMatcher
{
    private final float delta;
    private final float value;

    public void <init>(float, float)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        float f0, f1;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float delta> = f1;

        r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float value> = f0;

        return;
    }

    public boolean matchesSafely(java.lang.Float)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        java.lang.Float r1;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: java.lang.Float;

        $d0 = specialinvoke r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: double actualDelta(java.lang.Float)>(r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void describeMismatchSafely(java.lang.Float, org.hamcrest.Description)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        java.lang.Float r1;
        org.hamcrest.Description r2, $r3, $r4;
        double $d0;
        java.lang.Double $r5;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: java.lang.Float;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" differed by ");

        $d0 = specialinvoke r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: double actualDelta(java.lang.Float)>(r1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        org.hamcrest.Description r1, $r2, $r4, $r5;
        float $f0, $f1;
        java.lang.Float $r3, $r6;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a numeric value within ");

        $f0 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float delta>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" of ");

        $f1 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float value>;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return;
    }

    private double actualDelta(java.lang.Float)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        java.lang.Float r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        double $d0;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: java.lang.Float;

        $f0 = virtualinvoke r1.<java.lang.Float: float floatValue()>();

        $f1 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float value>;

        $f2 = $f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $f4 = r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: float delta>;

        $f5 = $f3 - $f4;

        $d0 = (double) $f5;

        return $d0;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Float $r3;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Float) r1;

        virtualinvoke r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: void describeMismatchSafely(java.lang.Float,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo r0;
        java.lang.Object r1;
        java.lang.Float $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Float) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.ConfigurationConversionsTest$IsCloseTo: boolean matchesSafely(java.lang.Float)>($r2);

        return $z0;
    }
}
