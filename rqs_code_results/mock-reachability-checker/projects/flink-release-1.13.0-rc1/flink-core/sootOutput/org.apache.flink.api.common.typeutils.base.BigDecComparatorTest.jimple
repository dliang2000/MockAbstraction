public class org.apache.flink.api.common.typeutils.base.BigDecComparatorTest extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparatorTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparatorTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparatorTest r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.base.BigDecComparator $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparatorTest;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigDecComparator;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigDecComparator: void <init>(boolean)>(z0);

        return $r1;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparatorTest r0;
        org.apache.flink.api.common.typeutils.base.BigDecSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparatorTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.BigDecSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.BigDecSerializer: void <init>()>();

        return $r1;
    }

    protected java.math.BigDecimal[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparatorTest r0;
        java.math.BigDecimal[] $r1;
        java.math.BigDecimal $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparatorTest;

        $r1 = newarray (java.math.BigDecimal)[19];

        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(java.lang.String)>("-12.5E1000");

        $r1[0] = $r2;

        $r3 = new java.math.BigDecimal;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.lang.String)>("-12.5E100");

        $r1[1] = $r3;

        $r4 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(-1.2E101);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-10000L);

        $r1[3] = $r5;

        $r6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(-1.1);

        $r1[4] = $r6;

        $r7 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(-1L);

        $r1[5] = $r7;

        $r8 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(-0.44);

        $r1[6] = $r8;

        $r9 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $r1[7] = $r9;

        $r10 = new java.math.BigDecimal;

        specialinvoke $r10.<java.math.BigDecimal: void <init>(java.lang.String)>("0.000000000000000000000000001");

        $r1[8] = $r10;

        $r11 = new java.math.BigDecimal;

        specialinvoke $r11.<java.math.BigDecimal: void <init>(java.lang.String)>("0.0000001");

        $r1[9] = $r11;

        $r12 = new java.math.BigDecimal;

        specialinvoke $r12.<java.math.BigDecimal: void <init>(java.lang.String)>("0.1234123413478523984729447");

        $r1[10] = $r12;

        $r13 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(1L);

        $r1[11] = $r13;

        $r14 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(1.1);

        $r1[12] = $r14;

        $r15 = <java.math.BigDecimal: java.math.BigDecimal TEN>;

        $r1[13] = $r15;

        $r16 = new java.math.BigDecimal;

        specialinvoke $r16.<java.math.BigDecimal: void <init>(java.lang.String)>("10000");

        $r1[14] = $r16;

        $r17 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(1.2E101);

        $r1[15] = $r17;

        $r18 = new java.math.BigDecimal;

        specialinvoke $r18.<java.math.BigDecimal: void <init>(java.lang.String)>("12.5E100");

        $r1[16] = $r18;

        $r19 = new java.math.BigDecimal;

        specialinvoke $r19.<java.math.BigDecimal: void <init>(java.lang.String)>("10E100000");

        $r1[17] = $r19;

        $r20 = new java.math.BigDecimal;

        specialinvoke $r20.<java.math.BigDecimal: void <init>(java.lang.String)>("10E1000000000");

        $r1[18] = $r20;

        return $r1;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.common.typeutils.base.BigDecComparatorTest r0;
        java.math.BigDecimal[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.BigDecComparatorTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.BigDecComparatorTest: java.math.BigDecimal[] getSortedTestData()>();

        return $r1;
    }
}
