public class org.apache.flink.api.java.typeutils.MapTypeInfo extends org.apache.flink.api.common.typeinfo.TypeInformation
{
    private final org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo;
    private final org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo;

    public void <init>(org.apache.flink.api.common.typeinfo.TypeInformation, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation r1, r2, $r4, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.typeinfo.TypeInformation;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The key type information cannot be null.");

        $r4 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r3;

        r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo> = $r4;

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "The value type information cannot be null.");

        $r6 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r5;

        r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo> = $r6;

        return;
    }

    public void <init>(java.lang.Class, java.lang.Class)
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        java.lang.Class r1, r2, $r4, $r7;
        java.lang.Object $r3, $r6;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5, $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInformation: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The key class cannot be null.");

        $r4 = (java.lang.Class) $r3;

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>($r4);

        r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo> = $r5;

        $r6 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "The value class cannot be null.");

        $r7 = (java.lang.Class) $r6;

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>($r7);

        r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo> = $r8;

        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getKeyTypeInfo()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        return $r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getValueTypeInfo()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        return $r1;
    }

    public boolean isBasicType()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return 0;
    }

    public boolean isTupleType()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return 0;
    }

    public int getArity()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return 0;
    }

    public int getTotalFields()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return 1;
    }

    public java.lang.Class getTypeClass()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return class "Ljava/util/Map;";
    }

    public boolean isKeyType()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        return 0;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        org.apache.flink.api.common.typeutils.TypeSerializer r2, r3;
        org.apache.flink.api.common.typeinfo.TypeInformation $r4, $r5;
        org.apache.flink.api.common.typeutils.base.MapSerializer $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r4 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        r2 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        r3 = virtualinvoke $r5.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        $r6 = new org.apache.flink.api.common.typeutils.base.MapSerializer;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.base.MapSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.TypeSerializer)>(r2, r3);

        return $r6;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r6;
        java.lang.String $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Map<");

        $r3 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.MapTypeInfo;

        if $z0 == 0 goto label4;

        r2 = (org.apache.flink.api.java.typeutils.MapTypeInfo) r1;

        $z1 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.MapTypeInfo: boolean canEqual(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r4 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        $z2 = virtualinvoke $r4.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label2;

        $r6 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        $z3 = virtualinvoke $r6.<org.apache.flink.api.common.typeinfo.TypeInformation: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        $r1 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation keyTypeInfo>;

        $i0 = virtualinvoke $r1.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = r0.<org.apache.flink.api.java.typeutils.MapTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation valueTypeInfo>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeinfo.TypeInformation: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public boolean canEqual(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.MapTypeInfo r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.MapTypeInfo;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
