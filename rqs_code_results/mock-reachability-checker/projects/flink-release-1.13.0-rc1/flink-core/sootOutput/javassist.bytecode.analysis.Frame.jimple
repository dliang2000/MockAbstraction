public class javassist.bytecode.analysis.Frame extends java.lang.Object
{
    private javassist.bytecode.analysis.Type[] locals;
    private javassist.bytecode.analysis.Type[] stack;
    private int top;
    private boolean jsrMerged;
    private boolean retMerged;

    public void <init>(int, int)
    {
        javassist.bytecode.analysis.Frame r0;
        int i0, i1;
        javassist.bytecode.analysis.Type[] $r1, $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (javassist.bytecode.analysis.Type)[i0];

        r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals> = $r1;

        $r2 = newarray (javassist.bytecode.analysis.Type)[i1];

        r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack> = $r2;

        return;
    }

    public javassist.bytecode.analysis.Type getLocal(int)
    {
        javassist.bytecode.analysis.Frame r0;
        int i0;
        javassist.bytecode.analysis.Type[] $r1;
        javassist.bytecode.analysis.Type $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r2 = $r1[i0];

        return $r2;
    }

    public void setLocal(int, javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Frame r0;
        int i0;
        javassist.bytecode.analysis.Type r1;
        javassist.bytecode.analysis.Type[] $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.analysis.Type;

        $r2 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r2[i0] = r1;

        return;
    }

    public javassist.bytecode.analysis.Type getStack(int)
    {
        javassist.bytecode.analysis.Frame r0;
        int i0;
        javassist.bytecode.analysis.Type[] $r1;
        javassist.bytecode.analysis.Type $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        i0 := @parameter0: int;

        $r1 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r2 = $r1[i0];

        return $r2;
    }

    public void setStack(int, javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Frame r0;
        int i0;
        javassist.bytecode.analysis.Type r1;
        javassist.bytecode.analysis.Type[] $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.analysis.Type;

        $r2 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r2[i0] = r1;

        return;
    }

    public void clearStack()
    {
        javassist.bytecode.analysis.Frame r0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        r0.<javassist.bytecode.analysis.Frame: int top> = 0;

        return;
    }

    public int getTopIndex()
    {
        javassist.bytecode.analysis.Frame r0;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $i0 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i1 = $i0 - 1;

        return $i1;
    }

    public int localsLength()
    {
        javassist.bytecode.analysis.Frame r0;
        javassist.bytecode.analysis.Type[] $r1;
        int $i0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $r1 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public javassist.bytecode.analysis.Type peek()
    {
        javassist.bytecode.analysis.Frame r0;
        int $i0, $i1, $i2;
        javassist.bytecode.analysis.Type[] $r1;
        javassist.bytecode.analysis.Type $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $i0 = r0.<javassist.bytecode.analysis.Frame: int top>;

        if $i0 >= 1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Stack is empty");

        throw $r3;

     label1:
        $r1 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i1 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i2 = $i1 - 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public javassist.bytecode.analysis.Type pop()
    {
        javassist.bytecode.analysis.Frame r0;
        int $i0, $i1, $i2;
        javassist.bytecode.analysis.Type[] $r1;
        javassist.bytecode.analysis.Type $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $i0 = r0.<javassist.bytecode.analysis.Frame: int top>;

        if $i0 >= 1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Stack is empty");

        throw $r3;

     label1:
        $r1 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i1 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i2 = $i1 - 1;

        r0.<javassist.bytecode.analysis.Frame: int top> = $i2;

        $r2 = $r1[$i2];

        return $r2;
    }

    public void push(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.Frame r0;
        javassist.bytecode.analysis.Type r1;
        int $i0, $i1;
        javassist.bytecode.analysis.Type[] $r2;

        r0 := @this: javassist.bytecode.analysis.Frame;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r2 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i0 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i1 = $i0 + 1;

        r0.<javassist.bytecode.analysis.Frame: int top> = $i1;

        $r2[$i0] = r1;

        return;
    }

    public javassist.bytecode.analysis.Frame copy()
    {
        javassist.bytecode.analysis.Frame r0, $r2;
        javassist.bytecode.analysis.Type[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $r2 = new javassist.bytecode.analysis.Frame;

        $r3 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i1 = lengthof $r3;

        $r4 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i0 = lengthof $r4;

        specialinvoke $r2.<javassist.bytecode.analysis.Frame: void <init>(int,int)>($i1, $i0);

        $r7 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r6 = $r2.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r5 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i2);

        $r10 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r9 = $r2.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r8 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i3 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i3);

        $i4 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $r2.<javassist.bytecode.analysis.Frame: int top> = $i4;

        return $r2;
    }

    public javassist.bytecode.analysis.Frame copyStack()
    {
        javassist.bytecode.analysis.Frame r0, $r2;
        javassist.bytecode.analysis.Type[] $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $r2 = new javassist.bytecode.analysis.Frame;

        $r3 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i1 = lengthof $r3;

        $r4 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i0 = lengthof $r4;

        specialinvoke $r2.<javassist.bytecode.analysis.Frame: void <init>(int,int)>($i1, $i0);

        $r7 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r6 = $r2.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r5 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $i2 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i2);

        $i3 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $r2.<javassist.bytecode.analysis.Frame: int top> = $i3;

        return $r2;
    }

    public boolean mergeStack(javassist.bytecode.analysis.Frame)
    {
        javassist.bytecode.analysis.Frame r0, r1;
        javassist.bytecode.analysis.Type r2, r3, $r5, $r8, $r9;
        int $i0, $i1, $i2, i3;
        javassist.bytecode.analysis.Type[] $r4, $r6, $r7, $r10;
        boolean $z0, $z1, z2;
        java.lang.RuntimeException $r11, $r16;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;

        r0 := @this: javassist.bytecode.analysis.Frame;

        r1 := @parameter0: javassist.bytecode.analysis.Frame;

        z2 = 0;

        $i1 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i0 = r1.<javassist.bytecode.analysis.Frame: int top>;

        if $i1 == $i0 goto label1;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Operand stacks could not be merged, they are different sizes!");

        throw $r16;

     label1:
        i3 = 0;

     label2:
        $i2 = r0.<javassist.bytecode.analysis.Frame: int top>;

        if i3 >= $i2 goto label6;

        $r4 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r5 = $r4[i3];

        if $r5 == null goto label5;

        $r6 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        r2 = $r6[i3];

        $r7 = r1.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r8 = $r7[i3];

        r3 = virtualinvoke r2.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>($r8);

        $r9 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type BOGUS>;

        if r3 != $r9 goto label3;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operand stacks could not be merged due to differing primitive types: pos = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label3:
        $r10 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r10[i3] = r3;

        $z0 = virtualinvoke r3.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r3.<javassist.bytecode.analysis.Type: boolean popChanged()>();

        if $z1 == 0 goto label5;

     label4:
        z2 = 1;

     label5:
        i3 = i3 + 1;

        goto label2;

     label6:
        return z2;
    }

    public boolean merge(javassist.bytecode.analysis.Frame)
    {
        javassist.bytecode.analysis.Frame r0, r1;
        javassist.bytecode.analysis.Type r2, r3, $r6, $r8, $r10, $r14;
        javassist.bytecode.analysis.Type[] $r4, $r5, $r7, $r9, $r11, $r12, $r13, $r15;
        int $i0, i1;
        boolean $z0, $z1, $z2, z3, z4;

        r0 := @this: javassist.bytecode.analysis.Frame;

        r1 := @parameter0: javassist.bytecode.analysis.Frame;

        z3 = 0;

        i1 = 0;

     label1:
        $r4 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label6;

        $r5 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r6 = $r5[i1];

        if $r6 == null goto label4;

        $r12 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        r2 = $r12[i1];

        $r13 = r1.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r14 = $r13[i1];

        r3 = virtualinvoke r2.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>($r14);

        $r15 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r15[i1] = r3;

        $z1 = virtualinvoke r3.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r3.<javassist.bytecode.analysis.Type: boolean popChanged()>();

        if $z2 == 0 goto label3;

     label2:
        z3 = 1;

     label3:
        goto label5;

     label4:
        $r7 = r1.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r8 = $r7[i1];

        if $r8 == null goto label5;

        $r11 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r9 = r1.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r10 = $r9[i1];

        $r11[i1] = $r10;

        z3 = 1;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $z0 = virtualinvoke r0.<javassist.bytecode.analysis.Frame: boolean mergeStack(javassist.bytecode.analysis.Frame)>(r1);

        z4 = z3 | $z0;

        return z4;
    }

    public java.lang.String toString()
    {
        javassist.bytecode.analysis.Frame r0;
        java.lang.StringBuffer $r2;
        javassist.bytecode.analysis.Type[] $r4, $r8, $r12, $r14, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String $r7, $r20;
        javassist.bytecode.analysis.Type $r9, $r13, $r15;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("locals = [");

        i6 = 0;

     label1:
        $r4 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i0 = lengthof $r4;

        if i6 >= $i0 goto label5;

        $r12 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r13 = $r12[i6];

        if $r13 != null goto label2;

        $r20 = "empty";

        goto label3;

     label2:
        $r14 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $r15 = $r14[i6];

        $r20 = virtualinvoke $r15.<javassist.bytecode.analysis.Type: java.lang.String toString()>();

     label3:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r17 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] locals>;

        $i4 = lengthof $r17;

        $i5 = $i4 - 1;

        if i6 >= $i5 goto label4;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] stack = [");

        i7 = 0;

     label6:
        $i1 = r0.<javassist.bytecode.analysis.Frame: int top>;

        if i7 >= $i1 goto label8;

        $r8 = r0.<javassist.bytecode.analysis.Frame: javassist.bytecode.analysis.Type[] stack>;

        $r9 = $r8[i7];

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r9);

        $i2 = r0.<javassist.bytecode.analysis.Frame: int top>;

        $i3 = $i2 - 1;

        if i7 >= $i3 goto label7;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label7:
        i7 = i7 + 1;

        goto label6;

     label8:
        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r7 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    boolean isJsrMerged()
    {
        javassist.bytecode.analysis.Frame r0;
        boolean $z0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $z0 = r0.<javassist.bytecode.analysis.Frame: boolean jsrMerged>;

        return $z0;
    }

    void setJsrMerged(boolean)
    {
        javassist.bytecode.analysis.Frame r0;
        boolean z0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        z0 := @parameter0: boolean;

        r0.<javassist.bytecode.analysis.Frame: boolean jsrMerged> = z0;

        return;
    }

    boolean isRetMerged()
    {
        javassist.bytecode.analysis.Frame r0;
        boolean $z0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        $z0 = r0.<javassist.bytecode.analysis.Frame: boolean retMerged>;

        return $z0;
    }

    void setRetMerged(boolean)
    {
        javassist.bytecode.analysis.Frame r0;
        boolean z0;

        r0 := @this: javassist.bytecode.analysis.Frame;

        z0 := @parameter0: boolean;

        r0.<javassist.bytecode.analysis.Frame: boolean retMerged> = z0;

        return;
    }
}
