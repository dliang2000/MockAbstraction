public class org.powermock.core.classloader.javassist.JavassistMockClassLoader extends org.powermock.core.classloader.MockClassLoader
{
    public static final java.lang.String CGLIB_ENHANCER;
    public static final java.lang.String CGLIB_METHOD_WRAPPER;
    private final javassist.ClassPool classPool;

    public void <init>(java.lang.String[])
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        java.lang.String[] r1, $r2;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: java.lang.String[];

        $r2 = newarray (java.lang.String)[0];

        specialinvoke r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: void <init>(java.lang.String[],java.lang.String[],org.powermock.core.classloader.annotations.UseClassPathAdjuster)>(r1, $r2, null);

        return;
    }

    public void <init>(java.lang.String[], java.lang.String[], org.powermock.core.classloader.annotations.UseClassPathAdjuster)
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        java.lang.String[] r1, r2;
        org.powermock.core.classloader.annotations.UseClassPathAdjuster r3;
        org.powermock.core.classloader.MockClassLoaderConfiguration $r4;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: org.powermock.core.classloader.annotations.UseClassPathAdjuster;

        $r4 = new org.powermock.core.classloader.MockClassLoaderConfiguration;

        specialinvoke $r4.<org.powermock.core.classloader.MockClassLoaderConfiguration: void <init>(java.lang.String[],java.lang.String[])>(r1, r2);

        specialinvoke r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration,org.powermock.core.classloader.annotations.UseClassPathAdjuster)>($r4, r3);

        return;
    }

    public void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration)
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        org.powermock.core.classloader.MockClassLoaderConfiguration r1;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: org.powermock.core.classloader.MockClassLoaderConfiguration;

        specialinvoke r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration,org.powermock.core.classloader.annotations.UseClassPathAdjuster)>(r1, null);

        return;
    }

    public void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration, org.powermock.core.classloader.annotations.UseClassPathAdjuster)
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        org.powermock.core.classloader.MockClassLoaderConfiguration r1;
        org.powermock.core.classloader.annotations.UseClassPathAdjuster r2;
        org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory $r3;
        org.powermock.core.classloader.javassist.ClassPoolFactory $r4;
        javassist.ClassPool $r5, $r6;
        org.powermock.core.classloader.ClassMarker $r7;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: org.powermock.core.classloader.MockClassLoaderConfiguration;

        r2 := @parameter1: org.powermock.core.classloader.annotations.UseClassPathAdjuster;

        $r3 = new org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory;

        specialinvoke $r3.<org.powermock.core.transformers.javassist.support.JavaAssistClassWrapperFactory: void <init>()>();

        specialinvoke r0.<org.powermock.core.classloader.MockClassLoader: void <init>(org.powermock.core.classloader.MockClassLoaderConfiguration,org.powermock.core.transformers.ClassWrapperFactory)>(r1, $r3);

        $r4 = new org.powermock.core.classloader.javassist.ClassPoolFactory;

        specialinvoke $r4.<org.powermock.core.classloader.javassist.ClassPoolFactory: void <init>(org.powermock.core.classloader.annotations.UseClassPathAdjuster)>(r2);

        $r5 = virtualinvoke $r4.<org.powermock.core.classloader.javassist.ClassPoolFactory: javassist.ClassPool create()>();

        r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: javassist.ClassPool classPool> = $r5;

        $r6 = r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: javassist.ClassPool classPool>;

        $r7 = staticinvoke <org.powermock.core.classloader.javassist.JavaAssistClassMarkerFactory: org.powermock.core.classloader.ClassMarker createClassMarker(javassist.ClassPool)>($r6);

        r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: org.powermock.core.classloader.ClassMarker classMarker> = $r7;

        return;
    }

    protected java.lang.Class loadUnmockedClass(java.lang.String, java.security.ProtectionDomain) throws java.lang.ClassFormatError, java.lang.ClassNotFoundException
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        java.lang.String r1, $r9;
        java.security.ProtectionDomain r2;
        boolean $z0, $z1, $z2;
        int $i0;
        javassist.ClassPool $r3;
        java.lang.Exception $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        javassist.NotFoundException $r10;
        java.lang.ClassLoader $r11;
        java.lang.Class $r12, $r17;
        byte[] r13;
        javassist.CtClass r14;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.ProtectionDomain;

        r13 = null;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib.proxy.Enhancer$EnhancerKey$$KeyFactoryByCGLIB$$");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib.core.MethodWrapper$MethodWrapperKey$$KeyFactoryByCGLIB");

        if $z1 != 0 goto label3;

        $r3 = r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: javassist.ClassPool classPool>;

        r14 = virtualinvoke $r3.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r1);

        $z2 = virtualinvoke r14.<javassist.CtClass: boolean isFrozen()>();

        if $z2 == 0 goto label2;

        virtualinvoke r14.<javassist.CtClass: void defrost()>();

     label2:
        r13 = virtualinvoke r14.<javassist.CtClass: byte[] toBytecode()>();

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r12 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return $r12;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to loaded class ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

     label6:
        if r13 != null goto label7;

        $r17 = null;

        goto label8;

     label7:
        $i0 = lengthof r13;

        $r17 = virtualinvoke r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r13, 0, $i0, r2);

     label8:
        return $r17;

        catch javassist.NotFoundException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }

    protected byte[] defineAndTransformClass(java.lang.String, java.security.ProtectionDomain)
    {
        org.powermock.core.classloader.javassist.JavassistMockClassLoader r0;
        java.lang.String r1, $r13, $r15;
        java.security.ProtectionDomain r2;
        byte[] r3;
        javassist.ClassPool $r4;
        org.powermock.core.transformers.ClassWrapperFactory $r5;
        java.lang.Object $r6;
        java.lang.Exception $r7;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;
        javassist.CtClass r16, r19;
        org.powermock.core.transformers.ClassWrapper r17, r18;

        r0 := @this: org.powermock.core.classloader.javassist.JavassistMockClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.ProtectionDomain;

        <javassist.ClassPool: boolean doPruning> = 0;

     label1:
        $r4 = r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: javassist.ClassPool classPool>;

        r16 = virtualinvoke $r4.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>(r1);

        $r5 = r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: org.powermock.core.transformers.ClassWrapperFactory classWrapperFactory>;

        r17 = interfaceinvoke $r5.<org.powermock.core.transformers.ClassWrapperFactory: org.powermock.core.transformers.ClassWrapper wrap(java.lang.Object)>(r16);

        r18 = virtualinvoke r0.<org.powermock.core.classloader.javassist.JavassistMockClassLoader: org.powermock.core.transformers.ClassWrapper transformClass(org.powermock.core.transformers.ClassWrapper)>(r17);

        $r6 = interfaceinvoke r18.<org.powermock.core.transformers.ClassWrapper: java.lang.Object unwrap()>();

        r19 = (javassist.CtClass) $r6;

        virtualinvoke r19.<javassist.CtClass: void detach()>();

        r3 = virtualinvoke r19.<javassist.CtClass: byte[] toBytecode()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to transform class with name ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Reason: ");

        $r13 = virtualinvoke $r7.<java.lang.Exception: java.lang.String getMessage()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r7);

        throw $r8;

     label4:
        return r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.powermock.core.classloader.javassist.JavassistMockClassLoader: java.lang.String CGLIB_METHOD_WRAPPER> = "net.sf.cglib.core.MethodWrapper$MethodWrapperKey$$KeyFactoryByCGLIB";

        <org.powermock.core.classloader.javassist.JavassistMockClassLoader: java.lang.String CGLIB_ENHANCER> = "net.sf.cglib.proxy.Enhancer$EnhancerKey$$KeyFactoryByCGLIB$$";

        return;
    }
}
