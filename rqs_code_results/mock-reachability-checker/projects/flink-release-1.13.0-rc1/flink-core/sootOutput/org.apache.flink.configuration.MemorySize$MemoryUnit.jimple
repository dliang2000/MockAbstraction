public final enum class org.apache.flink.configuration.MemorySize$MemoryUnit extends java.lang.Enum
{
    public static final enum org.apache.flink.configuration.MemorySize$MemoryUnit BYTES;
    public static final enum org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES;
    public static final enum org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES;
    public static final enum org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES;
    public static final enum org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES;
    private final java.lang.String[] units;
    private final long multiplier;
    private static final org.apache.flink.configuration.MemorySize$MemoryUnit[] $VALUES;

    public static org.apache.flink.configuration.MemorySize$MemoryUnit[] values()
    {
        org.apache.flink.configuration.MemorySize$MemoryUnit[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (org.apache.flink.configuration.MemorySize$MemoryUnit[]) $r1;

        return $r2;
    }

    public static org.apache.flink.configuration.MemorySize$MemoryUnit valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/flink/configuration/MemorySize$MemoryUnit;", r0);

        $r2 = (org.apache.flink.configuration.MemorySize$MemoryUnit) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, java.lang.String[], long)
    {
        org.apache.flink.configuration.MemorySize$MemoryUnit r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] r2;
        long l1;

        r0 := @this: org.apache.flink.configuration.MemorySize$MemoryUnit;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String[];

        l1 := @parameter3: long;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        r0.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] units> = r2;

        r0.<org.apache.flink.configuration.MemorySize$MemoryUnit: long multiplier> = l1;

        return;
    }

    public java.lang.String[] getUnits()
    {
        org.apache.flink.configuration.MemorySize$MemoryUnit r0;
        java.lang.String[] $r1;

        r0 := @this: org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r1 = r0.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] units>;

        return $r1;
    }

    public long getMultiplier()
    {
        org.apache.flink.configuration.MemorySize$MemoryUnit r0;
        long $l0;

        r0 := @this: org.apache.flink.configuration.MemorySize$MemoryUnit;

        $l0 = r0.<org.apache.flink.configuration.MemorySize$MemoryUnit: long multiplier>;

        return $l0;
    }

    public static java.lang.String getAllUnits()
    {
        java.lang.String[][] $r0;
        org.apache.flink.configuration.MemorySize$MemoryUnit $r1, $r3, $r5, $r7, $r9;
        java.lang.String[] $r2, $r4, $r6, $r8, $r10;
        java.lang.String $r11;

        $r0 = newarray (java.lang.String[])[5];

        $r1 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r2 = virtualinvoke $r1.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r0[0] = $r2;

        $r3 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $r4 = virtualinvoke $r3.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r0[1] = $r4;

        $r5 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r6 = virtualinvoke $r5.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r0[2] = $r6;

        $r7 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $r8 = virtualinvoke $r7.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r0[3] = $r8;

        $r9 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES>;

        $r10 = virtualinvoke $r9.<org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String[] getUnits()>();

        $r0[4] = $r10;

        $r11 = staticinvoke <org.apache.flink.configuration.MemorySize$MemoryUnit: java.lang.String concatenateUnits(java.lang.String[][])>($r0);

        return $r11;
    }

    public static boolean hasUnit(java.lang.String)
    {
        java.lang.String r0, r1, r2, $r4, $r5;
        int i0, i3, $i4;
        boolean $z0, $z1, $z2;
        char $c2;
        java.util.Locale $r6;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "text");

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "argument is an empty- or whitespace-only string");

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3);

        if $c2 < 48 goto label4;

        if $c2 > 57 goto label4;

        i3 = i3 + 1;

        goto label3;

     label4:
        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i3);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i4 <= 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private static transient java.lang.String concatenateUnits(java.lang.String[][])
    {
        java.lang.String[][] r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String[] r3;
        java.lang.String r5, $r7;
        java.lang.StringBuilder $r6;

        r0 := @parameter0: java.lang.String[][];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(128);

        i0 = lengthof r0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        r3 = r0[i6];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i1 = lengthof r3;

        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        r5 = r3[i7];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        i7 = i7 + 1;

        goto label2;

     label3:
        $i4 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        $i5 = $i4 - 3;

        virtualinvoke $r6.<java.lang.StringBuilder: void setLength(int)>($i5);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") / ");

        i6 = i6 + 1;

        goto label1;

     label4:
        $i2 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 3;

        virtualinvoke $r6.<java.lang.StringBuilder: void setLength(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.MemorySize$MemoryUnit $r0, $r2, $r4, $r6, $r8, $r11, $r12, $r13, $r14, $r15;
        java.lang.String[] $r1, $r3, $r5, $r7, $r9;
        org.apache.flink.configuration.MemorySize$MemoryUnit[] $r10;

        $r0 = new org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "b";

        $r1[1] = "bytes";

        specialinvoke $r0.<org.apache.flink.configuration.MemorySize$MemoryUnit: void <init>(java.lang.String,int,java.lang.String[],long)>("BYTES", 0, $r1, 1L);

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES> = $r0;

        $r2 = new org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "k";

        $r3[1] = "kb";

        $r3[2] = "kibibytes";

        specialinvoke $r2.<org.apache.flink.configuration.MemorySize$MemoryUnit: void <init>(java.lang.String,int,java.lang.String[],long)>("KILO_BYTES", 1, $r3, 1024L);

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES> = $r2;

        $r4 = new org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "m";

        $r5[1] = "mb";

        $r5[2] = "mebibytes";

        specialinvoke $r4.<org.apache.flink.configuration.MemorySize$MemoryUnit: void <init>(java.lang.String,int,java.lang.String[],long)>("MEGA_BYTES", 2, $r5, 1048576L);

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES> = $r4;

        $r6 = new org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = "g";

        $r7[1] = "gb";

        $r7[2] = "gibibytes";

        specialinvoke $r6.<org.apache.flink.configuration.MemorySize$MemoryUnit: void <init>(java.lang.String,int,java.lang.String[],long)>("GIGA_BYTES", 3, $r7, 1073741824L);

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES> = $r6;

        $r8 = new org.apache.flink.configuration.MemorySize$MemoryUnit;

        $r9 = newarray (java.lang.String)[3];

        $r9[0] = "t";

        $r9[1] = "tb";

        $r9[2] = "tebibytes";

        specialinvoke $r8.<org.apache.flink.configuration.MemorySize$MemoryUnit: void <init>(java.lang.String,int,java.lang.String[],long)>("TERA_BYTES", 4, $r9, 1099511627776L);

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES> = $r8;

        $r10 = newarray (org.apache.flink.configuration.MemorySize$MemoryUnit)[5];

        $r11 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit BYTES>;

        $r10[0] = $r11;

        $r12 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit KILO_BYTES>;

        $r10[1] = $r12;

        $r13 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit MEGA_BYTES>;

        $r10[2] = $r13;

        $r14 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit GIGA_BYTES>;

        $r10[3] = $r14;

        $r15 = <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit TERA_BYTES>;

        $r10[4] = $r15;

        <org.apache.flink.configuration.MemorySize$MemoryUnit: org.apache.flink.configuration.MemorySize$MemoryUnit[] $VALUES> = $r10;

        return;
    }
}
