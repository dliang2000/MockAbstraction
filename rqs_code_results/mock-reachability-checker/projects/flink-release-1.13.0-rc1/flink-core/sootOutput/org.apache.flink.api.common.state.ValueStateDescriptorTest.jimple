public class org.apache.flink.api.common.state.ValueStateDescriptorTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.api.common.state.ValueStateDescriptorTest r0;

        r0 := @this: org.apache.flink.api.common.state.ValueStateDescriptorTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testHashCodeEquals() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.ValueStateDescriptorTest r0;
        org.apache.flink.api.common.state.ValueStateDescriptor r5, $r6, $r7, $r8;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r9;
        int $i0, $i2, $i4, $i6;
        long $l1, $l3, $l5, $l7;
        java.io.Serializable $r10;
        org.apache.flink.api.common.ExecutionConfig $r11, $r12;

        r0 := @this: org.apache.flink.api.common.state.ValueStateDescriptorTest;

        $r6 = new org.apache.flink.api.common.state.ValueStateDescriptor;

        specialinvoke $r6.<org.apache.flink.api.common.state.ValueStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r7 = new org.apache.flink.api.common.state.ValueStateDescriptor;

        specialinvoke $r7.<org.apache.flink.api.common.state.ValueStateDescriptor: void <init>(java.lang.String,java.lang.Class)>("testName", class "Ljava/lang/String;");

        $r8 = new org.apache.flink.api.common.state.ValueStateDescriptor;

        $r9 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        specialinvoke $r8.<org.apache.flink.api.common.state.ValueStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer)>("testName", $r9);

        $i0 = virtualinvoke $r6.<org.apache.flink.api.common.state.ValueStateDescriptor: int hashCode()>();

        $l1 = (long) $i0;

        $i2 = virtualinvoke $r7.<org.apache.flink.api.common.state.ValueStateDescriptor: int hashCode()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, $l3);

        $i4 = virtualinvoke $r6.<org.apache.flink.api.common.state.ValueStateDescriptor: int hashCode()>();

        $l5 = (long) $i4;

        $i6 = virtualinvoke $r8.<org.apache.flink.api.common.state.ValueStateDescriptor: int hashCode()>();

        $l7 = (long) $i6;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l5, $l7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        $r10 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r6);

        r5 = (org.apache.flink.api.common.state.ValueStateDescriptor) $r10;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r11 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r11.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke r5.<org.apache.flink.api.common.state.ValueStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r11);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, r5);

        $r12 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r12.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.state.ValueStateDescriptor: void initializeSerializerUnlessSet(org.apache.flink.api.common.ExecutionConfig)>($r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;
    }

    public void testVeryLargeDefaultValue() throws java.lang.Exception
    {
        org.apache.flink.api.common.state.ValueStateDescriptorTest r0;
        byte[] r2;
        org.apache.flink.api.common.state.ValueStateDescriptor r4, $r9;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer $r5;
        org.apache.flink.api.common.ExecutionConfig $r6;
        java.lang.String $r7, $r10, $r15;
        java.nio.charset.Charset $r8;
        java.lang.Object $r11, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer $r12, $r13, $r17, $r18;
        java.io.Serializable $r14;
        int i0;

        r0 := @this: org.apache.flink.api.common.state.ValueStateDescriptorTest;

        $r5 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r6 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r6.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r5.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig)>(class "Ljava/lang/String;", $r6);

        r2 = newarray (byte)[200000];

        i0 = 0;

     label1:
        if i0 >= 200000 goto label2;

        r2[i0] = 65;

        i0 = i0 + 1;

        goto label1;

     label2:
        r2[199000] = 0;

        $r7 = new java.lang.String;

        $r8 = <org.apache.flink.configuration.ConfigConstants: java.nio.charset.Charset DEFAULT_CHARSET>;

        specialinvoke $r7.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r2, $r8);

        $r9 = new org.apache.flink.api.common.state.ValueStateDescriptor;

        specialinvoke $r9.<org.apache.flink.api.common.state.ValueStateDescriptor: void <init>(java.lang.String,org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object)>("testName", $r5, $r7);

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.state.ValueStateDescriptor: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("testName", $r10);

        $r11 = virtualinvoke $r9.<org.apache.flink.api.common.state.ValueStateDescriptor: java.lang.Object getDefaultValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r11);

        $r12 = virtualinvoke $r9.<org.apache.flink.api.common.state.ValueStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r9.<org.apache.flink.api.common.state.ValueStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r13);

        $r14 = staticinvoke <org.apache.flink.core.testutils.CommonTestUtils: java.io.Serializable createCopySerializable(java.io.Serializable)>($r9);

        r4 = (org.apache.flink.api.common.state.ValueStateDescriptor) $r14;

        $r15 = virtualinvoke r4.<org.apache.flink.api.common.state.ValueStateDescriptor: java.lang.String getName()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("testName", $r15);

        $r16 = virtualinvoke r4.<org.apache.flink.api.common.state.ValueStateDescriptor: java.lang.Object getDefaultValue()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r7, $r16);

        $r17 = virtualinvoke r4.<org.apache.flink.api.common.state.ValueStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r17);

        $r18 = virtualinvoke r4.<org.apache.flink.api.common.state.ValueStateDescriptor: org.apache.flink.api.common.typeutils.TypeSerializer getSerializer()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r18);

        return;
    }
}
