public abstract class org.apache.flink.types.MapValue extends java.lang.Object implements org.apache.flink.types.Value, java.util.Map
{
    private static final long serialVersionUID;
    private final java.lang.Class keyClass;
    private final java.lang.Class valueClass;
    private final java.util.Map map;

    public void <init>()
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Class $r1, $r2, $r3, $r4;
        java.util.HashMap $r5;

        r0 := @this: org.apache.flink.types.MapValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType1(java.lang.Class)>($r1);

        r0.<org.apache.flink.types.MapValue: java.lang.Class keyClass> = $r2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType2(java.lang.Class)>($r3);

        r0.<org.apache.flink.types.MapValue: java.lang.Class valueClass> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.types.MapValue: java.util.Map map> = $r5;

        return;
    }

    public void <init>(java.util.Map)
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map r1;
        java.lang.Class $r2, $r3, $r4, $r5;
        java.util.HashMap $r6;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType1(java.lang.Class)>($r2);

        r0.<org.apache.flink.types.MapValue: java.lang.Class keyClass> = $r3;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType2(java.lang.Class)>($r4);

        r0.<org.apache.flink.types.MapValue: java.lang.Class valueClass> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        r0.<org.apache.flink.types.MapValue: java.util.Map map> = $r6;

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.MapValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.types.Value r2, r12;
        java.util.Map $r3, $r8;
        java.lang.Class $r4, $r6;
        java.lang.Object $r5, $r7;
        java.lang.ReflectiveOperationException $r10;
        java.lang.RuntimeException $r11;
        int i0;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r3 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

     label1:
        if i0 <= 0 goto label2;

        $r4 = r0.<org.apache.flink.types.MapValue: java.lang.Class keyClass>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        r12 = (org.apache.flink.types.Value) $r5;

        $r6 = r0.<org.apache.flink.types.MapValue: java.lang.Class valueClass>;

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (org.apache.flink.types.Value) $r7;

        interfaceinvoke r12.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        interfaceinvoke r2.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r8 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r2);

        i0 = i0 + -1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label4:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.MapValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map $r4, $r5;
        int $i0;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r10;
        org.apache.flink.types.Value $r9, $r11;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r4 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $i0 = interfaceinvoke $r4.<java.util.Map: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r5 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (org.apache.flink.types.Value) $r8;

        interfaceinvoke $r9.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (org.apache.flink.types.Value) $r10;

        interfaceinvoke $r11.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        int $i1, $i2, i4;

        r0 := @this: org.apache.flink.types.MapValue;

        $i1 = 47 * 1;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $i2 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.util.Map $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (org.apache.flink.types.MapValue) r1;

        $r5 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        if $r5 != null goto label4;

        $r8 = r2.<org.apache.flink.types.MapValue: java.util.Map map>;

        if $r8 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r6 = r2.<org.apache.flink.types.MapValue: java.util.Map map>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void clear()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set entrySet()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        return $r2;
    }

    public org.apache.flink.types.Value get(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        org.apache.flink.types.Value $r4;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.types.Value) $r3;

        return $r4;
    }

    public boolean isEmpty()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public org.apache.flink.types.Value put(org.apache.flink.types.Value, org.apache.flink.types.Value)
    {
        org.apache.flink.types.MapValue r0;
        org.apache.flink.types.Value r1, r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        r2 := @parameter1: org.apache.flink.types.Value;

        $r3 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (org.apache.flink.types.Value) $r4;

        return $r5;
    }

    public void putAll(java.util.Map)
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map r1, $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1);

        return;
    }

    public org.apache.flink.types.Value remove(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        org.apache.flink.types.Value $r4;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (org.apache.flink.types.Value) $r3;

        return $r4;
    }

    public int size()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        org.apache.flink.types.MapValue r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        $r1 = r0.<org.apache.flink.types.MapValue: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public volatile java.lang.Object remove(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.flink.types.MapValue: org.apache.flink.types.Value remove(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1, r2;
        org.apache.flink.types.Value $r3, $r4, $r5;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.flink.types.Value) r1;

        $r3 = (org.apache.flink.types.Value) r2;

        $r5 = virtualinvoke r0.<org.apache.flink.types.MapValue: org.apache.flink.types.Value put(org.apache.flink.types.Value,org.apache.flink.types.Value)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object get(java.lang.Object)
    {
        org.apache.flink.types.MapValue r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;

        r0 := @this: org.apache.flink.types.MapValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.apache.flink.types.MapValue: org.apache.flink.types.Value get(java.lang.Object)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.MapValue: long serialVersionUID> = 1L;

        return;
    }
}
