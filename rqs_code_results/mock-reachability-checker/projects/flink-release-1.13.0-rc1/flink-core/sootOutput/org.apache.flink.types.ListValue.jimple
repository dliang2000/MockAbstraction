public abstract class org.apache.flink.types.ListValue extends java.lang.Object implements org.apache.flink.types.Value, java.util.List
{
    private static final long serialVersionUID;
    private final java.lang.Class valueClass;
    private final java.util.List list;

    public void <init>()
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Class $r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: org.apache.flink.types.ListValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType1(java.lang.Class)>($r1);

        r0.<org.apache.flink.types.ListValue: java.lang.Class valueClass> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.types.ListValue: java.util.List list> = $r3;

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        java.util.Collection r1;
        java.lang.Class $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <org.apache.flink.util.ReflectionUtil: java.lang.Class getTemplateType1(java.lang.Class)>($r2);

        r0.<org.apache.flink.types.ListValue: java.lang.Class valueClass> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.apache.flink.types.ListValue: java.util.List list> = $r4;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.ListValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.util.List $r2, $r5;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.InstantiationException $r6;
        java.lang.RuntimeException $r7, $r9;
        java.lang.IllegalAccessException $r8;
        int i0;
        org.apache.flink.types.Value r10;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label1:
        if i0 <= 0 goto label2;

        $r3 = r0.<org.apache.flink.types.ListValue: java.lang.Class valueClass>;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r10 = (org.apache.flink.types.Value) $r4;

        interfaceinvoke r10.<org.apache.flink.types.Value: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $r5 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r10);

        i0 = i0 + -1;

        goto label1;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label5:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.ListValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.Iterator r2;
        org.apache.flink.types.Value r3;
        java.util.List $r4, $r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r4 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r5 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.types.Value) $r6;

        interfaceinvoke r3.<org.apache.flink.types.Value: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1, $r2;
        int $i1, $i3, i4;

        r0 := @this: org.apache.flink.types.ListValue;

        $i1 = 41 * 1;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $i3 = interfaceinvoke $r2.<java.util.List: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.util.List $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (org.apache.flink.types.ListValue) r1;

        $r5 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        if $r5 != null goto label4;

        $r8 = r2.<org.apache.flink.types.ListValue: java.util.List list>;

        if $r8 == null goto label5;

        return 0;

     label4:
        $r7 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r6 = r2.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public void add(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        org.apache.flink.types.Value r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        return;
    }

    public boolean add(org.apache.flink.types.Value)
    {
        org.apache.flink.types.ListValue r0;
        org.apache.flink.types.Value r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean addAll(int, java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(int,java.util.Collection)>(i0, r1);

        return $z0;
    }

    public void clear()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public org.apache.flink.types.Value get(int)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.apache.flink.types.Value) $r2;

        return $r3;
    }

    public int indexOf(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object r1;
        java.util.List $r2;
        int $i0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public int lastIndexOf(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object r1;
        java.util.List $r2;
        int $i0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $i0 = interfaceinvoke $r2.<java.util.List: int lastIndexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public java.util.ListIterator listIterator()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.util.List $r1;
        java.util.ListIterator $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator(int)>(i0);

        return $r2;
    }

    public org.apache.flink.types.Value remove(int)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        org.apache.flink.types.Value $r3;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $r3 = (org.apache.flink.types.Value) $r2;

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.flink.types.ListValue r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public org.apache.flink.types.Value set(int, org.apache.flink.types.Value)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        org.apache.flink.types.Value r1, $r4;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.types.Value;

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        $r4 = (org.apache.flink.types.Value) $r3;

        return $r4;
    }

    public int size()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List subList(int, int)
    {
        org.apache.flink.types.ListValue r0;
        int i0, i1;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.List subList(int,int)>(i0, i1);

        return $r2;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.flink.types.ListValue r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        $r1 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.apache.flink.types.ListValue: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public volatile java.lang.Object remove(int)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        org.apache.flink.types.Value $r1;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.types.ListValue: org.apache.flink.types.Value remove(int)>(i0);

        return $r1;
    }

    public volatile void add(int, java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        virtualinvoke r0.<org.apache.flink.types.ListValue: void add(int,org.apache.flink.types.Value)>(i0, $r2);

        return;
    }

    public volatile java.lang.Object set(int, java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2, $r3;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.types.ListValue: org.apache.flink.types.Value set(int,org.apache.flink.types.Value)>(i0, $r2);

        return $r3;
    }

    public volatile java.lang.Object get(int)
    {
        org.apache.flink.types.ListValue r0;
        int i0;
        org.apache.flink.types.Value $r1;

        r0 := @this: org.apache.flink.types.ListValue;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.types.ListValue: org.apache.flink.types.Value get(int)>(i0);

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        org.apache.flink.types.ListValue r0;
        java.lang.Object r1;
        org.apache.flink.types.Value $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.types.ListValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.Value) r1;

        $z0 = virtualinvoke r0.<org.apache.flink.types.ListValue: boolean add(org.apache.flink.types.Value)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.ListValue: long serialVersionUID> = 1L;

        return;
    }
}
