public class org.apache.flink.core.fs.Path extends java.lang.Object implements org.apache.flink.core.io.IOReadableWritable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.lang.String SEPARATOR;
    public static final char SEPARATOR_CHAR;
    public static final java.lang.String CUR_DIR;
    private static final java.util.regex.Pattern WINDOWS_ROOT_DIR_REGEX;
    private java.net.URI uri;

    public void <init>()
    {
        org.apache.flink.core.fs.Path r0;

        r0 := @this: org.apache.flink.core.fs.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.net.URI)
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI r1;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.net.URI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.core.fs.Path: java.net.URI uri> = r1;

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        org.apache.flink.core.fs.Path r0, $r3, $r4;
        java.lang.String r1, r2;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        $r4 = new org.apache.flink.core.fs.Path;

        specialinvoke $r4.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r3, $r4);

        return;
    }

    public void <init>(org.apache.flink.core.fs.Path, java.lang.String)
    {
        org.apache.flink.core.fs.Path r0, r1, $r3;
        java.lang.String r2;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>(r1, $r3);

        return;
    }

    public void <init>(java.lang.String, org.apache.flink.core.fs.Path)
    {
        org.apache.flink.core.fs.Path r0, r2, $r3;
        java.lang.String r1;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.core.fs.Path;

        $r3 = new org.apache.flink.core.fs.Path;

        specialinvoke $r3.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r3, r2);

        return;
    }

    public void <init>(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path)
    {
        org.apache.flink.core.fs.Path r0, r1, $r7, r25;
        java.lang.String r2, $r4, $r5, $r6, $r9, $r11, $r13, $r14, $r16, $r17, $r19, $r22, $r29;
        boolean $z0, $z1, $z2;
        java.net.URI $r3, $r8, $r10, $r12, $r15, r26, $r28, r30;
        java.lang.StringBuilder $r18, $r20, $r21;
        java.net.URISyntaxException $r23;
        java.lang.IllegalArgumentException $r24;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r25 := @parameter1: org.apache.flink.core.fs.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r26 = r1.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r2 = virtualinvoke r26.<java.net.URI: java.lang.String getPath()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

     label1:
        $r15 = new java.net.URI;

        $r16 = virtualinvoke r26.<java.net.URI: java.lang.String getScheme()>();

        $r17 = virtualinvoke r26.<java.net.URI: java.lang.String getAuthority()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r26.<java.net.URI: java.lang.String getPath()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r16, $r17, $r22, null, null);

        r26 = $r15;

     label2:
        goto label4;

     label3:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r23);

        throw $r24;

     label4:
        $r28 = r25.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r29 = virtualinvoke $r28.<java.net.URI: java.lang.String getPath()>();

        $z2 = virtualinvoke $r29.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 == 0 goto label5;

        $r7 = new org.apache.flink.core.fs.Path;

        $r8 = r25.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String getScheme()>();

        $r10 = r25.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String getAuthority()>();

        $r12 = r25.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r13 = virtualinvoke $r12.<java.net.URI: java.lang.String getPath()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r9, $r11, $r14);

        r25 = $r7;

     label5:
        $r3 = r25.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r30 = virtualinvoke r26.<java.net.URI: java.net.URI resolve(java.net.URI)>($r3);

        $r4 = virtualinvoke r30.<java.net.URI: java.lang.String getScheme()>();

        $r5 = virtualinvoke r30.<java.net.URI: java.lang.String getAuthority()>();

        $r6 = virtualinvoke r30.<java.net.URI: java.lang.String getPath()>();

        specialinvoke r0.<org.apache.flink.core.fs.Path: void initialize(java.lang.String,java.lang.String,java.lang.String)>($r4, $r5, $r6);

        return;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    private java.lang.String checkPathArg(java.lang.String)
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1;
        int $i0;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not create a Path from a null string");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not create a Path from an empty string");

        throw $r2;

     label2:
        return r1;
    }

    public void <init>(java.lang.String)
    {
        org.apache.flink.core.fs.Path r0;
        int i0, i1, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String r4, r5, r6, r7, r8;

        r0 := @this: org.apache.flink.core.fs.Path;

        r4 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r5 = specialinvoke r0.<org.apache.flink.core.fs.Path: java.lang.String checkPathArg(java.lang.String)>(r4);

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>(r5, 0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r6 = null;

        r7 = null;

        i7 = 0;

        i0 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(58);

        i1 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(47);

        if i0 == -1 goto label3;

        if i1 == -1 goto label2;

        if i0 >= i1 goto label3;

     label2:
        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        i7 = i0 + 1;

     label3:
        $z1 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String,int)>("//", i7);

        if $z1 == 0 goto label6;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        $i4 = $i3 - i7;

        if $i4 <= 2 goto label6;

        $i5 = i7 + 2;

        i8 = virtualinvoke r5.<java.lang.String: int indexOf(int,int)>(47, $i5);

        if i8 <= 0 goto label4;

        $i9 = i8;

        goto label5;

     label4:
        $i9 = virtualinvoke r5.<java.lang.String: int length()>();

     label5:
        $i6 = i7 + 2;

        r7 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>($i6, $i9);

        i7 = $i9;

     label6:
        $i10 = virtualinvoke r5.<java.lang.String: int length()>();

        r8 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i7, $i10);

        specialinvoke r0.<org.apache.flink.core.fs.Path: void initialize(java.lang.String,java.lang.String,java.lang.String)>(r6, r7, r8);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = specialinvoke r0.<org.apache.flink.core.fs.Path: java.lang.String checkPathArg(java.lang.String)>(r3);

        specialinvoke r0.<org.apache.flink.core.fs.Path: void initialize(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r4);

        return;
    }

    private void initialize(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1, r2, r3, $r6;
        java.net.URI $r5, $r7;
        java.net.URISyntaxException $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        $r5 = new java.net.URI;

        $r6 = specialinvoke r0.<org.apache.flink.core.fs.Path: java.lang.String normalizePath(java.lang.String)>(r3);

        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, $r6, null, null);

        $r7 = virtualinvoke $r5.<java.net.URI: java.net.URI normalize()>();

        r0.<org.apache.flink.core.fs.Path: java.net.URI uri> = $r7;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        return;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    private java.lang.String normalizePath(java.lang.String)
    {
        org.apache.flink.core.fs.Path r0;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, r4, r5, r6;

        r0 := @this: org.apache.flink.core.fs.Path;

        r4 := @parameter0: java.lang.String;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\\", "/");

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("/+", "/");

        $z0 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("/");

        if $z1 != 0 goto label1;

        $r1 = <org.apache.flink.core.fs.Path: java.util.regex.Pattern WINDOWS_ROOT_DIR_REGEX>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r6);

        $z2 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z2 != 0 goto label1;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        $r3 = "/";

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

     label1:
        return r6;
    }

    public java.net.URI toUri()
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        return $r1;
    }

    public org.apache.flink.core.fs.FileSystem getFileSystem() throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1;
        org.apache.flink.core.fs.FileSystem $r2;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r2 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem get(java.net.URI)>($r1);

        return $r2;
    }

    public boolean isAbsolute()
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1, $r3;
        java.lang.String $r2, $r4;
        boolean $z0, $z1;
        byte $b1;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>($r2, 1);

        if $z0 == 0 goto label1;

        $b1 = 3;

        goto label2;

     label1:
        $b1 = 0;

     label2:
        $r3 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getPath()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String,int)>("/", $b1);

        return $z1;
    }

    public java.lang.String getName()
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1, $r3;
        int i0, $i1;
        java.net.URI $r2;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getPath()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i1 = i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;
    }

    public java.lang.String getPath()
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        return $r2;
    }

    public org.apache.flink.core.fs.Path getParent()
    {
        org.apache.flink.core.fs.Path r0, $r5;
        java.lang.String r1, r4, $r7, $r9;
        int i0, $i3, $i5, $i6, $i9;
        java.net.URI $r2, $r6, $r8;
        boolean $z0, $z1;
        byte $b7, $b8;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getPath()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(47);

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>(r1, 1);

        if $z0 == 0 goto label01;

        $b7 = 3;

        goto label02;

     label01:
        $b7 = 0;

     label02:
        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 == $b7 goto label03;

        if i0 != $b7 goto label04;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = $b7 + 1;

        if $i5 != $i6 goto label04;

     label03:
        return null;

     label04:
        if i0 != -1 goto label05;

        r4 = ".";

        goto label10;

     label05:
        $z1 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>(r1, 1);

        if $z1 == 0 goto label06;

        $b8 = 3;

        goto label07;

     label06:
        $b8 = 0;

     label07:
        if i0 != $b8 goto label08;

        $i9 = $b8 + 1;

        goto label09;

     label08:
        $i9 = i0;

     label09:
        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

     label10:
        $r5 = new org.apache.flink.core.fs.Path;

        $r6 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r7 = virtualinvoke $r6.<java.net.URI: java.lang.String getScheme()>();

        $r8 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r9 = virtualinvoke $r8.<java.net.URI: java.lang.String getAuthority()>();

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, $r9, r4);

        return $r5;
    }

    public org.apache.flink.core.fs.Path suffix(java.lang.String)
    {
        org.apache.flink.core.fs.Path r0, $r2, $r3;
        java.lang.String r1, $r5, $r8;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.flink.core.fs.Path;

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<org.apache.flink.core.fs.Path: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>($r3, $r8);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.StringBuilder $r2;
        java.net.URI $r3, $r5, $r7, $r9, $r11, $r13, $r16, $r19;
        java.lang.String $r4, $r6, $r8, $r12, $r14, $r17, $r20, r23, $r24;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getScheme()>();

        if $r4 == null goto label1;

        $r19 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String getScheme()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label1:
        $r5 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getAuthority()>();

        if $r6 == null goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        $r16 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r17 = virtualinvoke $r16.<java.net.URI: java.lang.String getAuthority()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

     label2:
        $r7 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>();

        if $r8 == null goto label4;

        $r9 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r23 = virtualinvoke $r9.<java.net.URI: java.lang.String getPath()>();

        $i0 = virtualinvoke r23.<java.lang.String: int indexOf(int)>(47);

        if $i0 != 0 goto label3;

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>(r23, 1);

        if $z0 == 0 goto label3;

        $r11 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String getScheme()>();

        if $r12 != null goto label3;

        $r13 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getAuthority()>();

        if $r14 != null goto label3;

        r23 = virtualinvoke r23.<java.lang.String: java.lang.String substring(int)>(1);

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

     label4:
        $r24 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.core.fs.Path r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.net.URI $r3, $r4;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.core.fs.Path;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.flink.core.fs.Path) r1;

        $r4 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r3 = r2.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $z1 = virtualinvoke $r4.<java.net.URI: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $i0 = virtualinvoke $r1.<java.net.URI: int hashCode()>();

        return $i0;
    }

    public int compareTo(java.lang.Object)
    {
        org.apache.flink.core.fs.Path r0, r2;
        java.lang.Object r1;
        java.net.URI $r3, $r4;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.Object;

        r2 = (org.apache.flink.core.fs.Path) r1;

        $r4 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r3 = r2.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $i0 = virtualinvoke $r4.<java.net.URI: int compareTo(java.net.URI)>($r3);

        return $i0;
    }

    public int depth()
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1;
        java.net.URI $r2;
        int $i0, $i1, i3, i5;
        char $c2;
        byte $b4;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        r1 = virtualinvoke $r2.<java.net.URI: java.lang.String getPath()>();

        i3 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 1 goto label1;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c2 != 47 goto label1;

        $b4 = -1;

        goto label2;

     label1:
        $b4 = 0;

     label2:
        i5 = $b4;

     label3:
        if i5 == -1 goto label4;

        i3 = i3 + 1;

        $i1 = i5 + 1;

        i5 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String,int)>("/", $i1);

        goto label3;

     label4:
        return i3;
    }

    public org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem)
    {
        org.apache.flink.core.fs.Path r0, $r5, $r6, r7, $r10;
        org.apache.flink.core.fs.FileSystem r1;
        java.net.URI r2, r3;
        boolean $z0;
        java.lang.String $r4, r8, r9, $r15, $r17;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: org.apache.flink.core.fs.FileSystem;

        r7 = r0;

        $z0 = virtualinvoke r0.<org.apache.flink.core.fs.Path: boolean isAbsolute()>();

        if $z0 != 0 goto label1;

        $r5 = new org.apache.flink.core.fs.Path;

        $r6 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.Path getWorkingDirectory()>();

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.Path)>($r6, r0);

        r7 = $r5;

     label1:
        r2 = virtualinvoke r7.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        r3 = virtualinvoke r1.<org.apache.flink.core.fs.FileSystem: java.net.URI getUri()>();

        r8 = virtualinvoke r2.<java.net.URI: java.lang.String getScheme()>();

        r9 = virtualinvoke r2.<java.net.URI: java.lang.String getAuthority()>();

        if r8 == null goto label3;

        if r9 != null goto label2;

        $r4 = virtualinvoke r3.<java.net.URI: java.lang.String getAuthority()>();

        if $r4 != null goto label3;

     label2:
        return r7;

     label3:
        if r8 != null goto label4;

        r8 = virtualinvoke r3.<java.net.URI: java.lang.String getScheme()>();

     label4:
        if r9 != null goto label5;

        r9 = virtualinvoke r3.<java.net.URI: java.lang.String getAuthority()>();

        if r9 != null goto label5;

        r9 = "";

     label5:
        $r10 = new org.apache.flink.core.fs.Path;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r15 = virtualinvoke r2.<java.net.URI: java.lang.String getPath()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.flink.core.fs.Path: void <init>(java.lang.String)>($r17);

        return $r10;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0;
        org.apache.flink.core.memory.DataInputView r1;
        boolean z0;
        java.lang.String r2, r3, r4, r5, r6, r7;
        int i0;
        java.net.URI $r9;
        java.net.URISyntaxException $r10;
        java.io.IOException $r11;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        z0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: boolean readBoolean()>();

        if z0 == 0 goto label4;

        r2 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

        r3 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

        r4 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r5 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

        r6 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

        r7 = staticinvoke <org.apache.flink.util.StringUtils: java.lang.String readNullableString(org.apache.flink.core.memory.DataInputView)>(r1);

     label1:
        $r9 = new java.net.URI;

        specialinvoke $r9.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r2, r3, r4, i0, r5, r6, r7);

        r0.<org.apache.flink.core.fs.Path: java.net.URI uri> = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Error reconstructing URI", $r10);

        throw $r11;

     label4:
        return;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.fs.Path r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.net.URI $r2, $r3, $r5, $r7, $r9, $r10, $r12, $r14;
        java.lang.String $r4, $r6, $r8, $r11, $r13, $r15;
        int $i0;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        if $r2 != null goto label1;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(0);

        goto label2;

     label1:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeBoolean(boolean)>(1);

        $r3 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r4 = virtualinvoke $r3.<java.net.URI: java.lang.String getScheme()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r4, r1);

        $r5 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r6 = virtualinvoke $r5.<java.net.URI: java.lang.String getUserInfo()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r6, r1);

        $r7 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r8 = virtualinvoke $r7.<java.net.URI: java.lang.String getHost()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r8, r1);

        $r9 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $i0 = virtualinvoke $r9.<java.net.URI: int getPort()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r10 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r11 = virtualinvoke $r10.<java.net.URI: java.lang.String getPath()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r11, r1);

        $r12 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r13 = virtualinvoke $r12.<java.net.URI: java.lang.String getQuery()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r13, r1);

        $r14 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r15 = virtualinvoke $r14.<java.net.URI: java.lang.String getFragment()>();

        staticinvoke <org.apache.flink.util.StringUtils: void writeNullableString(java.lang.String,org.apache.flink.core.memory.DataOutputView)>($r15, r1);

     label2:
        return;
    }

    public boolean hasWindowsDrive()
    {
        org.apache.flink.core.fs.Path r0;
        java.net.URI $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.Path;

        $r1 = r0.<org.apache.flink.core.fs.Path: java.net.URI uri>;

        $r2 = virtualinvoke $r1.<java.net.URI: java.lang.String getPath()>();

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.Path: boolean hasWindowsDrive(java.lang.String,boolean)>($r2, 1);

        return $z0;
    }

    private boolean hasWindowsDrive(java.lang.String, boolean)
    {
        org.apache.flink.core.fs.Path r0;
        java.lang.String r1;
        boolean z0, $z1;
        byte b0, $b10;
        int $i1, $i2, $i3;
        char $c4, $c5, $c6, $c7, $c8, $c9;

        r0 := @this: org.apache.flink.core.fs.Path;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $b10 = 1;

        goto label2;

     label1:
        $b10 = 0;

     label2:
        b0 = $b10;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $b10 + 2;

        if $i1 < $i2 goto label6;

        if z0 == 0 goto label3;

        $c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c9 != 47 goto label6;

     label3:
        $i3 = b0 + 1;

        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 58 goto label6;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(b0);

        if $c5 < 65 goto label4;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(b0);

        if $c8 <= 90 goto label5;

     label4:
        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(b0);

        if $c6 < 97 goto label6;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(b0);

        if $c7 > 122 goto label6;

     label5:
        $z1 = 1;

        goto label7;

     label6:
        $z1 = 0;

     label7:
        return $z1;
    }

    public static org.apache.flink.core.fs.Path fromLocalFile(java.io.File)
    {
        java.io.File r0;
        org.apache.flink.core.fs.Path $r1;
        java.net.URI $r2;

        r0 := @parameter0: java.io.File;

        $r1 = new org.apache.flink.core.fs.Path;

        $r2 = virtualinvoke r0.<java.io.File: java.net.URI toURI()>();

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r2);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.flink.core.fs.Path: java.lang.String CUR_DIR> = ".";

        <org.apache.flink.core.fs.Path: char SEPARATOR_CHAR> = 47;

        <org.apache.flink.core.fs.Path: java.lang.String SEPARATOR> = "/";

        <org.apache.flink.core.fs.Path: long serialVersionUID> = 1L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("/\\p{Alpha}+:/");

        <org.apache.flink.core.fs.Path: java.util.regex.Pattern WINDOWS_ROOT_DIR_REGEX> = $r0;

        return;
    }
}
