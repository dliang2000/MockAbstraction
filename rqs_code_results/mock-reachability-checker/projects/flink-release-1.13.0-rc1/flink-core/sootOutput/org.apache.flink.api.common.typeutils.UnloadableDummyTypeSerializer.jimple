public class org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private final byte[] actualBytes;
    private final java.lang.Throwable originalError;

    public void <init>(byte[])
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        byte[] r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: void <init>(byte[],java.lang.Throwable)>(r1, null);

        return;
    }

    public void <init>(byte[], java.lang.Throwable)
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        byte[] r1, $r4;
        java.lang.Throwable r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (byte[]) $r3;

        r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] actualBytes> = $r4;

        r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: java.lang.Throwable originalError> = r2;

        return;
    }

    public byte[] getActualBytes()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] actualBytes>;

        return $r1;
    }

    public java.lang.Throwable getOriginalError()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.Throwable $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: java.lang.Throwable originalError>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r1;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r1;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r1;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r2;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r3;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r2;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataInputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This object is a dummy TypeSerializer.");

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        byte[] $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer) r1;

        $r5 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] getActualBytes()>();

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] getActualBytes()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r6);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer r0;
        byte[] $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: byte[] getActualBytes()>();

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.UnloadableDummyTypeSerializer: long serialVersionUID> = 2526330533671642711L;

        return;
    }
}
