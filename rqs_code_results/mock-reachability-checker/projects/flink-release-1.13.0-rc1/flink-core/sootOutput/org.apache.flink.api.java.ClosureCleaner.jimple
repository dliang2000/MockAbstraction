public class org.apache.flink.api.java.ClosureCleaner extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.flink.api.java.ClosureCleaner r0;

        r0 := @this: org.apache.flink.api.java.ClosureCleaner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void clean(java.lang.Object, org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel, boolean)
    {
        java.lang.Object r0;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel r1;
        boolean z0;
        java.util.IdentityHashMap $r2;
        java.util.Set $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel;

        z0 := @parameter2: boolean;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean,java.util.Set)>(r0, r1, z0, $r3);

        return;
    }

    private static void clean(java.lang.Object, org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel, boolean, java.util.Set)
    {
        java.lang.Object r0, r5;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel r1, $r9, $r11;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        java.util.Set r2;
        java.lang.Class r3, $r13, $r20, $r23;
        java.lang.reflect.Field r4;
        java.lang.String $r8, $r14, $r15, $r19, $r21, r40, $r41, r43;
        org.slf4j.Logger $r10, $r12;
        java.lang.IllegalAccessException $r16;
        java.lang.RuntimeException $r17;
        java.lang.Object[] $r18;
        java.lang.Exception $r22;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37;
        org.apache.flink.api.common.InvalidProgramException $r31;
        java.lang.reflect.Field[] r38;
        int i0, i1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.util.Set;

        if r0 != null goto label01;

        return;

     label01:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r0);

        if $z1 != 0 goto label02;

        return;

     label02:
        r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(r3);

        if $z2 == 0 goto label03;

        return;

     label03:
        $z3 = staticinvoke <org.apache.flink.api.java.ClosureCleaner: boolean usesCustomSerialization(java.lang.Class)>(r3);

        if $z3 == 0 goto label04;

        return;

     label04:
        z8 = 0;

        r38 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r38;

        i1 = 0;

     label05:
        if i1 >= i0 goto label12;

        r4 = r38[i1];

        $r8 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("this$");

        if $z4 == 0 goto label06;

        $r15 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $z7 = staticinvoke <org.apache.flink.api.java.ClosureCleaner: boolean cleanThis0(java.lang.Object,java.lang.Class,java.lang.String)>(r0, r3, $r15);

        z8 = z8 | $z7;

        goto label11;

     label06:
        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        $r18 = newarray (java.lang.Object)[2];

        $r19 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r18[0] = $r19;

        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r18[1] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not access to the %s field in Class %s", $r18);

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r17;

     label09:
        $r9 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        if r1 != $r9 goto label11;

        $z5 = staticinvoke <org.apache.flink.api.java.ClosureCleaner: boolean needsRecursion(java.lang.reflect.Field,java.lang.Object)>(r4, r5);

        if $z5 == 0 goto label11;

        $r10 = <org.apache.flink.api.java.ClosureCleaner: org.slf4j.Logger LOG>;

        $z6 = interfaceinvoke $r10.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z6 == 0 goto label10;

        $r12 = <org.apache.flink.api.java.ClosureCleaner: org.slf4j.Logger LOG>;

        $r13 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Dig to clean the {}", $r14);

     label10:
        $r11 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean,java.util.Set)>(r5, $r11, 1, r2);

     label11:
        i1 = i1 + 1;

        goto label05;

     label12:
        if z0 == 0 goto label20;

     label13:
        staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r0);

     label14:
        goto label20;

     label15:
        $r22 := @caughtexception;

        $r23 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r40 = staticinvoke <org.apache.flink.api.java.ClosureCleaner: java.lang.String getSuperClassOrInterfaceName(java.lang.Class)>($r23);

        if r40 != null goto label16;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not serializable.");

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label17;

     label16:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The implementation of the ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not serializable.");

        $r41 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label17:
        if z8 == 0 goto label18;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" The implementation accesses fields of its enclosing class, which is a common reason for non-serializability. A common solution is to make the function a proper (non-inner) class, or a static inner class.");

        r43 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label19;

     label18:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" The object probably contains or references non serializable fields.");

        r43 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        $r31 = new org.apache.flink.api.common.InvalidProgramException;

        specialinvoke $r31.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String,java.lang.Throwable)>(r43, $r22);

        throw $r31;

     label20:
        return;

        catch java.lang.IllegalAccessException from label06 to label07 with label08;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    private static boolean needsRecursion(java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean usesCustomSerialization(java.lang.Class)
    {
        java.lang.Class r0, $r4;
        java.lang.Class[] $r1, $r6;
        java.lang.NoSuchMethodException $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/io/ObjectOutputStream;";

        virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("writeObject", $r1);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = newarray (java.lang.Class)[0];

        virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("writeReplace", $r6);

     label5:
        return 1;

     label6:
        $r3 := @caughtexception;

        $r4 = class "Ljava/io/Externalizable;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        return $z0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    public static void ensureSerializable(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Exception $r3;
        org.apache.flink.api.common.InvalidProgramException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @parameter0: java.lang.Object;

     label1:
        staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.flink.api.common.InvalidProgramException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not serializable");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.flink.api.common.InvalidProgramException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static boolean cleanThis0(java.lang.Object, java.lang.Class, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r8;
        java.lang.String r2, $r14, $r22, $r29, $r31;
        boolean z0, $z1;
        java.lang.reflect.Field r4;
        org.apache.flink.api.java.This0AccessFinder $r5;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader $r6;
        org.slf4j.Logger $r7, $r10;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r17, $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r30;
        java.lang.NoSuchFieldException $r15;
        java.lang.RuntimeException $r16, $r24;
        java.lang.Exception $r23;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        $r5 = new org.apache.flink.api.java.This0AccessFinder;

        specialinvoke $r5.<org.apache.flink.api.java.This0AccessFinder: void <init>(java.lang.String)>(r2);

        $r6 = staticinvoke <org.apache.flink.api.java.ClosureCleaner: org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader getClassReader(java.lang.Class)>(r1);

        virtualinvoke $r6.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: void accept(org.apache.flink.shaded.asm7.org.objectweb.asm.ClassVisitor,int)>($r5, 0);

        z0 = virtualinvoke $r5.<org.apache.flink.api.java.This0AccessFinder: boolean isThis0Accessed()>();

        $r7 = <org.apache.flink.api.java.ClosureCleaner: org.slf4j.Logger LOG>;

        $z1 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z1 == 0 goto label1;

        $r10 = <org.apache.flink.api.java.ClosureCleaner: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is accessed: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String)>($r14);

     label1:
        if z0 != 0 goto label8;

     label2:
        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r4 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r2);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not set ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label5:
        virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, null);

     label6:
        goto label8;

     label7:
        $r23 := @caughtexception;

        $r24 = new java.lang.RuntimeException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not set ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to null. ");

        $r29 = virtualinvoke $r23.<java.lang.Exception: java.lang.String getMessage()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r31, $r23);

        throw $r24;

     label8:
        return z0;

        catch java.lang.NoSuchFieldException from label2 to label3 with label4;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    private static org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader getClassReader(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String r1, $r4, $r5, $r14, $r16;
        java.lang.StringBuilder $r3, $r6, $r7, $r12, $r13, $r15;
        org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader $r8;
        java.io.InputStream $r9;
        java.io.IOException $r10;
        java.lang.RuntimeException $r11;

        r0 := @parameter0: java.lang.Class;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("^.*\\.", "");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r8 = new org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader;

        $r9 = virtualinvoke r0.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

        specialinvoke $r8.<org.apache.flink.shaded.asm7.org.objectweb.asm.ClassReader: void <init>(java.io.InputStream)>($r9);

     label2:
        return $r8;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create ClassReader: ");

        $r14 = virtualinvoke $r10.<java.io.IOException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r16, $r10);

        throw $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.lang.String getSuperClassOrInterfaceName(java.lang.Class)
    {
        java.lang.Class r0, r1, r3;
        java.lang.Class[] r2;
        int i0, i1;
        java.lang.String $r4, $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("org.apache.flink");

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r7;

     label2:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof r2;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("org.apache.flink");

        if $z1 == 0 goto label4;

        $r6 = virtualinvoke r3.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r6;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/ClosureCleaner;");

        <org.apache.flink.api.java.ClosureCleaner: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
