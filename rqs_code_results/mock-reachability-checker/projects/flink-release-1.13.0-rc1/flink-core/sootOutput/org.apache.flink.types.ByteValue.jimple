public class org.apache.flink.types.ByteValue extends java.lang.Object implements org.apache.flink.types.NormalizableKey, org.apache.flink.types.ResettableValue, org.apache.flink.types.CopyableValue
{
    private static final long serialVersionUID;
    private byte value;

    public void <init>()
    {
        org.apache.flink.types.ByteValue r0;

        r0 := @this: org.apache.flink.types.ByteValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.ByteValue: byte value> = 0;

        return;
    }

    public void <init>(byte)
    {
        org.apache.flink.types.ByteValue r0;
        byte b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        b0 := @parameter0: byte;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.ByteValue: byte value> = b0;

        return;
    }

    public byte getValue()
    {
        org.apache.flink.types.ByteValue r0;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        return $b0;
    }

    public void setValue(byte)
    {
        org.apache.flink.types.ByteValue r0;
        byte b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        b0 := @parameter0: byte;

        r0.<org.apache.flink.types.ByteValue: byte value> = b0;

        return;
    }

    public void setValue(org.apache.flink.types.ByteValue)
    {
        org.apache.flink.types.ByteValue r0, r1;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.types.ByteValue;

        $b0 = r1.<org.apache.flink.types.ByteValue: byte value>;

        r0.<org.apache.flink.types.ByteValue: byte value> = $b0;

        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.types.ByteValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $b0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: byte readByte()>();

        r0.<org.apache.flink.types.ByteValue: byte value> = $b0;

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.ByteValue r0;
        org.apache.flink.core.memory.DataOutputView r1;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeByte(int)>($b0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.ByteValue r0;
        byte $b0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.types.ByteValue;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($b0);

        return $r1;
    }

    public int compareTo(org.apache.flink.types.ByteValue)
    {
        org.apache.flink.types.ByteValue r0, r1;
        byte b0, $b1, $b2, $b3;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.types.ByteValue;

        b0 = r1.<org.apache.flink.types.ByteValue: byte value>;

        $b1 = r0.<org.apache.flink.types.ByteValue: byte value>;

        if $b1 >= b0 goto label1;

        $b3 = -1;

        goto label3;

     label1:
        $b2 = r0.<org.apache.flink.types.ByteValue: byte value>;

        if $b2 <= b0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        return $b3;
    }

    public int hashCode()
    {
        org.apache.flink.types.ByteValue r0;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        return $b0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.ByteValue r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.types.ByteValue;

        if $z0 == 0 goto label3;

        $r2 = (org.apache.flink.types.ByteValue) r1;

        $b1 = $r2.<org.apache.flink.types.ByteValue: byte value>;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        if $b1 != $b0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public int getMaxNormalizedKeyLen()
    {
        org.apache.flink.types.ByteValue r0;

        r0 := @this: org.apache.flink.types.ByteValue;

        return 1;
    }

    public void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.types.ByteValue r0;
        org.apache.flink.core.memory.MemorySegment r1;
        int i0, i1, $i4, i8, i10, i11;
        byte $b2, $b3, $b5, $b6;
        short s7, s9;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 1 goto label1;

        $b5 = r0.<org.apache.flink.types.ByteValue: byte value>;

        s7 = $b5 & 255;

        i8 = s7 + 128;

        $b6 = (byte) i8;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b6);

        goto label3;

     label1:
        if i1 <= 1 goto label3;

        $b2 = r0.<org.apache.flink.types.ByteValue: byte value>;

        s9 = $b2 & 255;

        i10 = s9 + 128;

        $b3 = (byte) i10;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>(i0, $b3);

        i11 = 1;

     label2:
        if i11 >= i1 goto label3;

        $i4 = i0 + i11;

        virtualinvoke r1.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i4, 0);

        i11 = i11 + 1;

        goto label2;

     label3:
        return;
    }

    public int getBinaryLength()
    {
        org.apache.flink.types.ByteValue r0;

        r0 := @this: org.apache.flink.types.ByteValue;

        return 1;
    }

    public void copyTo(org.apache.flink.types.ByteValue)
    {
        org.apache.flink.types.ByteValue r0, r1;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.types.ByteValue;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        r1.<org.apache.flink.types.ByteValue: byte value> = $b0;

        return;
    }

    public org.apache.flink.types.ByteValue copy()
    {
        org.apache.flink.types.ByteValue r0, $r1;
        byte $b0;

        r0 := @this: org.apache.flink.types.ByteValue;

        $r1 = new org.apache.flink.types.ByteValue;

        $b0 = r0.<org.apache.flink.types.ByteValue: byte value>;

        specialinvoke $r1.<org.apache.flink.types.ByteValue: void <init>(byte)>($b0);

        return $r1;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.types.ByteValue r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(org.apache.flink.core.memory.DataInputView,int)>(r1, 1);

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        org.apache.flink.types.ByteValue r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ByteValue) r1;

        $i0 = virtualinvoke r0.<org.apache.flink.types.ByteValue: int compareTo(org.apache.flink.types.ByteValue)>($r2);

        return $i0;
    }

    public volatile void setValue(org.apache.flink.types.Value)
    {
        org.apache.flink.types.ByteValue r0, $r2;
        org.apache.flink.types.Value r1;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: org.apache.flink.types.Value;

        $r2 = (org.apache.flink.types.ByteValue) r1;

        virtualinvoke r0.<org.apache.flink.types.ByteValue: void setValue(org.apache.flink.types.ByteValue)>($r2);

        return;
    }

    public volatile java.lang.Object copy()
    {
        org.apache.flink.types.ByteValue r0, $r1;

        r0 := @this: org.apache.flink.types.ByteValue;

        $r1 = virtualinvoke r0.<org.apache.flink.types.ByteValue: org.apache.flink.types.ByteValue copy()>();

        return $r1;
    }

    public volatile void copyTo(java.lang.Object)
    {
        org.apache.flink.types.ByteValue r0, $r2;
        java.lang.Object r1;

        r0 := @this: org.apache.flink.types.ByteValue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.flink.types.ByteValue) r1;

        virtualinvoke r0.<org.apache.flink.types.ByteValue: void copyTo(org.apache.flink.types.ByteValue)>($r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.types.ByteValue: long serialVersionUID> = 1L;

        return;
    }
}
