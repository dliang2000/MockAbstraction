class org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset extends java.lang.Object implements org.joda.time.format.InternalPrinter, org.joda.time.format.InternalParser
{
    private final java.lang.String iZeroOffsetPrintText;
    private final java.lang.String iZeroOffsetParseText;
    private final boolean iShowSeparators;
    private final int iMinFields;
    private final int iMaxFields;

    void <init>(java.lang.String, java.lang.String, boolean, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.String r1, r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;
        int i0, i1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> = r2;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> = z0;

        if i0 <= 0 goto label1;

        if i1 >= i0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        if i0 <= 4 goto label3;

        i0 = 4;

        i1 = 4;

     label3:
        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> = i1;

        return;
    }

    public int estimatePrintedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i1 = 1 + $i0;

        i5 = $i1 << 1;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label1;

        $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        $i4 = $i3 - 1;

        i5 = i5 + $i4;

     label1:
        $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        if $r1 == null goto label2;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= i5 goto label2;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        i5 = virtualinvoke $r3.<java.lang.String: int length()>();

     label2:
        return i5;
    }

    public void printTo(java.lang.Appendable, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.Appendable r1;
        long l0;
        org.joda.time.Chronology r2;
        org.joda.time.DateTimeZone r3;
        java.util.Locale r4;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        boolean $z0, $z1, $z2;
        java.lang.String $r10, $r11;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.Appendable;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i13 := @parameter3: int;

        r3 := @parameter4: org.joda.time.DateTimeZone;

        r4 := @parameter5: java.util.Locale;

        if r3 != null goto label01;

        return;

     label01:
        if i13 != 0 goto label02;

        $r10 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        if $r10 == null goto label02;

        $r11 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r11);

        return;

     label02:
        if i13 < 0 goto label03;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(43);

        goto label04;

     label03:
        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(45);

        i13 = neg i13;

     label04:
        i1 = i13 / 3600000;

        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i1, 2);

        $i4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i4 != 1 goto label05;

        return;

     label05:
        $i5 = i1 * 3600000;

        i14 = i13 - $i5;

        if i14 != 0 goto label06;

        $i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i12 > 1 goto label06;

        return;

     label06:
        i2 = i14 / 60000;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z0 == 0 goto label07;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(58);

     label07:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i2, 2);

        $i6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i6 != 2 goto label08;

        return;

     label08:
        $i7 = i2 * 60000;

        i15 = i14 - $i7;

        if i15 != 0 goto label09;

        $i11 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i11 > 2 goto label09;

        return;

     label09:
        i3 = i15 / 1000;

        $z1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z1 == 0 goto label10;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(58);

     label10:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i3, 2);

        $i8 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>;

        if $i8 != 3 goto label11;

        return;

     label11:
        $i9 = i3 * 1000;

        i16 = i15 - $i9;

        if i16 != 0 goto label12;

        $i10 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>;

        if $i10 > 3 goto label12;

        return;

     label12:
        $z2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>;

        if $z2 == 0 goto label13;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(char)>(46);

     label13:
        staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.Appendable,int,int)>(r1, i16, 3);

        return;
    }

    public void printTo(java.lang.Appendable, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.Appendable r1;
        org.joda.time.ReadablePartial r2;
        java.util.Locale r3;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

        return;
    }

    public int estimateParsedLength()
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        int $i0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>();

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.CharSequence, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        org.joda.time.format.DateTimeParserBucket r1;
        java.lang.CharSequence r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i37, i38, i39, i40, i41, i43, i44, i45, i46, i48, $i49;
        java.lang.String $r3, $r6, $r7, $r9;
        java.lang.Integer $r4, $r8, $r10;
        char $c9, $c13, $c17, $c20, $c21, $c24, c35, c36, c42;
        boolean $z0, z1, z2;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r2 := @parameter1: java.lang.CharSequence;

        i33 := @parameter2: int;

        $i3 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        i34 = $i3 - i33;

        $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        if $r3 == null goto label03;

        $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $i30 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i30 != 0 goto label02;

        if i34 <= 0 goto label01;

        c35 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i33);

        if c35 == 45 goto label03;

        if c35 != 43 goto label01;

        goto label03;

     label01:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r10);

        return i33;

     label02:
        $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $z0 = staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: boolean csStartsWithIgnoreCase(java.lang.CharSequence,int,java.lang.String)>(r2, i33, $r7);

        if $z0 == 0 goto label03;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r8);

        $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>;

        $i31 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i32 = i33 + $i31;

        return $i32;

     label03:
        if i34 > 1 goto label04;

        $i29 = i33 ^ -1;

        return $i29;

     label04:
        c36 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i33);

        if c36 != 45 goto label05;

        z1 = 1;

        goto label07;

     label05:
        if c36 != 43 goto label06;

        z1 = 0;

        goto label07;

     label06:
        $i4 = i33 ^ -1;

        return $i4;

     label07:
        i37 = i34 + -1;

        i38 = i33 + 1;

        $i5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>(r2, i38, 2);

        if $i5 >= 2 goto label08;

        $i28 = i38 ^ -1;

        return $i28;

     label08:
        i0 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>(r2, i38);

        if i0 <= 23 goto label09;

        $i27 = i38 ^ -1;

        return $i27;

     label09:
        i39 = i0 * 3600000;

        i40 = i37 + -2;

        i41 = i38 + 2;

        if i40 > 0 goto label10;

        goto label27;

     label10:
        c42 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i41);

        if c42 != 58 goto label11;

        z2 = 1;

        i40 = i40 + -1;

        i41 = i41 + 1;

        goto label12;

     label11:
        if c42 < 48 goto label27;

        if c42 > 57 goto label27;

        z2 = 0;

     label12:
        i43 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>(r2, i41, 2);

        if i43 != 0 goto label13;

        if z2 != 0 goto label13;

        goto label27;

     label13:
        if i43 >= 2 goto label14;

        $i26 = i41 ^ -1;

        return $i26;

     label14:
        i1 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>(r2, i41);

        if i1 <= 59 goto label15;

        $i25 = i41 ^ -1;

        return $i25;

     label15:
        $i6 = i1 * 60000;

        i39 = i39 + $i6;

        i44 = i40 + -2;

        i41 = i41 + 2;

        if i44 > 0 goto label16;

        goto label27;

     label16:
        if z2 == 0 goto label18;

        $c24 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i41);

        if $c24 == 58 goto label17;

        goto label27;

     label17:
        i44 = i44 + -1;

        i41 = i41 + 1;

     label18:
        i45 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>(r2, i41, 2);

        if i45 != 0 goto label19;

        if z2 != 0 goto label19;

        goto label27;

     label19:
        if i45 >= 2 goto label20;

        $i23 = i41 ^ -1;

        return $i23;

     label20:
        i2 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.CharSequence,int)>(r2, i41);

        if i2 <= 59 goto label21;

        $i22 = i41 ^ -1;

        return $i22;

     label21:
        $i7 = i2 * 1000;

        i39 = i39 + $i7;

        i46 = i44 + -2;

        i41 = i41 + 2;

        if i46 > 0 goto label22;

        goto label27;

     label22:
        if z2 == 0 goto label24;

        $c20 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i41);

        if $c20 == 46 goto label23;

        $c21 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>(i41);

        if $c21 == 44 goto label23;

        goto label27;

     label23:
        i41 = i41 + 1;

     label24:
        i48 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.CharSequence,int,int)>(r2, i41, 3);

        if i48 != 0 goto label25;

        if z2 != 0 goto label25;

        goto label27;

     label25:
        if i48 >= 1 goto label26;

        $i19 = i41 ^ -1;

        return $i19;

     label26:
        $i8 = i41;

        i41 = i41 + 1;

        $c9 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i8);

        $i10 = $c9 - 48;

        $i11 = $i10 * 100;

        i39 = i39 + $i11;

        if i48 <= 1 goto label27;

        $i12 = i41;

        i41 = i41 + 1;

        $c13 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i12);

        $i14 = $c13 - 48;

        $i15 = $i14 * 10;

        i39 = i39 + $i15;

        if i48 <= 2 goto label27;

        $i16 = i41;

        i41 = i41 + 1;

        $c17 = interfaceinvoke r2.<java.lang.CharSequence: char charAt(int)>($i16);

        $i18 = $c17 - 48;

        i39 = i39 + $i18;

     label27:
        if z1 == 0 goto label28;

        $i49 = neg i39;

        goto label29;

     label28:
        $i49 = i39;

     label29:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i49);

        virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r4);

        return i41;
    }

    private int digitCount(java.lang.CharSequence, int, int)
    {
        org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset r0;
        java.lang.CharSequence r1;
        int i0, $i2, $i3, $i4, i5, i6, i7;
        char c1;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i5 := @parameter2: int;

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - i0;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i5);

        i7 = 0;

     label1:
        if i6 <= 0 goto label3;

        $i4 = i0 + i7;

        c1 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i4);

        if c1 < 48 goto label3;

        if c1 <= 57 goto label2;

        goto label3;

     label2:
        i7 = i7 + 1;

        i6 = i6 + -1;

        goto label1;

     label3:
        return i7;
    }
}
