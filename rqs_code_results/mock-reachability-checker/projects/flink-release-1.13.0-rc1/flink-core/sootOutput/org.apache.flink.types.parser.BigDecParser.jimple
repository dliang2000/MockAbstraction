public class org.apache.flink.types.parser.BigDecParser extends org.apache.flink.types.parser.FieldParser
{
    private static final java.math.BigDecimal BIG_DECIMAL_INSTANCE;
    private java.math.BigDecimal result;
    private char[] reuse;

    public void <init>()
    {
        org.apache.flink.types.parser.BigDecParser r0;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        specialinvoke r0.<org.apache.flink.types.parser.FieldParser: void <init>()>();

        r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse> = null;

        return;
    }

    public int parseField(byte[], int, int, byte[], java.math.BigDecimal)
    {
        org.apache.flink.types.parser.BigDecParser r0;
        byte[] r1, r2;
        int i0, i1, i2, $i4, $i5, $i6, i7, i8, $i9, $i12;
        java.math.BigDecimal r3, $r6;
        byte b3, $b10;
        char[] $r4, $r5, $r7, $r9, $r12;
        org.apache.flink.types.parser.FieldParser$ParseErrorState $r8, $r11;
        java.lang.NumberFormatException $r10;
        char $c11;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.math.BigDecimal;

        i2 = virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: int nextStringEndPos(byte[],int,int,byte[])>(r1, i0, i1, r2);

        if i2 >= 0 goto label01;

        return -1;

     label01:
        i7 = i2 - i0;

        $r4 = r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse>;

        if $r4 == null goto label02;

        $r9 = r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse>;

        $i6 = lengthof $r9;

        if $i6 >= i7 goto label03;

     label02:
        $r5 = newarray (char)[i7];

        r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse> = $r5;

     label03:
        i8 = 0;

     label04:
        if i8 >= i7 goto label08;

        $i5 = i0 + i8;

        b3 = r1[$i5];

        if b3 < 48 goto label05;

        if b3 <= 57 goto label07;

     label05:
        if b3 == 45 goto label07;

        if b3 == 43 goto label07;

        if b3 == 46 goto label07;

        if b3 == 69 goto label07;

        if b3 == 101 goto label07;

        $r8 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_ILLEGAL_CHARACTER>;

        virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r8);

     label06:
        return -1;

     label07:
        $r12 = r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse>;

        $i9 = i0 + i8;

        $b10 = r1[$i9];

        $c11 = (char) $b10;

        $r12[i8] = $c11;

        i8 = i8 + 1;

        goto label04;

     label08:
        $r6 = new java.math.BigDecimal;

        $r7 = r0.<org.apache.flink.types.parser.BigDecParser: char[] reuse>;

        specialinvoke $r6.<java.math.BigDecimal: void <init>(char[],int,int)>($r7, 0, i7);

        r0.<org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal result> = $r6;

        if i2 != i1 goto label09;

        $i12 = i1;

        goto label10;

     label09:
        $i4 = lengthof r2;

        $i12 = i2 + $i4;

     label10:
        return $i12;

     label11:
        $r10 := @caughtexception;

        $r11 = <org.apache.flink.types.parser.FieldParser$ParseErrorState: org.apache.flink.types.parser.FieldParser$ParseErrorState NUMERIC_VALUE_FORMAT_ERROR>;

        virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: void setErrorState(org.apache.flink.types.parser.FieldParser$ParseErrorState)>($r11);

        return -1;

        catch java.lang.NumberFormatException from label01 to label06 with label11;
        catch java.lang.NumberFormatException from label07 to label10 with label11;
    }

    public java.math.BigDecimal createValue()
    {
        org.apache.flink.types.parser.BigDecParser r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        $r1 = <org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal BIG_DECIMAL_INSTANCE>;

        return $r1;
    }

    public java.math.BigDecimal getLastResult()
    {
        org.apache.flink.types.parser.BigDecParser r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        $r1 = r0.<org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal result>;

        return $r1;
    }

    public static final java.math.BigDecimal parseField(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;
        java.math.BigDecimal $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal parseField(byte[],int,int,char)>(r0, i0, i1, 65535);

        return $r1;
    }

    public static final java.math.BigDecimal parseField(byte[], int, int, char)
    {
        byte[] r0;
        int i0, i1, $i5, $i7, $i8, $i10, i12, i13, $i14;
        char c2, $c16;
        byte b3, b4, $b6, $b9, $b11, $b15;
        char[] r1;
        java.math.BigDecimal $r2;
        java.lang.NumberFormatException $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        if i1 > 0 goto label1;

        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Invalid input: Empty string");

        throw $r5;

     label1:
        i12 = 0;

        b3 = (byte) c2;

     label2:
        if i12 >= i1 goto label3;

        $i10 = i0 + i12;

        $b11 = r0[$i10];

        if $b11 == b3 goto label3;

        i12 = i12 + 1;

        goto label2;

     label3:
        if i12 <= 0 goto label5;

        $b6 = r0[i0];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b6);

        if $z0 != 0 goto label4;

        $i7 = i0 + i12;

        $i8 = $i7 - 1;

        $b9 = r0[$i8];

        $z1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>($b9);

        if $z1 == 0 goto label5;

     label4:
        $r4 = new java.lang.NumberFormatException;

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>(java.lang.String)>("There is leading or trailing whitespace in the numeric field.");

        throw $r4;

     label5:
        r1 = newarray (char)[i12];

        i13 = 0;

     label6:
        if i13 >= i12 goto label9;

        $i5 = i0 + i13;

        b4 = r0[$i5];

        if b4 < 48 goto label7;

        if b4 <= 57 goto label8;

     label7:
        if b4 == 45 goto label8;

        if b4 == 43 goto label8;

        if b4 == 46 goto label8;

        if b4 == 69 goto label8;

        if b4 == 101 goto label8;

        $r3 = new java.lang.NumberFormatException;

        specialinvoke $r3.<java.lang.NumberFormatException: void <init>()>();

        throw $r3;

     label8:
        $i14 = i0 + i13;

        $b15 = r0[$i14];

        $c16 = (char) $b15;

        r1[i13] = $c16;

        i13 = i13 + 1;

        goto label6;

     label9:
        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(char[])>(r1);

        return $r2;
    }

    public volatile java.lang.Object createValue()
    {
        org.apache.flink.types.parser.BigDecParser r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal createValue()>();

        return $r1;
    }

    public volatile java.lang.Object getLastResult()
    {
        org.apache.flink.types.parser.BigDecParser r0;
        java.math.BigDecimal $r1;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        $r1 = virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal getLastResult()>();

        return $r1;
    }

    public volatile int parseField(byte[], int, int, byte[], java.lang.Object)
    {
        org.apache.flink.types.parser.BigDecParser r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        java.lang.Object r3;
        java.math.BigDecimal $r4;

        r0 := @this: org.apache.flink.types.parser.BigDecParser;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.lang.Object;

        $r4 = (java.math.BigDecimal) r3;

        $i2 = virtualinvoke r0.<org.apache.flink.types.parser.BigDecParser: int parseField(byte[],int,int,byte[],java.math.BigDecimal)>(r1, i0, i1, r2, $r4);

        return $i2;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0;

        $r0 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        <org.apache.flink.types.parser.BigDecParser: java.math.BigDecimal BIG_DECIMAL_INSTANCE> = $r0;

        return;
    }
}
