public class org.apache.commons.compress.MemoryLimitException extends java.io.IOException
{
    private static final long serialVersionUID;
    private final long memoryNeededInKb;
    private final int memoryLimitInKb;

    public void <init>(long, int)
    {
        org.apache.commons.compress.MemoryLimitException r0;
        long l0;
        int i1;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.compress.MemoryLimitException;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.compress.MemoryLimitException: java.lang.String buildMessage(long,int)>(l0, i1);

        specialinvoke r0.<java.io.IOException: void <init>(java.lang.String)>($r1);

        r0.<org.apache.commons.compress.MemoryLimitException: long memoryNeededInKb> = l0;

        r0.<org.apache.commons.compress.MemoryLimitException: int memoryLimitInKb> = i1;

        return;
    }

    public void <init>(long, int, java.lang.Exception)
    {
        org.apache.commons.compress.MemoryLimitException r0;
        long l0;
        int i1;
        java.lang.Exception r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.compress.MemoryLimitException;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Exception;

        $r2 = staticinvoke <org.apache.commons.compress.MemoryLimitException: java.lang.String buildMessage(long,int)>(l0, i1);

        specialinvoke r0.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r2, r1);

        r0.<org.apache.commons.compress.MemoryLimitException: long memoryNeededInKb> = l0;

        r0.<org.apache.commons.compress.MemoryLimitException: int memoryLimitInKb> = i1;

        return;
    }

    public long getMemoryNeededInKb()
    {
        org.apache.commons.compress.MemoryLimitException r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.MemoryLimitException;

        $l0 = r0.<org.apache.commons.compress.MemoryLimitException: long memoryNeededInKb>;

        return $l0;
    }

    public int getMemoryLimitInKb()
    {
        org.apache.commons.compress.MemoryLimitException r0;
        int $i0;

        r0 := @this: org.apache.commons.compress.MemoryLimitException;

        $i0 = r0.<org.apache.commons.compress.MemoryLimitException: int memoryLimitInKb>;

        return $i0;
    }

    private static java.lang.String buildMessage(long, int)
    {
        long l0;
        int i1;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kb of memory would be needed; limit was ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kb. If the file is not corrupt, consider increasing the memory limit.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.MemoryLimitException: long serialVersionUID> = 1L;

        return;
    }
}
