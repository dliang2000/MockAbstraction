public class org.apache.flink.api.common.typeutils.CompositeSerializerTest extends java.lang.Object
{
    private static final org.apache.flink.api.common.ExecutionConfig execConf;
    private static final java.util.List TEST_FIELD_SERIALIZERS;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testSingleFieldSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        java.util.List $r1;
        java.util.function.Consumer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        $r1 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_testSingleFieldSerializer_2__111: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.typeutils.CompositeSerializerTest)>(r0);

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        return;
    }

    public void testPairFieldSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        java.util.List $r1;
        java.util.function.Consumer $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        $r1 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_testPairFieldSerializer_6__112: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.typeutils.CompositeSerializerTest)>(r0);

        interfaceinvoke $r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        return;
    }

    public void testAllFieldSerializer()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        java.util.List[] r2;
        java.util.List $r3, $r9;
        java.util.stream.Stream $r4, $r6, $r16;
        java.util.function.Function $r5;
        java.util.function.IntFunction $r7, $r15, $r17;
        java.lang.Object[] $r8, $r13, $r18;
        java.lang.Object $r10, $r12;
        org.apache.flink.api.java.tuple.Tuple2 $r11;
        int $i0, $i1;
        java.util.stream.IntStream $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        $r3 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_testAllFieldSerializer_7__113: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_testAllFieldSerializer_8__114: java.util.function.IntFunction bootstrap$()>();

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r7);

        r1 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r8;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.flink.api.java.tuple.Tuple2) $r10;

        $r12 = $r11.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r13 = (java.lang.Object[]) $r12;

        $i0 = lengthof $r13;

        $r14 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0);

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$getTestCase__115: java.util.function.IntFunction bootstrap$()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>($r15);

        $r17 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_testAllFieldSerializer_9__116: java.util.function.IntFunction bootstrap$()>();

        $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r17);

        r2 = (java.util.List[]) $r18;

        $i1 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest: int getLength(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void runTests(int,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.List[])>($i1, r1, r2);

        return;
    }

    public static java.util.List getTestCase(int)
    {
        int i0;
        java.util.List $r0, $r6;
        java.util.stream.Stream $r1, $r3;
        java.util.function.Function $r2;
        java.util.function.IntFunction $r4;
        java.lang.Object[] $r5;

        i0 := @parameter0: int;

        $r0 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_getTestCase_10__317: java.util.function.Function bootstrap$(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_getTestCase_11__318: java.util.function.IntFunction bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r4);

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        return $r6;
    }

    private static int getLength(org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.TypeSerializer[] r0;
        java.util.stream.Stream $r1, $r3;
        java.util.function.Predicate $r2;
        boolean $z0;
        java.util.function.ToIntFunction $r4;
        java.util.stream.IntStream $r5;
        int $i0;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r1 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r2 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_getLength_12__117: java.util.function.Predicate bootstrap$()>();

        $z0 = interfaceinvoke $r1.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>($r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$getLength__118: java.util.function.ToIntFunction bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>($r4);

        $i0 = interfaceinvoke $r5.<java.util.stream.IntStream: int sum()>();

        goto label2;

     label1:
        $i0 = -1;

     label2:
        return $i0;
    }

    private transient void runTests(int, org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.List[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        java.util.List[] r2;
        boolean z0, $z1;
        java.lang.Boolean[] $r5;
        java.lang.Boolean $r6, $r7, $r10;
        java.util.List $r8;
        java.lang.Object $r9;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer $r11;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance $r12;
        java.lang.Exception $r13;
        java.io.PrintStream $r14;
        java.lang.String $r15, $r16;
        java.util.Iterator r17;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter2: java.util.List[];

     label1:
        $r5 = newarray (java.lang.Boolean)[2];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        r17 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Boolean) $r9;

        z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>();

        $r11 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        specialinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: void <init>(boolean,org.apache.flink.api.common.typeutils.TypeSerializer[])>(z0, r1);

        $r12 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance;

        specialinvoke $r12.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,int,java.util.List[])>($r11, i0, r2);

        virtualinvoke $r12.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$CompositeSerializerTestInstance: void testAll()>();

        goto label2;

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r15 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

        $r16 = virtualinvoke $r13.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r16);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public static boolean lambda$getLength$12(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.TypeSerializer r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.lang.Object[] lambda$getTestCase$11(int)
    {
        int i0;
        java.lang.Object[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[i0];

        return $r0;
    }

    public static java.lang.Object lambda$getTestCase$10(int, org.apache.flink.api.java.tuple.Tuple2)
    {
        int i0;
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1, $r3;
        java.lang.Object[] $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r2 = (java.lang.Object[]) $r1;

        $r3 = $r2[i0];

        return $r3;
    }

    public static java.util.List[] lambda$testAllFieldSerializer$9(int)
    {
        int i0;
        java.util.List[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.util.List)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer[] lambda$testAllFieldSerializer$8(int)
    {
        int i0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        return $r0;
    }

    public static org.apache.flink.api.common.typeutils.TypeSerializer lambda$testAllFieldSerializer$7(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer $r2;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r1 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r2 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r1;

        return $r2;
    }

    public void lambda$testPairFieldSerializer$6(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        org.apache.flink.api.java.tuple.Tuple2 r1;
        java.util.List $r2;
        java.util.function.Consumer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r2 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS>;

        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_null_5__374: java.util.function.Consumer bootstrap$(org.apache.flink.api.common.typeutils.CompositeSerializerTest,org.apache.flink.api.java.tuple.Tuple2)>(r0, r1);

        interfaceinvoke $r2.<java.util.List: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    public void lambda$null$5(org.apache.flink.api.java.tuple.Tuple2, org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        org.apache.flink.api.java.tuple.Tuple2 r1, r2;
        java.util.List[] r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5;
        java.lang.Object $r6, $r8, $r10;
        org.apache.flink.api.common.typeutils.TypeSerializer $r7, $r9;
        java.lang.Object[] $r11, $r16;
        int $i0, $i1;
        java.util.stream.IntStream $r12;
        java.util.function.IntFunction $r13, $r15;
        java.util.stream.Stream $r14;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        r2 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r6 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r7 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r6;

        $r5[0] = $r7;

        $r8 = r2.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r9 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r8;

        $r5[1] = $r9;

        $r10 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r11 = (java.lang.Object[]) $r10;

        $i0 = lengthof $r11;

        $r12 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0);

        $r13 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_null_3__542: java.util.function.IntFunction bootstrap$(org.apache.flink.api.java.tuple.Tuple2,org.apache.flink.api.java.tuple.Tuple2)>(r1, r2);

        $r14 = interfaceinvoke $r12.<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>($r13);

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_null_4__543: java.util.function.IntFunction bootstrap$()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r15);

        r4 = (java.util.List[]) $r16;

        $i1 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest: int getLength(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r5);

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void runTests(int,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.List[])>($i1, $r5, r4);

        return;
    }

    public static java.util.List[] lambda$null$4(int)
    {
        int i0;
        java.util.List[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.util.List)[i0];

        return $r0;
    }

    public static java.util.List lambda$null$3(org.apache.flink.api.java.tuple.Tuple2, org.apache.flink.api.java.tuple.Tuple2, int)
    {
        org.apache.flink.api.java.tuple.Tuple2 r0, r1;
        int i0;
        java.lang.Object[] $r2, $r4, $r7;
        java.lang.Object $r3, $r5, $r6, $r8;
        java.util.List $r9;

        r0 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        r1 := @parameter1: org.apache.flink.api.java.tuple.Tuple2;

        i0 := @parameter2: int;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r4 = (java.lang.Object[]) $r3;

        $r5 = $r4[i0];

        $r2[0] = $r5;

        $r6 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r7 = (java.lang.Object[]) $r6;

        $r8 = $r7[i0];

        $r2[1] = $r8;

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r9;
    }

    public void lambda$testSingleFieldSerializer$2(org.apache.flink.api.java.tuple.Tuple2)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest r0;
        org.apache.flink.api.java.tuple.Tuple2 r1;
        java.util.List[] r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4;
        java.lang.Object $r5, $r7, $r14;
        org.apache.flink.api.common.typeutils.TypeSerializer $r6, $r15;
        java.lang.Object[] $r8, $r13;
        java.util.stream.Stream $r9, $r11;
        java.util.function.Function $r10;
        java.util.function.IntFunction $r12;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        r1 := @parameter0: org.apache.flink.api.java.tuple.Tuple2;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r5 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r5;

        $r4[0] = $r6;

        $r7 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r8 = (java.lang.Object[]) $r7;

        $r9 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>($r8);

        $r10 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_null_0__375: java.util.function.Function bootstrap$()>();

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r10);

        $r12 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeSerializerTest$lambda_null_1__376: java.util.function.IntFunction bootstrap$()>();

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r12);

        r3 = (java.util.List[]) $r13;

        $r14 = r1.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r15 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r14;

        $i0 = virtualinvoke $r15.<org.apache.flink.api.common.typeutils.TypeSerializer: int getLength()>();

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void runTests(int,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.List[])>($i0, $r4, r3);

        return;
    }

    public static java.util.List[] lambda$null$1(int)
    {
        int i0;
        java.util.List[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.util.List)[i0];

        return $r0;
    }

    public static java.util.List lambda$null$0(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Object[] $r1;
        java.util.List $r2;

        r0 := @parameter0: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r0;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.ExecutionConfig $r0, $r16;
        org.apache.flink.api.java.tuple.Tuple2[] $r1;
        java.lang.Object[] $r2, $r7, $r12, $r18;
        org.apache.flink.api.common.typeutils.base.BooleanSerializer $r3;
        java.lang.Boolean $r4, $r5;
        org.apache.flink.api.java.tuple.Tuple2 $r6, $r11, $r14, $r23;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r8;
        java.lang.Long $r9, $r10;
        org.apache.flink.api.common.typeutils.base.StringSerializer $r13;
        org.apache.flink.api.common.typeinfo.TypeInformation $r15;
        org.apache.flink.api.common.typeutils.TypeSerializer $r17;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$Pojo $r19, $r21;
        java.lang.String[] $r20, $r22;
        java.util.List $r24;

        $r0 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r0.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        <org.apache.flink.api.common.typeutils.CompositeSerializerTest: org.apache.flink.api.common.ExecutionConfig execConf> = $r0;

        $r1 = newarray (org.apache.flink.api.java.tuple.Tuple2)[4];

        $r3 = <org.apache.flink.api.common.typeutils.base.BooleanSerializer: org.apache.flink.api.common.typeutils.base.BooleanSerializer INSTANCE>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2[1] = $r5;

        $r6 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r3, $r2);

        $r1[0] = $r6;

        $r8 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(23L);

        $r7[1] = $r10;

        $r11 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r8, $r7);

        $r1[1] = $r11;

        $r13 = <org.apache.flink.api.common.typeutils.base.StringSerializer: org.apache.flink.api.common.typeutils.base.StringSerializer INSTANCE>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "teststr1";

        $r12[1] = "teststr2";

        $r14 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r13, $r12);

        $r1[2] = $r14;

        $r15 = staticinvoke <org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeinfo.TypeInformation of(java.lang.Class)>(class "Lorg/apache/flink/api/common/typeutils/CompositeSerializerTest$Pojo;");

        $r16 = <org.apache.flink.api.common.typeutils.CompositeSerializerTest: org.apache.flink.api.common.ExecutionConfig execConf>;

        $r17 = virtualinvoke $r15.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r16);

        $r18 = newarray (java.lang.Object)[2];

        $r19 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$Pojo;

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "123";

        $r20[1] = "456";

        specialinvoke $r19.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$Pojo: void <init>(int,java.lang.String[],org.apache.flink.api.common.typeutils.CompositeSerializerTest$1)>(3, $r20, null);

        $r18[0] = $r19;

        $r21 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$Pojo;

        $r22 = newarray (java.lang.String)[0];

        specialinvoke $r21.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$Pojo: void <init>(int,java.lang.String[],org.apache.flink.api.common.typeutils.CompositeSerializerTest$1)>(6, $r22, null);

        $r18[1] = $r21;

        $r23 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r17, $r18);

        $r1[3] = $r23;

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        <org.apache.flink.api.common.typeutils.CompositeSerializerTest: java.util.List TEST_FIELD_SERIALIZERS> = $r24;

        return;
    }
}
