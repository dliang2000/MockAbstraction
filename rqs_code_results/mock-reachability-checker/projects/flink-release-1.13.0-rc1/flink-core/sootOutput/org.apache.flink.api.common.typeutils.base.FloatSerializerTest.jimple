public class org.apache.flink.api.common.typeutils.base.FloatSerializerTest extends org.apache.flink.api.common.typeutils.SerializerTestBase
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SerializerTestBase: void <init>()>();

        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;
        org.apache.flink.api.common.typeutils.base.FloatSerializer $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        $r1 = new org.apache.flink.api.common.typeutils.base.FloatSerializer;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.FloatSerializer: void <init>()>();

        return $r1;
    }

    protected int getLength()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        return 4;
    }

    protected java.lang.Class getTypeClass()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        return class "Ljava/lang/Float;";
    }

    protected java.lang.Float[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;
        float f0, $f1, $f2;
        java.util.Random $r2;
        java.lang.Float[] $r3;
        java.lang.Float $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(874597969123412341L);

        $f1 = virtualinvoke $r2.<java.util.Random: float nextFloat()>();

        f0 = $f1 * 3.4028235E38F;

        $r3 = newarray (java.lang.Float)[10];

        $r4 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.0F);

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(-1.0F);

        $r3[2] = $r6;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(3.4028235E38F);

        $r3[3] = $r7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(1.4E-45F);

        $r3[4] = $r8;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3[5] = $r9;

        $f2 = neg f0;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r3[6] = $r10;

        $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        $r3[7] = $r11;

        $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#-InfinityF);

        $r3[8] = $r12;

        $r13 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#InfinityF);

        $r3[9] = $r13;

        return $r3;
    }

    protected volatile java.lang.Object[] getTestData()
    {
        org.apache.flink.api.common.typeutils.base.FloatSerializerTest r0;
        java.lang.Float[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.FloatSerializerTest;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.FloatSerializerTest: java.lang.Float[] getTestData()>();

        return $r1;
    }
}
