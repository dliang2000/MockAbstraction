class org.mockito.internal.configuration.plugins.DefaultMockitoPlugins extends java.lang.Object implements org.mockito.plugins.MockitoPlugins
{
    private static final java.util.Map DEFAULT_PLUGINS;
    static final java.lang.String INLINE_ALIAS;

    void <init>()
    {
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r0;

        r0 := @this: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object getDefaultPlugin(java.lang.Class)
    {
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r0;
        java.lang.Class r1, $r6;
        java.util.Map $r2, $r7;
        java.lang.String $r3, $r8, r14, r15;
        java.lang.Object $r4, $r5, $r9, $r11, $r13;
        org.mockito.internal.creation.instance.InstantiatorProvider2Adapter $r10;
        org.mockito.plugins.InstantiatorProvider2 $r12;

        r0 := @this: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        r1 := @parameter0: java.lang.Class;

        if r1 != class "Lorg/mockito/plugins/InstantiatorProvider;" goto label1;

        $r7 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r6 = class "Lorg/mockito/plugins/InstantiatorProvider2;";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r14 = (java.lang.String) $r9;

        $r10 = new org.mockito.internal.creation.instance.InstantiatorProvider2Adapter;

        $r11 = specialinvoke r0.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.Object create(java.lang.Class,java.lang.String)>(class "Lorg/mockito/plugins/InstantiatorProvider2;", r14);

        $r12 = (org.mockito.plugins.InstantiatorProvider2) $r11;

        specialinvoke $r10.<org.mockito.internal.creation.instance.InstantiatorProvider2Adapter: void <init>(org.mockito.plugins.InstantiatorProvider2)>($r12);

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r10);

        return $r13;

     label1:
        $r2 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r15 = (java.lang.String) $r4;

        $r5 = specialinvoke r0.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.Object create(java.lang.Class,java.lang.String)>(r1, r15);

        return $r5;
    }

    java.lang.String getDefaultPluginClass(java.lang.String)
    {
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        r1 := @parameter0: java.lang.String;

        $r2 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private java.lang.Object create(java.lang.Class, java.lang.String)
    {
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r0;
        java.lang.Class r1, $r4;
        java.lang.String r2, $r10, $r13, $r19;
        java.lang.Object $r5, $r6;
        java.lang.IllegalStateException $r7, $r15;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r16, $r17, $r18;
        java.lang.Exception $r14;

        r0 := @this: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No default implementation for requested Mockito plugin type: ");

        $r10 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIs this a valid Mockito plugin type? If yes, please report this problem to Mockito team.\nOtherwise, please check if you are passing valid plugin type.\nExamples of valid plugin types: MockMaker, StackTraceCleanerProvider.");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label1:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r5);

     label2:
        return $r6;

     label3:
        $r14 := @caughtexception;

        $r15 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal problem occurred, please report it. Mockito is unable to load the default implementation of class that is a part of Mockito distribution. Failed to load ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r14);

        throw $r15;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public org.mockito.plugins.MockMaker getInlineMockMaker()
    {
        org.mockito.internal.configuration.plugins.DefaultMockitoPlugins r0;
        java.util.Map $r1;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;
        org.mockito.plugins.MockMaker $r5;

        r0 := @this: org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;

        $r1 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("mock-maker-inline");

        $r3 = (java.lang.String) $r2;

        $r4 = specialinvoke r0.<org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.Object create(java.lang.Class,java.lang.String)>(class "Lorg/mockito/plugins/MockMaker;", $r3);

        $r5 = (org.mockito.plugins.MockMaker) $r4;

        return $r5;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1, $r4, $r7, $r11, $r15, $r19;
        java.util.Map $r2, $r8, $r12, $r16, $r20, $r23;
        java.lang.String $r3, $r5, $r9, $r13, $r17, $r21;

        <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.lang.String INLINE_ALIAS> = "mock-maker-inline";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS> = $r0;

        $r2 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r1 = class "Lorg/mockito/plugins/PluginSwitch;";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = class "Lorg/mockito/internal/configuration/plugins/DefaultPluginSwitch;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $r8 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r7 = class "Lorg/mockito/plugins/MockMaker;";

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker");

        $r12 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r11 = class "Lorg/mockito/plugins/StackTraceCleanerProvider;";

        $r13 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "org.mockito.internal.exceptions.stacktrace.DefaultStackTraceCleanerProvider");

        $r16 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r15 = class "Lorg/mockito/plugins/InstantiatorProvider2;";

        $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, "org.mockito.internal.creation.instance.DefaultInstantiatorProvider");

        $r20 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        $r19 = class "Lorg/mockito/plugins/AnnotationEngine;";

        $r21 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, "org.mockito.internal.configuration.InjectingAnnotationEngine");

        $r23 = <org.mockito.internal.configuration.plugins.DefaultMockitoPlugins: java.util.Map DEFAULT_PLUGINS>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mock-maker-inline", "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker");

        return;
    }
}
