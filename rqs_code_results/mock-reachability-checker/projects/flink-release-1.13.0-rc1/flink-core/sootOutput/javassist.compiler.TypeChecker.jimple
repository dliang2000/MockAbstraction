public class javassist.compiler.TypeChecker extends javassist.compiler.ast.Visitor implements javassist.bytecode.Opcode, javassist.compiler.TokenId
{
    static final java.lang.String javaLangObject;
    static final java.lang.String jvmJavaLangObject;
    static final java.lang.String jvmJavaLangString;
    static final java.lang.String jvmJavaLangClass;
    protected int exprType;
    protected int arrayDim;
    protected java.lang.String className;
    protected javassist.compiler.MemberResolver resolver;
    protected javassist.CtClass thisClass;
    protected javassist.bytecode.MethodInfo thisMethod;

    public void <init>(javassist.CtClass, javassist.ClassPool)
    {
        javassist.compiler.TypeChecker r0;
        javassist.CtClass r1;
        javassist.ClassPool r2;
        javassist.compiler.MemberResolver $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: javassist.ClassPool;

        specialinvoke r0.<javassist.compiler.ast.Visitor: void <init>()>();

        $r3 = new javassist.compiler.MemberResolver;

        specialinvoke $r3.<javassist.compiler.MemberResolver: void <init>(javassist.ClassPool)>(r2);

        r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver> = $r3;

        r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass> = r1;

        r0.<javassist.compiler.TypeChecker: javassist.bytecode.MethodInfo thisMethod> = null;

        return;
    }

    protected static java.lang.String argTypesToString(int[], int[], java.lang.String[])
    {
        int[] r0, r1;
        java.lang.String[] r2;
        int i0, $i1, $i2, i3;
        java.lang.StringBuffer $r4;
        java.lang.String $r7, $r8;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        r2 := @parameter2: java.lang.String[];

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        i0 = lengthof r0;

        if i0 <= 0 goto label2;

        i3 = 0;

     label1:
        $i2 = r0[i3];

        $i1 = r1[i3];

        $r8 = r2[i3];

        staticinvoke <javassist.compiler.TypeChecker: java.lang.StringBuffer typeToString(java.lang.StringBuffer,int,int,java.lang.String)>($r4, $i2, $i1, $r8);

        i3 = i3 + 1;

        if i3 >= i0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        goto label1;

     label2:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r7 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected static java.lang.StringBuffer typeToString(java.lang.StringBuffer, int, int, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;
        java.lang.String r1, r6;
        javassist.compiler.CompileError $r5;

        r0 := @parameter0: java.lang.StringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        if i0 != 307 goto label1;

        r6 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String jvmToJavaName(java.lang.String)>(r1);

        goto label5;

     label1:
        if i0 != 412 goto label2;

        r6 = "Object";

        goto label5;

     label2:
        r6 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String getTypeName(int)>(i0);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r6 = "?";

     label5:
        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

     label6:
        $i2 = i1;

        i1 = i1 + -1;

        if $i2 <= 0 goto label7;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        goto label6;

     label7:
        return r0;

        catch javassist.compiler.CompileError from label2 to label3 with label4;
    }

    public void setThisMethod(javassist.bytecode.MethodInfo)
    {
        javassist.compiler.TypeChecker r0;
        javassist.bytecode.MethodInfo r1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r0.<javassist.compiler.TypeChecker: javassist.bytecode.MethodInfo thisMethod> = r1;

        return;
    }

    protected static void fatal() throws javassist.compiler.CompileError
    {
        javassist.compiler.CompileError $r0;

        $r0 = new javassist.compiler.CompileError;

        specialinvoke $r0.<javassist.compiler.CompileError: void <init>(java.lang.String)>("fatal");

        throw $r0;
    }

    protected java.lang.String getThisName()
    {
        javassist.compiler.TypeChecker r0;
        javassist.CtClass $r1;
        java.lang.String $r2, $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        $r1 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        $r2 = virtualinvoke $r1.<javassist.CtClass: java.lang.String getName()>();

        $r3 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String javaToJvmName(java.lang.String)>($r2);

        return $r3;
    }

    protected java.lang.String getSuperName() throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.CtClass $r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @this: javassist.compiler.TypeChecker;

        $r1 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        $r2 = staticinvoke <javassist.compiler.MemberResolver: javassist.CtClass getSuperclass(javassist.CtClass)>($r1);

        $r3 = virtualinvoke $r2.<javassist.CtClass: java.lang.String getName()>();

        $r4 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String javaToJvmName(java.lang.String)>($r3);

        return $r4;
    }

    protected java.lang.String resolveClassName(javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTList r1;
        javassist.compiler.MemberResolver $r2;
        java.lang.String $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTList;

        $r2 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r3 = virtualinvoke $r2.<javassist.compiler.MemberResolver: java.lang.String resolveClassName(javassist.compiler.ast.ASTList)>(r1);

        return $r3;
    }

    protected java.lang.String resolveClassName(java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        java.lang.String r1, $r3;
        javassist.compiler.MemberResolver $r2;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r3 = virtualinvoke $r2.<javassist.compiler.MemberResolver: java.lang.String resolveJvmClassName(java.lang.String)>(r1);

        return $r3;
    }

    public void atNewExpr(javassist.compiler.ast.NewExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.NewExpr r1;
        javassist.CtClass r2;
        java.lang.String r3, $r8;
        javassist.compiler.ast.ASTList r4, $r6;
        boolean $z0;
        javassist.compiler.MemberResolver $r5;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.NewExpr;

        $z0 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: boolean isArray()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atNewArrayExpr(javassist.compiler.ast.NewExpr)>(r1);

        goto label2;

     label1:
        $r5 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r6 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: javassist.compiler.ast.ASTList getClassName()>();

        r2 = virtualinvoke $r5.<javassist.compiler.MemberResolver: javassist.CtClass lookupClassByName(javassist.compiler.ast.ASTList)>($r6);

        r3 = virtualinvoke r2.<javassist.CtClass: java.lang.String getName()>();

        r4 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: javassist.compiler.ast.ASTList getArguments()>();

        virtualinvoke r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver$Method atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList)>(r2, "<init>", r4);

        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        $r8 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String javaToJvmName(java.lang.String)>(r3);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r8;

     label2:
        return;
    }

    public void atNewArrayExpr(javassist.compiler.ast.NewExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.NewExpr r1;
        int i0, $i1;
        javassist.compiler.ast.ASTList r2, r3;
        javassist.compiler.ast.ArrayInit r4;
        javassist.compiler.ast.ASTree r5;
        java.lang.String $r6;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.NewExpr;

        i0 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: int getArrayType()>();

        r2 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: javassist.compiler.ast.ASTList getArraySize()>();

        r3 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: javassist.compiler.ast.ASTList getClassName()>();

        r4 = virtualinvoke r1.<javassist.compiler.ast.NewExpr: javassist.compiler.ast.ArrayInit getInitializer()>();

        if r4 == null goto label1;

        virtualinvoke r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label1:
        $i1 = virtualinvoke r2.<javassist.compiler.ast.ASTList: int length()>();

        if $i1 <= 1 goto label2;

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atMultiNewArray(int,javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(i0, r3, r2);

        goto label5;

     label2:
        r5 = virtualinvoke r2.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        if r5 == null goto label3;

        virtualinvoke r5.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label3:
        r0.<javassist.compiler.TypeChecker: int exprType> = i0;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 1;

        if i0 != 307 goto label4;

        $r6 = virtualinvoke r0.<javassist.compiler.TypeChecker: java.lang.String resolveClassName(javassist.compiler.ast.ASTList)>(r3);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r6;

        goto label5;

     label4:
        r0.<javassist.compiler.TypeChecker: java.lang.String className> = null;

     label5:
        return;
    }

    public void atArrayInit(javassist.compiler.ast.ArrayInit) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ArrayInit r1;
        javassist.compiler.ast.ASTree r2;
        javassist.compiler.ast.ASTList r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ArrayInit;

        r3 = r1;

     label1:
        if r3 == null goto label3;

        r2 = virtualinvoke r3.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        r3 = virtualinvoke r3.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        if r2 == null goto label2;

        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label2:
        goto label1;

     label3:
        return;
    }

    protected void atMultiNewArray(int, javassist.compiler.ast.ASTList, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        int i0, i1;
        javassist.compiler.ast.ASTList r1, r4;
        javassist.compiler.ast.ASTree r2;
        java.lang.String $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.compiler.ast.ASTList;

        r4 := @parameter2: javassist.compiler.ast.ASTList;

        i1 = virtualinvoke r4.<javassist.compiler.ast.ASTList: int length()>();

     label1:
        if r4 == null goto label3;

        r2 = virtualinvoke r4.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        if r2 != null goto label2;

        goto label3;

     label2:
        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r4 = virtualinvoke r4.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        goto label1;

     label3:
        r0.<javassist.compiler.TypeChecker: int exprType> = i0;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = i1;

        if i0 != 307 goto label4;

        $r3 = virtualinvoke r0.<javassist.compiler.TypeChecker: java.lang.String resolveClassName(javassist.compiler.ast.ASTList)>(r1);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r3;

        goto label5;

     label4:
        r0.<javassist.compiler.TypeChecker: java.lang.String className> = null;

     label5:
        return;
    }

    public void atAssignExpr(javassist.compiler.ast.AssignExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.AssignExpr r1;
        int i0, $i1;
        javassist.compiler.ast.ASTree r2, r3;
        javassist.compiler.ast.Expr r4, $r5;
        boolean $z0, $z1;
        javassist.compiler.ast.Variable $r6, $r7;
        javassist.compiler.ast.Declarator $r8;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.AssignExpr;

        i0 = virtualinvoke r1.<javassist.compiler.ast.AssignExpr: int getOperator()>();

        r2 = virtualinvoke r1.<javassist.compiler.ast.AssignExpr: javassist.compiler.ast.ASTree oprand1()>();

        r3 = virtualinvoke r1.<javassist.compiler.ast.AssignExpr: javassist.compiler.ast.ASTree oprand2()>();

        $z0 = r2 instanceof javassist.compiler.ast.Variable;

        if $z0 == 0 goto label1;

        $r7 = (javassist.compiler.ast.Variable) r2;

        $r6 = (javassist.compiler.ast.Variable) r2;

        $r8 = virtualinvoke $r6.<javassist.compiler.ast.Variable: javassist.compiler.ast.Declarator getDeclarator()>();

        specialinvoke r0.<javassist.compiler.TypeChecker: void atVariableAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Variable,javassist.compiler.ast.Declarator,javassist.compiler.ast.ASTree)>(r1, i0, $r7, $r8, r3);

        goto label3;

     label1:
        $z1 = r2 instanceof javassist.compiler.ast.Expr;

        if $z1 == 0 goto label2;

        r4 = (javassist.compiler.ast.Expr) r2;

        $i1 = virtualinvoke r4.<javassist.compiler.ast.Expr: int getOperator()>();

        if $i1 != 65 goto label2;

        $r5 = (javassist.compiler.ast.Expr) r2;

        specialinvoke r0.<javassist.compiler.TypeChecker: void atArrayAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.Expr,javassist.compiler.ast.ASTree)>(r1, i0, $r5, r3);

        return;

     label2:
        virtualinvoke r0.<javassist.compiler.TypeChecker: void atFieldAssign(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r1, i0, r2, r3);

     label3:
        return;
    }

    private void atVariableAssign(javassist.compiler.ast.Expr, int, javassist.compiler.ast.Variable, javassist.compiler.ast.Declarator, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        int i0, i1, i2;
        javassist.compiler.ast.Variable r2;
        javassist.compiler.ast.Declarator r3;
        javassist.compiler.ast.ASTree r4;
        java.lang.String r5;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.compiler.ast.Variable;

        r3 := @parameter3: javassist.compiler.ast.Declarator;

        r4 := @parameter4: javassist.compiler.ast.ASTree;

        i1 = virtualinvoke r3.<javassist.compiler.ast.Declarator: int getType()>();

        i2 = virtualinvoke r3.<javassist.compiler.ast.Declarator: int getArrayDim()>();

        r5 = virtualinvoke r3.<javassist.compiler.ast.Declarator: java.lang.String getClassName()>();

        if i0 == 61 goto label1;

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atVariable(javassist.compiler.ast.Variable)>(r2);

     label1:
        virtualinvoke r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = i1;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = i2;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = r5;

        return;
    }

    private void atArrayAssign(javassist.compiler.ast.Expr, int, javassist.compiler.ast.Expr, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1, r2;
        int i0, i1, i2;
        javassist.compiler.ast.ASTree r3, $r5, $r6;
        java.lang.String r4;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.compiler.ast.Expr;

        r3 := @parameter3: javassist.compiler.ast.ASTree;

        $r5 = virtualinvoke r2.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $r6 = virtualinvoke r2.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r5, $r6);

        i1 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i2 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        r4 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        virtualinvoke r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = i1;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = i2;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = r4;

        return;
    }

    protected void atFieldAssign(javassist.compiler.ast.Expr, int, javassist.compiler.ast.ASTree, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        int i0, i1, i2;
        javassist.compiler.ast.ASTree r2, r3;
        javassist.CtField r4;
        java.lang.String r5;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.compiler.ast.ASTree;

        r3 := @parameter3: javassist.compiler.ast.ASTree;

        r4 = virtualinvoke r0.<javassist.compiler.TypeChecker: javassist.CtField fieldAccess(javassist.compiler.ast.ASTree)>(r2);

        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.CtField)>(r4);

        i1 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i2 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        r5 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        virtualinvoke r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = i1;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = i2;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = r5;

        return;
    }

    public void atCondExpr(javassist.compiler.ast.CondExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.CondExpr r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        javassist.compiler.ast.ASTree $r3, $r4, $r5, $r7, $r9;
        boolean $z0, $z1;
        javassist.compiler.ast.CastExpr $r6, $r8;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CondExpr;

        $r3 = virtualinvoke r1.<javassist.compiler.ast.CondExpr: javassist.compiler.ast.ASTree condExpr()>();

        specialinvoke r0.<javassist.compiler.TypeChecker: void booleanExpr(javassist.compiler.ast.ASTree)>($r3);

        $r4 = virtualinvoke r1.<javassist.compiler.ast.CondExpr: javassist.compiler.ast.ASTree thenExpr()>();

        virtualinvoke $r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        i0 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        $r5 = virtualinvoke r1.<javassist.compiler.ast.CondExpr: javassist.compiler.ast.ASTree elseExpr()>();

        virtualinvoke $r5.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        if i1 != 0 goto label2;

        $i2 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if i1 != $i2 goto label2;

        $i3 = r0.<javassist.compiler.TypeChecker: int exprType>;

        $z0 = staticinvoke <javassist.compiler.CodeGen: boolean rightIsStrong(int,int)>(i0, $i3);

        if $z0 == 0 goto label1;

        $r8 = new javassist.compiler.ast.CastExpr;

        $i5 = r0.<javassist.compiler.TypeChecker: int exprType>;

        $r9 = virtualinvoke r1.<javassist.compiler.ast.CondExpr: javassist.compiler.ast.ASTree thenExpr()>();

        specialinvoke $r8.<javassist.compiler.ast.CastExpr: void <init>(int,int,javassist.compiler.ast.ASTree)>($i5, 0, $r9);

        virtualinvoke r1.<javassist.compiler.ast.CondExpr: void setThen(javassist.compiler.ast.ASTree)>($r8);

        goto label2;

     label1:
        $i4 = r0.<javassist.compiler.TypeChecker: int exprType>;

        $z1 = staticinvoke <javassist.compiler.CodeGen: boolean rightIsStrong(int,int)>($i4, i0);

        if $z1 == 0 goto label2;

        $r6 = new javassist.compiler.ast.CastExpr;

        $r7 = virtualinvoke r1.<javassist.compiler.ast.CondExpr: javassist.compiler.ast.ASTree elseExpr()>();

        specialinvoke $r6.<javassist.compiler.ast.CastExpr: void <init>(int,int,javassist.compiler.ast.ASTree)>(i0, 0, $r7);

        virtualinvoke r1.<javassist.compiler.ast.CondExpr: void setElse(javassist.compiler.ast.ASTree)>($r6);

        r0.<javassist.compiler.TypeChecker: int exprType> = i0;

     label2:
        return;
    }

    public void atBinExpr(javassist.compiler.ast.BinExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.BinExpr r1;
        int i0, i1, i2;
        javassist.compiler.ast.ASTree r2, r7;
        boolean $z0;
        javassist.compiler.ast.Member $r3;
        javassist.compiler.ast.Expr $r4, r5;
        javassist.compiler.ast.CallExpr r6;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.BinExpr;

        i0 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: int getOperator()>();

        i1 = staticinvoke <javassist.compiler.CodeGen: int lookupBinOp(int)>(i0);

        if i1 < 0 goto label4;

        if i0 != 43 goto label2;

        r5 = specialinvoke r0.<javassist.compiler.TypeChecker: javassist.compiler.ast.Expr atPlusExpr(javassist.compiler.ast.BinExpr)>(r1);

        if r5 == null goto label1;

        $r3 = new javassist.compiler.ast.Member;

        specialinvoke $r3.<javassist.compiler.ast.Member: void <init>(java.lang.String)>("toString");

        $r4 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, r5, $r3);

        r6 = staticinvoke <javassist.compiler.ast.CallExpr: javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r4, null);

        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setOprand1(javassist.compiler.ast.ASTree)>(r6);

        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setOprand2(javassist.compiler.ast.ASTree)>(null);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = "java/lang/String";

     label1:
        goto label5;

     label2:
        r7 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand1()>();

        r2 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke r7.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        i2 = r0.<javassist.compiler.TypeChecker: int exprType>;

        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $z0 = specialinvoke r0.<javassist.compiler.TypeChecker: boolean isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r1, i0, r7, r2);

        if $z0 != 0 goto label3;

        specialinvoke r0.<javassist.compiler.TypeChecker: void computeBinExprType(javassist.compiler.ast.BinExpr,int,int)>(r1, i0, i2);

     label3:
        goto label5;

     label4:
        specialinvoke r0.<javassist.compiler.TypeChecker: void booleanExpr(javassist.compiler.ast.ASTree)>(r1);

     label5:
        return;
    }

    private javassist.compiler.ast.Expr atPlusExpr(javassist.compiler.ast.BinExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.BinExpr r1, $r16;
        javassist.compiler.ast.ASTree r2, r3;
        int i0, $i1, i2, $i3;
        java.lang.String r4, $r7, $r8, $r15;
        javassist.compiler.ast.ASTList r5;
        boolean $z0, $z1, $z2, $z3;
        javassist.compiler.ast.Symbol $r9, $r10, $r11;
        javassist.compiler.ast.NewExpr $r12;
        javassist.compiler.ast.Expr $r13, $r14, $r17, r18;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.BinExpr;

        r2 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand1()>();

        r3 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand2()>();

        if r3 != null goto label1;

        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        return null;

     label1:
        $z0 = staticinvoke <javassist.compiler.TypeChecker: boolean isPlusExpr(javassist.compiler.ast.ASTree)>(r2);

        if $z0 == 0 goto label3;

        $r16 = (javassist.compiler.ast.BinExpr) r2;

        r18 = specialinvoke r0.<javassist.compiler.TypeChecker: javassist.compiler.ast.Expr atPlusExpr(javassist.compiler.ast.BinExpr)>($r16);

        if r18 == null goto label2;

        virtualinvoke r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = "java/lang/StringBuffer";

        $r17 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r18, r3);

        return $r17;

     label2:
        goto label4;

     label3:
        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label4:
        i2 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i0 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        r4 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        virtualinvoke r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $z1 = specialinvoke r0.<javassist.compiler.TypeChecker: boolean isConstant(javassist.compiler.ast.BinExpr,int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r1, 43, r2, r3);

        if $z1 == 0 goto label5;

        return null;

     label5:
        if i2 != 307 goto label6;

        if i0 != 0 goto label6;

        $r15 = "java/lang/String";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 != 0 goto label7;

     label6:
        $i3 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if $i3 != 307 goto label8;

        $i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if $i1 != 0 goto label8;

        $r8 = "java/lang/String";

        $r7 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label8;

     label7:
        $r9 = new javassist.compiler.ast.Symbol;

        specialinvoke $r9.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>("java");

        $r10 = new javassist.compiler.ast.Symbol;

        specialinvoke $r10.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>("lang");

        $r11 = new javassist.compiler.ast.Symbol;

        specialinvoke $r11.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>("StringBuffer");

        r5 = staticinvoke <javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList make(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r9, $r10, $r11);

        $r12 = new javassist.compiler.ast.NewExpr;

        specialinvoke $r12.<javassist.compiler.ast.NewExpr: void <init>(javassist.compiler.ast.ASTList,javassist.compiler.ast.ASTList)>(r5, null);

        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = "java/lang/StringBuffer";

        $r13 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r12, r2);

        $r14 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r13, r3);

        return $r14;

     label8:
        specialinvoke r0.<javassist.compiler.TypeChecker: void computeBinExprType(javassist.compiler.ast.BinExpr,int,int)>(r1, 43, i2);

        return null;
    }

    private boolean isConstant(javassist.compiler.ast.BinExpr, int, javassist.compiler.ast.ASTree, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.BinExpr r1;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        javassist.compiler.ast.DoubleConst $r2;
        javassist.compiler.ast.IntConst $r3;
        javassist.compiler.ast.StringL $r4, $r6, $r9;
        java.lang.StringBuilder $r5, $r8, $r11;
        java.lang.String $r7, $r10, $r12;
        javassist.compiler.ast.ASTree r13, r14, r15, r16, r17;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.BinExpr;

        i0 := @parameter1: int;

        r13 := @parameter2: javassist.compiler.ast.ASTree;

        r14 := @parameter3: javassist.compiler.ast.ASTree;

        r15 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree)>(r13);

        r16 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree)>(r14);

        r17 = null;

        $z0 = r15 instanceof javassist.compiler.ast.StringL;

        if $z0 == 0 goto label1;

        $z2 = r16 instanceof javassist.compiler.ast.StringL;

        if $z2 == 0 goto label1;

        if i0 != 43 goto label1;

        $r4 = new javassist.compiler.ast.StringL;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = (javassist.compiler.ast.StringL) r15;

        $r7 = virtualinvoke $r6.<javassist.compiler.ast.StringL: java.lang.String get()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = (javassist.compiler.ast.StringL) r16;

        $r10 = virtualinvoke $r9.<javassist.compiler.ast.StringL: java.lang.String get()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<javassist.compiler.ast.StringL: void <init>(java.lang.String)>($r12);

        r17 = $r4;

        goto label3;

     label1:
        $z3 = r15 instanceof javassist.compiler.ast.IntConst;

        if $z3 == 0 goto label2;

        $r3 = (javassist.compiler.ast.IntConst) r15;

        r17 = virtualinvoke $r3.<javassist.compiler.ast.IntConst: javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree)>(i0, r16);

        goto label3;

     label2:
        $z1 = r15 instanceof javassist.compiler.ast.DoubleConst;

        if $z1 == 0 goto label3;

        $r2 = (javassist.compiler.ast.DoubleConst) r15;

        r17 = virtualinvoke $r2.<javassist.compiler.ast.DoubleConst: javassist.compiler.ast.ASTree compute(int,javassist.compiler.ast.ASTree)>(i0, r16);

     label3:
        if r17 != null goto label4;

        return 0;

     label4:
        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setOperator(int)>(43);

        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setOprand1(javassist.compiler.ast.ASTree)>(r17);

        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setOprand2(javassist.compiler.ast.ASTree)>(null);

        virtualinvoke r17.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        return 1;
    }

    static javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree)
    {
        javassist.compiler.ast.ASTree r0, r1, $r3, $r4, $r5, $r7, $r8, r11;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Member $r2, $r6;
        javassist.compiler.ast.BinExpr r9;
        javassist.compiler.ast.Expr r10;

        r0 := @parameter0: javassist.compiler.ast.ASTree;

        $z0 = r0 instanceof javassist.compiler.ast.BinExpr;

        if $z0 == 0 goto label2;

        r9 = (javassist.compiler.ast.BinExpr) r0;

        $i1 = virtualinvoke r9.<javassist.compiler.ast.BinExpr: int getOperator()>();

        if $i1 != 43 goto label1;

        $r7 = virtualinvoke r9.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand2()>();

        if $r7 != null goto label1;

        $r8 = virtualinvoke r9.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree getLeft()>();

        return $r8;

     label1:
        goto label7;

     label2:
        $z1 = r0 instanceof javassist.compiler.ast.Expr;

        if $z1 == 0 goto label6;

        r10 = (javassist.compiler.ast.Expr) r0;

        i0 = virtualinvoke r10.<javassist.compiler.ast.Expr: int getOperator()>();

        if i0 != 35 goto label4;

        $r5 = virtualinvoke r10.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $r6 = (javassist.compiler.ast.Member) $r5;

        r1 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree getConstantFieldValue(javassist.compiler.ast.Member)>($r6);

        if r1 == null goto label3;

        return r1;

     label3:
        goto label5;

     label4:
        if i0 != 43 goto label5;

        $r3 = virtualinvoke r10.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree getRight()>();

        if $r3 != null goto label5;

        $r4 = virtualinvoke r10.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree getLeft()>();

        return $r4;

     label5:
        goto label7;

     label6:
        $z2 = r0 instanceof javassist.compiler.ast.Member;

        if $z2 == 0 goto label7;

        $r2 = (javassist.compiler.ast.Member) r0;

        r11 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree getConstantFieldValue(javassist.compiler.ast.Member)>($r2);

        if r11 == null goto label7;

        return r11;

     label7:
        return r0;
    }

    private static javassist.compiler.ast.ASTree getConstantFieldValue(javassist.compiler.ast.Member)
    {
        javassist.compiler.ast.Member r0;
        javassist.CtField $r1;
        javassist.compiler.ast.ASTree $r2;

        r0 := @parameter0: javassist.compiler.ast.Member;

        $r1 = virtualinvoke r0.<javassist.compiler.ast.Member: javassist.CtField getField()>();

        $r2 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree getConstantFieldValue(javassist.CtField)>($r1);

        return $r2;
    }

    public static javassist.compiler.ast.ASTree getConstantFieldValue(javassist.CtField)
    {
        javassist.CtField r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        javassist.compiler.ast.DoubleConst $r2;
        java.lang.Number $r3, $r7;
        double $d0;
        javassist.compiler.ast.Keyword $r4;
        java.lang.Boolean $r5;
        javassist.compiler.ast.IntConst $r6;
        long $l0;
        javassist.compiler.ast.StringL $r8;
        java.lang.String $r9;
        short $s1, $s3, $s5;

        r0 := @parameter0: javassist.CtField;

        if r0 != null goto label01;

        return null;

     label01:
        r1 = virtualinvoke r0.<javassist.CtField: java.lang.Object getConstantValue()>();

        if r1 != null goto label02;

        return null;

     label02:
        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label03;

        $r8 = new javassist.compiler.ast.StringL;

        $r9 = (java.lang.String) r1;

        specialinvoke $r8.<javassist.compiler.ast.StringL: void <init>(java.lang.String)>($r9);

        return $r8;

     label03:
        $z1 = r1 instanceof java.lang.Double;

        if $z1 != 0 goto label04;

        $z3 = r1 instanceof java.lang.Float;

        if $z3 == 0 goto label07;

     label04:
        $z2 = r1 instanceof java.lang.Double;

        if $z2 == 0 goto label05;

        $s1 = 405;

        goto label06;

     label05:
        $s1 = 404;

     label06:
        $r2 = new javassist.compiler.ast.DoubleConst;

        $r3 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        specialinvoke $r2.<javassist.compiler.ast.DoubleConst: void <init>(double,int)>($d0, $s1);

        return $r2;

     label07:
        $z4 = r1 instanceof java.lang.Number;

        if $z4 == 0 goto label10;

        $z7 = r1 instanceof java.lang.Long;

        if $z7 == 0 goto label08;

        $s3 = 403;

        goto label09;

     label08:
        $s3 = 402;

     label09:
        $r6 = new javassist.compiler.ast.IntConst;

        $r7 = (java.lang.Number) r1;

        $l0 = virtualinvoke $r7.<java.lang.Number: long longValue()>();

        specialinvoke $r6.<javassist.compiler.ast.IntConst: void <init>(long,int)>($l0, $s3);

        return $r6;

     label10:
        $z5 = r1 instanceof java.lang.Boolean;

        if $z5 == 0 goto label13;

        $r4 = new javassist.compiler.ast.Keyword;

        $r5 = (java.lang.Boolean) r1;

        $z6 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z6 == 0 goto label11;

        $s5 = 410;

        goto label12;

     label11:
        $s5 = 411;

     label12:
        specialinvoke $r4.<javassist.compiler.ast.Keyword: void <init>(int)>($s5);

        return $r4;

     label13:
        return null;
    }

    private static boolean isPlusExpr(javassist.compiler.ast.ASTree)
    {
        javassist.compiler.ast.ASTree r0;
        javassist.compiler.ast.BinExpr r1;
        int i0;
        boolean $z0, $z1;

        r0 := @parameter0: javassist.compiler.ast.ASTree;

        $z0 = r0 instanceof javassist.compiler.ast.BinExpr;

        if $z0 == 0 goto label3;

        r1 = (javassist.compiler.ast.BinExpr) r0;

        i0 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: int getOperator()>();

        if i0 != 43 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    private static javassist.compiler.ast.Expr makeAppendCall(javassist.compiler.ast.ASTree, javassist.compiler.ast.ASTree)
    {
        javassist.compiler.ast.ASTree r0, r1;
        javassist.compiler.ast.Member $r2;
        javassist.compiler.ast.Expr $r3;
        javassist.compiler.ast.ASTList $r4;
        javassist.compiler.ast.CallExpr $r5;

        r0 := @parameter0: javassist.compiler.ast.ASTree;

        r1 := @parameter1: javassist.compiler.ast.ASTree;

        $r2 = new javassist.compiler.ast.Member;

        specialinvoke $r2.<javassist.compiler.ast.Member: void <init>(java.lang.String)>("append");

        $r3 = staticinvoke <javassist.compiler.ast.Expr: javassist.compiler.ast.Expr make(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(46, r0, $r2);

        $r4 = new javassist.compiler.ast.ASTList;

        specialinvoke $r4.<javassist.compiler.ast.ASTList: void <init>(javassist.compiler.ast.ASTree)>(r1);

        $r5 = staticinvoke <javassist.compiler.ast.CallExpr: javassist.compiler.ast.CallExpr makeCall(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r3, $r4);

        return $r5;
    }

    private void computeBinExprType(javassist.compiler.ast.BinExpr, int, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.BinExpr r1;
        int i0, i1, i2, $i3, $i4;
        boolean $z0;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.BinExpr;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if i0 == 364 goto label1;

        if i0 == 366 goto label1;

        if i0 != 370 goto label2;

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = i1;

        goto label3;

     label2:
        specialinvoke r0.<javassist.compiler.TypeChecker: void insertCast(javassist.compiler.ast.BinExpr,int,int)>(r1, i1, i2);

     label3:
        $i3 = r0.<javassist.compiler.TypeChecker: int exprType>;

        $z0 = staticinvoke <javassist.compiler.CodeGen: boolean isP_INT(int)>($i3);

        if $z0 == 0 goto label4;

        $i4 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if $i4 == 301 goto label4;

        r0.<javassist.compiler.TypeChecker: int exprType> = 324;

     label4:
        return;
    }

    private void booleanExpr(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTree r1, $r2, $r3, $r5, $r6, $r7;
        int i0, i1, i2, $i3, $i4;
        javassist.compiler.ast.Expr $r4;
        javassist.compiler.ast.BinExpr r8, r9;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        i0 = staticinvoke <javassist.compiler.CodeGen: int getCompOperator(javassist.compiler.ast.ASTree)>(r1);

        if i0 != 358 goto label2;

        r8 = (javassist.compiler.ast.BinExpr) r1;

        $r6 = virtualinvoke r8.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand1()>();

        virtualinvoke $r6.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        i1 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i2 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        $r7 = virtualinvoke r8.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke $r7.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        if i2 != 0 goto label1;

        $i3 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if $i3 != 0 goto label1;

        $i4 = r0.<javassist.compiler.TypeChecker: int exprType>;

        specialinvoke r0.<javassist.compiler.TypeChecker: void insertCast(javassist.compiler.ast.BinExpr,int,int)>(r8, i1, $i4);

     label1:
        goto label6;

     label2:
        if i0 != 33 goto label3;

        $r4 = (javassist.compiler.ast.Expr) r1;

        $r5 = virtualinvoke $r4.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        virtualinvoke $r5.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        goto label6;

     label3:
        if i0 == 369 goto label4;

        if i0 != 368 goto label5;

     label4:
        r9 = (javassist.compiler.ast.BinExpr) r1;

        $r2 = virtualinvoke r9.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand1()>();

        virtualinvoke $r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $r3 = virtualinvoke r9.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke $r3.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        goto label6;

     label5:
        virtualinvoke r1.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label6:
        r0.<javassist.compiler.TypeChecker: int exprType> = 301;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        return;
    }

    private void insertCast(javassist.compiler.ast.BinExpr, int, int) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.BinExpr r1;
        int i0, i1;
        boolean $z0;
        javassist.compiler.ast.CastExpr $r2;
        javassist.compiler.ast.ASTree $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.BinExpr;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <javassist.compiler.CodeGen: boolean rightIsStrong(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        $r2 = new javassist.compiler.ast.CastExpr;

        $r3 = virtualinvoke r1.<javassist.compiler.ast.BinExpr: javassist.compiler.ast.ASTree oprand1()>();

        specialinvoke $r2.<javassist.compiler.ast.CastExpr: void <init>(int,int,javassist.compiler.ast.ASTree)>(i1, 0, $r3);

        virtualinvoke r1.<javassist.compiler.ast.BinExpr: void setLeft(javassist.compiler.ast.ASTree)>($r2);

        goto label2;

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = i0;

     label2:
        return;
    }

    public void atCastExpr(javassist.compiler.ast.CastExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.CastExpr r1;
        java.lang.String r2;
        javassist.compiler.ast.ASTList $r3;
        javassist.compiler.ast.ASTree $r4;
        int $i0, $i1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CastExpr;

        $r3 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: javassist.compiler.ast.ASTList getClassName()>();

        r2 = virtualinvoke r0.<javassist.compiler.TypeChecker: java.lang.String resolveClassName(javassist.compiler.ast.ASTList)>($r3);

        $r4 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: javassist.compiler.ast.ASTree getOprand()>();

        virtualinvoke $r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i0 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: int getType()>();

        r0.<javassist.compiler.TypeChecker: int exprType> = $i0;

        $i1 = virtualinvoke r1.<javassist.compiler.ast.CastExpr: int getArrayDim()>();

        r0.<javassist.compiler.TypeChecker: int arrayDim> = $i1;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = r2;

        return;
    }

    public void atInstanceOfExpr(javassist.compiler.ast.InstanceOfExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.InstanceOfExpr r1;
        javassist.compiler.ast.ASTree $r2;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.InstanceOfExpr;

        $r2 = virtualinvoke r1.<javassist.compiler.ast.InstanceOfExpr: javassist.compiler.ast.ASTree getOprand()>();

        virtualinvoke $r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = 301;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        return;
    }

    public void atExpr(javassist.compiler.ast.Expr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        int i0, $i1;
        javassist.compiler.ast.ASTree r2, $r4, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        javassist.compiler.ast.Symbol $r6, $r8;
        javassist.compiler.NoFieldException $r9;
        java.lang.String r10, r11;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 = virtualinvoke r1.<javassist.compiler.ast.Expr: int getOperator()>();

        r2 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        if i0 != 46 goto label07;

        $r7 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $r8 = (javassist.compiler.ast.Symbol) $r7;

        r10 = virtualinvoke $r8.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("length");

        if $z3 == 0 goto label04;

     label01:
        virtualinvoke r0.<javassist.compiler.TypeChecker: void atArrayLength(javassist.compiler.ast.Expr)>(r1);

     label02:
        goto label06;

     label03:
        $r9 := @caughtexception;

        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.compiler.ast.ASTree)>(r1);

        goto label06;

     label04:
        $z4 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("class");

        if $z4 == 0 goto label05;

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atClassObject(javassist.compiler.ast.Expr)>(r1);

        goto label06;

     label05:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.compiler.ast.ASTree)>(r1);

     label06:
        goto label17;

     label07:
        if i0 != 35 goto label10;

        $r5 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $r6 = (javassist.compiler.ast.Symbol) $r5;

        r11 = virtualinvoke $r6.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("class");

        if $z2 == 0 goto label08;

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atClassObject(javassist.compiler.ast.Expr)>(r1);

        goto label09;

     label08:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.compiler.ast.ASTree)>(r1);

     label09:
        goto label17;

     label10:
        if i0 != 65 goto label11;

        $r4 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>(r2, $r4);

        goto label17;

     label11:
        if i0 == 362 goto label12;

        if i0 != 363 goto label13;

     label12:
        specialinvoke r0.<javassist.compiler.TypeChecker: void atPlusPlus(int,javassist.compiler.ast.ASTree,javassist.compiler.ast.Expr)>(i0, r2, r1);

        goto label17;

     label13:
        if i0 != 33 goto label14;

        specialinvoke r0.<javassist.compiler.TypeChecker: void booleanExpr(javassist.compiler.ast.ASTree)>(r1);

        goto label17;

     label14:
        if i0 != 67 goto label15;

        staticinvoke <javassist.compiler.TypeChecker: void fatal()>();

        goto label17;

     label15:
        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $z0 = specialinvoke r0.<javassist.compiler.TypeChecker: boolean isConstant(javassist.compiler.ast.Expr,int,javassist.compiler.ast.ASTree)>(r1, i0, r2);

        if $z0 != 0 goto label17;

        if i0 == 45 goto label16;

        if i0 != 126 goto label17;

     label16:
        $i1 = r0.<javassist.compiler.TypeChecker: int exprType>;

        $z1 = staticinvoke <javassist.compiler.CodeGen: boolean isP_INT(int)>($i1);

        if $z1 == 0 goto label17;

        r0.<javassist.compiler.TypeChecker: int exprType> = 324;

     label17:
        return;

        catch javassist.compiler.NoFieldException from label01 to label02 with label03;
    }

    private boolean isConstant(javassist.compiler.ast.Expr, int, javassist.compiler.ast.ASTree)
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        int i0;
        boolean $z0, $z1;
        double $d0, $d1;
        javassist.compiler.ast.ASTree r2, r3;
        javassist.compiler.ast.IntConst r4;
        long l1, l2;
        javassist.compiler.ast.DoubleConst r5;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.compiler.ast.ASTree;

        r3 = staticinvoke <javassist.compiler.TypeChecker: javassist.compiler.ast.ASTree stripPlusExpr(javassist.compiler.ast.ASTree)>(r2);

        $z0 = r3 instanceof javassist.compiler.ast.IntConst;

        if $z0 == 0 goto label4;

        r4 = (javassist.compiler.ast.IntConst) r3;

        l1 = virtualinvoke r4.<javassist.compiler.ast.IntConst: long get()>();

        if i0 != 45 goto label1;

        l2 = neg l1;

        goto label3;

     label1:
        if i0 != 126 goto label2;

        l2 = l1 ^ -1L;

        goto label3;

     label2:
        return 0;

     label3:
        virtualinvoke r4.<javassist.compiler.ast.IntConst: void set(long)>(l2);

        goto label8;

     label4:
        $z1 = r3 instanceof javassist.compiler.ast.DoubleConst;

        if $z1 == 0 goto label7;

        r5 = (javassist.compiler.ast.DoubleConst) r3;

        if i0 != 45 goto label5;

        $d0 = virtualinvoke r5.<javassist.compiler.ast.DoubleConst: double get()>();

        $d1 = neg $d0;

        virtualinvoke r5.<javassist.compiler.ast.DoubleConst: void set(double)>($d1);

        goto label6;

     label5:
        return 0;

     label6:
        goto label8;

     label7:
        return 0;

     label8:
        virtualinvoke r1.<javassist.compiler.ast.Expr: void setOperator(int)>(43);

        return 1;
    }

    public void atCallExpr(javassist.compiler.ast.CallExpr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.CallExpr r1;
        javassist.compiler.ast.ASTree r2, r4, $r7, $r8, $r15, $r22;
        javassist.compiler.ast.ASTList r3;
        int i0, $i1, $i2, $i3;
        java.lang.String r5, $r10, $r17, $r23, $r25, $r26, r27;
        boolean $z0, $z1, $z2;
        javassist.compiler.ast.Symbol $r9, $r16, $r24;
        javassist.compiler.MemberResolver $r11, $r12, $r14;
        javassist.CtClass $r13, $r19, r28;
        javassist.compiler.ast.Keyword $r18;
        javassist.compiler.ast.Member $r20;
        javassist.compiler.NoFieldException $r21;
        javassist.compiler.ast.Expr r29;
        javassist.compiler.MemberResolver$Method r30;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.CallExpr;

        r27 = null;

        r28 = null;

        r2 = virtualinvoke r1.<javassist.compiler.ast.CallExpr: javassist.compiler.ast.ASTree oprand1()>();

        $r7 = virtualinvoke r1.<javassist.compiler.ast.CallExpr: javassist.compiler.ast.ASTree oprand2()>();

        r3 = (javassist.compiler.ast.ASTList) $r7;

        $z0 = r2 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label01;

        $r20 = (javassist.compiler.ast.Member) r2;

        r27 = virtualinvoke $r20.<javassist.compiler.ast.Member: java.lang.String get()>();

        r28 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        goto label16;

     label01:
        $z1 = r2 instanceof javassist.compiler.ast.Keyword;

        if $z1 == 0 goto label03;

        r27 = "<init>";

        $r18 = (javassist.compiler.ast.Keyword) r2;

        $i3 = virtualinvoke $r18.<javassist.compiler.ast.Keyword: int get()>();

        if $i3 != 336 goto label02;

        $r19 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        r28 = staticinvoke <javassist.compiler.MemberResolver: javassist.CtClass getSuperclass(javassist.CtClass)>($r19);

        goto label16;

     label02:
        r28 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        goto label16;

     label03:
        $z2 = r2 instanceof javassist.compiler.ast.Expr;

        if $z2 == 0 goto label15;

        r29 = (javassist.compiler.ast.Expr) r2;

        $r8 = virtualinvoke r29.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $r9 = (javassist.compiler.ast.Symbol) $r8;

        r27 = virtualinvoke $r9.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        i0 = virtualinvoke r29.<javassist.compiler.ast.Expr: int getOperator()>();

        if i0 != 35 goto label04;

        $r14 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r15 = virtualinvoke r29.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $r16 = (javassist.compiler.ast.Symbol) $r15;

        $r17 = virtualinvoke $r16.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        r28 = virtualinvoke $r14.<javassist.compiler.MemberResolver: javassist.CtClass lookupClass(java.lang.String,boolean)>($r17, 0);

        goto label14;

     label04:
        if i0 != 46 goto label13;

        r4 = virtualinvoke r29.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        r5 = staticinvoke <javassist.compiler.TypeChecker: java.lang.String isDotSuper(javassist.compiler.ast.ASTree)>(r4);

        if r5 == null goto label05;

        $r13 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        r28 = staticinvoke <javassist.compiler.MemberResolver: javassist.CtClass getSuperInterface(javassist.CtClass,java.lang.String)>($r13, r5);

        goto label12;

     label05:
        virtualinvoke r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label06:
        goto label09;

     label07:
        $r21 := @caughtexception;

        $r22 = virtualinvoke $r21.<javassist.compiler.NoFieldException: javassist.compiler.ast.ASTree getExpr()>();

        if $r22 == r4 goto label08;

        throw $r21;

     label08:
        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        $r23 = virtualinvoke $r21.<javassist.compiler.NoFieldException: java.lang.String getField()>();

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r23;

        virtualinvoke r29.<javassist.compiler.ast.Expr: void setOperator(int)>(35);

        $r24 = new javassist.compiler.ast.Symbol;

        $r25 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        $r26 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String jvmToJavaName(java.lang.String)>($r25);

        specialinvoke $r24.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r26);

        virtualinvoke r29.<javassist.compiler.ast.Expr: void setOprand1(javassist.compiler.ast.ASTree)>($r24);

     label09:
        $i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if $i1 <= 0 goto label10;

        $r12 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        r28 = virtualinvoke $r12.<javassist.compiler.MemberResolver: javassist.CtClass lookupClass(java.lang.String,boolean)>("java.lang.Object", 1);

        goto label12;

     label10:
        $i2 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if $i2 != 307 goto label11;

        $r11 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r10 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        r28 = virtualinvoke $r11.<javassist.compiler.MemberResolver: javassist.CtClass lookupClassByJvmName(java.lang.String)>($r10);

        goto label12;

     label11:
        staticinvoke <javassist.compiler.TypeChecker: void badMethod()>();

     label12:
        goto label14;

     label13:
        staticinvoke <javassist.compiler.TypeChecker: void badMethod()>();

     label14:
        goto label16;

     label15:
        staticinvoke <javassist.compiler.TypeChecker: void fatal()>();

     label16:
        r30 = virtualinvoke r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver$Method atMethodCallCore(javassist.CtClass,java.lang.String,javassist.compiler.ast.ASTList)>(r28, r27, r3);

        virtualinvoke r1.<javassist.compiler.ast.CallExpr: void setMethod(javassist.compiler.MemberResolver$Method)>(r30);

        return;

        catch javassist.compiler.NoFieldException from label05 to label06 with label07;
    }

    private static void badMethod() throws javassist.compiler.CompileError
    {
        javassist.compiler.CompileError $r0;

        $r0 = new javassist.compiler.CompileError;

        specialinvoke $r0.<javassist.compiler.CompileError: void <init>(java.lang.String)>("bad method");

        throw $r0;
    }

    static java.lang.String isDotSuper(javassist.compiler.ast.ASTree)
    {
        javassist.compiler.ast.ASTree r0, r2, $r4;
        javassist.compiler.ast.Expr r1;
        boolean $z0, $z1;
        int $i0, $i1;
        javassist.compiler.ast.Keyword $r3;
        javassist.compiler.ast.Symbol $r5;
        java.lang.String $r6;

        r0 := @parameter0: javassist.compiler.ast.ASTree;

        $z0 = r0 instanceof javassist.compiler.ast.Expr;

        if $z0 == 0 goto label1;

        r1 = (javassist.compiler.ast.Expr) r0;

        $i0 = virtualinvoke r1.<javassist.compiler.ast.Expr: int getOperator()>();

        if $i0 != 46 goto label1;

        r2 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $z1 = r2 instanceof javassist.compiler.ast.Keyword;

        if $z1 == 0 goto label1;

        $r3 = (javassist.compiler.ast.Keyword) r2;

        $i1 = virtualinvoke $r3.<javassist.compiler.ast.Keyword: int get()>();

        if $i1 != 336 goto label1;

        $r4 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $r5 = (javassist.compiler.ast.Symbol) $r4;

        $r6 = virtualinvoke $r5.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        return $r6;

     label1:
        return null;
    }

    public javassist.compiler.MemberResolver$Method atMethodCallCore(javassist.CtClass, java.lang.String, javassist.compiler.ast.ASTList) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.CtClass r1, $r10;
        java.lang.String r2, r8, r23, r24, r25;
        javassist.compiler.ast.ASTList r3;
        int i0;
        int[] r4, r5;
        java.lang.String[] r6;
        javassist.compiler.MemberResolver$Method r7;
        javassist.bytecode.MethodInfo $r9, $r12;
        javassist.compiler.MemberResolver $r11;
        boolean $z0;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22;
        javassist.compiler.CompileError $r18;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.CtClass;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javassist.compiler.ast.ASTList;

        i0 = virtualinvoke r0.<javassist.compiler.TypeChecker: int getMethodArgsLength(javassist.compiler.ast.ASTList)>(r3);

        r4 = newarray (int)[i0];

        r5 = newarray (int)[i0];

        r6 = newarray (java.lang.String)[i0];

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atMethodArgs(javassist.compiler.ast.ASTList,int[],int[],java.lang.String[])>(r3, r4, r5, r6);

        $r11 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r10 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        $r9 = r0.<javassist.compiler.TypeChecker: javassist.bytecode.MethodInfo thisMethod>;

        r7 = virtualinvoke $r11.<javassist.compiler.MemberResolver: javassist.compiler.MemberResolver$Method lookupMethod(javassist.CtClass,javassist.CtClass,javassist.bytecode.MethodInfo,java.lang.String,int[],int[],java.lang.String[])>(r1, $r10, $r9, r2, r4, r5, r6);

        if r7 != null goto label3;

        r23 = virtualinvoke r1.<javassist.CtClass: java.lang.String getName()>();

        r8 = staticinvoke <javassist.compiler.TypeChecker: java.lang.String argTypesToString(int[],int[],java.lang.String[])>(r4, r5, r6);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("<init>");

        if $z0 == 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot find constructor ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found in ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        r24 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r18 = new javassist.compiler.CompileError;

        specialinvoke $r18.<javassist.compiler.CompileError: void <init>(java.lang.String)>(r24);

        throw $r18;

     label3:
        $r12 = r7.<javassist.compiler.MemberResolver$Method: javassist.bytecode.MethodInfo info>;

        r25 = virtualinvoke $r12.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        virtualinvoke r0.<javassist.compiler.TypeChecker: void setReturnType(java.lang.String)>(r25);

        return r7;
    }

    public int getMethodArgsLength(javassist.compiler.ast.ASTList)
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTList r1;
        int $i0;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTList;

        $i0 = staticinvoke <javassist.compiler.ast.ASTList: int length(javassist.compiler.ast.ASTList)>(r1);

        return $i0;
    }

    public void atMethodArgs(javassist.compiler.ast.ASTList, int[], int[], java.lang.String[]) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        int[] r1, r2;
        java.lang.String[] r3;
        javassist.compiler.ast.ASTree r4;
        int $i0, $i1, i2;
        java.lang.String $r5;
        javassist.compiler.ast.ASTList r6;

        r0 := @this: javassist.compiler.TypeChecker;

        r6 := @parameter0: javassist.compiler.ast.ASTList;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String[];

        i2 = 0;

     label1:
        if r6 == null goto label2;

        r4 = virtualinvoke r6.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTree head()>();

        virtualinvoke r4.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i0 = r0.<javassist.compiler.TypeChecker: int exprType>;

        r1[i2] = $i0;

        $i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        r2[i2] = $i1;

        $r5 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        r3[i2] = $r5;

        i2 = i2 + 1;

        r6 = virtualinvoke r6.<javassist.compiler.ast.ASTList: javassist.compiler.ast.ASTList tail()>();

        goto label1;

     label2:
        return;
    }

    void setReturnType(java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        java.lang.String r1, $r2;
        int i0, $i1, $i2, $i3, i4, i5, i7;
        char c6;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: java.lang.String;

        i4 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(41);

        if i4 >= 0 goto label1;

        staticinvoke <javassist.compiler.TypeChecker: void badMethod()>();

     label1:
        i5 = i4 + 1;

        c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        i7 = 0;

     label2:
        if c6 != 91 goto label3;

        i7 = i7 + 1;

        i5 = i5 + 1;

        c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        goto label2;

     label3:
        r0.<javassist.compiler.TypeChecker: int arrayDim> = i7;

        if c6 != 76 goto label5;

        $i2 = i5 + 1;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(59, $i2);

        if i0 >= 0 goto label4;

        staticinvoke <javassist.compiler.TypeChecker: void badMethod()>();

     label4:
        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        $i3 = i5 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i3, i0);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r2;

        goto label6;

     label5:
        $i1 = staticinvoke <javassist.compiler.MemberResolver: int descToType(char)>(c6);

        r0.<javassist.compiler.TypeChecker: int exprType> = $i1;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = null;

     label6:
        return;
    }

    private void atFieldRead(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTree r1;
        javassist.CtField $r2;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        $r2 = virtualinvoke r0.<javassist.compiler.TypeChecker: javassist.CtField fieldAccess(javassist.compiler.ast.ASTree)>(r1);

        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.CtField)>($r2);

        return;
    }

    private void atFieldRead(javassist.CtField) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.CtField r1;
        javassist.bytecode.FieldInfo r2;
        java.lang.String r3, $r4;
        int $i0, $i1, $i2, $i3, i4, i5;
        char c6;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.CtField;

        r2 = virtualinvoke r1.<javassist.CtField: javassist.bytecode.FieldInfo getFieldInfo2()>();

        r3 = virtualinvoke r2.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        i4 = 0;

        i5 = 0;

        c6 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

     label1:
        if c6 != 91 goto label2;

        i5 = i5 + 1;

        i4 = i4 + 1;

        c6 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i4);

        goto label1;

     label2:
        r0.<javassist.compiler.TypeChecker: int arrayDim> = i5;

        $i0 = staticinvoke <javassist.compiler.MemberResolver: int descToType(char)>(c6);

        r0.<javassist.compiler.TypeChecker: int exprType> = $i0;

        if c6 != 76 goto label3;

        $i2 = i4 + 1;

        $i1 = i4 + 1;

        $i3 = virtualinvoke r3.<java.lang.String: int indexOf(int,int)>(59, $i1);

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r4;

        goto label4;

     label3:
        r0.<javassist.compiler.TypeChecker: java.lang.String className> = null;

     label4:
        return;
    }

    protected javassist.CtField fieldAccess(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTree r1, $r2, $r8, $r11, $r13, $r20, $r21, r36;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, i3;
        javassist.compiler.ast.Symbol $r3, $r9, $r14;
        java.lang.String $r4, $r7, $r15, $r22, r27;
        javassist.CtField $r5, $r10, $r23, r28, r32;
        javassist.compiler.MemberResolver $r6, $r12;
        javassist.CtClass $r16;
        javassist.compiler.CompileError $r18, r34, $r37;
        javassist.compiler.NoFieldException $r19, $r25;
        javassist.NotFoundException $r24;
        javassist.compiler.ast.Member r26, r31;
        javassist.compiler.ast.Expr r30;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        $z0 = r1 instanceof javassist.compiler.ast.Member;

        if $z0 == 0 goto label04;

        r26 = (javassist.compiler.ast.Member) r1;

        r27 = virtualinvoke r26.<javassist.compiler.ast.Member: java.lang.String get()>();

     label01:
        $r16 = r0.<javassist.compiler.TypeChecker: javassist.CtClass thisClass>;

        r28 = virtualinvoke $r16.<javassist.CtClass: javassist.CtField getField(java.lang.String)>(r27);

        $i2 = virtualinvoke r28.<javassist.CtField: int getModifiers()>();

        $z3 = staticinvoke <javassist.Modifier: boolean isStatic(int)>($i2);

        if $z3 == 0 goto label02;

        virtualinvoke r26.<javassist.compiler.ast.Member: void setField(javassist.CtField)>(r28);

     label02:
        return r28;

     label03:
        $r24 := @caughtexception;

        $r25 = new javassist.compiler.NoFieldException;

        specialinvoke $r25.<javassist.compiler.NoFieldException: void <init>(java.lang.String,javassist.compiler.ast.ASTree)>(r27, r1);

        throw $r25;

     label04:
        $z1 = r1 instanceof javassist.compiler.ast.Expr;

        if $z1 == 0 goto label17;

        r30 = (javassist.compiler.ast.Expr) r1;

        i3 = virtualinvoke r30.<javassist.compiler.ast.Expr: int getOperator()>();

        if i3 != 35 goto label05;

        $r11 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        r31 = (javassist.compiler.ast.Member) $r11;

        $r12 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r13 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $r14 = (javassist.compiler.ast.Symbol) $r13;

        $r15 = virtualinvoke $r14.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        r32 = virtualinvoke $r12.<javassist.compiler.MemberResolver: javassist.CtField lookupField(java.lang.String,javassist.compiler.ast.Symbol)>($r15, r31);

        virtualinvoke r31.<javassist.compiler.ast.Member: void setField(javassist.CtField)>(r32);

        return r32;

     label05:
        if i3 != 46 goto label17;

     label06:
        $r2 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        virtualinvoke $r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

     label07:
        goto label10;

     label08:
        $r19 := @caughtexception;

        $r20 = virtualinvoke $r19.<javassist.compiler.NoFieldException: javassist.compiler.ast.ASTree getExpr()>();

        $r21 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        if $r20 == $r21 goto label09;

        throw $r19;

     label09:
        $r22 = virtualinvoke $r19.<javassist.compiler.NoFieldException: java.lang.String getField()>();

        $r23 = specialinvoke r0.<javassist.compiler.TypeChecker: javassist.CtField fieldAccess2(javassist.compiler.ast.Expr,java.lang.String)>(r30, $r22);

        return $r23;

     label10:
        r34 = null;

     label11:
        $i0 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if $i0 != 307 goto label13;

        $i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if $i1 != 0 goto label13;

        $r6 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        $r7 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        $r8 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        $r9 = (javassist.compiler.ast.Symbol) $r8;

        $r10 = virtualinvoke $r6.<javassist.compiler.MemberResolver: javassist.CtField lookupFieldByJvmName(java.lang.String,javassist.compiler.ast.Symbol)>($r7, $r9);

     label12:
        return $r10;

     label13:
        goto label15;

     label14:
        $r18 := @caughtexception;

        r34 = $r18;

     label15:
        r36 = virtualinvoke r30.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $z2 = r36 instanceof javassist.compiler.ast.Symbol;

        if $z2 == 0 goto label16;

        $r3 = (javassist.compiler.ast.Symbol) r36;

        $r4 = virtualinvoke $r3.<javassist.compiler.ast.Symbol: java.lang.String get()>();

        $r5 = specialinvoke r0.<javassist.compiler.TypeChecker: javassist.CtField fieldAccess2(javassist.compiler.ast.Expr,java.lang.String)>(r30, $r4);

        return $r5;

     label16:
        if r34 == null goto label17;

        throw r34;

     label17:
        $r37 = new javassist.compiler.CompileError;

        specialinvoke $r37.<javassist.compiler.CompileError: void <init>(java.lang.String)>("bad filed access");

        throw $r37;

        catch javassist.NotFoundException from label01 to label02 with label03;
        catch javassist.compiler.NoFieldException from label06 to label07 with label08;
        catch javassist.compiler.CompileError from label11 to label12 with label14;
    }

    private javassist.CtField fieldAccess2(javassist.compiler.ast.Expr, java.lang.String) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        java.lang.String r2, $r8;
        javassist.compiler.ast.Member r3;
        javassist.CtField r4;
        javassist.compiler.ast.ASTree $r5;
        javassist.compiler.MemberResolver $r6;
        javassist.compiler.ast.Symbol $r7;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        r3 = (javassist.compiler.ast.Member) $r5;

        $r6 = r0.<javassist.compiler.TypeChecker: javassist.compiler.MemberResolver resolver>;

        r4 = virtualinvoke $r6.<javassist.compiler.MemberResolver: javassist.CtField lookupFieldByJvmName2(java.lang.String,javassist.compiler.ast.Symbol,javassist.compiler.ast.ASTree)>(r2, r3, r1);

        virtualinvoke r1.<javassist.compiler.ast.Expr: void setOperator(int)>(35);

        $r7 = new javassist.compiler.ast.Symbol;

        $r8 = staticinvoke <javassist.compiler.MemberResolver: java.lang.String jvmToJavaName(java.lang.String)>(r2);

        specialinvoke $r7.<javassist.compiler.ast.Symbol: void <init>(java.lang.String)>($r8);

        virtualinvoke r1.<javassist.compiler.ast.Expr: void setOprand1(javassist.compiler.ast.ASTree)>($r7);

        virtualinvoke r3.<javassist.compiler.ast.Member: void setField(javassist.CtField)>(r4);

        return r4;
    }

    public void atClassObject(javassist.compiler.ast.Expr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = "java/lang/Class";

        return;
    }

    public void atArrayLength(javassist.compiler.ast.Expr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Expr r1;
        javassist.compiler.ast.ASTree $r2;
        int $i0;
        javassist.compiler.NoFieldException $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Expr;

        $r2 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        virtualinvoke $r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        $i0 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        if $i0 != 0 goto label1;

        $r3 = new javassist.compiler.NoFieldException;

        specialinvoke $r3.<javassist.compiler.NoFieldException: void <init>(java.lang.String,javassist.compiler.ast.ASTree)>("length", r1);

        throw $r3;

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = 324;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        return;
    }

    public void atArrayRead(javassist.compiler.ast.ASTree, javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTree r1, r2;
        int i0, i1, $i2;
        java.lang.String r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        r2 := @parameter1: javassist.compiler.ast.ASTree;

        virtualinvoke r1.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        i0 = r0.<javassist.compiler.TypeChecker: int exprType>;

        i1 = r0.<javassist.compiler.TypeChecker: int arrayDim>;

        r3 = r0.<javassist.compiler.TypeChecker: java.lang.String className>;

        virtualinvoke r2.<javassist.compiler.ast.ASTree: void accept(javassist.compiler.ast.Visitor)>(r0);

        r0.<javassist.compiler.TypeChecker: int exprType> = i0;

        $i2 = i1 - 1;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = $i2;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = r3;

        return;
    }

    private void atPlusPlus(int, javassist.compiler.ast.ASTree, javassist.compiler.ast.Expr) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        int i0, i1, $i2, $i3, $i4;
        javassist.compiler.ast.Expr r1, r7;
        boolean $z1, $z2, $z3;
        javassist.compiler.ast.ASTree $r2, $r3, r5;
        javassist.compiler.ast.Variable $r4;
        javassist.compiler.ast.Declarator r6;

        r0 := @this: javassist.compiler.TypeChecker;

        i0 := @parameter0: int;

        r5 := @parameter1: javassist.compiler.ast.ASTree;

        r1 := @parameter2: javassist.compiler.ast.Expr;

        if r5 != null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        r5 = virtualinvoke r1.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

     label3:
        $z1 = r5 instanceof javassist.compiler.ast.Variable;

        if $z1 == 0 goto label4;

        $r4 = (javassist.compiler.ast.Variable) r5;

        r6 = virtualinvoke $r4.<javassist.compiler.ast.Variable: javassist.compiler.ast.Declarator getDeclarator()>();

        $i3 = virtualinvoke r6.<javassist.compiler.ast.Declarator: int getType()>();

        r0.<javassist.compiler.TypeChecker: int exprType> = $i3;

        $i4 = virtualinvoke r6.<javassist.compiler.ast.Declarator: int getArrayDim()>();

        r0.<javassist.compiler.TypeChecker: int arrayDim> = $i4;

        goto label8;

     label4:
        $z2 = r5 instanceof javassist.compiler.ast.Expr;

        if $z2 == 0 goto label7;

        r7 = (javassist.compiler.ast.Expr) r5;

        $i2 = virtualinvoke r7.<javassist.compiler.ast.Expr: int getOperator()>();

        if $i2 != 65 goto label7;

        $r2 = virtualinvoke r7.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand1()>();

        $r3 = virtualinvoke r7.<javassist.compiler.ast.Expr: javassist.compiler.ast.ASTree oprand2()>();

        virtualinvoke r0.<javassist.compiler.TypeChecker: void atArrayRead(javassist.compiler.ast.ASTree,javassist.compiler.ast.ASTree)>($r2, $r3);

        i1 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if i1 == 324 goto label5;

        if i1 == 303 goto label5;

        if i1 == 306 goto label5;

        if i1 != 334 goto label6;

     label5:
        r0.<javassist.compiler.TypeChecker: int exprType> = 324;

     label6:
        return;

     label7:
        virtualinvoke r0.<javassist.compiler.TypeChecker: void atFieldPlusPlus(javassist.compiler.ast.ASTree)>(r5);

     label8:
        return;
    }

    protected void atFieldPlusPlus(javassist.compiler.ast.ASTree) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.ASTree r1;
        javassist.CtField r2;
        int i0;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.ASTree;

        r2 = virtualinvoke r0.<javassist.compiler.TypeChecker: javassist.CtField fieldAccess(javassist.compiler.ast.ASTree)>(r1);

        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.CtField)>(r2);

        i0 = r0.<javassist.compiler.TypeChecker: int exprType>;

        if i0 == 324 goto label1;

        if i0 == 303 goto label1;

        if i0 == 306 goto label1;

        if i0 != 334 goto label2;

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = 324;

     label2:
        return;
    }

    public void atMember(javassist.compiler.ast.Member) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Member r1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Member;

        specialinvoke r0.<javassist.compiler.TypeChecker: void atFieldRead(javassist.compiler.ast.ASTree)>(r1);

        return;
    }

    public void atVariable(javassist.compiler.ast.Variable) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Variable r1;
        javassist.compiler.ast.Declarator r2;
        int $i0, $i1;
        java.lang.String $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Variable;

        r2 = virtualinvoke r1.<javassist.compiler.ast.Variable: javassist.compiler.ast.Declarator getDeclarator()>();

        $i0 = virtualinvoke r2.<javassist.compiler.ast.Declarator: int getType()>();

        r0.<javassist.compiler.TypeChecker: int exprType> = $i0;

        $i1 = virtualinvoke r2.<javassist.compiler.ast.Declarator: int getArrayDim()>();

        r0.<javassist.compiler.TypeChecker: int arrayDim> = $i1;

        $r3 = virtualinvoke r2.<javassist.compiler.ast.Declarator: java.lang.String getClassName()>();

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r3;

        return;
    }

    public void atKeyword(javassist.compiler.ast.Keyword) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.Keyword r1;
        int i0;
        java.lang.String $r2, $r3;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.Keyword;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        i0 = virtualinvoke r1.<javassist.compiler.ast.Keyword: int get()>();

        lookupswitch(i0)
        {
            case 336: goto label3;
            case 339: goto label3;
            case 410: goto label1;
            case 411: goto label1;
            case 412: goto label2;
            default: goto label5;
        };

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = 301;

        goto label6;

     label2:
        r0.<javassist.compiler.TypeChecker: int exprType> = 412;

        goto label6;

     label3:
        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        if i0 != 339 goto label4;

        $r3 = virtualinvoke r0.<javassist.compiler.TypeChecker: java.lang.String getThisName()>();

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r3;

        goto label6;

     label4:
        $r2 = virtualinvoke r0.<javassist.compiler.TypeChecker: java.lang.String getSuperName()>();

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = $r2;

        goto label6;

     label5:
        staticinvoke <javassist.compiler.TypeChecker: void fatal()>();

     label6:
        return;
    }

    public void atStringL(javassist.compiler.ast.StringL) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.StringL r1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.StringL;

        r0.<javassist.compiler.TypeChecker: int exprType> = 307;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        r0.<javassist.compiler.TypeChecker: java.lang.String className> = "java/lang/String";

        return;
    }

    public void atIntConst(javassist.compiler.ast.IntConst) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.IntConst r1;
        int i0;
        short $s1;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.IntConst;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        i0 = virtualinvoke r1.<javassist.compiler.ast.IntConst: int getType()>();

        if i0 == 402 goto label1;

        if i0 != 401 goto label4;

     label1:
        if i0 != 402 goto label2;

        $s1 = 324;

        goto label3;

     label2:
        $s1 = 306;

     label3:
        r0.<javassist.compiler.TypeChecker: int exprType> = $s1;

        goto label5;

     label4:
        r0.<javassist.compiler.TypeChecker: int exprType> = 326;

     label5:
        return;
    }

    public void atDoubleConst(javassist.compiler.ast.DoubleConst) throws javassist.compiler.CompileError
    {
        javassist.compiler.TypeChecker r0;
        javassist.compiler.ast.DoubleConst r1;
        int $i0;

        r0 := @this: javassist.compiler.TypeChecker;

        r1 := @parameter0: javassist.compiler.ast.DoubleConst;

        r0.<javassist.compiler.TypeChecker: int arrayDim> = 0;

        $i0 = virtualinvoke r1.<javassist.compiler.ast.DoubleConst: int getType()>();

        if $i0 != 405 goto label1;

        r0.<javassist.compiler.TypeChecker: int exprType> = 312;

        goto label2;

     label1:
        r0.<javassist.compiler.TypeChecker: int exprType> = 317;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <javassist.compiler.TypeChecker: java.lang.String jvmJavaLangClass> = "java/lang/Class";

        <javassist.compiler.TypeChecker: java.lang.String jvmJavaLangString> = "java/lang/String";

        <javassist.compiler.TypeChecker: java.lang.String jvmJavaLangObject> = "java/lang/Object";

        <javassist.compiler.TypeChecker: java.lang.String javaLangObject> = "java.lang.Object";

        return;
    }
}
