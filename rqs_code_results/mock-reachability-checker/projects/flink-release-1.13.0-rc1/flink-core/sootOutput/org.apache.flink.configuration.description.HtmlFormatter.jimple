public class org.apache.flink.configuration.description.HtmlFormatter extends org.apache.flink.configuration.description.Formatter
{

    public void <init>()
    {
        org.apache.flink.configuration.description.HtmlFormatter r0;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke r0.<org.apache.flink.configuration.description.Formatter: void <init>()>();

        return;
    }

    protected void formatLink(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        org.apache.flink.configuration.description.HtmlFormatter r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r2;

        $r4[1] = r3;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<a href=\"%s\">%s</a>", $r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        return;
    }

    protected void formatLineBreak(java.lang.StringBuilder)
    {
        org.apache.flink.configuration.description.HtmlFormatter r0;
        java.lang.StringBuilder r1;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<br />");

        return;
    }

    protected void formatText(java.lang.StringBuilder, java.lang.String, java.lang.String[], java.util.EnumSet)
    {
        org.apache.flink.configuration.description.HtmlFormatter r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, r5, $r8, r11, r12;
        java.lang.String[] r3;
        java.util.EnumSet r4;
        org.apache.flink.configuration.description.TextElement$TextStyle $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: java.util.EnumSet;

        r5 = staticinvoke <org.apache.flink.configuration.description.HtmlFormatter: java.lang.String escapeCharacters(java.lang.String)>(r2);

        r11 = "";

        r12 = "";

        $r6 = <org.apache.flink.configuration.description.TextElement$TextStyle: org.apache.flink.configuration.description.TextElement$TextStyle CODE>;

        $z0 = virtualinvoke r4.<java.util.EnumSet: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        r11 = "<code class=\"highlighter-rouge\">";

        r12 = "</code>";

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r5, r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        return;
    }

    protected void formatList(java.lang.StringBuilder, java.lang.String[])
    {
        org.apache.flink.configuration.description.HtmlFormatter r0;
        java.lang.StringBuilder r1;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String r4, $r8;
        java.lang.Object[] $r7;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String[];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<ul>");

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r2[i1];

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r4;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<li>%s</li>", $r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</ul>");

        return;
    }

    protected org.apache.flink.configuration.description.Formatter newInstance()
    {
        org.apache.flink.configuration.description.HtmlFormatter r0, $r1;

        r0 := @this: org.apache.flink.configuration.description.HtmlFormatter;

        $r1 = new org.apache.flink.configuration.description.HtmlFormatter;

        specialinvoke $r1.<org.apache.flink.configuration.description.HtmlFormatter: void <init>()>();

        return $r1;
    }

    private static java.lang.String escapeCharacters(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        return $r3;
    }
}
