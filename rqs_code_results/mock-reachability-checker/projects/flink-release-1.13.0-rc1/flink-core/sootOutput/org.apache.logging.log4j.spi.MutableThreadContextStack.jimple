public class org.apache.logging.log4j.spi.MutableThreadContextStack extends java.lang.Object implements org.apache.logging.log4j.spi.ThreadContextStack, org.apache.logging.log4j.util.StringBuilderFormattable
{
    private static final long serialVersionUID;
    private final java.util.List list;
    private boolean frozen;

    public void <init>()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void <init>(java.util.List)>($r1);

        return;
    }

    public void <init>(java.util.List)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list> = $r2;

        return;
    }

    private void <init>(org.apache.logging.log4j.spi.MutableThreadContextStack)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0, r1;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: org.apache.logging.log4j.spi.MutableThreadContextStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        $r3 = r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list> = $r2;

        return;
    }

    private void checkInvariants()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $z0 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean frozen>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("context stack has been frozen");

        throw $r1;

     label1:
        return;
    }

    public java.lang.String pop()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        int i0, $i1;
        java.lang.String r1;
        java.util.List $r2, $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i0 = $i1 - 1;

        $r4 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(i0);

        r1 = (java.lang.String) $r5;

        return r1;
    }

    public java.lang.String peek()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        int i0, $i1;
        java.util.List $r1, $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i0 = $i1 - 1;

        $r3 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.String) $r4;

        return $r5;
    }

    public void push(java.lang.String)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public int getDepth()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List asList()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        return $r1;
    }

    public void trim(int)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        int i0, i1, $i2, $i3, i4;
        java.util.List $r2, $r4, $r5, $r6, $r7, $r8;
        java.util.ArrayList $r3;
        java.lang.Object $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        if i0 >= 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum stack depth cannot be negative");

        throw $r10;

     label1:
        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i2);

        $r5 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $r8 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r7 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public org.apache.logging.log4j.spi.ThreadContextStack copy()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0, $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = new org.apache.logging.log4j.spi.MutableThreadContextStack;

        specialinvoke $r1.<org.apache.logging.log4j.spi.MutableThreadContextStack: void <init>(org.apache.logging.log4j.spi.MutableThreadContextStack)>(r0);

        return $r1;
    }

    public void clear()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public int size()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.Object r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.lang.Object[] toArray()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public boolean add(java.lang.String)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.Object r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.Collection r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: void checkInvariants()>();

        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r2;
    }

    public void formatTo(java.lang.StringBuilder)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.StringBuilder r1, $r9;
        java.util.List $r3, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        java.lang.String $r7;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.StringBuilder;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r5 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.String) $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    public int hashCode()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.util.List $r1, $r2;
        int $i1, $i3, i4;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $i1 = 31 * 1;

        $r1 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $i3 = interfaceinvoke $r2.<java.util.List: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.Object r1;
        org.apache.logging.log4j.spi.ThreadContextStack r2;
        java.util.List r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $z0 = r1 instanceof org.apache.logging.log4j.spi.ThreadContextStack;

        if $z0 != 0 goto label3;

        return 0;

     label3:
        r2 = (org.apache.logging.log4j.spi.ThreadContextStack) r1;

        r3 = interfaceinvoke r2.<org.apache.logging.log4j.spi.ThreadContextStack: java.util.List asList()>();

        $r4 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        if $r4 != null goto label4;

        if r3 == null goto label5;

        return 0;

     label4:
        $r5 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: java.util.List list>;

        $z1 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public org.apache.logging.log4j.ThreadContext$ContextStack getImmutableStackOrNull()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        org.apache.logging.log4j.spi.ThreadContextStack $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        return $r1;
    }

    public void freeze()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean frozen> = 1;

        return;
    }

    public boolean isFrozen()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $z0 = r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean frozen>;

        return $z0;
    }

    public volatile org.apache.logging.log4j.ThreadContext$ContextStack copy()
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        org.apache.logging.log4j.spi.ThreadContextStack $r1;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        $r1 = virtualinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: org.apache.logging.log4j.spi.ThreadContextStack copy()>();

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        org.apache.logging.log4j.spi.MutableThreadContextStack r0;
        java.lang.Object r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.logging.log4j.spi.MutableThreadContextStack;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        $z0 = virtualinvoke r0.<org.apache.logging.log4j.spi.MutableThreadContextStack: boolean add(java.lang.String)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.logging.log4j.spi.MutableThreadContextStack: long serialVersionUID> = 50505011L;

        return;
    }
}
