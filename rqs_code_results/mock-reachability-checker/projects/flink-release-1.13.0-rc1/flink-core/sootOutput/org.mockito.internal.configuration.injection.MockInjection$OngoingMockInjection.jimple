public class org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection extends java.lang.Object
{
    private final java.util.Set fields;
    private final java.util.Set mocks;
    private final java.lang.Object fieldOwner;
    private final org.mockito.internal.configuration.injection.MockInjectionStrategy injectionStrategies;
    private final org.mockito.internal.configuration.injection.MockInjectionStrategy postInjectionStrategies;

    private void <init>(java.lang.reflect.Field, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2;
        java.util.Set $r3;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r1);

        specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: void <init>(java.util.Set,java.lang.Object)>($r3, r2);

        return;
    }

    private void <init>(java.util.Set, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.util.Set r1, $r5, $r9;
        java.lang.Object r2, $r8;
        java.util.HashSet $r3;
        java.lang.Object[] $r4;
        org.mockito.internal.configuration.injection.MockInjectionStrategy $r6, $r7;
        java.lang.Iterable $r10;
        java.util.Collection $r11;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set fields> = $r3;

        $r4 = newarray (java.lang.Object)[0];

        $r5 = staticinvoke <org.mockito.internal.util.collections.Sets: java.util.Set newMockSafeHashSet(java.lang.Object[])>($r4);

        r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set mocks> = $r5;

        $r6 = staticinvoke <org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy 'nop'()>();

        r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy injectionStrategies> = $r6;

        $r7 = staticinvoke <org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy 'nop'()>();

        r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy postInjectionStrategies> = $r7;

        $r8 = staticinvoke <org.mockito.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "fieldOwner");

        r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.lang.Object fieldOwner> = $r8;

        $r9 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set fields>;

        $r10 = staticinvoke <org.mockito.internal.util.Checks: java.lang.Iterable checkItemsNotNull(java.lang.Iterable,java.lang.String)>(r1, "fields");

        $r11 = (java.util.Collection) $r10;

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

        return;
    }

    public org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection withMocks(java.util.Set)
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.util.Set r1, $r2;
        java.lang.Object $r3;
        java.util.Collection $r4;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        r1 := @parameter0: java.util.Set;

        $r2 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set mocks>;

        $r3 = staticinvoke <org.mockito.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "mocks");

        $r4 = (java.util.Collection) $r3;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        return r0;
    }

    public org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection tryConstructorInjection()
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        org.mockito.internal.configuration.injection.ConstructorInjection $r1;
        org.mockito.internal.configuration.injection.MockInjectionStrategy $r2;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        $r2 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy injectionStrategies>;

        $r1 = new org.mockito.internal.configuration.injection.ConstructorInjection;

        specialinvoke $r1.<org.mockito.internal.configuration.injection.ConstructorInjection: void <init>()>();

        virtualinvoke $r2.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy)>($r1);

        return r0;
    }

    public org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection tryPropertyOrFieldInjection()
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        org.mockito.internal.configuration.injection.PropertyAndSetterInjection $r1;
        org.mockito.internal.configuration.injection.MockInjectionStrategy $r2;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        $r2 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy injectionStrategies>;

        $r1 = new org.mockito.internal.configuration.injection.PropertyAndSetterInjection;

        specialinvoke $r1.<org.mockito.internal.configuration.injection.PropertyAndSetterInjection: void <init>()>();

        virtualinvoke $r2.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy)>($r1);

        return r0;
    }

    public org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection handleSpyAnnotation()
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler $r1;
        org.mockito.internal.configuration.injection.MockInjectionStrategy $r2;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        $r2 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy postInjectionStrategies>;

        $r1 = new org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler;

        specialinvoke $r1.<org.mockito.internal.configuration.injection.SpyOnInjectedFieldsHandler: void <init>()>();

        virtualinvoke $r2.<org.mockito.internal.configuration.injection.MockInjectionStrategy: org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy)>($r1);

        return r0;
    }

    public void apply()
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.util.Iterator r1;
        java.lang.reflect.Field r2;
        java.util.Set $r3, $r5, $r8;
        boolean $z0;
        java.lang.Object $r4, $r6, $r9;
        org.mockito.internal.configuration.injection.MockInjectionStrategy $r7, $r10;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        $r3 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set fields>;

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.reflect.Field) $r4;

        $r7 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy injectionStrategies>;

        $r6 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.lang.Object fieldOwner>;

        $r5 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set mocks>;

        virtualinvoke $r7.<org.mockito.internal.configuration.injection.MockInjectionStrategy: boolean process(java.lang.reflect.Field,java.lang.Object,java.util.Set)>(r2, $r6, $r5);

        $r10 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: org.mockito.internal.configuration.injection.MockInjectionStrategy postInjectionStrategies>;

        $r9 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.lang.Object fieldOwner>;

        $r8 = r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: java.util.Set mocks>;

        virtualinvoke $r10.<org.mockito.internal.configuration.injection.MockInjectionStrategy: boolean process(java.lang.reflect.Field,java.lang.Object,java.util.Set)>(r2, $r9, $r8);

        goto label1;

     label2:
        return;
    }

    void <init>(java.lang.reflect.Field, java.lang.Object, org.mockito.internal.configuration.injection.MockInjection$1)
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.lang.reflect.Field r1;
        java.lang.Object r2;
        org.mockito.internal.configuration.injection.MockInjection$1 r3;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.mockito.internal.configuration.injection.MockInjection$1;

        specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: void <init>(java.lang.reflect.Field,java.lang.Object)>(r1, r2);

        return;
    }

    void <init>(java.util.Set, java.lang.Object, org.mockito.internal.configuration.injection.MockInjection$1)
    {
        org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection r0;
        java.util.Set r1;
        java.lang.Object r2;
        org.mockito.internal.configuration.injection.MockInjection$1 r3;

        r0 := @this: org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.mockito.internal.configuration.injection.MockInjection$1;

        specialinvoke r0.<org.mockito.internal.configuration.injection.MockInjection$OngoingMockInjection: void <init>(java.util.Set,java.lang.Object)>(r1, r2);

        return;
    }
}
