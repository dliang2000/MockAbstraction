public class javassist.bytecode.StackMapTable$Walker extends java.lang.Object
{
    byte[] info;
    int numOfEntries;

    public void <init>(javassist.bytecode.StackMapTable)
    {
        javassist.bytecode.StackMapTable$Walker r0;
        javassist.bytecode.StackMapTable r1;
        byte[] $r2;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        r1 := @parameter0: javassist.bytecode.StackMapTable;

        $r2 = virtualinvoke r1.<javassist.bytecode.StackMapTable: byte[] get()>();

        specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: void <init>(byte[])>($r2);

        return;
    }

    public void <init>(byte[])
    {
        javassist.bytecode.StackMapTable$Walker r0;
        byte[] r1;
        int $i0;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javassist.bytecode.StackMapTable$Walker: byte[] info> = r1;

        $i0 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>(r1, 0);

        r0.<javassist.bytecode.StackMapTable$Walker: int numOfEntries> = $i0;

        return;
    }

    public final int size()
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int $i0;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        $i0 = r0.<javassist.bytecode.StackMapTable$Walker: int numOfEntries>;

        return $i0;
    }

    public void parse() throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 = r0.<javassist.bytecode.StackMapTable$Walker: int numOfEntries>;

        i1 = 2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: int stackMapFrames(int,int)>(i1, i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    int stackMapFrames(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, $i3, $i4, $i5, i6, i7, i8, i9;
        short s1;
        byte[] $r1, $r2, $r3;
        byte $b2;
        javassist.bytecode.BadBytecode $r4;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $b2 = $r1[i6];

        s1 = $b2 & 255;

        if s1 >= 64 goto label1;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void sameFrame(int,int)>(i6, s1);

        i7 = i6 + 1;

        goto label8;

     label1:
        if s1 >= 128 goto label2;

        i7 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int sameLocals(int,int)>(i6, s1);

        goto label8;

     label2:
        if s1 >= 247 goto label3;

        $r4 = new javassist.bytecode.BadBytecode;

        specialinvoke $r4.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>("bad frame_type in StackMapTable");

        throw $r4;

     label3:
        if s1 != 247 goto label4;

        i7 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int sameLocals(int,int)>(i6, s1);

        goto label8;

     label4:
        if s1 >= 251 goto label5;

        $r3 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i4 = i6 + 1;

        i8 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r3, $i4);

        $i5 = 251 - s1;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void chopFrame(int,int,int)>(i6, i8, $i5);

        i7 = i6 + 3;

        goto label8;

     label5:
        if s1 != 251 goto label6;

        $r2 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i3 = i6 + 1;

        i9 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r2, $i3);

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void sameFrame(int,int)>(i6, i9);

        i7 = i6 + 3;

        goto label8;

     label6:
        if s1 >= 255 goto label7;

        i7 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int appendFrame(int,int)>(i6, s1);

        goto label8;

     label7:
        i7 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int fullFrame(int)>(i6);

     label8:
        return i7;
    }

    public void sameFrame(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    private int sameLocals(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, $i3, $i4, $i6, $i7, i8, i9, i10, $i11;
        short s2;
        byte[] $r1, $r2, $r3;
        byte $b5;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = i8;

        if i0 >= 128 goto label1;

        i9 = i0 - 64;

        goto label2;

     label1:
        $r1 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i3 = i8 + 1;

        i9 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r1, $i3);

        i8 = i8 + 2;

     label2:
        $r2 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i4 = i8 + 1;

        $b5 = $r2[$i4];

        s2 = $b5 & 255;

        i10 = 0;

        if s2 == 7 goto label3;

        if s2 != 8 goto label4;

     label3:
        $r3 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i6 = i8 + 2;

        i10 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r3, $i6);

        $i7 = i8 + 2;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void objectOrUninitialized(int,int,int)>(s2, i10, $i7);

        i8 = i8 + 2;

     label4:
        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void sameLocals(int,int,int,int)>(i1, i9, s2, i10);

        $i11 = i8 + 2;

        return $i11;
    }

    public void sameLocals(int, int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2, i3;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return;
    }

    public void chopFrame(int, int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    private int appendFrame(int, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2, i3, $i5, $i7, $i8, $i9, $i10, i11, i12;
        int[] r1, r2;
        short s4;
        byte[] $r3, $r4, $r5;
        byte $b6;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 - 251;

        $r3 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i5 = i0 + 1;

        i3 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r3, $i5);

        r1 = newarray (int)[i2];

        r2 = newarray (int)[i2];

        i11 = i0 + 3;

        i12 = 0;

     label1:
        if i12 >= i2 goto label5;

        $r4 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $b6 = $r4[i11];

        s4 = $b6 & 255;

        r1[i12] = s4;

        if s4 == 7 goto label2;

        if s4 != 8 goto label3;

     label2:
        $r5 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i7 = i11 + 1;

        $i8 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r5, $i7);

        r2[i12] = $i8;

        $i10 = r2[i12];

        $i9 = i11 + 1;

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void objectOrUninitialized(int,int,int)>(s4, $i10, $i9);

        i11 = i11 + 3;

        goto label4;

     label3:
        r2[i12] = 0;

        i11 = i11 + 1;

     label4:
        i12 = i12 + 1;

        goto label1;

     label5:
        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void appendFrame(int,int,int[],int[])>(i0, i3, r1, r2);

        return i11;
    }

    public void appendFrame(int, int, int[], int[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1;
        int[] r1, r2;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        return;
    }

    private int fullFrame(int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        int[] r1, r2, r3, r4;
        byte[] $r5, $r6, $r7;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        $r5 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i4 = i0 + 1;

        i1 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r5, $i4);

        $r6 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i5 = i0 + 3;

        i2 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r6, $i5);

        r1 = newarray (int)[i2];

        r2 = newarray (int)[i2];

        $i6 = i0 + 5;

        i8 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int verifyTypeInfo(int,int,int[],int[])>($i6, i2, r1, r2);

        $r7 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        i3 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r7, i8);

        r3 = newarray (int)[i3];

        r4 = newarray (int)[i3];

        $i7 = i8 + 2;

        i9 = specialinvoke r0.<javassist.bytecode.StackMapTable$Walker: int verifyTypeInfo(int,int,int[],int[])>($i7, i3, r3, r4);

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void fullFrame(int,int,int[],int[],int[],int[])>(i0, i1, r1, r2, r3, r4);

        return i9;
    }

    public void fullFrame(int, int, int[], int[], int[], int[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1;
        int[] r1, r2, r3, r4;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        r4 := @parameter5: int[];

        return;
    }

    private int verifyTypeInfo(int, int, int[], int[])
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, $i2, $i4, $i5, i6, i7;
        int[] r1, r2;
        short s1;
        byte[] $r3, $r4;
        byte $b3;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        i7 = 0;

     label1:
        if i7 >= i0 goto label4;

        $r3 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i2 = i6;

        i6 = i6 + 1;

        $b3 = $r3[$i2];

        s1 = $b3 & 255;

        r1[i7] = s1;

        if s1 == 7 goto label2;

        if s1 != 8 goto label3;

     label2:
        $r4 = r0.<javassist.bytecode.StackMapTable$Walker: byte[] info>;

        $i4 = staticinvoke <javassist.bytecode.ByteArray: int readU16bit(byte[],int)>($r4, i6);

        r2[i7] = $i4;

        $i5 = r2[i7];

        virtualinvoke r0.<javassist.bytecode.StackMapTable$Walker: void objectOrUninitialized(int,int,int)>(s1, $i5, i6);

        i6 = i6 + 2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        return i6;
    }

    public void objectOrUninitialized(int, int, int)
    {
        javassist.bytecode.StackMapTable$Walker r0;
        int i0, i1, i2;

        r0 := @this: javassist.bytecode.StackMapTable$Walker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }
}
