public final class org.apache.flink.util.ExceptionUtils extends java.lang.Object
{
    public static final java.lang.String STRINGIFIED_NULL_EXCEPTION;

    public static java.lang.String stringifyException(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r5;
        java.io.StringWriter $r2;
        java.io.PrintWriter $r3;
        java.lang.String $r4, $r8, $r11;
        java.lang.StringBuilder $r6, $r9, $r10;
        java.lang.Class $r7;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r2 = new java.io.StringWriter;

        specialinvoke $r2.<java.io.StringWriter: void <init>()>();

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.Writer)>($r2);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r3);

        virtualinvoke $r3.<java.io.PrintWriter: void close()>();

        $r4 = virtualinvoke $r2.<java.io.StringWriter: java.lang.String toString()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (error while printing stack trace)");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static boolean isJvmFatalError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.InternalError;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.UnknownError;

        if $z1 != 0 goto label1;

        $z2 = r0 instanceof java.lang.ThreadDeath;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static boolean isJvmFatalOrOutOfMemoryError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>(r0);

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.OutOfMemoryError;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public static void tryEnrichOutOfMemoryError(java.lang.Throwable, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1, r2, r3;
        java.util.function.Function $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = staticinvoke <org.apache.flink.util.ExceptionUtils$lambda_tryEnrichOutOfMemoryError_0__22: java.util.function.Function bootstrap$(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessage(java.lang.Throwable,java.util.function.Function)>(r0, $r4);

        return;
    }

    public static void updateDetailMessage(java.lang.Throwable, java.util.function.Function)
    {
        java.lang.Throwable r0, r4;
        java.util.function.Function r1;
        java.lang.String r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.util.function.Function;

        if r1 != null goto label1;

        return;

     label1:
        r4 = r0;

     label2:
        if r4 == null goto label4;

        $r3 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r4);

        r2 = (java.lang.String) $r3;

        if r2 == null goto label3;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void updateDetailMessageOfThrowable(java.lang.Throwable,java.lang.String)>(r4, r2);

     label3:
        r4 = virtualinvoke r4.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label2;

     label4:
        return;
    }

    private static void updateDetailMessageOfThrowable(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.Class $r3;
        java.lang.NoSuchFieldException $r4;
        java.lang.IllegalStateException $r5, $r7;
        java.lang.IllegalAccessException $r6;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = class "Ljava/lang/Throwable;";

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("detailMessage");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("The JDK Throwable contains a detailMessage member. The Throwable class provided on the classpath does not which is why this exception appears.", $r4);

        throw $r5;

     label4:
        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label5:
        virtualinvoke r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r1);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("The JDK Throwable contains a private detailMessage member that should be accessible through reflection. This is not the case for the Throwable class provided on the classpath.", $r6);

        throw $r7;

     label8:
        return;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label5 to label6 with label7;
    }

    public static boolean isMetaspaceOutOfMemoryError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isOutOfMemoryErrorWithMessageStartingWith(java.lang.Throwable,java.lang.String)>(r0, "Metaspace");

        return $z0;
    }

    public static boolean isDirectOutOfMemoryError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isOutOfMemoryErrorWithMessageStartingWith(java.lang.Throwable,java.lang.String)>(r0, "Direct buffer memory");

        return $z0;
    }

    public static boolean isHeapSpaceOutOfMemoryError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isOutOfMemoryErrorWithMessageStartingWith(java.lang.Throwable,java.lang.String)>(r0, "Java heap space");

        return $z0;
    }

    private static boolean isOutOfMemoryErrorWithMessageStartingWith(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isOutOfMemoryError(java.lang.Throwable)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean isOutOfMemoryError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/OutOfMemoryError;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void rethrowIfFatalError(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.lang.Error $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>(r0);

        if $z0 == 0 goto label1;

        $r1 = (java.lang.Error) r0;

        throw $r1;

     label1:
        return;
    }

    public static void rethrowIfFatalErrorOrOOM(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        java.lang.Error $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>(r0);

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof java.lang.OutOfMemoryError;

        if $z1 == 0 goto label2;

     label1:
        $r1 = (java.lang.Error) r0;

        throw $r1;

     label2:
        return;
    }

    public static java.lang.Throwable firstOrSuppressed(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "newException");

        if r1 == null goto label1;

        if r1 != r0 goto label2;

     label1:
        return r0;

     label2:
        virtualinvoke r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r0);

        return r1;
    }

    public static void rethrow(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        java.lang.RuntimeException $r1, $r2;
        java.lang.Error $r3;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Error) r0;

        throw $r3;

     label1:
        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.RuntimeException) r0;

        throw $r2;

     label2:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    public static void rethrow(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.RuntimeException $r2, $r3;
        java.lang.Error $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Error) r0;

        throw $r4;

     label1:
        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.RuntimeException) r0;

        throw $r3;

     label2:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r1, r0);

        throw $r2;
    }

    public static void rethrowException(java.lang.Throwable, java.lang.String) throws java.lang.Exception
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.Exception $r2, $r3;
        java.lang.Error $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Error) r0;

        throw $r4;

     label1:
        $z1 = r0 instanceof java.lang.Exception;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.Exception) r0;

        throw $r3;

     label2:
        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r0);

        throw $r2;
    }

    public static void rethrowException(java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable r0;
        boolean $z0, $z1;
        java.lang.Exception $r1, $r3;
        java.lang.String $r2;
        java.lang.Error $r4;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.Error;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Error) r0;

        throw $r4;

     label1:
        $z1 = r0 instanceof java.lang.Exception;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.Exception) r0;

        throw $r3;

     label2:
        $r1 = new java.lang.Exception;

        $r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r2, r0);

        throw $r1;
    }

    public static void tryRethrowException(java.lang.Exception) throws java.lang.Exception
    {
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;

        if r0 == null goto label1;

        throw r0;

     label1:
        return;
    }

    public static void tryRethrowIOException(java.lang.Throwable) throws java.io.IOException
    {
        java.lang.Throwable r0;
        boolean $z0, $z1, $z2;
        java.lang.Error $r1;
        java.lang.RuntimeException $r2;
        java.io.IOException $r3;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.io.IOException;

        if $z0 == 0 goto label1;

        $r3 = (java.io.IOException) r0;

        throw $r3;

     label1:
        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.RuntimeException) r0;

        throw $r2;

     label2:
        $z2 = r0 instanceof java.lang.Error;

        if $z2 == 0 goto label3;

        $r1 = (java.lang.Error) r0;

        throw $r1;

     label3:
        return;
    }

    public static void rethrowIOException(java.lang.Throwable) throws java.io.IOException
    {
        java.lang.Throwable r0;
        boolean $z0, $z1, $z2;
        java.io.IOException $r1, $r5;
        java.lang.String $r2;
        java.lang.Error $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.io.IOException;

        if $z0 == 0 goto label1;

        $r5 = (java.io.IOException) r0;

        throw $r5;

     label1:
        $z1 = r0 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.RuntimeException) r0;

        throw $r4;

     label2:
        $z2 = r0 instanceof java.lang.Error;

        if $z2 == 0 goto label3;

        $r3 = (java.lang.Error) r0;

        throw $r3;

     label3:
        $r1 = new java.io.IOException;

        $r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r2, r0);

        throw $r1;
    }

    public static java.util.Optional findSerializedThrowable(java.lang.Throwable, java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Throwable r0, r3, r11, $r12;
        java.lang.Class r1, $r6, $r7;
        java.lang.ClassLoader r2;
        java.util.Optional $r4, $r5, $r10;
        boolean $z0, $z1;
        org.apache.flink.util.SerializedThrowable $r8;
        java.lang.Object $r9;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.ClassLoader;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r4;

     label2:
        r11 = r0;

     label3:
        if r11 == null goto label8;

        $r6 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r11);

        $r10 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r9);

        return $r10;

     label4:
        $r7 = virtualinvoke r11.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Lorg/apache/flink/util/SerializedThrowable;");

        if $z1 == 0 goto label7;

        $r8 = (org.apache.flink.util.SerializedThrowable) r11;

        r3 = virtualinvoke $r8.<org.apache.flink.util.SerializedThrowable: java.lang.Throwable deserializeError(java.lang.ClassLoader)>(r2);

        if r3 != r11 goto label5;

        $r12 = null;

        goto label6;

     label5:
        $r12 = r3;

     label6:
        r11 = $r12;

        goto label3;

     label7:
        r11 = virtualinvoke r11.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label3;

     label8:
        $r5 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r5;
    }

    public static java.util.Optional findThrowable(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable r0, r7;
        java.lang.Class r1, $r4;
        java.util.Optional $r2, $r3, $r6;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r2;

     label2:
        r7 = r0;

     label3:
        if r7 == null goto label5;

        $r4 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r7);

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r5);

        return $r6;

     label4:
        r7 = virtualinvoke r7.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label3;

     label5:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public static java.util.Optional findThrowableSerializedAware(java.lang.Throwable, java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Throwable r0, r9;
        java.lang.Class r1, $r5;
        java.lang.ClassLoader r2;
        java.util.Optional $r3, $r4, $r8;
        boolean $z0, $z1;
        org.apache.flink.util.SerializedThrowable $r6;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.ClassLoader;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;

     label2:
        r9 = r0;

     label3:
        if r9 == null goto label6;

        $r5 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r9);

        $r8 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r7);

        return $r8;

     label4:
        $z1 = r9 instanceof org.apache.flink.util.SerializedThrowable;

        if $z1 == 0 goto label5;

        $r6 = (org.apache.flink.util.SerializedThrowable) r9;

        r9 = virtualinvoke $r6.<org.apache.flink.util.SerializedThrowable: java.lang.Throwable deserializeError(java.lang.ClassLoader)>(r2);

        goto label3;

     label5:
        r9 = virtualinvoke r9.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label3;

     label6:
        $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r4;
    }

    public static java.util.Optional findThrowable(java.lang.Throwable, java.util.function.Predicate)
    {
        java.lang.Throwable r0, r5;
        java.util.function.Predicate r1;
        java.util.Optional $r2, $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.util.function.Predicate;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r2;

     label2:
        r5 = r0;

     label3:
        if r5 == null goto label5;

        $z0 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r5);

        if $z0 == 0 goto label4;

        $r4 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r5);

        return $r4;

     label4:
        r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label3;

     label5:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public static java.util.Optional findThrowableWithMessage(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0, r7;
        java.lang.String r1, $r4, $r5;
        java.util.Optional $r2, $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r2;

     label2:
        r7 = r0;

     label3:
        if r7 == null goto label5;

        $r4 = virtualinvoke r7.<java.lang.Throwable: java.lang.String getMessage()>();

        if $r4 == null goto label4;

        $r5 = virtualinvoke r7.<java.lang.Throwable: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r7);

        return $r6;

     label4:
        r7 = virtualinvoke r7.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label3;

     label5:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public static java.lang.Throwable stripExecutionException(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable stripException(java.lang.Throwable,java.lang.Class)>(r0, class "Ljava/util/concurrent/ExecutionException;");

        return $r1;
    }

    public static java.lang.Throwable stripCompletionException(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable stripException(java.lang.Throwable,java.lang.Class)>(r0, class "Ljava/util/concurrent/CompletionException;");

        return $r1;
    }

    public static java.lang.Throwable stripException(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0;
        java.lang.Throwable $r2, r3;

        r3 := @parameter0: java.lang.Throwable;

        r0 := @parameter1: java.lang.Class;

     label1:
        $r1 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r2 == null goto label2;

        r3 = virtualinvoke r3.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        return r3;
    }

    public static void tryDeserializeAndThrow(java.lang.Throwable, java.lang.ClassLoader) throws java.lang.Throwable
    {
        java.lang.Throwable r0, $r3, $r4, r5;
        java.lang.ClassLoader r1;
        boolean $z0, $z1;
        org.apache.flink.util.SerializedThrowable $r2;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.ClassLoader;

        r5 = r0;

     label1:
        $z0 = r5 instanceof org.apache.flink.util.SerializedThrowable;

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r4 == null goto label2;

        r5 = virtualinvoke r5.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        $z1 = r5 instanceof org.apache.flink.util.SerializedThrowable;

        if $z1 == 0 goto label3;

        $r2 = (org.apache.flink.util.SerializedThrowable) r5;

        $r3 = virtualinvoke $r2.<org.apache.flink.util.SerializedThrowable: java.lang.Throwable deserializeError(java.lang.ClassLoader)>(r1);

        throw $r3;

     label3:
        throw r0;
    }

    public static void checkInterrupted(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof java.lang.InterruptedException;

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label1:
        return;
    }

    public static void suppressExceptions(org.apache.flink.util.function.RunnableWithException)
    {
        org.apache.flink.util.function.RunnableWithException r0;
        java.lang.InterruptedException $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.function.RunnableWithException;

     label1:
        interfaceinvoke r0.<org.apache.flink.util.function.RunnableWithException: void run()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        goto label5;

     label4:
        $r3 := @caughtexception;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isJvmFatalError(java.lang.Throwable)>($r3);

        if $z0 == 0 goto label5;

        staticinvoke <org.apache.flink.util.ExceptionUtils: void rethrow(java.lang.Throwable)>($r3);

     label5:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void <init>()
    {
        org.apache.flink.util.ExceptionUtils r0;

        r0 := @this: org.apache.flink.util.ExceptionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String lambda$tryEnrichOutOfMemoryError$0(java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0, r1, r2;
        java.lang.Throwable r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isMetaspaceOutOfMemoryError(java.lang.Throwable)>(r3);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isDirectOutOfMemoryError(java.lang.Throwable)>(r3);

        if $z1 == 0 goto label2;

        return r1;

     label2:
        $z2 = staticinvoke <org.apache.flink.util.ExceptionUtils: boolean isHeapSpaceOutOfMemoryError(java.lang.Throwable)>(r3);

        if $z2 == 0 goto label3;

        return r2;

     label3:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.ExceptionUtils: java.lang.String STRINGIFIED_NULL_EXCEPTION> = "(null)";

        return;
    }
}
