public class org.mockito.internal.matchers.CapturingMatcher extends java.lang.Object implements org.mockito.ArgumentMatcher, org.mockito.internal.matchers.CapturesArguments, org.mockito.internal.matchers.VarargMatcher, java.io.Serializable
{
    private final java.util.List arguments;
    private final java.util.concurrent.locks.ReadWriteLock lock;
    private final java.util.concurrent.locks.Lock readLock;
    private final java.util.concurrent.locks.Lock writeLock;

    public void <init>()
    {
        org.mockito.internal.matchers.CapturingMatcher r0;
        java.util.ArrayList $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r2;
        java.util.concurrent.locks.ReadWriteLock $r3, $r5;
        java.util.concurrent.locks.Lock $r4, $r6;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments> = $r1;

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.ReadWriteLock lock> = $r2;

        $r3 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.ReadWriteLock lock>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock> = $r4;

        $r5 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.ReadWriteLock lock>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock writeLock> = $r6;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.mockito.internal.matchers.CapturingMatcher r0;
        java.lang.Object r1;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        r1 := @parameter0: java.lang.Object;

        return 1;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.matchers.CapturingMatcher r0;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        return "<Capturing argument>";
    }

    public java.lang.Object getLastValue()
    {
        org.mockito.internal.matchers.CapturingMatcher r0;
        java.lang.Object r1;
        java.util.concurrent.locks.Lock $r3, $r7, $r10;
        java.util.List $r4, $r5, $r6;
        boolean $z0;
        int $i0, $i1;
        org.mockito.exceptions.base.MockitoException $r8;
        java.lang.Throwable $r9;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        $r3 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments>;

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException noArgumentValueWasCaptured()>();

        throw $r8;

     label2:
        $r6 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments>;

        $r5 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        r1 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1);

     label3:
        $r7 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        return r1;

     label4:
        $r9 := @caughtexception;

        $r10 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public java.util.List getAllValues()
    {
        org.mockito.internal.matchers.CapturingMatcher r0;
        java.util.concurrent.locks.Lock $r3, $r6, $r8;
        java.util.ArrayList $r4;
        java.util.List $r5;
        java.lang.Throwable $r7;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        $r3 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = new java.util.ArrayList;

        $r5 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments>;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

     label2:
        $r6 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>();

        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void captureFrom(java.lang.Object)
    {
        org.mockito.internal.matchers.CapturingMatcher r0;
        java.lang.Object r1;
        java.util.concurrent.locks.Lock $r3, $r5, $r7;
        java.util.List $r4;
        java.lang.Throwable $r6;

        r0 := @this: org.mockito.internal.matchers.CapturingMatcher;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r4 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.List arguments>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label2:
        $r5 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<org.mockito.internal.matchers.CapturingMatcher: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
