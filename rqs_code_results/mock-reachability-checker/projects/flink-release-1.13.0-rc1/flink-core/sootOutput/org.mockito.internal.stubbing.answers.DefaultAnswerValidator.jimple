public abstract class org.mockito.internal.stubbing.answers.DefaultAnswerValidator extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.internal.stubbing.answers.DefaultAnswerValidator r0;

        r0 := @this: org.mockito.internal.stubbing.answers.DefaultAnswerValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void validateReturnValueFor(org.mockito.invocation.InvocationOnMock, java.lang.Object) throws java.lang.Throwable
    {
        org.mockito.invocation.InvocationOnMock r0;
        java.lang.Object r1, $r5;
        org.mockito.internal.stubbing.answers.InvocationInfo $r3;
        java.lang.Class $r4, $r7;
        boolean $z0;
        java.lang.String $r6, $r8, $r9;
        org.mockito.exceptions.base.MockitoException $r10;

        r0 := @parameter0: org.mockito.invocation.InvocationOnMock;

        r1 := @parameter1: java.lang.Object;

        $r3 = new org.mockito.internal.stubbing.answers.InvocationInfo;

        specialinvoke $r3.<org.mockito.internal.stubbing.answers.InvocationInfo: void <init>(org.mockito.invocation.InvocationOnMock)>(r0);

        if r1 == null goto label1;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<org.mockito.internal.stubbing.answers.InvocationInfo: boolean isValidReturnType(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke r0.<org.mockito.invocation.InvocationOnMock: java.lang.Object getMock()>();

        $r6 = virtualinvoke $r3.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.String printMethodReturnType()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        $r9 = virtualinvoke $r3.<org.mockito.internal.stubbing.answers.InvocationInfo: java.lang.String getMethodName()>();

        $r10 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException wrongTypeReturnedByDefaultAnswer(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($r5, $r6, $r8, $r9);

        throw $r10;

     label1:
        return;
    }
}
