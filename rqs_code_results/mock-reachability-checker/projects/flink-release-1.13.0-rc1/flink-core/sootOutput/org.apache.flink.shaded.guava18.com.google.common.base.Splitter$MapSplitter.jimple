public final class org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter extends java.lang.Object
{
    private static final java.lang.String INVALID_ENTRY_MESSAGE;
    private final org.apache.flink.shaded.guava18.com.google.common.base.Splitter outerSplitter;
    private final org.apache.flink.shaded.guava18.com.google.common.base.Splitter entrySplitter;

    private void <init>(org.apache.flink.shaded.guava18.com.google.common.base.Splitter, org.apache.flink.shaded.guava18.com.google.common.base.Splitter)
    {
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter r0;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter r1, r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.base.Splitter;

        r2 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.base.Splitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter outerSplitter> = r1;

        $r3 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (org.apache.flink.shaded.guava18.com.google.common.base.Splitter) $r3;

        r0.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter entrySplitter> = $r4;

        return;
    }

    public java.util.Map split(java.lang.CharSequence)
    {
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter r0;
        java.lang.CharSequence r1;
        java.util.Iterator r3, r5;
        java.lang.String r4, r6, r7;
        java.util.LinkedHashMap $r8;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter $r9, $r13;
        java.lang.Iterable $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map $r11;
        java.lang.Object $r12, $r15, $r18;
        java.lang.Object[] $r14, $r16, $r17, $r20;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter;

        r1 := @parameter0: java.lang.CharSequence;

        $r8 = new java.util.LinkedHashMap;

        specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>();

        $r9 = r0.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter outerSplitter>;

        $r10 = virtualinvoke $r9.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r1);

        r3 = interfaceinvoke $r10.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r12;

        $r13 = r0.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: org.apache.flink.shaded.guava18.com.google.common.base.Splitter entrySplitter>;

        r5 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Splitter: java.util.Iterator access$000(org.apache.flink.shaded.guava18.com.google.common.base.Splitter,java.lang.CharSequence)>($r13, r4);

        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Chunk [%s] is not a valid entry", $r14);

        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r15;

        $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z2 != 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r6;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z5, "Duplicate key [%s] found.", $r16);

        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z3, "Chunk [%s] is not a valid entry", $r17);

        $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r18;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

        $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z6, "Chunk [%s] is not a valid entry", $r20);

        goto label1;

     label6:
        $r11 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8);

        return $r11;
    }

    void <init>(org.apache.flink.shaded.guava18.com.google.common.base.Splitter, org.apache.flink.shaded.guava18.com.google.common.base.Splitter, org.apache.flink.shaded.guava18.com.google.common.base.Splitter$1)
    {
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter r0;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter r1, r2;
        org.apache.flink.shaded.guava18.com.google.common.base.Splitter$1 r3;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.base.Splitter;

        r2 := @parameter1: org.apache.flink.shaded.guava18.com.google.common.base.Splitter;

        r3 := @parameter2: org.apache.flink.shaded.guava18.com.google.common.base.Splitter$1;

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: void <init>(org.apache.flink.shaded.guava18.com.google.common.base.Splitter,org.apache.flink.shaded.guava18.com.google.common.base.Splitter)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.guava18.com.google.common.base.Splitter$MapSplitter: java.lang.String INVALID_ENTRY_MESSAGE> = "Chunk [%s] is not a valid entry";

        return;
    }
}
