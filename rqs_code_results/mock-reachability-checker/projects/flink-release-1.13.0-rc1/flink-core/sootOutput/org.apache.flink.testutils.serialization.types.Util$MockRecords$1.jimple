class org.apache.flink.testutils.serialization.types.Util$MockRecords$1 extends java.lang.Object implements java.util.Iterator
{
    final org.apache.flink.testutils.serialization.types.Util$MockRecords this$0;

    void <init>(org.apache.flink.testutils.serialization.types.Util$MockRecords)
    {
        org.apache.flink.testutils.serialization.types.Util$MockRecords$1 r0;
        org.apache.flink.testutils.serialization.types.Util$MockRecords r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$MockRecords$1;

        r1 := @parameter0: org.apache.flink.testutils.serialization.types.Util$MockRecords;

        r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.Util$MockRecords this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean hasNext()
    {
        org.apache.flink.testutils.serialization.types.Util$MockRecords$1 r0;
        org.apache.flink.testutils.serialization.types.Util$MockRecords $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$MockRecords$1;

        $r1 = r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.Util$MockRecords this$0>;

        $i0 = staticinvoke <org.apache.flink.testutils.serialization.types.Util$MockRecords: int access$100(org.apache.flink.testutils.serialization.types.Util$MockRecords)>($r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.flink.testutils.serialization.types.SerializationTestType next()
    {
        org.apache.flink.testutils.serialization.types.Util$MockRecords$1 r0;
        org.apache.flink.testutils.serialization.types.Util$MockRecords $r1, $r3, $r4;
        int $i0;
        java.util.NoSuchElementException $r2;
        org.apache.flink.testutils.serialization.types.SerializationTestType $r5;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$MockRecords$1;

        $r1 = r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.Util$MockRecords this$0>;

        $i0 = staticinvoke <org.apache.flink.testutils.serialization.types.Util$MockRecords: int access$100(org.apache.flink.testutils.serialization.types.Util$MockRecords)>($r1);

        if $i0 <= 0 goto label1;

        $r3 = r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.Util$MockRecords this$0>;

        staticinvoke <org.apache.flink.testutils.serialization.types.Util$MockRecords: int access$110(org.apache.flink.testutils.serialization.types.Util$MockRecords)>($r3);

        $r4 = r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.Util$MockRecords this$0>;

        $r5 = virtualinvoke $r4.<org.apache.flink.testutils.serialization.types.Util$MockRecords: org.apache.flink.testutils.serialization.types.SerializationTestType getRecord()>();

        return $r5;

     label1:
        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;
    }

    public void remove()
    {
        org.apache.flink.testutils.serialization.types.Util$MockRecords$1 r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$MockRecords$1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public volatile java.lang.Object next()
    {
        org.apache.flink.testutils.serialization.types.Util$MockRecords$1 r0;
        org.apache.flink.testutils.serialization.types.SerializationTestType $r1;

        r0 := @this: org.apache.flink.testutils.serialization.types.Util$MockRecords$1;

        $r1 = virtualinvoke r0.<org.apache.flink.testutils.serialization.types.Util$MockRecords$1: org.apache.flink.testutils.serialization.types.SerializationTestType next()>();

        return $r1;
    }
}
