public class org.apache.flink.api.common.cache.DistributedCache extends java.lang.Object
{
    private final java.util.Map cacheCopyTasks;
    private static final java.lang.String CACHE_FILE_NUM;
    private static final java.lang.String CACHE_FILE_NAME;
    private static final java.lang.String CACHE_FILE_PATH;
    private static final java.lang.String CACHE_FILE_EXE;
    private static final java.lang.String CACHE_FILE_DIR;
    private static final java.lang.String CACHE_FILE_BLOB_KEY;

    public void <init>(java.util.Map)
    {
        org.apache.flink.api.common.cache.DistributedCache r0;
        java.util.Map r1;

        r0 := @this: org.apache.flink.api.common.cache.DistributedCache;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.cache.DistributedCache: java.util.Map cacheCopyTasks> = r1;

        return;
    }

    public java.io.File getFile(java.lang.String)
    {
        org.apache.flink.api.common.cache.DistributedCache r0;
        java.lang.String r1, $r15, $r23;
        java.util.concurrent.Future r2;
        java.net.URI r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r6;
        org.apache.flink.core.fs.FileSystem $r7;
        org.apache.flink.core.fs.Path $r8, r27;
        java.io.File $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r19, $r20, $r21, $r22;
        java.lang.NullPointerException $r16;
        java.lang.Exception $r17;
        java.lang.RuntimeException $r18, $r25;
        java.util.concurrent.ExecutionException $r24;
        java.lang.Throwable $r26;

        r0 := @this: org.apache.flink.api.common.cache.DistributedCache;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("name must not be null");

        throw $r16;

     label1:
        $r4 = r0.<org.apache.flink.api.common.cache.DistributedCache: java.util.Map cacheCopyTasks>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.concurrent.Future) $r5;

        if r2 != null goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File with name \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available. Did you forget to register the file?");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label2:
        $r6 = interfaceinvoke r2.<java.util.concurrent.Future: java.lang.Object get()>();

        r27 = (org.apache.flink.core.fs.Path) $r6;

        $r7 = virtualinvoke r27.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.FileSystem getFileSystem()>();

        $r8 = virtualinvoke r27.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path makeQualified(org.apache.flink.core.fs.FileSystem)>($r7);

        r3 = virtualinvoke $r8.<org.apache.flink.core.fs.Path: java.net.URI toUri()>();

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.net.URI)>(r3);

     label3:
        return $r9;

     label4:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        $r26 = virtualinvoke $r24.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("An error occurred while copying the file.", $r26);

        throw $r25;

     label5:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while getting the file registered under \'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from the distributed cache");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r17);

        throw $r18;

        catch java.util.concurrent.ExecutionException from label2 to label3 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    public static void writeFileInfoToConfig(java.lang.String, org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry, org.apache.flink.configuration.Configuration)
    {
        java.lang.String r0, $r6, $r10, $r11, $r15, $r20, $r25, $r28, $r31;
        org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry r1;
        org.apache.flink.configuration.Configuration r2;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r9, $r12, $r13, $r14, $r17, $r18, $r19, $r22, $r23, $r24;
        java.lang.Boolean $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte[] $r21, $r26;
        java.io.File $r27, $r30;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry;

        r2 := @parameter2: org.apache.flink.configuration.Configuration;

        $i1 = virtualinvoke r2.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("DISTRIBUTED_CACHE_FILE_NUM", 0);

        i0 = $i1 + 1;

        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setInteger(java.lang.String,int)>("DISTRIBUTED_CACHE_FILE_NUM", i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_NAME_");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r6, r0);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_PATH_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: java.lang.String filePath>;

        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setString(java.lang.String,java.lang.String)>($r10, $r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_EXE_");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: java.lang.Boolean isExecutable>;

        $z0 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $r30 = new java.io.File;

        $r31 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: java.lang.String filePath>;

        specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>($r31);

        $z3 = virtualinvoke $r30.<java.io.File: boolean canExecute()>();

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>($r15, $z4);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_DIR_");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: boolean isZipped>;

        if $z1 != 0 goto label4;

        $r27 = new java.io.File;

        $r28 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: java.lang.String filePath>;

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>($r28);

        $z2 = virtualinvoke $r27.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label5;

     label4:
        $z5 = 1;

        goto label6;

     label5:
        $z5 = 0;

     label6:
        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setBoolean(java.lang.String,boolean)>($r20, $z5);

        $r21 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: byte[] blobKey>;

        if $r21 == null goto label7;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_BLOB_KEY_");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = r1.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: byte[] blobKey>;

        virtualinvoke r2.<org.apache.flink.configuration.Configuration: void setBytes(java.lang.String,byte[])>($r25, $r26);

     label7:
        return;
    }

    public static java.util.Set readFileInfoFromConfig(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        int i0, i1;
        java.lang.String r2, r3, $r10, $r14, $r18, $r22, $r26;
        boolean z0, z1;
        byte[] r4;
        java.util.HashMap $r5;
        java.util.Set $r6, $r30;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25;
        org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry $r27;
        java.lang.Boolean $r28;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(java.lang.String,int)>("DISTRIBUTED_CACHE_FILE_NUM", 0);

        if i0 != 0 goto label1;

        $r30 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r30;

     label1:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        i1 = 1;

     label2:
        if i1 > i0 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_NAME_");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>($r10, null);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_PATH_");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.String getString(java.lang.String,java.lang.String)>($r14, null);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_EXE_");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>($r18, 0);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_DIR_");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        z1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean getBoolean(java.lang.String,boolean)>($r22, 0);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTRIBUTED_CACHE_FILE_BLOB_KEY_");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r4 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: byte[] getBytes(java.lang.String,byte[])>($r26, null);

        $r27 = new org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry;

        $r28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        specialinvoke $r27.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: void <init>(java.lang.String,java.lang.Boolean,byte[],boolean)>(r3, $r28, r4, z1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r27);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        return $r6;
    }

    public static java.util.List parseCachedFilesFromString(java.util.List)
    {
        java.util.List r0, $r8;
        java.util.stream.Stream $r1, $r3, $r5;
        java.util.function.Function $r2, $r4;
        java.util.stream.Collector $r6;
        java.lang.Object $r7;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.stream.Stream stream()>();

        $r2 = staticinvoke <org.apache.flink.api.common.cache.DistributedCache$parseMap__497: java.util.function.Function bootstrap$()>();

        $r3 = interfaceinvoke $r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r2);

        $r4 = staticinvoke <org.apache.flink.api.common.cache.DistributedCache$lambda_parseCachedFilesFromString_0__499: java.util.function.Function bootstrap$()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        $r8 = (java.util.List) $r7;

        return $r8;
    }

    public static org.apache.flink.api.java.tuple.Tuple2 lambda$parseCachedFilesFromString$0(java.util.Map)
    {
        java.util.Map r0;
        java.lang.Object $r1, $r3, $r5, $r10;
        org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry $r2;
        java.lang.String $r4;
        java.util.Optional $r6, $r8;
        java.util.function.Function $r7;
        java.lang.Boolean $r9, $r11;
        org.apache.flink.api.java.tuple.Tuple2 $r12;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");

        $r2 = new org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry;

        $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("path");

        $r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("executable");

        $r6 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r5);

        $r7 = staticinvoke <org.apache.flink.api.common.cache.DistributedCache$parseBoolean__498: java.util.function.Function bootstrap$()>();

        $r8 = virtualinvoke $r6.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r7);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r10 = virtualinvoke $r8.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r9);

        $r11 = (java.lang.Boolean) $r10;

        specialinvoke $r2.<org.apache.flink.api.common.cache.DistributedCache$DistributedCacheEntry: void <init>(java.lang.String,java.lang.Boolean)>($r4, $r11);

        $r12 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r12;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_BLOB_KEY> = "DISTRIBUTED_CACHE_FILE_BLOB_KEY_";

        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_DIR> = "DISTRIBUTED_CACHE_FILE_DIR_";

        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_EXE> = "DISTRIBUTED_CACHE_FILE_EXE_";

        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_PATH> = "DISTRIBUTED_CACHE_FILE_PATH_";

        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_NAME> = "DISTRIBUTED_CACHE_FILE_NAME_";

        <org.apache.flink.api.common.cache.DistributedCache: java.lang.String CACHE_FILE_NUM> = "DISTRIBUTED_CACHE_FILE_NUM";

        return;
    }
}
