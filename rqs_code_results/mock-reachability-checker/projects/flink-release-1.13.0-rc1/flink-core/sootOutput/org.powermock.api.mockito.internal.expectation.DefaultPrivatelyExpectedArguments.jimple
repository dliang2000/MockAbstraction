public class org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments extends java.lang.Object implements org.powermock.api.mockito.expectation.PrivatelyExpectedArguments
{
    private final java.lang.reflect.Method method;
    private final java.lang.Object mock;

    public void <init>(java.lang.Object, java.lang.reflect.Method)
    {
        org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments r0;
        java.lang.Object r1;
        java.lang.reflect.Method r2;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.Object mock> = r1;

        r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.reflect.Method method> = r2;

        virtualinvoke r2.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        return;
    }

    public transient void withArguments(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments r0;
        java.lang.Object r1, $r5, $r8;
        java.lang.Object[] r2, r3, $r4;
        java.lang.reflect.Method $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 != 0 goto label2;

     label1:
        $r6 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.reflect.Method method>;

        $r5 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.Object mock>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r4);

        goto label4;

     label2:
        $i1 = lengthof r2;

        $i2 = $i1 + 1;

        r3 = newarray (java.lang.Object)[$i2];

        r3[0] = r1;

        $i3 = lengthof r2;

        if $i3 <= 0 goto label3;

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 1, $i4);

     label3:
        $r9 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.reflect.Method method>;

        $r8 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.Object mock>;

        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, r3);

     label4:
        return;
    }

    public void withNoArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments r0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        java.lang.reflect.Method $r3;

        r0 := @this: org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments;

        $r3 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.reflect.Method method>;

        $r2 = r0.<org.powermock.api.mockito.internal.expectation.DefaultPrivatelyExpectedArguments: java.lang.Object mock>;

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        return;
    }
}
