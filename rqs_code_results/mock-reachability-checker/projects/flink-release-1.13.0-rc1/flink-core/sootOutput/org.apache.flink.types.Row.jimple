public final class org.apache.flink.types.Row extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.flink.types.RowKind kind;
    private final java.lang.Object[] fieldByPosition;
    private final java.util.Map fieldByName;
    private final java.util.LinkedHashMap positionByName;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.flink.types.RowKind, java.lang.Object[], java.util.Map, java.util.LinkedHashMap)
    {
        org.apache.flink.types.Row r0;
        org.apache.flink.types.RowKind r1;
        java.lang.Object[] r2;
        java.util.Map r3;
        java.util.LinkedHashMap r4;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: org.apache.flink.types.RowKind;

        r2 := @parameter1: java.lang.Object[];

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: java.util.LinkedHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind> = r1;

        r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition> = r2;

        r0.<org.apache.flink.types.Row: java.util.Map fieldByName> = r3;

        r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName> = r4;

        return;
    }

    public void <init>(org.apache.flink.types.RowKind, int)
    {
        org.apache.flink.types.Row r0;
        org.apache.flink.types.RowKind r1, $r3;
        int i0;
        java.lang.Object $r2;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: org.apache.flink.types.RowKind;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Row kind must not be null.");

        $r3 = (org.apache.flink.types.RowKind) $r2;

        r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind> = $r3;

        $r4 = newarray (java.lang.Object)[i0];

        r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition> = $r4;

        r0.<org.apache.flink.types.Row: java.util.Map fieldByName> = null;

        r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName> = null;

        return;
    }

    public void <init>(int)
    {
        org.apache.flink.types.Row r0;
        int i0;
        org.apache.flink.types.RowKind $r1;

        r0 := @this: org.apache.flink.types.Row;

        i0 := @parameter0: int;

        $r1 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        specialinvoke r0.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>($r1, i0);

        return;
    }

    public static org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind, int)
    {
        org.apache.flink.types.RowKind r0;
        int i0;
        org.apache.flink.types.Row $r1;
        java.lang.Object[] $r2;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        i0 := @parameter1: int;

        $r1 = new org.apache.flink.types.Row;

        $r2 = newarray (java.lang.Object)[i0];

        specialinvoke $r1.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>(r0, $r2, null, null);

        return $r1;
    }

    public static org.apache.flink.types.Row withPositions(int)
    {
        int i0;
        org.apache.flink.types.RowKind $r0;
        org.apache.flink.types.Row $r1;

        i0 := @parameter0: int;

        $r0 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r0, i0);

        return $r1;
    }

    public static org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)
    {
        org.apache.flink.types.RowKind r0;
        org.apache.flink.types.Row $r1;
        java.util.HashMap $r2;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        $r1 = new org.apache.flink.types.Row;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        specialinvoke $r1.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>(r0, null, $r2, null);

        return $r1;
    }

    public static org.apache.flink.types.Row withNames()
    {
        org.apache.flink.types.RowKind $r0;
        org.apache.flink.types.Row $r1;

        $r0 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        $r1 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r0);

        return $r1;
    }

    public org.apache.flink.types.RowKind getKind()
    {
        org.apache.flink.types.Row r0;
        org.apache.flink.types.RowKind $r1;

        r0 := @this: org.apache.flink.types.Row;

        $r1 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        return $r1;
    }

    public void setKind(org.apache.flink.types.RowKind)
    {
        org.apache.flink.types.Row r0;
        org.apache.flink.types.RowKind r1;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: org.apache.flink.types.RowKind;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Row kind must not be null.");

        r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind> = r1;

        return;
    }

    public int getArity()
    {
        org.apache.flink.types.Row r0;
        java.lang.Object[] $r1, $r5;
        boolean $z0;
        java.util.Map $r2, $r3;
        int $i0, $i1;
        java.lang.AssertionError $r4;

        r0 := @this: org.apache.flink.types.Row;

        $r1 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i1 = lengthof $r5;

        return $i1;

     label1:
        $z0 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        return $i0;
    }

    public java.lang.Object getField(int)
    {
        org.apache.flink.types.Row r0;
        int i0;
        java.lang.Object[] $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.types.Row;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r4 = $r3[i0];

        return $r4;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accessing a field by position is not supported in name-based field mode.");

        throw $r2;
    }

    public java.lang.Object getFieldAs(int)
    {
        org.apache.flink.types.Row r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.types.Row;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i0);

        return $r1;
    }

    public java.lang.Object getField(java.lang.String)
    {
        org.apache.flink.types.Row r0;
        java.lang.String r1, $r14;
        java.lang.Integer r2;
        java.util.Map $r3, $r15;
        java.util.LinkedHashMap $r4, $r6;
        java.lang.IllegalArgumentException $r5, $r12;
        java.lang.Object $r7, $r9, $r16;
        boolean $z0;
        java.lang.Object[] $r8, $r10, $r13;
        int $i0;
        java.lang.AssertionError $r11;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r3 == null goto label1;

        $r15 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r16;

     label1:
        $r4 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        if $r4 == null goto label4;

        $r6 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Integer) $r7;

        if r2 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r1;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown field name \'%s\' for mapping to a position.", $r13);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r12;

     label2:
        $z0 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r10 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r10 != null goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $r8 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $r9 = $r8[$i0];

        return $r9;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accessing a field by name is not supported in position-based field mode.");

        throw $r5;
    }

    public java.lang.Object getFieldAs(java.lang.String)
    {
        org.apache.flink.types.Row r0;
        java.lang.String r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r1);

        return $r2;
    }

    public void setField(int, java.lang.Object)
    {
        org.apache.flink.types.Row r0;
        int i0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r4;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.flink.types.Row;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r2 == null goto label1;

        $r4 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r4[i0] = r1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accessing a field by position is not supported in name-based field mode.");

        throw $r3;

     label2:
        return;
    }

    public void setField(java.lang.String, java.lang.Object)
    {
        org.apache.flink.types.Row r0;
        java.lang.String r1, $r16;
        java.lang.Object r2, $r8;
        java.lang.Integer r3;
        java.util.Map $r4, $r17;
        java.util.LinkedHashMap $r5, $r7, $r14;
        java.lang.IllegalArgumentException $r6, $r12;
        boolean $z0;
        java.lang.Object[] $r9, $r10, $r13;
        int $i0;
        java.lang.AssertionError $r11;
        java.util.Set $r15;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r4 == null goto label1;

        $r17 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        goto label5;

     label1:
        $r5 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        if $r5 == null goto label4;

        $r7 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $r8 = virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Integer) $r8;

        if r3 != null goto label2;

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r1;

        $r14 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $r15 = virtualinvoke $r14.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r13[1] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown field name \'%s\' for mapping to a row position. Available names are: %s", $r13);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        $z0 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r10 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r10 != null goto label3;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label3:
        $r9 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        $r9[$i0] = r2;

        goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Accessing a field by name is not supported in position-based field mode.");

        throw $r6;

     label5:
        return;
    }

    public java.util.Set getFieldNames(boolean)
    {
        org.apache.flink.types.Row r0;
        boolean z0;
        java.util.Map $r1, $r5;
        java.util.LinkedHashMap $r2, $r3;
        java.util.Set $r4, $r6;

        r0 := @this: org.apache.flink.types.Row;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        return $r6;

     label1:
        if z0 == 0 goto label2;

        $r2 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        if $r2 == null goto label2;

        $r3 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.util.Set keySet()>();

        return $r4;

     label2:
        return null;
    }

    public void clear()
    {
        org.apache.flink.types.Row r0;
        java.lang.Object[] $r1, $r5;
        boolean $z0;
        java.util.Map $r2, $r3;
        java.lang.AssertionError $r4;

        r0 := @this: org.apache.flink.types.Row;

        $r1 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r5, null);

        goto label3;

     label1:
        $z0 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r3 != null goto label2;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $r2 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.flink.types.Row r0;
        java.util.Map $r1;
        java.lang.Object[] $r2;
        org.apache.flink.types.RowKind $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.types.Row;

        $r3 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $r2 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r1 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $r4 = staticinvoke <org.apache.flink.types.RowUtils: java.lang.String deepToStringRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map)>($r3, $r2, $r1);

        return $r4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.types.Row r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.util.LinkedHashMap $r5, $r9;
        java.util.Map $r6, $r10;
        java.lang.Object[] $r7, $r11;
        org.apache.flink.types.RowKind $r8, $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Row;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.types.Row) r1;

        $r12 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $r11 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r10 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $r9 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $r8 = r2.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $r7 = r2.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r6 = r2.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $r5 = r2.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        $z0 = staticinvoke <org.apache.flink.types.RowUtils: boolean deepEqualsRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap,org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>($r12, $r11, $r10, $r9, $r8, $r7, $r6, $r5);

        return $z0;
    }

    public int hashCode()
    {
        org.apache.flink.types.Row r0;
        java.util.Map $r1;
        java.lang.Object[] $r2;
        org.apache.flink.types.RowKind $r3;
        int $i0;

        r0 := @this: org.apache.flink.types.Row;

        $r3 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $r2 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r1 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        $i0 = staticinvoke <org.apache.flink.types.RowUtils: int deepHashCodeRow(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map)>($r3, $r2, $r1);

        return $i0;
    }

    public static transient org.apache.flink.types.Row of(java.lang.Object[])
    {
        java.lang.Object[] r0;
        org.apache.flink.types.Row $r2;
        int $i0, $i1, i2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.Object[];

        $r2 = new org.apache.flink.types.Row;

        $i0 = lengthof r0;

        specialinvoke $r2.<org.apache.flink.types.Row: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = r0[i2];

        virtualinvoke $r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i2, $r3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public static transient org.apache.flink.types.Row ofKind(org.apache.flink.types.RowKind, java.lang.Object[])
    {
        org.apache.flink.types.RowKind r0;
        java.lang.Object[] r1;
        org.apache.flink.types.Row $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4;

        r0 := @parameter0: org.apache.flink.types.RowKind;

        r1 := @parameter1: java.lang.Object[];

        $r3 = new org.apache.flink.types.Row;

        $i0 = lengthof r1;

        specialinvoke $r3.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>(r0, $i0);

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r4 = r1[i2];

        virtualinvoke $r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i2, $r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static org.apache.flink.types.Row copy(org.apache.flink.types.Row)
    {
        org.apache.flink.types.Row r0, $r3;
        java.lang.Object[] $r1, $r8, $r9, r10;
        java.util.Map $r2, $r7;
        java.util.LinkedHashMap $r4;
        org.apache.flink.types.RowKind $r5;
        java.util.HashMap $r6, r11;
        int $i0, $i1;

        r0 := @parameter0: org.apache.flink.types.Row;

        $r1 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r1 == null goto label1;

        $r8 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i0 = lengthof $r8;

        r10 = newarray (java.lang.Object)[$i0];

        $r9 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i1 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r10, 0, $i1);

        goto label2;

     label1:
        r10 = null;

     label2:
        $r2 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        if $r2 == null goto label3;

        $r6 = new java.util.HashMap;

        $r7 = r0.<org.apache.flink.types.Row: java.util.Map fieldByName>;

        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>($r7);

        r11 = $r6;

        goto label4;

     label3:
        r11 = null;

     label4:
        $r3 = new org.apache.flink.types.Row;

        $r5 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $r4 = r0.<org.apache.flink.types.Row: java.util.LinkedHashMap positionByName>;

        specialinvoke $r3.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,java.lang.Object[],java.util.Map,java.util.LinkedHashMap)>($r5, r10, r11, $r4);

        return $r3;
    }

    public static org.apache.flink.types.Row project(org.apache.flink.types.Row, int[])
    {
        org.apache.flink.types.Row r0, r2;
        int[] r1;
        int $i0, $i1, $i2, i3;
        org.apache.flink.types.RowKind $r3;
        java.lang.Object $r4;

        r0 := @parameter0: org.apache.flink.types.Row;

        r1 := @parameter1: int[];

        $r3 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        $i0 = lengthof r1;

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withPositions(org.apache.flink.types.RowKind,int)>($r3, $i0);

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $i2 = r1[i3];

        $r4 = virtualinvoke r0.<org.apache.flink.types.Row: java.lang.Object getField(int)>($i2);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static org.apache.flink.types.Row project(org.apache.flink.types.Row, java.lang.String[])
    {
        org.apache.flink.types.Row r0, r2;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r4;
        org.apache.flink.types.RowKind $r5;
        java.lang.Object $r6;

        r0 := @parameter0: org.apache.flink.types.Row;

        r1 := @parameter1: java.lang.String[];

        $r5 = virtualinvoke r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind getKind()>();

        r2 = staticinvoke <org.apache.flink.types.Row: org.apache.flink.types.Row withNames(org.apache.flink.types.RowKind)>($r5);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1[i1];

        $r6 = virtualinvoke r0.<org.apache.flink.types.Row: java.lang.Object getField(java.lang.String)>(r4);

        virtualinvoke r2.<org.apache.flink.types.Row: void setField(java.lang.String,java.lang.Object)>(r4, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static transient org.apache.flink.types.Row join(org.apache.flink.types.Row, org.apache.flink.types.Row[])
    {
        org.apache.flink.types.Row r0, r2, $r5, r22;
        org.apache.flink.types.Row[] r1;
        java.lang.Object[] $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r19, $r20;
        org.apache.flink.types.RowKind $r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i9, i10, i11;
        java.lang.AssertionError $r16, $r18;

        r0 := @parameter0: org.apache.flink.types.Row;

        r1 := @parameter1: org.apache.flink.types.Row[];

        $r3 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r3 == null goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "All rows must operate in position-based field mode.");

        $r4 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        i5 = lengthof $r4;

        i6 = lengthof r1;

        i7 = 0;

     label03:
        if i7 >= i6 goto label06;

        r22 = r1[i7];

        $r19 = r22.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r19 == null goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, "All rows must operate in position-based field mode.");

        $r20 = r22.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i4 = lengthof $r20;

        i5 = i5 + $i4;

        i7 = i7 + 1;

        goto label03;

     label06:
        $r5 = new org.apache.flink.types.Row;

        $r6 = r0.<org.apache.flink.types.Row: org.apache.flink.types.RowKind kind>;

        specialinvoke $r5.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>($r6, i5);

        $z0 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z0 != 0 goto label07;

        $r17 = $r5.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r17 != null goto label07;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label07:
        $r9 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r8 = $r5.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r7 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i0 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, 0, $i0);

        $r10 = r0.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i1 = lengthof $r10;

        i9 = 0 + $i1;

        i10 = lengthof r1;

        i11 = 0;

     label08:
        if i11 >= i10 goto label10;

        r2 = r1[i11];

        $z1 = <org.apache.flink.types.Row: boolean $assertionsDisabled>;

        if $z1 != 0 goto label09;

        $r15 = r2.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        if $r15 != null goto label09;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label09:
        $r13 = r2.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r12 = $r5.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $r11 = r2.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i2 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, $r12, i9, $i2);

        $r14 = r2.<org.apache.flink.types.Row: java.lang.Object[] fieldByPosition>;

        $i3 = lengthof $r14;

        i9 = i9 + $i3;

        i11 = i11 + 1;

        goto label08;

     label10:
        return $r5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.flink.types.Row: long serialVersionUID> = 3L;

        $r0 = class "Lorg/apache/flink/types/Row;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.types.Row: boolean $assertionsDisabled> = $z1;

        return;
    }
}
