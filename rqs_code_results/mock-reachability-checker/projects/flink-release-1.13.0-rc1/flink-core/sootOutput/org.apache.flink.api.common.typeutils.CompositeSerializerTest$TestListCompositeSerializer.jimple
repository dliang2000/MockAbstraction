class org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer extends org.apache.flink.api.common.typeutils.CompositeSerializer
{

    transient void <init>(boolean, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        boolean z0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: void <init>(boolean,org.apache.flink.api.common.typeutils.TypeSerializer[])>(z0, r1);

        return;
    }

    transient void <init>(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters,org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1, r2);

        return;
    }

    public transient java.util.List createInstance(java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.lang.Object[] r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        return $r2;
    }

    protected void setField(java.util.List, int, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.util.List r1;
        int i0;
        java.lang.Object r2;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r3;
        boolean $z0;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r3.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutable>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Type is immutable");

        throw $r5;

     label1:
        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r2);

        return;
    }

    protected java.lang.Object getField(java.util.List, int)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.util.List r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        return $r2;
    }

    protected transient org.apache.flink.api.common.typeutils.CompositeSerializer createSerializerInstance(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters, org.apache.flink.api.common.typeutils.TypeSerializer[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0, $r3;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        $r3 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters,org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1, r2);

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot $r1;
        org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        $r1 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot;

        $r2 = r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters precomputed>;

        $z0 = $r2.<org.apache.flink.api.common.typeutils.CompositeSerializer$PrecomputedParameters: boolean immutableTargetType>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializerSnapshot: void <init>(org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer,boolean)>(r0, $z0);

        return $r1;
    }

    protected volatile java.lang.Object getField(java.lang.Object, int)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.lang.Object r1, $r3;
        int i0;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (java.util.List) r1;

        $r3 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: java.lang.Object getField(java.util.List,int)>($r2, i0);

        return $r3;
    }

    protected volatile void setField(java.lang.Object, int, java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.lang.Object r1, r2;
        int i0;
        java.util.List $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = (java.util.List) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: void setField(java.util.List,int,java.lang.Object)>($r3, i0, r2);

        return;
    }

    public volatile java.lang.Object createInstance(java.lang.Object[])
    {
        org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer r0;
        java.lang.Object[] r1;
        java.util.List $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer;

        r1 := @parameter0: java.lang.Object[];

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeSerializerTest$TestListCompositeSerializer: java.util.List createInstance(java.lang.Object[])>(r1);

        return $r2;
    }
}
