public class javassist.bytecode.stackmap.MapMaker extends javassist.bytecode.stackmap.Tracer
{

    public static javassist.bytecode.StackMapTable make(javassist.ClassPool, javassist.bytecode.MethodInfo) throws javassist.bytecode.BadBytecode
    {
        javassist.ClassPool r0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.stackmap.TypedBlock[] r3;
        javassist.bytecode.stackmap.MapMaker $r5;
        byte[] $r6;
        javassist.bytecode.StackMapTable $r7;
        javassist.bytecode.BadBytecode $r8, $r9;
        javassist.bytecode.stackmap.BasicBlock$JsrBytecode $r10;

        r0 := @parameter0: javassist.ClassPool;

        r1 := @parameter1: javassist.bytecode.MethodInfo;

        r2 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 != null goto label1;

        return null;

     label1:
        r3 = staticinvoke <javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)>(r1, r2, 1);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        return null;

     label4:
        if r3 != null goto label5;

        return null;

     label5:
        $r5 = new javassist.bytecode.stackmap.MapMaker;

        specialinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void <init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute)>(r0, r1, r2);

     label6:
        $r6 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: byte[] getCode()>();

        virtualinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void make(javassist.bytecode.stackmap.TypedBlock[],byte[])>(r3, $r6);

     label7:
        goto label9;

     label8:
        $r8 := @caughtexception;

        $r9 = new javassist.bytecode.BadBytecode;

        specialinvoke $r9.<javassist.bytecode.BadBytecode: void <init>(javassist.bytecode.MethodInfo,java.lang.Throwable)>(r1, $r8);

        throw $r9;

     label9:
        $r7 = virtualinvoke $r5.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMapTable toStackMap(javassist.bytecode.stackmap.TypedBlock[])>(r3);

        return $r7;

        catch javassist.bytecode.stackmap.BasicBlock$JsrBytecode from label1 to label2 with label3;
        catch javassist.bytecode.BadBytecode from label6 to label7 with label8;
    }

    public static javassist.bytecode.StackMap make2(javassist.ClassPool, javassist.bytecode.MethodInfo) throws javassist.bytecode.BadBytecode
    {
        javassist.ClassPool r0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.CodeAttribute r2;
        javassist.bytecode.stackmap.TypedBlock[] r3;
        javassist.bytecode.stackmap.MapMaker $r5;
        byte[] $r6;
        javassist.bytecode.ConstPool $r7;
        javassist.bytecode.StackMap $r8;
        javassist.bytecode.stackmap.BasicBlock$JsrBytecode $r9;
        javassist.bytecode.BadBytecode $r10, $r11;

        r0 := @parameter0: javassist.ClassPool;

        r1 := @parameter1: javassist.bytecode.MethodInfo;

        r2 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.CodeAttribute getCodeAttribute()>();

        if r2 != null goto label1;

        return null;

     label1:
        r3 = staticinvoke <javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypedBlock[] makeBlocks(javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute,boolean)>(r1, r2, 1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        return null;

     label4:
        if r3 != null goto label5;

        return null;

     label5:
        $r5 = new javassist.bytecode.stackmap.MapMaker;

        specialinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void <init>(javassist.ClassPool,javassist.bytecode.MethodInfo,javassist.bytecode.CodeAttribute)>(r0, r1, r2);

     label6:
        $r6 = virtualinvoke r2.<javassist.bytecode.CodeAttribute: byte[] getCode()>();

        virtualinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void make(javassist.bytecode.stackmap.TypedBlock[],byte[])>(r3, $r6);

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        $r11 = new javassist.bytecode.BadBytecode;

        specialinvoke $r11.<javassist.bytecode.BadBytecode: void <init>(javassist.bytecode.MethodInfo,java.lang.Throwable)>(r1, $r10);

        throw $r11;

     label9:
        $r7 = virtualinvoke r1.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $r8 = virtualinvoke $r5.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.StackMap toStackMap2(javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypedBlock[])>($r7, r3);

        return $r8;

        catch javassist.bytecode.stackmap.BasicBlock$JsrBytecode from label1 to label2 with label3;
        catch javassist.bytecode.BadBytecode from label6 to label7 with label8;
    }

    public void <init>(javassist.ClassPool, javassist.bytecode.MethodInfo, javassist.bytecode.CodeAttribute)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.ClassPool r1;
        javassist.bytecode.MethodInfo r2;
        javassist.bytecode.CodeAttribute r3;
        javassist.bytecode.ConstPool $r4;
        int $i0, $i1;
        java.lang.String $r5, $r6;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.ClassPool;

        r2 := @parameter1: javassist.bytecode.MethodInfo;

        r3 := @parameter2: javassist.bytecode.CodeAttribute;

        $r4 = virtualinvoke r2.<javassist.bytecode.MethodInfo: javassist.bytecode.ConstPool getConstPool()>();

        $i0 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxStack()>();

        $i1 = virtualinvoke r3.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $r5 = virtualinvoke r2.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r6 = staticinvoke <javassist.bytecode.stackmap.TypedBlock: java.lang.String getRetType(java.lang.String)>($r5);

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void <init>(javassist.ClassPool,javassist.bytecode.ConstPool,int,int,java.lang.String)>(r1, $r4, $i0, $i1, $r6);

        return;
    }

    protected void <init>(javassist.bytecode.stackmap.MapMaker)
    {
        javassist.bytecode.stackmap.MapMaker r0, r1;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.MapMaker;

        specialinvoke r0.<javassist.bytecode.stackmap.Tracer: void <init>(javassist.bytecode.stackmap.Tracer)>(r1);

        return;
    }

    void make(javassist.bytecode.stackmap.TypedBlock[], byte[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock[] r1;
        byte[] r2;
        javassist.bytecode.stackmap.TypedBlock $r4;
        javassist.NotFoundException $r5;
        javassist.bytecode.BadBytecode $r6;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock[];

        r2 := @parameter1: byte[];

        $r4 = r1[0];

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void make(byte[],javassist.bytecode.stackmap.TypedBlock)>(r2, $r4);

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void findDeadCatchers(byte[],javassist.bytecode.stackmap.TypedBlock[])>(r2, r1);

     label1:
        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void fixTypes(byte[],javassist.bytecode.stackmap.TypedBlock[])>(r2, r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new javassist.bytecode.BadBytecode;

        specialinvoke $r6.<javassist.bytecode.BadBytecode: void <init>(java.lang.String,java.lang.Throwable)>("failed to resolve types", $r5);

        throw $r6;

     label4:
        return;

        catch javassist.NotFoundException from label1 to label2 with label3;
    }

    private void make(byte[], javassist.bytecode.stackmap.TypedBlock) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0, $r15;
        byte[] r1;
        javassist.bytecode.stackmap.TypedBlock r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        javassist.bytecode.stackmap.TypeData[] $r5, $r6, $r7, $r8, $r9;
        javassist.bytecode.stackmap.BasicBlock$Catch $r10, $r16;
        javassist.bytecode.stackmap.BasicBlock[] $r11, $r12, $r13;
        javassist.bytecode.stackmap.BasicBlock $r14;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: byte[];

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock;

        $i1 = r2.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        $r6 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r5 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        staticinvoke <javassist.bytecode.stackmap.MapMaker: void copyTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])>($i1, $r6, $r5);

        $i2 = r2.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        r0.<javassist.bytecode.stackmap.MapMaker: int stackTop> = $i2;

        $r7 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i3 = lengthof $r7;

        $r9 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r8 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        staticinvoke <javassist.bytecode.stackmap.MapMaker: void copyTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])>($i3, $r9, $r8);

        $r10 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock$Catch toCatch>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void traceException(byte[],javassist.bytecode.stackmap.BasicBlock$Catch)>(r1, $r10);

        i7 = r2.<javassist.bytecode.stackmap.TypedBlock: int position>;

        $i4 = r2.<javassist.bytecode.stackmap.TypedBlock: int length>;

        i0 = i7 + $i4;

     label1:
        if i7 >= i0 goto label2;

        $i6 = virtualinvoke r0.<javassist.bytecode.stackmap.MapMaker: int doOpcode(int,byte[])>(i7, r1);

        i7 = i7 + $i6;

        $r16 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock$Catch toCatch>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void traceException(byte[],javassist.bytecode.stackmap.BasicBlock$Catch)>(r1, $r16);

        goto label1;

     label2:
        $r11 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock[] exit>;

        if $r11 == null goto label6;

        i8 = 0;

     label3:
        $r12 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock[] exit>;

        $i5 = lengthof $r12;

        if i8 >= $i5 goto label6;

        $r13 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock[] exit>;

        $r14 = $r13[i8];

        r3 = (javassist.bytecode.stackmap.TypedBlock) $r14;

        $z0 = virtualinvoke r3.<javassist.bytecode.stackmap.TypedBlock: boolean alreadySet()>();

        if $z0 == 0 goto label4;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean)>(r3, 1);

        goto label5;

     label4:
        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap(javassist.bytecode.stackmap.TypedBlock)>(r3);

        $r15 = new javassist.bytecode.stackmap.MapMaker;

        specialinvoke $r15.<javassist.bytecode.stackmap.MapMaker: void <init>(javassist.bytecode.stackmap.MapMaker)>(r0);

        specialinvoke $r15.<javassist.bytecode.stackmap.MapMaker: void make(byte[],javassist.bytecode.stackmap.TypedBlock)>(r1, r3);

     label5:
        i8 = i8 + 1;

        goto label3;

     label6:
        return;
    }

    private void traceException(byte[], javassist.bytecode.stackmap.BasicBlock$Catch) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0, $r5;
        byte[] r1;
        javassist.bytecode.stackmap.TypedBlock r2;
        javassist.bytecode.stackmap.BasicBlock $r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        javassist.bytecode.stackmap.TypeData[] $r6, $r8;
        javassist.bytecode.stackmap.TypeData$ClassName $r7;
        javassist.bytecode.stackmap.TypeData $r9, $r10;
        javassist.bytecode.BadBytecode $r11;
        java.lang.StringBuilder $r12, $r13, $r14;
        java.lang.String $r15;
        javassist.bytecode.stackmap.BasicBlock$Catch r16;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: byte[];

        r16 := @parameter1: javassist.bytecode.stackmap.BasicBlock$Catch;

     label1:
        if r16 == null goto label5;

        $r4 = r16.<javassist.bytecode.stackmap.BasicBlock$Catch: javassist.bytecode.stackmap.BasicBlock body>;

        r2 = (javassist.bytecode.stackmap.TypedBlock) $r4;

        $z0 = virtualinvoke r2.<javassist.bytecode.stackmap.TypedBlock: boolean alreadySet()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void mergeMap(javassist.bytecode.stackmap.TypedBlock,boolean)>(r2, 0);

        $i1 = r2.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        if $i1 >= 1 goto label2;

        $r11 = new javassist.bytecode.BadBytecode;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad catch clause: ");

        $i3 = r16.<javassist.bytecode.stackmap.BasicBlock$Catch: int typeIndex>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<javassist.bytecode.BadBytecode: void <init>(java.lang.String)>($r15);

        throw $r11;

     label2:
        $r6 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i2 = r16.<javassist.bytecode.stackmap.BasicBlock$Catch: int typeIndex>;

        $r7 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData$ClassName toExceptionType(int)>($i2);

        $r8 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r9 = $r8[0];

        $r10 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)>($r7, $r9);

        $r6[0] = $r10;

        goto label4;

     label3:
        $i0 = r16.<javassist.bytecode.stackmap.BasicBlock$Catch: int typeIndex>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)>(r2, $i0);

        $r5 = new javassist.bytecode.stackmap.MapMaker;

        specialinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void <init>(javassist.bytecode.stackmap.MapMaker)>(r0);

        specialinvoke $r5.<javassist.bytecode.stackmap.MapMaker: void make(byte[],javassist.bytecode.stackmap.TypedBlock)>(r1, r2);

     label4:
        r16 = r16.<javassist.bytecode.stackmap.BasicBlock$Catch: javassist.bytecode.stackmap.BasicBlock$Catch next>;

        goto label1;

     label5:
        return;
    }

    private void mergeMap(javassist.bytecode.stackmap.TypedBlock, boolean) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock r1;
        boolean z0;
        javassist.bytecode.stackmap.TypeData[] $r2, $r3, $r4, $r7, $r9, $r10, $r12;
        javassist.bytecode.stackmap.TypeData $r5, $r6, $r8, $r11, $r13, $r14;
        int i0, i1, i2, i3;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock;

        z0 := @parameter1: boolean;

        $r2 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i0 = lengthof $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r10 = r1.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r9 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r11 = staticinvoke <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int)>($r9, i0, i1);

        $r12 = r1.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r13 = $r12[i1];

        $r14 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)>($r11, $r13);

        $r10[i1] = $r14;

        i1 = i1 + 1;

        goto label1;

     label2:
        if z0 == 0 goto label4;

        i2 = r0.<javassist.bytecode.stackmap.MapMaker: int stackTop>;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $r7 = r1.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r3 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r6 = $r3[i3];

        $r4 = r1.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r5 = $r4[i3];

        $r8 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData,javassist.bytecode.stackmap.TypeData)>($r6, $r5);

        $r7[i3] = $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    private javassist.bytecode.stackmap.TypeData merge(javassist.bytecode.stackmap.TypeData, javassist.bytecode.stackmap.TypeData) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypeData r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r3;
        javassist.bytecode.stackmap.TypeData$AbsTypeVar $r4;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypeData;

        r2 := @parameter1: javassist.bytecode.stackmap.TypeData;

        if r1 != r2 goto label1;

        return r2;

     label1:
        $z0 = r2 instanceof javassist.bytecode.stackmap.TypeData$ClassName;

        if $z0 != 0 goto label2;

        $z1 = r2 instanceof javassist.bytecode.stackmap.TypeData$BasicType;

        if $z1 == 0 goto label3;

     label2:
        return r2;

     label3:
        $z2 = r2 instanceof javassist.bytecode.stackmap.TypeData$AbsTypeVar;

        if $z2 == 0 goto label4;

        $r4 = (javassist.bytecode.stackmap.TypeData$AbsTypeVar) r2;

        virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData$AbsTypeVar: void merge(javassist.bytecode.stackmap.TypeData)>(r1);

        return r2;

     label4:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("fatal: this should never happen");

        throw $r3;
    }

    private void recordStackMap(javassist.bytecode.stackmap.TypedBlock) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock r1;
        javassist.bytecode.stackmap.TypeData[] r2, $r3, $r4;
        int i0, $i1;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock;

        $r3 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = lengthof $r3;

        r2 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>($i1);

        i0 = r0.<javassist.bytecode.stackmap.MapMaker: int stackTop>;

        $r4 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        staticinvoke <javassist.bytecode.stackmap.MapMaker: int recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])>(i0, $r4, r2);

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[])>(r1, i0, r2);

        return;
    }

    private void recordStackMap(javassist.bytecode.stackmap.TypedBlock, int) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock r1;
        int i0, $i1;
        javassist.bytecode.stackmap.TypeData[] r2, $r3;
        javassist.bytecode.stackmap.TypeData$ClassName $r4;
        javassist.bytecode.stackmap.TypeData $r5;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter1: int;

        $r3 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i1 = lengthof $r3;

        r2 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>($i1);

        $r4 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData$ClassName toExceptionType(int)>(i0);

        $r5 = virtualinvoke $r4.<javassist.bytecode.stackmap.TypeData$ClassName: javassist.bytecode.stackmap.TypeData join()>();

        r2[0] = $r5;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap0(javassist.bytecode.stackmap.TypedBlock,int,javassist.bytecode.stackmap.TypeData[])>(r1, 1, r2);

        return;
    }

    private javassist.bytecode.stackmap.TypeData$ClassName toExceptionType(int)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        int i0;
        javassist.bytecode.ConstPool $r1;
        javassist.bytecode.stackmap.TypeData$ClassName $r2;
        java.lang.String r3;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        r3 = "java.lang.Throwable";

        goto label2;

     label1:
        $r1 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.ConstPool cpool>;

        r3 = virtualinvoke $r1.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i0);

     label2:
        $r2 = new javassist.bytecode.stackmap.TypeData$ClassName;

        specialinvoke $r2.<javassist.bytecode.stackmap.TypeData$ClassName: void <init>(java.lang.String)>(r3);

        return $r2;
    }

    private void recordStackMap0(javassist.bytecode.stackmap.TypedBlock, int, javassist.bytecode.stackmap.TypeData[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock r1;
        int i0, i1, i2;
        javassist.bytecode.stackmap.TypeData[] r2, r3, $r4, $r5;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter1: int;

        r2 := @parameter2: javassist.bytecode.stackmap.TypeData[];

        $r4 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i1 = lengthof $r4;

        r3 = staticinvoke <javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData[] make(int)>(i1);

        $r5 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i2 = staticinvoke <javassist.bytecode.stackmap.MapMaker: int recordTypeData(int,javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[])>(i1, $r5, r3);

        virtualinvoke r1.<javassist.bytecode.stackmap.TypedBlock: void setStackMap(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[])>(i0, r2, i2, r3);

        return;
    }

    protected static int recordTypeData(int, javassist.bytecode.stackmap.TypeData[], javassist.bytecode.stackmap.TypeData[])
    {
        int i0, $i1, i2, i3;
        javassist.bytecode.stackmap.TypeData[] r0, r1;
        javassist.bytecode.stackmap.TypeData r2, $r3;
        javassist.bytecode.stackmap.TypeData$BasicType $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: javassist.bytecode.stackmap.TypeData[];

        r1 := @parameter2: javassist.bytecode.stackmap.TypeData[];

        i2 = -1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r2 = staticinvoke <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData validateTypeData(javassist.bytecode.stackmap.TypeData[],int,int)>(r0, i0, i3);

        $r3 = virtualinvoke r2.<javassist.bytecode.stackmap.TypeData: javassist.bytecode.stackmap.TypeData join()>();

        r1[i3] = $r3;

        $r4 = <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        if r2 == $r4 goto label2;

        i2 = i3 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i1 = i2 + 1;

        return $i1;
    }

    protected static void copyTypeData(int, javassist.bytecode.stackmap.TypeData[], javassist.bytecode.stackmap.TypeData[])
    {
        int i0, i1;
        javassist.bytecode.stackmap.TypeData[] r0, r1;
        javassist.bytecode.stackmap.TypeData $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: javassist.bytecode.stackmap.TypeData[];

        r1 := @parameter2: javassist.bytecode.stackmap.TypeData[];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r0[i1];

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static javassist.bytecode.stackmap.TypeData validateTypeData(javassist.bytecode.stackmap.TypeData[], int, int)
    {
        javassist.bytecode.stackmap.TypeData[] r0;
        int i0, i1, $i2, $i3;
        javassist.bytecode.stackmap.TypeData r1, $r3;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData$BasicType $r2, $r4;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = r0[i1];

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label1;

        $i2 = i1 + 1;

        if $i2 >= i0 goto label1;

        $i3 = i1 + 1;

        $r3 = r0[$i3];

        $r2 = <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        if $r3 == $r2 goto label1;

        $r4 = <javassist.bytecode.stackmap.MapMaker: javassist.bytecode.stackmap.TypeData$BasicType TOP>;

        return $r4;

     label1:
        return r1;
    }

    private void findDeadCatchers(byte[], javassist.bytecode.stackmap.TypedBlock[]) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        byte[] r1;
        javassist.bytecode.stackmap.TypedBlock[] r2;
        int i0, $i1, i2;
        javassist.bytecode.stackmap.TypedBlock r3, r5;
        javassist.bytecode.stackmap.BasicBlock$Catch r4;
        boolean $z0, $z1;
        javassist.bytecode.stackmap.BasicBlock $r6;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: byte[];

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock[];

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        $z0 = virtualinvoke r3.<javassist.bytecode.stackmap.TypedBlock: boolean alreadySet()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock)>(r1, r3);

        r4 = r3.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.BasicBlock$Catch toCatch>;

        if r4 == null goto label2;

        $r6 = r4.<javassist.bytecode.stackmap.BasicBlock$Catch: javassist.bytecode.stackmap.BasicBlock body>;

        r5 = (javassist.bytecode.stackmap.TypedBlock) $r6;

        $z1 = virtualinvoke r5.<javassist.bytecode.stackmap.TypedBlock: boolean alreadySet()>();

        if $z1 != 0 goto label2;

        $i1 = r4.<javassist.bytecode.stackmap.BasicBlock$Catch: int typeIndex>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)>(r5, $i1);

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void fixDeadcode(byte[],javassist.bytecode.stackmap.TypedBlock)>(r1, r5);

        r5.<javassist.bytecode.stackmap.TypedBlock: int incoming> = 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private void fixDeadcode(byte[], javassist.bytecode.stackmap.TypedBlock) throws javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        byte[] r1;
        javassist.bytecode.stackmap.TypedBlock r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: byte[];

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock;

        i0 = r2.<javassist.bytecode.stackmap.TypedBlock: int position>;

        $i2 = r2.<javassist.bytecode.stackmap.TypedBlock: int length>;

        i1 = $i2 - 3;

        if i1 >= 0 goto label2;

        if i1 != -1 goto label1;

        r1[i0] = 0;

     label1:
        $i8 = r2.<javassist.bytecode.stackmap.TypedBlock: int length>;

        $i9 = i0 + $i8;

        $i10 = $i9 - 1;

        r1[$i10] = -65;

        r2.<javassist.bytecode.stackmap.TypedBlock: int incoming> = 1;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void recordStackMap(javassist.bytecode.stackmap.TypedBlock,int)>(r2, 0);

        return;

     label2:
        r2.<javassist.bytecode.stackmap.TypedBlock: int incoming> = 0;

        i11 = 0;

     label3:
        if i11 >= i1 goto label4;

        $i7 = i0 + i11;

        r1[$i7] = 0;

        i11 = i11 + 1;

        goto label3;

     label4:
        $i3 = i0 + i1;

        r1[$i3] = -89;

        $i6 = neg i1;

        $i4 = i0 + i1;

        $i5 = $i4 + 1;

        staticinvoke <javassist.bytecode.ByteArray: void write16bit(int,byte[],int)>($i6, r1, $i5);

        return;
    }

    private void fixTypes(byte[], javassist.bytecode.stackmap.TypedBlock[]) throws javassist.NotFoundException, javassist.bytecode.BadBytecode
    {
        javassist.bytecode.stackmap.MapMaker r0;
        byte[] r1;
        javassist.bytecode.stackmap.TypedBlock[] r2;
        int i0, i1, i2, i3, i4, i5, i6;
        javassist.bytecode.stackmap.TypedBlock r4;
        java.util.ArrayList $r5;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData[] $r6, $r7, $r10;
        javassist.ClassPool $r8, $r11;
        javassist.bytecode.stackmap.TypeData $r9, $r12;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: byte[];

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock[];

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r2;

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

        r4 = r2[i2];

        $z0 = virtualinvoke r4.<javassist.bytecode.stackmap.TypedBlock: boolean alreadySet()>();

        if $z0 == 0 goto label5;

        $r6 = r4.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i3 = lengthof $r6;

        i4 = 0;

     label2:
        if i4 >= i3 goto label3;

        $r10 = r4.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $r12 = $r10[i4];

        $r11 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.ClassPool classPool>;

        i1 = virtualinvoke $r12.<javassist.bytecode.stackmap.TypeData: int dfs(java.util.List,int,javassist.ClassPool)>($r5, i1, $r11);

        i4 = i4 + 1;

        goto label2;

     label3:
        i5 = r4.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        i6 = 0;

     label4:
        if i6 >= i5 goto label5;

        $r7 = r4.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $r9 = $r7[i6];

        $r8 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.ClassPool classPool>;

        i1 = virtualinvoke $r9.<javassist.bytecode.stackmap.TypeData: int dfs(java.util.List,int,javassist.ClassPool)>($r5, i1, $r8);

        i6 = i6 + 1;

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }

    public javassist.bytecode.StackMapTable toStackMap(javassist.bytecode.stackmap.TypedBlock[])
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        javassist.bytecode.stackmap.TypedBlock r3, $r7, r10;
        javassist.bytecode.StackMapTable$Writer $r4;
        javassist.bytecode.ConstPool $r5;
        javassist.bytecode.StackMapTable $r6;
        boolean $z0;
        javassist.bytecode.stackmap.TypeData[] $r8, $r9;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock[];

        $r4 = new javassist.bytecode.StackMapTable$Writer;

        specialinvoke $r4.<javassist.bytecode.StackMapTable$Writer: void <init>(int)>(32);

        i0 = lengthof r1;

        r10 = r1[0];

        i10 = r10.<javassist.bytecode.stackmap.TypedBlock: int length>;

        $i2 = r10.<javassist.bytecode.stackmap.TypedBlock: int incoming>;

        if $i2 <= 0 goto label1;

        virtualinvoke $r4.<javassist.bytecode.StackMapTable$Writer: void sameFrame(int)>(0);

        i10 = i10 + -1;

     label1:
        i11 = 1;

     label2:
        if i11 >= i0 goto label6;

        r3 = r1[i11];

        $i3 = i11 - 1;

        $r7 = r1[$i3];

        $z0 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: boolean isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock)>(r3, $r7);

        if $z0 == 0 goto label3;

        virtualinvoke r3.<javassist.bytecode.stackmap.TypedBlock: void resetNumLocals()>();

        $i8 = r10.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $r9 = r10.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i7 = r3.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $r8 = r3.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        i1 = staticinvoke <javassist.bytecode.stackmap.MapMaker: int stackMapDiff(int,javassist.bytecode.stackmap.TypeData[],int,javassist.bytecode.stackmap.TypeData[])>($i8, $r9, $i7, $r8);

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void toStackMapBody(javassist.bytecode.StackMapTable$Writer,javassist.bytecode.stackmap.TypedBlock,int,int,javassist.bytecode.stackmap.TypedBlock)>($r4, r3, i1, i10, r10);

        $i9 = r3.<javassist.bytecode.stackmap.TypedBlock: int length>;

        i10 = $i9 - 1;

        r10 = r3;

        goto label5;

     label3:
        $i4 = r3.<javassist.bytecode.stackmap.TypedBlock: int incoming>;

        if $i4 != 0 goto label4;

        virtualinvoke $r4.<javassist.bytecode.StackMapTable$Writer: void sameFrame(int)>(i10);

        $i6 = r3.<javassist.bytecode.stackmap.TypedBlock: int length>;

        i10 = $i6 - 1;

        goto label5;

     label4:
        $i5 = r3.<javassist.bytecode.stackmap.TypedBlock: int length>;

        i10 = i10 + $i5;

     label5:
        i11 = i11 + 1;

        goto label2;

     label6:
        $r5 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.ConstPool cpool>;

        $r6 = virtualinvoke $r4.<javassist.bytecode.StackMapTable$Writer: javassist.bytecode.StackMapTable toStackMapTable(javassist.bytecode.ConstPool)>($r5);

        return $r6;
    }

    private boolean isTarget(javassist.bytecode.stackmap.TypedBlock, javassist.bytecode.stackmap.TypedBlock)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.stackmap.TypedBlock r1, r2;
        int i0;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.stackmap.TypedBlock;

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock;

        i0 = r1.<javassist.bytecode.stackmap.TypedBlock: int incoming>;

        if i0 <= 1 goto label1;

        return 1;

     label1:
        if i0 >= 1 goto label2;

        return 0;

     label2:
        $z0 = r2.<javassist.bytecode.stackmap.TypedBlock: boolean stop>;

        return $z0;
    }

    private void toStackMapBody(javassist.bytecode.StackMapTable$Writer, javassist.bytecode.stackmap.TypedBlock, int, int, javassist.bytecode.stackmap.TypedBlock)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.StackMapTable$Writer r1;
        javassist.bytecode.stackmap.TypedBlock r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r4, r5, r11, r12, r15, r17;
        javassist.bytecode.stackmap.TypeData[] $r6, $r8, $r10, $r16, $r18;
        boolean $z0;
        javassist.bytecode.ConstPool $r7, $r9;
        javassist.bytecode.stackmap.TypeData r13, r14;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.StackMapTable$Writer;

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: javassist.bytecode.stackmap.TypedBlock;

        i2 = r2.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        if i2 != 0 goto label3;

        if i0 != 0 goto label1;

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void sameFrame(int)>(i1);

        return;

     label1:
        if 0 <= i0 goto label2;

        if i0 < -3 goto label2;

        $i11 = neg i0;

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void chopFrame(int,int)>(i1, $i11);

        return;

     label2:
        if 0 >= i0 goto label5;

        if i0 > 3 goto label5;

        r11 = newarray (int)[i0];

        $i8 = r2.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $i7 = r3.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $i10 = $i8 - $i7;

        $i9 = r3.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $r10 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        r12 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: int[] fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[])>($i10, $i9, r11, $r10);

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void appendFrame(int,int[],int[])>(i1, r12, r11);

        return;

     label3:
        if i2 != 1 goto label4;

        if i0 != 0 goto label4;

        $r8 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        r13 = $r8[0];

        $i5 = virtualinvoke r13.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        $r9 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.ConstPool cpool>;

        $i6 = virtualinvoke r13.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>($r9);

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void sameLocals(int,int,int)>(i1, $i5, $i6);

        return;

     label4:
        if i2 != 2 goto label5;

        if i0 != 0 goto label5;

        $r6 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        r14 = $r6[0];

        $z0 = virtualinvoke r14.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label5;

        $i3 = virtualinvoke r14.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        $r7 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.ConstPool cpool>;

        $i4 = virtualinvoke r14.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>($r7);

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void sameLocals(int,int,int)>(i1, $i3, $i4);

        return;

     label5:
        r15 = newarray (int)[i2];

        $r16 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        r17 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: int[] fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[])>(i2, 0, r15, $r16);

        $i12 = r2.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        r4 = newarray (int)[$i12];

        $i13 = r2.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        $r18 = r2.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        r5 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: int[] fillStackMap(int,int,int[],javassist.bytecode.stackmap.TypeData[])>($i13, 0, r4, $r18);

        virtualinvoke r1.<javassist.bytecode.StackMapTable$Writer: void fullFrame(int,int[],int[],int[],int[])>(i1, r5, r4, r17, r15);

        return;
    }

    private int[] fillStackMap(int, int, int[], javassist.bytecode.stackmap.TypeData[])
    {
        javassist.bytecode.stackmap.MapMaker r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8;
        int[] r1, r4;
        javassist.bytecode.stackmap.TypeData[] r2;
        javassist.bytecode.ConstPool r3;
        javassist.bytecode.stackmap.TypeData r5;
        boolean $z0;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: javassist.bytecode.stackmap.TypeData[];

        $i3 = i1 + i0;

        i2 = staticinvoke <javassist.bytecode.stackmap.MapMaker: int diffSize(javassist.bytecode.stackmap.TypeData[],int,int)>(r2, i1, $i3);

        r3 = r0.<javassist.bytecode.stackmap.MapMaker: javassist.bytecode.ConstPool cpool>;

        r4 = newarray (int)[i2];

        i7 = 0;

        i8 = 0;

     label1:
        if i8 >= i0 goto label3;

        $i4 = i1 + i8;

        r5 = r2[$i4];

        $i5 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        r4[i7] = $i5;

        $i6 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>(r3);

        r1[i7] = $i6;

        $z0 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label2;

        i8 = i8 + 1;

     label2:
        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label1;

     label3:
        return r4;
    }

    private static int stackMapDiff(int, javassist.bytecode.stackmap.TypeData[], int, javassist.bytecode.stackmap.TypeData[])
    {
        int i0, i1, i2, $i3, $i4, $i5, i6;
        javassist.bytecode.stackmap.TypeData[] r0, r1;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: javassist.bytecode.stackmap.TypeData[];

        i1 := @parameter2: int;

        r1 := @parameter3: javassist.bytecode.stackmap.TypeData[];

        i2 = i1 - i0;

        if i2 <= 0 goto label1;

        i6 = i0;

        goto label2;

     label1:
        i6 = i1;

     label2:
        $z0 = staticinvoke <javassist.bytecode.stackmap.MapMaker: boolean stackMapEq(javassist.bytecode.stackmap.TypeData[],javassist.bytecode.stackmap.TypeData[],int)>(r0, r1, i6);

        if $z0 == 0 goto label4;

        if i2 <= 0 goto label3;

        $i5 = staticinvoke <javassist.bytecode.stackmap.MapMaker: int diffSize(javassist.bytecode.stackmap.TypeData[],int,int)>(r1, i6, i1);

        return $i5;

     label3:
        $i3 = staticinvoke <javassist.bytecode.stackmap.MapMaker: int diffSize(javassist.bytecode.stackmap.TypeData[],int,int)>(r0, i6, i0);

        $i4 = neg $i3;

        return $i4;

     label4:
        return -100;
    }

    private static boolean stackMapEq(javassist.bytecode.stackmap.TypeData[], javassist.bytecode.stackmap.TypeData[], int)
    {
        javassist.bytecode.stackmap.TypeData[] r0, r1;
        int i0, i1;
        javassist.bytecode.stackmap.TypeData $r2, $r3;
        boolean $z0;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData[];

        r1 := @parameter1: javassist.bytecode.stackmap.TypeData[];

        i0 := @parameter2: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0[i1];

        $r2 = r1[i1];

        $z0 = virtualinvoke $r3.<javassist.bytecode.stackmap.TypeData: boolean eq(javassist.bytecode.stackmap.TypeData)>($r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static int diffSize(javassist.bytecode.stackmap.TypeData[], int, int)
    {
        javassist.bytecode.stackmap.TypeData[] r0;
        int i0, $i1, i2, i3;
        javassist.bytecode.stackmap.TypeData r1;
        boolean $z0;

        r0 := @parameter0: javassist.bytecode.stackmap.TypeData[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i3 = 0;

     label1:
        if i2 >= i0 goto label3;

        $i1 = i2;

        i2 = i2 + 1;

        r1 = r0[$i1];

        i3 = i3 + 1;

        $z0 = virtualinvoke r1.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

     label2:
        goto label1;

     label3:
        return i3;
    }

    public javassist.bytecode.StackMap toStackMap2(javassist.bytecode.ConstPool, javassist.bytecode.stackmap.TypedBlock[])
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.ConstPool r1;
        javassist.bytecode.stackmap.TypedBlock[] r2;
        int i0, $i1, $i2, $i3, i6, i7, i8;
        boolean[] r4;
        javassist.bytecode.stackmap.TypedBlock r5, $r8, $r9, $r10, r12;
        javassist.bytecode.StackMap$Writer $r6;
        boolean $z0, $z1, $z2, $z3;
        javassist.bytecode.StackMap $r7;
        byte $b5;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.ConstPool;

        r2 := @parameter1: javassist.bytecode.stackmap.TypedBlock[];

        $r6 = new javassist.bytecode.StackMap$Writer;

        specialinvoke $r6.<javassist.bytecode.StackMap$Writer: void <init>()>();

        i0 = lengthof r2;

        r4 = newarray (boolean)[i0];

        r12 = r2[0];

        $i1 = r12.<javassist.bytecode.stackmap.TypedBlock: int incoming>;

        if $i1 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        r4[0] = $z3;

        $z0 = r4[0];

        if $z0 == 0 goto label03;

        $b5 = 1;

        goto label04;

     label03:
        $b5 = 0;

     label04:
        i6 = $b5;

        i7 = 1;

     label05:
        if i7 >= i0 goto label07;

        r5 = r2[i7];

        $i3 = i7 - 1;

        $r10 = r2[$i3];

        $z2 = specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: boolean isTarget(javassist.bytecode.stackmap.TypedBlock,javassist.bytecode.stackmap.TypedBlock)>(r5, $r10);

        r4[i7] = $z2;

        if $z2 == 0 goto label06;

        virtualinvoke r5.<javassist.bytecode.stackmap.TypedBlock: void resetNumLocals()>();

        i6 = i6 + 1;

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        if i6 != 0 goto label08;

        return null;

     label08:
        virtualinvoke $r6.<javassist.bytecode.StackMap$Writer: void write16bit(int)>(i6);

        i8 = 0;

     label09:
        if i8 >= i0 goto label11;

        $z1 = r4[i8];

        if $z1 == 0 goto label10;

        $r8 = r2[i8];

        $i2 = $r8.<javassist.bytecode.stackmap.TypedBlock: int position>;

        $r9 = r2[i8];

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void writeStackFrame(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,int,javassist.bytecode.stackmap.TypedBlock)>($r6, r1, $i2, $r9);

     label10:
        i8 = i8 + 1;

        goto label09;

     label11:
        $r7 = virtualinvoke $r6.<javassist.bytecode.StackMap$Writer: javassist.bytecode.StackMap toStackMap(javassist.bytecode.ConstPool)>(r1);

        return $r7;
    }

    private void writeStackFrame(javassist.bytecode.StackMap$Writer, javassist.bytecode.ConstPool, int, javassist.bytecode.stackmap.TypedBlock)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.StackMap$Writer r1;
        javassist.bytecode.ConstPool r2;
        int i0, $i1, $i2;
        javassist.bytecode.stackmap.TypedBlock r3;
        javassist.bytecode.stackmap.TypeData[] $r4, $r5;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.StackMap$Writer;

        r2 := @parameter1: javassist.bytecode.ConstPool;

        i0 := @parameter2: int;

        r3 := @parameter3: javassist.bytecode.stackmap.TypedBlock;

        virtualinvoke r1.<javassist.bytecode.StackMap$Writer: void write16bit(int)>(i0);

        $r4 = r3.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] localsTypes>;

        $i1 = r3.<javassist.bytecode.stackmap.TypedBlock: int numLocals>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void writeVerifyTypeInfo(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int)>(r1, r2, $r4, $i1);

        $r5 = r3.<javassist.bytecode.stackmap.TypedBlock: javassist.bytecode.stackmap.TypeData[] stackTypes>;

        $i2 = r3.<javassist.bytecode.stackmap.TypedBlock: int stackTop>;

        specialinvoke r0.<javassist.bytecode.stackmap.MapMaker: void writeVerifyTypeInfo(javassist.bytecode.StackMap$Writer,javassist.bytecode.ConstPool,javassist.bytecode.stackmap.TypeData[],int)>(r1, r2, $r5, $i2);

        return;
    }

    private void writeVerifyTypeInfo(javassist.bytecode.StackMap$Writer, javassist.bytecode.ConstPool, javassist.bytecode.stackmap.TypeData[], int)
    {
        javassist.bytecode.stackmap.MapMaker r0;
        javassist.bytecode.StackMap$Writer r1;
        javassist.bytecode.ConstPool r2;
        javassist.bytecode.stackmap.TypeData[] r3;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        boolean $z0, $z1;
        javassist.bytecode.stackmap.TypeData r4, r5;

        r0 := @this: javassist.bytecode.stackmap.MapMaker;

        r1 := @parameter0: javassist.bytecode.StackMap$Writer;

        r2 := @parameter1: javassist.bytecode.ConstPool;

        r3 := @parameter2: javassist.bytecode.stackmap.TypeData[];

        i0 := @parameter3: int;

        i4 = 0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        r4 = r3[i5];

        if r4 == null goto label2;

        $z1 = virtualinvoke r4.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z1 == 0 goto label2;

        i4 = i4 + 1;

        i5 = i5 + 1;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i1 = i0 - i4;

        virtualinvoke r1.<javassist.bytecode.StackMap$Writer: void write16bit(int)>($i1);

        i6 = 0;

     label4:
        if i6 >= i0 goto label6;

        r5 = r3[i6];

        $i2 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: int getTypeTag()>();

        $i3 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: int getTypeData(javassist.bytecode.ConstPool)>(r2);

        virtualinvoke r1.<javassist.bytecode.StackMap$Writer: void writeVerifyTypeInfo(int,int)>($i2, $i3);

        $z0 = virtualinvoke r5.<javassist.bytecode.stackmap.TypeData: boolean is2WordType()>();

        if $z0 == 0 goto label5;

        i6 = i6 + 1;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        return;
    }
}
