public final class org.apache.flink.api.common.operators.ResourceSpec extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.apache.flink.api.common.operators.ResourceSpec UNKNOWN;
    public static final org.apache.flink.api.common.operators.ResourceSpec DEFAULT;
    public static final org.apache.flink.api.common.operators.ResourceSpec ZERO;
    private final org.apache.flink.api.common.resources.CPUResource cpuCores;
    private final org.apache.flink.configuration.MemorySize taskHeapMemory;
    private final org.apache.flink.configuration.MemorySize taskOffHeapMemory;
    private final org.apache.flink.configuration.MemorySize managedMemory;
    private final java.util.Map extendedResources;

    private void <init>(org.apache.flink.api.common.resources.CPUResource, org.apache.flink.configuration.MemorySize, org.apache.flink.configuration.MemorySize, org.apache.flink.configuration.MemorySize, java.util.Map)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.api.common.resources.CPUResource r1;
        org.apache.flink.configuration.MemorySize r2, r3, r4, $r8, $r10, $r12;
        java.util.Map r5, $r14, $r23;
        java.lang.Object $r7, $r9, $r11, $r13, $r22;
        java.util.Set $r15;
        java.util.stream.Stream $r16, $r18;
        java.util.function.Predicate $r17;
        java.util.function.Function $r19, $r20;
        java.util.stream.Collector $r21;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: org.apache.flink.api.common.resources.CPUResource;

        r2 := @parameter1: org.apache.flink.configuration.MemorySize;

        r3 := @parameter2: org.apache.flink.configuration.MemorySize;

        r4 := @parameter3: org.apache.flink.configuration.MemorySize;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores> = r1;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r8 = (org.apache.flink.configuration.MemorySize) $r7;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory> = $r8;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r10 = (org.apache.flink.configuration.MemorySize) $r9;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory> = $r10;

        $r11 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r12 = (org.apache.flink.configuration.MemorySize) $r11;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory> = $r12;

        $r13 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r14 = (java.util.Map) $r13;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.stream.Stream stream()>();

        $r17 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$lambda_new_0__282: java.util.function.Predicate bootstrap$()>();

        $r18 = interfaceinvoke $r16.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r17);

        $r19 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$getKey__283: java.util.function.Function bootstrap$()>();

        $r20 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$getValue__284: java.util.function.Function bootstrap$()>();

        $r21 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r19, $r20);

        $r22 = interfaceinvoke $r18.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r21);

        $r23 = (java.util.Map) $r22;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources> = $r23;

        return;
    }

    private void <init>()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        java.util.HashMap $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores> = null;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory> = null;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory> = null;

        r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources> = $r1;

        return;
    }

    public org.apache.flink.api.common.operators.ResourceSpec merge(org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, r1, $r4, $r5, $r6, $r11;
        boolean $z0, $z1;
        java.util.HashMap $r7;
        java.util.Map $r8, $r9;
        java.util.function.BiConsumer $r10;
        org.apache.flink.api.common.resources.CPUResource $r12, $r13, $r17;
        org.apache.flink.api.common.resources.Resource $r14;
        org.apache.flink.configuration.MemorySize $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Cannot merge with null resources");

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r6 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

     label1:
        $r5 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        return $r5;

     label2:
        $r7 = new java.util.HashMap;

        $r8 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        specialinvoke $r7.<java.util.HashMap: void <init>(java.util.Map)>($r8);

        $r9 = r1.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r10 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$lambda_merge_2__182: java.util.function.BiConsumer bootstrap$(java.util.Map)>($r7);

        interfaceinvoke $r9.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r10);

        $r11 = new org.apache.flink.api.common.operators.ResourceSpec;

        $r13 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r12 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.common.resources.CPUResource: org.apache.flink.api.common.resources.Resource merge(org.apache.flink.api.common.resources.Resource)>($r12);

        $r17 = (org.apache.flink.api.common.resources.CPUResource) $r14;

        $r16 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r15 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r18 = virtualinvoke $r16.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize add(org.apache.flink.configuration.MemorySize)>($r15);

        $r20 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r19 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize add(org.apache.flink.configuration.MemorySize)>($r19);

        $r23 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r22 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize add(org.apache.flink.configuration.MemorySize)>($r22);

        specialinvoke $r11.<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>($r17, $r18, $r21, $r24, $r7);

        return $r11;
    }

    public org.apache.flink.api.common.operators.ResourceSpec subtract(org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, r1, $r6, $r7, $r8, $r13;
        java.util.Iterator r3;
        org.apache.flink.api.common.resources.ExternalResource r4;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r9;
        java.util.Map $r10, $r11;
        java.util.Collection $r12;
        org.apache.flink.api.common.resources.CPUResource $r14, $r15, $r19;
        org.apache.flink.api.common.resources.Resource $r16;
        org.apache.flink.configuration.MemorySize $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.lang.Object $r27;
        java.lang.String $r28;
        java.util.function.BiFunction $r29;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Cannot subtract null resources");

        $r6 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label1;

        $r8 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

     label1:
        $r7 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        return $r7;

     label2:
        $z2 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r0);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "Cannot subtract a larger ResourceSpec from this one.");

        $r9 = new java.util.HashMap;

        $r10 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        specialinvoke $r9.<java.util.HashMap: void <init>(java.util.Map)>($r10);

        $r11 = r1.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r27 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.flink.api.common.resources.ExternalResource) $r27;

        $r28 = virtualinvoke r4.<org.apache.flink.api.common.resources.ExternalResource: java.lang.String getName()>();

        $r29 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$lambda_subtract_3__183: java.util.function.BiFunction bootstrap$()>();

        interfaceinvoke $r9.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>($r28, r4, $r29);

        goto label3;

     label4:
        $r13 = new org.apache.flink.api.common.operators.ResourceSpec;

        $r15 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r14 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r16 = virtualinvoke $r15.<org.apache.flink.api.common.resources.CPUResource: org.apache.flink.api.common.resources.Resource subtract(org.apache.flink.api.common.resources.Resource)>($r14);

        $r19 = (org.apache.flink.api.common.resources.CPUResource) $r16;

        $r18 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r17 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r20 = virtualinvoke $r18.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize subtract(org.apache.flink.configuration.MemorySize)>($r17);

        $r22 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r21 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize subtract(org.apache.flink.configuration.MemorySize)>($r21);

        $r25 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r24 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r26 = virtualinvoke $r25.<org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize subtract(org.apache.flink.configuration.MemorySize)>($r24);

        specialinvoke $r13.<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>($r19, $r20, $r23, $r26, $r9);

        return $r13;
    }

    public org.apache.flink.api.common.resources.CPUResource getCpuCores()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.api.common.resources.CPUResource $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        return $r1;
    }

    public org.apache.flink.configuration.MemorySize getTaskHeapMemory()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        return $r1;
    }

    public org.apache.flink.configuration.MemorySize getTaskOffHeapMemory()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        return $r1;
    }

    public org.apache.flink.configuration.MemorySize getManagedMemory()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.configuration.MemorySize $r1;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        return $r1;
    }

    public java.util.Optional getExtendedResource(java.lang.String)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.Optional $r4;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r2 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r3);

        return $r4;
    }

    public java.util.Map getExtendedResources()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void throwUnsupportedOperationExceptionIfUnknown()>();

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    private void throwUnsupportedOperationExceptionIfUnknown()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, $r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        $r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, r1, $r5, $r6, $r8, $r30;
        int i0, i1, i2, i3, $i4;
        java.util.Iterator r2;
        org.apache.flink.api.common.resources.ExternalResource r3, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r7;
        org.apache.flink.api.common.resources.CPUResource $r9, $r11;
        java.math.BigDecimal $r10, $r12, $r28, $r29;
        org.apache.flink.configuration.MemorySize $r13, $r14, $r15, $r16, $r17, $r18;
        java.util.Map $r19, $r22, $r24;
        java.util.Collection $r20;
        java.lang.Object $r21, $r26;
        java.lang.String $r23, $r25;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Cannot compare with null resources");

        $r5 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r30 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z5 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r30);

        if $z5 == 0 goto label1;

        return 1;

     label1:
        $r6 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label2;

        $r8 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z2 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot compare specified resources with UNKNOWN resources.");

        throw $r7;

     label3:
        $r9 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r10 = virtualinvoke $r9.<org.apache.flink.api.common.resources.CPUResource: java.math.BigDecimal getValue()>();

        $r11 = virtualinvoke r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource getCpuCores()>();

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.resources.CPUResource: java.math.BigDecimal getValue()>();

        i0 = virtualinvoke $r10.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r12);

        $r14 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r13 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        i1 = virtualinvoke $r14.<org.apache.flink.configuration.MemorySize: int compareTo(org.apache.flink.configuration.MemorySize)>($r13);

        $r16 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r15 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        i2 = virtualinvoke $r16.<org.apache.flink.configuration.MemorySize: int compareTo(org.apache.flink.configuration.MemorySize)>($r15);

        $r18 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r17 = r1.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        i3 = virtualinvoke $r18.<org.apache.flink.configuration.MemorySize: int compareTo(org.apache.flink.configuration.MemorySize)>($r17);

        if i0 > 0 goto label8;

        if i1 > 0 goto label8;

        if i2 > 0 goto label8;

        if i3 > 0 goto label8;

        $r19 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label7;

        $r21 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.flink.api.common.resources.ExternalResource) $r21;

        $r22 = r1.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r23 = virtualinvoke r3.<org.apache.flink.api.common.resources.ExternalResource: java.lang.String getName()>();

        $z4 = interfaceinvoke $r22.<java.util.Map: boolean containsKey(java.lang.Object)>($r23);

        if $z4 == 0 goto label5;

        $r24 = r1.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r25 = virtualinvoke r3.<org.apache.flink.api.common.resources.ExternalResource: java.lang.String getName()>();

        $r26 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        $r27 = (org.apache.flink.api.common.resources.ExternalResource) $r26;

        $r28 = virtualinvoke $r27.<org.apache.flink.api.common.resources.ExternalResource: java.math.BigDecimal getValue()>();

        $r29 = virtualinvoke r3.<org.apache.flink.api.common.resources.ExternalResource: java.math.BigDecimal getValue()>();

        $i4 = virtualinvoke $r28.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r29);

        if $i4 >= 0 goto label6;

     label5:
        return 0;

     label6:
        goto label4;

     label7:
        return 1;

     label8:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3;
        org.apache.flink.api.common.resources.CPUResource $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.configuration.MemorySize $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.Map $r12, $r13;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label4;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 != class "Lorg/apache/flink/api/common/operators/ResourceSpec;" goto label4;

        r2 = (org.apache.flink.api.common.operators.ResourceSpec) r1;

        $r5 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r4 = r2.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r4);

        if $z0 == 0 goto label2;

        $r7 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r6 = r2.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r7, $r6);

        if $z1 == 0 goto label2;

        $r9 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r8 = r2.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r9, $r8);

        if $z2 == 0 goto label2;

        $r11 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r10 = r2.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r11, $r10);

        if $z3 == 0 goto label2;

        $r13 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r12 = r2.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r13, $r12);

        if $z4 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.api.common.resources.CPUResource $r1;
        org.apache.flink.configuration.MemorySize $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        java.util.Map $r5;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        $r1 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        i8 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r1);

        $i0 = 31 * i8;

        $r2 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $i1 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r2);

        i9 = $i0 + $i1;

        $i2 = 31 * i9;

        $r3 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $i3 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r3);

        i10 = $i2 + $i3;

        $i4 = 31 * i10;

        $r4 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $i5 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r4);

        i11 = $i4 + $i5;

        $i6 = 31 * i11;

        $r5 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $i7 = interfaceinvoke $r5.<java.util.Map: int hashCode()>();

        i12 = $i6 + $i7;

        return i12;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, $r4;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r9, $r10, $r13, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r27, $r30, $r33, $r34;
        java.util.Map $r6, $r7;
        int $i0, $i1;
        java.util.Set $r8;
        org.apache.flink.api.common.resources.CPUResource $r11;
        java.math.BigDecimal $r12, $r37;
        org.apache.flink.configuration.MemorySize $r15, $r19, $r23;
        java.lang.String $r16, $r20, $r24, $r28, $r32;
        java.lang.Object $r29, $r31, $r35;
        org.apache.flink.api.common.resources.ExternalResource $r36;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        $r4 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return "ResourceSpec{UNKNOWN}";

     label1:
        $r5 = new java.lang.StringBuilder;

        $r6 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $i0 = interfaceinvoke $r6.<java.util.Map: int size()>();

        $i1 = $i0 * 10;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r7 = r0.<org.apache.flink.api.common.operators.ResourceSpec: java.util.Map extendedResources>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r29 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r29;

        $r30 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r31 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r32 = (java.lang.String) $r31;

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r35 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (org.apache.flink.api.common.resources.ExternalResource) $r35;

        $r37 = virtualinvoke $r36.<org.apache.flink.api.common.resources.ExternalResource: java.math.BigDecimal getValue()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        goto label2;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ResourceSpec{cpuCores=");

        $r11 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.resources.CPUResource cpuCores>;

        $r12 = virtualinvoke $r11.<org.apache.flink.api.common.resources.CPUResource: java.math.BigDecimal getValue()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", taskHeapMemory=");

        $r15 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskHeapMemory>;

        $r16 = virtualinvoke $r15.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", taskOffHeapMemory=");

        $r19 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize taskOffHeapMemory>;

        $r20 = virtualinvoke $r19.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", managedMemory=");

        $r23 = r0.<org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.configuration.MemorySize managedMemory>;

        $r24 = virtualinvoke $r23.<org.apache.flink.configuration.MemorySize: java.lang.String toHumanReadableString()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r28;
    }

    private java.lang.Object readResolve()
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        $r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    public static org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double, int)
    {
        double d0;
        int i0;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r0;
        org.apache.flink.api.common.resources.CPUResource $r1;
        long $l1;
        org.apache.flink.configuration.MemorySize $r2;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $r0 = new org.apache.flink.api.common.operators.ResourceSpec$Builder;

        $r1 = new org.apache.flink.api.common.resources.CPUResource;

        specialinvoke $r1.<org.apache.flink.api.common.resources.CPUResource: void <init>(double)>(d0);

        $l1 = (long) i0;

        $r2 = staticinvoke <org.apache.flink.configuration.MemorySize: org.apache.flink.configuration.MemorySize ofMebiBytes(long)>($l1);

        specialinvoke $r0.<org.apache.flink.api.common.operators.ResourceSpec$Builder: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.api.common.operators.ResourceSpec$1)>($r1, $r2, null);

        return $r0;
    }

    public static org.apache.flink.api.common.resources.ExternalResource lambda$subtract$3(org.apache.flink.api.common.resources.ExternalResource, org.apache.flink.api.common.resources.ExternalResource)
    {
        org.apache.flink.api.common.resources.ExternalResource r0, r1, $r3;
        org.apache.flink.api.common.resources.Resource $r2;

        r0 := @parameter0: org.apache.flink.api.common.resources.ExternalResource;

        r1 := @parameter1: org.apache.flink.api.common.resources.ExternalResource;

        $r2 = virtualinvoke r0.<org.apache.flink.api.common.resources.ExternalResource: org.apache.flink.api.common.resources.Resource subtract(org.apache.flink.api.common.resources.Resource)>(r1);

        $r3 = (org.apache.flink.api.common.resources.ExternalResource) $r2;

        return $r3;
    }

    public static void lambda$merge$2(java.util.Map, java.lang.String, org.apache.flink.api.common.resources.ExternalResource)
    {
        java.util.Map r0;
        java.lang.String r1;
        org.apache.flink.api.common.resources.ExternalResource r2;
        java.util.function.BiFunction $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.flink.api.common.resources.ExternalResource;

        $r3 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec$lambda_null_1__184: java.util.function.BiFunction bootstrap$(org.apache.flink.api.common.resources.ExternalResource)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(r1, $r3);

        return;
    }

    public static org.apache.flink.api.common.resources.ExternalResource lambda$null$1(org.apache.flink.api.common.resources.ExternalResource, java.lang.String, org.apache.flink.api.common.resources.ExternalResource)
    {
        org.apache.flink.api.common.resources.ExternalResource r0, r2, $r4;
        java.lang.String r1;
        org.apache.flink.api.common.resources.Resource $r3;

        r0 := @parameter0: org.apache.flink.api.common.resources.ExternalResource;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.flink.api.common.resources.ExternalResource;

        if r2 != null goto label1;

        $r4 = r0;

        goto label2;

     label1:
        $r3 = virtualinvoke r2.<org.apache.flink.api.common.resources.ExternalResource: org.apache.flink.api.common.resources.Resource merge(org.apache.flink.api.common.resources.Resource)>(r0);

        $r4 = (org.apache.flink.api.common.resources.ExternalResource) $r3;

     label2:
        return $r4;
    }

    public static boolean lambda$new$0(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        java.lang.Object $r1, $r2;
        org.apache.flink.api.common.resources.ExternalResource $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r1);

        $r3 = (org.apache.flink.api.common.resources.ExternalResource) $r2;

        $z0 = virtualinvoke $r3.<org.apache.flink.api.common.resources.ExternalResource: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void <init>(org.apache.flink.api.common.resources.CPUResource, org.apache.flink.configuration.MemorySize, org.apache.flink.configuration.MemorySize, org.apache.flink.configuration.MemorySize, java.util.Map, org.apache.flink.api.common.operators.ResourceSpec$1)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;
        org.apache.flink.api.common.resources.CPUResource r1;
        org.apache.flink.configuration.MemorySize r2, r3, r4;
        java.util.Map r5;
        org.apache.flink.api.common.operators.ResourceSpec$1 r6;

        r0 := @this: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter0: org.apache.flink.api.common.resources.CPUResource;

        r2 := @parameter1: org.apache.flink.configuration.MemorySize;

        r3 := @parameter2: org.apache.flink.configuration.MemorySize;

        r4 := @parameter3: org.apache.flink.configuration.MemorySize;

        r5 := @parameter4: java.util.Map;

        r6 := @parameter5: org.apache.flink.api.common.operators.ResourceSpec$1;

        specialinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: void <init>(org.apache.flink.api.common.resources.CPUResource,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,org.apache.flink.configuration.MemorySize,java.util.Map)>(r1, r2, r3, r4, r5);

        return;
    }

    static void <clinit>()
    {
        org.apache.flink.api.common.operators.ResourceSpec $r0, $r1, $r3;
        org.apache.flink.api.common.operators.ResourceSpec$Builder $r2;

        <org.apache.flink.api.common.operators.ResourceSpec: long serialVersionUID> = 1L;

        $r0 = new org.apache.flink.api.common.operators.ResourceSpec;

        specialinvoke $r0.<org.apache.flink.api.common.operators.ResourceSpec: void <init>()>();

        <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN> = $r0;

        $r1 = <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec UNKNOWN>;

        <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec DEFAULT> = $r1;

        $r2 = staticinvoke <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec$Builder newBuilder(double,int)>(0.0, 0);

        $r3 = virtualinvoke $r2.<org.apache.flink.api.common.operators.ResourceSpec$Builder: org.apache.flink.api.common.operators.ResourceSpec build()>();

        <org.apache.flink.api.common.operators.ResourceSpec: org.apache.flink.api.common.operators.ResourceSpec ZERO> = $r3;

        return;
    }
}
