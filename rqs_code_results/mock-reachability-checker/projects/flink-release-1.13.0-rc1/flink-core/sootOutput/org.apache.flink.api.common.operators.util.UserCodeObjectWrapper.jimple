public class org.apache.flink.api.common.operators.util.UserCodeObjectWrapper extends java.lang.Object implements org.apache.flink.api.common.operators.util.UserCodeWrapper
{
    private static final long serialVersionUID;
    private final java.lang.Object userCodeObject;

    public void <init>(java.lang.Object)
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;
        java.lang.Object r1, r3, $r28, r35, r36;
        int i0, $i1, $i2, i3;
        java.lang.reflect.Field r2;
        java.lang.StringBuilder $r5, $r6, $r9, $r17, $r18, $r19, $r20, $r23, $r24, $r26, $r27, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.Class $r7, $r11, $r13, $r21, $r40;
        java.lang.String $r8, $r10, $r15, $r22, $r25, $r30;
        java.lang.Class[] $r12, $r14;
        org.apache.flink.api.common.NonSerializableUserCodeException $r16, $r31;
        java.lang.Exception $r32, $r34;
        java.lang.RuntimeException $r33;
        java.lang.reflect.Method r37, r38;
        java.lang.reflect.Field[] r41;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The user code object may not be null.");

        $z0 = r1 instanceof java.io.Serializable;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User code object is not serializable: ");

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, $r10);

        r0.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: java.lang.Object userCodeObject> = r1;

        r35 = r1;

     label01:
        if null == r35 goto label12;

        r36 = null;

        z5 = 0;

        r37 = null;

        r38 = null;

     label02:
        $r11 = virtualinvoke r35.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = newarray (java.lang.Class)[1];

        $r12[0] = class "Ljava/io/ObjectOutputStream;";

        r37 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("writeObject", $r12);

        $r13 = virtualinvoke r35.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = newarray (java.lang.Class)[1];

        $r14[0] = class "Ljava/io/ObjectInputStream;";

        r38 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("readObject", $r14);

     label03:
        goto label05;

     label04:
        $r34 := @caughtexception;

     label05:
        if r37 == null goto label06;

        if r38 == null goto label06;

        z5 = 1;

     label06:
        $r40 = virtualinvoke r35.<java.lang.Object: java.lang.Class getClass()>();

        r41 = virtualinvoke $r40.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r41;

        i3 = 0;

     label07:
        if i3 >= i0 goto label11;

        r2 = r41[i3];

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r15 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean contains(java.lang.CharSequence)>("$outer");

        if $z1 == 0 goto label08;

        r36 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r35);

     label08:
        if z5 != 0 goto label10;

        $i1 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1);

        if $z2 != 0 goto label10;

        $i2 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2);

        if $z3 == 0 goto label09;

        goto label10;

     label09:
        r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r35);

        if r3 == null goto label10;

        $z4 = r3 instanceof java.io.Serializable;

        if $z4 != 0 goto label10;

        $r16 = new org.apache.flink.api.common.NonSerializableUserCodeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User-defined object ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r21 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") contains non-serializable field ");

        $r25 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r28 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r35);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.flink.api.common.NonSerializableUserCodeException: void <init>(java.lang.String)>($r30);

        throw $r16;

     label10:
        i3 = i3 + 1;

        goto label07;

     label11:
        r35 = r36;

        goto label01;

     label12:
        goto label15;

     label13:
        $r31 := @caughtexception;

        throw $r31;

     label14:
        $r32 := @caughtexception;

        $r33 = new java.lang.RuntimeException;

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Could not access the fields of the user defined class while checking for serializability.", $r32);

        throw $r33;

     label15:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch org.apache.flink.api.common.NonSerializableUserCodeException from label01 to label12 with label13;
        catch java.lang.Exception from label01 to label12 with label14;
    }

    public java.lang.Object getUserCodeObject(java.lang.Class, java.lang.ClassLoader)
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;
        java.lang.Class r1;
        java.lang.ClassLoader r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.ClassLoader;

        $r3 = r0.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: java.lang.Object userCodeObject>;

        return $r3;
    }

    public java.lang.Object getUserCodeObject()
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        $r1 = r0.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: java.lang.Object userCodeObject>;

        return $r1;
    }

    public java.lang.'annotation'.Annotation getUserCodeAnnotation(java.lang.Class)
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;
        java.lang.Class r1, $r3;
        java.lang.Object $r2;
        java.lang.'annotation'.Annotation $r4;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: java.lang.Object userCodeObject>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        return $r4;
    }

    public java.lang.Class getUserCodeClass()
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;
        java.lang.Object $r1;
        java.lang.Class $r2;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        $r1 = r0.<org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: java.lang.Object userCodeObject>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        return $r2;
    }

    public boolean hasObject()
    {
        org.apache.flink.api.common.operators.util.UserCodeObjectWrapper r0;

        r0 := @this: org.apache.flink.api.common.operators.util.UserCodeObjectWrapper;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.operators.util.UserCodeObjectWrapper: long serialVersionUID> = 1L;

        return;
    }
}
