class org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1 extends java.lang.Object implements org.mockito.internal.configuration.injection.filter.OngoingInjector
{
    final java.lang.Object val$injectee;
    final java.lang.reflect.Field val$candidateFieldToBeInjected;
    final java.lang.Object val$matchingMock;
    final org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter this$0;

    void <init>(org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter, java.lang.Object, java.lang.reflect.Field, java.lang.Object)
    {
        org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1 r0;
        org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter r1;
        java.lang.Object r2, r4;
        java.lang.reflect.Field r3;

        r0 := @this: org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1;

        r1 := @parameter0: org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.reflect.Field;

        r4 := @parameter3: java.lang.Object;

        r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter this$0> = r1;

        r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$injectee> = r2;

        r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.reflect.Field val$candidateFieldToBeInjected> = r3;

        r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$matchingMock> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object thenInject()
    {
        org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1 r0;
        org.mockito.internal.util.reflection.BeanPropertySetter $r2;
        java.lang.reflect.Field $r3, $r8, $r12;
        java.lang.Object $r4, $r5, $r6, $r7, $r9, $r11;
        boolean $z0;
        java.lang.RuntimeException $r10;
        org.mockito.exceptions.base.MockitoException $r13;

        r0 := @this: org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1;

     label1:
        $r2 = new org.mockito.internal.util.reflection.BeanPropertySetter;

        $r4 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$injectee>;

        $r3 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.reflect.Field val$candidateFieldToBeInjected>;

        specialinvoke $r2.<org.mockito.internal.util.reflection.BeanPropertySetter: void <init>(java.lang.Object,java.lang.reflect.Field)>($r4, $r3);

        $r5 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$matchingMock>;

        $z0 = virtualinvoke $r2.<org.mockito.internal.util.reflection.BeanPropertySetter: boolean set(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $r9 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$injectee>;

        $r8 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.reflect.Field val$candidateFieldToBeInjected>;

        $r7 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$matchingMock>;

        staticinvoke <org.mockito.internal.util.reflection.FieldSetter: void setField(java.lang.Object,java.lang.reflect.Field,java.lang.Object)>($r9, $r8, $r7);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r12 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.reflect.Field val$candidateFieldToBeInjected>;

        $r11 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$matchingMock>;

        $r13 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotInjectDependency(java.lang.reflect.Field,java.lang.Object,java.lang.Exception)>($r12, $r11, $r10);

        throw $r13;

     label4:
        $r6 = r0.<org.mockito.internal.configuration.injection.filter.TerminalMockCandidateFilter$1: java.lang.Object val$matchingMock>;

        return $r6;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }
}
