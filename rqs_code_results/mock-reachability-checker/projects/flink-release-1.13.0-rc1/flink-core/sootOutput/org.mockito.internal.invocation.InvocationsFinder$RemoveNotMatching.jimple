class org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching extends java.lang.Object implements org.mockito.internal.util.collections.ListUtil$Filter
{
    private final org.mockito.invocation.MatchableInvocation wanted;

    private void <init>(org.mockito.invocation.MatchableInvocation)
    {
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching r0;
        org.mockito.invocation.MatchableInvocation r1;

        r0 := @this: org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        r1 := @parameter0: org.mockito.invocation.MatchableInvocation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: org.mockito.invocation.MatchableInvocation wanted> = r1;

        return;
    }

    public boolean isOut(org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching r0;
        org.mockito.invocation.Invocation r1;
        org.mockito.invocation.MatchableInvocation $r2;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        $r2 = r0.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: org.mockito.invocation.MatchableInvocation wanted>;

        $z0 = interfaceinvoke $r2.<org.mockito.invocation.MatchableInvocation: boolean matches(org.mockito.invocation.Invocation)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public volatile boolean isOut(java.lang.Object)
    {
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching r0;
        java.lang.Object r1;
        org.mockito.invocation.Invocation $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.mockito.invocation.Invocation) r1;

        $z0 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: boolean isOut(org.mockito.invocation.Invocation)>($r2);

        return $z0;
    }

    void <init>(org.mockito.invocation.MatchableInvocation, org.mockito.internal.invocation.InvocationsFinder$1)
    {
        org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching r0;
        org.mockito.invocation.MatchableInvocation r1;
        org.mockito.internal.invocation.InvocationsFinder$1 r2;

        r0 := @this: org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching;

        r1 := @parameter0: org.mockito.invocation.MatchableInvocation;

        r2 := @parameter1: org.mockito.internal.invocation.InvocationsFinder$1;

        specialinvoke r0.<org.mockito.internal.invocation.InvocationsFinder$RemoveNotMatching: void <init>(org.mockito.invocation.MatchableInvocation)>(r1);

        return;
    }
}
