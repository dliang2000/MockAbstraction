public abstract class org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int CURRENT_VERSION;
    private java.util.function.Supplier serializerSupplier;

    public void <init>(java.util.function.Supplier)
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        java.util.function.Supplier r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        r1 := @parameter0: java.util.function.Supplier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.function.Supplier) $r2;

        r0.<org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot: java.util.function.Supplier serializerSupplier> = $r3;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        return 3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        java.util.function.Supplier $r1;
        java.lang.Object $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot: java.util.function.Supplier serializerSupplier>;

        $r2 = interfaceinvoke $r1.<java.util.function.Supplier: java.lang.Object get()>();

        $r3 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r2;

        return $r3;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1, $r5;
        java.lang.Class $r2, $r6;
        java.util.function.Supplier $r3;
        java.lang.Object $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = r0.<org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot: java.util.function.Supplier serializerSupplier>;

        $r4 = interfaceinvoke $r3.<java.util.function.Supplier: java.lang.Object get()>();

        $r5 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r4;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r6 goto label1;

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        goto label2;

     label1:
        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

     label2:
        return $r7;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.io.IOException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        lookupswitch(i0)
        {
            case 2: goto label2;
            case 3: goto label1;
            default: goto label3;
        };

     label1:
        goto label4;

     label2:
        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        goto label4;

     label3:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized version: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        return;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int hashCode()
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        java.lang.Class $r1;
        int $i0;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.SimpleTypeSerializerSnapshot: int CURRENT_VERSION> = 3;

        return;
    }
}
