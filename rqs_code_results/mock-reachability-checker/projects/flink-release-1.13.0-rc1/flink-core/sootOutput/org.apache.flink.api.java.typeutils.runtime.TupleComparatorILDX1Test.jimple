public class org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test extends org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase
{
    org.apache.flink.api.java.tuple.Tuple3[] dataISD;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;
        org.apache.flink.api.java.tuple.Tuple3 $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30;
        java.lang.Integer $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31;
        java.lang.Long $r4, $r8, $r12, $r16, $r20, $r24, $r28, $r32;
        java.lang.Double $r5, $r9, $r13, $r17, $r21, $r25, $r29, $r33;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.tuple.base.TupleComparatorTestBase: void <init>()>();

        $r1 = newarray (org.apache.flink.api.java.tuple.Tuple3)[8];

        $r2 = new org.apache.flink.api.java.tuple.Tuple3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4L);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r2.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        $r1[0] = $r2;

        $r6 = new org.apache.flink.api.java.tuple.Tuple3;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(5L);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r6.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r7, $r8, $r9);

        $r1[1] = $r6;

        $r10 = new org.apache.flink.api.java.tuple.Tuple3;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9L);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r10.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r11, $r12, $r13);

        $r1[2] = $r10;

        $r14 = new org.apache.flink.api.java.tuple.Tuple3;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(10L);

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(24.0);

        specialinvoke $r14.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r15, $r16, $r17);

        $r1[3] = $r14;

        $r18 = new org.apache.flink.api.java.tuple.Tuple3;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(19L);

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r18.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r19, $r20, $r21);

        $r1[4] = $r18;

        $r22 = new org.apache.flink.api.java.tuple.Tuple3;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(20L);

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(24.0);

        specialinvoke $r22.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r23, $r24, $r25);

        $r1[5] = $r22;

        $r26 = new org.apache.flink.api.java.tuple.Tuple3;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(24L);

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(20.0);

        specialinvoke $r26.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r27, $r28, $r29);

        $r1[6] = $r26;

        $r30 = new org.apache.flink.api.java.tuple.Tuple3;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(25L);

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(23.2);

        specialinvoke $r30.<org.apache.flink.api.java.tuple.Tuple3: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r31, $r32, $r33);

        $r1[7] = $r30;

        r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD> = $r1;

        return;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;
        int[] $r2;
        org.apache.flink.api.common.typeutils.TypeComparator[] $r3;
        org.apache.flink.api.common.typeutils.base.LongComparator $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r5;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r6;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        z0 := @parameter0: boolean;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleComparator;

        $r2 = newarray (int)[1];

        $r2[0] = 1;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[1];

        $r4 = new org.apache.flink.api.common.typeutils.base.LongComparator;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.LongComparator: void <init>(boolean)>(z0);

        $r3[0] = $r4;

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r6 = <org.apache.flink.api.common.typeutils.base.IntSerializer: org.apache.flink.api.common.typeutils.base.IntSerializer INSTANCE>;

        $r5[0] = $r6;

        $r7 = <org.apache.flink.api.common.typeutils.base.LongSerializer: org.apache.flink.api.common.typeutils.base.LongSerializer INSTANCE>;

        $r5[1] = $r7;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleComparator: void <init>(int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2, $r3, $r5);

        return $r1;
    }

    protected org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;
        org.apache.flink.api.common.typeutils.base.IntSerializer $r3;
        org.apache.flink.api.common.typeutils.base.LongSerializer $r4;
        org.apache.flink.api.common.typeutils.base.DoubleSerializer $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.TupleSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r3 = new org.apache.flink.api.common.typeutils.base.IntSerializer;

        specialinvoke $r3.<org.apache.flink.api.common.typeutils.base.IntSerializer: void <init>()>();

        $r2[0] = $r3;

        $r4 = new org.apache.flink.api.common.typeutils.base.LongSerializer;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.base.LongSerializer: void <init>()>();

        $r2[1] = $r4;

        $r5 = new org.apache.flink.api.common.typeutils.base.DoubleSerializer;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.base.DoubleSerializer: void <init>()>();

        $r2[2] = $r5;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.TupleSerializer: void <init>(java.lang.Class,org.apache.flink.api.common.typeutils.TypeSerializer[])>(class "Lorg/apache/flink/api/java/tuple/Tuple3;", $r2);

        return $r1;
    }

    protected org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test: org.apache.flink.api.java.tuple.Tuple3[] dataISD>;

        return $r1;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        org.apache.flink.api.java.tuple.Tuple3[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test: org.apache.flink.api.java.tuple.Tuple3[] getSortedTestData()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        org.apache.flink.api.java.typeutils.runtime.TupleSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test: org.apache.flink.api.java.typeutils.runtime.TupleSerializer createSerializer()>();

        return $r1;
    }

    protected volatile org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test r0;
        boolean z0;
        org.apache.flink.api.java.typeutils.runtime.TupleComparator $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.TupleComparatorILDX1Test: org.apache.flink.api.java.typeutils.runtime.TupleComparator createComparator(boolean)>(z0);

        return $r1;
    }
}
