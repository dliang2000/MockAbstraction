public final class org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot
{
    private static final int VERSION;
    private java.util.List enumConstants;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void write(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.List $r4, $r5;
        int $i0;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void write(org.apache.flink.core.memory.DataOutputView)>(r1);

        $r4 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $r5 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataOutputView: void writeUTF(java.lang.String)>(r3);

        goto label1;

     label2:
        return;
    }

    public void read(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        org.apache.flink.core.memory.DataInputView r1;
        int $i0, $i1, $i2, i3, i4;
        java.io.IOException $r4, $r17, $r21;
        java.lang.StringBuilder $r5, $r6, $r7, $r22, $r23, $r26, $r27;
        java.lang.String $r8, $r11, $r25, $r28;
        java.util.ArrayList $r9;
        java.util.List $r10, $r15;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r12;
        java.lang.ClassLoader $r13;
        java.lang.Object $r14;
        java.lang.ClassNotFoundException $r16;
        java.lang.Throwable $r19, $r29, $r30, r32;
        java.lang.IllegalArgumentException $r20;
        java.lang.Class $r24;
        java.lang.Enum[] r33;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: void read(org.apache.flink.core.memory.DataInputView)>(r1);

        $i0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: int getReadVersion()>();

        if $i0 != 1 goto label16;

        $r12 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r1);

        r32 = null;

     label01:
        $r13 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.lang.ClassLoader getUserCodeClassLoader()>();

        $r14 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(java.io.InputStream,java.lang.ClassLoader)>($r12, $r13);

        r33 = (java.lang.Enum[]) $r14;

        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List buildEnumConstantsList(java.lang.Enum[])>(r33);

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants> = $r15;

     label02:
        goto label05;

     label03:
        $r16 := @caughtexception;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("The requested enum class cannot be found in classpath.", $r16);

        throw $r17;

     label04:
        $r20 := @caughtexception;

        $r21 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A previously existing enum constant of ");

        $r24 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists.");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r20);

        throw $r21;

     label05:
        if $r12 == null goto label15;

        goto label06;

     label06:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

        goto label15;

     label07:
        $r30 := @caughtexception;

        r32 = $r30;

        throw $r30;

     label08:
        $r29 := @caughtexception;

     label09:
        if $r12 == null goto label14;

        if r32 == null goto label13;

     label10:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label11:
        goto label14;

     label12:
        $r19 := @caughtexception;

        virtualinvoke r32.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

        goto label14;

     label13:
        virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void close()>();

     label14:
        throw $r29;

     label15:
        goto label20;

     label16:
        $i1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: int getReadVersion()>();

        if $i1 != 2 goto label19;

        i3 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i3);

        r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants> = $r9;

        i4 = 0;

     label17:
        if i4 >= i3 goto label18;

        $r10 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $r11 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: java.lang.String readUTF()>();

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r11);

        i4 = i4 + 1;

        goto label17;

     label18:
        goto label20;

     label19:
        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot deserialize EnumSerializerConfigSnapshot with version ");

        $i2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: int getReadVersion()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label20:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label05 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label09 with label08;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        java.lang.Class r2;
        java.lang.Enum[] r3, $r8;
        java.lang.String r4, $r21;
        java.util.List $r6, $r9, $r12;
        int $i0, $i1, i2;
        java.lang.Object $r7, $r13;
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot $r10;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r11;
        java.lang.Enum $r14;
        java.lang.IllegalArgumentException $r15;
        java.lang.RuntimeException $r16;
        java.lang.StringBuilder $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        r2 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.lang.Class getTypeClass()>();

        $r6 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, $i0);

        $r8 = (java.lang.Enum[]) $r7;

        r3 = (java.lang.Enum[]) $r8;

        i2 = 0;

     label1:
        $r9 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i2 >= $i1 goto label6;

        $r12 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (java.lang.String) $r13;

     label2:
        $r14 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(r2, r4);

        r3[i2] = $r14;

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create a restore serializer for enum ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Probably because an enum value was removed.");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r10 = new org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: void <init>(java.lang.Class,java.lang.Enum[])>(r2, r3);

        $r11 = virtualinvoke $r10.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r11;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        return 2;
    }

    public int[] getCompatibleVersions()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        int[] $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        $r1 = newarray (int)[2];

        $r1[0] = 2;

        $r1[1] = 1;

        return $r1;
    }

    java.util.List getEnumConstants()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.util.List $r3, $r4;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $r2 = (org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot) r1;

        $r4 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List getEnumConstants()>();

        $z1 = interfaceinvoke $r3.<java.util.List: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot r0;
        int $i0, $i1, $i2, $i3;
        java.util.List $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot;

        $i0 = specialinvoke r0.<org.apache.flink.api.common.typeutils.GenericTypeSerializerConfigSnapshot: int hashCode()>();

        $i1 = $i0 * 31;

        $r1 = r0.<org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: java.util.List enumConstants>;

        $i2 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    private static java.util.List buildEnumConstantsList(java.lang.Enum[])
    {
        java.lang.Enum[] r0;
        int i0, $i1, i2;
        java.lang.Enum r3;
        java.util.ArrayList $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Enum[];

        $r4 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r3 = r0[i2];

        $r5 = virtualinvoke r3.<java.lang.Enum: java.lang.String name()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.EnumSerializer$EnumSerializerConfigSnapshot: int VERSION> = 2;

        return;
    }
}
