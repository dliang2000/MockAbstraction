public class org.apache.flink.api.common.operators.util.OperatorValidationUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.flink.api.common.operators.util.OperatorValidationUtils r0;

        r0 := @this: org.apache.flink.api.common.operators.util.OperatorValidationUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void validateParallelism(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateParallelism(int,boolean)>(i0, 1);

        return;
    }

    public static void validateParallelism(int, boolean)
    {
        int i0;
        boolean z0, $z1, $z2;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        if i0 != 1 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "The parallelism of non parallel operator must be 1.");

        if i0 > 0 goto label4;

        if i0 != -1 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "The parallelism of an operator must be at least 1, or ExecutionConfig.PARALLELISM_DEFAULT (use system default).");

        return;
    }

    public static void validateMaxParallelism(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateMaxParallelism(int,int,boolean)>(i0, 2147483647, 1);

        return;
    }

    public static void validateMaxParallelism(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateMaxParallelism(int,int,boolean)>(i0, i1, 1);

        return;
    }

    public static void validateMaxParallelism(int, boolean)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <org.apache.flink.api.common.operators.util.OperatorValidationUtils: void validateMaxParallelism(int,int,boolean)>(i0, 2147483647, z0);

        return;
    }

    public static void validateMaxParallelism(int, int, boolean)
    {
        int i0, i1;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "The maximum parallelism must be greater than 0.");

        if z0 != 0 goto label3;

        if i0 != 1 goto label4;

     label3:
        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "The maximum parallelism of non parallel operator must be 1.");

        if i0 <= 0 goto label6;

        if i0 > i1 goto label6;

        $z3 = 1;

        goto label7;

     label6:
        $z3 = 0;

     label7:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maximum parallelism must be between 1 and ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Found: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z3, $r5);

        return;
    }

    public static void validateResources(org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0;

        r0 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "The resources must be not null.");

        return;
    }

    public static void validateMinAndPreferredResources(org.apache.flink.api.common.operators.ResourceSpec, org.apache.flink.api.common.operators.ResourceSpec)
    {
        org.apache.flink.api.common.operators.ResourceSpec r0, r1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.common.operators.ResourceSpec;

        r1 := @parameter1: org.apache.flink.api.common.operators.ResourceSpec;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "The min resources must be not null.");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "The preferred resources must be not null.");

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.operators.ResourceSpec: boolean lessThanOrEqual(org.apache.flink.api.common.operators.ResourceSpec)>(r1);

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "The resources must be either both UNKNOWN or both not UNKNOWN. If not UNKNOWN, the preferred resources must be greater than or equal to the min resources.");

        return;
    }
}
