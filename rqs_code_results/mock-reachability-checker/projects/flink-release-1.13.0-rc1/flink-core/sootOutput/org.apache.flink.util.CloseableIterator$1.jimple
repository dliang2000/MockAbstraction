final class org.apache.flink.util.CloseableIterator$1 extends java.lang.Object implements org.apache.flink.util.CloseableIterator
{
    private final java.util.Deque stack;
    final java.util.List val$list;
    final java.util.function.Consumer val$closeNotConsumed;

    void <init>(java.util.List, java.util.function.Consumer)
    {
        org.apache.flink.util.CloseableIterator$1 r0;
        java.util.List r1, $r4;
        java.util.function.Consumer r2;
        java.util.ArrayDeque $r3;

        r0 := @this: org.apache.flink.util.CloseableIterator$1;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.function.Consumer;

        r0.<org.apache.flink.util.CloseableIterator$1: java.util.List val$list> = r1;

        r0.<org.apache.flink.util.CloseableIterator$1: java.util.function.Consumer val$closeNotConsumed> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayDeque;

        $r4 = r0.<org.apache.flink.util.CloseableIterator$1: java.util.List val$list>;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>(java.util.Collection)>($r4);

        r0.<org.apache.flink.util.CloseableIterator$1: java.util.Deque stack> = $r3;

        return;
    }

    public boolean hasNext()
    {
        org.apache.flink.util.CloseableIterator$1 r0;
        java.util.Deque $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.util.CloseableIterator$1;

        $r1 = r0.<org.apache.flink.util.CloseableIterator$1: java.util.Deque stack>;

        $z0 = interfaceinvoke $r1.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object next()
    {
        org.apache.flink.util.CloseableIterator$1 r0;
        java.util.Deque $r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.CloseableIterator$1;

        $r1 = r0.<org.apache.flink.util.CloseableIterator$1: java.util.Deque stack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object poll()>();

        return $r2;
    }

    public void close() throws java.lang.Exception
    {
        org.apache.flink.util.CloseableIterator$1 r0;
        java.util.Iterator r1;
        java.lang.Object r2;
        java.util.Deque $r4;
        boolean $z0;
        java.util.function.Consumer $r5;
        java.lang.Exception $r6, r8;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.flink.util.CloseableIterator$1;

        r8 = null;

        $r4 = r0.<org.apache.flink.util.CloseableIterator$1: java.util.Deque stack>;

        r1 = interfaceinvoke $r4.<java.util.Deque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $r5 = r0.<org.apache.flink.util.CloseableIterator$1: java.util.function.Consumer val$closeNotConsumed>;

        interfaceinvoke $r5.<java.util.function.Consumer: void accept(java.lang.Object)>(r2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.Throwable firstOrSuppressed(java.lang.Throwable,java.lang.Throwable)>($r6, r8);

        r8 = (java.lang.Exception) $r7;

     label5:
        goto label1;

     label6:
        if r8 == null goto label7;

        throw r8;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
