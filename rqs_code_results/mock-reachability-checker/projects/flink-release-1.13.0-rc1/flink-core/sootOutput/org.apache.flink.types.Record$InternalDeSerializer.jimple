final class org.apache.flink.types.Record$InternalDeSerializer extends java.lang.Object implements org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView, java.io.Serializable
{
    private static final long serialVersionUID;
    private byte[] memory;
    private int position;
    private int end;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long BASE_OFFSET;
    private static final boolean LITTLE_ENDIAN;

    private void <init>()
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean readBoolean() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i1 >= $i0 goto label3;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i3;

        $b4 = $r2[$i2];

        if $b4 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;

     label3:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public byte readByte() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i3;

        $b4 = $r2[$i2];

        return $b4;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public char readChar() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12, $i13;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b5, $b10;
        short $s6, $s11;
        char $c14;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i4;

        $b5 = $r2[$i3];

        $s6 = $b5 & 255;

        $i9 = $s6 << 8;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i8;

        $b10 = $r3[$i7];

        $s11 = $b10 & 255;

        $i12 = $s11 << 0;

        $i13 = $i9 | $i12;

        $c14 = (char) $i13;

        return $c14;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public double readDouble() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        long $l0;
        double $d0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $l0 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: long readLong()>();

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l0);

        return $d0;
    }

    public float readFloat() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0;
        float $f0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i0 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int readInt()>();

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i0);

        return $f0;
    }

    public void readFully(byte[]) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void readFully(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1, $r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.io.EOFException $r4;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label3;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 > $i3 goto label2;

        $i6 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i5 = $i4 - i1;

        if $i6 > $i5 goto label1;

        $r5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i7, r1, i0, i1);

        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + i1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        goto label4;

     label1:
        $r4 = new java.io.EOFException;

        specialinvoke $r4.<java.io.EOFException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        if i1 >= 0 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length may not be negative.");

        throw $r2;

     label4:
        return;
    }

    public int readInt() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, i10;
        java.io.EOFException $r1;
        long $l5, $l6, $l7;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        if $i0 < 0 goto label2;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i2 = $i1 - 3;

        if $i3 >= $i2 goto label2;

        $r3 = <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $l6 = <org.apache.flink.types.Record$InternalDeSerializer: long BASE_OFFSET>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        i10 = virtualinvoke $r3.<sun.misc.Unsafe: int getInt(java.lang.Object,long)>($r2, $l7);

        $z0 = <org.apache.flink.types.Record$InternalDeSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        i10 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i10);

     label1:
        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + 4;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        return i10;

     label2:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        java.lang.String r2;
        java.lang.StringBuilder $r3;
        char $c7, c10;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i2 >= $i1 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i3 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int readUnsignedByte()>();

        c10 = (char) $i3;

     label1:
        $i5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i5 >= $i4 goto label2;

        if c10 == 10 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c10);

        $i9 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int readUnsignedByte()>();

        c10 = (char) $i9;

        goto label1;

     label2:
        i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i0 <= 0 goto label3;

        $i6 = i0 - 1;

        $c7 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>($i6);

        if $c7 != 13 goto label3;

        $i8 = i0 - 1;

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>($i8);

     label3:
        r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0);

        return r2;

     label4:
        return null;
    }

    public long readLong() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9;
        java.io.EOFException $r1;
        long $l5, $l6, $l7, l10;
        byte[] $r2;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        if $i0 < 0 goto label2;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i2 = $i1 - 7;

        if $i3 >= $i2 goto label2;

        $r3 = <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $l6 = <org.apache.flink.types.Record$InternalDeSerializer: long BASE_OFFSET>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $l5 = (long) $i4;

        $l7 = $l6 + $l5;

        l10 = virtualinvoke $r3.<sun.misc.Unsafe: long getLong(java.lang.Object,long)>($r2, $l7);

        $z0 = <org.apache.flink.types.Record$InternalDeSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label1;

        l10 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l10);

     label1:
        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + 8;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        return l10;

     label2:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public short readShort() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i13, $i14;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b6, $b11;
        short $s7, $s12, $s15;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        if $i0 < 0 goto label1;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i2 = $i1 - 1;

        if $i3 >= $i2 goto label1;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        $b6 = $r2[$i4];

        $s7 = $b6 & 255;

        $i10 = $s7 << 8;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        $b11 = $r3[$i8];

        $s12 = $b11 & 255;

        $i13 = $s12 << 0;

        $i14 = $i10 | $i13;

        $s15 = (short) $i14;

        return $s15;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public java.lang.String readUTF() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i4, $i5, $i7, $i9, $i12, $i13, $i15, $i16, $i17, $i19, $i21, $i24, $i25, $i27, $i30, i32, i33;
        byte[] r1;
        char[] r2;
        byte b1, $b2, $b11, $b14, $b23, $b29, b36, b37;
        java.lang.String $r3, $r8, $r14, $r20;
        short $s3, $s6, $s8, $s10, $s20, $s22, s34, s35;
        java.io.UTFDataFormatException $r4, $r9, $r10, $r15, $r16;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r17, $r18, $r19;
        char $c18, $c26, $c28, $c31;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int readUnsignedShort()>();

        r1 = newarray (byte)[i0];

        r2 = newarray (char)[i0];

        i32 = 0;

        i33 = 0;

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void readFully(byte[],int,int)>(r1, 0, i0);

     label01:
        if i32 >= i0 goto label03;

        $b29 = r1[i32];

        s34 = $b29 & 255;

        if s34 <= 127 goto label02;

        goto label03;

     label02:
        i32 = i32 + 1;

        $i30 = i33;

        i33 = i33 + 1;

        $c31 = (char) s34;

        r2[$i30] = $c31;

        goto label01;

     label03:
        if i32 >= i0 goto label13;

        $b2 = r1[i32];

        s35 = $b2 & 255;

        $s3 = s35 >> 4;

        tableswitch($s3)
        {
            case 0: goto label04;
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            case 4: goto label04;
            case 5: goto label04;
            case 6: goto label04;
            case 7: goto label04;
            case 8: goto label12;
            case 9: goto label12;
            case 10: goto label12;
            case 11: goto label12;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label08;
            default: goto label12;
        };

     label04:
        i32 = i32 + 1;

        $i27 = i33;

        i33 = i33 + 1;

        $c28 = (char) s35;

        r2[$i27] = $c28;

        goto label03;

     label05:
        i32 = i32 + 2;

        if i32 <= i0 goto label06;

        $r15 = new java.io.UTFDataFormatException;

        specialinvoke $r15.<java.io.UTFDataFormatException: void <init>(java.lang.String)>("malformed input: partial character at end");

        throw $r15;

     label06:
        $i19 = i32 - 1;

        b36 = r1[$i19];

        $s20 = b36 & 192;

        if $s20 == 128 goto label07;

        $r10 = new java.io.UTFDataFormatException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i32);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label07:
        $i21 = i33;

        i33 = i33 + 1;

        $s22 = s35 & 31;

        $i24 = $s22 << 6;

        $b23 = b36 & 63;

        $i25 = $i24 | $b23;

        $c26 = (char) $i25;

        r2[$i21] = $c26;

        goto label03;

     label08:
        i32 = i32 + 3;

        if i32 <= i0 goto label09;

        $r9 = new java.io.UTFDataFormatException;

        specialinvoke $r9.<java.io.UTFDataFormatException: void <init>(java.lang.String)>("malformed input: partial character at end");

        throw $r9;

     label09:
        $i4 = i32 - 2;

        b37 = r1[$i4];

        $i5 = i32 - 1;

        b1 = r1[$i5];

        $s6 = b37 & 192;

        if $s6 != 128 goto label10;

        $s8 = b1 & 192;

        if $s8 == 128 goto label11;

     label10:
        $r4 = new java.io.UTFDataFormatException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $i7 = i32 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label11:
        $i9 = i33;

        i33 = i33 + 1;

        $s10 = s35 & 15;

        $i13 = $s10 << 12;

        $b11 = b37 & 63;

        $i12 = $b11 << 6;

        $i16 = $i13 | $i12;

        $b14 = b1 & 63;

        $i15 = $b14 << 0;

        $i17 = $i16 | $i15;

        $c18 = (char) $i17;

        r2[$i9] = $c18;

        goto label03;

     label12:
        $r16 = new java.io.UTFDataFormatException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("malformed input around byte ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i32);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label13:
        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i33);

        return $r3;
    }

    public int readUnsignedByte() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        byte[] $r2;
        byte $b4;
        short $s5;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i1 >= $i0 goto label1;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i3 = $i2 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i3;

        $b4 = $r2[$i2];

        $s5 = $b4 & 255;

        return $s5;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public int readUnsignedShort() throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12, $i13;
        java.io.EOFException $r1;
        byte[] $r2, $r3;
        byte $b5, $b10;
        short $s6, $s11;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label1;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i4;

        $b5 = $r2[$i3];

        $s6 = $b5 & 255;

        $i9 = $s6 << 8;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i8 = $i7 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i8;

        $b10 = $r3[$i7];

        $s11 = $b10 & 255;

        $i12 = $s11 << 0;

        $i13 = $i9 | $i12;

        return $i13;

     label1:
        $r1 = new java.io.EOFException;

        specialinvoke $r1.<java.io.EOFException: void <init>()>();

        throw $r1;
    }

    public int skipBytes(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i8 := @parameter0: int;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i1 = $i0 - i8;

        if $i2 > $i1 goto label1;

        $i6 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i7 = $i6 + i8;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i7;

        return i8;

     label1:
        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        i9 = $i4 - $i3;

        $i5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        return i9;
    }

    public void skipBytesToRead(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3;
        java.io.EOFException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i3 = $i2 - $i1;

        if $i3 >= i0 goto label1;

        $r1 = new java.io.EOFException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not skip ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int skipBytes(int)>(i0);

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IndexOutOfBoundsException $r3, $r4, $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Byte array b cannot be null.");

        throw $r6;

     label1:
        if i0 >= 0 goto label2;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r5;

     label2:
        if i1 >= 0 goto label3;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Length cannot be negative.");

        throw $r4;

     label3:
        $i3 = lengthof r1;

        $i4 = $i3 - i0;

        if $i4 >= i1 goto label4;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Byte array does not provide enough space to store requested data.");

        throw $r3;

     label4:
        $i6 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        if $i6 < $i5 goto label5;

        return -1;

     label5:
        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 - $i7;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i1);

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i10 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i10, r1, i0, i2);

        $i11 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i12 = $i11 + i2;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i12;

        return i2;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        byte[] $r1, $r2;
        byte $b6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r1;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(1);

     label1:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i4 = $i3 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i4;

        $i5 = i0 & 255;

        $b6 = (byte) $i5;

        $r2[$i3] = $b6;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1, $r3, $r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        $i2 = lengthof r1;

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label2;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $i6 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = lengthof $r3;

        $i5 = $i4 - i1;

        if $i6 <= $i5 goto label3;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(i1);

     label3:
        $r4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r4, $i7, i1);

        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + i1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        return;
    }

    public void writeBoolean(boolean) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        boolean z0;
        byte $b0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void write(int)>($b0);

        return;
    }

    public void writeByte(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void write(int)>(i0);

        return;
    }

    public void writeBytes(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i7;
        byte[] $r2;
        char $c6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r2;

        $i2 = $i1 - i0;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(i0);

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void writeByte(int)>($c6);

        i7 = i7 + 1;

        goto label2;

     label3:
        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = $i4 + i0;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        return;
    }

    public void writeChar(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        byte[] $r1, $r2, $r3;
        byte $b7, $b10;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(2);

     label1:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        $i6 = i0 >> 8;

        $b7 = (byte) $i6;

        $r2[$i4] = $b7;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        $b10 = (byte) i0;

        $r3[$i8] = $b10;

        return;
    }

    public void writeChars(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, $i4, $i6, i7;
        byte[] $r2;
        char $c5;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i2 = lengthof $r2;

        $i1 = 2 * i0;

        $i3 = $i2 - $i1;

        if $i4 < $i3 goto label1;

        $i6 = 2 * i0;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>($i6);

     label1:
        i7 = 0;

     label2:
        if i7 >= i0 goto label3;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void writeChar(int)>($c5);

        i7 = i7 + 1;

        goto label2;

     label3:
        return;
    }

    public void writeDouble(double) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        double d0;
        long $l0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void writeLong(long)>($l0);

        return;
    }

    public void writeFloat(float) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        float f0;
        int $i0;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void writeInt(int)>($i0);

        return;
    }

    public void writeInt(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i7, $i8, i9;
        boolean $z0;
        long $l4, $l5, $l6;
        sun.misc.Unsafe $r3;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i9 := @parameter0: int;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 3;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(4);

     label1:
        $z0 = <org.apache.flink.types.Record$InternalDeSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label2;

        i9 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i9);

     label2:
        $r3 = <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $l5 = <org.apache.flink.types.Record$InternalDeSerializer: long BASE_OFFSET>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        virtualinvoke $r3.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>($r2, $l6, i9);

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i8 = $i7 + 4;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i8;

        return;
    }

    public void writeLong(long) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i7, $i8;
        boolean $z0;
        long $l4, $l5, $l6, l9;
        sun.misc.Unsafe $r3;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        l9 := @parameter0: long;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 7;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(8);

     label1:
        $z0 = <org.apache.flink.types.Record$InternalDeSerializer: boolean LITTLE_ENDIAN>;

        if $z0 == 0 goto label2;

        l9 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l9);

     label2:
        $r3 = <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $l5 = <org.apache.flink.types.Record$InternalDeSerializer: long BASE_OFFSET>;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        virtualinvoke $r3.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>($r2, $l6, l9);

        $i7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i8 = $i7 + 8;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i8;

        return;
    }

    public void writeShort(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12;
        byte[] $r1, $r2, $r3;
        byte $b8, $b13;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 1;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(2);

     label1:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        $i6 = i0 >>> 8;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        $r2[$i4] = $b8;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i9 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i10 = $i9 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i10;

        $i11 = i0 >>> 0;

        $i12 = $i11 & 255;

        $b13 = (byte) $i12;

        $r3[$i9] = $b13;

        return;
    }

    public void writeUTF(java.lang.String) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        java.lang.String r1, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i31, $i33, $i35, i36, i37, i39, i40, i41, i42, i45, i46, i47;
        byte[] $r2, r8;
        byte $b7, $b10, $b14, $b18, $b22, $b26, $b30, $b32, $b34;
        char $c11, $c12, $c13, $c15, $c16, $c17, $c19, $c20, $c21, $c23, $c24, $c25, $c27, $c28, $c29, c38, c43, c44;
        java.io.UTFDataFormatException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        i36 = 0;

        i37 = 0;

     label01:
        if i37 >= i0 goto label05;

        c38 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i37);

        if c38 < 1 goto label02;

        if c38 > 127 goto label02;

        i36 = i36 + 1;

        goto label04;

     label02:
        if c38 <= 2047 goto label03;

        i36 = i36 + 3;

        goto label04;

     label03:
        i36 = i36 + 2;

     label04:
        i37 = i37 + 1;

        goto label01;

     label05:
        if i36 <= 65535 goto label06;

        $r3 = new java.io.UTFDataFormatException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoded string is too long: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i36);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label06:
        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r2;

        $i2 = $i1 - i36;

        $i3 = $i2 - 2;

        if $i4 <= $i3 goto label07;

        $i35 = i36 + 2;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>($i35);

     label07:
        r8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        i39 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        i40 = i39 + 1;

        $i5 = i36 >>> 8;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        r8[i39] = $b7;

        i41 = i40 + 1;

        $i8 = i36 >>> 0;

        $i9 = $i8 & 255;

        $b10 = (byte) $i9;

        r8[i40] = $b10;

        i42 = 0;

     label08:
        if i42 >= i0 goto label10;

        c43 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c43 < 1 goto label10;

        if c43 <= 127 goto label09;

        goto label10;

     label09:
        $i33 = i41;

        i41 = i41 + 1;

        $b34 = (byte) c43;

        r8[$i33] = $b34;

        i42 = i42 + 1;

        goto label08;

     label10:
        if i42 >= i0 goto label14;

        c44 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i42);

        if c44 < 1 goto label11;

        if c44 > 127 goto label11;

        $i31 = i41;

        i41 = i41 + 1;

        $b32 = (byte) c44;

        r8[$i31] = $b32;

        goto label13;

     label11:
        if c44 <= 2047 goto label12;

        i45 = i41 + 1;

        $c19 = c44 >> 12;

        $c20 = $c19 & 15;

        $c21 = 224 | $c20;

        $b22 = (byte) $c21;

        r8[i41] = $b22;

        i46 = i45 + 1;

        $c23 = c44 >> 6;

        $c24 = $c23 & 63;

        $c25 = 128 | $c24;

        $b26 = (byte) $c25;

        r8[i45] = $b26;

        i41 = i46 + 1;

        $c27 = c44 >> 0;

        $c28 = $c27 & 63;

        $c29 = 128 | $c28;

        $b30 = (byte) $c29;

        r8[i46] = $b30;

        goto label13;

     label12:
        i47 = i41 + 1;

        $c11 = c44 >> 6;

        $c12 = $c11 & 31;

        $c13 = 192 | $c12;

        $b14 = (byte) $c13;

        r8[i41] = $b14;

        i41 = i47 + 1;

        $c15 = c44 >> 0;

        $c16 = $c15 & 63;

        $c17 = 128 | $c16;

        $b18 = (byte) $c17;

        r8[i47] = $b18;

     label13:
        i42 = i42 + 1;

        goto label10;

     label14:
        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = i41;

        return;
    }

    private void writeValLenIntBackwards(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i36, $i37, $i38, $i39, $i41, $i42, $i43, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i54, $i55, $i56, $i58, $i59, $i60, $i62, $i63, $i64, $i66, $i67;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        byte $b7, $b12, $b17, $b22, $b26, $b30, $b35, $b40, $b44, $b48, $b53, $b57, $b61, $b65, $b68;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r1;

        $i2 = $i1 - 4;

        if $i3 <= $i2 goto label1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(4);

     label1:
        if i0 > 127 goto label2;

        $r16 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i66 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i67 = $i66 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i67;

        $b68 = (byte) i0;

        $r16[$i66] = $b68;

        goto label6;

     label2:
        if i0 > 16383 goto label3;

        $r14 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i58 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i59 = $i58 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i59;

        $i60 = i0 >>> 7;

        $b61 = (byte) $i60;

        $r14[$i58] = $b61;

        $r15 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i62 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i63 = $i62 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i63;

        $i64 = i0 | 128;

        $b65 = (byte) $i64;

        $r15[$i62] = $b65;

        goto label6;

     label3:
        if i0 > 2097151 goto label4;

        $r11 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i45 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i46 = $i45 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i46;

        $i47 = i0 >>> 14;

        $b48 = (byte) $i47;

        $r11[$i45] = $b48;

        $r12 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i49 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i50 = $i49 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i50;

        $i51 = i0 >>> 7;

        $i52 = $i51 | 128;

        $b53 = (byte) $i52;

        $r12[$i49] = $b53;

        $r13 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i54 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i55 = $i54 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i55;

        $i56 = i0 | 128;

        $b57 = (byte) $i56;

        $r13[$i54] = $b57;

        goto label6;

     label4:
        if i0 > 268435455 goto label5;

        $r7 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i27 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i28 = $i27 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i28;

        $i29 = i0 >>> 21;

        $b30 = (byte) $i29;

        $r7[$i27] = $b30;

        $r8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i31 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i32 = $i31 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i32;

        $i33 = i0 >>> 14;

        $i34 = $i33 | 128;

        $b35 = (byte) $i34;

        $r8[$i31] = $b35;

        $r9 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i36 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i37 = $i36 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i37;

        $i38 = i0 >>> 7;

        $i39 = $i38 | 128;

        $b40 = (byte) $i39;

        $r9[$i36] = $b40;

        $r10 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i41 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i42 = $i41 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i42;

        $i43 = i0 | 128;

        $b44 = (byte) $i43;

        $r10[$i41] = $b44;

        goto label6;

     label5:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i5 = $i4 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i5;

        $i6 = i0 >>> 28;

        $b7 = (byte) $i6;

        $r2[$i4] = $b7;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i8 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i9 = $i8 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i9;

        $i10 = i0 >>> 21;

        $i11 = $i10 | 128;

        $b12 = (byte) $i11;

        $r3[$i8] = $b12;

        $r4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i13 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i14 = $i13 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i14;

        $i15 = i0 >>> 14;

        $i16 = $i15 | 128;

        $b17 = (byte) $i16;

        $r4[$i13] = $b17;

        $r5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i18 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i19 = $i18 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i19;

        $i20 = i0 >>> 7;

        $i21 = $i20 | 128;

        $b22 = (byte) $i21;

        $r5[$i18] = $b22;

        $r6 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i23 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i24 = $i23 + 1;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i24;

        $i25 = i0 | 128;

        $b26 = (byte) $i25;

        $r6[$i23] = $b26;

     label6:
        return;
    }

    private void resize(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        byte[] r1, $r2, $r3, $r4;
        java.lang.NegativeArraySizeException $r5;
        java.io.IOException $r6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i1 = lengthof $r2;

        $i4 = $i1 * 2;

        $r3 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i2 = lengthof $r3;

        $i3 = $i2 + i0;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        r1 = newarray (byte)[i6];

        $r4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i5);

        r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory> = r1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Serialization failed because the record length would exceed 2GB.");

        throw $r6;

     label4:
        return;

        catch java.lang.NegativeArraySizeException from label1 to label2 with label3;
    }

    public void skipBytesToWrite(int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0, i1;
        java.io.EOFException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: int skipBytes(int)>(i0);

        if i1 == i0 goto label1;

        $r1 = new java.io.EOFException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not skip ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.EOFException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        return;
    }

    public void write(org.apache.flink.core.memory.DataInputView, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        i0 := @parameter1: int;

        $i2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int end>;

        $i1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i3 = $i2 - $i1;

        if i0 <= $i3 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes since the buffer is full.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        $r2 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        $i4 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[],int,int)>($r2, $i4, i0);

        $i5 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        $i6 = $i5 + i0;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = $i6;

        return;
    }

    void <init>(org.apache.flink.types.Record$1)
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        org.apache.flink.types.Record$1 r1;

        r0 := @this: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter0: org.apache.flink.types.Record$1;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void <init>()>();

        return;
    }

    static byte[] access$102(org.apache.flink.types.Record$InternalDeSerializer, byte[])
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] r1;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        r1 := @parameter1: byte[];

        r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory> = r1;

        return r1;
    }

    static int access$202(org.apache.flink.types.Record$InternalDeSerializer, int)
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter1: int;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int position> = i0;

        return i0;
    }

    static int access$302(org.apache.flink.types.Record$InternalDeSerializer, int)
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter1: int;

        r0.<org.apache.flink.types.Record$InternalDeSerializer: int end> = i0;

        return i0;
    }

    static int access$200(org.apache.flink.types.Record$InternalDeSerializer)
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int $i0;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        $i0 = r0.<org.apache.flink.types.Record$InternalDeSerializer: int position>;

        return $i0;
    }

    static byte[] access$100(org.apache.flink.types.Record$InternalDeSerializer)
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        byte[] $r1;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        $r1 = r0.<org.apache.flink.types.Record$InternalDeSerializer: byte[] memory>;

        return $r1;
    }

    static void access$400(org.apache.flink.types.Record$InternalDeSerializer, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void resize(int)>(i0);

        return;
    }

    static void access$500(org.apache.flink.types.Record$InternalDeSerializer, int) throws java.io.IOException
    {
        org.apache.flink.types.Record$InternalDeSerializer r0;
        int i0;

        r0 := @parameter0: org.apache.flink.types.Record$InternalDeSerializer;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.flink.types.Record$InternalDeSerializer: void writeValLenIntBackwards(int)>(i0);

        return;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;
        int $i0;
        long $l1;
        java.nio.ByteOrder $r2, $r3;
        boolean $z0;

        <org.apache.flink.types.Record$InternalDeSerializer: long serialVersionUID> = 1L;

        $r0 = <org.apache.flink.core.memory.MemoryUtils: sun.misc.Unsafe UNSAFE>;

        <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE> = $r0;

        $r1 = <org.apache.flink.types.Record$InternalDeSerializer: sun.misc.Unsafe UNSAFE>;

        $i0 = virtualinvoke $r1.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        $l1 = (long) $i0;

        <org.apache.flink.types.Record$InternalDeSerializer: long BASE_OFFSET> = $l1;

        $r3 = <org.apache.flink.core.memory.MemoryUtils: java.nio.ByteOrder NATIVE_BYTE_ORDER>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r3 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        <org.apache.flink.types.Record$InternalDeSerializer: boolean LITTLE_ENDIAN> = $z0;

        return;
    }
}
