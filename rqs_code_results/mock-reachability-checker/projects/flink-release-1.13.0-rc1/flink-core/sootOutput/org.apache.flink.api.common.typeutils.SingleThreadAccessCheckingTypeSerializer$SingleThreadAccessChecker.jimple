class org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.util.concurrent.atomic.AtomicReference currentThreadRef;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker r0;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: java.util.concurrent.atomic.AtomicReference currentThreadRef> = $r1;

        return;
    }

    org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck startSingleThreadAccessCheck()
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker r0;
        boolean $z0, $z1;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck $r1;
        java.util.concurrent.atomic.AtomicReference $r2, $r3, $r8;
        java.lang.Thread $r4;
        java.lang.AssertionError $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.Object $r9;
        java.lang.String $r11;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker;

        $z0 = <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: java.util.concurrent.atomic.AtomicReference currentThreadRef>;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, $r4);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.AssertionError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The checker has concurrent access from ");

        $r8 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: java.util.concurrent.atomic.AtomicReference currentThreadRef>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r5;

     label1:
        $r1 = new org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck;

        $r2 = r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: java.util.concurrent.atomic.AtomicReference currentThreadRef>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessCheck: void <init>(java.util.concurrent.atomic.AtomicReference,org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1)>($r2, null);

        return $r1;
    }

    private void readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.atomic.AtomicReference $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: java.util.concurrent.atomic.AtomicReference currentThreadRef> = $r2;

        return;
    }

    void <init>(org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1)
    {
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker r0;
        org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1 r1;

        r0 := @this: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: long serialVersionUID> = 131020282727167064L;

        $r0 = class "Lorg/apache/flink/api/common/typeutils/SingleThreadAccessCheckingTypeSerializer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.flink.api.common.typeutils.SingleThreadAccessCheckingTypeSerializer$SingleThreadAccessChecker: boolean $assertionsDisabled> = $z1;

        return;
    }
}
