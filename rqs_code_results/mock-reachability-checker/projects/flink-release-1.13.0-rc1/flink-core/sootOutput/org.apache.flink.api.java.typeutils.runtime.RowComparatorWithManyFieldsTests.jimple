public class org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests extends org.apache.flink.api.common.typeutils.ComparatorTestBase
{
    private static final int numberOfFields;
    private static org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo;
    private static final org.apache.flink.types.Row[] data;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.ComparatorTestBase: void <init>()>();

        return;
    }

    public static void setUp() throws java.lang.Exception
    {
        org.apache.flink.api.common.typeinfo.TypeInformation[] r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r1;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r2;
        int i0;

        r0 = newarray (org.apache.flink.api.common.typeinfo.TypeInformation)[10];

        i0 = 0;

     label1:
        if i0 >= 10 goto label2;

        $r2 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        r0[i0] = $r2;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = new org.apache.flink.api.java.typeutils.RowTypeInfo;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.RowTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation[])>(r0);

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo> = $r1;

        return;
    }

    protected void deepEquals(java.lang.String, org.apache.flink.types.Row, org.apache.flink.types.Row)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        java.lang.String r1;
        org.apache.flink.types.Row r2, r3;
        int i0, $i2, i4;
        java.lang.Object r4, r5;
        long $l1, $l3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.types.Row;

        r3 := @parameter2: org.apache.flink.types.Row;

        i0 = virtualinvoke r2.<org.apache.flink.types.Row: int getArity()>();

        $l1 = (long) i0;

        $i2 = virtualinvoke r3.<org.apache.flink.types.Row: int getArity()>();

        $l3 = (long) $i2;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,long,long)>(r1, $l1, $l3);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r4 = virtualinvoke r2.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        r5 = virtualinvoke r3.<org.apache.flink.types.Row: java.lang.Object getField(int)>(i4);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r5, r4);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    protected org.apache.flink.api.common.typeutils.TypeComparator createComparator(boolean)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        boolean z0;
        int[] $r1;
        boolean[] $r2;
        org.apache.flink.api.common.ExecutionConfig $r3;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r4;
        org.apache.flink.api.common.typeutils.TypeComparator $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        z0 := @parameter0: boolean;

        $r4 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo>;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r2 = newarray (boolean)[1];

        $r2[0] = z0;

        $r3 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r3.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeComparator createComparator(int[],boolean[],int,org.apache.flink.api.common.ExecutionConfig)>($r1, $r2, 0, $r3);

        return $r5;
    }

    protected org.apache.flink.api.common.typeutils.TypeSerializer createSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        org.apache.flink.api.common.ExecutionConfig $r1;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        $r2 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.api.java.typeutils.RowTypeInfo typeInfo>;

        $r1 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r1.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        $r3 = virtualinvoke $r2.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>($r1);

        return $r3;
    }

    protected org.apache.flink.types.Row[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        org.apache.flink.types.Row[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row[] data>;

        return $r1;
    }

    protected boolean supportsNullKeys()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        return 1;
    }

    private static transient org.apache.flink.types.Row createRow(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1, $i2;
        org.apache.flink.types.Row $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r0;

        if $i0 != 10 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        $r3 = new org.apache.flink.types.Row;

        specialinvoke $r3.<org.apache.flink.types.Row: void <init>(int)>(10);

        i1 = 0;

     label3:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label4;

        $r4 = r0[i1];

        virtualinvoke $r3.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(i1, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r3;
    }

    protected volatile void deepEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        java.lang.String r1;
        java.lang.Object r2, r3;
        org.apache.flink.types.Row $r4, $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r5 = (org.apache.flink.types.Row) r2;

        $r4 = (org.apache.flink.types.Row) r3;

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: void deepEquals(java.lang.String,org.apache.flink.types.Row,org.apache.flink.types.Row)>(r1, $r5, $r4);

        return;
    }

    protected volatile java.lang.Object[] getSortedTestData()
    {
        org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests r0;
        org.apache.flink.types.Row[] $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row[] getSortedTestData()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.flink.types.Row[] $r0;
        java.lang.Object[] $r1, $r3, $r5, $r7;
        org.apache.flink.types.Row $r2, $r4, $r6, $r8;

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: int numberOfFields> = 10;

        $r0 = newarray (org.apache.flink.types.Row)[4];

        $r1 = newarray (java.lang.Object)[10];

        $r1[0] = null;

        $r1[1] = "b0";

        $r1[2] = "c0";

        $r1[3] = "d0";

        $r1[4] = "e0";

        $r1[5] = "f0";

        $r1[6] = "g0";

        $r1[7] = "h0";

        $r1[8] = "i0";

        $r1[9] = "j0";

        $r2 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row createRow(java.lang.Object[])>($r1);

        $r0[0] = $r2;

        $r3 = newarray (java.lang.Object)[10];

        $r3[0] = "a1";

        $r3[1] = "b1";

        $r3[2] = "c1";

        $r3[3] = "d1";

        $r3[4] = "e1";

        $r3[5] = "f1";

        $r3[6] = "g1";

        $r3[7] = "h1";

        $r3[8] = "i1";

        $r3[9] = "j1";

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row createRow(java.lang.Object[])>($r3);

        $r0[1] = $r4;

        $r5 = newarray (java.lang.Object)[10];

        $r5[0] = "a2";

        $r5[1] = "b2";

        $r5[2] = "c2";

        $r5[3] = "d2";

        $r5[4] = "e2";

        $r5[5] = "f2";

        $r5[6] = "g2";

        $r5[7] = "h2";

        $r5[8] = "i2";

        $r5[9] = "j2";

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row createRow(java.lang.Object[])>($r5);

        $r0[2] = $r6;

        $r7 = newarray (java.lang.Object)[10];

        $r7[0] = "a3";

        $r7[1] = "b3";

        $r7[2] = "c3";

        $r7[3] = "d3";

        $r7[4] = "e3";

        $r7[5] = "f3";

        $r7[6] = "g3";

        $r7[7] = "h3";

        $r7[8] = "i3";

        $r7[9] = "j3";

        $r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row createRow(java.lang.Object[])>($r7);

        $r0[3] = $r8;

        <org.apache.flink.api.java.typeutils.runtime.RowComparatorWithManyFieldsTests: org.apache.flink.types.Row[] data> = $r0;

        return;
    }
}
