public class org.apache.commons.lang3.Validate extends java.lang.Object
{
    private static final java.lang.String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE;
    private static final java.lang.String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE;
    private static final java.lang.String DEFAULT_MATCHES_PATTERN_EX;
    private static final java.lang.String DEFAULT_IS_NULL_EX_MESSAGE;
    private static final java.lang.String DEFAULT_IS_TRUE_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NOT_BLANK_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE;
    private static final java.lang.String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE;
    private static final java.lang.String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE;
    private static final java.lang.String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE;
    private static final java.lang.String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE;
    private static final java.lang.String DEFAULT_VALID_STATE_EX_MESSAGE;
    private static final java.lang.String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE;
    private static final java.lang.String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE;

    public void <init>()
    {
        org.apache.commons.lang3.Validate r0;

        r0 := @this: org.apache.commons.lang3.Validate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void isTrue(boolean, java.lang.String, long)
    {
        boolean z0;
        java.lang.String r0, $r4;
        long l0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String, double)
    {
        boolean z0;
        java.lang.String r0, $r4;
        double d0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.Double $r3;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;

     label1:
        return;
    }

    public static transient void isTrue(boolean, java.lang.String, java.lang.Object[])
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        java.lang.IllegalArgumentException $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    public static void isTrue(boolean)
    {
        boolean z0;
        java.lang.IllegalArgumentException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The validated expression is false");

        throw $r0;

     label1:
        return;
    }

    public static java.lang.Object notNull(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "The validated object is null", $r1);

        return $r2;
    }

    public static transient java.lang.Object notNull(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        return r0;
    }

    public static transient java.lang.Object[] notEmpty(java.lang.Object[], java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r0, r2;
        java.lang.String r1, $r4, $r6;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        return r0;
    }

    public static java.lang.Object[] notEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])>(r0, "The validated array is empty", $r1);

        return $r2;
    }

    public static transient java.util.Collection notEmpty(java.util.Collection, java.lang.String, java.lang.Object[])
    {
        java.util.Collection r0;
        java.lang.String r1, $r4, $r6;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        return r0;
    }

    public static java.util.Collection notEmpty(java.util.Collection)
    {
        java.util.Collection r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.Collection;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Collection notEmpty(java.util.Collection,java.lang.String,java.lang.Object[])>(r0, "The validated collection is empty", $r1);

        return $r2;
    }

    public static transient java.util.Map notEmpty(java.util.Map, java.lang.String, java.lang.Object[])
    {
        java.util.Map r0;
        java.lang.String r1, $r4, $r6;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        return r0;
    }

    public static java.util.Map notEmpty(java.util.Map)
    {
        java.util.Map r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.Map;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Map notEmpty(java.util.Map,java.lang.String,java.lang.Object[])>(r0, "The validated map is empty", $r1);

        return $r2;
    }

    public static transient java.lang.CharSequence notEmpty(java.lang.CharSequence, java.lang.String, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.String r1, $r4, $r6;
        java.lang.Object[] r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        return r0;
    }

    public static java.lang.CharSequence notEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(r0, "The validated character sequence is empty", $r1);

        return $r2;
    }

    public static transient java.lang.CharSequence notBlank(java.lang.CharSequence, java.lang.String, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.String r1, $r4, $r6;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $z0 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        return r0;
    }

    public static java.lang.CharSequence notBlank(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notBlank(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(r0, "The validated character sequence is blank", $r1);

        return $r2;
    }

    public static transient java.lang.Object[] noNullElements(java.lang.Object[], java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r0, r2, r3;
        java.lang.String r1, $r8;
        int $i0, i1;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(r0);

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r5 = r0[i1];

        if $r5 != null goto label2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        r3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] add(java.lang.Object[],java.lang.Object)>(r2, $r6);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r3);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r0;
    }

    public static java.lang.Object[] noNullElements(java.lang.Object[])
    {
        java.lang.Object[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])>(r0, "The validated array contains null element at index: %d", $r1);

        return $r2;
    }

    public static transient java.lang.Iterable noNullElements(java.lang.Iterable, java.lang.String, java.lang.Object[])
    {
        java.lang.Iterable r0;
        java.lang.String r1, $r10;
        java.lang.Object[] r2, r4, $r7;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Integer $r8;
        java.lang.IllegalArgumentException $r9;
        int i0;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(r0);

        i0 = 0;

        r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if $r6 != null goto label2;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        r4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] addAll(java.lang.Object[],java.lang.Object[])>(r2, $r7);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r4);

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r0;
    }

    public static java.lang.Iterable noNullElements(java.lang.Iterable)
    {
        java.lang.Iterable r0, $r2;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = newarray (java.lang.Object)[0];

        $r2 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Iterable noNullElements(java.lang.Iterable,java.lang.String,java.lang.Object[])>(r0, "The validated collection contains null element at index: %d", $r1);

        return $r2;
    }

    public static transient java.lang.Object[] validIndex(java.lang.Object[], int, java.lang.String, java.lang.Object[])
    {
        java.lang.Object[] r0, r2;
        int i0, $i1;
        java.lang.String r1, $r5;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $i1 = lengthof r0;

        if i0 < $i1 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return r0;
    }

    public static java.lang.Object[] validIndex(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r1, $r3;
        int i0;
        java.lang.Integer $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] validIndex(java.lang.Object[],int,java.lang.String,java.lang.Object[])>(r0, i0, "The validated array index is invalid: %d", $r1);

        return $r3;
    }

    public static transient java.util.Collection validIndex(java.util.Collection, int, java.lang.String, java.lang.Object[])
    {
        java.util.Collection r0;
        int i0, $i1;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $i1 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if i0 < $i1 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return r0;
    }

    public static java.util.Collection validIndex(java.util.Collection, int)
    {
        java.util.Collection r0, $r3;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.lang3.Validate: java.util.Collection validIndex(java.util.Collection,int,java.lang.String,java.lang.Object[])>(r0, i0, "The validated collection index is invalid: %d", $r1);

        return $r3;
    }

    public static transient java.lang.CharSequence validIndex(java.lang.CharSequence, int, java.lang.String, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        int i0, $i1;
        java.lang.String r1, $r5;
        java.lang.Object[] r2;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.Object[];

        staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(r0);

        if i0 < 0 goto label1;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i0 < $i1 goto label2;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return r0;
    }

    public static java.lang.CharSequence validIndex(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, $r3;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence validIndex(java.lang.CharSequence,int,java.lang.String,java.lang.Object[])>(r0, i0, "The validated character sequence index is invalid: %d", $r1);

        return $r3;
    }

    public static void validState(boolean)
    {
        boolean z0;
        java.lang.IllegalStateException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The validated state is false");

        throw $r0;

     label1:
        return;
    }

    public static transient void validState(boolean, java.lang.String, java.lang.Object[])
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        java.lang.IllegalStateException $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    public static void matchesPattern(java.lang.CharSequence, java.lang.String)
    {
        java.lang.CharSequence r0;
        java.lang.String r1, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(r1, r0);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r0;

        $r3[1] = r1;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The string %s does not match the pattern %s", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        return;
    }

    public static transient void matchesPattern(java.lang.CharSequence, java.lang.String, java.lang.String, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.String r1, r2, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(r1, r0);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        return;
    }

    public static void inclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable)
    {
        java.lang.Object r0, r1;
        java.lang.Comparable r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Comparable;

        $i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i1 <= 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r2;

        $r4[1] = r0;

        $r4[2] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        return;
    }

    public static transient void inclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0, r1;
        java.lang.Comparable r2;
        java.lang.String r3, $r6;
        java.lang.Object[] r4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Comparable;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        $i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 < 0 goto label1;

        $i1 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i1 <= 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    public static void inclusiveBetween(long, long, long)
    {
        long l0, l1, l2;
        byte $b3, $b4;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Long $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $b3 = l2 cmp l0;

        if $b3 < 0 goto label1;

        $b4 = l2 cmp l1;

        if $b4 <= 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public static void inclusiveBetween(long, long, long, java.lang.String)
    {
        long l0, l1, l2;
        java.lang.String r0, $r3;
        byte $b3, $b4;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r0 := @parameter3: java.lang.String;

        $b3 = l2 cmp l0;

        if $b3 < 0 goto label1;

        $b4 = l2 cmp l1;

        if $b4 <= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }

    public static void inclusiveBetween(double, double, double)
    {
        double d0, d1, d2;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Double $r2, $r3, $r4;
        java.lang.String $r5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d2 cmpg d0;

        if $b0 < 0 goto label1;

        $b1 = d2 cmpl d1;

        if $b1 <= 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified inclusive range of %s to %s", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public static void inclusiveBetween(double, double, double, java.lang.String)
    {
        double d0, d1, d2;
        java.lang.String r0, $r3;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: java.lang.String;

        $b0 = d2 cmpg d0;

        if $b0 < 0 goto label1;

        $b1 = d2 cmpl d1;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }

    public static void exclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable)
    {
        java.lang.Object r0, r1;
        java.lang.Comparable r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Comparable;

        $i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 <= 0 goto label1;

        $i1 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i1 < 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = r2;

        $r4[1] = r0;

        $r4[2] = r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        return;
    }

    public static transient void exclusiveBetween(java.lang.Object, java.lang.Object, java.lang.Comparable, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0, r1;
        java.lang.Comparable r2;
        java.lang.String r3, $r6;
        java.lang.Object[] r4;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Comparable;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object[];

        $i0 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r0);

        if $i0 <= 0 goto label1;

        $i1 = interfaceinvoke r2.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if $i1 < 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r3, r4);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    public static void exclusiveBetween(long, long, long)
    {
        long l0, l1, l2;
        byte $b3, $b4;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Long $r2, $r3, $r4;
        java.lang.String $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $b3 = l2 cmp l0;

        if $b3 <= 0 goto label1;

        $b4 = l2 cmp l1;

        if $b4 < 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public static void exclusiveBetween(long, long, long, java.lang.String)
    {
        long l0, l1, l2;
        java.lang.String r0, $r3;
        byte $b3, $b4;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r0 := @parameter3: java.lang.String;

        $b3 = l2 cmp l0;

        if $b3 <= 0 goto label1;

        $b4 = l2 cmp l1;

        if $b4 < 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }

    public static void exclusiveBetween(double, double, double)
    {
        double d0, d1, d2;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r0;
        java.lang.Object[] $r1;
        java.lang.Double $r2, $r3, $r4;
        java.lang.String $r5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d2 cmpg d0;

        if $b0 <= 0 goto label1;

        $b1 = d2 cmpl d1;

        if $b1 < 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The value %s is not in the specified exclusive range of %s to %s", $r1);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;

     label2:
        return;
    }

    public static void exclusiveBetween(double, double, double, java.lang.String)
    {
        double d0, d1, d2;
        java.lang.String r0, $r3;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: java.lang.String;

        $b0 = d2 cmpg d0;

        if $b0 <= 0 goto label1;

        $b1 = d2 cmpl d1;

        if $b1 < 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return;
    }

    public static void isInstanceOf(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0, $r6;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r5, $r7, $r8;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3[0] = $r5;

        if r1 != null goto label1;

        $r8 = "null";

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r3[1] = $r8;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Expected type: %s, actual: %s", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label3:
        return;
    }

    public static transient void isInstanceOf(java.lang.Class, java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Class r0;
        java.lang.Object r1;
        java.lang.String r2, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        return;
    }

    public static void isAssignableFrom(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r5, $r6, $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = newarray (java.lang.Object)[2];

        if r1 != null goto label1;

        $r7 = "null";

        goto label2;

     label1:
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

     label2:
        $r3[0] = $r7;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot assign a %s to a %s", $r3);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return;
    }

    public static transient void isAssignableFrom(java.lang.Class, java.lang.Class, java.lang.String, java.lang.Object[])
    {
        java.lang.Class r0, r1;
        java.lang.String r2, $r5;
        java.lang.Object[] r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.Object[];

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r3);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE> = "Expected type: %s, actual: %s";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE> = "Cannot assign a %s to a %s";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_VALID_STATE_EX_MESSAGE> = "The validated state is false";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE> = "The validated collection index is invalid: %d";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE> = "The validated character sequence index is invalid: %d";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE> = "The validated array index is invalid: %d";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE> = "The validated map is empty";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE> = "The validated collection is empty";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE> = "The validated character sequence is empty";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE> = "The validated array is empty";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NOT_BLANK_EX_MESSAGE> = "The validated character sequence is blank";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE> = "The validated collection contains null element at index: %d";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE> = "The validated array contains null element at index: %d";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_IS_TRUE_EX_MESSAGE> = "The validated expression is false";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_IS_NULL_EX_MESSAGE> = "The validated object is null";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_MATCHES_PATTERN_EX> = "The string %s does not match the pattern %s";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE> = "The value %s is not in the specified inclusive range of %s to %s";

        <org.apache.commons.lang3.Validate: java.lang.String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE> = "The value %s is not in the specified exclusive range of %s to %s";

        return;
    }
}
