public class org.apache.flink.configuration.ClusterOptions extends java.lang.Object
{
    public static final org.apache.flink.configuration.ConfigOption INITIAL_REGISTRATION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption MAX_REGISTRATION_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption ERROR_REGISTRATION_DELAY;
    public static final org.apache.flink.configuration.ConfigOption REFUSED_REGISTRATION_DELAY;
    public static final org.apache.flink.configuration.ConfigOption CLUSTER_SERVICES_SHUTDOWN_TIMEOUT;
    public static final org.apache.flink.configuration.ConfigOption CLUSTER_IO_EXECUTOR_POOL_SIZE;
    public static final org.apache.flink.configuration.ConfigOption EVENLY_SPREAD_OUT_SLOTS_STRATEGY;
    public static final org.apache.flink.configuration.ConfigOption HALT_ON_FATAL_ERROR;
    public static final org.apache.flink.configuration.ConfigOption INTERCEPT_USER_SYSTEM_EXIT;
    public static final org.apache.flink.configuration.ConfigOption ENABLE_DECLARATIVE_RESOURCE_MANAGEMENT;
    public static final org.apache.flink.configuration.ConfigOption ENABLE_FINE_GRAINED_RESOURCE_MANAGEMENT;

    public void <init>()
    {
        org.apache.flink.configuration.ClusterOptions r0;

        r0 := @this: org.apache.flink.configuration.ClusterOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isDeclarativeResourceManagementEnabled(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption $r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Properties $r2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_DECLARATIVE_RESOURCE_MANAGEMENT>;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean contains(org.apache.flink.configuration.ConfigOption)>($r1);

        if $z0 == 0 goto label1;

        $r3 = <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_DECLARATIVE_RESOURCE_MANAGEMENT>;

        $r4 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $z1 = virtualinvoke $r2.<java.util.Properties: boolean containsKey(java.lang.Object)>("flink.tests.disable-declarative");

        if $z1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static org.apache.flink.configuration.JobManagerOptions$SchedulerType getSchedulerType(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0, $z1;
        org.apache.flink.configuration.JobManagerOptions$SchedulerType $r1, $r4;
        org.apache.flink.configuration.ConfigOption $r2;
        java.lang.Object $r3;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = staticinvoke <org.apache.flink.configuration.ClusterOptions: boolean isAdaptiveSchedulerEnabled(org.apache.flink.configuration.Configuration)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.flink.configuration.ClusterOptions: boolean isReactiveModeEnabled(org.apache.flink.configuration.Configuration)>(r0);

        if $z1 == 0 goto label2;

     label1:
        $r1 = <org.apache.flink.configuration.JobManagerOptions$SchedulerType: org.apache.flink.configuration.JobManagerOptions$SchedulerType Adaptive>;

        return $r1;

     label2:
        $r2 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER>;

        $r3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r2);

        $r4 = (org.apache.flink.configuration.JobManagerOptions$SchedulerType) $r3;

        return $r4;
    }

    private static boolean isReactiveModeEnabled(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption $r1;
        java.lang.Object $r2;
        org.apache.flink.configuration.SchedulerExecutionMode $r3;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER_MODE>;

        $r2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r1);

        $r3 = <org.apache.flink.configuration.SchedulerExecutionMode: org.apache.flink.configuration.SchedulerExecutionMode REACTIVE>;

        if $r2 != $r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isAdaptiveSchedulerEnabled(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        org.apache.flink.configuration.ConfigOption $r1, $r3;
        boolean $z0, $z1, $z2;
        java.util.Properties $r2;
        java.lang.Object $r4;
        org.apache.flink.configuration.JobManagerOptions$SchedulerType $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $r1 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER>;

        $z0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean contains(org.apache.flink.configuration.ConfigOption)>($r1);

        if $z0 == 0 goto label3;

        $r3 = <org.apache.flink.configuration.JobManagerOptions: org.apache.flink.configuration.ConfigOption SCHEDULER>;

        $r4 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r3);

        $r5 = <org.apache.flink.configuration.JobManagerOptions$SchedulerType: org.apache.flink.configuration.JobManagerOptions$SchedulerType Adaptive>;

        if $r4 != $r5 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $z1 = virtualinvoke $r2.<java.util.Properties: boolean containsKey(java.lang.Object)>("flink.tests.enable-adaptive-scheduler");

        return $z1;
    }

    public static boolean isFineGrainedResourceManagementEnabled(org.apache.flink.configuration.Configuration)
    {
        org.apache.flink.configuration.Configuration r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.configuration.ConfigOption $r1, $r3;
        java.util.Properties $r2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        $z0 = staticinvoke <org.apache.flink.configuration.ClusterOptions: boolean isDeclarativeResourceManagementEnabled(org.apache.flink.configuration.Configuration)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_FINE_GRAINED_RESOURCE_MANAGEMENT>;

        $z1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: boolean contains(org.apache.flink.configuration.ConfigOption)>($r1);

        if $z1 == 0 goto label2;

        $r3 = <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_FINE_GRAINED_RESOURCE_MANAGEMENT>;

        $r4 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: java.lang.Object get(org.apache.flink.configuration.ConfigOption)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        $z3 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z3;

     label2:
        $r2 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $z2 = virtualinvoke $r2.<java.util.Properties: boolean containsKey(java.lang.Object)>("flink.tests.enable-fine-grained");

        return $z2;
    }

    static void <clinit>()
    {
        org.apache.flink.configuration.ConfigOptions$OptionBuilder $r0, $r4, $r8, $r12, $r16, $r20, $r24, $r33, $r43, $r49, $r54;
        java.lang.Long $r1, $r5, $r9, $r13, $r17;
        org.apache.flink.configuration.ConfigOption $r2, $r3, $r6, $r7, $r10, $r11, $r14, $r15, $r18, $r19, $r22, $r23, $r26, $r32, $r36, $r42, $r46, $r48, $r52, $r53, $r57, $r58;
        org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder $r21, $r34, $r44, $r50, $r55;
        java.lang.Boolean $r25, $r35, $r51, $r56;
        org.apache.flink.configuration.description.Description$DescriptionBuilder $r27, $r30, $r37, $r40;
        org.apache.flink.configuration.description.InlineElement[] $r28, $r38;
        org.apache.flink.configuration.description.TextElement $r29;
        org.apache.flink.configuration.description.Description $r31, $r41, $r47;
        org.apache.flink.configuration.description.LinkElement $r39;
        org.apache.flink.configuration.ClusterOptions$UserSystemExitMode $r45;

        $r0 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.registration.initial-timeout");

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(100L);

        $r2 = virtualinvoke $r0.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Initial registration timeout between cluster components in milliseconds.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption INITIAL_REGISTRATION_TIMEOUT> = $r3;

        $r4 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.registration.max-timeout");

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r6 = virtualinvoke $r4.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Maximum registration timeout between cluster components in milliseconds.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption MAX_REGISTRATION_TIMEOUT> = $r7;

        $r8 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.registration.error-delay");

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(10000L);

        $r10 = virtualinvoke $r8.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The pause made after an registration attempt caused an exception (other than timeout) in milliseconds.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ERROR_REGISTRATION_DELAY> = $r11;

        $r12 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.registration.refused-registration-delay");

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r14 = virtualinvoke $r12.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The pause made after the registration attempt was refused in milliseconds.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption REFUSED_REGISTRATION_DELAY> = $r15;

        $r16 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.services.shutdown-timeout");

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(30000L);

        $r18 = virtualinvoke $r16.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The shutdown timeout for cluster services like executors in milliseconds.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption CLUSTER_SERVICES_SHUTDOWN_TIMEOUT> = $r19;

        $r20 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.io-pool.size");

        $r21 = virtualinvoke $r20.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder intType()>();

        $r22 = virtualinvoke $r21.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption noDefaultValue()>();

        $r23 = virtualinvoke $r22.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("The size of the IO executor pool used by the cluster to execute blocking IO operations (Master as well as TaskManager processes). By default it will use 4 * the number of CPU cores (hardware contexts) that the cluster process has access to. Increasing the pool size allows to run more IO operations concurrently.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption CLUSTER_IO_EXECUTOR_POOL_SIZE> = $r23;

        $r24 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.evenly-spread-out-slots");

        $r25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r26 = virtualinvoke $r24.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r25);

        $r27 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r28 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r29 = staticinvoke <org.apache.flink.configuration.description.TextElement: org.apache.flink.configuration.description.TextElement code(java.lang.String)>("TaskExecutors");

        $r28[0] = $r29;

        $r30 = virtualinvoke $r27.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Enable the slot spread out allocation strategy. This strategy tries to spread out the slots evenly across all available %s.", $r28);

        $r31 = virtualinvoke $r30.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r32 = virtualinvoke $r26.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r31);

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption EVENLY_SPREAD_OUT_SLOTS_STRATEGY> = $r32;

        $r33 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.processes.halt-on-fatal-error");

        $r34 = virtualinvoke $r33.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r36 = virtualinvoke $r34.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r35);

        $r37 = staticinvoke <org.apache.flink.configuration.description.Description: org.apache.flink.configuration.description.Description$DescriptionBuilder builder()>();

        $r38 = newarray (org.apache.flink.configuration.description.InlineElement)[1];

        $r39 = staticinvoke <org.apache.flink.configuration.description.LinkElement: org.apache.flink.configuration.description.LinkElement link(java.lang.String,java.lang.String)>("https://issues.apache.org/jira/browse/FLINK-16510", "FLINK-16510");

        $r38[0] = $r39;

        $r40 = virtualinvoke $r37.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description$DescriptionBuilder text(java.lang.String,org.apache.flink.configuration.description.InlineElement[])>("Whether processes should halt on fatal errors instead of performing a graceful shutdown. In some environments (e.g. Java 8 with the G1 garbage collector), a regular graceful shutdown can lead to a JVM deadlock. See %s for details.", $r38);

        $r41 = virtualinvoke $r40.<org.apache.flink.configuration.description.Description$DescriptionBuilder: org.apache.flink.configuration.description.Description build()>();

        $r42 = virtualinvoke $r36.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r41);

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption HALT_ON_FATAL_ERROR> = $r42;

        $r43 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.intercept-user-system-exit");

        $r44 = virtualinvoke $r43.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder enumType(java.lang.Class)>(class "Lorg/apache/flink/configuration/ClusterOptions$UserSystemExitMode;");

        $r45 = <org.apache.flink.configuration.ClusterOptions$UserSystemExitMode: org.apache.flink.configuration.ClusterOptions$UserSystemExitMode DISABLED>;

        $r46 = virtualinvoke $r44.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r45);

        $r47 = staticinvoke <org.apache.flink.configuration.ClusterOptions$UserSystemExitMode: org.apache.flink.configuration.description.Description getConfigDescription()>();

        $r48 = virtualinvoke $r46.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(org.apache.flink.configuration.description.Description)>($r47);

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption INTERCEPT_USER_SYSTEM_EXIT> = $r48;

        $r49 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.declarative-resource-management.enabled");

        $r50 = virtualinvoke $r49.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r52 = virtualinvoke $r50.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines whether the cluster uses declarative resource management.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_DECLARATIVE_RESOURCE_MANAGEMENT> = $r53;

        $r54 = staticinvoke <org.apache.flink.configuration.ConfigOptions: org.apache.flink.configuration.ConfigOptions$OptionBuilder key(java.lang.String)>("cluster.fine-grained-resource-management.enabled");

        $r55 = virtualinvoke $r54.<org.apache.flink.configuration.ConfigOptions$OptionBuilder: org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder booleanType()>();

        $r56 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r57 = virtualinvoke $r55.<org.apache.flink.configuration.ConfigOptions$TypedConfigOptionBuilder: org.apache.flink.configuration.ConfigOption defaultValue(java.lang.Object)>($r56);

        $r58 = virtualinvoke $r57.<org.apache.flink.configuration.ConfigOption: org.apache.flink.configuration.ConfigOption withDescription(java.lang.String)>("Defines whether the cluster uses fine-grained resource management.");

        <org.apache.flink.configuration.ClusterOptions: org.apache.flink.configuration.ConfigOption ENABLE_FINE_GRAINED_RESOURCE_MANAGEMENT> = $r58;

        return;
    }
}
