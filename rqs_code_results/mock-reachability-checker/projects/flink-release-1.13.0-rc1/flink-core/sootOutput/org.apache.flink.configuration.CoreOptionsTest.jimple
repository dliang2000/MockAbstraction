public class org.apache.flink.configuration.CoreOptionsTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.configuration.CoreOptionsTest r0;

        r0 := @this: org.apache.flink.configuration.CoreOptionsTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testGetParentFirstLoaderPatterns()
    {
        org.apache.flink.configuration.CoreOptionsTest r0;
        java.util.function.Function $r1;
        org.apache.flink.configuration.ConfigOption $r2, $r3;

        r0 := @this: org.apache.flink.configuration.CoreOptionsTest;

        $r1 = staticinvoke <org.apache.flink.configuration.CoreOptionsTest$getParentFirstLoaderPatterns__133: java.util.function.Function bootstrap$()>();

        $r3 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        $r2 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL>;

        specialinvoke r0.<org.apache.flink.configuration.CoreOptionsTest: void testParentFirst(java.util.function.Function,org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ConfigOption)>($r1, $r3, $r2);

        return;
    }

    public void testGetPluginParentFirstLoaderPatterns()
    {
        org.apache.flink.configuration.CoreOptionsTest r0;
        java.util.function.Function $r1;
        org.apache.flink.configuration.ConfigOption $r2, $r3;

        r0 := @this: org.apache.flink.configuration.CoreOptionsTest;

        $r1 = staticinvoke <org.apache.flink.configuration.CoreOptionsTest$getPluginParentFirstLoaderPatterns__134: java.util.function.Function bootstrap$()>();

        $r3 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS>;

        $r2 = <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption PLUGIN_ALWAYS_PARENT_FIRST_LOADER_PATTERNS_ADDITIONAL>;

        specialinvoke r0.<org.apache.flink.configuration.CoreOptionsTest: void testParentFirst(java.util.function.Function,org.apache.flink.configuration.ConfigOption,org.apache.flink.configuration.ConfigOption)>($r1, $r3, $r2);

        return;
    }

    private void testParentFirst(java.util.function.Function, org.apache.flink.configuration.ConfigOption, org.apache.flink.configuration.ConfigOption)
    {
        org.apache.flink.configuration.CoreOptionsTest r0;
        java.util.function.Function r1;
        org.apache.flink.configuration.ConfigOption r2, r3;
        org.apache.flink.configuration.Configuration $r5;
        java.lang.Object $r6, $r9, $r13, $r17, $r21;
        java.lang.String $r7, $r11, $r15, $r19;
        java.lang.String[] $r8, $r12, $r16, $r20;
        java.lang.Object[] $r10, $r14, $r18, $r22;

        r0 := @this: org.apache.flink.configuration.CoreOptionsTest;

        r1 := @parameter0: java.util.function.Function;

        r2 := @parameter1: org.apache.flink.configuration.ConfigOption;

        r3 := @parameter2: org.apache.flink.configuration.ConfigOption;

        $r5 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r5.<org.apache.flink.configuration.Configuration: void <init>()>();

        $r6 = virtualinvoke r2.<org.apache.flink.configuration.ConfigOption: java.lang.Object defaultValue()>();

        $r7 = (java.lang.String) $r6;

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r9 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r5);

        $r10 = (java.lang.Object[]) $r9;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r8, $r10);

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>(r2, "hello;world");

        $r11 = "hello;world";

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r13 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r5);

        $r14 = (java.lang.Object[]) $r13;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r12, $r14);

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>(r3, "how;are;you");

        $r15 = "hello;world;how;are;you";

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r17 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r5);

        $r18 = (java.lang.Object[]) $r17;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r16, $r18);

        virtualinvoke $r5.<org.apache.flink.configuration.Configuration: void setString(org.apache.flink.configuration.ConfigOption,java.lang.String)>(r2, "");

        $r19 = "how;are;you";

        $r20 = virtualinvoke $r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        $r21 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r5);

        $r22 = (java.lang.Object[]) $r21;

        staticinvoke <org.junit.Assert: void assertArrayEquals(java.lang.Object[],java.lang.Object[])>($r20, $r22);

        return;
    }
}
