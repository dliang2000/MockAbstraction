public class javassist.expr.Instanceof extends javassist.expr.Expr
{

    protected void <init>(int, javassist.bytecode.CodeIterator, javassist.CtClass, javassist.bytecode.MethodInfo)
    {
        javassist.expr.Instanceof r0;
        int i0;
        javassist.bytecode.CodeIterator r1;
        javassist.CtClass r2;
        javassist.bytecode.MethodInfo r3;

        r0 := @this: javassist.expr.Instanceof;

        i0 := @parameter0: int;

        r1 := @parameter1: javassist.bytecode.CodeIterator;

        r2 := @parameter2: javassist.CtClass;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        specialinvoke r0.<javassist.expr.Expr: void <init>(int,javassist.bytecode.CodeIterator,javassist.CtClass,javassist.bytecode.MethodInfo)>(i0, r1, r2, r3);

        return;
    }

    public javassist.CtBehavior where()
    {
        javassist.expr.Instanceof r0;
        javassist.CtBehavior $r1;

        r0 := @this: javassist.expr.Instanceof;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtBehavior where()>();

        return $r1;
    }

    public int getLineNumber()
    {
        javassist.expr.Instanceof r0;
        int $i0;

        r0 := @this: javassist.expr.Instanceof;

        $i0 = specialinvoke r0.<javassist.expr.Expr: int getLineNumber()>();

        return $i0;
    }

    public java.lang.String getFileName()
    {
        javassist.expr.Instanceof r0;
        java.lang.String $r1;

        r0 := @this: javassist.expr.Instanceof;

        $r1 = specialinvoke r0.<javassist.expr.Expr: java.lang.String getFileName()>();

        return $r1;
    }

    public javassist.CtClass getType() throws javassist.NotFoundException
    {
        javassist.expr.Instanceof r0;
        javassist.bytecode.ConstPool r1;
        int i0, i1, $i2;
        java.lang.String r2;
        javassist.bytecode.CodeIterator $r3;
        javassist.CtClass $r4, $r6;
        javassist.ClassPool $r5;

        r0 := @this: javassist.expr.Instanceof;

        r1 = virtualinvoke r0.<javassist.expr.Instanceof: javassist.bytecode.ConstPool getConstPool()>();

        i0 = r0.<javassist.expr.Instanceof: int currentPos>;

        $r3 = r0.<javassist.expr.Instanceof: javassist.bytecode.CodeIterator iterator>;

        $i2 = i0 + 1;

        i1 = virtualinvoke $r3.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i2);

        r2 = virtualinvoke r1.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>(i1);

        $r4 = r0.<javassist.expr.Instanceof: javassist.CtClass thisClass>;

        $r5 = virtualinvoke $r4.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r6 = virtualinvoke $r5.<javassist.ClassPool: javassist.CtClass getCtClass(java.lang.String)>(r2);

        return $r6;
    }

    public javassist.CtClass[] mayThrow()
    {
        javassist.expr.Instanceof r0;
        javassist.CtClass[] $r1;

        r0 := @this: javassist.expr.Instanceof;

        $r1 = specialinvoke r0.<javassist.expr.Expr: javassist.CtClass[] mayThrow()>();

        return $r1;
    }

    public void replace(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.expr.Instanceof r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4;
        javassist.ClassPool r4;
        javassist.bytecode.CodeAttribute r5;
        javassist.CtClass r6, $r8, $r12, $r13, $r16, $r18;
        javassist.bytecode.Bytecode r7;
        javassist.bytecode.CodeIterator $r10, $r14;
        javassist.compiler.Javac $r11;
        javassist.CtClass[] $r15;
        boolean $z0;
        javassist.expr.Instanceof$ProceedForInstanceof $r17;
        javassist.compiler.CompileError $r19;
        javassist.CannotCompileException $r20, $r22, $r24;
        javassist.bytecode.BadBytecode $r21;
        javassist.NotFoundException $r23;

        r0 := @this: javassist.expr.Instanceof;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<javassist.expr.Instanceof: javassist.CtClass thisClass>;

        virtualinvoke $r8.<javassist.CtClass: javassist.bytecode.ClassFile getClassFile()>();

        virtualinvoke r0.<javassist.expr.Instanceof: javassist.bytecode.ConstPool getConstPool()>();

        i0 = r0.<javassist.expr.Instanceof: int currentPos>;

        $r10 = r0.<javassist.expr.Instanceof: javassist.bytecode.CodeIterator iterator>;

        $i4 = i0 + 1;

        i1 = virtualinvoke $r10.<javassist.bytecode.CodeIterator: int u16bitAt(int)>($i4);

        $r11 = new javassist.compiler.Javac;

        $r12 = r0.<javassist.expr.Instanceof: javassist.CtClass thisClass>;

        specialinvoke $r11.<javassist.compiler.Javac: void <init>(javassist.CtClass)>($r12);

        $r13 = r0.<javassist.expr.Instanceof: javassist.CtClass thisClass>;

        r4 = virtualinvoke $r13.<javassist.CtClass: javassist.ClassPool getClassPool()>();

        $r14 = r0.<javassist.expr.Instanceof: javassist.bytecode.CodeIterator iterator>;

        r5 = virtualinvoke $r14.<javassist.bytecode.CodeIterator: javassist.bytecode.CodeAttribute get()>();

     label1:
        $r15 = newarray (javassist.CtClass)[1];

        $r16 = virtualinvoke r4.<javassist.ClassPool: javassist.CtClass get(java.lang.String)>("java.lang.Object");

        $r15[0] = $r16;

        r6 = <javassist.CtClass: javassist.CtClass booleanType>;

        i2 = virtualinvoke r5.<javassist.bytecode.CodeAttribute: int getMaxLocals()>();

        $z0 = virtualinvoke r0.<javassist.expr.Instanceof: boolean withinStatic()>();

        virtualinvoke $r11.<javassist.compiler.Javac: int recordParams(java.lang.String,javassist.CtClass[],boolean,int,boolean)>("java.lang.Object", $r15, 1, i2, $z0);

        i3 = virtualinvoke $r11.<javassist.compiler.Javac: int recordReturnType(javassist.CtClass,boolean)>(r6, 1);

        $r17 = new javassist.expr.Instanceof$ProceedForInstanceof;

        specialinvoke $r17.<javassist.expr.Instanceof$ProceedForInstanceof: void <init>(int)>(i1);

        virtualinvoke $r11.<javassist.compiler.Javac: void recordProceed(javassist.compiler.ProceedHandler)>($r17);

        $r18 = virtualinvoke r0.<javassist.expr.Instanceof: javassist.CtClass getType()>();

        virtualinvoke $r11.<javassist.compiler.Javac: void recordType(javassist.CtClass)>($r18);

        staticinvoke <javassist.expr.Instanceof: boolean checkResultValue(javassist.CtClass,java.lang.String)>(r6, r1);

        r7 = virtualinvoke $r11.<javassist.compiler.Javac: javassist.bytecode.Bytecode getBytecode()>();

        staticinvoke <javassist.expr.Instanceof: void storeStack(javassist.CtClass[],boolean,int,javassist.bytecode.Bytecode)>($r15, 1, i2, r7);

        virtualinvoke $r11.<javassist.compiler.Javac: boolean recordLocalVariables(javassist.bytecode.CodeAttribute,int)>(r5, i0);

        virtualinvoke r7.<javassist.bytecode.Bytecode: void addConstZero(javassist.CtClass)>(r6);

        virtualinvoke r7.<javassist.bytecode.Bytecode: int addStore(int,javassist.CtClass)>(i3, r6);

        virtualinvoke $r11.<javassist.compiler.Javac: void compileStmnt(java.lang.String)>(r1);

        virtualinvoke r7.<javassist.bytecode.Bytecode: int addLoad(int,javassist.CtClass)>(i3, r6);

        virtualinvoke r0.<javassist.expr.Instanceof: void replace0(int,javassist.bytecode.Bytecode,int)>(i0, r7, 3);

     label2:
        goto label6;

     label3:
        $r19 := @caughtexception;

        $r20 = new javassist.CannotCompileException;

        specialinvoke $r20.<javassist.CannotCompileException: void <init>(javassist.compiler.CompileError)>($r19);

        throw $r20;

     label4:
        $r23 := @caughtexception;

        $r24 = new javassist.CannotCompileException;

        specialinvoke $r24.<javassist.CannotCompileException: void <init>(javassist.NotFoundException)>($r23);

        throw $r24;

     label5:
        $r21 := @caughtexception;

        $r22 = new javassist.CannotCompileException;

        specialinvoke $r22.<javassist.CannotCompileException: void <init>(java.lang.String)>("broken method");

        throw $r22;

     label6:
        return;

        catch javassist.compiler.CompileError from label1 to label2 with label3;
        catch javassist.NotFoundException from label1 to label2 with label4;
        catch javassist.bytecode.BadBytecode from label1 to label2 with label5;
    }
}
