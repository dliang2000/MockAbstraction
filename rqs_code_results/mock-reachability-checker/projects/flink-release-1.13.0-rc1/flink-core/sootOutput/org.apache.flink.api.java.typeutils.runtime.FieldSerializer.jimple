public class org.apache.flink.api.java.typeutils.runtime.FieldSerializer extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.FieldSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.FieldSerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void serializeField(java.lang.reflect.Field, java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.reflect.Field r0;
        java.io.ObjectOutputStream r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.io.ObjectOutputStream;

        $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r3);

        return;
    }

    public static java.lang.reflect.Field deserializeField(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.lang.String r1;
        java.lang.Object $r2;
        java.lang.NoSuchFieldException $r3;
        java.lang.Class r4;
        java.lang.reflect.Field r5;

        r0 := @parameter0: java.io.ObjectInputStream;

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (java.lang.Class) $r2;

        r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.String readUTF()>();

     label1:
        if r4 == null goto label5;

     label2:
        r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        virtualinvoke r5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

        r4 = virtualinvoke r4.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return null;

        catch java.lang.NoSuchFieldException from label2 to label3 with label4;
    }
}
