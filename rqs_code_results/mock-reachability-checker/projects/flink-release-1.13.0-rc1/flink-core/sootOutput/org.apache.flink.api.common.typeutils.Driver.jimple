public class org.apache.flink.api.common.typeutils.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.Driver r0;

        r0 := @this: org.apache.flink.api.common.typeutils.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.typeutils.Driver r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest $r5;
        org.apache.flink.api.common.typeutils.CompositeSerializerTest $r6;
        org.apache.flink.api.common.typeutils.SerializerTestInstance $r7;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest $r8;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest $r9;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest $r10;
        java.io.IOException $r11, $r14, $r15, $r16, $r17, $r18, $r19, $r26;
        java.lang.Exception $r12, $r13, $r20, $r21, $r22, $r23, $r24, $r25, $r27;

        r0 := @this: org.apache.flink.api.common.typeutils.Driver;

        $r5 = new org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void <init>()>();

     label01:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerialization()>();

     label02:
        goto label04;

     label03:
        $r24 := @caughtexception;

        virtualinvoke $r24.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerializationWithClassNotFound()>();

     label05:
        goto label07;

     label06:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerSerializationWithInvalidClass()>();

     label08:
        goto label10;

     label09:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Exception: void printStackTrace()>();

     label10:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializeConfigurationSnapshots()>();

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

     label13:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testFailsWhenConfigurationSnapshotClassNotFound()>();

     label14:
        goto label16;

     label15:
        $r21 := @caughtexception;

        virtualinvoke $r21.<java.lang.Exception: void printStackTrace()>();

     label16:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testSerializerAndConfigPairsSerializationWithSerializerDeserializationFailures()>();

     label17:
        goto label19;

     label18:
        $r20 := @caughtexception;

        virtualinvoke $r20.<java.lang.Exception: void printStackTrace()>();

     label19:
        virtualinvoke $r5.<org.apache.flink.api.common.typeutils.TypeSerializerSerializationUtilTest: void testAnonymousSerializerClassWithChangedSerialVersionUID()>();

     label20:
        goto label22;

     label21:
        $r27 := @caughtexception;

        virtualinvoke $r27.<java.lang.Exception: void printStackTrace()>();

     label22:
        $r6 = new org.apache.flink.api.common.typeutils.CompositeSerializerTest;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void testSingleFieldSerializer()>();

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void testPairFieldSerializer()>();

        virtualinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeSerializerTest: void testAllFieldSerializer()>();

        $r7 = new org.apache.flink.api.common.typeutils.SerializerTestInstance;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Class,int,java.lang.Object[])>(null, null, 0, null);

        virtualinvoke $r7.<org.apache.flink.api.common.typeutils.SerializerTestInstance: void testAll()>();

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void <init>()>();

     label23:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testIncompatiblePrecedence()>();

     label24:
        goto label26;

     label25:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.io.IOException: void printStackTrace()>();

     label26:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testCompatibleAfterMigrationPrecedence()>();

     label27:
        goto label29;

     label28:
        $r26 := @caughtexception;

        virtualinvoke $r26.<java.io.IOException: void printStackTrace()>();

     label29:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testCompatibleWithReconfiguredSerializerPrecedence()>();

     label30:
        goto label32;

     label31:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

     label32:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testCompatibleAsIsPrecedence()>();

     label33:
        goto label35;

     label34:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

     label35:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testOuterSnapshotIncompatiblePrecedence()>();

     label36:
        goto label38;

     label37:
        $r19 := @caughtexception;

        virtualinvoke $r19.<java.io.IOException: void printStackTrace()>();

     label38:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testOuterSnapshotRequiresMigrationPrecedence()>();

     label39:
        goto label41;

     label40:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

     label41:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testNestedFieldSerializerArityMismatchPrecedence()>();

     label42:
        goto label44;

     label43:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.io.IOException: void printStackTrace()>();

     label44:
        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: void testRestoreCompositeTypeSerializer()>();

     label45:
        goto label47;

     label46:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.io.IOException: void printStackTrace()>();

     label47:
        $r9 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testCompatibleAsIsIntermediateCompatibilityResult()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testCompatibleWithReconfiguredSerializerIntermediateCompatibilityResult()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testCompatibleAfterMigrationIntermediateCompatibilityResult()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testIncompatibleIntermediateCompatibilityResult()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testGetFinalResultOnUndefinedReconfigureIntermediateCompatibilityResultFails()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testGetNestedSerializersOnCompatibleAfterMigrationIntermediateCompatibilityResultFails()>();

        virtualinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtilTest: void testGetNestedSerializersOnIncompatibleIntermediateCompatibilityResultFails()>();

        $r10 = new org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest: void <init>()>();

     label48:
        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest: void testSerializeConfigWhenSerializerMissing()>();

     label49:
        goto label51;

     label50:
        $r25 := @caughtexception;

        virtualinvoke $r25.<java.lang.Exception: void printStackTrace()>();

     label51:
        virtualinvoke $r10.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshotTest: void testSerializerDeserializationFailure()>();

     label52:
        goto label54;

     label53:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

     label54:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label32 to label33 with label34;
        catch java.io.IOException from label35 to label36 with label37;
        catch java.io.IOException from label38 to label39 with label40;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.io.IOException from label44 to label45 with label46;
        catch java.lang.Exception from label48 to label49 with label50;
        catch java.lang.Exception from label51 to label52 with label53;
    }
}
