class org.apache.flink.configuration.StructuredOptionsSplitter extends java.lang.Object
{

    static java.util.List splitEscaped(java.lang.String, char)
    {
        java.lang.String r0, $r3;
        char c0;
        java.util.List r1, $r4;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        r1 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List tokenize(java.lang.String,char)>($r3, c0);

        $r4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: java.util.List processTokens(java.util.List)>(r1);

        return $r4;
    }

    static transient java.lang.String escapeWithSingleQuote(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, $r7, $r10;
        java.lang.String[] r1;
        java.util.stream.Stream $r2;
        java.util.function.Predicate $r4;
        boolean $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r1);

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter$contains__139: java.util.function.Predicate bootstrap$(java.lang.String)>(r0);

        $z1 = interfaceinvoke $r2.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r4);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\"");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("\'");

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        if $z4 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\'", "\'\'");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label4:
        return r0;
    }

    private static java.util.List processTokens(java.util.List)
    {
        java.util.List r0;
        org.apache.flink.configuration.StructuredOptionsSplitter$Token r2, $r8, $r14, $r18;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.util.ArrayList $r3;
        java.lang.Object $r4, $r7, $r13, $r17;
        int[] $r5;
        org.apache.flink.configuration.StructuredOptionsSplitter$TokenType $r6, $r9, $r10, $r15, $r16;
        java.lang.String $r11, $r12, $r23;
        java.lang.IllegalArgumentException $r19;
        java.lang.StringBuilder $r20, $r21, $r22;

        r0 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i12 = 0;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i12 >= $i1 goto label7;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i12);

        r2 = (org.apache.flink.configuration.StructuredOptionsSplitter$Token) $r4;

        $r5 = <org.apache.flink.configuration.StructuredOptionsSplitter$1: int[] $SwitchMap$org$apache$flink$configuration$StructuredOptionsSplitter$TokenType>;

        $r6 = virtualinvoke r2.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType getTokenType()>();

        $i2 = virtualinvoke $r6.<org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: int ordinal()>();

        $i3 = $r5[$i2];

        tableswitch($i3)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        $i7 = i12 + 1;

        $i8 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i7 >= $i8 goto label3;

        $i9 = i12 + 1;

        $r13 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i9);

        $r14 = (org.apache.flink.configuration.StructuredOptionsSplitter$Token) $r13;

        $r15 = virtualinvoke $r14.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType getTokenType()>();

        $r16 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType DELIMITER>;

        if $r15 == $r16 goto label3;

        $i10 = i12 + 1;

        $r17 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i10);

        $r18 = (org.apache.flink.configuration.StructuredOptionsSplitter$Token) $r17;

        $i11 = virtualinvoke $r18.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: int getPosition()>();

        i0 = $i11 - 1;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not split string. Illegal quoting at position: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r19;

     label3:
        $r12 = virtualinvoke r2.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: java.lang.String getString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label6;

     label4:
        $r11 = virtualinvoke r2.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: java.lang.String getString()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label6;

     label5:
        $i4 = i12 + 1;

        $i5 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i4 >= $i5 goto label6;

        $i6 = i12 + 1;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i6);

        $r8 = (org.apache.flink.configuration.StructuredOptionsSplitter$Token) $r7;

        $r9 = virtualinvoke $r8.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType getTokenType()>();

        $r10 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType DELIMITER>;

        if $r9 != $r10 goto label6;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("");

     label6:
        i12 = i12 + 1;

        goto label1;

     label7:
        return $r3;
    }

    private static java.util.List tokenize(java.lang.String, char)
    {
        java.lang.String r0, $r7, $r8, $r11, $r14, $r17;
        char c0, c1;
        java.util.ArrayList $r3;
        java.lang.StringBuilder $r4;
        int $i2, i3, i4;
        boolean $z0;
        org.apache.flink.configuration.StructuredOptionsSplitter$Token $r5, $r9, $r12, $r15;
        org.apache.flink.configuration.StructuredOptionsSplitter$TokenType $r6, $r10, $r13, $r16;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i2 goto label6;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        i4 = i3 + 1;

        if c1 != 39 goto label2;

        i4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: int consumeInQuotes(java.lang.String,char,int,java.lang.StringBuilder)>(r0, 39, i3, $r4);

        $r15 = new org.apache.flink.configuration.StructuredOptionsSplitter$Token;

        $r16 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType SINGLE_QUOTED>;

        $r17 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: void <init>(org.apache.flink.configuration.StructuredOptionsSplitter$TokenType,java.lang.String,int,org.apache.flink.configuration.StructuredOptionsSplitter$1)>($r16, $r17, i3, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r15);

        goto label5;

     label2:
        if c1 != 34 goto label3;

        i4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: int consumeInQuotes(java.lang.String,char,int,java.lang.StringBuilder)>(r0, 34, i3, $r4);

        $r12 = new org.apache.flink.configuration.StructuredOptionsSplitter$Token;

        $r13 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType DOUBLE_QUOTED>;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: void <init>(org.apache.flink.configuration.StructuredOptionsSplitter$TokenType,java.lang.String,int,org.apache.flink.configuration.StructuredOptionsSplitter$1)>($r13, $r14, i3, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label5;

     label3:
        if c1 != c0 goto label4;

        $r9 = new org.apache.flink.configuration.StructuredOptionsSplitter$Token;

        $r10 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType DELIMITER>;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c1);

        specialinvoke $r9.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: void <init>(org.apache.flink.configuration.StructuredOptionsSplitter$TokenType,java.lang.String,int,org.apache.flink.configuration.StructuredOptionsSplitter$1)>($r10, $r11, i3, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label5;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c1);

        if $z0 != 0 goto label5;

        i4 = staticinvoke <org.apache.flink.configuration.StructuredOptionsSplitter: int consumeUnquoted(java.lang.String,char,int,java.lang.StringBuilder)>(r0, c0, i3, $r4);

        $r5 = new org.apache.flink.configuration.StructuredOptionsSplitter$Token;

        $r6 = <org.apache.flink.configuration.StructuredOptionsSplitter$TokenType: org.apache.flink.configuration.StructuredOptionsSplitter$TokenType UNQUOTED>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        specialinvoke $r5.<org.apache.flink.configuration.StructuredOptionsSplitter$Token: void <init>(org.apache.flink.configuration.StructuredOptionsSplitter$TokenType,java.lang.String,int,org.apache.flink.configuration.StructuredOptionsSplitter$1)>($r6, $r8, i3, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: void setLength(int)>(0);

        i3 = i4;

        goto label1;

     label6:
        return $r3;
    }

    private static int consumeInQuotes(java.lang.String, char, int, java.lang.StringBuilder)
    {
        java.lang.String r0;
        char c0, c2, $c8;
        int i1, $i3, $i4, $i5, $i6, $i7, i9;
        java.lang.StringBuilder r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuilder;

        i9 = i1 + 1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i9 >= $i3 goto label5;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        if c2 != c0 goto label3;

        $i4 = i9 + 1;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i4 >= $i5 goto label2;

        $i7 = i9 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        if $c8 != c0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        i9 = i9 + 1;

        goto label4;

     label2:
        $i6 = i9 + 1;

        return $i6;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label4:
        i9 = i9 + 1;

        goto label1;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not split string. Quoting was not closed properly.");

        throw $r2;
    }

    private static int consumeUnquoted(java.lang.String, char, int, java.lang.StringBuilder)
    {
        java.lang.String r0;
        char c0, c2;
        int i1, $i3, i4;
        java.lang.StringBuilder r1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.StringBuilder;

        i4 = i1;

     label1:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i3 goto label3;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        if c2 != c0 goto label2;

        return i4;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        i4 = i4 + 1;

        goto label1;

     label3:
        return i4;
    }

    private void <init>()
    {
        org.apache.flink.configuration.StructuredOptionsSplitter r0;

        r0 := @this: org.apache.flink.configuration.StructuredOptionsSplitter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
