public class org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput extends java.io.FilterInputStream
{
    private final int maxPayloadSize;
    private int blockPos;
    final org.apache.flink.api.common.io.BinaryInputFormat this$0;

    public void <init>(org.apache.flink.api.common.io.BinaryInputFormat, org.apache.flink.core.fs.FSDataInputStream, int)
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        org.apache.flink.api.common.io.BinaryInputFormat r1;
        org.apache.flink.core.fs.FSDataInputStream r2;
        int i0, $i2, $i3, $i4;
        org.apache.flink.api.common.io.BlockInfo $r3, $r4;
        long $l1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        r1 := @parameter0: org.apache.flink.api.common.io.BinaryInputFormat;

        r2 := @parameter1: org.apache.flink.core.fs.FSDataInputStream;

        i0 := @parameter2: int;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: org.apache.flink.api.common.io.BinaryInputFormat this$0> = r1;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r2);

        $r3 = staticinvoke <org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo access$000(org.apache.flink.api.common.io.BinaryInputFormat)>(r1);

        $l1 = virtualinvoke $r3.<org.apache.flink.api.common.io.BlockInfo: long getFirstRecordStart()>();

        $i2 = (int) $l1;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos> = $i2;

        $r4 = staticinvoke <org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo access$000(org.apache.flink.api.common.io.BinaryInputFormat)>(r1);

        $i3 = virtualinvoke $r4.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $i4 = i0 - $i3;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int maxPayloadSize> = $i4;

        return;
    }

    public void <init>(org.apache.flink.api.common.io.BinaryInputFormat, org.apache.flink.core.fs.FSDataInputStream, int, long)
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        org.apache.flink.api.common.io.BinaryInputFormat r1;
        org.apache.flink.core.fs.FSDataInputStream r2;
        int i0, $i2, $i5;
        long l1, $l3, $l4;
        org.apache.flink.api.common.io.BlockInfo $r3;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        r1 := @parameter0: org.apache.flink.api.common.io.BinaryInputFormat;

        r2 := @parameter1: org.apache.flink.core.fs.FSDataInputStream;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: org.apache.flink.api.common.io.BinaryInputFormat this$0> = r1;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos> = i0;

        $r3 = staticinvoke <org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo access$000(org.apache.flink.api.common.io.BinaryInputFormat)>(r1);

        $i2 = virtualinvoke $r3.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        $l3 = (long) $i2;

        $l4 = l1 - $l3;

        $i5 = (int) $l4;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int maxPayloadSize> = $i5;

        return;
    }

    public int read() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        int $i0, $i1, $i2, $i3;
        java.io.InputStream $r1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $i0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos>;

        $i1 = $i0 + 1;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos> = $i1;

        $i2 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int maxPayloadSize>;

        if $i0 < $i2 goto label1;

        specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: void skipHeader()>();

     label1:
        $r1 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: java.io.InputStream in>;

        $i3 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i3;
    }

    private long getCurrBlockPos()
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $i0 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos>;

        $l1 = (long) $i0;

        return $l1;
    }

    private void skipHeader() throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        byte[] r1;
        org.apache.flink.api.common.io.BinaryInputFormat $r2;
        org.apache.flink.api.common.io.BlockInfo $r3;
        int $i0, $i1;
        java.io.InputStream $r4;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $r2 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: org.apache.flink.api.common.io.BinaryInputFormat this$0>;

        $r3 = staticinvoke <org.apache.flink.api.common.io.BinaryInputFormat: org.apache.flink.api.common.io.BlockInfo access$000(org.apache.flink.api.common.io.BinaryInputFormat)>($r2);

        $i0 = virtualinvoke $r3.<org.apache.flink.api.common.io.BlockInfo: int getInfoSize()>();

        r1 = newarray (byte)[$i0];

        $r4 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: java.io.InputStream in>;

        $i1 = lengthof r1;

        virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, $i1);

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos> = 0;

        return;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        java.io.InputStream $r2;

        r0 := @this: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i11 = 0;

        i12 = i1;

        i13 = i0;

     label1:
        if i12 <= 0 goto label4;

        $i5 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int maxPayloadSize>;

        $i4 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos>;

        $i6 = $i5 - $i4;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i12, $i6);

        $r2 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: java.io.InputStream in>;

        i3 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i13, i2);

        if i3 >= 0 goto label2;

        return i3;

     label2:
        i11 = i11 + i3;

        $i7 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos>;

        $i8 = $i7 + i3;

        r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos> = $i8;

        i13 = i13 + i3;

        $i10 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int blockPos>;

        $i9 = r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: int maxPayloadSize>;

        if $i10 < $i9 goto label3;

        specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: void skipHeader()>();

     label3:
        i12 = i12 - i3;

        goto label1;

     label4:
        return i11;
    }

    static long access$100(org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput)
    {
        org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput r0;
        long $l0;

        r0 := @parameter0: org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput;

        $l0 = specialinvoke r0.<org.apache.flink.api.common.io.BinaryInputFormat$BlockBasedInput: long getCurrBlockPos()>();

        return $l0;
    }
}
