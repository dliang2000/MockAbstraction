public class org.apache.flink.util.StringValueUtilsTest extends org.apache.flink.util.TestLogger
{

    public void <init>()
    {
        org.apache.flink.util.StringValueUtilsTest r0;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testToLowerCaseConverting()
    {
        org.apache.flink.util.StringValueUtilsTest r0;
        org.apache.flink.types.StringValue $r2, $r3;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("TEST");

        staticinvoke <org.apache.flink.util.StringValueUtils: void toLowerCase(org.apache.flink.types.StringValue)>($r2);

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("test");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r2);

        return;
    }

    public void testReplaceNonWordChars()
    {
        org.apache.flink.util.StringValueUtilsTest r0;
        org.apache.flink.types.StringValue $r2, $r3;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        $r2 = new org.apache.flink.types.StringValue;

        specialinvoke $r2.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("TEST123_@");

        staticinvoke <org.apache.flink.util.StringValueUtils: void replaceNonWordChars(org.apache.flink.types.StringValue,char)>($r2, 33);

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("TEST123_!");

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r3, $r2);

        return;
    }

    public void testTokenizerOnStringWithoutNexToken()
    {
        org.apache.flink.util.StringValueUtilsTest r0;
        org.apache.flink.types.StringValue $r3;
        org.apache.flink.util.StringValueUtils$WhitespaceTokenizer $r4;
        boolean $z1;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("test");

        $r4 = new org.apache.flink.util.StringValueUtils$WhitespaceTokenizer;

        specialinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void setStringToTokenize(org.apache.flink.types.StringValue)>($r3);

        virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: boolean next(org.apache.flink.types.StringValue)>($r3);

        $z1 = virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: boolean next(org.apache.flink.types.StringValue)>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z1);

        return;
    }

    public void testTokenizerOnStringWithNexToken()
    {
        org.apache.flink.util.StringValueUtilsTest r0;
        org.apache.flink.types.StringValue $r3;
        org.apache.flink.util.StringValueUtils$WhitespaceTokenizer $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("test test");

        $r4 = new org.apache.flink.util.StringValueUtils$WhitespaceTokenizer;

        specialinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void setStringToTokenize(org.apache.flink.types.StringValue)>($r3);

        $z0 = virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: boolean next(org.apache.flink.types.StringValue)>($r3);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testTokenizerOnStringOnlyWithDelimiter()
    {
        org.apache.flink.util.StringValueUtilsTest r0;
        org.apache.flink.types.StringValue $r3;
        org.apache.flink.util.StringValueUtils$WhitespaceTokenizer $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.util.StringValueUtilsTest;

        $r3 = new org.apache.flink.types.StringValue;

        specialinvoke $r3.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("    ");

        $r4 = new org.apache.flink.util.StringValueUtils$WhitespaceTokenizer;

        specialinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void <init>()>();

        virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: void setStringToTokenize(org.apache.flink.types.StringValue)>($r3);

        $z0 = virtualinvoke $r4.<org.apache.flink.util.StringValueUtils$WhitespaceTokenizer: boolean next(org.apache.flink.types.StringValue)>($r3);

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }
}
