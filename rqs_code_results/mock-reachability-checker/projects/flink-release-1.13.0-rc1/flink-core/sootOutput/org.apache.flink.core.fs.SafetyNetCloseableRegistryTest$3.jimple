class org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3 extends org.apache.flink.core.testutils.CheckedThread
{
    final org.apache.flink.core.fs.SafetyNetCloseableRegistryTest this$0;

    void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest)
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3 r0;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest r1;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3;

        r1 := @parameter0: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest;

        r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest this$0> = r1;

        specialinvoke r0.<org.apache.flink.core.testutils.CheckedThread: void <init>()>();

        return;
    }

    public void go() throws java.lang.Exception
    {
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3 r0;
        org.apache.flink.core.fs.FSDataOutputStream r2;
        boolean $z0, $z1, $z2;
        org.apache.flink.core.fs.Path $r7;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest $r8;
        org.junit.rules.TemporaryFolder $r9;
        java.io.File $r10;
        java.net.URI $r11;
        java.lang.String $r12, $r21;
        org.apache.flink.core.fs.FileSystem$WriteMode $r13;
        org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3$1 $r14;
        java.lang.Throwable $r15, $r17, $r18, $r19, r25;
        java.lang.Exception $r20;
        java.io.IOException $r22;
        org.apache.flink.core.fs.FileSystem r23, r24;

        r0 := @this: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3;

     label01:
        r23 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $z0 = r23 instanceof org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void initializeSafetyNetForThread()>();

        r24 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $z1 = r24 instanceof org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r7 = new org.apache.flink.core.fs.Path;

        $r8 = r0.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3: org.apache.flink.core.fs.SafetyNetCloseableRegistryTest this$0>;

        $r9 = $r8.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest: org.junit.rules.TemporaryFolder tmpFolder>;

        $r10 = virtualinvoke $r9.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r11 = virtualinvoke $r10.<java.io.File: java.net.URI toURI()>();

        $r12 = virtualinvoke $r11.<java.net.URI: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.flink.core.fs.Path: void <init>(java.lang.String,java.lang.String)>($r12, "test_file");

     label02:
        $r13 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        r2 = virtualinvoke r24.<org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path,org.apache.flink.core.fs.FileSystem$WriteMode)>($r7, $r13);

        r25 = null;

     label03:
        $r14 = new org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3$1;

        specialinvoke $r14.<org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3$1: void <init>(org.apache.flink.core.fs.SafetyNetCloseableRegistryTest$3)>(r0);

        virtualinvoke $r14.<org.apache.flink.core.testutils.CheckedThread: void start()>();

        virtualinvoke $r14.<org.apache.flink.core.testutils.CheckedThread: void sync()>();

        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(42);

        staticinvoke <org.apache.flink.core.fs.FileSystemSafetyNet: void closeSafetyNetAndGuardedResourcesForThread()>();

     label04:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void write(int)>(43);

        staticinvoke <org.junit.Assert: void fail()>();

     label05:
        goto label07;

     label06:
        $r22 := @caughtexception;

     label07:
        r24 = staticinvoke <org.apache.flink.core.fs.FileSystem: org.apache.flink.core.fs.FileSystem getLocalFileSystem()>();

        $z2 = r24 instanceof org.apache.flink.core.fs.SafetyNetWrapperFileSystem;

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z2);

     label08:
        if r2 == null goto label18;

        goto label09;

     label09:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

        goto label18;

     label10:
        $r18 := @caughtexception;

        r25 = $r18;

        throw $r18;

     label11:
        $r19 := @caughtexception;

     label12:
        if r2 == null goto label17;

        if r25 == null goto label16;

     label13:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label14:
        goto label17;

     label15:
        $r15 := @caughtexception;

        virtualinvoke r25.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

        goto label17;

     label16:
        virtualinvoke r2.<org.apache.flink.core.fs.FSDataOutputStream: void close()>();

     label17:
        throw $r19;

     label18:
        virtualinvoke r24.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r7, 0);

        goto label21;

     label19:
        $r17 := @caughtexception;

     label20:
        virtualinvoke r24.<org.apache.flink.core.fs.FileSystem: boolean delete(org.apache.flink.core.fs.Path,boolean)>($r7, 0);

        throw $r17;

     label21:
        goto label23;

     label22:
        $r20 := @caughtexception;

        $r21 = staticinvoke <org.apache.flink.util.ExceptionUtils: java.lang.String stringifyException(java.lang.Throwable)>($r20);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r21);

     label23:
        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label08 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label10 to label12 with label11;
        catch java.lang.Throwable from label02 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Exception from label01 to label21 with label22;
    }
}
