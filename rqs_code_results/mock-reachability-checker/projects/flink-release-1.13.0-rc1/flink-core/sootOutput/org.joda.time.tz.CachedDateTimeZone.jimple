public class org.joda.time.tz.CachedDateTimeZone extends org.joda.time.DateTimeZone
{
    private static final long serialVersionUID;
    private static final int cInfoCacheMask;
    private final org.joda.time.DateTimeZone iZone;
    private final transient org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache;

    public static org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)
    {
        org.joda.time.DateTimeZone r0;
        boolean $z0;
        org.joda.time.tz.CachedDateTimeZone $r1, $r2;

        r0 := @parameter0: org.joda.time.DateTimeZone;

        $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z0 == 0 goto label1;

        $r2 = (org.joda.time.tz.CachedDateTimeZone) r0;

        return $r2;

     label1:
        $r1 = new org.joda.time.tz.CachedDateTimeZone;

        specialinvoke $r1.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0);

        return $r1;
    }

    private void <init>(org.joda.time.DateTimeZone)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone r1;
        java.lang.String $r2;
        int $i0, $i1;
        org.joda.time.tz.CachedDateTimeZone$Info[] $r3;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        r1 := @parameter0: org.joda.time.DateTimeZone;

        $r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>();

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>($r2);

        $i0 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>;

        $i1 = $i0 + 1;

        $r3 = newarray (org.joda.time.tz.CachedDateTimeZone$Info)[$i1];

        r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> = $r3;

        r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> = r1;

        return;
    }

    public org.joda.time.DateTimeZone getUncachedZone()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        return $r1;
    }

    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        java.lang.String $r2;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0);

        $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0);

        return $r2;
    }

    public int getOffset(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        int $i1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0);

        $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0);

        return $i1;
    }

    public int getStandardOffset(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0;
        org.joda.time.tz.CachedDateTimeZone$Info $r1;
        int $i1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0);

        $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>(l0);

        return $i1;
    }

    public boolean isFixed()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone $r1;
        boolean $z0;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>();

        return $z0;
    }

    public long nextTransition(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0, $l1;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0);

        return $l1;
    }

    public long previousTransition(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0, $l1;
        org.joda.time.DateTimeZone $r1;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l0);

        return $l1;
    }

    public int hashCode()
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        org.joda.time.DateTimeZone $r1;
        int $i0;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.CachedDateTimeZone r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        org.joda.time.DateTimeZone $r3, $r4;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone;

        if $z0 == 0 goto label2;

        $r4 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $r2 = (org.joda.time.tz.CachedDateTimeZone) r1;

        $r3 = $r2.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        $z1 = virtualinvoke $r4.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        return 0;
    }

    private org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0, $l3, $l5, $l6;
        int i1, i2, $i4, $i7;
        org.joda.time.tz.CachedDateTimeZone$Info[] r1;
        org.joda.time.tz.CachedDateTimeZone$Info r2;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        $l3 = l0 >> 32;

        i1 = (int) $l3;

        r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>;

        $i4 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>;

        i2 = i1 & $i4;

        r2 = r1[i2];

        if r2 == null goto label1;

        $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>;

        $l6 = $l5 >> 32;

        $i7 = (int) $l6;

        if $i7 == i1 goto label2;

     label1:
        r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0);

        r1[i2] = r2;

     label2:
        return r2;
    }

    private org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)
    {
        org.joda.time.tz.CachedDateTimeZone r0;
        long l0, l1, l2, l5;
        org.joda.time.tz.CachedDateTimeZone$Info $r2, $r5, r7;
        org.joda.time.DateTimeZone $r3, $r4, $r6;
        byte $b3, $b4;

        r0 := @this: org.joda.time.tz.CachedDateTimeZone;

        l0 := @parameter0: long;

        l5 = l0 & -4294967296L;

        $r2 = new org.joda.time.tz.CachedDateTimeZone$Info;

        $r3 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r3, l5);

        l1 = l5 | 4294967295L;

        r7 = $r2;

     label1:
        $r4 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        l2 = virtualinvoke $r4.<org.joda.time.DateTimeZone: long nextTransition(long)>(l5);

        $b3 = l2 cmp l5;

        if $b3 == 0 goto label3;

        $b4 = l2 cmp l1;

        if $b4 <= 0 goto label2;

        goto label3;

     label2:
        l5 = l2;

        $r5 = new org.joda.time.tz.CachedDateTimeZone$Info;

        $r6 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>;

        specialinvoke $r5.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r6, l2);

        r7.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> = $r5;

        r7 = $r5;

        goto label1;

     label3:
        return $r2;
    }

    static void <clinit>()
    {
        int $i0, i1, i2, i3, i4;
        java.lang.SecurityException $r0;
        java.lang.Integer r1;

        <org.joda.time.tz.CachedDateTimeZone: long serialVersionUID> = 5472298452022250685L;

     label1:
        r1 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>("org.joda.time.tz.CachedDateTimeZone.size");

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        r1 = null;

     label4:
        if r1 != null goto label5;

        i1 = 512;

        goto label8;

     label5:
        i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        i3 = i2 + -1;

        i4 = 0;

     label6:
        if i3 <= 0 goto label7;

        i4 = i4 + 1;

        i3 = i3 >> 1;

        goto label6;

     label7:
        i1 = 1 << i4;

     label8:
        $i0 = i1 - 1;

        <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> = $i0;

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
