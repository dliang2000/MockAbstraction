class org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter extends java.lang.Object implements org.apache.flink.core.fs.RecoverableFsDataOutputStream$Committer
{
    private final org.apache.flink.core.fs.local.LocalRecoverable recoverable;

    void <init>(org.apache.flink.core.fs.local.LocalRecoverable)
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter r0;
        org.apache.flink.core.fs.local.LocalRecoverable r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        r1 := @parameter0: org.apache.flink.core.fs.local.LocalRecoverable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (org.apache.flink.core.fs.local.LocalRecoverable) $r2;

        r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable> = $r3;

        return;
    }

    public void commit() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter r0;
        java.io.File r1, r2;
        org.apache.flink.core.fs.local.LocalRecoverable $r3, $r4, $r5;
        long $l0, $l1;
        byte $b2;
        java.nio.file.Path $r6, $r7;
        java.nio.file.CopyOption[] $r8;
        java.nio.file.StandardCopyOption $r9;
        java.io.IOException $r11, $r13, $r19;
        java.nio.file.FileAlreadyExistsException $r12;
        java.lang.StringBuilder $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24;
        java.lang.String $r17, $r25;
        java.lang.Exception $r18;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        $r3 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        r1 = virtualinvoke $r3.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File tempFile()>();

        $r4 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        r2 = virtualinvoke $r4.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File targetFile()>();

        $l0 = virtualinvoke r1.<java.io.File: long length()>();

        $r5 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        $l1 = virtualinvoke $r5.<org.apache.flink.core.fs.local.LocalRecoverable: long offset()>();

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Cannot clean commit: File has trailing junk data.");

        throw $r11;

     label1:
        $r6 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        $r7 = virtualinvoke r2.<java.io.File: java.nio.file.Path toPath()>();

        $r8 = newarray (java.nio.file.CopyOption)[1];

        $r9 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;

        $r8[0] = $r9;

        staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r6, $r7, $r8);

     label2:
        goto label6;

     label3:
        $r18 := @caughtexception;

        $z0 = virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>(r2);

        if $z0 != 0 goto label4;

        $r19 = new java.io.IOException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Committing file failed, could not rename ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r19;

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Committing file failed. Target file already exists: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label6:
        return;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
        catch java.nio.file.AtomicMoveNotSupportedException from label1 to label2 with label3;
        catch java.nio.file.FileAlreadyExistsException from label1 to label2 with label5;
    }

    public void commitAfterRecovery() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter r0;
        java.io.File r1, r2;
        long l0, $l1, $l3;
        org.apache.flink.core.fs.local.LocalRecoverable $r6, $r7, $r8;
        boolean $z0, $z1;
        byte $b2, $b4;
        java.nio.file.Path $r9, $r10;
        java.nio.file.CopyOption[] $r11;
        java.nio.file.StandardCopyOption $r12;
        java.io.IOException $r14;
        java.lang.StringBuilder $r15, $r16, $r17;
        java.lang.String $r18;
        java.io.FileOutputStream $r19;
        java.nio.channels.FileChannel $r20;
        java.lang.Throwable $r22, $r23, $r25, r26;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        $r6 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        r1 = virtualinvoke $r6.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File tempFile()>();

        $r7 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        r2 = virtualinvoke $r7.<org.apache.flink.core.fs.local.LocalRecoverable: java.io.File targetFile()>();

        $r8 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        l0 = virtualinvoke $r8.<org.apache.flink.core.fs.local.LocalRecoverable: long offset()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label15;

        $l1 = virtualinvoke r1.<java.io.File: long length()>();

        $b2 = $l1 cmp l0;

        if $b2 <= 0 goto label13;

        $r19 = new java.io.FileOutputStream;

        specialinvoke $r19.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, 1);

        r26 = null;

     label01:
        $r20 = virtualinvoke $r19.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r20.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>(l0);

     label02:
        if $r19 == null goto label12;

        goto label03;

     label03:
        virtualinvoke $r19.<java.io.FileOutputStream: void close()>();

        goto label12;

     label04:
        $r23 := @caughtexception;

        r26 = $r23;

        throw $r23;

     label05:
        $r25 := @caughtexception;

     label06:
        if $r19 == null goto label11;

        if r26 == null goto label10;

     label07:
        virtualinvoke $r19.<java.io.FileOutputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        virtualinvoke r26.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

        goto label11;

     label10:
        virtualinvoke $r19.<java.io.FileOutputStream: void close()>();

     label11:
        throw $r25;

     label12:
        goto label14;

     label13:
        $l3 = virtualinvoke r1.<java.io.File: long length()>();

        $b4 = $l3 cmp l0;

        if $b4 >= 0 goto label14;

        $r14 = new java.io.IOException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing data in tmp file: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label14:
        $r9 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        $r10 = virtualinvoke r2.<java.io.File: java.nio.file.Path toPath()>();

        $r11 = newarray (java.nio.file.CopyOption)[1];

        $r12 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption ATOMIC_MOVE>;

        $r11[0] = $r12;

        staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r9, $r10, $r11);

        goto label16;

     label15:
        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label16;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    public org.apache.flink.core.fs.RecoverableWriter$CommitRecoverable getRecoverable()
    {
        org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter r0;
        org.apache.flink.core.fs.local.LocalRecoverable $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter;

        $r1 = r0.<org.apache.flink.core.fs.local.LocalRecoverableFsDataOutputStream$LocalCommitter: org.apache.flink.core.fs.local.LocalRecoverable recoverable>;

        return $r1;
    }
}
