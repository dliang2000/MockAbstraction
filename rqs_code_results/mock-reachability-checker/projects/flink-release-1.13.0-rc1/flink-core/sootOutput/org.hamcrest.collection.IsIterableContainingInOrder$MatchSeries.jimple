class org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries extends java.lang.Object
{
    public final java.util.List matchers;
    private final org.hamcrest.Description mismatchDescription;
    public int nextMatchIx;

    public void <init>(java.util.List, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        java.util.List r1;
        org.hamcrest.Description r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.hamcrest.Description;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx> = 0;

        r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: org.hamcrest.Description mismatchDescription> = r2;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Should specify at least one expected element");

        throw $r3;

     label1:
        r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: java.util.List matchers> = r1;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: boolean isNotSurplus(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: boolean isMatched(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isFinished()
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        java.util.List $r1, $r4;
        int $i0, $i1, $i2;
        org.hamcrest.Description $r2, $r3;
        java.lang.Object $r5;
        org.hamcrest.SelfDescribing $r6;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        $i0 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        $r1 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: java.util.List matchers>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: org.hamcrest.Description mismatchDescription>;

        $r3 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("No item matched: ");

        $r4 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: java.util.List matchers>;

        $i2 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r6 = (org.hamcrest.SelfDescribing) $r5;

        interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r6);

        return 0;

     label1:
        return 1;
    }

    private boolean isMatched(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        java.lang.Object r1, $r4;
        org.hamcrest.Matcher r2;
        int $i0, $i1, $i2;
        java.util.List $r3;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: java.util.List matchers>;

        $i0 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i0);

        r2 = (org.hamcrest.Matcher) $r4;

        $z0 = interfaceinvoke r2.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: void describeMismatch(org.hamcrest.Matcher,java.lang.Object)>(r2, r1);

        return 0;

     label1:
        $i1 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        $i2 = $i1 + 1;

        r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx> = $i2;

        return 1;
    }

    private boolean isNotSurplus(java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        java.lang.Object r1;
        java.util.List $r2;
        int $i0, $i1;
        org.hamcrest.Description $r3, $r4;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: java.util.List matchers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        if $i0 > $i1 goto label1;

        $r3 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: org.hamcrest.Description mismatchDescription>;

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("Not matched: ");

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        return 0;

     label1:
        return 1;
    }

    private void describeMismatch(org.hamcrest.Matcher, java.lang.Object)
    {
        org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries r0;
        org.hamcrest.Matcher r1;
        java.lang.Object r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7;
        org.hamcrest.Description $r4, $r10;
        int $i0;
        java.lang.String $r8;

        r0 := @this: org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries;

        r1 := @parameter0: org.hamcrest.Matcher;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: org.hamcrest.Description mismatchDescription>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("item ");

        $i0 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: int nextMatchIx>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r8);

        $r10 = r0.<org.hamcrest.collection.IsIterableContainingInOrder$MatchSeries: org.hamcrest.Description mismatchDescription>;

        interfaceinvoke r1.<org.hamcrest.Matcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r2, $r10);

        return;
    }
}
