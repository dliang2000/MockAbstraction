public class org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings extends java.lang.Object
{
    public final int limitTotal;
    public final int limitInput;
    public final int limitOutput;
    public final long streamOpenTimeout;
    public final long streamInactivityTimeout;

    public void <init>(int, int, int, long, long)
    {
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings r0;
        int i0, i1, i2;
        long l3, l4;
        byte $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        l4 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z0);

        if i1 < 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z1);

        if i2 < 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z2);

        $b5 = l3 cmp 0L;

        if $b5 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z3);

        $b6 = l4 cmp 0L;

        if $b6 < 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z4);

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitTotal> = i0;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitInput> = i1;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: int limitOutput> = i2;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: long streamOpenTimeout> = l3;

        r0.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: long streamInactivityTimeout> = l4;

        return;
    }

    public static org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings fromConfig(org.apache.flink.configuration.Configuration, java.lang.String)
    {
        org.apache.flink.configuration.Configuration r0;
        java.lang.String r1;
        org.apache.flink.configuration.ConfigOption r2, r3, r4, r5, r6;
        int i0, i1, i2, $i5, $i6, $i7;
        long l3, l4;
        org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings $r9;

        r0 := @parameter0: org.apache.flink.configuration.Configuration;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "fsScheme");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "config");

        r2 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimit(java.lang.String)>(r1);

        r3 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitIn(java.lang.String)>(r1);

        r4 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitOut(java.lang.String)>(r1);

        i0 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r2);

        i1 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r3);

        i2 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: int getInteger(org.apache.flink.configuration.ConfigOption)>(r4);

        staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkLimit(int,org.apache.flink.configuration.ConfigOption)>(i0, r2);

        staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkLimit(int,org.apache.flink.configuration.ConfigOption)>(i1, r3);

        staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkLimit(int,org.apache.flink.configuration.ConfigOption)>(i2, r4);

        if i0 > 0 goto label1;

        if i1 > 0 goto label1;

        if i2 > 0 goto label1;

        return null;

     label1:
        r5 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitTimeout(java.lang.String)>(r1);

        r6 = staticinvoke <org.apache.flink.configuration.CoreOptions: org.apache.flink.configuration.ConfigOption fileSystemConnectionLimitStreamInactivityTimeout(java.lang.String)>(r1);

        l3 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(org.apache.flink.configuration.ConfigOption)>(r5);

        l4 = virtualinvoke r0.<org.apache.flink.configuration.Configuration: long getLong(org.apache.flink.configuration.ConfigOption)>(r6);

        staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkTimeout(long,org.apache.flink.configuration.ConfigOption)>(l3, r5);

        staticinvoke <org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void checkTimeout(long,org.apache.flink.configuration.ConfigOption)>(l4, r6);

        $r9 = new org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings;

        if i0 != -1 goto label2;

        $i5 = 0;

        goto label3;

     label2:
        $i5 = i0;

     label3:
        if i1 != -1 goto label4;

        $i6 = 0;

        goto label5;

     label4:
        $i6 = i1;

     label5:
        if i2 != -1 goto label6;

        $i7 = 0;

        goto label7;

     label6:
        $i7 = i2;

     label7:
        specialinvoke $r9.<org.apache.flink.core.fs.LimitedConnectionsFileSystem$ConnectionLimitingSettings: void <init>(int,int,int,long,long)>($i5, $i6, $i7, l3, l4);

        return $r9;
    }

    private static void checkLimit(int, org.apache.flink.configuration.ConfigOption)
    {
        int i0;
        org.apache.flink.configuration.ConfigOption r0;
        org.apache.flink.configuration.IllegalConfigurationException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.flink.configuration.ConfigOption;

        if i0 >= -1 goto label1;

        $r1 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for \'");

        $r4 = virtualinvoke r0.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }

    private static void checkTimeout(long, org.apache.flink.configuration.ConfigOption)
    {
        long l0;
        org.apache.flink.configuration.ConfigOption r0;
        byte $b1;
        org.apache.flink.configuration.IllegalConfigurationException $r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;

        l0 := @parameter0: long;

        r0 := @parameter1: org.apache.flink.configuration.ConfigOption;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r1 = new org.apache.flink.configuration.IllegalConfigurationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for \'");

        $r4 = virtualinvoke r0.<org.apache.flink.configuration.ConfigOption: java.lang.String key()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.flink.configuration.IllegalConfigurationException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label1:
        return;
    }
}
