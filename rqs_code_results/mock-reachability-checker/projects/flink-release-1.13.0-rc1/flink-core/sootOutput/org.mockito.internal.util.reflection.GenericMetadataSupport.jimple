public abstract class org.mockito.internal.util.reflection.GenericMetadataSupport extends java.lang.Object
{
    protected java.util.Map contextualActualTypeParameters;

    public void <init>()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.util.HashMap $r1;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters> = $r1;

        return;
    }

    protected void registerAllTypeVariables(java.lang.reflect.Type)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.Type r1, r4, $r9;
        java.lang.Class r5;
        java.util.LinkedList $r6;
        java.util.HashSet $r7;
        java.lang.Object $r8;
        boolean $z1, $z5;
        java.lang.reflect.Type[] $r10;
        java.util.List $r11;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.Type;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label1:
        $z5 = interfaceinvoke $r6.<java.util.Queue: boolean isEmpty()>();

        if $z5 != 0 goto label3;

        $r8 = interfaceinvoke $r6.<java.util.Queue: java.lang.Object poll()>();

        r4 = (java.lang.reflect.Type) $r8;

        if r4 == null goto label1;

        $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: void registerTypeVariablesOn(java.lang.reflect.Type)>(r4);

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r4);

        r5 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.Class extractRawTypeOf(java.lang.reflect.Type)>(r4);

        $r9 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();

        interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>($r9);

        $r10 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        interfaceinvoke $r6.<java.util.Queue: boolean addAll(java.util.Collection)>($r11);

        goto label1;

     label3:
        return;
    }

    protected java.lang.Class extractRawTypeOf(java.lang.reflect.Type)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.Type r1, $r10, $r13, $r16;
        boolean $z0, $z1, $z2, $z3;
        org.mockito.exceptions.base.MockitoException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        java.util.Map $r8;
        java.lang.Object $r9;
        java.lang.Class $r11, $r14, $r17, $r18;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r12;
        java.lang.reflect.ParameterizedType $r15;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.Type;

        $z0 = r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r18 = (java.lang.Class) r1;

        return $r18;

     label1:
        $z1 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r15 = (java.lang.reflect.ParameterizedType) r1;

        $r16 = interfaceinvoke $r15.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r17 = (java.lang.Class) $r16;

        return $r17;

     label2:
        $z2 = r1 instanceof org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType;

        if $z2 == 0 goto label3;

        $r12 = (org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType) r1;

        $r13 = interfaceinvoke $r12.<org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType: java.lang.reflect.Type firstBound()>();

        $r14 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.Class extractRawTypeOf(java.lang.reflect.Type)>($r13);

        return $r14;

     label3:
        $z3 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z3 == 0 goto label4;

        $r8 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (java.lang.reflect.Type) $r9;

        $r11 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.Class extractRawTypeOf(java.lang.reflect.Type)>($r10);

        return $r11;

     label4:
        $r2 = new org.mockito.exceptions.base.MockitoException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Raw extraction not supported for : \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    protected void registerTypeVariablesOn(java.lang.reflect.Type)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.Type r1, r6, $r7;
        java.lang.reflect.ParameterizedType r2;
        java.lang.reflect.TypeVariable[] r3;
        java.lang.reflect.Type[] r4;
        java.lang.reflect.TypeVariable r5;
        boolean $z0, $z1;
        java.lang.Class $r8;
        int $i0, i1;
        java.util.Map $r9, $r12;
        java.lang.reflect.WildcardType $r11;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r13;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.Type;

        $z0 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = (java.lang.reflect.ParameterizedType) r1;

        $r7 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $r8 = (java.lang.Class) $r7;

        r3 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r4 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        i1 = 0;

     label2:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label5;

        r5 = r3[i1];

        r6 = r4[i1];

        $z1 = r6 instanceof java.lang.reflect.WildcardType;

        if $z1 == 0 goto label3;

        $r12 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        $r11 = (java.lang.reflect.WildcardType) r6;

        $r13 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.WildcardType)>($r11);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r13);

        goto label4;

     label3:
        if r5 == r6 goto label4;

        $r9 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    protected void registerTypeParametersOn(java.lang.reflect.TypeVariable[])
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.TypeVariable[] r1;
        int i0, i1;
        java.lang.reflect.TypeVariable r3;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.TypeVariable[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: void registerTypeVariableIfNotPresent(java.lang.reflect.TypeVariable)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void registerTypeVariableIfNotPresent(java.lang.reflect.TypeVariable)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.TypeVariable r1;
        java.util.Map $r2, $r3;
        boolean $z0;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r4;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        $r4 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.TypeVariable)>(r1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return;
    }

    private org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.TypeVariable)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.TypeVariable r1, $r7;
        java.lang.reflect.Type[] $r2, $r5;
        java.lang.reflect.Type $r3, $r6;
        boolean $z0;
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType $r4;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r8;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r2 = interfaceinvoke r1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r3 = $r2[0];

        $z0 = $r3 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke r1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();

        $r6 = $r5[0];

        $r7 = (java.lang.reflect.TypeVariable) $r6;

        $r8 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.TypeVariable)>($r7);

        return $r8;

     label1:
        $r4 = new org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType;

        specialinvoke $r4.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVarBoundedType: void <init>(java.lang.reflect.TypeVariable)>(r1);

        return $r4;
    }

    private org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.WildcardType)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.WildcardType r1;
        org.mockito.internal.util.reflection.GenericMetadataSupport$WildCardBoundedType $r3;
        java.lang.reflect.Type $r4, $r5;
        boolean $z0;
        java.lang.reflect.TypeVariable $r6;
        org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType $r7;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.WildcardType;

        $r3 = new org.mockito.internal.util.reflection.GenericMetadataSupport$WildCardBoundedType;

        specialinvoke $r3.<org.mockito.internal.util.reflection.GenericMetadataSupport$WildCardBoundedType: void <init>(java.lang.reflect.WildcardType)>(r1);

        $r4 = virtualinvoke $r3.<org.mockito.internal.util.reflection.GenericMetadataSupport$WildCardBoundedType: java.lang.reflect.Type firstBound()>();

        $z0 = $r4 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r3.<org.mockito.internal.util.reflection.GenericMetadataSupport$WildCardBoundedType: java.lang.reflect.Type firstBound()>();

        $r6 = (java.lang.reflect.TypeVariable) $r5;

        $r7 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: org.mockito.internal.util.reflection.GenericMetadataSupport$BoundedType boundsOf(java.lang.reflect.TypeVariable)>($r6);

        return $r7;

     label1:
        return $r3;
    }

    public abstract java.lang.Class rawType();

    public java.util.List extraInterfaces()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.util.List $r1;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public java.lang.Class[] rawExtraInterfaces()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.Class[] $r1;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        $r1 = newarray (java.lang.Class)[0];

        return $r1;
    }

    public boolean hasRawExtraInterfaces()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.Class[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        $r1 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.Class[] rawExtraInterfaces()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Map actualTypeArguments()
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.TypeVariable[] r1;
        int i0, i1;
        java.lang.reflect.TypeVariable r4;
        java.lang.reflect.Type r5;
        java.lang.Class $r6;
        java.util.LinkedHashMap $r7;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        $r6 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.Class rawType()>();

        r1 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r7 = new java.util.LinkedHashMap;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r1[i1];

        r5 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.reflect.Type getActualTypeArgumentFor(java.lang.reflect.TypeVariable)>(r4);

        virtualinvoke $r7.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r7;
    }

    protected java.lang.reflect.Type getActualTypeArgumentFor(java.lang.reflect.TypeVariable)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.TypeVariable r1, r3;
        java.lang.reflect.Type r2, $r6;
        java.util.Map $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.TypeVariable;

        $r4 = r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.util.Map contextualActualTypeParameters>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.reflect.Type) $r5;

        $z0 = r2 instanceof java.lang.reflect.TypeVariable;

        if $z0 == 0 goto label1;

        r3 = (java.lang.reflect.TypeVariable) r2;

        $r6 = virtualinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: java.lang.reflect.Type getActualTypeArgumentFor(java.lang.reflect.TypeVariable)>(r3);

        return $r6;

     label1:
        return r2;
    }

    public org.mockito.internal.util.reflection.GenericMetadataSupport resolveGenericReturnType(java.lang.reflect.Method)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0, r2;
        java.lang.reflect.Method r1;
        boolean $z0;
        org.mockito.internal.util.reflection.GenericMetadataSupport$GenericArrayReturnType $r3;
        java.lang.reflect.GenericArrayType $r4;
        java.lang.reflect.Type r5;
        int i0;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.Method;

        r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        i0 = 0;

     label1:
        $z0 = r5 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        $r4 = (java.lang.reflect.GenericArrayType) r5;

        r5 = interfaceinvoke $r4.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        goto label1;

     label2:
        r2 = specialinvoke r0.<org.mockito.internal.util.reflection.GenericMetadataSupport: org.mockito.internal.util.reflection.GenericMetadataSupport resolveGenericType(java.lang.reflect.Type,java.lang.reflect.Method)>(r5, r1);

        if i0 != 0 goto label3;

        return r2;

     label3:
        $r3 = new org.mockito.internal.util.reflection.GenericMetadataSupport$GenericArrayReturnType;

        specialinvoke $r3.<org.mockito.internal.util.reflection.GenericMetadataSupport$GenericArrayReturnType: void <init>(org.mockito.internal.util.reflection.GenericMetadataSupport,int)>(r2, i0);

        return $r3;
    }

    private org.mockito.internal.util.reflection.GenericMetadataSupport resolveGenericType(java.lang.reflect.Type, java.lang.reflect.Method)
    {
        org.mockito.internal.util.reflection.GenericMetadataSupport r0;
        java.lang.reflect.Type r1;
        java.lang.reflect.Method r2;
        boolean $z0, $z1, $z2;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r11, $r12, $r13;
        java.lang.Class $r6;
        java.lang.String $r7, $r10, $r14;
        org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType $r15;
        java.lang.reflect.TypeVariable[] $r16, $r19;
        java.lang.reflect.TypeVariable $r17;
        org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType $r18;
        java.lang.reflect.ParameterizedType $r20;
        org.mockito.internal.util.reflection.GenericMetadataSupport$NotGenericReturnTypeSupport $r21;

        r0 := @this: org.mockito.internal.util.reflection.GenericMetadataSupport;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.lang.reflect.Method;

        $z0 = r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r21 = new org.mockito.internal.util.reflection.GenericMetadataSupport$NotGenericReturnTypeSupport;

        specialinvoke $r21.<org.mockito.internal.util.reflection.GenericMetadataSupport$NotGenericReturnTypeSupport: void <init>(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.reflect.Type)>(r0, r1);

        return $r21;

     label1:
        $z1 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r18 = new org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType;

        $r19 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r20 = (java.lang.reflect.ParameterizedType) r1;

        specialinvoke $r18.<org.mockito.internal.util.reflection.GenericMetadataSupport$ParameterizedReturnType: void <init>(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.reflect.TypeVariable[],java.lang.reflect.ParameterizedType)>(r0, $r19, $r20);

        return $r18;

     label2:
        $z2 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z2 == 0 goto label3;

        $r15 = new org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType;

        $r16 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        $r17 = (java.lang.reflect.TypeVariable) r1;

        specialinvoke $r15.<org.mockito.internal.util.reflection.GenericMetadataSupport$TypeVariableReturnType: void <init>(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.reflect.TypeVariable[],java.lang.reflect.TypeVariable)>(r0, $r16, $r17);

        return $r15;

     label3:
        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ouch, it shouldn\'t happen, type \'");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on method : \'");

        $r10 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String toGenericString()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported : ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r14);

        throw $r3;
    }

    public static org.mockito.internal.util.reflection.GenericMetadataSupport inferFrom(java.lang.reflect.Type)
    {
        java.lang.reflect.Type r0;
        boolean $z0, $z1;
        org.mockito.exceptions.base.MockitoException $r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r9;
        java.lang.Class $r5, $r14;
        java.lang.String $r6, $r10;
        org.mockito.internal.util.reflection.GenericMetadataSupport$FromParameterizedTypeGenericMetadataSupport $r11;
        java.lang.reflect.ParameterizedType $r12;
        org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport $r13;

        r0 := @parameter0: java.lang.reflect.Type;

        staticinvoke <org.mockito.internal.util.Checks: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "type");

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r13 = new org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport;

        $r14 = (java.lang.Class) r0;

        specialinvoke $r13.<org.mockito.internal.util.reflection.GenericMetadataSupport$FromClassGenericMetadataSupport: void <init>(java.lang.Class)>($r14);

        return $r13;

     label1:
        $z1 = r0 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label2;

        $r11 = new org.mockito.internal.util.reflection.GenericMetadataSupport$FromParameterizedTypeGenericMetadataSupport;

        $r12 = (java.lang.reflect.ParameterizedType) r0;

        specialinvoke $r11.<org.mockito.internal.util.reflection.GenericMetadataSupport$FromParameterizedTypeGenericMetadataSupport: void <init>(java.lang.reflect.ParameterizedType)>($r12);

        return $r11;

     label2:
        $r2 = new org.mockito.exceptions.base.MockitoException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type meta-data for this Type (");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not supported : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r10);

        throw $r2;
    }
}
