public class org.mockito.internal.invocation.InvocationComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        org.mockito.internal.invocation.InvocationComparator r0;

        r0 := @this: org.mockito.internal.invocation.InvocationComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.mockito.invocation.Invocation, org.mockito.invocation.Invocation)
    {
        org.mockito.internal.invocation.InvocationComparator r0;
        org.mockito.invocation.Invocation r1, r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.mockito.internal.invocation.InvocationComparator;

        r1 := @parameter0: org.mockito.invocation.Invocation;

        r2 := @parameter1: org.mockito.invocation.Invocation;

        $i0 = interfaceinvoke r1.<org.mockito.invocation.Invocation: int getSequenceNumber()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i1 = interfaceinvoke r2.<org.mockito.invocation.Invocation: int getSequenceNumber()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = virtualinvoke $r3.<java.lang.Integer: int compareTo(java.lang.Integer)>($r4);

        return $i2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.mockito.internal.invocation.InvocationComparator r0;
        java.lang.Object r1, r2;
        org.mockito.invocation.Invocation $r3, $r4;
        int $i0;

        r0 := @this: org.mockito.internal.invocation.InvocationComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.mockito.invocation.Invocation) r1;

        $r3 = (org.mockito.invocation.Invocation) r2;

        $i0 = virtualinvoke r0.<org.mockito.internal.invocation.InvocationComparator: int compare(org.mockito.invocation.Invocation,org.mockito.invocation.Invocation)>($r4, $r3);

        return $i0;
    }
}
