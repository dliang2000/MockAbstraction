public class org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup extends java.lang.Object implements org.powermock.api.mockito.expectation.ConstructorExpectationSetup
{
    private final java.lang.Class mockType;
    private final org.powermock.tests.utils.ArrayMerger arrayMerger;
    private final org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator mockCreator;
    private java.lang.Class[] parameterTypes;
    private final org.powermock.core.spi.support.InvocationSubstitute mock;

    public void <init>(java.lang.Class)
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1;
        org.powermock.tests.utils.impl.ArrayMergerImpl $r2;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator $r3, $r4;
        java.lang.reflect.Method[] $r5;
        java.lang.Object $r6;
        org.powermock.core.spi.support.InvocationSubstitute $r7;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class[] parameterTypes> = null;

        $r2 = new org.powermock.tests.utils.impl.ArrayMergerImpl;

        specialinvoke $r2.<org.powermock.tests.utils.impl.ArrayMergerImpl: void <init>()>();

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.tests.utils.ArrayMerger arrayMerger> = $r2;

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType> = r1;

        $r3 = new org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator;

        specialinvoke $r3.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: void <init>()>();

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator mockCreator> = $r3;

        $r4 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator getMockCreator()>();

        $r5 = (java.lang.reflect.Method[]) null;

        $r6 = virtualinvoke $r4.<org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator: java.lang.Object createMock(java.lang.Class,boolean,boolean,java.lang.Object,org.mockito.MockSettings,java.lang.reflect.Method[])>(class "Lorg/powermock/core/spi/support/InvocationSubstitute;", 0, 0, null, null, $r5);

        $r7 = (org.powermock.core.spi.support.InvocationSubstitute) $r6;

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.core.spi.support.InvocationSubstitute mock> = $r7;

        return;
    }

    public transient org.mockito.stubbing.OngoingStubbing withArguments(java.lang.Object, java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Object r1;
        java.lang.Object[] r2, $r4, $r8;
        java.lang.Object[][] $r3;
        org.powermock.tests.utils.ArrayMerger $r5;
        java.lang.Class $r6;
        java.lang.Class[] $r7;
        org.mockito.stubbing.OngoingStubbing $r9;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $r6 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType>;

        $r7 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class[] parameterTypes>;

        $r5 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.tests.utils.ArrayMerger arrayMerger>;

        $r3 = newarray (java.lang.Object[])[2];

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r3[0] = $r4;

        $r3[1] = r2;

        $r8 = interfaceinvoke $r5.<org.powermock.tests.utils.ArrayMerger: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/Object;", $r3);

        $r9 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing createNewSubstituteMock(java.lang.Class,java.lang.Class[],java.lang.Object[])>($r6, $r7, $r8);

        return $r9;
    }

    private transient org.mockito.stubbing.OngoingStubbing createNewSubstituteMock(java.lang.Class, java.lang.Class[], java.lang.Object[]) throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1, r4;
        java.lang.Class[] r2;
        java.lang.Object[] r3;
        org.powermock.core.spi.NewInvocationControl r5;
        java.lang.Object $r7;
        org.mockito.stubbing.OngoingStubbing $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Object[];

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type cannot be null");

        throw $r10;

     label1:
        r4 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r1);

        if r2 != null goto label2;

        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor findUniqueConstructorOrThrowException(java.lang.Class,java.lang.Object[])>(r1, r3);

        goto label3;

     label2:
        staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r4, r2);

     label3:
        r5 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.core.spi.NewInvocationControl createNewInvocationControl(java.lang.Class,java.lang.Class)>(r1, r4);

        $r7 = interfaceinvoke r5.<org.powermock.core.spi.NewInvocationControl: java.lang.Object expectSubstitutionLogic(java.lang.Object[])>(r3);

        $r8 = (org.mockito.stubbing.OngoingStubbing) $r7;

        return $r8;
    }

    private org.powermock.core.spi.NewInvocationControl createNewInvocationControl(java.lang.Class, java.lang.Class)
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1, r2, $r6;
        org.powermock.core.spi.support.InvocationSubstitute $r3;
        java.lang.Object[] $r5;
        org.powermock.core.spi.NewInvocationControl r7;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r7 = staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.NewInvocationControl getNewInstanceControl(java.lang.Class)>(r2);

        if r7 != null goto label1;

        $r3 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.core.spi.support.InvocationSubstitute mock>;

        r7 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.core.spi.NewInvocationControl createNewInvocationControl(org.powermock.core.spi.support.InvocationSubstitute)>($r3);

        staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.NewInvocationControl putNewInstanceControl(java.lang.Class,org.powermock.core.spi.NewInvocationControl)>(r1, r7);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>(r1);

        $r5[0] = $r6;

        staticinvoke <org.powermock.core.MockRepository: void addObjectsToAutomaticallyReplayAndVerify(java.lang.Object[])>($r5);

     label1:
        return r7;
    }

    public org.mockito.stubbing.OngoingStubbing withAnyArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1, $r6, $r7, $r8, r12;
        java.lang.reflect.Constructor[] r2, r13;
        java.lang.reflect.Constructor r3;
        java.lang.Class[] r4;
        java.lang.Object[] r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        org.powermock.api.mockito.internal.expectation.DelegatingToConstructorsOngoingStubbing $r9;
        java.lang.Object $r10;
        java.lang.IllegalArgumentException $r11;
        org.mockito.stubbing.OngoingStubbing r14;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        $r6 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType>;

        if $r6 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Class to expected cannot be null");

        throw $r11;

     label1:
        $r7 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType>;

        r1 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.Class getOriginalUnmockedType(java.lang.Class)>($r7);

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Constructor[] getAllConstructors(java.lang.Class)>(r1);

        r3 = r2[0];

        r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r4;

        r5 = newarray (java.lang.Object)[$i0];

        i6 = 0;

     label2:
        $i1 = lengthof r4;

        if i6 >= $i1 goto label3;

        r12 = r4[i6];

        $r10 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Object createParamArgMatcher(java.lang.Class)>(r12);

        r5[i6] = $r10;

        i6 = i6 + 1;

        goto label2;

     label3:
        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        r13 = newarray (java.lang.reflect.Constructor)[$i3];

        $i4 = lengthof r2;

        $i5 = $i4 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 1, r13, 0, $i5);

        $r8 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType>;

        r14 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing createNewSubstituteMock(java.lang.Class,java.lang.Class[],java.lang.Object[])>($r8, r4, r5);

        $r9 = new org.powermock.api.mockito.internal.expectation.DelegatingToConstructorsOngoingStubbing;

        specialinvoke $r9.<org.powermock.api.mockito.internal.expectation.DelegatingToConstructorsOngoingStubbing: void <init>(java.lang.reflect.Constructor[],org.mockito.stubbing.OngoingStubbing)>(r13, r14);

        return $r9;
    }

    private java.lang.Object createParamArgMatcher(java.lang.Class)
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1;
        java.lang.Object $r2;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <org.mockito.ArgumentMatchers: java.lang.Object nullable(java.lang.Class)>(r1);

        return $r2;
    }

    public org.mockito.stubbing.OngoingStubbing withNoArguments() throws java.lang.Exception
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Object[] $r1;
        java.lang.Class[] $r2;
        java.lang.Class $r3;
        org.mockito.stubbing.OngoingStubbing $r4;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        $r3 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class mockType>;

        $r2 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class[] parameterTypes>;

        $r1 = newarray (java.lang.Object)[0];

        $r4 = specialinvoke r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.mockito.stubbing.OngoingStubbing createNewSubstituteMock(java.lang.Class,java.lang.Class[],java.lang.Object[])>($r3, $r2, $r1);

        return $r4;
    }

    public transient org.powermock.api.mockito.expectation.WithExpectedArguments withParameterTypes(java.lang.Class, java.lang.Class[])
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class r1;
        java.lang.Class[] r2, $r4, $r7;
        java.lang.Class[][] $r3;
        org.powermock.tests.utils.ArrayMerger $r5;
        java.lang.Object[] $r6;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        $r5 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.tests.utils.ArrayMerger arrayMerger>;

        $r3 = newarray (java.lang.Class[])[2];

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r1;

        $r3[0] = $r4;

        $r3[1] = r2;

        $r6 = interfaceinvoke $r5.<org.powermock.tests.utils.ArrayMerger: java.lang.Object[] mergeArrays(java.lang.Class,java.lang.Object[][])>(class "Ljava/lang/Class;", $r3);

        $r7 = (java.lang.Class[]) $r6;

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class[] parameterTypes> = $r7;

        return r0;
    }

    private org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator getMockCreator()
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator $r1;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        $r1 = r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: org.powermock.api.mockito.internal.mockcreation.DefaultMockCreator mockCreator>;

        return $r1;
    }

    private org.powermock.core.spi.NewInvocationControl createNewInvocationControl(org.powermock.core.spi.support.InvocationSubstitute)
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        org.powermock.core.spi.support.InvocationSubstitute r1;
        org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl $r2;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: org.powermock.core.spi.support.InvocationSubstitute;

        $r2 = new org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl;

        specialinvoke $r2.<org.powermock.api.mockito.internal.invocation.MockitoNewInvocationControl: void <init>(org.powermock.core.spi.support.InvocationSubstitute)>(r1);

        return $r2;
    }

    void setParameterTypes(java.lang.Class[])
    {
        org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup r0;
        java.lang.Class[] r1;

        r0 := @this: org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup;

        r1 := @parameter0: java.lang.Class[];

        r0.<org.powermock.api.mockito.expectation.DefaultConstructorExpectationSetup: java.lang.Class[] parameterTypes> = r1;

        return;
    }
}
