public class javassist.bytecode.analysis.MultiType extends javassist.bytecode.analysis.Type
{
    private java.util.Map interfaces;
    private javassist.bytecode.analysis.Type resolved;
    private javassist.bytecode.analysis.Type potentialClass;
    private javassist.bytecode.analysis.MultiType mergeSource;
    private boolean changed;

    public void <init>(java.util.Map)
    {
        javassist.bytecode.analysis.MultiType r0;
        java.util.Map r1;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void <init>(java.util.Map,javassist.bytecode.analysis.Type)>(r1, null);

        return;
    }

    public void <init>(java.util.Map, javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.MultiType r0;
        java.util.Map r1;
        javassist.bytecode.analysis.Type r2;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: javassist.bytecode.analysis.Type;

        specialinvoke r0.<javassist.bytecode.analysis.Type: void <init>(javassist.CtClass)>(null);

        r0.<javassist.bytecode.analysis.MultiType: boolean changed> = 0;

        r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces> = r1;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass> = r2;

        return;
    }

    public javassist.CtClass getCtClass()
    {
        javassist.bytecode.analysis.MultiType r0;
        javassist.bytecode.analysis.Type $r1, $r2, $r4;
        javassist.CtClass $r3, $r5;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        $r1 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r1 == null goto label1;

        $r4 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $r5 = virtualinvoke $r4.<javassist.bytecode.analysis.Type: javassist.CtClass getCtClass()>();

        return $r5;

     label1:
        $r2 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT>;

        $r3 = virtualinvoke $r2.<javassist.bytecode.analysis.Type: javassist.CtClass getCtClass()>();

        return $r3;
    }

    public javassist.bytecode.analysis.Type getComponent()
    {
        javassist.bytecode.analysis.MultiType r0;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        return null;
    }

    public int getSize()
    {
        javassist.bytecode.analysis.MultiType r0;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        return 1;
    }

    public boolean isArray()
    {
        javassist.bytecode.analysis.MultiType r0;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        return 0;
    }

    boolean popChanged()
    {
        javassist.bytecode.analysis.MultiType r0;
        boolean z0;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        z0 = r0.<javassist.bytecode.analysis.MultiType: boolean changed>;

        r0.<javassist.bytecode.analysis.MultiType: boolean changed> = 0;

        return z0;
    }

    public boolean isAssignableFrom(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.MultiType r0;
        javassist.bytecode.analysis.Type r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Not implemented");

        throw $r2;
    }

    public boolean isAssignableTo(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.MultiType r0;
        javassist.bytecode.analysis.Type r1, $r3, $r4, $r5, $r6, $r7, $r8, $r13, $r14, $r15;
        java.util.Map r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.util.Collection $r9;
        java.util.Iterator $r10;
        java.lang.Object $r11;
        javassist.CtClass $r12;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        $r3 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r3 == null goto label1;

        $r15 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $z2 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isAssignableFrom(javassist.bytecode.analysis.Type)>($r15);

        return $z2;

     label1:
        $r4 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT>;

        $z0 = virtualinvoke $r4.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r5 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r5 == null goto label3;

        $r14 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        $z1 = virtualinvoke r1.<javassist.bytecode.analysis.Type: boolean isAssignableFrom(javassist.bytecode.analysis.Type)>($r14);

        if $z1 != 0 goto label3;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass> = null;

     label3:
        r2 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.Type)>(r0, r1);

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        if $i1 != 1 goto label4;

        $r8 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r8 != null goto label4;

        $r9 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (javassist.CtClass) $r11;

        $r13 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type get(javassist.CtClass)>($r12);

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r13;

        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void propogateResolved()>();

        return 1;

     label4:
        $i0 = interfaceinvoke r2.<java.util.Map: int size()>();

        if $i0 < 1 goto label5;

        r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces> = r2;

        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void propogateState()>();

        return 1;

     label5:
        $r6 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r6 == null goto label6;

        $r7 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r7;

        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void propogateResolved()>();

        return 1;

     label6:
        return 0;
    }

    private void propogateState()
    {
        javassist.bytecode.analysis.MultiType r0, r3;
        java.util.Map $r1;
        javassist.bytecode.analysis.Type $r2;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r3 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource>;

     label1:
        if r3 == null goto label2;

        $r1 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        r3.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces> = $r1;

        $r2 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        r3.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass> = $r2;

        r3 = r3.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource>;

        goto label1;

     label2:
        return;
    }

    private void propogateResolved()
    {
        javassist.bytecode.analysis.MultiType r0, r2;
        javassist.bytecode.analysis.Type $r1;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r2 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource>;

     label1:
        if r2 == null goto label2;

        $r1 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        r2.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r1;

        r2 = r2.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource>;

        goto label1;

     label2:
        return;
    }

    public boolean isReference()
    {
        javassist.bytecode.analysis.MultiType r0;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        return 1;
    }

    private java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType)
    {
        javassist.bytecode.analysis.MultiType r0, r1;
        java.util.Iterator r3;
        javassist.CtClass r4;
        java.util.HashMap $r5;
        java.util.Map $r6;
        java.util.Collection $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.lang.String $r9;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.MultiType;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r6 = r1.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javassist.CtClass) $r8;

        $r9 = virtualinvoke r4.<javassist.CtClass: java.lang.String getName()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4);

        virtualinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>(r4, $r5);

        goto label1;

     label2:
        return $r5;
    }

    private java.util.Map mergeMultiInterfaces(javassist.bytecode.analysis.MultiType, javassist.bytecode.analysis.MultiType)
    {
        javassist.bytecode.analysis.MultiType r0, r1, r2;
        java.util.Map r3, r4, $r5;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.MultiType;

        r2 := @parameter1: javassist.bytecode.analysis.MultiType;

        r3 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType)>(r1);

        r4 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType)>(r2);

        $r5 = virtualinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map findCommonInterfaces(java.util.Map,java.util.Map)>(r3, r4);

        return $r5;
    }

    private java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType, javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.MultiType r0, r1;
        javassist.bytecode.analysis.Type r2;
        java.util.Map r3, r4, $r6;
        javassist.CtClass $r5;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.MultiType;

        r2 := @parameter1: javassist.bytecode.analysis.Type;

        r3 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map getAllMultiInterfaces(javassist.bytecode.analysis.MultiType)>(r1);

        $r5 = virtualinvoke r2.<javassist.bytecode.analysis.Type: javassist.CtClass getCtClass()>();

        r4 = virtualinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map getAllInterfaces(javassist.CtClass,java.util.Map)>($r5, null);

        $r6 = virtualinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map findCommonInterfaces(java.util.Map,java.util.Map)>(r3, r4);

        return $r6;
    }

    private boolean inMergeSource(javassist.bytecode.analysis.MultiType)
    {
        javassist.bytecode.analysis.MultiType r0, r1;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.MultiType;

     label1:
        if r1 == null goto label3;

        if r1 != r0 goto label2;

        return 1;

     label2:
        r1 = r1.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource>;

        goto label1;

     label3:
        return 0;
    }

    public javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)
    {
        javassist.bytecode.analysis.MultiType r0, r31;
        javassist.bytecode.analysis.Type r1, $r3, $r4, $r5, $r6, $r11, $r12, $r13, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, r29, $r30, $r34;
        java.lang.String r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.Map $r7, $r10, r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r8;
        java.lang.Object $r9, $r16;
        java.util.Collection $r14;
        java.util.Iterator $r15, r33;
        javassist.CtClass $r17;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: javassist.bytecode.analysis.Type;

        if r0 != r1 goto label01;

        return r0;

     label01:
        $r3 = <javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type UNINIT>;

        if r1 != $r3 goto label02;

        return r0;

     label02:
        $r4 = <javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type BOGUS>;

        if r1 != $r4 goto label03;

        $r28 = <javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type BOGUS>;

        return $r28;

     label03:
        if r1 != null goto label04;

        return r0;

     label04:
        $r5 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r5 == null goto label05;

        $r26 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $r27 = virtualinvoke $r26.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>(r1);

        return $r27;

     label05:
        $r6 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r6 == null goto label09;

        $r22 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        r29 = virtualinvoke $r22.<javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type merge(javassist.bytecode.analysis.Type)>(r1);

        $r23 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        $z4 = virtualinvoke r29.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>($r23);

        if $z4 == 0 goto label06;

        $z6 = virtualinvoke r29.<javassist.bytecode.analysis.Type: boolean popChanged()>();

        if $z6 == 0 goto label09;

     label06:
        $r24 = <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type OBJECT>;

        $z5 = virtualinvoke $r24.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>(r29);

        if $z5 == 0 goto label07;

        $r30 = null;

        goto label08;

     label07:
        $r30 = r29;

     label08:
        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass> = $r30;

        r0.<javassist.bytecode.analysis.MultiType: boolean changed> = 1;

     label09:
        $z7 = r1 instanceof javassist.bytecode.analysis.MultiType;

        if $z7 == 0 goto label12;

        r31 = (javassist.bytecode.analysis.MultiType) r1;

        $r20 = r31.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r20 == null goto label10;

        $r21 = r31.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        r32 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.Type)>(r0, $r21);

        goto label11;

     label10:
        r32 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map mergeMultiInterfaces(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.MultiType)>(r31, r0);

        $z3 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: boolean inMergeSource(javassist.bytecode.analysis.MultiType)>(r31);

        if $z3 != 0 goto label11;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.MultiType mergeSource> = r31;

     label11:
        goto label13;

     label12:
        r32 = specialinvoke r0.<javassist.bytecode.analysis.MultiType: java.util.Map mergeMultiAndSingle(javassist.bytecode.analysis.MultiType,javassist.bytecode.analysis.Type)>(r0, r1);

     label13:
        $i0 = interfaceinvoke r32.<java.util.Map: int size()>();

        if $i0 > 1 goto label14;

        $i3 = interfaceinvoke r32.<java.util.Map: int size()>();

        if $i3 != 1 goto label19;

        $r19 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r19 == null goto label19;

     label14:
        $i1 = interfaceinvoke r32.<java.util.Map: int size()>();

        $r7 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $i2 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i1 == $i2 goto label15;

        r0.<javassist.bytecode.analysis.MultiType: boolean changed> = 1;

        goto label18;

     label15:
        $z0 = r0.<javassist.bytecode.analysis.MultiType: boolean changed>;

        if $z0 != 0 goto label18;

        $r8 = interfaceinvoke r32.<java.util.Map: java.util.Set keySet()>();

        r33 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label18;

        $r9 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $r10 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z2 != 0 goto label17;

        r0.<javassist.bytecode.analysis.MultiType: boolean changed> = 1;

     label17:
        goto label16;

     label18:
        r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces> = r32;

        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void propogateState()>();

        return r0;

     label19:
        $i4 = interfaceinvoke r32.<java.util.Map: int size()>();

        if $i4 != 1 goto label20;

        $r14 = interfaceinvoke r32.<java.util.Map: java.util.Collection values()>();

        $r15 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (javassist.CtClass) $r16;

        $r18 = staticinvoke <javassist.bytecode.analysis.Type: javassist.bytecode.analysis.Type get(javassist.CtClass)>($r17);

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r18;

        goto label22;

     label20:
        $r11 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r11 == null goto label21;

        $r13 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r13;

        goto label22;

     label21:
        $r12 = <javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type OBJECT>;

        r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved> = $r12;

     label22:
        specialinvoke r0.<javassist.bytecode.analysis.MultiType: void propogateResolved()>();

        $r34 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        return $r34;
    }

    public int hashCode()
    {
        javassist.bytecode.analysis.MultiType r0;
        javassist.bytecode.analysis.Type $r1, $r4;
        java.util.Map $r2;
        java.util.Set $r3;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        $r1 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r1 == null goto label1;

        $r4 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $i1 = virtualinvoke $r4.<javassist.bytecode.analysis.Type: int hashCode()>();

        return $i1;

     label1:
        $r2 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r3.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        javassist.bytecode.analysis.MultiType r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        javassist.bytecode.analysis.Type $r3, $r4, $r9, $r10;
        java.util.Map $r5, $r7;
        java.util.Set $r6, $r8;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof javassist.bytecode.analysis.MultiType;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (javassist.bytecode.analysis.MultiType) r1;

        $r3 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r3 == null goto label2;

        $r10 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $r9 = r2.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $z2 = virtualinvoke $r10.<javassist.bytecode.analysis.Type: boolean equals(java.lang.Object)>($r9);

        return $z2;

     label2:
        $r4 = r2.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r4 == null goto label3;

        return 0;

     label3:
        $r5 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = r2.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r6.<java.util.Set: boolean equals(java.lang.Object)>($r8);

        return $z1;
    }

    public java.lang.String toString()
    {
        javassist.bytecode.analysis.MultiType r0;
        java.util.Iterator r2;
        java.lang.String r3, $r10, $r13, $r19;
        javassist.bytecode.analysis.Type $r4, $r8, $r12, $r18;
        java.lang.StringBuffer $r5, $r11, $r16;
        java.util.Map $r6;
        java.util.Set $r7;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r15;

        r0 := @this: javassist.bytecode.analysis.MultiType;

        $r4 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        if $r4 == null goto label1;

        $r18 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type resolved>;

        $r19 = virtualinvoke $r18.<javassist.bytecode.analysis.Type: java.lang.String toString()>();

        return $r19;

     label1:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(java.lang.String)>("{");

        $r6 = r0.<javassist.bytecode.analysis.MultiType: java.util.Map interfaces>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r15;

        $r16 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        goto label2;

     label3:
        $r8 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        if $r8 == null goto label4;

        $r11 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*");

        $r12 = r0.<javassist.bytecode.analysis.MultiType: javassist.bytecode.analysis.Type potentialClass>;

        $r13 = virtualinvoke $r12.<javassist.bytecode.analysis.Type: java.lang.String toString()>();

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        goto label5;

     label4:
        $i0 = virtualinvoke $r5.<java.lang.StringBuffer: int length()>();

        $i1 = $i0 - 2;

        virtualinvoke $r5.<java.lang.StringBuffer: void setLength(int)>($i1);

     label5:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r10 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }
}
