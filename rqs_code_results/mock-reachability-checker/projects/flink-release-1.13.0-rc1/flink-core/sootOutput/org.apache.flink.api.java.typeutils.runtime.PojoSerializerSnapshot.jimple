public class org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerSnapshot
{
    private static final int VERSION;
    private org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData;

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(java.lang.Class, java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializer[], java.util.LinkedHashMap, java.util.Map)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r3;
        java.util.LinkedHashMap r4;
        java.util.Map r5;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Field[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,java.util.Map)>(r1, r2, r3, r4, r5);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData> = $r6;

        return;
    }

    void <init>(java.lang.Class, java.lang.reflect.Field[], org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[], java.util.LinkedHashMap, java.util.Map)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        java.lang.Class r1;
        java.lang.reflect.Field[] r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] r3;
        java.util.LinkedHashMap r4;
        java.util.Map r5;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Field[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[];

        r4 := @parameter3: java.util.LinkedHashMap;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[],java.util.LinkedHashMap,java.util.Map)>(r1, r2, r3, r4, r5);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData> = $r6;

        return;
    }

    public int getCurrentVersion()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        return 2;
    }

    public void writeSnapshot(org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        org.apache.flink.core.memory.DataOutputView r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.core.memory.DataOutputView;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        virtualinvoke $r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: void writeSnapshotData(org.apache.flink.core.memory.DataOutputView)>(r1);

        return;
    }

    public void readSnapshot(int, org.apache.flink.core.memory.DataInputView, java.lang.ClassLoader) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        int i0;
        org.apache.flink.core.memory.DataInputView r1;
        java.lang.ClassLoader r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r5;
        boolean $z0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter2: java.lang.ClassLoader;

        if i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "unrecognized read version %s", $r3);

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData createFrom(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>(r1, r2);

        r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData> = $r5;

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        int i0;
        java.util.LinkedHashMap r3, r5, $r15, $r18, $r31;
        org.apache.flink.api.java.tuple.Tuple2 r4;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r6, $r10, $r13, $r16, $r20;
        org.apache.flink.util.LinkedOptionalMap $r7, $r11, $r14, $r17;
        java.util.ArrayList $r8, $r9;
        org.apache.flink.util.LinkedOptionalMap$ConsumerWithException $r12;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer $r19;
        java.lang.Class $r21;
        java.lang.reflect.Field[] $r22, $r25;
        java.lang.Object[] $r23, $r26;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r24, $r30, $r32;
        java.lang.Object $r27, $r28;
        org.apache.flink.api.common.ExecutionConfig $r29;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        $r7 = virtualinvoke $r6.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getFieldSerializerSnapshots()>();

        i0 = virtualinvoke $r7.<org.apache.flink.util.LinkedOptionalMap: int size()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i0);

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        $r11 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getFieldSerializerSnapshots()>();

        $r12 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot$lambda_restoreSerializer_0__214: org.apache.flink.util.LinkedOptionalMap$ConsumerWithException bootstrap$(java.util.ArrayList,java.util.ArrayList)>($r8, $r9);

        virtualinvoke $r11.<org.apache.flink.util.LinkedOptionalMap: void forEach(org.apache.flink.util.LinkedOptionalMap$ConsumerWithException)>($r12);

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        $r14 = virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getRegisteredSubclassSerializerSnapshots()>();

        $r15 = virtualinvoke $r14.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.LinkedHashMap restoreSerializers(java.util.LinkedHashMap)>($r15);

        r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.tuple.Tuple2 decomposeSubclassSerializerRegistry(java.util.LinkedHashMap)>(r3);

        $r16 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        $r17 = virtualinvoke $r16.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getNonRegisteredSubclassSerializerSnapshots()>();

        $r18 = virtualinvoke $r17.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.LinkedHashMap restoreSerializers(java.util.LinkedHashMap)>($r18);

        $r19 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r20 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        $r21 = virtualinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.Class getPojoClass()>();

        $r22 = newarray (java.lang.reflect.Field)[i0];

        $r23 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r22);

        $r25 = (java.lang.reflect.Field[]) $r23;

        $r24 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[i0];

        $r26 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r24);

        $r30 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r26;

        $r27 = r4.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r31 = (java.util.LinkedHashMap) $r27;

        $r28 = r4.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r32 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r28;

        $r29 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r29.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        specialinvoke $r19.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>($r21, $r25, $r30, $r31, $r32, r5, $r29);

        return $r19;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r2, $r16;
        java.lang.Class r3, $r9, $r14;
        org.apache.flink.util.LinkedOptionalMap r4, r5, r6;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r7, r8;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData $r10, $r11, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r9 == class "Lorg/apache/flink/api/java/typeutils/runtime/PojoSerializer;" goto label1;

        $r24 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r24;

     label1:
        r2 = (org.apache.flink.api.java.typeutils.runtime.PojoSerializer) r1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        r3 = virtualinvoke $r10.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: java.lang.Class getPojoClass()>();

        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        r4 = virtualinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getFieldSerializerSnapshots()>();

        $r12 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        r5 = virtualinvoke $r12.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getRegisteredSubclassSerializerSnapshots()>();

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData snapshotData>;

        r6 = virtualinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshotData: org.apache.flink.util.LinkedOptionalMap getNonRegisteredSubclassSerializerSnapshots()>();

        $r14 = virtualinvoke r2.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class getPojoClass()>();

        if r3 == $r14 goto label2;

        $r23 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r23;

     label2:
        $z0 = virtualinvoke r5.<org.apache.flink.util.LinkedOptionalMap: boolean hasAbsentKeysOrValues()>();

        if $z0 == 0 goto label3;

        $r22 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r22;

     label3:
        $z1 = virtualinvoke r6.<org.apache.flink.util.LinkedOptionalMap: boolean hasAbsentKeysOrValues()>();

        if $z1 == 0 goto label4;

        $r21 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r21;

     label4:
        r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingFields(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.util.LinkedOptionalMap)>(r2, r4);

        $z2 = virtualinvoke r7.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        if $z2 == 0 goto label5;

        $r20 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r20;

     label5:
        r8 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingRegisteredSubclasses(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.util.LinkedOptionalMap)>(r2, r5);

        $z3 = virtualinvoke r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        if $z3 == 0 goto label6;

        $r19 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility incompatible()>();

        return $r19;

     label6:
        $z4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoSerializerIsCompatibleAfterMigration(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>(r2, r7, r8, r4);

        if $z4 == 0 goto label7;

        $r18 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAfterMigration()>();

        return $r18;

     label7:
        $z5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.util.LinkedOptionalMap)>(r2, r7, r8, r5, r6);

        if $z5 == 0 goto label8;

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult,org.apache.flink.util.LinkedOptionalMap)>(r2, r7, r5, r8, r6);

        $r17 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleWithReconfiguredSerializer(org.apache.flink.api.common.typeutils.TypeSerializer)>($r16);

        return $r17;

     label8:
        $r15 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility compatibleAsIs()>();

        return $r15;
    }

    private static java.util.LinkedHashMap restoreSerializers(java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap r0, $r2;
        int $i0;
        java.util.function.BiConsumer $r3;

        r0 := @parameter0: java.util.LinkedHashMap;

        $r2 = new java.util.LinkedHashMap;

        $i0 = virtualinvoke r0.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot$lambda_restoreSerializers_1__200: java.util.function.BiConsumer bootstrap$(java.util.LinkedHashMap)>($r2);

        virtualinvoke r0.<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>($r3);

        return $r2;
    }

    private static org.apache.flink.api.java.tuple.Tuple2 decomposeSubclassSerializerRegistry(java.util.LinkedHashMap)
    {
        java.util.LinkedHashMap r0, $r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        int $i0, $i1;
        java.util.function.BiConsumer $r4;
        org.apache.flink.api.java.tuple.Tuple2 $r5;

        r0 := @parameter0: java.util.LinkedHashMap;

        $r3 = new java.util.LinkedHashMap;

        $i0 = virtualinvoke r0.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $i1 = virtualinvoke r0.<java.util.LinkedHashMap: int size()>();

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i1];

        $r4 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot$lambda_decomposeSubclassSerializerRegistry_2__201: java.util.function.BiConsumer bootstrap$(java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[])>($r3, r2);

        virtualinvoke r0.<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>($r4);

        $r5 = staticinvoke <org.apache.flink.api.java.tuple.Tuple2: org.apache.flink.api.java.tuple.Tuple2 of(java.lang.Object,java.lang.Object)>($r3, r2);

        return $r5;
    }

    private static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingFields(org.apache.flink.api.java.typeutils.runtime.PojoSerializer, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.util.LinkedOptionalMap r1;
        java.util.Set r2;
        java.util.Map r5;
        java.util.Iterator r6;
        org.apache.flink.util.LinkedOptionalMap$KeyValue r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r8;
        java.util.ArrayList $r9, $r10;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r11, $r13;
        java.lang.Object[] $r12, $r15;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r14, $r16;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r17;
        java.lang.Object $r18, $r19, $r20, $r21;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r2 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: java.util.Set getPresentEntries()>();

        $r9 = new java.util.ArrayList;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        $r10 = new java.util.ArrayList;

        $i1 = interfaceinvoke r2.<java.util.Set: int size()>();

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i1);

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.Map buildNewFieldSerializersIndex(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>(r0);

        r6 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.flink.util.LinkedOptionalMap$KeyValue) $r18;

        $r19 = virtualinvoke r7.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object getKey()>();

        $r20 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r8 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r20;

        if r8 == null goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "a present field should have its associated new field serializer available.");

        $r21 = virtualinvoke r7.<org.apache.flink.util.LinkedOptionalMap$KeyValue: java.lang.Object getValue()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        goto label1;

     label4:
        $i2 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r11 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i2];

        $r12 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r12;

        $i3 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $r14 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[$i3];

        $r15 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r16 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r15;

        $r17 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r13, $r16);

        return $r17;
    }

    private static java.util.Map buildNewFieldSerializersIndex(org.apache.flink.api.java.typeutils.runtime.PojoSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        java.lang.reflect.Field[] r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2;
        int i0, $i1, $i2, i3;
        java.util.HashMap $r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        java.lang.reflect.Field $r6;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        r2 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getFieldSerializers()>();

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean)>($z0);

        i0 = lengthof r1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(i0);

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r6 = r1[i3];

        $r5 = r2[i3];

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        i3 = i3 + 1;

        goto label3;

     label4:
        return $r4;
    }

    private static org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult getCompatibilityOfPreExistingRegisteredSubclasses(org.apache.flink.api.java.typeutils.runtime.PojoSerializer, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.util.LinkedOptionalMap r1;
        java.util.LinkedHashMap r2, r5;
        java.util.Iterator r6;
        java.util.Map$Entry r7;
        org.apache.flink.api.common.typeutils.TypeSerializer r8;
        java.util.ArrayList $r9, $r10;
        java.util.Set $r11;
        boolean $z0;
        int $i0, $i1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r12, $r14;
        java.lang.Object[] $r13, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r15, $r17;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult $r18;
        java.lang.Object $r19, $r20, $r21, $r22;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r2 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r5 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getBundledSubclassSerializerRegistry()>();

        $r11 = virtualinvoke r2.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r19 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r19;

        $r20 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = virtualinvoke r5.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r20);

        r8 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r21;

        if r8 == null goto label2;

        $r22 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r22);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r12 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i0];

        $r13 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r13;

        $i1 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $r15 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[$i1];

        $r16 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r17 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[]) $r16;

        $r18 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult constructIntermediateCompatibilityResult(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>($r14, $r17);

        return $r18;
    }

    private static boolean newPojoSerializerIsCompatibleAfterMigration(org.apache.flink.api.java.typeutils.runtime.PojoSerializer, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1, r2;
        org.apache.flink.util.LinkedOptionalMap r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r3 := @parameter3: org.apache.flink.util.LinkedOptionalMap;

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasNewOrRemovedFields(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>(r3, r0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    private static boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1, r2;
        org.apache.flink.util.LinkedOptionalMap r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r3 := @parameter3: org.apache.flink.util.LinkedOptionalMap;

        r4 := @parameter4: org.apache.flink.util.LinkedOptionalMap;

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean newPojoHasDifferentSubclassRegistrationOrder(org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.java.typeutils.runtime.PojoSerializer)>(r3, r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean previousSerializerHasNonRegisteredSubclasses(org.apache.flink.util.LinkedOptionalMap)>(r4);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleWithReconfiguredSerializer()>();

        if $z3 == 0 goto label2;

     label1:
        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    private static boolean newPojoHasNewOrRemovedFields(org.apache.flink.util.LinkedOptionalMap, org.apache.flink.api.java.typeutils.runtime.PojoSerializer)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r1;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z2, $z3, $z4;
        java.util.Set $r2;
        java.lang.reflect.Field[] $r3;

        r0 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter1: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r2 = virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: java.util.Set absentKeysOrValues()>();

        i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $i2 = virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: int size()>();

        i1 = $i2 - i0;

        if i0 <= 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        $r3 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        $i3 = lengthof $r3;

        $i4 = $i3 - i1;

        if $i4 <= 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        if z0 != 0 goto label5;

        if $z3 == 0 goto label6;

     label5:
        $z4 = 1;

        goto label7;

     label6:
        $z4 = 0;

     label7:
        return $z4;
    }

    private static boolean newPojoHasDifferentSubclassRegistrationOrder(org.apache.flink.util.LinkedOptionalMap, org.apache.flink.api.java.typeutils.runtime.PojoSerializer)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r1;
        java.util.Set r2, r3;
        java.util.LinkedHashMap $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        r1 := @parameter1: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r4 = virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        r2 = virtualinvoke $r4.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $r5 = virtualinvoke r1.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getRegisteredClasses()>();

        r3 = virtualinvoke $r5.<java.util.LinkedHashMap: java.util.Set keySet()>();

        $z0 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: boolean isPreviousRegistrationPrefixOfNewRegistration(java.util.Set,java.util.Set)>(r2, r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private static boolean isPreviousRegistrationPrefixOfNewRegistration(java.util.Set, java.util.Set)
    {
        java.util.Set r0, r1;
        java.util.Iterator r2, r3;
        java.lang.Class r4, r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r7;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        r3 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r6;

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.Class) $r7;

        $z2 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    private static boolean previousSerializerHasNonRegisteredSubclasses(org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.util.LinkedOptionalMap r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.LinkedOptionalMap;

        $i0 = virtualinvoke r0.<org.apache.flink.util.LinkedOptionalMap: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static org.apache.flink.api.java.typeutils.runtime.PojoSerializer constructReconfiguredPojoSerializer(org.apache.flink.api.java.typeutils.runtime.PojoSerializer, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult, org.apache.flink.util.LinkedOptionalMap)
    {
        org.apache.flink.api.java.typeutils.runtime.PojoSerializer r0, $r8;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r1, r3;
        org.apache.flink.util.LinkedOptionalMap r2, r4;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r5, $r14;
        org.apache.flink.api.java.tuple.Tuple2 r6;
        java.util.LinkedHashMap $r7, $r13, $r15, $r16;
        java.lang.Class $r9;
        java.lang.reflect.Field[] $r10;
        java.lang.Object $r11, $r12;
        org.apache.flink.api.common.ExecutionConfig $r17;

        r0 := @parameter0: org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r2 := @parameter2: org.apache.flink.util.LinkedOptionalMap;

        r3 := @parameter3: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        r4 := @parameter4: org.apache.flink.util.LinkedOptionalMap;

        r5 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer[] constructReconfiguredFieldSerializers(org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult)>(r1);

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.util.LinkedHashMap getBundledSubclassSerializerRegistry()>();

        r6 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.tuple.Tuple2 constructReconfiguredSubclassRegistry(java.util.LinkedHashMap,org.apache.flink.util.LinkedOptionalMap,org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult)>($r7, r2, r3);

        $r8 = new org.apache.flink.api.java.typeutils.runtime.PojoSerializer;

        $r9 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.Class getPojoClass()>();

        $r10 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: java.lang.reflect.Field[] getFields()>();

        $r11 = r6.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f0>;

        $r13 = (java.util.LinkedHashMap) $r11;

        $r12 = r6.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r14 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) $r12;

        $r15 = virtualinvoke r4.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        $r16 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.LinkedHashMap restoreSerializers(java.util.LinkedHashMap)>($r15);

        $r17 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: org.apache.flink.api.common.ExecutionConfig getExecutionConfig()>();

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.PojoSerializer: void <init>(java.lang.Class,java.lang.reflect.Field[],org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.LinkedHashMap,org.apache.flink.api.common.typeutils.TypeSerializer[],java.util.Map,org.apache.flink.api.common.ExecutionConfig)>($r9, $r10, r5, $r13, $r14, $r16, $r17);

        return $r8;
    }

    private static org.apache.flink.api.common.typeutils.TypeSerializer[] constructReconfiguredFieldSerializers(org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult)
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r0;
        boolean $z0, $z1, $z2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r1;

        r0 := @parameter0: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $z0 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z2);

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        return $r1;
    }

    private static org.apache.flink.api.java.tuple.Tuple2 constructReconfiguredSubclassRegistry(java.util.LinkedHashMap, org.apache.flink.util.LinkedOptionalMap, org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult)
    {
        java.util.LinkedHashMap r0, r3, $r18;
        org.apache.flink.util.LinkedOptionalMap r1;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult r2;
        java.util.Iterator r4, r22, r24;
        org.apache.flink.api.common.typeutils.TypeSerializer r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r6, $r21;
        org.apache.flink.api.java.tuple.Tuple2 $r7;
        java.lang.Object $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r19;
        java.util.List $r20;
        java.util.Map$Entry r23, r25;

        r0 := @parameter0: java.util.LinkedHashMap;

        r1 := @parameter1: org.apache.flink.util.LinkedOptionalMap;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult;

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isIncompatible()>();

        if $z0 != 0 goto label1;

        $z3 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: boolean isCompatibleAfterMigration()>();

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean)>($z4);

        $r18 = virtualinvoke r1.<org.apache.flink.util.LinkedOptionalMap: java.util.LinkedHashMap unwrapOptionals()>();

        r3 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: java.util.LinkedHashMap restoreSerializers(java.util.LinkedHashMap)>($r18);

        $r19 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil$IntermediateCompatibilityResult: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r19);

        r4 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

        $r21 = virtualinvoke r3.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r14 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r14;

        $r15 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = virtualinvoke r0.<java.util.LinkedHashMap: boolean containsKey(java.lang.Object)>($r15);

        if $z2 == 0 goto label4;

        $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>($r16);

     label4:
        goto label3;

     label5:
        $r6 = virtualinvoke r0.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r24 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r8 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = virtualinvoke r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r9);

        r5 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r10;

        if r5 != null goto label7;

        $r11 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r3.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

     label7:
        goto label6;

     label8:
        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: org.apache.flink.api.java.tuple.Tuple2 decomposeSubclassSerializerRegistry(java.util.LinkedHashMap)>(r3);

        return $r7;
    }

    public static void lambda$decomposeSubclassSerializerRegistry$2(java.util.LinkedHashMap, org.apache.flink.api.common.typeutils.TypeSerializer[], java.lang.Class, org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        java.util.LinkedHashMap r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1;
        java.lang.Class r2;
        org.apache.flink.api.common.typeutils.TypeSerializer r3;
        int i0;
        java.lang.Integer $r4;

        r0 := @parameter0: java.util.LinkedHashMap;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter2: java.lang.Class;

        r3 := @parameter3: org.apache.flink.api.common.typeutils.TypeSerializer;

        i0 = virtualinvoke r0.<java.util.LinkedHashMap: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        r1[i0] = r3;

        return;
    }

    public static void lambda$restoreSerializers$1(java.util.LinkedHashMap, java.lang.Object, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r4;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r2;
        org.apache.flink.api.common.typeutils.TypeSerializer $r3, $r5;

        r0 := @parameter0: java.util.LinkedHashMap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        $r3 = interfaceinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        $r4 = virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r5 = (org.apache.flink.api.common.typeutils.TypeSerializer) $r4;

        return;
    }

    public static void lambda$restoreSerializer$0(java.util.ArrayList, java.util.ArrayList, java.lang.String, java.lang.reflect.Field, org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) throws java.lang.RuntimeException
    {
        java.util.ArrayList r0, r1;
        java.lang.String r2;
        java.lang.reflect.Field r3;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r4;
        org.apache.flink.api.common.typeutils.TypeSerializer $r5;
        boolean $z2;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.reflect.Field;

        r4 := @parameter4: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot;

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        if r4 == null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "field serializer snapshots should be present.");

        $r5 = interfaceinvoke r4.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.java.typeutils.runtime.PojoSerializerSnapshot: int VERSION> = 2;

        return;
    }
}
