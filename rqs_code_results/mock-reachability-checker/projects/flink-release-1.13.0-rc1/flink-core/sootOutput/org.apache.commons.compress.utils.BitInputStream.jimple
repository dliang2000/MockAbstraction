public class org.apache.commons.compress.utils.BitInputStream extends java.lang.Object implements java.io.Closeable
{
    private static final int MAXIMUM_CACHE_SIZE;
    private static final long[] MASKS;
    private final org.apache.commons.compress.utils.CountingInputStream in;
    private final java.nio.ByteOrder byteOrder;
    private long bitsCached;
    private int bitsCachedSize;

    public void <init>(java.io.InputStream, java.nio.ByteOrder)
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        java.io.InputStream r1;
        java.nio.ByteOrder r2;
        org.apache.commons.compress.utils.CountingInputStream $r3;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.nio.ByteOrder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = 0L;

        r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize> = 0;

        $r3 = new org.apache.commons.compress.utils.CountingInputStream;

        specialinvoke $r3.<org.apache.commons.compress.utils.CountingInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in> = $r3;

        r0.<org.apache.commons.compress.utils.BitInputStream: java.nio.ByteOrder byteOrder> = r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        org.apache.commons.compress.utils.CountingInputStream $r1;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        $r1 = r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in>;

        virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: void close()>();

        return;
    }

    public void clearBitCache()
    {
        org.apache.commons.compress.utils.BitInputStream r0;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = 0L;

        r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize> = 0;

        return;
    }

    public long readBits(int) throws java.io.IOException
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;
        long $l2, $l3;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 63 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("count must not be negative or greater than 63");

        throw $r1;

     label2:
        $z0 = specialinvoke r0.<org.apache.commons.compress.utils.BitInputStream: boolean ensureCache(int)>(i0);

        if $z0 == 0 goto label3;

        return -1L;

     label3:
        $i1 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        if $i1 >= i0 goto label4;

        $l3 = specialinvoke r0.<org.apache.commons.compress.utils.BitInputStream: long processBitsGreater57(int)>(i0);

        return $l3;

     label4:
        $l2 = specialinvoke r0.<org.apache.commons.compress.utils.BitInputStream: long readCachedBits(int)>(i0);

        return $l2;
    }

    public int bitsCached()
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        $i0 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        return $i0;
    }

    public long bitsAvailable() throws java.io.IOException
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int $i0, $i2;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        long $l1, $l3, $l4, $l5;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        $i0 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $l1 = (long) $i0;

        $r1 = r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in>;

        $i2 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: int available()>();

        $l3 = (long) $i2;

        $l4 = 8L * $l3;

        $l5 = $l1 + $l4;

        return $l5;
    }

    public void alignWithByteBoundary()
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int i0, $i1;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        $i1 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        i0 = $i1 % 8;

        if i0 <= 0 goto label1;

        specialinvoke r0.<org.apache.commons.compress.utils.BitInputStream: long readCachedBits(int)>(i0);

     label1:
        return;
    }

    public long getBytesRead()
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        $r1 = r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in>;

        $l0 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: long getBytesRead()>();

        return $l0;
    }

    private long processBitsGreater57(int) throws java.io.IOException
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int i0, i2, $i4, $i5, $i17, i24;
        long l1, l3, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l18, $l19, $l20, $l21, $l22, l25, l26, l27;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        byte $b6;
        java.nio.ByteOrder $r2, $r3;
        long[] $r4, $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        i0 := @parameter0: int;

        $i4 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        i2 = i0 - $i4;

        i24 = 8 - i2;

        $r1 = r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in>;

        $i5 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: int read()>();

        l3 = (long) $i5;

        $b6 = l3 cmp 0L;

        if $b6 >= 0 goto label1;

        return l3;

     label1:
        $r3 = r0.<org.apache.commons.compress.utils.BitInputStream: java.nio.ByteOrder byteOrder>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r3 != $r2 goto label2;

        $r7 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l16 = $r7[i2];

        l25 = l3 & $l16;

        $l19 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $i17 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $l18 = l25 << $i17;

        $l20 = $l19 | $l18;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l20;

        $l22 = l3 >>> i2;

        $r8 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l21 = $r8[i24];

        l26 = $l22 & $l21;

        goto label3;

     label2:
        $l7 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $l8 = $l7 << i2;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l8;

        $l10 = l3 >>> i24;

        $r4 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l9 = $r4[i2];

        l27 = $l10 & $l9;

        $l11 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $l12 = $l11 | l27;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l12;

        $r5 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l13 = $r5[i24];

        l26 = l3 & $l13;

     label3:
        $l15 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $r6 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l14 = $r6[i0];

        l1 = $l15 & $l14;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = l26;

        r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize> = i24;

        return l1;
    }

    private long readCachedBits(int)
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int i0, $i1, $i2, $i6, $i7;
        java.nio.ByteOrder $r1, $r2;
        long $l3, $l4, $l5, $l8, $l9, $l10, $l11, l12;
        long[] $r3, $r4;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.commons.compress.utils.BitInputStream: java.nio.ByteOrder byteOrder>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r2 != $r1 goto label1;

        $l9 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $r4 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l8 = $r4[i0];

        l12 = $l9 & $l8;

        $l10 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $l11 = $l10 >>> i0;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l11;

        goto label2;

     label1:
        $l3 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $i1 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $i2 = $i1 - i0;

        $l5 = $l3 >> $i2;

        $r3 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $l4 = $r3[i0];

        l12 = $l5 & $l4;

     label2:
        $i6 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $i7 = $i6 - i0;

        r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize> = $i7;

        return l12;
    }

    private boolean ensureCache(int) throws java.io.IOException
    {
        org.apache.commons.compress.utils.BitInputStream r0;
        int i0, $i2, $i3, $i4, $i10, $i11, $i12;
        long l1, $l6, $l7, $l8, $l9, $l13, $l14, $l15;
        org.apache.commons.compress.utils.CountingInputStream $r1;
        byte $b5;
        java.nio.ByteOrder $r2, $r3;

        r0 := @this: org.apache.commons.compress.utils.BitInputStream;

        i0 := @parameter0: int;

     label1:
        $i2 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        if $i2 >= i0 goto label5;

        $i3 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        if $i3 >= 57 goto label5;

        $r1 = r0.<org.apache.commons.compress.utils.BitInputStream: org.apache.commons.compress.utils.CountingInputStream in>;

        $i4 = virtualinvoke $r1.<org.apache.commons.compress.utils.CountingInputStream: int read()>();

        l1 = (long) $i4;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label2;

        return 1;

     label2:
        $r3 = r0.<org.apache.commons.compress.utils.BitInputStream: java.nio.ByteOrder byteOrder>;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r3 != $r2 goto label3;

        $l14 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $i12 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $l13 = l1 << $i12;

        $l15 = $l14 | $l13;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l15;

        goto label4;

     label3:
        $l6 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $l7 = $l6 << 8;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l7;

        $l8 = r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached>;

        $l9 = $l8 | l1;

        r0.<org.apache.commons.compress.utils.BitInputStream: long bitsCached> = $l9;

     label4:
        $i10 = r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize>;

        $i11 = $i10 + 8;

        r0.<org.apache.commons.compress.utils.BitInputStream: int bitsCachedSize> = $i11;

        goto label1;

     label5:
        return 0;
    }

    static void <clinit>()
    {
        long[] $r0, $r1, $r2;
        int $i0, i4;
        long $l1, $l2, $l3;

        <org.apache.commons.compress.utils.BitInputStream: int MAXIMUM_CACHE_SIZE> = 63;

        $r0 = newarray (long)[64];

        <org.apache.commons.compress.utils.BitInputStream: long[] MASKS> = $r0;

        i4 = 1;

     label1:
        if i4 > 63 goto label2;

        $r2 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $r1 = <org.apache.commons.compress.utils.BitInputStream: long[] MASKS>;

        $i0 = i4 - 1;

        $l1 = $r1[$i0];

        $l2 = $l1 << 1;

        $l3 = $l2 + 1L;

        $r2[i4] = $l3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
}
