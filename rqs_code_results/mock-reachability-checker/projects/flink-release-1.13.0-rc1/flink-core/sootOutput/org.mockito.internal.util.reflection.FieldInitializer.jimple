public class org.mockito.internal.util.reflection.FieldInitializer extends java.lang.Object
{
    private final java.lang.Object fieldOwner;
    private final java.lang.reflect.Field field;
    private final org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator instantiator;

    public void <init>(java.lang.Object, java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator $r3;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        $r3 = new org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator;

        specialinvoke $r3.<org.mockito.internal.util.reflection.FieldInitializer$NoArgConstructorInstantiator: void <init>(java.lang.Object,java.lang.reflect.Field)>(r1, r2);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void <init>(java.lang.Object,java.lang.reflect.Field,org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator)>(r1, r2, $r3);

        return;
    }

    public void <init>(java.lang.Object, java.lang.reflect.Field, org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver r3;
        org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator $r4;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 := @parameter2: org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver;

        $r4 = new org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator;

        specialinvoke $r4.<org.mockito.internal.util.reflection.FieldInitializer$ParameterizedConstructorInstantiator: void <init>(java.lang.Object,java.lang.reflect.Field,org.mockito.internal.util.reflection.FieldInitializer$ConstructorArgumentResolver)>(r1, r2, r3);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void <init>(java.lang.Object,java.lang.reflect.Field,org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator)>(r1, r2, $r4);

        return;
    }

    private void <init>(java.lang.Object, java.lang.reflect.Field, org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.Object r1;
        java.lang.reflect.Field r2;
        org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator r3;
        org.mockito.internal.util.reflection.FieldReader $r4;
        boolean $z0;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Field;

        r3 := @parameter2: org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new org.mockito.internal.util.reflection.FieldReader;

        specialinvoke $r4.<org.mockito.internal.util.reflection.FieldReader: void <init>(java.lang.Object,java.lang.reflect.Field)>(r1, r2);

        $z0 = virtualinvoke $r4.<org.mockito.internal.util.reflection.FieldReader: boolean isNull()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void checkNotLocal(java.lang.reflect.Field)>(r2);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void checkNotInner(java.lang.reflect.Field)>(r2);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void checkNotInterface(java.lang.reflect.Field)>(r2);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void checkNotEnum(java.lang.reflect.Field)>(r2);

        specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: void checkNotAbstract(java.lang.reflect.Field)>(r2);

     label1:
        r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.Object fieldOwner> = r1;

        r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field> = r2;

        r0.<org.mockito.internal.util.reflection.FieldInitializer: org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator instantiator> = r3;

        return;
    }

    public org.mockito.internal.util.reflection.FieldInitializationReport initialize()
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        org.mockito.internal.util.reflection.AccessibilityChanger $r3;
        java.lang.reflect.Field $r4, $r5, $r7, $r12, $r16;
        java.lang.Throwable $r6;
        java.lang.IllegalAccessException $r8;
        org.mockito.exceptions.base.MockitoException $r9;
        java.lang.StringBuilder $r10, $r11, $r14, $r15, $r19, $r20;
        java.lang.String $r13, $r18, $r21;
        java.lang.Class $r17;
        org.mockito.internal.util.reflection.FieldInitializationReport r22;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        $r3 = new org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke $r3.<org.mockito.internal.util.reflection.AccessibilityChanger: void <init>()>();

        $r4 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        virtualinvoke $r3.<org.mockito.internal.util.reflection.AccessibilityChanger: void enableAccess(java.lang.reflect.AccessibleObject)>($r4);

     label1:
        r22 = specialinvoke r0.<org.mockito.internal.util.reflection.FieldInitializer: org.mockito.internal.util.reflection.FieldInitializationReport acquireFieldInstance()>();

     label2:
        $r5 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        virtualinvoke $r3.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>($r5);

        return r22;

     label3:
        $r8 := @caughtexception;

        $r9 = new org.mockito.exceptions.base.MockitoException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems initializing field \'");

        $r12 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        $r13 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of type \'");

        $r16 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        $r17 = virtualinvoke $r16.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getSimpleName()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        virtualinvoke $r3.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>($r7);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    private void checkNotLocal(java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.reflect.Field r1;
        java.lang.Class $r2, $r6;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isLocalClass()>();

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the type \'");

        $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is a local class.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        return;
    }

    private void checkNotInner(java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.reflect.Field r1;
        java.lang.Class r2;
        boolean $z0, $z1;
        int $i0;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8;
        java.lang.String $r6, $r9;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.reflect.Field;

        r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isMemberClass()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r2.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label1;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the type \'");

        $r6 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is an inner non static class.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    private void checkNotInterface(java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.reflect.Field r1;
        java.lang.Class $r2, $r6;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the type \'");

        $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is an interface.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        return;
    }

    private void checkNotAbstract(java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.reflect.Field r1;
        java.lang.Class $r2, $r6;
        int $i0;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the type \'");

        $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is an abstract class.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        return;
    }

    private void checkNotEnum(java.lang.reflect.Field)
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.reflect.Field r1;
        java.lang.Class $r2, $r6;
        boolean $z0;
        org.mockito.exceptions.base.MockitoException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        r1 := @parameter0: java.lang.reflect.Field;

        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label1;

        $r3 = new org.mockito.exceptions.base.MockitoException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the type \'");

        $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is an enum.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label1:
        return;
    }

    private org.mockito.internal.util.reflection.FieldInitializationReport acquireFieldInstance() throws java.lang.IllegalAccessException
    {
        org.mockito.internal.util.reflection.FieldInitializer r0;
        java.lang.Object r1, $r2;
        java.lang.reflect.Field $r3;
        org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator $r4;
        org.mockito.internal.util.reflection.FieldInitializationReport $r5, $r6;

        r0 := @this: org.mockito.internal.util.reflection.FieldInitializer;

        $r3 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.reflect.Field field>;

        $r2 = r0.<org.mockito.internal.util.reflection.FieldInitializer: java.lang.Object fieldOwner>;

        r1 = virtualinvoke $r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r2);

        if r1 == null goto label1;

        $r6 = new org.mockito.internal.util.reflection.FieldInitializationReport;

        specialinvoke $r6.<org.mockito.internal.util.reflection.FieldInitializationReport: void <init>(java.lang.Object,boolean,boolean)>(r1, 0, 0);

        return $r6;

     label1:
        $r4 = r0.<org.mockito.internal.util.reflection.FieldInitializer: org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator instantiator>;

        $r5 = interfaceinvoke $r4.<org.mockito.internal.util.reflection.FieldInitializer$ConstructorInstantiator: org.mockito.internal.util.reflection.FieldInitializationReport instantiate()>();

        return $r5;
    }
}
