final class org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode extends org.apache.flink.shaded.guava18.com.google.common.hash.HashCode implements java.io.Serializable
{
    final byte[] bytes;
    private static final long serialVersionUID;

    void <init>(byte[])
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: void <init>()>();

        $r2 = staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (byte[]) $r2;

        r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes> = $r3;

        return;
    }

    public int bits()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        $i1 = $i0 * 8;

        return $i1;
    }

    public byte[] asBytes()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int asInt()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1, $r3, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i5, $i9, $i10, $i13, $i14, $i15;
        java.lang.Object[] $r2;
        java.lang.Integer $r4;
        byte $b2, $b3, $b7, $b11;
        short $s4, $s6, $s8, $s12;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        if $i0 < 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i1 = lengthof $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[0] = $r4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "HashCode#asInt() requires >= 4 bytes (it only has %s bytes).", $r2);

        $r5 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b2 = $r5[0];

        $s6 = $b2 & 255;

        $r6 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b3 = $r6[1];

        $s4 = $b3 & 255;

        $i5 = $s4 << 8;

        $i10 = $s6 | $i5;

        $r7 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b7 = $r7[2];

        $s8 = $b7 & 255;

        $i9 = $s8 << 16;

        $i14 = $i10 | $i9;

        $r8 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b11 = $r8[3];

        $s12 = $b11 & 255;

        $i13 = $s12 << 24;

        $i15 = $i14 | $i13;

        return $i15;
    }

    public long asLong()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1, $r3;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Integer $r4;
        long $l2;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i0 = lengthof $r1;

        if $i0 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i1 = lengthof $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[0] = $r4;

        staticinvoke <org.apache.flink.shaded.guava18.com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "HashCode#asLong() requires >= 8 bytes (it only has %s bytes).", $r2);

        $l2 = virtualinvoke r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: long padToLong()>();

        return $l2;
    }

    public long padToLong()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1, $r2, $r3;
        byte $b0, $b4;
        short $s1;
        int $i2, $i3, $i6, i10;
        long $l5, $l7, $l8, l9;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b0 = $r1[0];

        $s1 = $b0 & 255;

        l9 = (long) $s1;

        i10 = 1;

     label1:
        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $i2 = lengthof $r2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, 8);

        if i10 >= $i3 goto label2;

        $r3 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $b4 = $r3[i10];

        $l5 = (long) $b4;

        $l7 = $l5 & 255L;

        $i6 = i10 * 8;

        $l8 = $l7 << $i6;

        l9 = l9 | $l8;

        i10 = i10 + 1;

        goto label1;

     label2:
        return l9;
    }

    void writeBytesToImpl(byte[], int, int)
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] r1, $r2;
        int i0, i1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, i0, i1);

        return;
    }

    byte[] getBytesInternal()
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        byte[] $r1;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        $r1 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        return $r1;
    }

    boolean equalsSameBits(org.apache.flink.shaded.guava18.com.google.common.hash.HashCode)
    {
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode r0;
        org.apache.flink.shaded.guava18.com.google.common.hash.HashCode r1;
        byte[] $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode;

        r1 := @parameter0: org.apache.flink.shaded.guava18.com.google.common.hash.HashCode;

        $r2 = r0.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: byte[] bytes>;

        $r3 = virtualinvoke r1.<org.apache.flink.shaded.guava18.com.google.common.hash.HashCode: byte[] getBytesInternal()>();

        $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>($r2, $r3);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.guava18.com.google.common.hash.HashCode$BytesHashCode: long serialVersionUID> = 0L;

        return;
    }
}
