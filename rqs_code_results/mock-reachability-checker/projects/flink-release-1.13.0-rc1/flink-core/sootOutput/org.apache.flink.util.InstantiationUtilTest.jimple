public class org.apache.flink.util.InstantiationUtilTest extends org.apache.flink.util.TestLogger
{
    public static org.junit.rules.TemporaryFolder temporaryFolder;
    private static final java.lang.String PROXY_DEFINITION_FORMAT;

    public void <init>()
    {
        org.apache.flink.util.InstantiationUtilTest r0;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        specialinvoke r0.<org.apache.flink.util.TestLogger: void <init>()>();

        return;
    }

    public void testResolveProxyClass() throws java.lang.Exception
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        java.net.URLClassLoader r3;
        java.lang.reflect.InvocationHandler r4;
        java.lang.Object r5, r7, $r11;
        byte[] r6;
        java.lang.Class $r10, r18;
        java.lang.Class[] $r12;
        java.lang.Throwable $r13, $r14, $r15, r17;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        r3 = specialinvoke r0.<org.apache.flink.util.InstantiationUtilTest: java.net.URLClassLoader createClassLoader(java.lang.String,java.lang.String)>("UserDefinedInterface", "UserProxy");

        r17 = null;

     label01:
        r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("UserDefinedInterface", 0, r3);

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("UserProxy", 0, r3);

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.Object newInstance()>();

        r4 = (java.lang.reflect.InvocationHandler) $r11;

        $r12 = newarray (java.lang.Class)[1];

        $r12[0] = r18;

        r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(r3, $r12, r4);

        r6 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeObject(java.lang.Object)>(r5);

        r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeObject(byte[],java.lang.ClassLoader)>(r6, r3);

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r7);

     label02:
        if r3 == null goto label12;

        goto label03;

     label03:
        virtualinvoke r3.<java.net.URLClassLoader: void close()>();

        goto label12;

     label04:
        $r13 := @caughtexception;

        r17 = $r13;

        throw $r13;

     label05:
        $r15 := @caughtexception;

     label06:
        if r3 == null goto label11;

        if r17 == null goto label10;

     label07:
        virtualinvoke r3.<java.net.URLClassLoader: void close()>();

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        virtualinvoke r17.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label11;

     label10:
        virtualinvoke r3.<java.net.URLClassLoader: void close()>();

     label11:
        throw $r15;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label06 with label05;
    }

    private java.net.URLClassLoader createClassLoader(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        java.lang.String r1, r2, $r7, $r9;
        org.junit.rules.TemporaryFolder $r3;
        java.io.File $r4;
        org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder $r5, $r8, $r10;
        java.lang.Object[] $r6;
        java.net.URLClassLoader $r11;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.flink.util.InstantiationUtilTest: org.junit.rules.TemporaryFolder temporaryFolder>;

        $r4 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>();

        $r5 = staticinvoke <org.apache.flink.testutils.ClassLoaderUtils: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder withRoot(java.io.File)>($r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("interface %s { void test();}", $r6);

        $r8 = virtualinvoke $r5.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder addClass(java.lang.String,java.lang.String)>(r1, $r7);

        $r9 = specialinvoke r0.<org.apache.flink.util.InstantiationUtilTest: java.lang.String createProxyDefinition(java.lang.String)>(r2);

        $r10 = virtualinvoke $r8.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder addClass(java.lang.String,java.lang.String)>(r2, $r9);

        $r11 = virtualinvoke $r10.<org.apache.flink.testutils.ClassLoaderUtils$ClassLoaderBuilder: java.net.URLClassLoader build()>();

        return $r11;
    }

    private java.lang.String createProxyDefinition(java.lang.String)
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        java.lang.String r1, $r3;
        java.lang.Object[] $r2;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.io.Serializable;public class %s implements InvocationHandler, Serializable {\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    return null;\n  }\n}", $r2);

        return $r3;
    }

    public void testInstantiationOfStringValue()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        org.apache.flink.types.StringValue r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;", null);

        r1 = (org.apache.flink.types.StringValue) $r2;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        return;
    }

    public void testInstantiationOfStringValueAndCastToValue()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        org.apache.flink.types.StringValue r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $r2 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object instantiate(java.lang.Class,java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;", class "Lorg/apache/flink/types/Value;");

        r1 = (org.apache.flink.types.StringValue) $r2;

        staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r1);

        return;
    }

    public void testHasNullaryConstructor()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean hasPublicNullaryConstructor(java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testClassIsProper()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isProperClass(java.lang.Class)>(class "Lorg/apache/flink/types/StringValue;");

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testClassIsNotProper()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        boolean $z0;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $z0 = staticinvoke <org.apache.flink.util.InstantiationUtil: boolean isProperClass(java.lang.Class)>(class "Lorg/apache/flink/types/Value;");

        staticinvoke <org.junit.Assert: void assertFalse(boolean)>($z0);

        return;
    }

    public void testCheckForInstantiationOfPrivateClass()
    {
        org.apache.flink.util.InstantiationUtilTest r0;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        staticinvoke <org.apache.flink.util.InstantiationUtil: void checkForInstantiation(java.lang.Class)>(class "Lorg/apache/flink/util/InstantiationUtilTest$TestClass;");

        return;
    }

    public void testSerializationToByteArray() throws java.io.IOException
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        byte[] r3;
        org.apache.flink.types.DoubleValue r4, $r5;
        double $d0;
        org.apache.flink.api.common.typeutils.base.DoubleValueSerializer $r6;
        java.lang.Object $r7;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $r5 = new org.apache.flink.types.DoubleValue;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        specialinvoke $r5.<org.apache.flink.types.DoubleValue: void <init>(double)>($d0);

        $r6 = new org.apache.flink.api.common.typeutils.base.DoubleValueSerializer;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.base.DoubleValueSerializer: void <init>()>();

        r3 = staticinvoke <org.apache.flink.util.InstantiationUtil: byte[] serializeToByteArray(org.apache.flink.api.common.typeutils.TypeSerializer,java.lang.Object)>($r6, $r5);

        $r7 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object deserializeFromByteArray(org.apache.flink.api.common.typeutils.TypeSerializer,byte[])>($r6, r3);

        r4 = (org.apache.flink.types.DoubleValue) $r7;

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Serialized record is not equal after serialization.", $r5, r4);

        return;
    }

    public void testWriteToConfigFailingSerialization()
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        org.apache.flink.configuration.Configuration $r3;
        org.apache.flink.util.InstantiationUtilTest$TestClassWriteFails $r4;
        java.lang.Exception $r7, $r8, $r11, $r13;
        java.lang.String $r9;
        java.lang.ClassNotFoundException $r10;
        org.apache.flink.util.InstantiationUtilTest$TestException $r12, $r14;
        org.apache.flink.util.InstantiationUtilTest$TestClassReadFails $r18;
        org.apache.flink.util.InstantiationUtilTest$TestClassReadFailsCNF $r19;
        java.lang.Class $r20, $r24;
        java.lang.ClassLoader $r21, $r25;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

     label01:
        $r3 = new org.apache.flink.configuration.Configuration;

        specialinvoke $r3.<org.apache.flink.configuration.Configuration: void <init>()>();

     label02:
        $r4 = new org.apache.flink.util.InstantiationUtilTest$TestClassWriteFails;

        specialinvoke $r4.<org.apache.flink.util.InstantiationUtilTest$TestClassWriteFails: void <init>(org.apache.flink.util.InstantiationUtilTest$1)>(null);

        staticinvoke <org.apache.flink.util.InstantiationUtil: void writeObjectToConfig(java.lang.Object,org.apache.flink.configuration.Configuration,java.lang.String)>($r4, $r3, "irgnored");

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label03:
        goto label06;

     label04:
        $r12 := @caughtexception;

        goto label06;

     label05:
        $r7 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Wrong exception type - exception not properly forwarded");

     label06:
        $r18 = new org.apache.flink.util.InstantiationUtilTest$TestClassReadFails;

        specialinvoke $r18.<org.apache.flink.util.InstantiationUtilTest$TestClassReadFails: void <init>(org.apache.flink.util.InstantiationUtilTest$1)>(null);

        staticinvoke <org.apache.flink.util.InstantiationUtil: void writeObjectToConfig(java.lang.Object,org.apache.flink.configuration.Configuration,java.lang.String)>($r18, $r3, "testkey1");

        $r19 = new org.apache.flink.util.InstantiationUtilTest$TestClassReadFailsCNF;

        specialinvoke $r19.<org.apache.flink.util.InstantiationUtilTest$TestClassReadFailsCNF: void <init>(org.apache.flink.util.InstantiationUtilTest$1)>(null);

        staticinvoke <org.apache.flink.util.InstantiationUtil: void writeObjectToConfig(java.lang.Object,org.apache.flink.configuration.Configuration,java.lang.String)>($r19, $r3, "testkey2");

     label07:
        $r20 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object readObjectFromConfig(org.apache.flink.configuration.Configuration,java.lang.String,java.lang.ClassLoader)>($r3, "testkey1", $r21);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        goto label11;

     label10:
        $r13 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Wrong exception type - exception not properly forwarded");

     label11:
        $r24 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.apache.flink.util.InstantiationUtil: java.lang.Object readObjectFromConfig(org.apache.flink.configuration.Configuration,java.lang.String,java.lang.ClassLoader)>($r3, "testkey2", $r25);

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("should throw an exception");

     label12:
        goto label15;

     label13:
        $r10 := @caughtexception;

        goto label15;

     label14:
        $r11 := @caughtexception;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Wrong exception type - exception not properly forwarded");

     label15:
        goto label17;

     label16:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Exception: void printStackTrace()>();

        $r9 = virtualinvoke $r8.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r9);

     label17:
        return;

        catch org.apache.flink.util.InstantiationUtilTest$TestException from label02 to label03 with label04;
        catch java.lang.Exception from label02 to label03 with label05;
        catch org.apache.flink.util.InstantiationUtilTest$TestException from label07 to label08 with label09;
        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.ClassNotFoundException from label11 to label12 with label13;
        catch java.lang.Exception from label11 to label12 with label14;
        catch java.lang.Exception from label01 to label15 with label16;
    }

    public void testCopyWritable() throws java.lang.Exception
    {
        org.apache.flink.util.InstantiationUtilTest r0;
        org.apache.flink.util.InstantiationUtilTest$WritableType r2, $r3;
        org.apache.flink.core.io.IOReadableWritable $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.flink.util.InstantiationUtilTest;

        $r3 = new org.apache.flink.util.InstantiationUtilTest$WritableType;

        specialinvoke $r3.<org.apache.flink.util.InstantiationUtilTest$WritableType: void <init>()>();

        $r4 = staticinvoke <org.apache.flink.util.InstantiationUtil: org.apache.flink.core.io.IOReadableWritable createCopyWritable(org.apache.flink.core.io.IOReadableWritable)>($r3);

        r2 = (org.apache.flink.util.InstantiationUtilTest$WritableType) $r4;

        if $r3 == r2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $z0 = virtualinvoke $r3.<org.apache.flink.util.InstantiationUtilTest$WritableType: boolean equals(java.lang.Object)>(r2);

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    static void <clinit>()
    {
        org.junit.rules.TemporaryFolder $r0;

        <org.apache.flink.util.InstantiationUtilTest: java.lang.String PROXY_DEFINITION_FORMAT> = "import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.io.Serializable;public class %s implements InvocationHandler, Serializable {\n\n  @Override\n  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    return null;\n  }\n}";

        $r0 = new org.junit.rules.TemporaryFolder;

        specialinvoke $r0.<org.junit.rules.TemporaryFolder: void <init>()>();

        <org.apache.flink.util.InstantiationUtilTest: org.junit.rules.TemporaryFolder temporaryFolder> = $r0;

        return;
    }
}
