public final class javassist.bytecode.ClassFile extends java.lang.Object
{
    int major;
    int minor;
    javassist.bytecode.ConstPool constPool;
    int thisClass;
    int accessFlags;
    int superClass;
    int[] interfaces;
    java.util.List fields;
    java.util.List methods;
    java.util.List attributes;
    java.lang.String thisclassname;
    java.lang.String[] cachedInterfaces;
    java.lang.String cachedSuperclass;
    public static final int JAVA_1;
    public static final int JAVA_2;
    public static final int JAVA_3;
    public static final int JAVA_4;
    public static final int JAVA_5;
    public static final int JAVA_6;
    public static final int JAVA_7;
    public static final int JAVA_8;
    public static final int JAVA_9;
    public static final int JAVA_10;
    public static final int JAVA_11;
    public static final int MAJOR_VERSION;

    public void <init>(java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.ClassFile r0;
        java.io.DataInputStream r1;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.io.DataInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<javassist.bytecode.ClassFile: void read(java.io.DataInputStream)>(r1);

        return;
    }

    public void <init>(boolean, java.lang.String, java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        boolean z0;
        java.lang.String r1, r2, $r9, $r12;
        int $i0, $i1;
        javassist.bytecode.ConstPool $r3, $r4, $r11;
        java.util.ArrayList $r5, $r6, $r7;
        javassist.bytecode.SourceFileAttribute $r8;
        java.util.List $r10;

        r0 := @this: javassist.bytecode.ClassFile;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = <javassist.bytecode.ClassFile: int MAJOR_VERSION>;

        r0.<javassist.bytecode.ClassFile: int major> = $i0;

        r0.<javassist.bytecode.ClassFile: int minor> = 0;

        $r3 = new javassist.bytecode.ConstPool;

        specialinvoke $r3.<javassist.bytecode.ConstPool: void <init>(java.lang.String)>(r1);

        r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool> = $r3;

        $r4 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i1 = virtualinvoke $r4.<javassist.bytecode.ConstPool: int getThisClassInfo()>();

        r0.<javassist.bytecode.ClassFile: int thisClass> = $i1;

        if z0 == 0 goto label1;

        r0.<javassist.bytecode.ClassFile: int accessFlags> = 1536;

        goto label2;

     label1:
        r0.<javassist.bytecode.ClassFile: int accessFlags> = 32;

     label2:
        specialinvoke r0.<javassist.bytecode.ClassFile: void initSuperclass(java.lang.String)>(r2);

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = null;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List fields> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List methods> = $r6;

        r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname> = r1;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List attributes> = $r7;

        $r10 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        $r8 = new javassist.bytecode.SourceFileAttribute;

        $r11 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $r9 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        $r12 = staticinvoke <javassist.bytecode.ClassFile: java.lang.String getSourcefileName(java.lang.String)>($r9);

        specialinvoke $r8.<javassist.bytecode.SourceFileAttribute: void <init>(javassist.bytecode.ConstPool,java.lang.String)>($r11, $r12);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r8);

        return;
    }

    private void initSuperclass(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1;
        javassist.bytecode.ConstPool $r2, $r3;
        int $i0, $i1;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r3 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i1 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>(r1);

        r0.<javassist.bytecode.ClassFile: int superClass> = $i1;

        r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass> = r1;

        goto label2;

     label1:
        $r2 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i0 = virtualinvoke $r2.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>("java.lang.Object");

        r0.<javassist.bytecode.ClassFile: int superClass> = $i0;

        r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass> = "java.lang.Object";

     label2:
        return;
    }

    private static java.lang.String getSourcefileName(java.lang.String)
    {
        java.lang.String r0, $r2, $r5;
        java.lang.StringBuilder $r1, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^.*\\.", "");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".java");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void compact()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.ConstPool r1;
        java.util.List $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7;
        java.util.Iterator r8, r10;
        javassist.bytecode.MethodInfo r9;
        javassist.bytecode.FieldInfo r11;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 = specialinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool compact0()>();

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (javassist.bytecode.MethodInfo) $r7;

        virtualinvoke r9.<javassist.bytecode.MethodInfo: void compact(javassist.bytecode.ConstPool)>(r1);

        goto label1;

     label2:
        $r3 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r10 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (javassist.bytecode.FieldInfo) $r6;

        virtualinvoke r11.<javassist.bytecode.FieldInfo: void compact(javassist.bytecode.ConstPool)>(r1);

        goto label3;

     label4:
        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        $r5 = staticinvoke <javassist.bytecode.AttributeInfo: java.util.List copyAll(java.util.List,javassist.bytecode.ConstPool)>($r4, r1);

        r0.<javassist.bytecode.ClassFile: java.util.List attributes> = $r5;

        r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool> = r1;

        return;
    }

    private javassist.bytecode.ConstPool compact0()
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r2, $r4, $r10, $r11;
        javassist.bytecode.ConstPool $r3, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5;
        int[] $r5, $r6, $r7, $r9;

        r0 := @this: javassist.bytecode.ClassFile;

        $r3 = new javassist.bytecode.ConstPool;

        $r4 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        specialinvoke $r3.<javassist.bytecode.ConstPool: void <init>(java.lang.String)>($r4);

        $i0 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int getThisClassInfo()>();

        r0.<javassist.bytecode.ClassFile: int thisClass> = $i0;

        r2 = virtualinvoke r0.<javassist.bytecode.ClassFile: java.lang.String getSuperclass()>();

        if r2 == null goto label1;

        $r11 = virtualinvoke r0.<javassist.bytecode.ClassFile: java.lang.String getSuperclass()>();

        $i4 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r11);

        r0.<javassist.bytecode.ClassFile: int superClass> = $i4;

     label1:
        $r5 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        if $r5 == null goto label3;

        i5 = 0;

     label2:
        $r6 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i1 = lengthof $r6;

        if i5 >= $i1 goto label3;

        $r9 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $r8 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $r7 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i2 = $r7[i5];

        $r10 = virtualinvoke $r8.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>($i2);

        $i3 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r10);

        $r9[i5] = $i3;

        i5 = i5 + 1;

        goto label2;

     label3:
        return $r3;
    }

    public void prune()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.ConstPool r1;
        java.util.ArrayList $r3;
        java.util.List $r4, $r5;
        boolean $z0, $z4;
        java.lang.Object $r6, $r7;
        javassist.bytecode.AttributeInfo r8, r9, r10, r11, r12, r13;
        java.util.Iterator r14, r16;
        javassist.bytecode.MethodInfo r15;
        javassist.bytecode.FieldInfo r17;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 = specialinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool compact0()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r8 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeInvisibleAnnotations");

        if r8 == null goto label1;

        r9 = virtualinvoke r8.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r9);

     label1:
        r10 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("RuntimeVisibleAnnotations");

        if r10 == null goto label2;

        r11 = virtualinvoke r10.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r11);

     label2:
        r12 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("Signature");

        if r12 == null goto label3;

        r13 = virtualinvoke r12.<javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo copy(javassist.bytecode.ConstPool,java.util.Map)>(r1, null);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r13);

     label3:
        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r14 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label5;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (javassist.bytecode.MethodInfo) $r7;

        virtualinvoke r15.<javassist.bytecode.MethodInfo: void prune(javassist.bytecode.ConstPool)>(r1);

        goto label4;

     label5:
        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r16 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (javassist.bytecode.FieldInfo) $r6;

        virtualinvoke r17.<javassist.bytecode.FieldInfo: void prune(javassist.bytecode.ConstPool)>(r1);

        goto label6;

     label7:
        r0.<javassist.bytecode.ClassFile: java.util.List attributes> = $r3;

        r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool> = r1;

        return;
    }

    public javassist.bytecode.ConstPool getConstPool()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.ConstPool $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        return $r1;
    }

    public boolean isInterface()
    {
        javassist.bytecode.ClassFile r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int accessFlags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFinal()
    {
        javassist.bytecode.ClassFile r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int accessFlags>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAbstract()
    {
        javassist.bytecode.ClassFile r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int accessFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getAccessFlags()
    {
        javassist.bytecode.ClassFile r0;
        int $i0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int accessFlags>;

        return $i0;
    }

    public void setAccessFlags(int)
    {
        javassist.bytecode.ClassFile r0;
        int $i0, i1;

        r0 := @this: javassist.bytecode.ClassFile;

        i1 := @parameter0: int;

        $i0 = i1 & 512;

        if $i0 != 0 goto label1;

        i1 = i1 | 32;

     label1:
        r0.<javassist.bytecode.ClassFile: int accessFlags> = i1;

        return;
    }

    public int getInnerAccessFlags()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.InnerClassesAttribute r1;
        java.lang.String r2, $r4;
        int i0, $i1, i2;
        javassist.bytecode.AttributeInfo $r3;
        boolean $z0;

        r0 := @this: javassist.bytecode.ClassFile;

        $r3 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("InnerClasses");

        r1 = (javassist.bytecode.InnerClassesAttribute) $r3;

        if r1 != null goto label1;

        return -1;

     label1:
        r2 = virtualinvoke r0.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        i0 = virtualinvoke r1.<javassist.bytecode.InnerClassesAttribute: int tableLength()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $r4 = virtualinvoke r1.<javassist.bytecode.InnerClassesAttribute: java.lang.String innerClass(int)>(i2);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke r1.<javassist.bytecode.InnerClassesAttribute: int accessFlags(int)>(i2);

        return $i1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return -1;
    }

    public java.lang.String getName()
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1, $r2;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        virtualinvoke r0.<javassist.bytecode.ClassFile: void renameClass(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    public java.lang.String getSuperclass()
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String $r1, $r2, $r4;
        int $i0;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass>;

        if $r1 != null goto label1;

        $r3 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i0 = r0.<javassist.bytecode.ClassFile: int superClass>;

        $r4 = virtualinvoke $r3.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>($i0);

        r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass> = $r4;

     label1:
        $r2 = r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass>;

        return $r2;
    }

    public int getSuperclassId()
    {
        javassist.bytecode.ClassFile r0;
        int $i0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int superClass>;

        return $i0;
    }

    public void setSuperclass(java.lang.String) throws javassist.CannotCompileException
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.MethodInfo r1;
        javassist.bytecode.ConstPool $r2;
        int $i0;
        java.util.List $r3;
        java.lang.Object $r4;
        javassist.bytecode.BadBytecode $r5;
        javassist.CannotCompileException $r6;
        java.lang.String r7;
        java.util.Iterator r8;
        boolean $z0;

        r0 := @this: javassist.bytecode.ClassFile;

        r7 := @parameter0: java.lang.String;

        if r7 != null goto label1;

        r7 = "java.lang.Object";

     label1:
        $r2 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i0 = virtualinvoke $r2.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>(r7);

        r0.<javassist.bytecode.ClassFile: int superClass> = $i0;

        $r3 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r1 = (javassist.bytecode.MethodInfo) $r4;

        virtualinvoke r1.<javassist.bytecode.MethodInfo: void setSuperclass(java.lang.String)>(r7);

        goto label2;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new javassist.CannotCompileException;

        specialinvoke $r6.<javassist.CannotCompileException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label5:
        r0.<javassist.bytecode.ClassFile: java.lang.String cachedSuperclass> = r7;

        return;

        catch javassist.bytecode.BadBytecode from label1 to label3 with label4;
    }

    public final void renameClass(java.lang.String, java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r7, $r10, r12, r13, r14, r15, r18, r21;
        javassist.bytecode.ConstPool $r2;
        java.util.List $r3, $r4, $r5, $r8, $r11;
        java.lang.Object $r6, $r9;
        java.util.Iterator r16, r19;
        javassist.bytecode.MethodInfo r17;
        javassist.bytecode.FieldInfo r20;

        r0 := @this: javassist.bytecode.ClassFile;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label2;

        r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname> = r13;

     label2:
        r14 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(java.lang.String)>(r12);

        r15 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(java.lang.String)>(r13);

        $r2 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        virtualinvoke $r2.<javassist.bytecode.ConstPool: void renameClass(java.lang.String,java.lang.String)>(r14, r15);

        $r3 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.lang.String,java.lang.String)>($r3, r14, r15);

        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r16 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (javassist.bytecode.MethodInfo) $r9;

        r18 = virtualinvoke r17.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r10 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.lang.String,java.lang.String)>(r18, r14, r15);

        virtualinvoke r17.<javassist.bytecode.MethodInfo: void setDescriptor(java.lang.String)>($r10);

        $r11 = virtualinvoke r17.<javassist.bytecode.MethodInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.lang.String,java.lang.String)>($r11, r14, r15);

        goto label3;

     label4:
        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r19 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r6 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (javassist.bytecode.FieldInfo) $r6;

        r21 = virtualinvoke r20.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        $r7 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.lang.String,java.lang.String)>(r21, r14, r15);

        virtualinvoke r20.<javassist.bytecode.FieldInfo: void setDescriptor(java.lang.String)>($r7);

        $r8 = virtualinvoke r20.<javassist.bytecode.FieldInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.lang.String,java.lang.String)>($r8, r14, r15);

        goto label5;

     label6:
        return;
    }

    public final void renameClass(java.util.Map)
    {
        javassist.bytecode.ClassFile r0;
        java.util.Map r1;
        java.lang.String r2, $r3, $r4, $r11, $r14, $r16, r19, r22;
        java.lang.Object $r5, $r10, $r13;
        javassist.bytecode.ConstPool $r6;
        java.util.List $r7, $r8, $r9, $r12, $r15;
        boolean $z0, $z1;
        java.util.Iterator r17, r20;
        javassist.bytecode.MethodInfo r18;
        javassist.bytecode.FieldInfo r21;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.util.Map;

        $r3 = r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname>;

        $r4 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJvmName(java.lang.String)>($r3);

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (java.lang.String) $r5;

        if r2 == null goto label1;

        $r16 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String toJavaName(java.lang.String)>(r2);

        r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname> = $r16;

     label1:
        $r6 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        virtualinvoke $r6.<javassist.bytecode.ConstPool: void renameClass(java.util.Map)>(r1);

        $r7 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.util.Map)>($r7, r1);

        $r8 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r17 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r13 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (javassist.bytecode.MethodInfo) $r13;

        r19 = virtualinvoke r18.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r14 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.util.Map)>(r19, r1);

        virtualinvoke r18.<javassist.bytecode.MethodInfo: void setDescriptor(java.lang.String)>($r14);

        $r15 = virtualinvoke r18.<javassist.bytecode.MethodInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.util.Map)>($r15, r1);

        goto label2;

     label3:
        $r9 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r20 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (javassist.bytecode.FieldInfo) $r10;

        r22 = virtualinvoke r21.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        $r11 = staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.util.Map)>(r22, r1);

        virtualinvoke r21.<javassist.bytecode.FieldInfo: void setDescriptor(java.lang.String)>($r11);

        $r12 = virtualinvoke r21.<javassist.bytecode.FieldInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void renameClass(java.util.List,java.util.Map)>($r12, r1);

        goto label4;

     label5:
        return;
    }

    public final void getRefClasses(java.util.Map)
    {
        javassist.bytecode.ClassFile r0;
        java.util.Map r1;
        javassist.bytecode.ConstPool $r2;
        java.util.List $r3, $r4, $r5, $r8, $r11;
        boolean $z0, $z1;
        java.lang.Object $r6, $r9;
        java.util.Iterator r12, r15;
        javassist.bytecode.MethodInfo r13;
        java.lang.String r14, r17;
        javassist.bytecode.FieldInfo r16;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.util.Map;

        $r2 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        virtualinvoke $r2.<javassist.bytecode.ConstPool: void renameClass(java.util.Map)>(r1);

        $r3 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void getRefClasses(java.util.List,java.util.Map)>($r3, r1);

        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r12 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (javassist.bytecode.MethodInfo) $r9;

        r14 = virtualinvoke r13.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.util.Map)>(r14, r1);

        $r11 = virtualinvoke r13.<javassist.bytecode.MethodInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void getRefClasses(java.util.List,java.util.Map)>($r11, r1);

        goto label1;

     label2:
        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r15 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (javassist.bytecode.FieldInfo) $r6;

        r17 = virtualinvoke r16.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        staticinvoke <javassist.bytecode.Descriptor: java.lang.String rename(java.lang.String,java.util.Map)>(r17, r1);

        $r8 = virtualinvoke r16.<javassist.bytecode.FieldInfo: java.util.List getAttributes()>();

        staticinvoke <javassist.bytecode.AttributeInfo: void getRefClasses(java.util.List,java.util.Map)>($r8, r1);

        goto label3;

     label4:
        return;
    }

    public java.lang.String[] getInterfaces()
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String[] r1, $r2, $r9, r10;
        int[] $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, i3;
        javassist.bytecode.ConstPool $r7;
        java.lang.String $r8;

        r0 := @this: javassist.bytecode.ClassFile;

        $r2 = r0.<javassist.bytecode.ClassFile: java.lang.String[] cachedInterfaces>;

        if $r2 == null goto label1;

        $r9 = r0.<javassist.bytecode.ClassFile: java.lang.String[] cachedInterfaces>;

        return $r9;

     label1:
        $r3 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        if $r3 != null goto label2;

        r10 = newarray (java.lang.String)[0];

        goto label5;

     label2:
        $r4 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i0 = lengthof $r4;

        r1 = newarray (java.lang.String)[$i0];

        i3 = 0;

     label3:
        $r5 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i1 = lengthof $r5;

        if i3 >= $i1 goto label4;

        $r7 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $r6 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i2 = $r6[i3];

        $r8 = virtualinvoke $r7.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>($i2);

        r1[i3] = $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        r10 = r1;

     label5:
        r0.<javassist.bytecode.ClassFile: java.lang.String[] cachedInterfaces> = r10;

        return r10;
    }

    public void setInterfaces(java.lang.String[])
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String[] r1;
        int $i0, $i1, $i2, i3;
        int[] $r2, $r5;
        java.lang.String $r3;
        javassist.bytecode.ConstPool $r4;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String[];

        r0.<javassist.bytecode.ClassFile: java.lang.String[] cachedInterfaces> = null;

        if r1 == null goto label2;

        $i0 = lengthof r1;

        $r2 = newarray (int)[$i0];

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = $r2;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r5 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $r4 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $r3 = r1[i3];

        $i2 = virtualinvoke $r4.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>($r3);

        $r5[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public void addInterface(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1;
        int i0, i1, $i2;
        int[] r2, $r4, $r5, $r6, $r7, $r8;
        javassist.bytecode.ConstPool $r3;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        r0.<javassist.bytecode.ClassFile: java.lang.String[] cachedInterfaces> = null;

        $r3 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        i0 = virtualinvoke $r3.<javassist.bytecode.ConstPool: int addClassInfo(java.lang.String)>(r1);

        $r4 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        if $r4 != null goto label1;

        $r7 = newarray (int)[1];

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = $r7;

        $r8 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $r8[0] = i0;

        goto label2;

     label1:
        $r5 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        i1 = lengthof $r5;

        $i2 = i1 + 1;

        r2 = newarray (int)[$i2];

        $r6 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, i1);

        r2[i1] = i0;

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = r2;

     label2:
        return;
    }

    public java.util.List getFields()
    {
        javassist.bytecode.ClassFile r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        return $r1;
    }

    public void addField(javassist.bytecode.FieldInfo) throws javassist.bytecode.DuplicateMemberException
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.FieldInfo r1;
        java.lang.String $r2, $r3;
        java.util.List $r4;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.FieldInfo;

        $r2 = virtualinvoke r1.<javassist.bytecode.FieldInfo: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<javassist.bytecode.FieldInfo: java.lang.String getDescriptor()>();

        specialinvoke r0.<javassist.bytecode.ClassFile: void testExistingField(java.lang.String,java.lang.String)>($r2, $r3);

        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void addField2(javassist.bytecode.FieldInfo)
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.FieldInfo r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.FieldInfo;

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void testExistingField(java.lang.String, java.lang.String) throws javassist.bytecode.DuplicateMemberException
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1, r2, $r7, $r12;
        java.util.Iterator r3;
        javassist.bytecode.FieldInfo r4;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        javassist.bytecode.DuplicateMemberException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (javassist.bytecode.FieldInfo) $r6;

        $r7 = virtualinvoke r4.<javassist.bytecode.FieldInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r8 = new javassist.bytecode.DuplicateMemberException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate field: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javassist.bytecode.DuplicateMemberException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        goto label1;

     label3:
        return;
    }

    public java.util.List getMethods()
    {
        javassist.bytecode.ClassFile r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        return $r1;
    }

    public javassist.bytecode.MethodInfo getMethod(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1, $r6;
        java.util.Iterator r2;
        javassist.bytecode.MethodInfo r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javassist.bytecode.MethodInfo) $r5;

        $r6 = virtualinvoke r3.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public javassist.bytecode.MethodInfo getStaticInitializer()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.MethodInfo $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.MethodInfo getMethod(java.lang.String)>("<clinit>");

        return $r1;
    }

    public void addMethod(javassist.bytecode.MethodInfo) throws javassist.bytecode.DuplicateMemberException
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.MethodInfo r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        specialinvoke r0.<javassist.bytecode.ClassFile: void testExistingMethod(javassist.bytecode.MethodInfo)>(r1);

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public final void addMethod2(javassist.bytecode.MethodInfo)
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.MethodInfo r1;
        java.util.List $r2;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void testExistingMethod(javassist.bytecode.MethodInfo) throws javassist.bytecode.DuplicateMemberException
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.MethodInfo r1, $r7;
        java.lang.String r2, r3, $r13, $r15;
        java.util.ListIterator r4;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        javassist.bytecode.DuplicateMemberException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r14;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.MethodInfo;

        r2 = virtualinvoke r1.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        r3 = virtualinvoke r1.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r4 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator(int)>(0);

     label1:
        $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();

        $r7 = (javassist.bytecode.MethodInfo) $r6;

        $z1 = staticinvoke <javassist.bytecode.ClassFile: boolean isDuplicated(javassist.bytecode.MethodInfo,java.lang.String,java.lang.String,javassist.bytecode.MethodInfo,java.util.ListIterator)>(r1, r2, r3, $r7, r4);

        if $z1 == 0 goto label1;

        $r8 = new javassist.bytecode.DuplicateMemberException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate method: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r13 = virtualinvoke r0.<javassist.bytecode.ClassFile: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<javassist.bytecode.DuplicateMemberException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label2:
        return;
    }

    private static boolean isDuplicated(javassist.bytecode.MethodInfo, java.lang.String, java.lang.String, javassist.bytecode.MethodInfo, java.util.ListIterator)
    {
        javassist.bytecode.MethodInfo r0, r3;
        java.lang.String r1, r2, r5, $r6;
        java.util.ListIterator r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: javassist.bytecode.MethodInfo;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: javassist.bytecode.MethodInfo;

        r4 := @parameter4: java.util.ListIterator;

        $r6 = virtualinvoke r3.<javassist.bytecode.MethodInfo: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r5 = virtualinvoke r3.<javassist.bytecode.MethodInfo: java.lang.String getDescriptor()>();

        $z1 = staticinvoke <javassist.bytecode.Descriptor: boolean eqParamTypes(java.lang.String,java.lang.String)>(r5, r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label4;

        $z3 = staticinvoke <javassist.bytecode.ClassFile: boolean notBridgeMethod(javassist.bytecode.MethodInfo)>(r3);

        if $z3 == 0 goto label3;

        return 1;

     label3:
        interfaceinvoke r4.<java.util.ListIterator: void remove()>();

        return 0;

     label4:
        return 0;
    }

    private static boolean notBridgeMethod(javassist.bytecode.MethodInfo)
    {
        javassist.bytecode.MethodInfo r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: javassist.bytecode.MethodInfo;

        $i0 = virtualinvoke r0.<javassist.bytecode.MethodInfo: int getAccessFlags()>();

        $i1 = $i0 & 64;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.List getAttributes()
    {
        javassist.bytecode.ClassFile r0;
        java.util.List $r1;

        r0 := @this: javassist.bytecode.ClassFile;

        $r1 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        return $r1;
    }

    public javassist.bytecode.AttributeInfo getAttribute(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1, $r6;
        java.util.Iterator r2;
        javassist.bytecode.AttributeInfo r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javassist.bytecode.AttributeInfo) $r5;

        $r6 = virtualinvoke r3.<javassist.bytecode.AttributeInfo: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public javassist.bytecode.AttributeInfo removeAttribute(java.lang.String)
    {
        javassist.bytecode.ClassFile r0;
        java.lang.String r1;
        java.util.List $r2;
        javassist.bytecode.AttributeInfo $r3;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        $r3 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r2, r1);

        return $r3;
    }

    public void addAttribute(javassist.bytecode.AttributeInfo)
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.AttributeInfo r1;
        java.util.List $r2, $r5;
        java.lang.String $r3;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: javassist.bytecode.AttributeInfo;

        $r2 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        $r3 = virtualinvoke r1.<javassist.bytecode.AttributeInfo: java.lang.String getName()>();

        staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo remove(java.util.List,java.lang.String)>($r2, $r3);

        $r5 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.lang.String getSourceFile()
    {
        javassist.bytecode.ClassFile r0;
        javassist.bytecode.SourceFileAttribute r1;
        javassist.bytecode.AttributeInfo $r2;
        java.lang.String $r3;

        r0 := @this: javassist.bytecode.ClassFile;

        $r2 = virtualinvoke r0.<javassist.bytecode.ClassFile: javassist.bytecode.AttributeInfo getAttribute(java.lang.String)>("SourceFile");

        r1 = (javassist.bytecode.SourceFileAttribute) $r2;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<javassist.bytecode.SourceFileAttribute: java.lang.String getFileName()>();

        return $r3;
    }

    private void read(java.io.DataInputStream) throws java.io.IOException
    {
        javassist.bytecode.ClassFile r0;
        java.io.DataInputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16;
        javassist.bytecode.ConstPool r2, $r3, $r4, $r9;
        int[] $r5, $r14;
        java.util.ArrayList $r6, $r7, $r8;
        java.lang.String $r10, $r18, $r20;
        javassist.bytecode.AttributeInfo $r11;
        javassist.bytecode.MethodInfo $r12;
        javassist.bytecode.FieldInfo $r13;
        java.io.IOException $r15;
        java.lang.StringBuilder $r16, $r17, $r19;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.io.DataInputStream;

        i0 = virtualinvoke r1.<java.io.DataInputStream: int readInt()>();

        if i0 == -889275714 goto label01;

        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad magic number: ");

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label01:
        $i1 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.ClassFile: int minor> = $i1;

        $i2 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.ClassFile: int major> = $i2;

        $r3 = new javassist.bytecode.ConstPool;

        specialinvoke $r3.<javassist.bytecode.ConstPool: void <init>(java.io.DataInputStream)>(r1);

        r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool> = $r3;

        $i3 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.ClassFile: int accessFlags> = $i3;

        $i4 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.ClassFile: int thisClass> = $i4;

        $r4 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i5 = r0.<javassist.bytecode.ClassFile: int thisClass>;

        virtualinvoke $r4.<javassist.bytecode.ConstPool: void setThisClassInfo(int)>($i5);

        $i6 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        r0.<javassist.bytecode.ClassFile: int superClass> = $i6;

        i9 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        if i9 != 0 goto label02;

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = null;

        goto label04;

     label02:
        $r5 = newarray (int)[i9];

        r0.<javassist.bytecode.ClassFile: int[] interfaces> = $r5;

        i10 = 0;

     label03:
        if i10 >= i9 goto label04;

        $r14 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i8 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        $r14[i10] = $i8;

        i10 = i10 + 1;

        goto label03;

     label04:
        r2 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        i11 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List fields> = $r6;

        i12 = 0;

     label05:
        if i12 >= i11 goto label06;

        $r13 = new javassist.bytecode.FieldInfo;

        specialinvoke $r13.<javassist.bytecode.FieldInfo: void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream)>(r2, r1);

        virtualinvoke r0.<javassist.bytecode.ClassFile: void addField2(javassist.bytecode.FieldInfo)>($r13);

        i12 = i12 + 1;

        goto label05;

     label06:
        i13 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List methods> = $r7;

        i14 = 0;

     label07:
        if i14 >= i13 goto label08;

        $r12 = new javassist.bytecode.MethodInfo;

        specialinvoke $r12.<javassist.bytecode.MethodInfo: void <init>(javassist.bytecode.ConstPool,java.io.DataInputStream)>(r2, r1);

        virtualinvoke r0.<javassist.bytecode.ClassFile: void addMethod2(javassist.bytecode.MethodInfo)>($r12);

        i14 = i14 + 1;

        goto label07;

     label08:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<javassist.bytecode.ClassFile: java.util.List attributes> = $r8;

        i15 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedShort()>();

        i16 = 0;

     label09:
        if i16 >= i15 goto label10;

        $r11 = staticinvoke <javassist.bytecode.AttributeInfo: javassist.bytecode.AttributeInfo read(javassist.bytecode.ConstPool,java.io.DataInputStream)>(r2, r1);

        virtualinvoke r0.<javassist.bytecode.ClassFile: void addAttribute(javassist.bytecode.AttributeInfo)>($r11);

        i16 = i16 + 1;

        goto label09;

     label10:
        $r9 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        $i7 = r0.<javassist.bytecode.ClassFile: int thisClass>;

        $r10 = virtualinvoke $r9.<javassist.bytecode.ConstPool: java.lang.String getClassInfo(int)>($i7);

        r0.<javassist.bytecode.ClassFile: java.lang.String thisclassname> = $r10;

        return;
    }

    public void write(java.io.DataOutputStream) throws java.io.IOException
    {
        javassist.bytecode.ClassFile r0;
        java.io.DataOutputStream r1;
        javassist.bytecode.MethodInfo r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        javassist.bytecode.ConstPool $r3;
        int[] $r4, $r5, $r14;
        java.util.List $r6, $r7, $r8, $r9, $r10, $r12;
        boolean $z0;
        java.lang.Object $r11, $r13;
        javassist.bytecode.FieldInfo r15;
        java.util.Iterator r16;

        r0 := @this: javassist.bytecode.ClassFile;

        r1 := @parameter0: java.io.DataOutputStream;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>(-889275714);

        $i0 = r0.<javassist.bytecode.ClassFile: int minor>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i0);

        $i1 = r0.<javassist.bytecode.ClassFile: int major>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r3 = r0.<javassist.bytecode.ClassFile: javassist.bytecode.ConstPool constPool>;

        virtualinvoke $r3.<javassist.bytecode.ConstPool: void write(java.io.DataOutputStream)>(r1);

        $i2 = r0.<javassist.bytecode.ClassFile: int accessFlags>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i2);

        $i3 = r0.<javassist.bytecode.ClassFile: int thisClass>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i3);

        $i4 = r0.<javassist.bytecode.ClassFile: int superClass>;

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i4);

        $r4 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        if $r4 != null goto label1;

        i8 = 0;

        goto label2;

     label1:
        $r5 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        i8 = lengthof $r5;

     label2:
        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>(i8);

        i9 = 0;

     label3:
        if i9 >= i8 goto label4;

        $r14 = r0.<javassist.bytecode.ClassFile: int[] interfaces>;

        $i7 = $r14[i9];

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i7);

        i9 = i9 + 1;

        goto label3;

     label4:
        $r6 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        i10 = interfaceinvoke $r6.<java.util.List: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>(i10);

        i11 = 0;

     label5:
        if i11 >= i10 goto label6;

        $r12 = r0.<javassist.bytecode.ClassFile: java.util.List fields>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i11);

        r15 = (javassist.bytecode.FieldInfo) $r13;

        virtualinvoke r15.<javassist.bytecode.FieldInfo: void write(java.io.DataOutputStream)>(r1);

        i11 = i11 + 1;

        goto label5;

     label6:
        $r7 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        $i5 = interfaceinvoke $r7.<java.util.List: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i5);

        $r8 = r0.<javassist.bytecode.ClassFile: java.util.List methods>;

        r16 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r2 = (javassist.bytecode.MethodInfo) $r11;

        virtualinvoke r2.<javassist.bytecode.MethodInfo: void write(java.io.DataOutputStream)>(r1);

        goto label7;

     label8:
        $r9 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        $i6 = interfaceinvoke $r9.<java.util.List: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeShort(int)>($i6);

        $r10 = r0.<javassist.bytecode.ClassFile: java.util.List attributes>;

        staticinvoke <javassist.bytecode.AttributeInfo: void writeAll(java.util.List,java.io.DataOutputStream)>($r10, r1);

        return;
    }

    public int getMajorVersion()
    {
        javassist.bytecode.ClassFile r0;
        int $i0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int major>;

        return $i0;
    }

    public void setMajorVersion(int)
    {
        javassist.bytecode.ClassFile r0;
        int i0;

        r0 := @this: javassist.bytecode.ClassFile;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.ClassFile: int major> = i0;

        return;
    }

    public int getMinorVersion()
    {
        javassist.bytecode.ClassFile r0;
        int $i0;

        r0 := @this: javassist.bytecode.ClassFile;

        $i0 = r0.<javassist.bytecode.ClassFile: int minor>;

        return $i0;
    }

    public void setMinorVersion(int)
    {
        javassist.bytecode.ClassFile r0;
        int i0;

        r0 := @this: javassist.bytecode.ClassFile;

        i0 := @parameter0: int;

        r0.<javassist.bytecode.ClassFile: int minor> = i0;

        return;
    }

    public void setVersionToJava5()
    {
        javassist.bytecode.ClassFile r0;

        r0 := @this: javassist.bytecode.ClassFile;

        r0.<javassist.bytecode.ClassFile: int major> = 49;

        r0.<javassist.bytecode.ClassFile: int minor> = 0;

        return;
    }

    static void <clinit>()
    {
        java.lang.ClassLoader $r3;
        java.lang.Class[] $r7, $r11;
        java.lang.Class $r8, $r10;
        java.lang.Throwable $r13;
        byte b0;

        <javassist.bytecode.ClassFile: int JAVA_11> = 55;

        <javassist.bytecode.ClassFile: int JAVA_10> = 54;

        <javassist.bytecode.ClassFile: int JAVA_9> = 53;

        <javassist.bytecode.ClassFile: int JAVA_8> = 52;

        <javassist.bytecode.ClassFile: int JAVA_7> = 51;

        <javassist.bytecode.ClassFile: int JAVA_6> = 50;

        <javassist.bytecode.ClassFile: int JAVA_5> = 49;

        <javassist.bytecode.ClassFile: int JAVA_4> = 48;

        <javassist.bytecode.ClassFile: int JAVA_3> = 47;

        <javassist.bytecode.ClassFile: int JAVA_2> = 46;

        <javassist.bytecode.ClassFile: int JAVA_1> = 45;

        b0 = 47;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.StringBuilder");

        b0 = 49;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.zip.DeflaterInputStream");

        b0 = 50;

        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.invoke.CallSite", 0, $r3);

        b0 = 51;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.function.Function");

        b0 = 52;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.Module");

        b0 = 53;

        $r8 = class "Ljava/util/List;";

        $r7 = newarray (java.lang.Class)[1];

        $r7[0] = class "Ljava/util/Collection;";

        virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("copyOf", $r7);

        b0 = 54;

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.Optional");

        $r11 = newarray (java.lang.Class)[0];

        virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isEmpty", $r11);

        b0 = 55;

     label2:
        goto label4;

     label3:
        $r13 := @caughtexception;

     label4:
        <javassist.bytecode.ClassFile: int MAJOR_VERSION> = b0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
