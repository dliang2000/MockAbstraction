final class org.joda.time.tz.DateTimeZoneBuilder$RuleSet extends java.lang.Object
{
    private static final int YEAR_LIMIT;
    private int iStandardOffset;
    private java.util.ArrayList iRules;
    private java.lang.String iInitialNameKey;
    private int iInitialSaveMillis;
    private int iUpperYear;
    private org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear;

    void <init>()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.util.ArrayList $r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(10);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = 2147483647;

        return;
    }

    void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0, r1;
        int $i0, $i1, $i2;
        java.util.ArrayList $r2, $r3;
        java.lang.String $r4;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r5;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = $i0;

        $r2 = new java.util.ArrayList;

        $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r2;

        $r4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = $r4;

        $i1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = $i1;

        $i2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = $i2;

        $r5 = r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = $r5;

        return;
    }

    public int getStandardOffset()
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int $i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        return $i0;
    }

    public void setStandardOffset(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 := @parameter0: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0;

        return;
    }

    public void setFixedSavings(java.lang.String, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.lang.String r1;
        int i0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0;

        return;
    }

    public void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: org.joda.time.tz.DateTimeZoneBuilder$Rule;

        $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void setUpperLimit(int, org.joda.time.tz.DateTimeZoneBuilder$OfYear)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.tz.DateTimeZoneBuilder$OfYear;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1;

        return;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        long l0, l11;
        java.util.Iterator r3;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r4;
        java.lang.String $r5, $r11, $r16;
        java.util.ArrayList $r6, $r7;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r8, $r9, $r10, $r13, $r14, $r15, r17;
        byte $b1, $b2;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12;
        boolean $z0;
        java.lang.Object $r12;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        l0 := @parameter0: long;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        if $r5 == null goto label1;

        $r15 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>;

        $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>;

        $i10 = $i8 + $i7;

        $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r16, $i10, $i9);

        return $r15;

     label1:
        $r6 = new java.util.ArrayList;

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        l11 = -9223372036854775808L;

        i12 = 0;

        r17 = null;

     label2:
        $r8 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l11, i12);

        if $r8 == null goto label8;

        l11 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>();

        $b1 = l11 cmp l0;

        if $b1 != 0 goto label3;

        $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l0, $r8);

        r17 = $r14;

        goto label8;

     label3:
        $b2 = l11 cmp l0;

        if $b2 <= 0 goto label7;

        if r17 != null goto label6;

        r3 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r12;

        $i5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>();

        if $i5 != 0 goto label5;

        $r13 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l0, r4, $i6);

        r17 = $r13;

        goto label6;

     label5:
        goto label4;

     label6:
        if r17 != null goto label8;

        $r10 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $r11 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>();

        $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r10.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r11, $i4, $i3);

        r17 = $r10;

        goto label8;

     label7:
        $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l0, $r8);

        r17 = $r9;

        i12 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>();

        goto label2;

     label8:
        r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = $r6;

        return r17;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long, int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        long l0, l2, l13, l14;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.joda.time.chrono.ISOChronology r1;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        org.joda.time.DateTimeField $r4;
        org.joda.time.tz.DateTimeZoneBuilder$Transition $r5;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r6;
        byte $b9, $b11, $b12;
        java.lang.Object $r7;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r8, r9;
        boolean $z0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        r8 = null;

        l13 = 9223372036854775807L;

        $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r7;

        $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        l2 = virtualinvoke r9.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i10, i1);

        $b11 = l2 cmp l0;

        if $b11 > 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        $b12 = l2 cmp l13;

        if $b12 > 0 goto label3;

        r8 = r9;

        l13 = l2;

     label3:
        goto label1;

     label4:
        if r8 != null goto label5;

        return null;

     label5:
        $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l13);

        $i4 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>;

        if $i3 < $i4 goto label6;

        return null;

     label6:
        $i5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i5 >= 2147483647 goto label7;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        l14 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i8, $i7, i1);

        $b9 = l13 cmp l14;

        if $b9 < 0 goto label7;

        return null;

     label7:
        $r5 = new org.joda.time.tz.DateTimeZoneBuilder$Transition;

        $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l13, r8, $i6);

        return $r5;
    }

    public long getUpperLimit(int)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        int i0, $i1, $i2, $i3;
        org.joda.time.tz.DateTimeZoneBuilder$OfYear $r1;
        long $l4;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        i0 := @parameter0: int;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        if $i1 != 2147483647 goto label1;

        return 9223372036854775807L;

     label1:
        $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>;

        $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i3, $i2, i0);

        return $l4;
    }

    public org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)
    {
        org.joda.time.tz.DateTimeZoneBuilder$RuleSet r0;
        java.lang.String r1;
        org.joda.time.tz.DateTimeZoneBuilder$Rule r2, r3;
        java.util.ArrayList $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r6, $r8;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r9;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r10, $r11;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$RuleSet;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 2 goto label1;

        $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6;

        $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1);

        r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8;

        $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i1 != 2147483647 goto label1;

        $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>();

        if $i2 != 2147483647 goto label1;

        $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>;

        $r11 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        $r10 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>;

        specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r11, $r10);

        return $r9;

     label1:
        return null;
    }

    static void <clinit>()
    {
        long l0;
        org.joda.time.chrono.ISOChronology $r0;
        org.joda.time.DateTimeField $r1;
        int $i1, $i2;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>();

        $r0 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>();

        $r1 = virtualinvoke $r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>();

        $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0);

        $i2 = $i1 + 100;

        <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> = $i2;

        return;
    }
}
