class org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState extends java.lang.Object
{
    private long watermark;
    private boolean idle;

    private void <init>()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long watermark> = -9223372036854775808L;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean idle> = 0;

        return;
    }

    public long getWatermark()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        $z0 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean idle>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "Output is idle.");

        $l0 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long watermark>;

        return $l0;
    }

    public boolean setWatermark(long)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;
        long l0, $l1, $l3, $l4;
        byte $b2;
        boolean $z1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        l0 := @parameter0: long;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean idle> = 0;

        $l1 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long watermark>;

        $b2 = l0 cmp $l1;

        if $b2 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $l3 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long watermark>;

        $l4 = staticinvoke <java.lang.Math: long max(long,long)>(l0, $l3);

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: long watermark> = $l4;

        return $z1;
    }

    public boolean isIdle()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        $z0 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean idle>;

        return $z0;
    }

    public void setIdle(boolean)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        z0 := @parameter0: boolean;

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean idle> = z0;

        return;
    }

    void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$1)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$1 r1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$1;

        specialinvoke r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: void <init>()>();

        return;
    }
}
