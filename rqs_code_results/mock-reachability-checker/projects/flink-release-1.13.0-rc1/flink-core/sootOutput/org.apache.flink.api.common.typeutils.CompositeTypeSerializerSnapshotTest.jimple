public class org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIncompatiblePrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r4, $r6, $r8, $r10;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r5, $r7, $r9, $r11;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[4];

        $r4 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r5 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r5);

        $r3[0] = $r4;

        $r6 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r7 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AFTER_MIGRATION>;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r7);

        $r3[1] = $r6;

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility INCOMPATIBLE>;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r9);

        $r3[2] = $r8;

        $r10 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r11 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r11);

        $r3[3] = $r10;

        $r12 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r3, $r3, $r12);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCompatibleAfterMigrationPrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r4, $r6, $r8, $r10;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r5, $r7, $r9, $r11;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r12;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[4];

        $r4 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r5 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r5);

        $r3[0] = $r4;

        $r6 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r7 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AFTER_MIGRATION>;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r7);

        $r3[1] = $r6;

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r9);

        $r3[2] = $r8;

        $r10 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r11 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r11);

        $r3[3] = $r10;

        $r12 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r3, $r3, $r12);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testCompatibleWithReconfiguredSerializerPrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r4, $r5;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r6, $r8, $r10;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r7, $r9, $r11;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.flink.api.common.typeutils.TypeSerializer $r13, $r14, $r16, $r18;
        java.lang.Class $r15, $r17, $r19;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r5 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r6 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r7 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r7);

        $r5[0] = $r6;

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r9);

        $r5[1] = $r8;

        $r10 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r11 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r11);

        $r5[2] = $r10;

        $r12 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r5, $r5, $r12);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleWithReconfiguredSerializer()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r13 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: org.apache.flink.api.common.typeutils.TypeSerializer getReconfiguredSerializer()>();

        r3 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer) $r13;

        r4 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $r14 = r4[0];

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        if $r15 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$NestedSerializer;" goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r16 = r4[1];

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        if $r17 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$ReconfiguredNestedSerializer;" goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        $r18 = r4[2];

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.Class getClass()>();

        if $r19 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$NestedSerializer;" goto label5;

        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z3);

        return;
    }

    public void testCompatibleAsIsPrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r4, $r6;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r5, $r7;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r8;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[2];

        $r4 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r5 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r5);

        $r3[0] = $r4;

        $r6 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r7 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r6.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r7);

        $r3[1] = $r6;

        $r8 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r3, $r3, $r8);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAsIs()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testOuterSnapshotIncompatiblePrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r4;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r5;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r4 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r5 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r5);

        $r3[0] = $r4;

        $r6 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility INCOMPATIBLE>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r3, $r3, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testOuterSnapshotRequiresMigrationPrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r2;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r4;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r5;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r6;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r4 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r5 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_WITH_RECONFIGURED_SERIALIZER>;

        specialinvoke $r4.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r5);

        $r3[0] = $r4;

        $r6 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AFTER_MIGRATION>;

        r2 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r3, $r3, $r6);

        $z0 = virtualinvoke r2.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isCompatibleAfterMigration()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    public void testNestedFieldSerializerArityMismatchPrecedence() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r7;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r5, $r8, $r10, $r12;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r6, $r9, $r11, $r13;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility $r14;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r5 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r6 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r6);

        $r4[0] = $r5;

        $r7 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r9 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r9);

        $r7[0] = $r8;

        $r10 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r11 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r10.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r11);

        $r7[1] = $r10;

        $r12 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r13 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r12.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r13);

        $r7[2] = $r12;

        $r14 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility COMPATIBLE_AS_IS>;

        r3 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.TypeSerializer[],org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility)>($r4, $r7, $r14);

        $z0 = virtualinvoke r3.<org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility: boolean isIncompatible()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        return;
    }

    private org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility snapshotCompositeSerializerAndGetSchemaCompatibilityAfterRestore(org.apache.flink.api.common.typeutils.TypeSerializer[], org.apache.flink.api.common.typeutils.TypeSerializer[], org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r1, r2;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility r3;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r8, $r14;
        org.apache.flink.core.memory.DataOutputSerializer $r9;
        org.apache.flink.core.memory.DataInputDeserializer $r10;
        byte[] $r11;
        java.lang.Thread $r12;
        java.lang.ClassLoader $r13;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r15;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r16, r17;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeSerializer[];

        r3 := @parameter2: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility;

        $r8 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        specialinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>(r1);

        r16 = virtualinvoke $r8.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r9 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r9.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(128);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r9, r16);

        $r10 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r11 = virtualinvoke $r9.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        specialinvoke $r10.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>($r11);

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke $r12.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r17 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r10, $r13);

        $r14 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        specialinvoke $r14.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot$OuterSchemaCompatibility,org.apache.flink.api.common.typeutils.TypeSerializer[])>(r3, r2);

        $r15 = interfaceinvoke r17.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>($r14);

        return $r15;
    }

    public void testRestoreCompositeTypeSerializer() throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest r0;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r4, $r18, $r21, $r24;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer $r5, $r7, $r9;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility $r6, $r8, $r10;
        org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer $r11, r30;
        org.apache.flink.core.memory.DataOutputSerializer $r12;
        org.apache.flink.core.memory.DataInputDeserializer $r13;
        byte[] $r14;
        java.lang.Thread $r15;
        java.lang.ClassLoader $r16;
        org.apache.flink.api.common.typeutils.TypeSerializer $r17, $r19, $r22, $r25;
        java.lang.Class $r20, $r23, $r26;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot r28, r29;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest;

        $r4 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[3];

        $r5 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r6 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AS_IS>;

        specialinvoke $r5.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r6);

        $r4[0] = $r5;

        $r7 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r8 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility INCOMPATIBLE>;

        specialinvoke $r7.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r8);

        $r4[1] = $r7;

        $r9 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer;

        $r10 = <org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility: org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility COMPATIBLE_AFTER_MIGRATION>;

        specialinvoke $r9.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$NestedSerializer: void <init>(org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TargetCompatibility)>($r10);

        $r4[2] = $r9;

        $r11 = new org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer;

        specialinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r4);

        r28 = virtualinvoke $r11.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()>();

        $r12 = new org.apache.flink.core.memory.DataOutputSerializer;

        specialinvoke $r12.<org.apache.flink.core.memory.DataOutputSerializer: void <init>(int)>(128);

        staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: void writeVersionedSnapshot(org.apache.flink.core.memory.DataOutputView,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)>($r12, r28);

        $r13 = new org.apache.flink.core.memory.DataInputDeserializer;

        $r14 = virtualinvoke $r12.<org.apache.flink.core.memory.DataOutputSerializer: byte[] getCopyOfBuffer()>();

        specialinvoke $r13.<org.apache.flink.core.memory.DataInputDeserializer: void <init>(byte[])>($r14);

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r16 = virtualinvoke $r15.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r29 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSnapshot readVersionedSnapshot(org.apache.flink.core.memory.DataInputView,java.lang.ClassLoader)>($r13, $r16);

        $r17 = interfaceinvoke r29.<org.apache.flink.api.common.typeutils.TypeSerializerSnapshot: org.apache.flink.api.common.typeutils.TypeSerializer restoreSerializer()>();

        r30 = (org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer) $r17;

        $r18 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $r19 = $r18[0];

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Class getClass()>();

        if $r20 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer;" goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $r21 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $r22 = $r21[1];

        $r23 = virtualinvoke $r22.<java.lang.Object: java.lang.Class getClass()>();

        if $r23 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer;" goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        $r24 = virtualinvoke r30.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshotTest$TestCompositeTypeSerializer: org.apache.flink.api.common.typeutils.TypeSerializer[] getNestedSerializers()>();

        $r25 = $r24[2];

        $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.Class getClass()>();

        if $r26 != class "Lorg/apache/flink/api/common/typeutils/CompositeTypeSerializerSnapshotTest$RestoredNestedSerializer;" goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2);

        return;
    }
}
