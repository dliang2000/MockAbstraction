public class org.mockito.internal.util.reflection.FieldSetter extends java.lang.Object
{

    private void <init>()
    {
        org.mockito.internal.util.reflection.FieldSetter r0;

        r0 := @this: org.mockito.internal.util.reflection.FieldSetter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void setField(java.lang.Object, java.lang.reflect.Field, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.reflect.Field r1;
        org.mockito.internal.util.reflection.AccessibilityChanger $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.RuntimeException $r6, $r19;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.String $r15, $r17, $r28;
        java.lang.IllegalAccessException $r18;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.reflect.Field;

        r2 := @parameter2: java.lang.Object;

        $r4 = new org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void <init>()>();

        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void enableAccess(java.lang.reflect.AccessibleObject)>(r1);

     label1:
        virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r2);

     label2:
        goto label5;

     label3:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access not authorized on field \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of object \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value: \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r28, $r18);

        throw $r19;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong argument on field \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of object \'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' with value: \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', \nreason : ");

        $r15 = virtualinvoke $r5.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r5);

        throw $r6;

     label5:
        virtualinvoke $r4.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r1);

        return;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
    }
}
