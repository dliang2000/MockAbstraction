public class org.apache.flink.types.NormalizableKeyTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.types.NormalizableKeyTest r0;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testIntValue()
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        org.apache.flink.types.IntValue $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int i0;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        $r9 = new org.apache.flink.types.IntValue;

        specialinvoke $r9.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        $r10 = new org.apache.flink.types.IntValue;

        specialinvoke $r10.<org.apache.flink.types.IntValue: void <init>(int)>(10);

        $r11 = new org.apache.flink.types.IntValue;

        specialinvoke $r11.<org.apache.flink.types.IntValue: void <init>(int)>(-10);

        $r12 = new org.apache.flink.types.IntValue;

        specialinvoke $r12.<org.apache.flink.types.IntValue: void <init>(int)>(255);

        $r13 = new org.apache.flink.types.IntValue;

        specialinvoke $r13.<org.apache.flink.types.IntValue: void <init>(int)>(2147483647);

        $r14 = new org.apache.flink.types.IntValue;

        specialinvoke $r14.<org.apache.flink.types.IntValue: void <init>(int)>(2139095040);

        $r15 = new org.apache.flink.types.IntValue;

        specialinvoke $r15.<org.apache.flink.types.IntValue: void <init>(int)>(-2147483648);

        $r16 = new org.apache.flink.types.IntValue;

        specialinvoke $r16.<org.apache.flink.types.IntValue: void <init>(int)>(-2147483648);

        i0 = 2;

     label1:
        if i0 > 4 goto label2;

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r10, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r11, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r12, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r13, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r14, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r15, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r16, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r13, $r14, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r15, $r16, i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void testLongValue()
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        org.apache.flink.types.LongValue $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        int i0;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        $r9 = new org.apache.flink.types.LongValue;

        specialinvoke $r9.<org.apache.flink.types.LongValue: void <init>(long)>(10L);

        $r10 = new org.apache.flink.types.LongValue;

        specialinvoke $r10.<org.apache.flink.types.LongValue: void <init>(long)>(10L);

        $r11 = new org.apache.flink.types.LongValue;

        specialinvoke $r11.<org.apache.flink.types.LongValue: void <init>(long)>(-10L);

        $r12 = new org.apache.flink.types.LongValue;

        specialinvoke $r12.<org.apache.flink.types.LongValue: void <init>(long)>(255L);

        $r13 = new org.apache.flink.types.LongValue;

        specialinvoke $r13.<org.apache.flink.types.LongValue: void <init>(long)>(9223372036854775807L);

        $r14 = new org.apache.flink.types.LongValue;

        specialinvoke $r14.<org.apache.flink.types.LongValue: void <init>(long)>(9187343239835811840L);

        $r15 = new org.apache.flink.types.LongValue;

        specialinvoke $r15.<org.apache.flink.types.LongValue: void <init>(long)>(-9223372036854775808L);

        $r16 = new org.apache.flink.types.LongValue;

        specialinvoke $r16.<org.apache.flink.types.LongValue: void <init>(long)>(-9223372036854775808L);

        i0 = 2;

     label1:
        if i0 > 8 goto label2;

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r10, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r11, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r12, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r13, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r14, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r15, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r9, $r16, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r13, $r14, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r15, $r16, i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void testStringValue()
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        org.apache.flink.types.StringValue $r6, $r7, $r8, $r9, $r10;
        int i0;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        $r6 = new org.apache.flink.types.StringValue;

        specialinvoke $r6.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a test");

        $r7 = new org.apache.flink.types.StringValue;

        specialinvoke $r7.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a test with some longer String");

        $r8 = new org.apache.flink.types.StringValue;

        specialinvoke $r8.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This is a tesa");

        $r9 = new org.apache.flink.types.StringValue;

        specialinvoke $r9.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("This");

        $r10 = new org.apache.flink.types.StringValue;

        specialinvoke $r10.<org.apache.flink.types.StringValue: void <init>(java.lang.CharSequence)>("\u00dcnlaut \u00dftring \u00b5 avec \u00e9 y \u00a2");

        i0 = 5;

     label1:
        if i0 > 15 goto label2;

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r6, $r7, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r6, $r8, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r6, $r9, i0);

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r6, $r10, i0);

        i0 = i0 + 10;

        goto label1;

     label2:
        return;
    }

    public void testPactNull()
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        org.apache.flink.types.NullValue $r3, $r4;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        $r3 = new org.apache.flink.types.NullValue;

        specialinvoke $r3.<org.apache.flink.types.NullValue: void <init>()>();

        $r4 = new org.apache.flink.types.NullValue;

        specialinvoke $r4.<org.apache.flink.types.NullValue: void <init>()>();

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>($r3, $r4, 0);

        return;
    }

    public void testPactChar()
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        int i0, i1, i2, i3, i4;
        org.apache.flink.types.CharValue r11, r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        org.apache.flink.types.CharValue[] $r22;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        $r14 = new org.apache.flink.types.CharValue;

        specialinvoke $r14.<org.apache.flink.types.CharValue: void <init>(char)>(0);

        $r15 = new org.apache.flink.types.CharValue;

        specialinvoke $r15.<org.apache.flink.types.CharValue: void <init>(char)>(1);

        $r16 = new org.apache.flink.types.CharValue;

        specialinvoke $r16.<org.apache.flink.types.CharValue: void <init>(char)>(255);

        $r17 = new org.apache.flink.types.CharValue;

        specialinvoke $r17.<org.apache.flink.types.CharValue: void <init>(char)>(65535);

        $r18 = new org.apache.flink.types.CharValue;

        specialinvoke $r18.<org.apache.flink.types.CharValue: void <init>(char)>(0);

        $r19 = new org.apache.flink.types.CharValue;

        specialinvoke $r19.<org.apache.flink.types.CharValue: void <init>(char)>(56319);

        $r20 = new org.apache.flink.types.CharValue;

        specialinvoke $r20.<org.apache.flink.types.CharValue: void <init>(char)>(57343);

        $r21 = new org.apache.flink.types.CharValue;

        specialinvoke $r21.<org.apache.flink.types.CharValue: void <init>(char)>(57343);

        $r22 = newarray (org.apache.flink.types.CharValue)[8];

        $r22[0] = $r14;

        $r22[1] = $r15;

        $r22[2] = $r16;

        $r22[3] = $r17;

        $r22[4] = $r18;

        $r22[5] = $r19;

        $r22[6] = $r20;

        $r22[7] = $r21;

        i2 = 0;

     label1:
        if i2 >= 5 goto label6;

        i0 = lengthof $r22;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r11 = $r22[i3];

        i1 = lengthof $r22;

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        r13 = $r22[i4];

        specialinvoke r0.<org.apache.flink.types.NormalizableKeyTest: void assertNormalizableKey(org.apache.flink.types.NormalizableKey,org.apache.flink.types.NormalizableKey,int)>(r11, r13, i2);

        i4 = i4 + 1;

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        return;
    }

    private void assertNormalizableKey(org.apache.flink.types.NormalizableKey, org.apache.flink.types.NormalizableKey, int)
    {
        org.apache.flink.types.NormalizableKeyTest r0;
        org.apache.flink.types.NormalizableKey r1, r2;
        int i0, $i4, $i5, $i7, $i9, $i10, i12;
        byte[] r3;
        org.apache.flink.core.memory.MemorySegment r4;
        short s2, s3;
        byte $b6, $b8, $b11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: org.apache.flink.types.NormalizableKeyTest;

        r1 := @parameter0: org.apache.flink.types.NormalizableKey;

        r2 := @parameter1: org.apache.flink.types.NormalizableKey;

        i0 := @parameter2: int;

        r3 = newarray (byte)[32];

        r4 = staticinvoke <org.apache.flink.core.memory.MemorySegmentFactory: org.apache.flink.core.memory.MemorySegment wrap(byte[])>(r3);

        interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r4, 0, i0);

        interfaceinvoke r2.<org.apache.flink.types.NormalizableKey: void copyNormalizedKey(org.apache.flink.core.memory.MemorySegment,int,int)>(r4, i0, i0);

        i12 = 0;

     label1:
        if i12 >= i0 goto label4;

        $b6 = r3[i12];

        s2 = $b6 & 255;

        $i7 = i0 + i12;

        $b8 = r3[$i7];

        s3 = $b8 & 255;

        $i9 = s2 - s3;

        if $i9 == 0 goto label3;

        $i10 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int compareTo(java.lang.Object)>(r2);

        $f0 = (float) $i10;

        $f1 = staticinvoke <java.lang.Math: float signum(float)>($f0);

        $f2 = (float) $i9;

        $f3 = staticinvoke <java.lang.Math: float signum(float)>($f2);

        $b11 = $f1 cmpl $f3;

        if $b11 == 0 goto label2;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Normalized key comparison differs from actual key comparision");

     label2:
        return;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        $i4 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int compareTo(java.lang.Object)>(r2);

        if $i4 == 0 goto label5;

        $i5 = interfaceinvoke r1.<org.apache.flink.types.NormalizableKey: int getMaxNormalizedKeyLen()>();

        if $i5 > i0 goto label5;

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>("Normalized key was not able to distinguish keys, although it should as the length of it sufficies to uniquely identify them");

     label5:
        return;
    }
}
