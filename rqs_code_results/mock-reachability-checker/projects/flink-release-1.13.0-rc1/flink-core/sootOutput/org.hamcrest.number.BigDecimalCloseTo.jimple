public class org.hamcrest.number.BigDecimalCloseTo extends org.hamcrest.TypeSafeMatcher
{
    private final java.math.BigDecimal delta;
    private final java.math.BigDecimal value;

    public void <init>(java.math.BigDecimal, java.math.BigDecimal)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.math.BigDecimal r1, r2;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.math.BigDecimal;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal delta> = r2;

        r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal value> = r1;

        return;
    }

    public boolean matchesSafely(java.math.BigDecimal)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.math.BigDecimal r1, $r2, $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.math.BigDecimal;

        $r2 = specialinvoke r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal actualDelta(java.math.BigDecimal)>(r1);

        $r3 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;

        $i0 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void describeMismatchSafely(java.math.BigDecimal, org.hamcrest.Description)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.math.BigDecimal r1, $r5;
        org.hamcrest.Description r2, $r3, $r4;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" differed by ");

        $r5 = specialinvoke r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal actualDelta(java.math.BigDecimal)>(r1);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        org.hamcrest.Description r1, $r2, $r4, $r5;
        java.math.BigDecimal $r3, $r6;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a numeric value within ");

        $r3 = r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal delta>;

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" of ");

        $r6 = r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal value>;

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return;
    }

    private java.math.BigDecimal actualDelta(java.math.BigDecimal)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.math.BigDecimal r1, $r3, $r4, $r5, $r7, $r8, $r9;
        java.math.MathContext $r2, $r6;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.math.BigDecimal;

        $r3 = r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal value>;

        $r2 = <java.math.MathContext: java.math.MathContext DECIMAL128>;

        $r4 = virtualinvoke r1.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>($r3, $r2);

        $r5 = virtualinvoke $r4.<java.math.BigDecimal: java.math.BigDecimal abs()>();

        $r7 = r0.<org.hamcrest.number.BigDecimalCloseTo: java.math.BigDecimal delta>;

        $r6 = <java.math.MathContext: java.math.MathContext DECIMAL128>;

        $r8 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal,java.math.MathContext)>($r7, $r6);

        $r9 = virtualinvoke $r8.<java.math.BigDecimal: java.math.BigDecimal stripTrailingZeros()>();

        return $r9;
    }

    public static org.hamcrest.Matcher closeTo(java.math.BigDecimal, java.math.BigDecimal)
    {
        java.math.BigDecimal r0, r1;
        org.hamcrest.number.BigDecimalCloseTo $r2;

        r0 := @parameter0: java.math.BigDecimal;

        r1 := @parameter1: java.math.BigDecimal;

        $r2 = new org.hamcrest.number.BigDecimalCloseTo;

        specialinvoke $r2.<org.hamcrest.number.BigDecimalCloseTo: void <init>(java.math.BigDecimal,java.math.BigDecimal)>(r0, r1);

        return $r2;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.math.BigDecimal $r3;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.math.BigDecimal) r1;

        virtualinvoke r0.<org.hamcrest.number.BigDecimalCloseTo: void describeMismatchSafely(java.math.BigDecimal,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.number.BigDecimalCloseTo r0;
        java.lang.Object r1;
        java.math.BigDecimal $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.number.BigDecimalCloseTo;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.math.BigDecimal) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.number.BigDecimalCloseTo: boolean matchesSafely(java.math.BigDecimal)>($r2);

        return $z0;
    }
}
