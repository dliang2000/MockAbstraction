public class org.apache.flink.api.common.eventtime.WatermarkStrategyTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testDefaultTimeStampAssigner()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r2;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner $r4;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        r1 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r2 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r2, 1);

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        $r4 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r3);

        $r5 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/api/common/eventtime/RecordTimestampAssigner;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r4, $r5);

        return;
    }

    public void testLambdaTimestampAssigner()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner r2;
        org.apache.flink.api.common.eventtime.SerializableTimestampAssigner $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r6;
        long $l0;
        java.lang.Long $r7, $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testLambdaTimestampAssigner_4b8db82f_1__36: org.apache.flink.api.common.eventtime.SerializableTimestampAssigner bootstrap$()>();

        r1 = interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.SerializableTimestampAssigner)>($r4);

        $r5 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r5, 1);

        $r6 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        r2 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r6);

        $l0 = interfaceinvoke r2.<org.apache.flink.api.common.eventtime.TimestampAssigner: long extractTimestamp(java.lang.Object,long)>(null, 13L);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testLambdaTimestampAssignerSupplier()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner r2;
        org.apache.flink.api.common.eventtime.SerializableTimestampAssigner $r4;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier $r5;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r6;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r7;
        long $l0;
        java.lang.Long $r8, $r9;
        org.hamcrest.Matcher $r10;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testLambdaTimestampAssignerSupplier_4b8db82f_1__37: org.apache.flink.api.common.eventtime.SerializableTimestampAssigner bootstrap$()>();

        $r5 = staticinvoke <org.apache.flink.api.common.eventtime.TimestampAssignerSupplier: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier of(org.apache.flink.api.common.eventtime.SerializableTimestampAssigner)>($r4);

        r1 = interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)>($r5);

        $r6 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r6, 1);

        $r7 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        r2 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r7);

        $l0 = interfaceinvoke r2.<org.apache.flink.api.common.eventtime.TimestampAssigner: long extractTimestamp(java.lang.Object,long)>(null, 13L);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r9);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r8, $r10);

        return;
    }

    public void testAnonymousInnerTimestampAssigner()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner r2;
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest$1 $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r6;
        long $l0;
        java.lang.Long $r7, $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r4 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest$1;

        specialinvoke $r4.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest$1: void <init>(org.apache.flink.api.common.eventtime.WatermarkStrategyTest)>(r0);

        r1 = interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.SerializableTimestampAssigner)>($r4);

        $r5 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r5, 1);

        $r6 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        r2 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r6);

        $l0 = interfaceinvoke r2.<org.apache.flink.api.common.eventtime.TimestampAssigner: long extractTimestamp(java.lang.Object,long)>(null, 13L);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testClassTimestampAssigner()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner r2;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r6;
        long $l0;
        java.lang.Long $r7, $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testClassTimestampAssigner_196f091b_1__38: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier bootstrap$()>();

        r1 = interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)>($r4);

        $r5 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r5, 1);

        $r6 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        r2 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r6);

        $l0 = interfaceinvoke r2.<org.apache.flink.api.common.eventtime.TimestampAssigner: long extractTimestamp(java.lang.Object,long)>(null, 13L);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testClassTimestampAssignerUsingSupplier()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r3;
        org.apache.flink.api.common.eventtime.TimestampAssigner r2;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r6;
        long $l0;
        java.lang.Long $r7, $r8;
        org.hamcrest.Matcher $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r3 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r4 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testClassTimestampAssignerUsingSupplier_196f091b_1__39: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier bootstrap$()>();

        r1 = interfaceinvoke $r3.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier)>($r4);

        $r5 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r5, 1);

        $r6 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        r2 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r6);

        $l0 = interfaceinvoke r2.<org.apache.flink.api.common.eventtime.TimestampAssigner: long extractTimestamp(java.lang.Object,long)>(null, 13L);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        $r9 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher is(java.lang.Object)>($r8);

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r7, $r9);

        return;
    }

    public void testWithIdlenessHelper()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategy r1, $r2;
        java.time.Duration $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context $r5;
        org.apache.flink.api.common.eventtime.TimestampAssigner $r6;
        org.hamcrest.Matcher $r7, $r10;
        org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context $r8;
        org.apache.flink.api.common.eventtime.WatermarkGenerator $r9;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        $r2 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy forMonotonousTimestamps()>();

        $r3 = staticinvoke <java.time.Duration: java.time.Duration ofDays(long)>(7L);

        r1 = interfaceinvoke $r2.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkStrategy withIdleness(java.time.Duration)>($r3);

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r1, $r4, 1);

        $r5 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()>();

        $r6 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.TimestampAssigner createTimestampAssigner(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)>($r5);

        $r7 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/api/common/eventtime/RecordTimestampAssigner;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r6, $r7);

        $r8 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest: org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context generatorContext()>();

        $r9 = interfaceinvoke r1.<org.apache.flink.api.common.eventtime.WatermarkStrategy: org.apache.flink.api.common.eventtime.WatermarkGenerator createWatermarkGenerator(org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context)>($r8);

        $r10 = staticinvoke <org.hamcrest.CoreMatchers: org.hamcrest.Matcher instanceOf(java.lang.Class)>(class "Lorg/apache/flink/api/common/eventtime/WatermarksWithIdleness;");

        staticinvoke <org.junit.Assert: void assertThat(java.lang.Object,org.hamcrest.Matcher)>($r9, $r10);

        return;
    }

    static org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context assignerContext()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest$2 $r0;

        $r0 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest$2;

        specialinvoke $r0.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest$2: void <init>()>();

        return $r0;
    }

    static org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier$Context generatorContext()
    {
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest$3 $r0;

        $r0 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest$3;

        specialinvoke $r0.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest$3: void <init>()>();

        return $r0;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23;
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier $r7, $r25;
        org.apache.flink.api.common.eventtime.SerializableTimestampAssigner $r13, $r19;
        byte b5;
        java.lang.IllegalArgumentException $r26;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b5 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2143342631: goto label03;
            case -2029020740: goto label01;
            case -1579670931: goto label02;
            case -835862502: goto label04;
            default: goto label05;
        };

     label01:
        $z22 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testClassTimestampAssignerUsingSupplier$196f091b$1");

        if $z22 == 0 goto label05;

        b5 = 0;

        goto label05;

     label02:
        $z21 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testLambdaTimestampAssignerSupplier$4b8db82f$1");

        if $z21 == 0 goto label05;

        b5 = 1;

        goto label05;

     label03:
        $z23 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testLambdaTimestampAssigner$4b8db82f$1");

        if $z23 == 0 goto label05;

        b5 = 2;

        goto label05;

     label04:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testClassTimestampAssigner$196f091b$1");

        if $z0 == 0 goto label05;

        b5 = 3;

     label05:
        tableswitch(b5)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        $i4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i4 != 6 goto label10;

        $r20 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z16 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/TimestampAssignerSupplier");

        if $z16 == 0 goto label10;

        $r21 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z17 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>("createTimestampAssigner");

        if $z17 == 0 goto label10;

        $r22 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z18 = virtualinvoke $r22.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/TimestampAssignerSupplier$Context;)Lorg/apache/flink/api/common/eventtime/TimestampAssigner;");

        if $z18 == 0 goto label10;

        $r23 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z19 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategyTest");

        if $z19 == 0 goto label10;

        $r24 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z20 = virtualinvoke $r24.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/TimestampAssignerSupplier$Context;)Lorg/apache/flink/api/common/eventtime/TimestampAssigner;");

        if $z20 == 0 goto label10;

        $r25 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testClassTimestampAssignerUsingSupplier_196f091b_1__558: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier bootstrap$()>();

        return $r25;

     label07:
        $i3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i3 != 6 goto label10;

        $r14 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z11 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/SerializableTimestampAssigner");

        if $z11 == 0 goto label10;

        $r15 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z12 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>("extractTimestamp");

        if $z12 == 0 goto label10;

        $r16 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z13 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;J)J");

        if $z13 == 0 goto label10;

        $r17 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z14 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategyTest");

        if $z14 == 0 goto label10;

        $r18 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z15 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;J)J");

        if $z15 == 0 goto label10;

        $r19 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testLambdaTimestampAssignerSupplier_4b8db82f_1__557: org.apache.flink.api.common.eventtime.SerializableTimestampAssigner bootstrap$()>();

        return $r19;

     label08:
        $i2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i2 != 6 goto label10;

        $r8 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/SerializableTimestampAssigner");

        if $z6 == 0 goto label10;

        $r9 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>("extractTimestamp");

        if $z7 == 0 goto label10;

        $r10 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z8 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;J)J");

        if $z8 == 0 goto label10;

        $r11 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z9 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategyTest");

        if $z9 == 0 goto label10;

        $r12 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z10 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;J)J");

        if $z10 == 0 goto label10;

        $r13 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testLambdaTimestampAssigner_4b8db82f_1__556: org.apache.flink.api.common.eventtime.SerializableTimestampAssigner bootstrap$()>();

        return $r13;

     label09:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label10;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/TimestampAssignerSupplier");

        if $z1 == 0 goto label10;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("createTimestampAssigner");

        if $z2 == 0 goto label10;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/TimestampAssignerSupplier$Context;)Lorg/apache/flink/api/common/eventtime/TimestampAssigner;");

        if $z3 == 0 goto label10;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/eventtime/WatermarkStrategyTest");

        if $z4 == 0 goto label10;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("(Lorg/apache/flink/api/common/eventtime/TimestampAssignerSupplier$Context;)Lorg/apache/flink/api/common/eventtime/TimestampAssigner;");

        if $z5 == 0 goto label10;

        $r7 = staticinvoke <org.apache.flink.api.common.eventtime.WatermarkStrategyTest$lambda_testClassTimestampAssigner_196f091b_1__555: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier bootstrap$()>();

        return $r7;

     label10:
        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r26;
    }

    public static org.apache.flink.api.common.eventtime.TimestampAssigner lambda$testClassTimestampAssignerUsingSupplier$196f091b$1(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)
    {
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner $r1;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context;

        $r1 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner;

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner: void <init>()>();

        return $r1;
    }

    public static org.apache.flink.api.common.eventtime.TimestampAssigner lambda$testClassTimestampAssigner$196f091b$1(org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context)
    {
        org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context r0;
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner $r1;

        r0 := @parameter0: org.apache.flink.api.common.eventtime.TimestampAssignerSupplier$Context;

        $r1 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner;

        specialinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest$TestTimestampAssigner: void <init>()>();

        return $r1;
    }

    public static long lambda$testLambdaTimestampAssignerSupplier$4b8db82f$1(java.lang.Object, long)
    {
        java.lang.Object r0;
        long l0;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        return 42L;
    }

    public static long lambda$testLambdaTimestampAssigner$4b8db82f$1(java.lang.Object, long)
    {
        java.lang.Object r0;
        long l0;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        return 42L;
    }
}
