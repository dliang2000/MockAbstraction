public class org.hamcrest.core.IsEqual extends org.hamcrest.BaseMatcher
{
    private final java.lang.Object expectedValue;

    public void <init>(java.lang.Object)
    {
        org.hamcrest.core.IsEqual r0;
        java.lang.Object r1;

        r0 := @this: org.hamcrest.core.IsEqual;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        r0.<org.hamcrest.core.IsEqual: java.lang.Object expectedValue> = r1;

        return;
    }

    public boolean matches(java.lang.Object)
    {
        org.hamcrest.core.IsEqual r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.core.IsEqual;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.hamcrest.core.IsEqual: java.lang.Object expectedValue>;

        $z0 = staticinvoke <org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>(r1, $r2);

        return $z0;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.core.IsEqual r0;
        org.hamcrest.Description r1;
        java.lang.Object $r2;

        r0 := @this: org.hamcrest.core.IsEqual;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = r0.<org.hamcrest.core.IsEqual: java.lang.Object expectedValue>;

        interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r2);

        return;
    }

    private static boolean areEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label3;

        if r1 != null goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        if r1 == null goto label6;

        $z1 = staticinvoke <org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>(r0);

        if $z1 == 0 goto label6;

        $z2 = staticinvoke <org.hamcrest.core.IsEqual: boolean isArray(java.lang.Object)>(r1);

        if $z2 == 0 goto label4;

        $z3 = staticinvoke <org.hamcrest.core.IsEqual: boolean areArraysEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z3 == 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        return $z5;

     label6:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private static boolean areArraysEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.hamcrest.core.IsEqual: boolean areArrayLengthsEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.hamcrest.core.IsEqual: boolean areArrayElementsEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static boolean areArrayLengthsEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean areArrayElementsEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1, $r2, $r3;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r0);

        if i1 >= $i0 goto label3;

        $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r0, i1);

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r1, i1);

        $z0 = staticinvoke <org.hamcrest.core.IsEqual: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static boolean isArray(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        return $z0;
    }

    public static org.hamcrest.Matcher equalTo(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.core.IsEqual $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new org.hamcrest.core.IsEqual;

        specialinvoke $r1.<org.hamcrest.core.IsEqual: void <init>(java.lang.Object)>(r0);

        return $r1;
    }
}
