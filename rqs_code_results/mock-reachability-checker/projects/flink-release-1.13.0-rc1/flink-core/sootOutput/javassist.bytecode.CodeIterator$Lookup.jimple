class javassist.bytecode.CodeIterator$Lookup extends javassist.bytecode.CodeIterator$Switcher
{
    int[] matches;

    void <init>(int, int, int[], int[], javassist.bytecode.CodeIterator$Pointers)
    {
        javassist.bytecode.CodeIterator$Lookup r0;
        int i0, i1;
        int[] r1, r2;
        javassist.bytecode.CodeIterator$Pointers r3;

        r0 := @this: javassist.bytecode.CodeIterator$Lookup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        r3 := @parameter4: javassist.bytecode.CodeIterator$Pointers;

        specialinvoke r0.<javassist.bytecode.CodeIterator$Switcher: void <init>(int,int,int[],javassist.bytecode.CodeIterator$Pointers)>(i0, i1, r2, r3);

        r0.<javassist.bytecode.CodeIterator$Lookup: int[] matches> = r1;

        return;
    }

    int write2(int, byte[])
    {
        javassist.bytecode.CodeIterator$Lookup r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        int[] $r2, $r3, $r4;

        r0 := @this: javassist.bytecode.CodeIterator$Lookup;

        i6 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = r0.<javassist.bytecode.CodeIterator$Lookup: int[] matches>;

        i0 = lengthof $r2;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>(i0, r1, i6);

        i7 = i6 + 4;

        i8 = 0;

     label1:
        if i8 >= i0 goto label2;

        $r3 = r0.<javassist.bytecode.CodeIterator$Lookup: int[] matches>;

        $i3 = $r3[i8];

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>($i3, r1, i7);

        $r4 = r0.<javassist.bytecode.CodeIterator$Lookup: int[] offsets>;

        $i5 = $r4[i8];

        $i4 = i7 + 4;

        staticinvoke <javassist.bytecode.ByteArray: void write32bit(int,byte[],int)>($i5, r1, $i4);

        i7 = i7 + 8;

        i8 = i8 + 1;

        goto label1;

     label2:
        $i1 = 8 * i0;

        $i2 = 4 + $i1;

        return $i2;
    }

    int tableSize()
    {
        javassist.bytecode.CodeIterator$Lookup r0;
        int[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: javassist.bytecode.CodeIterator$Lookup;

        $r1 = r0.<javassist.bytecode.CodeIterator$Lookup: int[] matches>;

        $i0 = lengthof $r1;

        $i1 = 8 * $i0;

        $i2 = 4 + $i1;

        return $i2;
    }
}
