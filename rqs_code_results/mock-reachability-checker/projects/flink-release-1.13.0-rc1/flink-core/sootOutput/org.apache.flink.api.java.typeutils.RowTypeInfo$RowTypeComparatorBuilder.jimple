class org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder extends java.lang.Object implements org.apache.flink.api.common.typeutils.CompositeType$TypeComparatorBuilder
{
    private final java.util.ArrayList fieldComparators;
    private final java.util.ArrayList logicalKeyFields;
    private final boolean[] comparatorOrders;
    final org.apache.flink.api.java.typeutils.RowTypeInfo this$0;

    public void <init>(org.apache.flink.api.java.typeutils.RowTypeInfo, boolean[])
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder r0;
        org.apache.flink.api.java.typeutils.RowTypeInfo r1;
        boolean[] r2;
        java.util.ArrayList $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.RowTypeInfo;

        r2 := @parameter1: boolean[];

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: org.apache.flink.api.java.typeutils.RowTypeInfo this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields> = $r4;

        r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: boolean[] comparatorOrders> = r2;

        return;
    }

    public void initializeTypeComparatorBuilder(int)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder r0;
        int i0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        virtualinvoke $r1.<java.util.ArrayList: void ensureCapacity(int)>(i0);

        $r2 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        virtualinvoke $r2.<java.util.ArrayList: void ensureCapacity(int)>(i0);

        return;
    }

    public void addComparatorField(int, org.apache.flink.api.common.typeutils.TypeComparator)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder r0;
        int i0;
        org.apache.flink.api.common.typeutils.TypeComparator r1;
        java.util.ArrayList $r2, $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        $r2 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r3 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeComparator createTypeComparator(org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder r0;
        org.apache.flink.api.common.ExecutionConfig r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        org.apache.flink.api.common.typeutils.TypeSerializer[] r2, $r16;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r17, $r20;
        java.lang.Object $r8, $r18, $r21;
        java.lang.Integer $r9, $r22;
        org.apache.flink.api.java.typeutils.runtime.RowComparator $r13;
        org.apache.flink.api.java.typeutils.RowTypeInfo $r14, $r23;
        boolean[] $r15;
        org.apache.flink.api.common.typeutils.TypeComparator $r19;
        org.apache.flink.api.common.typeinfo.TypeInformation[] $r24;
        org.apache.flink.api.common.typeinfo.TypeInformation $r25;
        org.apache.flink.api.common.typeutils.TypeSerializer $r26;
        boolean $z0, $z1, $z2, $z3;
        int[] r27;
        org.apache.flink.api.common.typeutils.TypeComparator[] r28;

        r0 := @this: org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig;

        $r3 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "No field comparators were defined for the TupleTypeComparatorBuilder.");

        $r4 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z1, "No key fields were defined for the TupleTypeComparatorBuilder.");

        $r5 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r6 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i3 != $i4 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z2, "The number of field comparators and key fields is not equal.");

        $r7 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r8 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r7);

        $r9 = (java.lang.Integer) $r8;

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if i0 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z3, "The maximum key field must be greater or equal than 0.");

        $i5 = i0 + 1;

        r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[$i5];

        i12 = 0;

     label09:
        if i12 > i0 goto label10;

        $r23 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: org.apache.flink.api.java.typeutils.RowTypeInfo this$0>;

        $r24 = $r23.<org.apache.flink.api.java.typeutils.RowTypeInfo: org.apache.flink.api.common.typeinfo.TypeInformation[] types>;

        $r25 = $r24[i12];

        $r26 = virtualinvoke $r25.<org.apache.flink.api.common.typeinfo.TypeInformation: org.apache.flink.api.common.typeutils.TypeSerializer createSerializer(org.apache.flink.api.common.ExecutionConfig)>(r1);

        r2[i12] = $r26;

        i12 = i12 + 1;

        goto label09;

     label10:
        $r10 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $i6 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        r27 = newarray (int)[$i6];

        i13 = 0;

     label11:
        $i7 = lengthof r27;

        if i13 >= $i7 goto label12;

        $r20 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList logicalKeyFields>;

        $r21 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r22 = (java.lang.Integer) $r21;

        $i11 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        r27[i13] = $i11;

        i13 = i13 + 1;

        goto label11;

     label12:
        $r11 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i8 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        r28 = newarray (org.apache.flink.api.common.typeutils.TypeComparator)[$i8];

        i14 = 0;

     label13:
        $r12 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $i9 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if i14 >= $i9 goto label14;

        $r17 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: java.util.ArrayList fieldComparators>;

        $r18 = virtualinvoke $r17.<java.util.ArrayList: java.lang.Object get(int)>(i14);

        $r19 = (org.apache.flink.api.common.typeutils.TypeComparator) $r18;

        r28[i14] = $r19;

        i14 = i14 + 1;

        goto label13;

     label14:
        $r13 = new org.apache.flink.api.java.typeutils.runtime.RowComparator;

        $r14 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: org.apache.flink.api.java.typeutils.RowTypeInfo this$0>;

        $i10 = virtualinvoke $r14.<org.apache.flink.api.java.typeutils.RowTypeInfo: int getArity()>();

        $r16 = (org.apache.flink.api.common.typeutils.TypeSerializer[]) r2;

        $r15 = r0.<org.apache.flink.api.java.typeutils.RowTypeInfo$RowTypeComparatorBuilder: boolean[] comparatorOrders>;

        specialinvoke $r13.<org.apache.flink.api.java.typeutils.runtime.RowComparator: void <init>(int,int[],org.apache.flink.api.common.typeutils.TypeComparator[],org.apache.flink.api.common.typeutils.TypeSerializer[],boolean[])>($i10, r27, r28, $r16, $r15);

        return $r13;
    }
}
