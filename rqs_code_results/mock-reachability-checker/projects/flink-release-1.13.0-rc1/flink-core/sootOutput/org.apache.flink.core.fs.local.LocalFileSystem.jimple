public class org.apache.flink.core.fs.local.LocalFileSystem extends org.apache.flink.core.fs.FileSystem
{
    private static final java.net.URI LOCAL_URI;
    private static final org.apache.flink.core.fs.local.LocalFileSystem INSTANCE;
    private final java.net.URI workingDir;
    private final java.net.URI homeDir;

    public void <init>()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        java.io.File $r1, $r4;
        java.lang.String $r2, $r5;
        java.net.URI $r3, $r6;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        specialinvoke r0.<org.apache.flink.core.fs.FileSystem: void <init>()>();

        $r1 = new java.io.File;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.dir");

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r1.<java.io.File: java.net.URI toURI()>();

        r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI workingDir> = $r3;

        $r4 = new java.io.File;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = virtualinvoke $r4.<java.io.File: java.net.URI toURI()>();

        r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI homeDir> = $r6;

        return;
    }

    public org.apache.flink.core.fs.BlockLocation[] getFileBlockLocations(org.apache.flink.core.fs.FileStatus, long, long) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.FileStatus r1;
        long l0, l1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        org.apache.flink.core.fs.local.LocalFileStatus $r7;
        org.apache.flink.core.fs.BlockLocation[] $r8;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.FileStatus;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = r1 instanceof org.apache.flink.core.fs.local.LocalFileStatus;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.flink.core.fs.local.LocalFileStatus) r1;

        $r8 = virtualinvoke $r7.<org.apache.flink.core.fs.local.LocalFileStatus: org.apache.flink.core.fs.BlockLocation[] getBlockLocations()>();

        return $r8;

     label1:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File status does not belong to the LocalFileSystem: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        java.io.File r2;
        boolean $z0;
        java.io.FileNotFoundException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r11;
        org.apache.flink.core.fs.local.LocalFileStatus $r12;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r12 = new org.apache.flink.core.fs.local.LocalFileStatus;

        specialinvoke $r12.<org.apache.flink.core.fs.local.LocalFileStatus: void <init>(java.io.File,org.apache.flink.core.fs.FileSystem)>(r2, r0);

        return $r12;

     label1:
        $r3 = new java.io.FileNotFoundException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or the user running Flink (\'");

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.name");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') has insufficient permissions to access it.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r3;
    }

    public java.net.URI getUri()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        java.net.URI $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = <org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI LOCAL_URI>;

        return $r1;
    }

    public org.apache.flink.core.fs.Path getWorkingDirectory()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path $r1;
        java.net.URI $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = new org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI workingDir>;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r2);

        return $r1;
    }

    public org.apache.flink.core.fs.Path getHomeDirectory()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path $r1;
        java.net.URI $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = new org.apache.flink.core.fs.Path;

        $r2 = r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI homeDir>;

        specialinvoke $r1.<org.apache.flink.core.fs.Path: void <init>(java.net.URI)>($r2);

        return $r1;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path, int) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        int i0;
        org.apache.flink.core.fs.FSDataInputStream $r2;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path)>(r1);

        return $r2;
    }

    public org.apache.flink.core.fs.FSDataInputStream open(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        java.io.File r2;
        org.apache.flink.core.fs.local.LocalDataInputStream $r3;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $r3 = new org.apache.flink.core.fs.local.LocalDataInputStream;

        specialinvoke $r3.<org.apache.flink.core.fs.local.LocalDataInputStream: void <init>(java.io.File)>(r2);

        return $r3;
    }

    public org.apache.flink.core.fs.local.LocalRecoverableWriter createRecoverableWriter() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.local.LocalRecoverableWriter $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = new org.apache.flink.core.fs.local.LocalRecoverableWriter;

        specialinvoke $r1.<org.apache.flink.core.fs.local.LocalRecoverableWriter: void <init>(org.apache.flink.core.fs.local.LocalFileSystem)>(r0);

        return $r1;
    }

    public boolean exists(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        java.io.File r2;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        return $z0;
    }

    public org.apache.flink.core.fs.FileStatus[] listStatus(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1, $r5;
        java.io.File r2;
        org.apache.flink.core.fs.FileStatus[] r3, $r8;
        java.lang.String[] r4;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.String $r6;
        org.apache.flink.core.fs.FileStatus $r7;
        org.apache.flink.core.fs.local.LocalFileStatus $r9;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r2.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label2;

        $r8 = newarray (org.apache.flink.core.fs.FileStatus)[1];

        $r9 = new org.apache.flink.core.fs.local.LocalFileStatus;

        specialinvoke $r9.<org.apache.flink.core.fs.local.LocalFileStatus: void <init>(java.io.File,org.apache.flink.core.fs.FileSystem)>(r2, r0);

        $r8[0] = $r9;

        return $r8;

     label2:
        r4 = virtualinvoke r2.<java.io.File: java.lang.String[] list()>();

        if r4 != null goto label3;

        return null;

     label3:
        $i0 = lengthof r4;

        r3 = newarray (org.apache.flink.core.fs.FileStatus)[$i0];

        i2 = 0;

     label4:
        $i1 = lengthof r4;

        if i2 >= $i1 goto label5;

        $r5 = new org.apache.flink.core.fs.Path;

        $r6 = r4[i2];

        specialinvoke $r5.<org.apache.flink.core.fs.Path: void <init>(org.apache.flink.core.fs.Path,java.lang.String)>(r1, $r6);

        $r7 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.FileStatus getFileStatus(org.apache.flink.core.fs.Path)>($r5);

        r3[i2] = $r7;

        i2 = i2 + 1;

        goto label4;

     label5:
        return r3;
    }

    public boolean delete(org.apache.flink.core.fs.Path, boolean) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.File r2;
        java.io.File[] r3;
        int $i0;
        java.io.IOException $r4, $r11;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16;
        java.lang.String $r7, $r10, $r14, $r17;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $z1 = virtualinvoke r2.<java.io.File: boolean isFile()>();

        if $z1 == 0 goto label1;

        $z3 = virtualinvoke r2.<java.io.File: boolean delete()>();

        return $z3;

     label1:
        if z0 != 0 goto label3;

        $z2 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label3;

        r3 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles()>();

        if r3 != null goto label2;

        $r11 = new java.io.IOException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r14 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist or an I/O error occurred");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label2:
        $i0 = lengthof r3;

        if $i0 == 0 goto label3;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directory ");

        $r7 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not empty");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label3:
        $z4 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(java.io.File)>(r2);

        return $z4;
    }

    private boolean delete(java.io.File) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        java.io.File r1, r4;
        java.io.File[] r2;
        int i0, i1;
        boolean z0, $z1, $z2, $z3;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: java.io.File;

        $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label4;

        r2 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        if r2 == null goto label3;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r2[i1];

        z0 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean delete(java.io.File)>(r4);

        if z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $z2 = virtualinvoke r1.<java.io.File: boolean delete()>();

        return $z2;

     label5:
        $z3 = virtualinvoke r1.<java.io.File: boolean delete()>();

        return $z3;
    }

    public boolean mkdirs(org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        java.io.File $r3;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "path is null");

        $r3 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $z0 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean mkdirsInternal(java.io.File)>($r3);

        return $z0;
    }

    private boolean mkdirsInternal(java.io.File) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        java.io.File r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.nio.file.FileAlreadyExistsException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z5 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z5 != 0 goto label2;

        $r3 = new java.nio.file.FileAlreadyExistsException;

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke $r3.<java.nio.file.FileAlreadyExistsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label2:
        r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        if r2 == null goto label3;

        $z4 = specialinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean mkdirsInternal(java.io.File)>(r2);

        if $z4 == 0 goto label5;

     label3:
        $z2 = virtualinvoke r1.<java.io.File: boolean mkdir()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label5;

     label4:
        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        return $z6;
    }

    public org.apache.flink.core.fs.FSDataOutputStream create(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.FileSystem$WriteMode) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1, r3;
        org.apache.flink.core.fs.FileSystem$WriteMode r2, $r12;
        java.io.File r4;
        boolean $z0, $z1;
        org.apache.flink.core.fs.local.LocalDataOutputStream $r6;
        java.io.IOException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r15, $r16;
        java.lang.String $r11, $r17;
        java.nio.file.FileAlreadyExistsException $r13;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.FileSystem$WriteMode;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "filePath");

        $z0 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean exists(org.apache.flink.core.fs.Path)>(r1);

        if $z0 == 0 goto label1;

        $r12 = <org.apache.flink.core.fs.FileSystem$WriteMode: org.apache.flink.core.fs.FileSystem$WriteMode NO_OVERWRITE>;

        if r2 != $r12 goto label1;

        $r13 = new java.nio.file.FileAlreadyExistsException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File already exists: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.nio.file.FileAlreadyExistsException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        r3 = virtualinvoke r1.<org.apache.flink.core.fs.Path: org.apache.flink.core.fs.Path getParent()>();

        if r3 == null goto label2;

        $z1 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: boolean mkdirs(org.apache.flink.core.fs.Path)>(r3);

        if $z1 != 0 goto label2;

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mkdirs failed to create ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label2:
        r4 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        $r6 = new org.apache.flink.core.fs.local.LocalDataOutputStream;

        specialinvoke $r6.<org.apache.flink.core.fs.local.LocalDataOutputStream: void <init>(java.io.File)>(r4);

        return $r6;
    }

    public boolean rename(org.apache.flink.core.fs.Path, org.apache.flink.core.fs.Path) throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1, r2;
        java.io.File r3, r4, r5;
        java.nio.file.Path $r7, $r8;
        java.nio.file.CopyOption[] $r9;
        java.nio.file.StandardCopyOption $r10;
        java.lang.Exception $r12;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 := @parameter1: org.apache.flink.core.fs.Path;

        r3 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r1);

        r4 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: java.io.File pathToFile(org.apache.flink.core.fs.Path)>(r2);

        r5 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke r5.<java.io.File: boolean mkdirs()>();

     label1:
        $r7 = virtualinvoke r3.<java.io.File: java.nio.file.Path toPath()>();

        $r8 = virtualinvoke r4.<java.io.File: java.nio.file.Path toPath()>();

        $r9 = newarray (java.nio.file.CopyOption)[1];

        $r10 = <java.nio.file.StandardCopyOption: java.nio.file.StandardCopyOption REPLACE_EXISTING>;

        $r9[0] = $r10;

        staticinvoke <java.nio.file.Files: java.nio.file.Path move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>($r7, $r8, $r9);

     label2:
        return 1;

     label3:
        $r12 := @caughtexception;

        return 0;

        catch java.nio.file.NoSuchFileException from label1 to label2 with label3;
        catch java.nio.file.AccessDeniedException from label1 to label2 with label3;
        catch java.nio.file.DirectoryNotEmptyException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public boolean isDistributedFS()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        return 0;
    }

    public org.apache.flink.core.fs.FileSystemKind getKind()
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.FileSystemKind $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = <org.apache.flink.core.fs.FileSystemKind: org.apache.flink.core.fs.FileSystemKind FILE_SYSTEM>;

        return $r1;
    }

    public java.io.File pathToFile(org.apache.flink.core.fs.Path)
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.Path r1;
        java.lang.String r2;
        int $i0;
        java.io.File $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        r1 := @parameter0: org.apache.flink.core.fs.Path;

        r2 = virtualinvoke r1.<org.apache.flink.core.fs.Path: java.lang.String getPath()>();

        if r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Cannot convert a null path to File");

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(".");

        return $r4;

     label3:
        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2);

        return $r3;
    }

    public static java.net.URI getLocalFsURI()
    {
        java.net.URI $r0;

        $r0 = <org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI LOCAL_URI>;

        return $r0;
    }

    public static org.apache.flink.core.fs.local.LocalFileSystem getSharedInstance()
    {
        org.apache.flink.core.fs.local.LocalFileSystem $r0;

        $r0 = <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem INSTANCE>;

        return $r0;
    }

    public volatile org.apache.flink.core.fs.RecoverableWriter createRecoverableWriter() throws java.io.IOException
    {
        org.apache.flink.core.fs.local.LocalFileSystem r0;
        org.apache.flink.core.fs.local.LocalRecoverableWriter $r1;

        r0 := @this: org.apache.flink.core.fs.local.LocalFileSystem;

        $r1 = virtualinvoke r0.<org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalRecoverableWriter createRecoverableWriter()>();

        return $r1;
    }

    static void <clinit>()
    {
        boolean $z0;
        org.apache.flink.core.fs.local.LocalFileSystem $r0;
        java.net.URI $r1;

        $z0 = staticinvoke <org.apache.flink.util.OperatingSystem: boolean isWindows()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("file:/");

        goto label2;

     label1:
        $r1 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>("file:///");

     label2:
        <org.apache.flink.core.fs.local.LocalFileSystem: java.net.URI LOCAL_URI> = $r1;

        $r0 = new org.apache.flink.core.fs.local.LocalFileSystem;

        specialinvoke $r0.<org.apache.flink.core.fs.local.LocalFileSystem: void <init>()>();

        <org.apache.flink.core.fs.local.LocalFileSystem: org.apache.flink.core.fs.local.LocalFileSystem INSTANCE> = $r0;

        return;
    }
}
