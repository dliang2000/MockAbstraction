public class org.apache.flink.api.java.ClosureCleanerTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testNonSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.NonSerializableMapCreator $r3;
        java.lang.Integer $r4, $r6;
        java.lang.Object $r5;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.NonSerializableMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.NonSerializableMapCreator: void <init>()>();

        r2 = interfaceinvoke $r3.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>(r2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r5 = interfaceinvoke r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r4);

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testCleanedNonSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.NonSerializableMapCreator $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.NonSerializableMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.NonSerializableMapCreator: void <init>()>();

        r2 = interfaceinvoke $r3.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r2, $r4, 1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.SerializableMapCreator $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.SerializableMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.SerializableMapCreator: void <init>(int)>(1);

        r2 = interfaceinvoke $r3.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r2, $r4, 1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testNestedSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.NestedSerializableMapCreator $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.NestedSerializableMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.NestedSerializableMapCreator: void <init>(int)>(1);

        r2 = interfaceinvoke $r3.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r2, $r4, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>(r2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testNestedNonSerializable() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.NestedNonSerializableMapCreator $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.NestedNonSerializableMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.NestedNonSerializableMapCreator: void <init>(int)>(1);

        r2 = interfaceinvoke $r3.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>(r2, $r4, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>(r2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testWrapperClass() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r2;
        int i0;
        org.apache.flink.api.java.NonSerializableMapCreator $r4;
        org.apache.flink.api.java.WrapperMapFunction $r5;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r6;
        java.lang.Integer $r7, $r8;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r4 = new org.apache.flink.api.java.NonSerializableMapCreator;

        specialinvoke $r4.<org.apache.flink.api.java.NonSerializableMapCreator: void <init>()>();

        r2 = interfaceinvoke $r4.<org.apache.flink.api.java.MapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r5 = new org.apache.flink.api.java.WrapperMapFunction;

        specialinvoke $r5.<org.apache.flink.api.java.WrapperMapFunction: void <init>(org.apache.flink.api.common.functions.MapFunction)>(r2);

        $r6 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r5, $r6, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>($r5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r8 = virtualinvoke $r5.<org.apache.flink.api.java.WrapperMapFunction: java.lang.Integer map(java.lang.Integer)>($r7);

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testComplexTopLevelClassClean() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        int i0;
        org.apache.flink.api.java.ComplexMap $r2;
        org.apache.flink.api.common.functions.MapFunction $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.ComplexMap;

        $r3 = staticinvoke <org.apache.flink.api.java.ClosureCleanerTest$lambda_testComplexTopLevelClassClean_85a829a2_1__78: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        specialinvoke $r2.<org.apache.flink.api.java.ComplexMap: void <init>(org.apache.flink.api.common.functions.MapFunction)>($r3);

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r4, 1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke $r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 5L);

        return;
    }

    public void testComplexInnerClassClean() throws java.lang.Exception
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        int i0;
        org.apache.flink.api.java.ClosureCleanerTest$InnerComplexMap $r2;
        org.apache.flink.api.common.functions.MapFunction $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;
        java.lang.Integer $r5, $r7;
        java.lang.Object $r6;
        long $l1;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.ClosureCleanerTest$InnerComplexMap;

        $r3 = staticinvoke <org.apache.flink.api.java.ClosureCleanerTest$lambda_testComplexInnerClassClean_85a829a2_1__79: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        specialinvoke $r2.<org.apache.flink.api.java.ClosureCleanerTest$InnerComplexMap: void <init>(org.apache.flink.api.java.ClosureCleanerTest,org.apache.flink.api.common.functions.MapFunction)>(r0, $r3);

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r4, 1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r6 = interfaceinvoke $r2.<org.apache.flink.api.common.functions.MapFunction: java.lang.Object map(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) i0;

        staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l1, 4L);

        return;
    }

    public void testSelfReferencingClean()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.java.NestedSelfReferencing $r2;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r3;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.NestedSelfReferencing;

        specialinvoke $r2.<org.apache.flink.api.java.NestedSelfReferencing: void <init>()>();

        $r3 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r3, 1);

        return;
    }

    public void testOuterStaticClassInnerStaticClassInnerAnonymousOrLocalClass()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.java.OuterMapCreator $r3;
        org.apache.flink.api.java.WrapperMapFunction $r4;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r5;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r3 = new org.apache.flink.api.java.OuterMapCreator;

        specialinvoke $r3.<org.apache.flink.api.java.OuterMapCreator: void <init>()>();

        r1 = virtualinvoke $r3.<org.apache.flink.api.java.OuterMapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r4 = new org.apache.flink.api.java.WrapperMapFunction;

        specialinvoke $r4.<org.apache.flink.api.java.WrapperMapFunction: void <init>(org.apache.flink.api.common.functions.MapFunction)>(r1);

        $r5 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r4, $r5, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>($r4);

        return;
    }

    public void testRealOuterStaticClassInnerStaticClassInnerAnonymousOrLocalClass()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.common.functions.MapFunction r1;
        org.apache.flink.api.java.OuterMapCreator $r4;
        org.apache.flink.api.java.WrapperMapFunction $r5;
        org.apache.flink.api.java.tuple.Tuple1 $r6;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r7;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r4 = new org.apache.flink.api.java.OuterMapCreator;

        specialinvoke $r4.<org.apache.flink.api.java.OuterMapCreator: void <init>()>();

        r1 = virtualinvoke $r4.<org.apache.flink.api.java.OuterMapCreator: org.apache.flink.api.common.functions.MapFunction getMap()>();

        $r5 = new org.apache.flink.api.java.WrapperMapFunction;

        specialinvoke $r5.<org.apache.flink.api.java.WrapperMapFunction: void <init>(org.apache.flink.api.common.functions.MapFunction)>(r1);

        $r6 = new org.apache.flink.api.java.tuple.Tuple1;

        specialinvoke $r6.<org.apache.flink.api.java.tuple.Tuple1: void <init>(java.lang.Object)>($r5);

        $r7 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r6, $r7, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>($r6);

        return;
    }

    public void testRecursiveClass()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.java.RecursiveClass $r2, $r3;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r4;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.RecursiveClass;

        $r3 = new org.apache.flink.api.java.RecursiveClass;

        specialinvoke $r3.<org.apache.flink.api.java.RecursiveClass: void <init>()>();

        specialinvoke $r2.<org.apache.flink.api.java.RecursiveClass: void <init>(org.apache.flink.api.java.RecursiveClass)>($r3);

        $r4 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r4, 1);

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void ensureSerializable(java.lang.Object)>($r2);

        return;
    }

    public void testWriteReplace()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.java.WithWriteReplace$SerializablePayload $r2;
        org.apache.flink.api.java.WithWriteReplace$Payload $r3, $r4;
        java.lang.String $r5;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r6;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.WithWriteReplace$SerializablePayload;

        $r3 = new org.apache.flink.api.java.WithWriteReplace$Payload;

        specialinvoke $r3.<org.apache.flink.api.java.WithWriteReplace$Payload: void <init>(java.lang.String)>("text");

        specialinvoke $r2.<org.apache.flink.api.java.WithWriteReplace$SerializablePayload: void <init>(org.apache.flink.api.java.WithWriteReplace$Payload)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.WithWriteReplace$SerializablePayload: org.apache.flink.api.java.WithWriteReplace$Payload get()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.WithWriteReplace$Payload: java.lang.String getRaw()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("text", $r5);

        $r6 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel TOP_LEVEL>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r6, 1);

        return;
    }

    public void testWriteReplaceRecursive()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        org.apache.flink.api.java.WithWriteReplace $r2;
        org.apache.flink.api.java.WithWriteReplace$Payload $r3, $r4;
        java.lang.String $r5;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r6;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r2 = new org.apache.flink.api.java.WithWriteReplace;

        $r3 = new org.apache.flink.api.java.WithWriteReplace$Payload;

        specialinvoke $r3.<org.apache.flink.api.java.WithWriteReplace$Payload: void <init>(java.lang.String)>("text");

        specialinvoke $r2.<org.apache.flink.api.java.WithWriteReplace: void <init>(org.apache.flink.api.java.WithWriteReplace$Payload)>($r3);

        $r4 = virtualinvoke $r2.<org.apache.flink.api.java.WithWriteReplace: org.apache.flink.api.java.WithWriteReplace$Payload getPayload()>();

        $r5 = virtualinvoke $r4.<org.apache.flink.api.java.WithWriteReplace$Payload: java.lang.String getRaw()>();

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("text", $r5);

        $r6 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r2, $r6, 1);

        return;
    }

    public void testCleanObject()
    {
        org.apache.flink.api.java.ClosureCleanerTest r0;
        java.lang.Object $r1;
        org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel $r2;

        r0 := @this: org.apache.flink.api.java.ClosureCleanerTest;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel: org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel RECURSIVE>;

        staticinvoke <org.apache.flink.api.java.ClosureCleaner: void clean(java.lang.Object,org.apache.flink.api.common.ExecutionConfig$ClosureCleanerLevel,boolean)>($r1, $r2, 1);

        return;
    }

    private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)
    {
        java.lang.invoke.SerializedLambda r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.apache.flink.api.common.functions.MapFunction $r7, $r13;
        byte b3;
        java.lang.IllegalArgumentException $r14;

        r0 := @parameter0: java.lang.invoke.SerializedLambda;

        r1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodName()>();

        b3 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 1914644412: goto label1;
            case 2025570583: goto label2;
            default: goto label3;
        };

     label1:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testComplexTopLevelClassClean$85a829a2$1");

        if $z11 == 0 goto label3;

        b3 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("lambda$testComplexInnerClassClean$85a829a2$1");

        if $z0 == 0 goto label3;

        b3 = 1;

     label3:
        lookupswitch(b3)
        {
            case 0: goto label4;
            case 1: goto label5;
            default: goto label6;
        };

     label4:
        $i2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i2 != 6 goto label6;

        $r8 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z6 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z6 == 0 goto label6;

        $r9 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z7 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z7 == 0 goto label6;

        $r10 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z8 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z8 == 0 goto label6;

        $r11 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z9 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/ClosureCleanerTest");

        if $z9 == 0 goto label6;

        $r12 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z10 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Integer;)Ljava/lang/Integer;");

        if $z10 == 0 goto label6;

        $r13 = staticinvoke <org.apache.flink.api.java.ClosureCleanerTest$lambda_testComplexTopLevelClassClean_85a829a2_1__632: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r13;

     label5:
        $i1 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: int getImplMethodKind()>();

        if $i1 != 6 goto label6;

        $r2 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceClass()>();

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/common/functions/MapFunction");

        if $z1 == 0 goto label6;

        $r3 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodName()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>("map");

        if $z2 == 0 goto label6;

        $r4 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getFunctionalInterfaceMethodSignature()>();

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Object;)Ljava/lang/Object;");

        if $z3 == 0 goto label6;

        $r5 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplClass()>();

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>("org/apache/flink/api/java/ClosureCleanerTest");

        if $z4 == 0 goto label6;

        $r6 = virtualinvoke r0.<java.lang.invoke.SerializedLambda: java.lang.String getImplMethodSignature()>();

        $z5 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("(Ljava/lang/Integer;)Ljava/lang/Integer;");

        if $z5 == 0 goto label6;

        $r7 = staticinvoke <org.apache.flink.api.java.ClosureCleanerTest$lambda_testComplexInnerClassClean_85a829a2_1__631: org.apache.flink.api.common.functions.MapFunction bootstrap$()>();

        return $r7;

     label6:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid lambda deserialization");

        throw $r14;
    }

    public static java.lang.Integer lambda$testComplexInnerClassClean$85a829a2$1(java.lang.Integer) throws java.lang.Exception
    {
        java.lang.Integer r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r1;
    }

    public static java.lang.Integer lambda$testComplexTopLevelClassClean$85a829a2$1(java.lang.Integer) throws java.lang.Exception
    {
        java.lang.Integer r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Integer;

        $i0 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r1;
    }
}
