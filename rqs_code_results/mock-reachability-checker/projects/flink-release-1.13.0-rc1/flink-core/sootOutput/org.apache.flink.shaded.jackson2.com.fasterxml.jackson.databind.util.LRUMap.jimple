public class org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap extends java.lang.Object implements org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LookupCache, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final transient int _maxEntries;
    protected final transient java.util.concurrent.ConcurrentHashMap _map;
    protected transient int _jdkSerializeMaxEntries;

    public void <init>(int, int)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        int i0, i1;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, 0.8F, 4);

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map> = $r1;

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _maxEntries> = i1;

        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.lang.Object r1, r2, $r7;
        java.util.concurrent.ConcurrentHashMap $r5, $r6, $r9;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _maxEntries>;

        if $i0 < $i1 goto label6;

        entermonitor r0;

     label1:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $i2 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _maxEntries>;

        if $i2 < $i3 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: void clear()>();

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.lang.Object r1, r2, $r7;
        java.util.concurrent.ConcurrentHashMap $r5, $r6, $r9;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r5 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _maxEntries>;

        if $i0 < $i1 goto label6;

        entermonitor r0;

     label1:
        $r9 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $i2 = virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: int size()>();

        $i3 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _maxEntries>;

        if $i2 < $i3 goto label2;

        virtualinvoke r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: void clear()>();

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r10;

     label6:
        $r6 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public int size()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        $r1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: java.util.concurrent.ConcurrentHashMap _map>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.io.ObjectInputStream r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        $i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _jdkSerializeMaxEntries> = $i0;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0;
        java.io.ObjectOutputStream r1;
        int $i0;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _jdkSerializeMaxEntries>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        return;
    }

    protected java.lang.Object readResolve()
    {
        org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap r0, $r1;
        int $i0, $i1;

        r0 := @this: org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        $r1 = new org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap;

        $i1 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _jdkSerializeMaxEntries>;

        $i0 = r0.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: int _jdkSerializeMaxEntries>;

        specialinvoke $r1.<org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: void <init>(int,int)>($i1, $i0);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.shaded.jackson2.com.fasterxml.jackson.databind.util.LRUMap: long serialVersionUID> = 1L;

        return;
    }
}
