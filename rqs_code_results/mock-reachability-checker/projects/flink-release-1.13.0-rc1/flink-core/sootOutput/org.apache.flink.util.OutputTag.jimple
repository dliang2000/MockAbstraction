public class org.apache.flink.util.OutputTag extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String id;
    private final org.apache.flink.api.common.typeinfo.TypeInformation typeInfo;

    public void <init>(java.lang.String)
    {
        org.apache.flink.util.OutputTag r0;
        java.lang.String r1;
        boolean $z0, $z1;
        java.lang.Class $r4;
        org.apache.flink.api.common.typeinfo.TypeInformation $r5;
        org.apache.flink.api.common.functions.InvalidTypesException $r6, $r7;

        r0 := @this: org.apache.flink.util.OutputTag;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "OutputTag id cannot be null.");

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "OutputTag id must not be empty.");

        r0.<org.apache.flink.util.OutputTag: java.lang.String id> = r1;

     label3:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.flink.api.java.typeutils.TypeExtractor: org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.Object,java.lang.Class,java.lang.Class,int)>(r0, class "Lorg/apache/flink/util/OutputTag;", $r4, 0);

        r0.<org.apache.flink.util.OutputTag: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r5;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r7.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String,java.lang.Throwable)>("Could not determine TypeInformation for the OutputTag type. The most common reason is forgetting to make the OutputTag an anonymous inner class. It is also not possible to use generic type variables with OutputTags, such as \'Tuple2<A, B>\'.", $r6);

        throw $r7;

     label6:
        return;

        catch org.apache.flink.api.common.functions.InvalidTypesException from label3 to label4 with label5;
    }

    public void <init>(java.lang.String, org.apache.flink.api.common.typeinfo.TypeInformation)
    {
        org.apache.flink.util.OutputTag r0;
        java.lang.String r1;
        org.apache.flink.api.common.typeinfo.TypeInformation r2, $r5;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: org.apache.flink.util.OutputTag;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.api.common.typeinfo.TypeInformation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "OutputTag id cannot be null.");

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "OutputTag id must not be empty.");

        r0.<org.apache.flink.util.OutputTag: java.lang.String id> = r1;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "TypeInformation cannot be null.");

        $r5 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r4;

        r0.<org.apache.flink.util.OutputTag: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo> = $r5;

        return;
    }

    public static boolean isResponsibleFor(org.apache.flink.util.OutputTag, org.apache.flink.util.OutputTag)
    {
        org.apache.flink.util.OutputTag r0, r1;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.util.OutputTag;

        r1 := @parameter1: org.apache.flink.util.OutputTag;

        $z0 = virtualinvoke r1.<org.apache.flink.util.OutputTag: boolean equals(java.lang.Object)>(r0);

        return $z0;
    }

    public java.lang.String getId()
    {
        org.apache.flink.util.OutputTag r0;
        java.lang.String $r1;

        r0 := @this: org.apache.flink.util.OutputTag;

        $r1 = r0.<org.apache.flink.util.OutputTag: java.lang.String id>;

        return $r1;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()
    {
        org.apache.flink.util.OutputTag r0;
        org.apache.flink.api.common.typeinfo.TypeInformation $r1;

        r0 := @this: org.apache.flink.util.OutputTag;

        $r1 = r0.<org.apache.flink.util.OutputTag: org.apache.flink.api.common.typeinfo.TypeInformation typeInfo>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.util.OutputTag r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.flink.util.OutputTag;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $z0 = r1 instanceof org.apache.flink.util.OutputTag;

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.flink.util.OutputTag) r1;

        $r4 = r0.<org.apache.flink.util.OutputTag: java.lang.String id>;

        $r3 = r2.<org.apache.flink.util.OutputTag: java.lang.String id>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $z1;
    }

    public int hashCode()
    {
        org.apache.flink.util.OutputTag r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: org.apache.flink.util.OutputTag;

        $r1 = r0.<org.apache.flink.util.OutputTag: java.lang.String id>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.flink.util.OutputTag r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8;
        org.apache.flink.api.common.typeinfo.TypeInformation $r3;
        java.lang.String $r6, $r9;

        r0 := @this: org.apache.flink.util.OutputTag;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OutputTag(");

        $r3 = virtualinvoke r0.<org.apache.flink.util.OutputTag: org.apache.flink.api.common.typeinfo.TypeInformation getTypeInfo()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = r0.<org.apache.flink.util.OutputTag: java.lang.String id>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.OutputTag: long serialVersionUID> = 2L;

        return;
    }
}
