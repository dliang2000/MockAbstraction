class org.powermock.core.MockInvocation extends java.lang.Object
{
    private java.lang.Object object;
    private java.lang.String methodName;
    private java.lang.Class[] sig;
    private java.lang.Class objectType;
    private org.powermock.core.spi.MethodInvocationControl methodInvocationControl;
    private java.lang.reflect.Method method;

    transient void <init>(java.lang.Object, java.lang.String, java.lang.Class[])
    {
        org.powermock.core.MockInvocation r0;
        java.lang.Object r1;
        java.lang.String r2;
        java.lang.Class[] r3;

        r0 := @this: org.powermock.core.MockInvocation;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.powermock.core.MockInvocation: java.lang.Object object> = r1;

        r0.<org.powermock.core.MockInvocation: java.lang.String methodName> = r2;

        r0.<org.powermock.core.MockInvocation: java.lang.Class[] sig> = r3;

        specialinvoke r0.<org.powermock.core.MockInvocation: void init()>();

        return;
    }

    private void init()
    {
        org.powermock.core.MockInvocation r0;
        java.lang.Class r1, $r5, $r8, $r13, $r14;
        org.powermock.reflect.internal.proxy.UnproxiedType r2;
        java.lang.Object $r3, $r4, $r6, $r12;
        boolean $z0;
        org.powermock.core.spi.MethodInvocationControl $r7, $r15;
        java.lang.Class[] $r9;
        java.lang.String $r10;
        java.lang.reflect.Method $r11;

        r0 := @this: org.powermock.core.MockInvocation;

        $r3 = r0.<org.powermock.core.MockInvocation: java.lang.Object object>;

        $z0 = $r3 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r12 = r0.<org.powermock.core.MockInvocation: java.lang.Object object>;

        $r13 = (java.lang.Class) $r12;

        r0.<org.powermock.core.MockInvocation: java.lang.Class objectType> = $r13;

        $r14 = r0.<org.powermock.core.MockInvocation: java.lang.Class objectType>;

        $r15 = staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.MethodInvocationControl getStaticMethodInvocationControl(java.lang.Class)>($r14);

        r0.<org.powermock.core.MockInvocation: org.powermock.core.spi.MethodInvocationControl methodInvocationControl> = $r15;

        goto label2;

     label1:
        $r4 = r0.<org.powermock.core.MockInvocation: java.lang.Object object>;

        r1 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r2 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: org.powermock.reflect.internal.proxy.UnproxiedType getUnproxiedType(java.lang.Class)>(r1);

        $r5 = interfaceinvoke r2.<org.powermock.reflect.internal.proxy.UnproxiedType: java.lang.Class getOriginalType()>();

        r0.<org.powermock.core.MockInvocation: java.lang.Class objectType> = $r5;

        $r6 = r0.<org.powermock.core.MockInvocation: java.lang.Object object>;

        $r7 = staticinvoke <org.powermock.core.MockRepository: org.powermock.core.spi.MethodInvocationControl getInstanceMethodInvocationControl(java.lang.Object)>($r6);

        r0.<org.powermock.core.MockInvocation: org.powermock.core.spi.MethodInvocationControl methodInvocationControl> = $r7;

     label2:
        $r10 = r0.<org.powermock.core.MockInvocation: java.lang.String methodName>;

        $r9 = r0.<org.powermock.core.MockInvocation: java.lang.Class[] sig>;

        $r8 = r0.<org.powermock.core.MockInvocation: java.lang.Class objectType>;

        $r11 = staticinvoke <org.powermock.core.MockInvocation: java.lang.reflect.Method findMethodToInvoke(java.lang.String,java.lang.Class[],java.lang.Class)>($r10, $r9, $r8);

        r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method method> = $r11;

        return;
    }

    java.lang.Class getObjectType()
    {
        org.powermock.core.MockInvocation r0;
        java.lang.Class $r1;

        r0 := @this: org.powermock.core.MockInvocation;

        $r1 = r0.<org.powermock.core.MockInvocation: java.lang.Class objectType>;

        return $r1;
    }

    org.powermock.core.spi.MethodInvocationControl getMethodInvocationControl()
    {
        org.powermock.core.MockInvocation r0;
        org.powermock.core.spi.MethodInvocationControl $r1;

        r0 := @this: org.powermock.core.MockInvocation;

        $r1 = r0.<org.powermock.core.MockInvocation: org.powermock.core.spi.MethodInvocationControl methodInvocationControl>;

        return $r1;
    }

    java.lang.reflect.Method getMethod()
    {
        org.powermock.core.MockInvocation r0;
        java.lang.reflect.Method $r1;

        r0 := @this: org.powermock.core.MockInvocation;

        $r1 = r0.<org.powermock.core.MockInvocation: java.lang.reflect.Method method>;

        return $r1;
    }

    private static java.lang.reflect.Method findMethodToInvoke(java.lang.String, java.lang.Class[], java.lang.Class)
    {
        java.lang.String r0;
        java.lang.Class[] r1;
        java.lang.Class r2;
        org.powermock.reflect.exceptions.MethodNotFoundException $r5, $r6;
        java.lang.reflect.Method r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.Class;

     label1:
        r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getBestMethodCandidate(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r2, r0, r1, 1);

     label2:
        goto label7;

     label3:
        $r6 := @caughtexception;

     label4:
        r7 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(class "Ljava/lang/Class;", r0, r1);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        throw $r6;

     label7:
        return r7;

        catch org.powermock.reflect.exceptions.MethodNotFoundException from label1 to label2 with label3;
        catch org.powermock.reflect.exceptions.MethodNotFoundException from label4 to label5 with label6;
    }
}
