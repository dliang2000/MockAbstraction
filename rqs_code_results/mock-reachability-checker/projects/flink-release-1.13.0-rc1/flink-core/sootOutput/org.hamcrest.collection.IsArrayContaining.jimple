public class org.hamcrest.collection.IsArrayContaining extends org.hamcrest.TypeSafeMatcher
{
    private final org.hamcrest.Matcher elementMatcher;

    public void <init>(org.hamcrest.Matcher)
    {
        org.hamcrest.collection.IsArrayContaining r0;
        org.hamcrest.Matcher r1;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: org.hamcrest.Matcher;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.collection.IsArrayContaining: org.hamcrest.Matcher elementMatcher> = r1;

        return;
    }

    public boolean matchesSafely(java.lang.Object[])
    {
        org.hamcrest.collection.IsArrayContaining r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.Object r3;
        org.hamcrest.Matcher $r4;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: java.lang.Object[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r1[i1];

        $r4 = r0.<org.hamcrest.collection.IsArrayContaining: org.hamcrest.Matcher elementMatcher>;

        $z0 = interfaceinvoke $r4.<org.hamcrest.Matcher: boolean matches(java.lang.Object)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void describeMismatchSafely(java.lang.Object[], org.hamcrest.Description)
    {
        org.hamcrest.collection.IsArrayContaining r0;
        java.lang.Object[] r1;
        org.hamcrest.Description r2;
        java.util.List $r3;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.collection.IsArrayContaining r0;
        org.hamcrest.Description r1, $r2;
        org.hamcrest.Matcher $r3;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("an array containing ");

        $r3 = r0.<org.hamcrest.collection.IsArrayContaining: org.hamcrest.Matcher elementMatcher>;

        interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendDescriptionOf(org.hamcrest.SelfDescribing)>($r3);

        return;
    }

    public static org.hamcrest.Matcher hasItemInArray(org.hamcrest.Matcher)
    {
        org.hamcrest.Matcher r0;
        org.hamcrest.collection.IsArrayContaining $r1;

        r0 := @parameter0: org.hamcrest.Matcher;

        $r1 = new org.hamcrest.collection.IsArrayContaining;

        specialinvoke $r1.<org.hamcrest.collection.IsArrayContaining: void <init>(org.hamcrest.Matcher)>(r0);

        return $r1;
    }

    public static org.hamcrest.Matcher hasItemInArray(java.lang.Object)
    {
        java.lang.Object r0;
        org.hamcrest.Matcher r1, $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <org.hamcrest.core.IsEqual: org.hamcrest.Matcher equalTo(java.lang.Object)>(r0);

        $r2 = staticinvoke <org.hamcrest.collection.IsArrayContaining: org.hamcrest.Matcher hasItemInArray(org.hamcrest.Matcher)>(r1);

        return $r2;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.collection.IsArrayContaining r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Object[] $r3;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Object[]) r1;

        virtualinvoke r0.<org.hamcrest.collection.IsArrayContaining: void describeMismatchSafely(java.lang.Object[],org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.collection.IsArrayContaining r0;
        java.lang.Object r1;
        java.lang.Object[] $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.collection.IsArrayContaining;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Object[]) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.collection.IsArrayContaining: boolean matchesSafely(java.lang.Object[])>($r2);

        return $z0;
    }
}
