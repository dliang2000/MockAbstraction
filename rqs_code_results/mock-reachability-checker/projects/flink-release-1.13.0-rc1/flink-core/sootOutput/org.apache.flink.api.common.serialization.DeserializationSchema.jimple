public interface  org.apache.flink.api.common.serialization.DeserializationSchema extends java.lang.Object implements java.io.Serializable, org.apache.flink.api.java.typeutils.ResultTypeQueryable
{

    public void open(org.apache.flink.api.common.serialization.DeserializationSchema$InitializationContext) throws java.lang.Exception
    {
        org.apache.flink.api.common.serialization.DeserializationSchema r0;
        org.apache.flink.api.common.serialization.DeserializationSchema$InitializationContext r1;

        r0 := @this: org.apache.flink.api.common.serialization.DeserializationSchema;

        r1 := @parameter0: org.apache.flink.api.common.serialization.DeserializationSchema$InitializationContext;

        return;
    }

    public abstract java.lang.Object deserialize(byte[]) throws java.io.IOException;

    public void deserialize(byte[], org.apache.flink.util.Collector) throws java.io.IOException
    {
        org.apache.flink.api.common.serialization.DeserializationSchema r0;
        byte[] r1;
        org.apache.flink.util.Collector r2;
        java.lang.Object r3;

        r0 := @this: org.apache.flink.api.common.serialization.DeserializationSchema;

        r1 := @parameter0: byte[];

        r2 := @parameter1: org.apache.flink.util.Collector;

        r3 = interfaceinvoke r0.<org.apache.flink.api.common.serialization.DeserializationSchema: java.lang.Object deserialize(byte[])>(r1);

        if r3 == null goto label1;

        interfaceinvoke r2.<org.apache.flink.util.Collector: void collect(java.lang.Object)>(r3);

     label1:
        return;
    }

    public abstract boolean isEndOfStream(java.lang.Object);
}
