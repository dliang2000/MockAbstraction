public class org.powermock.core.WildcardMatcher extends java.lang.Object
{
    private static final char WILDCARD;

    public void <init>()
    {
        org.powermock.core.WildcardMatcher r0;

        r0 := @this: org.powermock.core.WildcardMatcher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean matches(java.lang.String, java.lang.String)
    {
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        char c1, c2;
        java.lang.StringBuilder $r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r6;
        java.lang.String r7, r8, r9, r10;
        boolean[] r11, r12;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        if r7 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text cannot be null");

        throw $r6;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(0);

        r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(0);

        r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = virtualinvoke r10.<java.lang.String: int length()>();

        $i3 = i0 + 1;

        r11 = newarray (boolean)[$i3];

        $i4 = i0 + 1;

        r12 = newarray (boolean)[$i4];

        r12[0] = 1;

        i10 = 0;

     label2:
        $i5 = virtualinvoke r9.<java.lang.String: int length()>();

        if i10 >= $i5 goto label9;

        c1 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i10);

        $i6 = i0 + 1;

        r11 = newarray (boolean)[$i6];

        i11 = 0;

     label3:
        if i11 >= i0 goto label8;

        c2 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i11);

        $z1 = r12[i11];

        if $z1 == 0 goto label4;

        if c2 != 42 goto label4;

        $i9 = i11 + 1;

        r12[$i9] = 1;

     label4:
        $z2 = r12[i11];

        if $z2 == 0 goto label5;

        if c2 != c1 goto label5;

        $i8 = i11 + 1;

        r11[$i8] = 1;

     label5:
        $z3 = r12[i11];

        if $z3 == 0 goto label6;

        if c2 != 42 goto label6;

        r11[i11] = 1;

     label6:
        $z4 = r12[i11];

        if $z4 == 0 goto label7;

        if c2 != 42 goto label7;

        $i7 = i11 + 1;

        r11[$i7] = 1;

     label7:
        i11 = i11 + 1;

        goto label3;

     label8:
        r12 = r11;

        i10 = i10 + 1;

        goto label2;

     label9:
        $z0 = r11[i0];

        return $z0;
    }

    public static boolean matchesAny(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        $z1 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matches(java.lang.String,java.lang.String)>(r1, r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static boolean matchesAny(java.lang.Iterable, java.lang.String)
    {
        java.lang.Iterable r0;
        java.lang.String r1, r3;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.lang.String;

        r2 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r4;

        $z1 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matches(java.lang.String,java.lang.String)>(r1, r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static boolean matchesAny(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, r3;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r0[i1];

        $z0 = staticinvoke <org.powermock.core.WildcardMatcher: boolean matches(java.lang.String,java.lang.String)>(r1, r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static void <clinit>()
    {
        <org.powermock.core.WildcardMatcher: char WILDCARD> = 42;

        return;
    }
}
