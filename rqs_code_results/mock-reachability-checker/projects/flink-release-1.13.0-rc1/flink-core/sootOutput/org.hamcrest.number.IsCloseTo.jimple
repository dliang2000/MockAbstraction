public class org.hamcrest.number.IsCloseTo extends org.hamcrest.TypeSafeMatcher
{
    private final double delta;
    private final double value;

    public void <init>(double, double)
    {
        org.hamcrest.number.IsCloseTo r0;
        double d0, d1;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>()>();

        r0.<org.hamcrest.number.IsCloseTo: double delta> = d1;

        r0.<org.hamcrest.number.IsCloseTo: double value> = d0;

        return;
    }

    public boolean matchesSafely(java.lang.Double)
    {
        org.hamcrest.number.IsCloseTo r0;
        java.lang.Double r1;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: java.lang.Double;

        $d0 = specialinvoke r0.<org.hamcrest.number.IsCloseTo: double actualDelta(java.lang.Double)>(r1);

        $b0 = $d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void describeMismatchSafely(java.lang.Double, org.hamcrest.Description)
    {
        org.hamcrest.number.IsCloseTo r0;
        java.lang.Double r1, $r5;
        org.hamcrest.Description r2, $r3, $r4;
        double $d0;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" differed by ");

        $d0 = specialinvoke r0.<org.hamcrest.number.IsCloseTo: double actualDelta(java.lang.Double)>(r1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r5);

        return;
    }

    public void describeTo(org.hamcrest.Description)
    {
        org.hamcrest.number.IsCloseTo r0;
        org.hamcrest.Description r1, $r2, $r4, $r5;
        double $d0, $d1;
        java.lang.Double $r3, $r6;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: org.hamcrest.Description;

        $r2 = interfaceinvoke r1.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("a numeric value within ");

        $d0 = r0.<org.hamcrest.number.IsCloseTo: double delta>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r4 = interfaceinvoke $r2.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r3);

        $r5 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" of ");

        $d1 = r0.<org.hamcrest.number.IsCloseTo: double value>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r5.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>($r6);

        return;
    }

    private double actualDelta(java.lang.Double)
    {
        org.hamcrest.number.IsCloseTo r0;
        java.lang.Double r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<org.hamcrest.number.IsCloseTo: double value>;

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2);

        $d4 = r0.<org.hamcrest.number.IsCloseTo: double delta>;

        $d5 = $d3 - $d4;

        return $d5;
    }

    public static org.hamcrest.Matcher closeTo(double, double)
    {
        double d0, d1;
        org.hamcrest.number.IsCloseTo $r0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r0 = new org.hamcrest.number.IsCloseTo;

        specialinvoke $r0.<org.hamcrest.number.IsCloseTo: void <init>(double,double)>(d0, d1);

        return $r0;
    }

    public volatile void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.number.IsCloseTo r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;
        java.lang.Double $r3;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        $r3 = (java.lang.Double) r1;

        virtualinvoke r0.<org.hamcrest.number.IsCloseTo: void describeMismatchSafely(java.lang.Double,org.hamcrest.Description)>($r3, r2);

        return;
    }

    public volatile boolean matchesSafely(java.lang.Object)
    {
        org.hamcrest.number.IsCloseTo r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        boolean $z0;

        r0 := @this: org.hamcrest.number.IsCloseTo;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $z0 = virtualinvoke r0.<org.hamcrest.number.IsCloseTo: boolean matchesSafely(java.lang.Double)>($r2);

        return $z0;
    }
}
