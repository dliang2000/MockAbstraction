public class org.mockito.internal.invocation.InterceptedInvocation extends java.lang.Object implements org.mockito.invocation.Invocation, org.mockito.internal.exceptions.VerificationAwareInvocation
{
    private static final long serialVersionUID;
    private final org.mockito.internal.invocation.mockref.MockReference mockRef;
    private final org.mockito.internal.invocation.MockitoMethod mockitoMethod;
    private final java.lang.Object[] arguments;
    private final java.lang.Object[] rawArguments;
    private final org.mockito.internal.invocation.RealMethod realMethod;
    private final int sequenceNumber;
    private final org.mockito.invocation.Location location;
    private boolean verified;
    private boolean isIgnoredForVerification;
    private org.mockito.invocation.StubInfo stubInfo;
    public static final org.mockito.internal.invocation.RealMethod NO_OP;

    public void <init>(org.mockito.internal.invocation.mockref.MockReference, org.mockito.internal.invocation.MockitoMethod, java.lang.Object[], org.mockito.internal.invocation.RealMethod, org.mockito.invocation.Location, int)
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.invocation.mockref.MockReference r1;
        org.mockito.internal.invocation.MockitoMethod r2;
        java.lang.Object[] r3, $r6;
        org.mockito.internal.invocation.RealMethod r4;
        org.mockito.invocation.Location r5;
        int i0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r1 := @parameter0: org.mockito.internal.invocation.mockref.MockReference;

        r2 := @parameter1: org.mockito.internal.invocation.MockitoMethod;

        r3 := @parameter2: java.lang.Object[];

        r4 := @parameter3: org.mockito.internal.invocation.RealMethod;

        r5 := @parameter4: org.mockito.invocation.Location;

        i0 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.mockref.MockReference mockRef> = r1;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.MockitoMethod mockitoMethod> = r2;

        $r6 = staticinvoke <org.mockito.internal.invocation.ArgumentsProcessor: java.lang.Object[] expandArgs(org.mockito.internal.invocation.MockitoMethod,java.lang.Object[])>(r2, r3);

        r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] arguments> = $r6;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] rawArguments> = r3;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.RealMethod realMethod> = r4;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.invocation.Location location> = r5;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: int sequenceNumber> = i0;

        return;
    }

    public boolean isVerified()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $z0 = r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean verified>;

        if $z0 != 0 goto label1;

        $z1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean isIgnoredForVerification>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public int getSequenceNumber()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        int $i0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $i0 = r0.<org.mockito.internal.invocation.InterceptedInvocation: int sequenceNumber>;

        return $i0;
    }

    public org.mockito.invocation.Location getLocation()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.invocation.Location $r1;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.invocation.Location location>;

        return $r1;
    }

    public java.lang.Object[] getRawArguments()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        java.lang.Object[] $r1;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] rawArguments>;

        return $r1;
    }

    public java.lang.Class getRawReturnType()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.invocation.MockitoMethod $r1;
        java.lang.Class $r2;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.MockitoMethod mockitoMethod>;

        $r2 = interfaceinvoke $r1.<org.mockito.internal.invocation.MockitoMethod: java.lang.Class getReturnType()>();

        return $r2;
    }

    public void markVerified()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean verified> = 1;

        return;
    }

    public org.mockito.invocation.StubInfo stubInfo()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.invocation.StubInfo $r1;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.invocation.StubInfo stubInfo>;

        return $r1;
    }

    public void markStubbed(org.mockito.invocation.StubInfo)
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.invocation.StubInfo r1;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r1 := @parameter0: org.mockito.invocation.StubInfo;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.invocation.StubInfo stubInfo> = r1;

        return;
    }

    public boolean isIgnoredForVerification()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $z0 = r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean isIgnoredForVerification>;

        return $z0;
    }

    public void ignoreForVerification()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean isIgnoredForVerification> = 1;

        return;
    }

    public java.lang.Object getMock()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.invocation.mockref.MockReference $r1;
        java.lang.Object $r2;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.mockref.MockReference mockRef>;

        $r2 = interfaceinvoke $r1.<org.mockito.internal.invocation.mockref.MockReference: java.lang.Object get()>();

        return $r2;
    }

    public java.lang.reflect.Method getMethod()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.invocation.MockitoMethod $r1;
        java.lang.reflect.Method $r2;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.MockitoMethod mockitoMethod>;

        $r2 = interfaceinvoke $r1.<org.mockito.internal.invocation.MockitoMethod: java.lang.reflect.Method getJavaMethod()>();

        return $r2;
    }

    public java.lang.Object[] getArguments()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        java.lang.Object[] $r1;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] arguments>;

        return $r1;
    }

    public java.lang.Object getArgument(int)
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        i0 := @parameter0: int;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] arguments>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.Object callRealMethod() throws java.lang.Throwable
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.invocation.RealMethod $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.RealMethod realMethod>;

        $z0 = interfaceinvoke $r1.<org.mockito.internal.invocation.RealMethod: boolean isInvokable()>();

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <org.mockito.internal.exceptions.Reporter: org.mockito.exceptions.base.MockitoException cannotCallAbstractRealMethod()>();

        throw $r4;

     label1:
        $r2 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.RealMethod realMethod>;

        $r3 = interfaceinvoke $r2.<org.mockito.internal.invocation.RealMethod: java.lang.Object invoke()>();

        return $r3;
    }

    public int hashCode()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.mockito.internal.invocation.InterceptedInvocation r0, r2;
        java.lang.Object r1, $r6, $r8;
        java.lang.Class $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.mockito.internal.invocation.mockref.MockReference $r5, $r7;
        org.mockito.internal.invocation.MockitoMethod $r9, $r10;
        java.lang.Object[] $r11;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (org.mockito.internal.invocation.InterceptedInvocation) r1;

        $r5 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.mockref.MockReference mockRef>;

        $r6 = interfaceinvoke $r5.<org.mockito.internal.invocation.mockref.MockReference: java.lang.Object get()>();

        $r7 = r2.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.mockref.MockReference mockRef>;

        $r8 = interfaceinvoke $r7.<org.mockito.internal.invocation.mockref.MockReference: java.lang.Object get()>();

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label3;

        $r10 = r0.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.MockitoMethod mockitoMethod>;

        $r9 = r2.<org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.MockitoMethod mockitoMethod>;

        $z2 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label3;

        $r11 = r2.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] arguments>;

        $z3 = specialinvoke r0.<org.mockito.internal.invocation.InterceptedInvocation: boolean equalArguments(java.lang.Object[])>($r11);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    private boolean equalArguments(java.lang.Object[])
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        java.lang.Object[] r1, $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] arguments>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r1, $r2);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.mockito.internal.invocation.InterceptedInvocation r0;
        org.mockito.internal.reporting.PrintSettings $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;
        java.lang.String $r4;

        r0 := @this: org.mockito.internal.invocation.InterceptedInvocation;

        $r1 = new org.mockito.internal.reporting.PrintSettings;

        specialinvoke $r1.<org.mockito.internal.reporting.PrintSettings: void <init>()>();

        $r2 = virtualinvoke r0.<org.mockito.internal.invocation.InterceptedInvocation: java.lang.Object[] getArguments()>();

        $r3 = staticinvoke <org.mockito.internal.invocation.ArgumentsProcessor: java.util.List argumentsToMatchers(java.lang.Object[])>($r2);

        $r4 = virtualinvoke $r1.<org.mockito.internal.reporting.PrintSettings: java.lang.String print(java.util.List,org.mockito.invocation.Invocation)>($r3, r0);

        return $r4;
    }

    static void <clinit>()
    {
        org.mockito.internal.invocation.InterceptedInvocation$1 $r0;

        <org.mockito.internal.invocation.InterceptedInvocation: long serialVersionUID> = 475027563923510472L;

        $r0 = new org.mockito.internal.invocation.InterceptedInvocation$1;

        specialinvoke $r0.<org.mockito.internal.invocation.InterceptedInvocation$1: void <init>()>();

        <org.mockito.internal.invocation.InterceptedInvocation: org.mockito.internal.invocation.RealMethod NO_OP> = $r0;

        return;
    }
}
