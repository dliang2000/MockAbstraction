public class org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper extends java.lang.Object
{
    private static final java.util.Map primitiveWrapper;

    public void <init>()
    {
        org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper r0;

        r0 := @this: org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class[] toPrimitiveType(java.lang.Class[])
    {
        java.lang.Class[] r0, r1;
        java.lang.Class r2, r3;
        int $i0, $i1, i2;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.Class[];

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("types cannot be null");

        throw $r6;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label5;

        r2 = r0[i2];

        $r4 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.Class) $r5;

        if r3 != null goto label3;

        r1[i2] = r2;

        goto label4;

     label3:
        r1[i2] = r3;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        return r1;
    }

    public static java.lang.Class getPrimitiveFromWrapperType(java.lang.Class)
    {
        java.lang.Class r0, $r3;
        java.util.Map $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    public static boolean hasPrimitiveCounterPart(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22;
        java.util.Map $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper> = $r0;

        $r2 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r1);

        $r5 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r4);

        $r8 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r7);

        $r11 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", $r10);

        $r14 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r13 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r13);

        $r17 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r16 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", $r16);

        $r20 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r19 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", $r19);

        $r23 = <org.powermock.reflect.internal.primitivesupport.PrimitiveWrapper: java.util.Map primitiveWrapper>;

        $r22 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", $r22);

        return;
    }
}
