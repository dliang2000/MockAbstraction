public class org.apache.flink.api.common.operators.util.JoinHashMap$Prober extends java.lang.Object
{
    private final org.apache.flink.api.common.typeutils.TypeComparator probeComparator;
    private final org.apache.flink.api.common.typeutils.TypePairComparator pairComparator;
    final org.apache.flink.api.common.operators.util.JoinHashMap this$0;

    public void <init>(org.apache.flink.api.common.operators.util.JoinHashMap, org.apache.flink.api.common.typeutils.TypeComparator, org.apache.flink.api.common.typeutils.TypePairComparator)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap$Prober r0;
        org.apache.flink.api.common.operators.util.JoinHashMap r1;
        org.apache.flink.api.common.typeutils.TypeComparator r2;
        org.apache.flink.api.common.typeutils.TypePairComparator r3;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap$Prober;

        r1 := @parameter0: org.apache.flink.api.common.operators.util.JoinHashMap;

        r2 := @parameter1: org.apache.flink.api.common.typeutils.TypeComparator;

        r3 := @parameter2: org.apache.flink.api.common.typeutils.TypePairComparator;

        r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.typeutils.TypeComparator probeComparator> = r2;

        r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.typeutils.TypePairComparator pairComparator> = r3;

        return;
    }

    public java.lang.Object lookupMatch(java.lang.Object)
    {
        org.apache.flink.api.common.operators.util.JoinHashMap$Prober r0;
        java.lang.Object r1, $r14, $r15;
        int i0, i1, $i2, $i3, $i4;
        org.apache.flink.api.common.typeutils.TypeComparator $r2;
        org.apache.flink.api.common.operators.util.JoinHashMap $r3, $r5, $r6, $r9, $r11, $r12;
        java.lang.Integer $r4;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] $r7, $r10;
        org.apache.flink.api.common.typeutils.TypePairComparator $r8, $r13;
        boolean $z0;
        org.apache.commons.collections.map.AbstractHashedMap$HashEntry r16;

        r0 := @this: org.apache.flink.api.common.operators.util.JoinHashMap$Prober;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        $r2 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.typeutils.TypeComparator probeComparator>;

        $i2 = virtualinvoke $r2.<org.apache.flink.api.common.typeutils.TypeComparator: int hash(java.lang.Object)>(r1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        i0 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: int access$000(org.apache.flink.api.common.operators.util.JoinHashMap,java.lang.Object)>($r3, $r4);

        $r6 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        $r5 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        $r7 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] access$100(org.apache.flink.api.common.operators.util.JoinHashMap)>($r5);

        $i3 = lengthof $r7;

        i1 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: int access$200(org.apache.flink.api.common.operators.util.JoinHashMap,int,int)>($r6, i0, $i3);

        $r8 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.typeutils.TypePairComparator pairComparator>;

        virtualinvoke $r8.<org.apache.flink.api.common.typeutils.TypePairComparator: void setReference(java.lang.Object)>(r1);

        $r9 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        $r10 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry[] access$300(org.apache.flink.api.common.operators.util.JoinHashMap)>($r9);

        r16 = $r10[i1];

     label1:
        if r16 == null goto label3;

        $r11 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        $i4 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: int access$400(org.apache.flink.api.common.operators.util.JoinHashMap,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>($r11, r16);

        if $i4 != i0 goto label2;

        $r13 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.typeutils.TypePairComparator pairComparator>;

        $r14 = virtualinvoke r16.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        $z0 = virtualinvoke $r13.<org.apache.flink.api.common.typeutils.TypePairComparator: boolean equalToReference(java.lang.Object)>($r14);

        if $z0 == 0 goto label2;

        $r15 = virtualinvoke r16.<org.apache.commons.collections.map.AbstractHashedMap$HashEntry: java.lang.Object getValue()>();

        return $r15;

     label2:
        $r12 = r0.<org.apache.flink.api.common.operators.util.JoinHashMap$Prober: org.apache.flink.api.common.operators.util.JoinHashMap this$0>;

        r16 = staticinvoke <org.apache.flink.api.common.operators.util.JoinHashMap: org.apache.commons.collections.map.AbstractHashedMap$HashEntry access$500(org.apache.flink.api.common.operators.util.JoinHashMap,org.apache.commons.collections.map.AbstractHashedMap$HashEntry)>($r12, r16);

        goto label1;

     label3:
        return null;
    }
}
