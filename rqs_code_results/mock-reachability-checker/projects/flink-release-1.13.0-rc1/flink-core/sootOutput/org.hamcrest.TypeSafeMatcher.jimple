public abstract class org.hamcrest.TypeSafeMatcher extends org.hamcrest.BaseMatcher
{
    private static final org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER;
    private final java.lang.Class expectedType;

    protected void <init>()
    {
        org.hamcrest.TypeSafeMatcher r0;
        org.hamcrest.internal.ReflectiveTypeFinder $r1;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        $r1 = <org.hamcrest.TypeSafeMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER>;

        specialinvoke r0.<org.hamcrest.TypeSafeMatcher: void <init>(org.hamcrest.internal.ReflectiveTypeFinder)>($r1);

        return;
    }

    protected void <init>(java.lang.Class)
    {
        org.hamcrest.TypeSafeMatcher r0;
        java.lang.Class r1;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        r0.<org.hamcrest.TypeSafeMatcher: java.lang.Class expectedType> = r1;

        return;
    }

    protected void <init>(org.hamcrest.internal.ReflectiveTypeFinder)
    {
        org.hamcrest.TypeSafeMatcher r0;
        org.hamcrest.internal.ReflectiveTypeFinder r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        r1 := @parameter0: org.hamcrest.internal.ReflectiveTypeFinder;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<org.hamcrest.internal.ReflectiveTypeFinder: java.lang.Class findExpectedType(java.lang.Class)>($r2);

        r0.<org.hamcrest.TypeSafeMatcher: java.lang.Class expectedType> = $r3;

        return;
    }

    protected abstract boolean matchesSafely(java.lang.Object);

    protected void describeMismatchSafely(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.TypeSafeMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        return;
    }

    public final boolean matches(java.lang.Object)
    {
        org.hamcrest.TypeSafeMatcher r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<org.hamcrest.TypeSafeMatcher: java.lang.Class expectedType>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<org.hamcrest.TypeSafeMatcher: boolean matchesSafely(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final void describeMismatch(java.lang.Object, org.hamcrest.Description)
    {
        org.hamcrest.TypeSafeMatcher r0;
        java.lang.Object r1;
        org.hamcrest.Description r2, $r4, $r7, $r8, $r9;
        java.lang.Class $r3, $r5;
        boolean $z0;
        java.lang.String $r6;

        r0 := @this: org.hamcrest.TypeSafeMatcher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.hamcrest.Description;

        if r1 != null goto label1;

        specialinvoke r0.<org.hamcrest.BaseMatcher: void describeMismatch(java.lang.Object,org.hamcrest.Description)>(r1, r2);

        goto label3;

     label1:
        $r3 = r0.<org.hamcrest.TypeSafeMatcher: java.lang.Class expectedType>;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r4 = interfaceinvoke r2.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>("was a ");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = interfaceinvoke $r4.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>($r6);

        $r8 = interfaceinvoke $r7.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(" (");

        $r9 = interfaceinvoke $r8.<org.hamcrest.Description: org.hamcrest.Description appendValue(java.lang.Object)>(r1);

        interfaceinvoke $r9.<org.hamcrest.Description: org.hamcrest.Description appendText(java.lang.String)>(")");

        goto label3;

     label2:
        virtualinvoke r0.<org.hamcrest.TypeSafeMatcher: void describeMismatchSafely(java.lang.Object,org.hamcrest.Description)>(r1, r2);

     label3:
        return;
    }

    static void <clinit>()
    {
        org.hamcrest.internal.ReflectiveTypeFinder $r0;

        $r0 = new org.hamcrest.internal.ReflectiveTypeFinder;

        specialinvoke $r0.<org.hamcrest.internal.ReflectiveTypeFinder: void <init>(java.lang.String,int,int)>("matchesSafely", 1, 0);

        <org.hamcrest.TypeSafeMatcher: org.hamcrest.internal.ReflectiveTypeFinder TYPE_FINDER> = $r0;

        return;
    }
}
