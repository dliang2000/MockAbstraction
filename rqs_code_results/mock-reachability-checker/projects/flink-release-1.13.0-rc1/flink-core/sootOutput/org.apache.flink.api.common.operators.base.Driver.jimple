public class org.apache.flink.api.common.operators.base.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.base.Driver r0;

        r0 := @this: org.apache.flink.api.common.operators.base.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.operators.base.Driver r0;
        org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest $r5;
        org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest $r6;
        org.apache.flink.api.common.operators.base.PartitionMapOperatorTest $r7;
        org.apache.flink.api.common.operators.base.MapOperatorTest $r8;
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest $r9;
        java.lang.Exception $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @this: org.apache.flink.api.common.operators.base.Driver;

        $r5 = new org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest;

        specialinvoke $r5.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void <init>()>();

        virtualinvoke $r5.<org.apache.flink.api.common.operators.base.FlatMapOperatorCollectionTest: void testExecuteOnCollection()>();

        $r6 = new org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest;

        specialinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void setup()>();

     label01:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinWithoutMatchingPartners()>();

     label02:
        goto label04;

     label03:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinWithFullMatchingKeys()>();

     label05:
        goto label07;

     label06:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Exception: void printStackTrace()>();

     label07:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinWithEmptyLeftInput()>();

     label08:
        goto label10;

     label09:
        $r18 := @caughtexception;

        virtualinvoke $r18.<java.lang.Exception: void printStackTrace()>();

     label10:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinWithEmptyRightInput()>();

     label11:
        goto label13;

     label12:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label13:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinWithPartialMatchingKeys()>();

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.lang.Exception: void printStackTrace()>();

     label16:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testFullOuterJoinBuildingCorrectCrossProducts()>();

     label17:
        goto label19;

     label18:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

     label19:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testLeftOuterJoin()>();

     label20:
        goto label22;

     label21:
        $r15 := @caughtexception;

        virtualinvoke $r15.<java.lang.Exception: void printStackTrace()>();

     label22:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testRightOuterJoin()>();

     label23:
        goto label25;

     label24:
        $r14 := @caughtexception;

        virtualinvoke $r14.<java.lang.Exception: void printStackTrace()>();

     label25:
        virtualinvoke $r6.<org.apache.flink.api.common.operators.base.OuterJoinOperatorBaseTest: void testThatExceptionIsThrownForOuterJoinTypeNull()>();

     label26:
        goto label28;

     label27:
        $r13 := @caughtexception;

        virtualinvoke $r13.<java.lang.Exception: void printStackTrace()>();

     label28:
        $r7 = new org.apache.flink.api.common.operators.base.PartitionMapOperatorTest;

        specialinvoke $r7.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.operators.base.PartitionMapOperatorTest: void testMapPartitionWithRuntimeContext()>();

        $r8 = new org.apache.flink.api.common.operators.base.MapOperatorTest;

        specialinvoke $r8.<org.apache.flink.api.common.operators.base.MapOperatorTest: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.operators.base.MapOperatorTest: void testMapPlain()>();

        virtualinvoke $r8.<org.apache.flink.api.common.operators.base.MapOperatorTest: void testMapWithRuntimeContext()>();

        $r9 = new org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest;

        specialinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest: void testJoinPlain()>();

        virtualinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest: void testJoinRich()>();

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label22 to label23 with label24;
        catch java.lang.Exception from label25 to label26 with label27;
    }
}
