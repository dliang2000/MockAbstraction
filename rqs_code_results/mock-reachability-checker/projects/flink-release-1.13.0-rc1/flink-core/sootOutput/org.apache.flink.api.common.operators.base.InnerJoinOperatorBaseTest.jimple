public class org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest extends java.lang.Object implements java.io.Serializable
{

    public void <init>()
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest r0;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void testJoinPlain()
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest r0;
        java.util.List r6, r7, $r18, $r21, $r28;
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$1 $r8;
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase $r9;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r10;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r11, $r12, $r13;
        int[] $r14, $r15;
        java.util.ArrayList $r16, $r19, $r22;
        java.lang.String[] $r17, $r20;
        java.lang.Integer[] $r23;
        java.lang.Integer $r24, $r25, $r26, $r27;
        org.apache.flink.api.common.ExecutionConfig $r29;
        java.lang.Exception $r32;
        java.lang.String $r33;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest;

        $r8 = new org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$1;

        specialinvoke $r8.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$1: void <init>(org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest)>(r0);

        $r9 = new org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        $r10 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        $r13 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r12 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r11 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        specialinvoke $r10.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r13, $r12, $r11);

        $r15 = newarray (int)[0];

        $r14 = newarray (int)[0];

        specialinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: void <init>(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r8, $r10, $r15, $r14, "TestJoiner");

        $r16 = new java.util.ArrayList;

        $r17 = newarray (java.lang.String)[3];

        $r17[0] = "foo";

        $r17[1] = "bar";

        $r17[2] = "foobar";

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r17);

        specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r18);

        $r19 = new java.util.ArrayList;

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "foobar";

        $r20[1] = "foo";

        $r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r20);

        specialinvoke $r19.<java.util.ArrayList: void <init>(java.util.Collection)>($r21);

        $r22 = new java.util.ArrayList;

        $r23 = newarray (java.lang.Integer)[4];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r23[0] = $r24;

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r23[1] = $r25;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r23[2] = $r26;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r23[3] = $r27;

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r23);

        specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r28);

     label1:
        $r29 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r29.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r29.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        r6 = virtualinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r16, $r19, null, $r29);

        virtualinvoke $r29.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        r7 = virtualinvoke $r9.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r16, $r19, null, $r29);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, r6);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r22, r7);

     label2:
        goto label4;

     label3:
        $r32 := @caughtexception;

        virtualinvoke $r32.<java.lang.Exception: void printStackTrace()>();

        $r33 = virtualinvoke $r32.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r33);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void testJoinRich()
    {
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest r0;
        java.util.List r12, r13, $r26, $r29, $r36;
        java.util.concurrent.atomic.AtomicBoolean $r14, $r15;
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$2 $r16;
        org.apache.flink.api.common.operators.base.InnerJoinOperatorBase $r17;
        org.apache.flink.api.common.operators.BinaryOperatorInformation $r18;
        org.apache.flink.api.common.typeinfo.BasicTypeInfo $r19, $r20, $r21;
        int[] $r22, $r23;
        java.util.ArrayList $r24, $r27, $r30;
        java.lang.String[] $r25, $r28;
        java.lang.Integer[] $r31;
        java.lang.Integer $r32, $r33, $r34, $r35;
        org.apache.flink.api.common.TaskInfo $r37;
        java.util.HashMap $r38, $r39;
        org.apache.flink.api.common.ExecutionConfig $r40;
        org.apache.flink.api.common.functions.util.RuntimeUDFContext $r42, $r45;
        org.apache.flink.metrics.groups.UnregisteredMetricsGroup $r43, $r46;
        boolean $z0, $z1;
        java.lang.Exception $r47;
        java.lang.String $r48;

        r0 := @this: org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest;

        $r14 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r15 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        $r16 = new org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$2;

        specialinvoke $r16.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest$2: void <init>(org.apache.flink.api.common.operators.base.InnerJoinOperatorBaseTest,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean)>(r0, $r14, $r15);

        $r17 = new org.apache.flink.api.common.operators.base.InnerJoinOperatorBase;

        $r18 = new org.apache.flink.api.common.operators.BinaryOperatorInformation;

        $r21 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r20 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo STRING_TYPE_INFO>;

        $r19 = <org.apache.flink.api.common.typeinfo.BasicTypeInfo: org.apache.flink.api.common.typeinfo.BasicTypeInfo INT_TYPE_INFO>;

        specialinvoke $r18.<org.apache.flink.api.common.operators.BinaryOperatorInformation: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>($r21, $r20, $r19);

        $r23 = newarray (int)[0];

        $r22 = newarray (int)[0];

        specialinvoke $r17.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: void <init>(org.apache.flink.api.common.functions.FlatJoinFunction,org.apache.flink.api.common.operators.BinaryOperatorInformation,int[],int[],java.lang.String)>($r16, $r18, $r23, $r22, "Test rich join function");

        $r24 = new java.util.ArrayList;

        $r25 = newarray (java.lang.String)[3];

        $r25[0] = "foo";

        $r25[1] = "bar";

        $r25[2] = "foobar";

        $r26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r25);

        specialinvoke $r24.<java.util.ArrayList: void <init>(java.util.Collection)>($r26);

        $r27 = new java.util.ArrayList;

        $r28 = newarray (java.lang.String)[2];

        $r28[0] = "foobar";

        $r28[1] = "foo";

        $r29 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r28);

        specialinvoke $r27.<java.util.ArrayList: void <init>(java.util.Collection)>($r29);

        $r30 = new java.util.ArrayList;

        $r31 = newarray (java.lang.Integer)[4];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r31[0] = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r31[1] = $r33;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r31[2] = $r34;

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r31[3] = $r35;

        $r36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r31);

        specialinvoke $r30.<java.util.ArrayList: void <init>(java.util.Collection)>($r36);

     label1:
        $r37 = new org.apache.flink.api.common.TaskInfo;

        specialinvoke $r37.<org.apache.flink.api.common.TaskInfo: void <init>(java.lang.String,int,int,int,int)>("Test rich join function", 1, 0, 1, 0);

        $r38 = new java.util.HashMap;

        specialinvoke $r38.<java.util.HashMap: void <init>()>();

        $r39 = new java.util.HashMap;

        specialinvoke $r39.<java.util.HashMap: void <init>()>();

        $r40 = new org.apache.flink.api.common.ExecutionConfig;

        specialinvoke $r40.<org.apache.flink.api.common.ExecutionConfig: void <init>()>();

        virtualinvoke $r40.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig disableObjectReuse()>();

        $r42 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r43 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r43.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r42.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r37, null, $r40, $r39, $r38, $r43);

        r12 = virtualinvoke $r17.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r24, $r27, $r42, $r40);

        virtualinvoke $r40.<org.apache.flink.api.common.ExecutionConfig: org.apache.flink.api.common.ExecutionConfig enableObjectReuse()>();

        $r45 = new org.apache.flink.api.common.functions.util.RuntimeUDFContext;

        $r46 = new org.apache.flink.metrics.groups.UnregisteredMetricsGroup;

        specialinvoke $r46.<org.apache.flink.metrics.groups.UnregisteredMetricsGroup: void <init>()>();

        specialinvoke $r45.<org.apache.flink.api.common.functions.util.RuntimeUDFContext: void <init>(org.apache.flink.api.common.TaskInfo,java.lang.ClassLoader,org.apache.flink.api.common.ExecutionConfig,java.util.Map,java.util.Map,org.apache.flink.metrics.MetricGroup)>($r37, null, $r40, $r39, $r38, $r46);

        r13 = virtualinvoke $r17.<org.apache.flink.api.common.operators.base.InnerJoinOperatorBase: java.util.List executeOnCollections(java.util.List,java.util.List,org.apache.flink.api.common.functions.RuntimeContext,org.apache.flink.api.common.ExecutionConfig)>($r24, $r27, $r45, $r40);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, r12);

        staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r30, r13);

     label2:
        goto label4;

     label3:
        $r47 := @caughtexception;

        virtualinvoke $r47.<java.lang.Exception: void printStackTrace()>();

        $r48 = virtualinvoke $r47.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <org.junit.Assert: void fail(java.lang.String)>($r48);

     label4:
        $z0 = virtualinvoke $r14.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0);

        $z1 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
