public class org.mockito.MockitoAnnotations extends java.lang.Object
{

    public void <init>()
    {
        org.mockito.MockitoAnnotations r0;

        r0 := @this: org.mockito.MockitoAnnotations;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void initMocks(java.lang.Object)
    {
        java.lang.Object r0;
        org.mockito.plugins.AnnotationEngine r1;
        org.mockito.internal.configuration.GlobalConfiguration $r2;
        java.lang.Class $r3;
        org.mockito.exceptions.base.MockitoException $r4;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new org.mockito.exceptions.base.MockitoException;

        specialinvoke $r4.<org.mockito.exceptions.base.MockitoException: void <init>(java.lang.String)>("testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class");

        throw $r4;

     label1:
        $r2 = new org.mockito.internal.configuration.GlobalConfiguration;

        specialinvoke $r2.<org.mockito.internal.configuration.GlobalConfiguration: void <init>()>();

        r1 = virtualinvoke $r2.<org.mockito.internal.configuration.GlobalConfiguration: org.mockito.plugins.AnnotationEngine tryGetPluginAnnotationEngine()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        interfaceinvoke r1.<org.mockito.plugins.AnnotationEngine: void process(java.lang.Class,java.lang.Object)>($r3, r0);

        return;
    }
}
