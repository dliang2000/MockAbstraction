public class org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer extends org.apache.flink.api.common.typeutils.TypeSerializer
{
    private static final long serialVersionUID;
    private static final org.slf4j.Logger LOG;
    private static final boolean CONCURRENT_ACCESS_CHECK;
    private final java.util.LinkedHashMap defaultSerializers;
    private final java.util.LinkedHashMap defaultSerializerClasses;
    private java.util.LinkedHashMap kryoRegistrations;
    private final java.lang.Class type;
    private transient com.esotericsoftware.kryo.Kryo kryo;
    private transient java.lang.Object copyInstance;
    private transient org.apache.flink.core.memory.DataOutputView previousOut;
    private transient org.apache.flink.core.memory.DataInputView previousIn;
    private transient com.esotericsoftware.kryo.io.Input input;
    private transient com.esotericsoftware.kryo.io.Output output;
    private java.util.LinkedHashMap registeredTypesWithSerializers;
    private java.util.LinkedHashMap registeredTypesWithSerializerClasses;
    private java.util.LinkedHashSet registeredTypes;
    private transient volatile java.lang.Thread currentThread;

    public void <init>(java.lang.Class, org.apache.flink.api.common.ExecutionConfig)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class r1, $r4, $r7;
        org.apache.flink.api.common.ExecutionConfig r2;
        java.lang.Object $r3;
        java.util.LinkedHashMap $r5, $r6, $r9, $r10, $r11;
        java.util.LinkedHashSet $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.flink.api.common.ExecutionConfig;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.Class) $r3;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type> = $r4;

        $r5 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap getDefaultKryoSerializers()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers> = $r5;

        $r6 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap getDefaultKryoSerializerClasses()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses> = $r6;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r8 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashSet getRegisteredKryoTypes()>();

        $r9 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap getRegisteredTypesWithKryoSerializerClasses()>();

        $r10 = virtualinvoke r2.<org.apache.flink.api.common.ExecutionConfig: java.util.LinkedHashMap getRegisteredTypesWithKryoSerializers()>();

        $r11 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>($r7, $r8, $r9, $r10);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations> = $r11;

        return;
    }

    protected void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0, r1;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer r2, $r22, $r27, $r28;
        java.lang.Class $r3, $r5, $r21;
        java.lang.Object $r4, $r15, $r16, $r23, $r25, $r26, $r36;
        java.util.LinkedHashMap $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r24, $r35;
        int $i0, $i1;
        java.util.Set $r12, $r14;
        boolean $z0, $z1;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType $r17, $r18;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r20, r34;
        java.util.Iterator r30, r32;
        java.util.Map$Entry r31, r33;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r3 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r4 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>($r3, "Type class cannot be null.");

        $r5 = (java.lang.Class) $r4;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type> = $r5;

        $r6 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses> = $r6;

        $r7 = new java.util.LinkedHashMap;

        $r8 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $i0 = virtualinvoke $r8.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>(int)>($i0);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers> = $r7;

        $r9 = new java.util.LinkedHashMap;

        $r10 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $i1 = virtualinvoke $r10.<java.util.LinkedHashMap: int size()>();

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(int)>($i1);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations> = $r9;

        $r11 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $r12 = virtualinvoke $r11.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r30 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r23 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map$Entry) $r23;

        $r24 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $r25 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r26;

        $r28 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer deepCopySerializer(org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>($r27);

        virtualinvoke $r24.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r28);

        goto label1;

     label2:
        $r13 = r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $r14 = virtualinvoke $r13.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r32 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r15 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        r34 = (org.apache.flink.api.java.typeutils.runtime.KryoRegistration) $r16;

        $r17 = virtualinvoke r34.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType getSerializerDefinitionType()>();

        $r18 = <org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType: org.apache.flink.api.java.typeutils.runtime.KryoRegistration$SerializerDefinitionType INSTANCE>;

        if $r17 != $r18 goto label4;

        r2 = virtualinvoke r34.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer getSerializableSerializerInstance()>();

        if r2 == null goto label4;

        $r20 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        $r21 = virtualinvoke r34.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: java.lang.Class getRegisteredClass()>();

        $r22 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer deepCopySerializer(org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>(r2);

        specialinvoke $r20.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>($r21, $r22);

        r34 = $r20;

     label4:
        $r35 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $r36 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r35.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r34);

        goto label3;

     label5:
        return;
    }

    void <init>(java.lang.Class, java.util.LinkedHashMap, java.util.LinkedHashMap, java.util.LinkedHashMap)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class r1, $r6;
        java.util.LinkedHashMap r2, r3, r4, $r8, $r10, $r12;
        java.lang.Object $r5, $r7, $r9, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.util.LinkedHashMap;

        r3 := @parameter2: java.util.LinkedHashMap;

        r4 := @parameter3: java.util.LinkedHashMap;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.TypeSerializer: void <init>()>();

        $r5 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "Type class cannot be null.");

        $r6 = (java.lang.Class) $r5;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type> = $r6;

        $r7 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r3, "Default serializer classes cannot be null.");

        $r8 = (java.util.LinkedHashMap) $r7;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses> = $r8;

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "Default serializers cannot be null.");

        $r10 = (java.util.LinkedHashMap) $r9;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers> = $r10;

        $r11 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r4, "Kryo registrations cannot be null.");

        $r12 = (java.util.LinkedHashMap) $r11;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations> = $r12;

        return;
    }

    java.lang.Class getType()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        return $r1;
    }

    java.util.LinkedHashMap getDefaultKryoSerializers()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        return $r1;
    }

    java.util.LinkedHashMap getDefaultKryoSerializerClasses()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        return $r1;
    }

    java.util.LinkedHashMap getKryoRegistrations()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        return $r1;
    }

    public boolean isImmutableType()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        return 0;
    }

    public org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void <init>(org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer)>(r0);

        return $r1;
    }

    public java.lang.Object createInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class $r2, $r3, $r4;
        int $i0, $i1;
        boolean $z0, $z1;
        com.esotericsoftware.kryo.Kryo $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $i0 = virtualinvoke $r2.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $i1 = virtualinvoke $r3.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isInterface(int)>($i1);

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

     label3:
        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r6 = virtualinvoke $r5.<com.esotericsoftware.kryo.Kryo: java.lang.Object newInstance(java.lang.Class)>($r4);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

        return null;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.Object copy(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Object r1, r6, r19;
        boolean $z0, $z1, $z2, $z3;
        com.esotericsoftware.kryo.Kryo $r8, $r13, $r17;
        java.lang.Throwable $r9;
        com.esotericsoftware.kryo.KryoException $r10;
        java.io.ByteArrayOutputStream $r11;
        com.esotericsoftware.kryo.io.Output $r12;
        java.io.ByteArrayInputStream $r14;
        byte[] $r15;
        com.esotericsoftware.kryo.io.Input $r16;
        java.lang.Class $r18;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        return null;

     label01:
        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z0 == 0 goto label02;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void enterExclusiveThread()>();

     label02:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

     label03:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        r19 = virtualinvoke $r8.<com.esotericsoftware.kryo.Kryo: java.lang.Object copy(java.lang.Object)>(r1);

     label04:
        $z1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z1 == 0 goto label05;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label05:
        return r19;

     label06:
        $r10 := @caughtexception;

        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>();

        $r12 = new com.esotericsoftware.kryo.io.Output;

        specialinvoke $r12.<com.esotericsoftware.kryo.io.Output: void <init>(java.io.OutputStream)>($r11);

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r13.<com.esotericsoftware.kryo.Kryo: void writeObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)>($r12, r1);

        virtualinvoke $r12.<com.esotericsoftware.kryo.io.Output: void close()>();

        $r14 = new java.io.ByteArrayInputStream;

        $r15 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r14.<java.io.ByteArrayInputStream: void <init>(byte[])>($r15);

        $r16 = new com.esotericsoftware.kryo.io.Input;

        specialinvoke $r16.<com.esotericsoftware.kryo.io.Input: void <init>(java.io.InputStream)>($r14);

        $r17 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r6 = virtualinvoke $r17.<com.esotericsoftware.kryo.Kryo: java.lang.Object readObject(com.esotericsoftware.kryo.io.Input,java.lang.Class)>($r16, $r18);

     label07:
        $z3 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z3 == 0 goto label08;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label08:
        return r6;

     label09:
        $r9 := @caughtexception;

     label10:
        $z2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z2 == 0 goto label11;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label11:
        throw $r9;

        catch com.esotericsoftware.kryo.KryoException from label03 to label04 with label06;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.lang.Object copy(java.lang.Object, java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copy(java.lang.Object)>(r1);

        return $r3;
    }

    public int getLength()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        return -1;
    }

    public void serialize(java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2, $r5;
        java.lang.Throwable r3, $r13;
        boolean $z0, $z1, $z2, $z3;
        com.esotericsoftware.kryo.io.Output $r6, $r7, $r9, $r12, $r15;
        int $i0;
        com.esotericsoftware.kryo.Kryo $r8;
        java.lang.IllegalStateException $r10;
        org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream $r11;
        com.esotericsoftware.kryo.KryoException $r14;
        java.io.EOFException $r16;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z0 == 0 goto label01;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void enterExclusiveThread()>();

     label01:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.core.memory.DataOutputView previousOut>;

        if r2 == $r5 goto label02;

        $r11 = new org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream;

        specialinvoke $r11.<org.apache.flink.api.java.typeutils.runtime.DataOutputViewStream: void <init>(org.apache.flink.core.memory.DataOutputView)>(r2);

        $r12 = new com.esotericsoftware.kryo.io.Output;

        specialinvoke $r12.<com.esotericsoftware.kryo.io.Output: void <init>(java.io.OutputStream)>($r11);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Output output> = $r12;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.core.memory.DataOutputView previousOut> = r2;

     label02:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Output output>;

        $i0 = virtualinvoke $r6.<com.esotericsoftware.kryo.io.Output: int position()>();

        if $i0 == 0 goto label03;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The Kryo Output still contains data from a previous serialize call. It has to be flushed or cleared at the end of the serialize call.");

        throw $r10;

     label03:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r7 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Output output>;

        virtualinvoke $r8.<com.esotericsoftware.kryo.Kryo: void writeClassAndObject(com.esotericsoftware.kryo.io.Output,java.lang.Object)>($r7, r1);

        $r9 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Output output>;

        virtualinvoke $r9.<com.esotericsoftware.kryo.io.Output: void flush()>();

     label04:
        goto label07;

     label05:
        $r14 := @caughtexception;

        $r15 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Output output>;

        virtualinvoke $r15.<com.esotericsoftware.kryo.io.Output: void clear()>();

        r3 = virtualinvoke $r14.<com.esotericsoftware.kryo.KryoException: java.lang.Throwable getCause()>();

        $z3 = r3 instanceof java.io.EOFException;

        if $z3 == 0 goto label06;

        $r16 = (java.io.EOFException) r3;

        throw $r16;

     label06:
        throw $r14;

     label07:
        $z1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z1 == 0 goto label11;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

        goto label11;

     label08:
        $r13 := @caughtexception;

     label09:
        $z2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z2 == 0 goto label10;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label10:
        throw $r13;

     label11:
        return;

        catch com.esotericsoftware.kryo.KryoException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        org.apache.flink.core.memory.DataInputView r1, $r4;
        java.lang.Throwable r2, $r9;
        boolean $z0, $z1, $z2, $z3;
        com.esotericsoftware.kryo.io.Input $r5;
        com.esotericsoftware.kryo.Kryo $r6;
        org.apache.flink.api.java.typeutils.runtime.DataInputViewStream $r7;
        org.apache.flink.api.java.typeutils.runtime.NoFetchingInput $r8;
        com.esotericsoftware.kryo.KryoException $r10;
        java.io.EOFException $r11;
        java.lang.Object r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void enterExclusiveThread()>();

     label1:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.core.memory.DataInputView previousIn>;

        if r1 == $r4 goto label2;

        $r7 = new org.apache.flink.api.java.typeutils.runtime.DataInputViewStream;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.DataInputViewStream: void <init>(org.apache.flink.core.memory.DataInputView)>(r1);

        $r8 = new org.apache.flink.api.java.typeutils.runtime.NoFetchingInput;

        specialinvoke $r8.<org.apache.flink.api.java.typeutils.runtime.NoFetchingInput: void <init>(java.io.InputStream)>($r7);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Input input> = $r8;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.core.memory.DataInputView previousIn> = r1;

     label2:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.io.Input input>;

        r13 = virtualinvoke $r6.<com.esotericsoftware.kryo.Kryo: java.lang.Object readClassAndObject(com.esotericsoftware.kryo.io.Input)>($r5);

     label3:
        $z1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z1 == 0 goto label4;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label4:
        return r13;

     label5:
        $r10 := @caughtexception;

        r2 = virtualinvoke $r10.<com.esotericsoftware.kryo.KryoException: java.lang.Throwable getCause()>();

        $z3 = r2 instanceof java.io.EOFException;

        if $z3 == 0 goto label6;

        $r11 = (java.io.EOFException) r2;

        throw $r11;

     label6:
        throw $r10;

     label7:
        $r9 := @caughtexception;

     label8:
        $z2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z2 == 0 goto label9;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label9:
        throw $r9;

        catch com.esotericsoftware.kryo.KryoException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    public java.lang.Object deserialize(java.lang.Object, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Object r1, $r3;
        org.apache.flink.core.memory.DataInputView r2;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        $r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(org.apache.flink.core.memory.DataInputView)>(r2);

        return $r3;
    }

    public void copy(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        org.apache.flink.core.memory.DataOutputView r2;
        java.lang.Object r3, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r8;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataOutputView;

        $z0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void enterExclusiveThread()>();

     label1:
        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copyInstance>;

        if $r5 != null goto label2;

        $r7 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object createInstance()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copyInstance> = $r7;

     label2:
        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object copyInstance>;

        r3 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Object deserialize(java.lang.Object,org.apache.flink.core.memory.DataInputView)>($r6, r1);

        virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void serialize(java.lang.Object,org.apache.flink.core.memory.DataOutputView)>(r3, r2);

     label3:
        $z1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z1 == 0 goto label7;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        $z2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK>;

        if $z2 == 0 goto label6;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void exitExclusiveThread()>();

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int hashCode()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class $r1;
        java.util.LinkedHashMap $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        i6 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i0 = 31 * i6;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $i1 = virtualinvoke $r2.<java.util.LinkedHashMap: int hashCode()>();

        i7 = $i0 + $i1;

        $i2 = 31 * i7;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $i3 = virtualinvoke $r3.<java.util.LinkedHashMap: int hashCode()>();

        i8 = $i2 + $i3;

        $i4 = 31 * i8;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        $i5 = virtualinvoke $r4.<java.util.LinkedHashMap: int hashCode()>();

        i9 = $i4 + $i5;

        return i9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r3, $r4;
        java.util.LinkedHashMap $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        if $z0 == 0 goto label3;

        r2 = (org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer) r1;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r3 = r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        if $r4 != $r3 goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $r5 = r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z1 == 0 goto label1;

        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        $r7 = r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z2 == 0 goto label1;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $r9 = r2.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;

     label3:
        return 0;
    }

    private com.esotericsoftware.kryo.Kryo getKryoInstance()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Class[] $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3, r11;
        com.esotericsoftware.kryo.Kryo $r4, $r9;
        java.lang.ReflectiveOperationException $r5;
        org.slf4j.Logger $r6;
        com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy $r7;
        org.objenesis.strategy.StdInstantiatorStrategy $r8;
        java.lang.Class r10;
        java.lang.reflect.Method r12;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

     label1:
        r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.flink.runtime.types.FlinkScalaKryoInstantiator");

        r11 = virtualinvoke r10.<java.lang.Class: java.lang.Object newInstance()>();

        $r1 = newarray (java.lang.Class)[0];

        r12 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("newKryo", $r1);

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r11, $r2);

        $r4 = (com.esotericsoftware.kryo.Kryo) $r3;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Falling back to default Kryo serializer because Chill serializer couldn\'t be found.", $r5);

        $r7 = new com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy;

        specialinvoke $r7.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void <init>()>();

        $r8 = new org.objenesis.strategy.StdInstantiatorStrategy;

        specialinvoke $r8.<org.objenesis.strategy.StdInstantiatorStrategy: void <init>()>();

        virtualinvoke $r7.<com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy: void setFallbackInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r8);

        $r9 = new com.esotericsoftware.kryo.Kryo;

        specialinvoke $r9.<com.esotericsoftware.kryo.Kryo: void <init>()>();

        virtualinvoke $r9.<com.esotericsoftware.kryo.Kryo: void setInstantiatorStrategy(org.objenesis.strategy.InstantiatorStrategy)>($r7);

        return $r9;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    private void checkKryoInitialized()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        com.esotericsoftware.kryo.Kryo $r1, $r2, $r3, $r5, $r11, $r13, $r14, $r18, $r24;
        org.apache.flink.api.java.typeutils.runtime.kryo.JavaSerializer $r4;
        java.util.LinkedHashMap $r6, $r8, $r10;
        java.util.Set $r7, $r9;
        boolean $z1, $z2;
        java.util.Collection $r12;
        java.lang.Thread $r15;
        java.lang.ClassLoader $r16;
        java.lang.Object $r17, $r19, $r21, $r23, $r25, $r27;
        java.lang.Class $r20, $r22, $r26;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r28;
        com.esotericsoftware.kryo.Serializer $r29;
        java.util.Iterator r30, r32;
        java.util.Map$Entry r31, r33;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        if $r1 != null goto label5;

        $r2 = specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo getKryoInstance()>();

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo> = $r2;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r3.<com.esotericsoftware.kryo.Kryo: boolean setReferences(boolean)>(1);

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r4 = new org.apache.flink.api.java.typeutils.runtime.kryo.JavaSerializer;

        specialinvoke $r4.<org.apache.flink.api.java.typeutils.runtime.kryo.JavaSerializer: void <init>()>();

        virtualinvoke $r5.<com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)>(class "Ljava/lang/Throwable;", $r4);

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r30 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r23 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map$Entry) $r23;

        $r24 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r25 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r26 = (java.lang.Class) $r25;

        $r27 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r28 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r27;

        $r29 = virtualinvoke $r28.<org.apache.flink.api.common.ExecutionConfig$SerializableSerializer: com.esotericsoftware.kryo.Serializer getSerializer()>();

        virtualinvoke $r24.<com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,com.esotericsoftware.kryo.Serializer)>($r26, $r29);

        goto label1;

     label2:
        $r8 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        $r9 = virtualinvoke $r8.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r32 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r17 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r17;

        $r18 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r19 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.Class) $r19;

        $r21 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r22 = (java.lang.Class) $r21;

        virtualinvoke $r18.<com.esotericsoftware.kryo.Kryo: void addDefaultSerializer(java.lang.Class,java.lang.Class)>($r20, $r22);

        goto label3;

     label4:
        $r11 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r10 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        $r12 = virtualinvoke $r10.<java.util.LinkedHashMap: java.util.Collection values()>();

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.KryoUtils: void applyRegistrations(com.esotericsoftware.kryo.Kryo,java.util.Collection)>($r11, $r12);

        $r13 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        virtualinvoke $r13.<com.esotericsoftware.kryo.Kryo: void setRegistrationRequired(boolean)>(0);

        $r14 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r16 = virtualinvoke $r15.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        virtualinvoke $r14.<com.esotericsoftware.kryo.Kryo: void setClassLoader(java.lang.ClassLoader)>($r16);

     label5:
        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSnapshot snapshotConfiguration()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot $r1;
        java.util.LinkedHashMap $r2, $r3, $r4;
        java.lang.Class $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializers>;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap defaultSerializerClasses>;

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerSnapshot: void <init>(java.lang.Class,java.util.LinkedHashMap,java.util.LinkedHashMap,java.util.LinkedHashMap)>($r5, $r4, $r3, $r2);

        return $r1;
    }

    private static java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class, java.util.LinkedHashSet, java.util.LinkedHashMap, java.util.LinkedHashMap)
    {
        java.lang.Class r0, $r20, $r24, $r30, $r34, $r36, r43;
        java.util.LinkedHashSet r1, $r10;
        java.util.LinkedHashMap r2, r3, $r5, $r12, $r15;
        java.lang.String $r6, $r21, $r31, $r39;
        org.apache.flink.api.java.typeutils.runtime.KryoRegistration $r7, $r22, $r32, $r40;
        java.lang.Object $r9, $r11, $r14, $r18, $r19, $r23, $r25, $r28, $r29, $r33, $r35, $r38;
        boolean $z0, $z1, $z2;
        java.util.Set $r13, $r16;
        org.apache.flink.api.java.typeutils.AvroUtils $r17;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer $r26;
        java.util.Iterator r42, r44, r46;
        java.util.Map$Entry r45, r47;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.LinkedHashSet;

        r2 := @parameter2: java.util.LinkedHashMap;

        r3 := @parameter3: java.util.LinkedHashMap;

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>(r0);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r9 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r10 = (java.util.LinkedHashSet) $r9;

        r42 = virtualinvoke $r10.<java.util.LinkedHashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r38 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.lang.Class) $r38;

        $r39 = virtualinvoke r43.<java.lang.Class: java.lang.String getName()>();

        $r40 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        specialinvoke $r40.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class)>(r43);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r40);

        goto label1;

     label2:
        $r11 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r12 = (java.util.LinkedHashMap) $r11;

        $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r44 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r28 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.util.Map$Entry) $r28;

        $r29 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r30 = (java.lang.Class) $r29;

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        $r32 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        $r33 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r34 = (java.lang.Class) $r33;

        $r35 = interfaceinvoke r45.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r36 = (java.lang.Class) $r35;

        specialinvoke $r32.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,java.lang.Class)>($r34, $r36);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r32);

        goto label3;

     label4:
        $r14 = staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r15 = (java.util.LinkedHashMap) $r14;

        $r16 = virtualinvoke $r15.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r46 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r18 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r47.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.Class) $r19;

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = new org.apache.flink.api.java.typeutils.runtime.KryoRegistration;

        $r23 = interfaceinvoke r47.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r24 = (java.lang.Class) $r23;

        $r25 = interfaceinvoke r47.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r25;

        specialinvoke $r22.<org.apache.flink.api.java.typeutils.runtime.KryoRegistration: void <init>(java.lang.Class,org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)>($r24, $r26);

        virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        goto label5;

     label6:
        $r17 = staticinvoke <org.apache.flink.api.java.typeutils.AvroUtils: org.apache.flink.api.java.typeutils.AvroUtils getAvroUtils()>();

        virtualinvoke $r17.<org.apache.flink.api.java.typeutils.AvroUtils: void addAvroGenericDataArrayRegistration(java.util.LinkedHashMap)>($r5);

        return $r5;
    }

    static void configureKryoLogging()
    {
        org.slf4j.Logger $r0, $r2;
        boolean $z0;
        org.apache.flink.api.java.typeutils.runtime.kryo.MinlogForwarder $r1;

        $r0 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r0.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = new org.apache.flink.api.java.typeutils.runtime.kryo.MinlogForwarder;

        $r2 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.slf4j.Logger LOG>;

        specialinvoke $r1.<org.apache.flink.api.java.typeutils.runtime.kryo.MinlogForwarder: void <init>(org.slf4j.Logger)>($r2);

        staticinvoke <com.esotericsoftware.minlog.Log: void setLogger(com.esotericsoftware.minlog.Log$Logger)>($r1);

        staticinvoke <com.esotericsoftware.minlog.Log: void TRACE()>();

     label1:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.io.ObjectInputStream r1;
        java.util.LinkedHashMap $r2, $r3, $r4, $r7;
        java.util.LinkedHashSet $r5;
        java.lang.Class $r6;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations>;

        if $r2 != null goto label1;

        $r6 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Class type>;

        $r5 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashSet registeredTypes>;

        $r4 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap registeredTypesWithSerializerClasses>;

        $r3 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap registeredTypesWithSerializers>;

        $r7 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap buildKryoRegistrations(java.lang.Class,java.util.LinkedHashSet,java.util.LinkedHashMap,java.util.LinkedHashMap)>($r6, $r5, $r4, $r3);

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.util.LinkedHashMap kryoRegistrations> = $r7;

     label1:
        return;
    }

    private org.apache.flink.api.common.ExecutionConfig$SerializableSerializer deepCopySerializer(org.apache.flink.api.common.ExecutionConfig$SerializableSerializer)
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        org.apache.flink.api.common.ExecutionConfig$SerializableSerializer r1, $r6;
        java.lang.Thread $r3;
        java.lang.ClassLoader $r4;
        java.io.Serializable $r5;
        java.lang.Exception $r7;
        org.apache.commons.lang3.exception.CloneFailedException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.Class $r11;
        java.lang.String $r13;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 := @parameter0: org.apache.flink.api.common.ExecutionConfig$SerializableSerializer;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        $r5 = staticinvoke <org.apache.flink.util.InstantiationUtil: java.io.Serializable clone(java.io.Serializable,java.lang.ClassLoader)>(r1, $r4);

        $r6 = (org.apache.flink.api.common.ExecutionConfig$SerializableSerializer) $r5;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new org.apache.commons.lang3.exception.CloneFailedException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not clone serializer instance of class ");

        $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void enterExclusiveThread()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        java.lang.Thread r1, r2;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r10;
        java.lang.String $r6, $r9, $r11;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Thread currentThread>;

        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if r1 != null goto label1;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Thread currentThread> = r2;

        goto label2;

     label1:
        if r1 == r2 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Concurrent access to KryoSerializer. Thread 1: ");

        $r6 = virtualinvoke r2.<java.lang.Thread: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , Thread 2: ");

        $r9 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r3;

     label2:
        return;
    }

    private void exitExclusiveThread()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: java.lang.Thread currentThread> = null;

        return;
    }

    public com.esotericsoftware.kryo.Kryo getKryo()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0;
        com.esotericsoftware.kryo.Kryo $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        specialinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void checkKryoInitialized()>();

        $r1 = r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: com.esotericsoftware.kryo.Kryo kryo>;

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeSerializer duplicate()
    {
        org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer r0, $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer;

        $r1 = virtualinvoke r0.<org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer duplicate()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0, $r1;
        boolean $z0, $z1, $z2;

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: long serialVersionUID> = 3L;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/flink/api/java/typeutils/runtime/kryo/KryoSerializer;");

        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.slf4j.Logger LOG> = $r0;

        $r1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 != 0 goto label1;

        $z1 = <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializerDebugInitHelper: boolean setToDebug>;

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: boolean CONCURRENT_ACCESS_CHECK> = $z2;

        staticinvoke <org.apache.flink.api.java.typeutils.runtime.kryo.KryoSerializer: void configureKryoLogging()>();

        return;
    }
}
