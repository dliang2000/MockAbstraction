public final class org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier extends java.lang.Object implements org.apache.flink.api.common.typeutils.TypeSerializerUpgradeTestBase$UpgradeVerifier
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier r0;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializer createUpgradedSerializer()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier r0;
        org.apache.flink.api.common.typeutils.TypeSerializer $r1;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier;

        $r1 = staticinvoke <org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest: org.apache.flink.api.common.typeutils.TypeSerializer createRowSerializer()>();

        return $r1;
    }

    public org.hamcrest.Matcher testDataMatcher()
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier r0;
        org.apache.flink.types.Row $r2;
        org.apache.flink.types.RowKind $r3;
        java.lang.Long $r4;
        org.hamcrest.Matcher $r5;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier;

        $r2 = new org.apache.flink.types.Row;

        $r3 = <org.apache.flink.types.RowKind: org.apache.flink.types.RowKind INSERT>;

        specialinvoke $r2.<org.apache.flink.types.Row: void <init>(org.apache.flink.types.RowKind,int)>($r3, 4);

        virtualinvoke $r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(0, null);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(42L);

        virtualinvoke $r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(1, $r4);

        virtualinvoke $r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(2, "My string.");

        virtualinvoke $r2.<org.apache.flink.types.Row: void setField(int,java.lang.Object)>(3, null);

        $r5 = staticinvoke <org.hamcrest.Matchers: org.hamcrest.Matcher is(java.lang.Object)>($r2);

        return $r5;
    }

    public org.hamcrest.Matcher schemaCompatibilityMatcher(org.apache.flink.testutils.migration.MigrationVersion)
    {
        org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier r0;
        org.apache.flink.testutils.migration.MigrationVersion r1, $r2;
        boolean $z0;
        org.hamcrest.Matcher $r3, $r4;

        r0 := @this: org.apache.flink.api.java.typeutils.runtime.RowSerializerUpgradeTest$RowSerializerVerifier;

        r1 := @parameter0: org.apache.flink.testutils.migration.MigrationVersion;

        $r2 = <org.apache.flink.testutils.migration.MigrationVersion: org.apache.flink.testutils.migration.MigrationVersion v1_10>;

        $z0 = virtualinvoke r1.<org.apache.flink.testutils.migration.MigrationVersion: boolean isNewerVersionThan(org.apache.flink.testutils.migration.MigrationVersion)>($r2);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAsIs()>();

        return $r4;

     label1:
        $r3 = staticinvoke <org.apache.flink.api.common.typeutils.TypeSerializerMatchers: org.hamcrest.Matcher isCompatibleAfterMigration()>();

        return $r3;
    }
}
