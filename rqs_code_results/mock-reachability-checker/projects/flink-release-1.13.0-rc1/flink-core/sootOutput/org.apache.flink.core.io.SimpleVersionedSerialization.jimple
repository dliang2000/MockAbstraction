public class org.apache.flink.core.io.SimpleVersionedSerialization extends java.lang.Object
{

    public static void writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer, java.lang.Object, org.apache.flink.core.memory.DataOutputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializer r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.DataOutputView r2;
        byte[] r3;
        int $i0, $i1;

        r0 := @parameter0: org.apache.flink.core.io.SimpleVersionedSerializer;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: org.apache.flink.core.memory.DataOutputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "serializer");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "datum");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r2, "out");

        r3 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: byte[] serialize(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: int getVersion()>();

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i0);

        $i1 = lengthof r3;

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void writeInt(int)>($i1);

        interfaceinvoke r2.<org.apache.flink.core.memory.DataOutputView: void write(byte[])>(r3);

        return;
    }

    public static java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializer r0;
        org.apache.flink.core.memory.DataInputView r1;
        int i0, i1;
        byte[] r2;
        java.lang.Object $r5;

        r0 := @parameter0: org.apache.flink.core.io.SimpleVersionedSerializer;

        r1 := @parameter1: org.apache.flink.core.memory.DataInputView;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "serializer");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "in");

        i0 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        i1 = interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: int readInt()>();

        r2 = newarray (byte)[i1];

        interfaceinvoke r1.<org.apache.flink.core.memory.DataInputView: void readFully(byte[])>(r2);

        $r5 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: java.lang.Object deserialize(int,byte[])>(i0, r2);

        return $r5;
    }

    public static byte[] writeVersionAndSerialize(org.apache.flink.core.io.SimpleVersionedSerializer, java.lang.Object) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializer r0;
        java.lang.Object r1;
        byte[] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i6, $i8, $i11, $i13, $i15, $i18;
        byte $b5, $b7, $b9, $b10, $b12, $b14, $b16, $b17;

        r0 := @parameter0: org.apache.flink.core.io.SimpleVersionedSerializer;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "serializer");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "datum");

        r2 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: byte[] serialize(java.lang.Object)>(r1);

        $i2 = lengthof r2;

        $i3 = $i2 + 8;

        r3 = newarray (byte)[$i3];

        i0 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: int getVersion()>();

        $i4 = i0 >> 24;

        $b5 = (byte) $i4;

        r3[0] = $b5;

        $i6 = i0 >> 16;

        $b7 = (byte) $i6;

        r3[1] = $b7;

        $i8 = i0 >> 8;

        $b9 = (byte) $i8;

        r3[2] = $b9;

        $b10 = (byte) i0;

        r3[3] = $b10;

        i1 = lengthof r2;

        $i11 = i1 >> 24;

        $b12 = (byte) $i11;

        r3[4] = $b12;

        $i13 = i1 >> 16;

        $b14 = (byte) $i13;

        r3[5] = $b14;

        $i15 = i1 >> 8;

        $b16 = (byte) $i15;

        r3[6] = $b16;

        $b17 = (byte) i1;

        r3[7] = $b17;

        $i18 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 8, $i18);

        return r3;
    }

    public static java.lang.Object readVersionAndDeSerialize(org.apache.flink.core.io.SimpleVersionedSerializer, byte[]) throws java.io.IOException
    {
        org.apache.flink.core.io.SimpleVersionedSerializer r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i8, $i9, $i12, $i13, $i16, $i21, $i22, $i25, $i26, $i29, $i30, $i31;
        byte $b4, $b6, $b10, $b14, $b17, $b19, $b23, $b27;
        short $s5, $s7, $s11, $s15, $s18, $s20, $s24, $s28;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        java.lang.Object $r12;
        boolean $z0;

        r0 := @parameter0: org.apache.flink.core.io.SimpleVersionedSerializer;

        r1 := @parameter1: byte[];

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r0, "serializer");

        staticinvoke <org.apache.flink.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(r1, "bytes");

        $i2 = lengthof r1;

        if $i2 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.flink.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "byte array below minimum length (8 bytes)");

        $i3 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, 8, $i3);

        $b4 = r1[0];

        $s5 = $b4 & 255;

        $i9 = $s5 << 24;

        $b6 = r1[1];

        $s7 = $b6 & 255;

        $i8 = $s7 << 16;

        $i13 = $i9 | $i8;

        $b10 = r1[2];

        $s11 = $b10 & 255;

        $i12 = $s11 << 8;

        $i16 = $i13 | $i12;

        $b14 = r1[3];

        $s15 = $b14 & 255;

        i0 = $i16 | $s15;

        $b17 = r1[4];

        $s18 = $b17 & 255;

        $i22 = $s18 << 24;

        $b19 = r1[5];

        $s20 = $b19 & 255;

        $i21 = $s20 << 16;

        $i26 = $i22 | $i21;

        $b23 = r1[6];

        $s24 = $b23 & 255;

        $i25 = $s24 << 8;

        $i29 = $i26 | $i25;

        $b27 = r1[7];

        $s28 = $b27 & 255;

        i1 = $i29 | $s28;

        $i30 = lengthof r2;

        if i1 != $i30 goto label3;

        $r12 = interfaceinvoke r0.<org.apache.flink.core.io.SimpleVersionedSerializer: java.lang.Object deserialize(int,byte[])>(i0, r2);

        return $r12;

     label3:
        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Corrupt data, conflicting lengths. Length fields: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", data: ");

        $i31 = lengthof r2;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r5;
    }

    private void <init>()
    {
        org.apache.flink.core.io.SimpleVersionedSerialization r0;

        r0 := @this: org.apache.flink.core.io.SimpleVersionedSerialization;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
