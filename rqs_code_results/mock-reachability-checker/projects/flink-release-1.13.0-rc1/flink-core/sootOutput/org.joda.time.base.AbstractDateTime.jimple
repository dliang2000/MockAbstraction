public abstract class org.joda.time.base.AbstractDateTime extends org.joda.time.base.AbstractInstant implements org.joda.time.ReadableDateTime
{

    protected void <init>()
    {
        org.joda.time.base.AbstractDateTime r0;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        specialinvoke r0.<org.joda.time.base.AbstractInstant: void <init>()>();

        return;
    }

    public int get(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.Chronology $r2;
        org.joda.time.DateTimeField $r3;
        long $l0;
        int $i1;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r2);

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getEra()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getCenturyOfEra()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYearOfEra()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYearOfCentury()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getYear()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getWeekyear()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMonthOfYear()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getWeekOfWeekyear()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfYear()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfMonth()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getDayOfWeek()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getHourOfDay()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMinuteOfDay()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMinuteOfHour()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getSecondOfDay()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getSecondOfMinute()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfDay()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public int getMillisOfSecond()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.Chronology $r1;
        org.joda.time.DateTimeField $r2;
        long $l0;
        int $i1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>();

        $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();

        $l0 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: long getMillis()>();

        $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l0);

        return $i1;
    }

    public java.util.Calendar toCalendar(java.util.Locale)
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.DateTimeZone r1;
        java.util.Calendar r2;
        java.util.TimeZone $r3;
        java.util.Date $r4;
        java.util.Locale r5;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        r5 := @parameter0: java.util.Locale;

        if r5 != null goto label1;

        r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.DateTimeZone getZone()>();

        $r3 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>();

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r3, r5);

        $r4 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.util.Date toDate()>();

        virtualinvoke r2.<java.util.Calendar: void setTime(java.util.Date)>($r4);

        return r2;
    }

    public java.util.GregorianCalendar toGregorianCalendar()
    {
        org.joda.time.base.AbstractDateTime r0;
        org.joda.time.DateTimeZone r1;
        java.util.GregorianCalendar $r3;
        java.util.TimeZone $r4;
        java.util.Date $r5;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.DateTimeZone getZone()>();

        $r3 = new java.util.GregorianCalendar;

        $r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.util.TimeZone toTimeZone()>();

        specialinvoke $r3.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r4);

        $r5 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.util.Date toDate()>();

        virtualinvoke $r3.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r5);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.joda.time.base.AbstractDateTime r0;
        java.lang.String $r1;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        $r1 = specialinvoke r0.<org.joda.time.base.AbstractInstant: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.base.AbstractDateTime r0;
        java.lang.String r1, $r3, $r4;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale) throws java.lang.IllegalArgumentException
    {
        org.joda.time.base.AbstractDateTime r0;
        java.lang.String r1, $r5, $r6;
        java.util.Locale r2;
        org.joda.time.format.DateTimeFormatter $r3, $r4;

        r0 := @this: org.joda.time.base.AbstractDateTime;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 != null goto label1;

        $r6 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: java.lang.String toString()>();

        return $r6;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0);

        return $r5;
    }
}
