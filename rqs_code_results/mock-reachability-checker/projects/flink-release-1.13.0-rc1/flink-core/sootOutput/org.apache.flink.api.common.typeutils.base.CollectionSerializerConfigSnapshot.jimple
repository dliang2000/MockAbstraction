public final class org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot extends org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot
{
    private static final int VERSION;

    public void <init>()
    {
        org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>()>();

        return;
    }

    public void <init>(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        org.apache.flink.api.common.typeutils.TypeSerializer[] $r2;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $r2 = newarray (org.apache.flink.api.common.typeutils.TypeSerializer)[1];

        $r2[0] = r1;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: void <init>(org.apache.flink.api.common.typeutils.TypeSerializer[])>($r2);

        return;
    }

    public org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)
    {
        org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot r0;
        org.apache.flink.api.common.typeutils.TypeSerializer r1;
        boolean $z0;
        org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot $r2;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[] $r3;
        org.apache.flink.api.java.tuple.Tuple2 $r4;
        java.lang.Object $r5;
        org.apache.flink.api.common.typeutils.TypeSerializerSnapshot $r6;
        org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility $r7, $r8;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot;

        r1 := @parameter0: org.apache.flink.api.common.typeutils.TypeSerializer;

        $z0 = r1 instanceof org.apache.flink.api.common.typeutils.base.ListSerializer;

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<org.apache.flink.api.common.typeutils.CompositeTypeSerializerConfigSnapshot: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility resolveSchemaCompatibility(org.apache.flink.api.common.typeutils.TypeSerializer)>(r1);

        return $r8;

     label1:
        $r2 = new org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot;

        specialinvoke $r2.<org.apache.flink.api.common.typeutils.base.ListSerializerSnapshot: void <init>()>();

        $r3 = newarray (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot)[1];

        $r4 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot: org.apache.flink.api.java.tuple.Tuple2 getSingleNestedSerializerAndConfig()>();

        $r5 = $r4.<org.apache.flink.api.java.tuple.Tuple2: java.lang.Object f1>;

        $r6 = (org.apache.flink.api.common.typeutils.TypeSerializerSnapshot) $r5;

        $r3[0] = $r6;

        $r7 = staticinvoke <org.apache.flink.api.common.typeutils.CompositeTypeSerializerUtil: org.apache.flink.api.common.typeutils.TypeSerializerSchemaCompatibility delegateCompatibilityCheckToNewSnapshot(org.apache.flink.api.common.typeutils.TypeSerializer,org.apache.flink.api.common.typeutils.CompositeTypeSerializerSnapshot,org.apache.flink.api.common.typeutils.TypeSerializerSnapshot[])>(r1, $r2, $r3);

        return $r7;
    }

    public int getVersion()
    {
        org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.CollectionSerializerConfigSnapshot: int VERSION> = 1;

        return;
    }
}
