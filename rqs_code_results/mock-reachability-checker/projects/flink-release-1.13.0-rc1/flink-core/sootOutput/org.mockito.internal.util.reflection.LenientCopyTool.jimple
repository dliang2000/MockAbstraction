public class org.mockito.internal.util.reflection.LenientCopyTool extends java.lang.Object
{
    org.mockito.internal.util.reflection.FieldCopier fieldCopier;

    public void <init>()
    {
        org.mockito.internal.util.reflection.LenientCopyTool r0;
        org.mockito.internal.util.reflection.FieldCopier $r1;

        r0 := @this: org.mockito.internal.util.reflection.LenientCopyTool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.mockito.internal.util.reflection.FieldCopier;

        specialinvoke $r1.<org.mockito.internal.util.reflection.FieldCopier: void <init>()>();

        r0.<org.mockito.internal.util.reflection.LenientCopyTool: org.mockito.internal.util.reflection.FieldCopier fieldCopier> = $r1;

        return;
    }

    public void copyToMock(java.lang.Object, java.lang.Object)
    {
        org.mockito.internal.util.reflection.LenientCopyTool r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3;

        r0 := @this: org.mockito.internal.util.reflection.LenientCopyTool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.mockito.internal.util.reflection.LenientCopyTool: void copy(java.lang.Object,java.lang.Object,java.lang.Class)>(r1, r2, $r3);

        return;
    }

    public void copyToRealObject(java.lang.Object, java.lang.Object)
    {
        org.mockito.internal.util.reflection.LenientCopyTool r0;
        java.lang.Object r1, r2;
        java.lang.Class $r3;

        r0 := @this: org.mockito.internal.util.reflection.LenientCopyTool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<org.mockito.internal.util.reflection.LenientCopyTool: void copy(java.lang.Object,java.lang.Object,java.lang.Class)>(r1, r2, $r3);

        return;
    }

    private void copy(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        org.mockito.internal.util.reflection.LenientCopyTool r0;
        java.lang.Object r1, r2;
        java.lang.Class r3;

        r0 := @this: org.mockito.internal.util.reflection.LenientCopyTool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

     label1:
        if r3 == class "Ljava/lang/Object;" goto label2;

        specialinvoke r0.<org.mockito.internal.util.reflection.LenientCopyTool: void copyValues(java.lang.Object,java.lang.Object,java.lang.Class)>(r1, r2, r3);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label2:
        return;
    }

    private void copyValues(java.lang.Object, java.lang.Object, java.lang.Class)
    {
        org.mockito.internal.util.reflection.LenientCopyTool r0;
        java.lang.Object r1, r2;
        java.lang.Class r3;
        java.lang.reflect.Field[] r4;
        int i0, $i1, i2;
        java.lang.reflect.Field r6;
        boolean $z0;
        org.mockito.internal.util.reflection.AccessibilityChanger $r10;
        org.mockito.internal.util.reflection.FieldCopier $r11;
        java.lang.Throwable $r12, $r13;

        r0 := @this: org.mockito.internal.util.reflection.LenientCopyTool;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Class;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r4;

        i2 = 0;

     label01:
        if i2 >= i0 goto label10;

        r6 = r4[i2];

        $i1 = virtualinvoke r6.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label02;

        goto label09;

     label02:
        $r10 = new org.mockito.internal.util.reflection.AccessibilityChanger;

        specialinvoke $r10.<org.mockito.internal.util.reflection.AccessibilityChanger: void <init>()>();

     label03:
        virtualinvoke $r10.<org.mockito.internal.util.reflection.AccessibilityChanger: void enableAccess(java.lang.reflect.AccessibleObject)>(r6);

        $r11 = r0.<org.mockito.internal.util.reflection.LenientCopyTool: org.mockito.internal.util.reflection.FieldCopier fieldCopier>;

        virtualinvoke $r11.<org.mockito.internal.util.reflection.FieldCopier: void copyValue(java.lang.Object,java.lang.Object,java.lang.reflect.Field)>(r1, r2, r6);

     label04:
        virtualinvoke $r10.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r6);

        goto label09;

     label05:
        $r13 := @caughtexception;

     label06:
        virtualinvoke $r10.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r6);

        goto label09;

     label07:
        $r12 := @caughtexception;

     label08:
        virtualinvoke $r10.<org.mockito.internal.util.reflection.AccessibilityChanger: void safelyDisableAccess(java.lang.reflect.AccessibleObject)>(r6);

        throw $r12;

     label09:
        i2 = i2 + 1;

        goto label01;

     label10:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }
}
