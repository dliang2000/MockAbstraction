public class org.apache.flink.api.common.eventtime.Driver extends java.lang.Object
{

    public void <init>()
    {
        org.apache.flink.api.common.eventtime.Driver r0;

        r0 := @this: org.apache.flink.api.common.eventtime.Driver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void runall()
    {
        org.apache.flink.api.common.eventtime.Driver r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest $r6;
        org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest $r7;
        org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest $r8;
        org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest $r9;
        org.apache.flink.api.common.eventtime.WatermarkStrategyTest $r10;

        r0 := @this: org.apache.flink.api.common.eventtime.Driver;

        $r6 = new org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest;

        specialinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void <init>()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleImmediateWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleImmediateIdleness()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleImmediateWatermarkAfterIdleness()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void multipleImmediateWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void whenImmediateOutputBecomesIdleWatermarkAdvances()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void combinedWatermarkDoesNotRegressWhenIdleOutputRegresses()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void noCombinedDeferredUpdateWhenWeHaveZeroOutputs()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void deferredOutputDoesNotImmediatelyAdvanceWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleDeferredWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleDeferredIdleness()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void singleDeferredWatermarkAfterIdleness()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void multipleDeferredWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void immediateUpdatesTakeDeferredUpdatesIntoAccount()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void immediateUpdateOnSameOutputAsDeferredUpdateDoesNotRegress()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void lowerImmediateUpdateOnSameOutputDoesNotEmitCombinedUpdate()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void testRemoveUnblocksWatermarks()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void testRemoveOfLowestDoesNotImmediatelyAdvanceWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void testRemoveOfHighestDoesNotRetractWatermark()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void testRemoveRegisteredReturnValue()>();

        virtualinvoke $r6.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexerTest: void testRemoveNotRegisteredReturnValue()>();

        $r7 = new org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest;

        specialinvoke $r7.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest: void <init>()>();

        virtualinvoke $r7.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest: void testWatermarkBeforeRecords()>();

        virtualinvoke $r7.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest: void testWatermarkAfterEvent()>();

        virtualinvoke $r7.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest: void testWatermarkAfterNonMonotonousEvents()>();

        virtualinvoke $r7.<org.apache.flink.api.common.eventtime.BoundedOutOfOrdernessWatermarksTest: void testRepeatedProbe()>();

        $r8 = new org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest;

        specialinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void <init>()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testZeroTimeout()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testNegativeTimeout()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testInitiallyActive()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testIdleWithoutEvents()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testRepeatedIdleChecks()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testActiveAfterIdleness()>();

        virtualinvoke $r8.<org.apache.flink.api.common.eventtime.WatermarksWithIdlenessTest: void testIdleActiveIdle()>();

        $r9 = new org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest;

        specialinvoke $r9.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest: void <init>()>();

        virtualinvoke $r9.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest: void testWatermarkBeforeRecords()>();

        virtualinvoke $r9.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest: void testWatermarkAfterEvent()>();

        virtualinvoke $r9.<org.apache.flink.api.common.eventtime.AscendingTimestampsWatermarksTest: void testWatermarkAfterEventWithLowerTimestamp()>();

        $r10 = new org.apache.flink.api.common.eventtime.WatermarkStrategyTest;

        specialinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void <init>()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testDefaultTimeStampAssigner()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testLambdaTimestampAssigner()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testLambdaTimestampAssignerSupplier()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testAnonymousInnerTimestampAssigner()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testClassTimestampAssigner()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testClassTimestampAssignerUsingSupplier()>();

        virtualinvoke $r10.<org.apache.flink.api.common.eventtime.WatermarkStrategyTest: void testWithIdlenessHelper()>();

        return;
    }
}
