public abstract class org.mockito.internal.matchers.CompareTo extends java.lang.Object implements org.mockito.ArgumentMatcher, java.io.Serializable
{
    private final java.lang.Comparable wanted;

    public void <init>(java.lang.Comparable)
    {
        org.mockito.internal.matchers.CompareTo r0;
        java.lang.Comparable r1;

        r0 := @this: org.mockito.internal.matchers.CompareTo;

        r1 := @parameter0: java.lang.Comparable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.mockito.internal.matchers.CompareTo: java.lang.Comparable wanted> = r1;

        return;
    }

    public final boolean matches(java.lang.Comparable)
    {
        org.mockito.internal.matchers.CompareTo r0;
        java.lang.Comparable r1, $r3, $r4;
        int i0;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r0 := @this: org.mockito.internal.matchers.CompareTo;

        r1 := @parameter0: java.lang.Comparable;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = r0.<org.mockito.internal.matchers.CompareTo: java.lang.Comparable wanted>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<org.mockito.internal.matchers.CompareTo: java.lang.Comparable wanted>;

        i0 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        $z1 = virtualinvoke r0.<org.mockito.internal.matchers.CompareTo: boolean matchResult(int)>(i0);

        return $z1;
    }

    public final java.lang.String toString()
    {
        org.mockito.internal.matchers.CompareTo r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r7;
        java.lang.String $r2, $r8;
        java.lang.Comparable $r5;

        r0 := @this: org.mockito.internal.matchers.CompareTo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<org.mockito.internal.matchers.CompareTo: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r5 = r0.<org.mockito.internal.matchers.CompareTo: java.lang.Comparable wanted>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    protected abstract java.lang.String getName();

    protected abstract boolean matchResult(int);

    public volatile boolean matches(java.lang.Object)
    {
        org.mockito.internal.matchers.CompareTo r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        boolean $z0;

        r0 := @this: org.mockito.internal.matchers.CompareTo;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $z0 = virtualinvoke r0.<org.mockito.internal.matchers.CompareTo: boolean matches(java.lang.Comparable)>($r2);

        return $z0;
    }
}
