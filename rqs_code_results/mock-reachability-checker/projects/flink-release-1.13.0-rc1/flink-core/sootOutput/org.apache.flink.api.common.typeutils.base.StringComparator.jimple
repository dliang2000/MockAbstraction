public final class org.apache.flink.api.common.typeutils.base.StringComparator extends org.apache.flink.api.common.typeutils.base.BasicTypeComparator
{
    private static final long serialVersionUID;
    private static final int HIGH_BIT;
    private static final int HIGH_BIT2;
    private static final int HIGH_BIT2_MASK;

    public void <init>(boolean)
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;
        boolean z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.flink.api.common.typeutils.base.BasicTypeComparator: void <init>(boolean)>(z0);

        return;
    }

    public int compareSerialized(org.apache.flink.core.memory.DataInputView, org.apache.flink.core.memory.DataInputView) throws java.io.IOException
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;
        org.apache.flink.core.memory.DataInputView r1, r2;
        java.lang.String r3, r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        r1 := @parameter0: org.apache.flink.core.memory.DataInputView;

        r2 := @parameter1: org.apache.flink.core.memory.DataInputView;

        r3 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r1);

        r4 = staticinvoke <org.apache.flink.types.StringValue: java.lang.String readString(java.io.DataInput)>(r2);

        i0 = virtualinvoke r3.<java.lang.String: int compareTo(java.lang.String)>(r4);

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.StringComparator: boolean ascendingComparison>;

        if $z0 == 0 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = neg i0;

     label2:
        return $i1;
    }

    public boolean supportsNormalizedKey()
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        return 1;
    }

    public boolean supportsSerializationWithKeyNormalization()
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        return 0;
    }

    public int getNormalizeKeyLen()
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        return 2147483647;
    }

    public boolean isNormalizedKeyPrefixOnly(int)
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;
        int i0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        i0 := @parameter0: int;

        return 1;
    }

    public void putNormalizedKey(java.lang.String, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;
        java.lang.String r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1, i2, $i4, $i5, $i6, $i10, $i12, $i15, $i19, $i21, i23, i24;
        char c3, $c7, $c8, $c13, $c16, $c17;
        byte $b9, $b11, $b14, $b18, $b20, $b22;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i23 := @parameter2: int;

        i0 := @parameter3: int;

        i1 = i23 + i0;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i24 = 0;

     label1:
        if i24 >= i2 goto label6;

        if i23 >= i1 goto label6;

        $i5 = i24;

        i24 = i24 + 1;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i5);

        if c3 >= 128 goto label2;

        $i21 = i23;

        i23 = i23 + 1;

        $b22 = (byte) c3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i21, $b22);

        goto label5;

     label2:
        if c3 >= 8192 goto label3;

        $i15 = i23;

        i23 = i23 + 1;

        $c16 = c3 >>> 7;

        $c17 = $c16 | 128;

        $b18 = (byte) $c17;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i15, $b18);

        if i23 >= i1 goto label5;

        $i19 = i23;

        i23 = i23 + 1;

        $b20 = (byte) c3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i19, $b20);

        goto label5;

     label3:
        $i6 = i23;

        i23 = i23 + 1;

        $c7 = c3 >>> 10;

        $c8 = $c7 | 192;

        $b9 = (byte) $c8;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i6, $b9);

        if i23 >= i1 goto label4;

        $i12 = i23;

        i23 = i23 + 1;

        $c13 = c3 >>> 2;

        $b14 = (byte) $c13;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i12, $b14);

     label4:
        if i23 >= i1 goto label5;

        $i10 = i23;

        i23 = i23 + 1;

        $b11 = (byte) c3;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i10, $b11);

     label5:
        goto label1;

     label6:
        if i23 >= i1 goto label7;

        $i4 = i23;

        i23 = i23 + 1;

        virtualinvoke r2.<org.apache.flink.core.memory.MemorySegment: void put(int,byte)>($i4, 0);

        goto label6;

     label7:
        return;
    }

    public org.apache.flink.api.common.typeutils.base.StringComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0, $r1;
        boolean $z0;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        $r1 = new org.apache.flink.api.common.typeutils.base.StringComparator;

        $z0 = r0.<org.apache.flink.api.common.typeutils.base.StringComparator: boolean ascendingComparison>;

        specialinvoke $r1.<org.apache.flink.api.common.typeutils.base.StringComparator: void <init>(boolean)>($z0);

        return $r1;
    }

    public volatile org.apache.flink.api.common.typeutils.TypeComparator duplicate()
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0, $r1;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        $r1 = virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringComparator: org.apache.flink.api.common.typeutils.base.StringComparator duplicate()>();

        return $r1;
    }

    public volatile void putNormalizedKey(java.lang.Object, org.apache.flink.core.memory.MemorySegment, int, int)
    {
        org.apache.flink.api.common.typeutils.base.StringComparator r0;
        java.lang.Object r1;
        org.apache.flink.core.memory.MemorySegment r2;
        int i0, i1;
        java.lang.String $r3;

        r0 := @this: org.apache.flink.api.common.typeutils.base.StringComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.flink.core.memory.MemorySegment;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = (java.lang.String) r1;

        virtualinvoke r0.<org.apache.flink.api.common.typeutils.base.StringComparator: void putNormalizedKey(java.lang.String,org.apache.flink.core.memory.MemorySegment,int,int)>($r3, r2, i0, i1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.flink.api.common.typeutils.base.StringComparator: int HIGH_BIT2_MASK> = 192;

        <org.apache.flink.api.common.typeutils.base.StringComparator: int HIGH_BIT2> = 8192;

        <org.apache.flink.api.common.typeutils.base.StringComparator: int HIGH_BIT> = 128;

        <org.apache.flink.api.common.typeutils.base.StringComparator: long serialVersionUID> = 1L;

        return;
    }
}
