public class org.powermock.api.support.SuppressCode extends java.lang.Object
{

    public void <init>()
    {
        org.powermock.api.support.SuppressCode r0;

        r0 := @this: org.powermock.api.support.SuppressCode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized transient void suppressConstructor(java.lang.reflect.Constructor[])
    {
        java.lang.reflect.Constructor[] r0;
        int i0, i1;
        java.lang.reflect.Constructor r2;
        java.lang.Class r3, $r5;
        java.lang.Class[] $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.reflect.Constructor[];

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("constructors cannot be null.");

        throw $r6;

     label1:
        i0 = lengthof r0;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r0[i1];

        staticinvoke <org.powermock.core.MockRepository: void addConstructorToSuppress(java.lang.reflect.Constructor)>(r2);

        r3 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        if r3 == null goto label3;

        $r4 = newarray (java.lang.Class)[1];

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r4[0] = $r5;

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressConstructor(java.lang.Class[])>($r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public static synchronized transient void suppressSpecificConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r0, r1);

        staticinvoke <org.powermock.core.MockRepository: void addConstructorToSuppress(java.lang.reflect.Constructor)>($r2);

        return;
    }

    public static synchronized transient void suppressConstructor(java.lang.Class[])
    {
        java.lang.Class[] r0;
        int i0, i1;
        java.lang.Class r2, r3;

        r0 := @parameter0: java.lang.Class[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r0[i1];

        r3 = r2;

     label2:
        if r3 == class "Ljava/lang/Object;" goto label3;

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressConstructor(java.lang.Class,boolean)>(r3, 0);

        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public static synchronized void suppressConstructor(java.lang.Class, boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.reflect.Constructor[] r1, r3;
        int i0, i1;
        java.lang.reflect.Constructor r2;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        goto label2;

     label1:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();

     label2:
        r1 = r3;

        i0 = lengthof r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        staticinvoke <org.powermock.core.MockRepository: void addConstructorToSuppress(java.lang.reflect.Constructor)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static synchronized transient void suppressField(java.lang.reflect.Field[])
    {
        java.lang.reflect.Field[] r0;
        int i0, i1;
        java.lang.reflect.Field r2;

        r0 := @parameter0: java.lang.reflect.Field[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0[i1];

        staticinvoke <org.powermock.core.MockRepository: void addFieldToSuppress(java.lang.reflect.Field)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static synchronized void suppressField(java.lang.Class[])
    {
        java.lang.Class[] r0;
        int i0, $i1, i2;
        java.lang.Class r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.reflect.Field[] $r4;

        r0 := @parameter0: java.lang.Class[];

        if r0 == null goto label1;

        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("You must supply at least one class.");

        throw $r3;

     label2:
        i0 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        r2 = r0[i2];

        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressField(java.lang.reflect.Field[])>($r4);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static synchronized transient void suppressField(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Field[] r2;
        int i0, $i1, i2;
        java.lang.reflect.Field r3;
        java.lang.Class[] $r4;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = r0;

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressField(java.lang.Class[])>($r4);

        goto label4;

     label2:
        r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Field[] getFields(java.lang.Class,java.lang.String[])>(r0, r1);

        i0 = lengthof r2;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        r3 = r2[i2];

        staticinvoke <org.powermock.core.MockRepository: void addFieldToSuppress(java.lang.reflect.Field)>(r3);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static synchronized transient void suppressMethod(java.lang.reflect.Method[])
    {
        java.lang.reflect.Method[] r0;
        int i0, i1;
        java.lang.reflect.Method r2;

        r0 := @parameter0: java.lang.reflect.Method[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0[i1];

        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static synchronized transient void suppressMethod(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class r0, r3;
        java.lang.Class[] r1;
        int i0, i1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressMethod(java.lang.Class,boolean)>(r0, 0);

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r1[i1];

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressMethod(java.lang.Class,boolean)>(r3, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static synchronized void suppressMethod(java.lang.Class[])
    {
        java.lang.Class[] r0;
        int i0, i1;
        java.lang.Class r2;

        r0 := @parameter0: java.lang.Class[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r0[i1];

        staticinvoke <org.powermock.api.support.SuppressCode: void suppressMethod(java.lang.Class,boolean)>(r2, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static synchronized transient void suppressMethod(java.lang.Class, java.lang.String, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.String[] r2, $r3;
        int $i0, i1, i2, i3, i4;
        java.lang.reflect.Method[] r4, r6;
        java.lang.reflect.Method r5, r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r1;

        r4 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, $r3);

        i1 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r5 = r4[i2];

        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        if r2 == null goto label4;

        $i0 = lengthof r2;

        if $i0 <= 0 goto label4;

        r6 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, r2);

        i3 = lengthof r6;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        r7 = r6[i4];

        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r7);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public static synchronized void suppressMethod(java.lang.Class, java.lang.String[])
    {
        java.lang.Class r0;
        java.lang.String[] r1;
        java.lang.reflect.Method[] r2;
        int i0, i1;
        java.lang.reflect.Method r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String[];

        r2 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method[] getMethods(java.lang.Class,java.lang.String[])>(r0, r1);

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static synchronized void suppressMethod(java.lang.Class, boolean)
    {
        java.lang.Class r0;
        boolean z0;
        java.lang.reflect.Method[] r1, r3;
        int i0, i1;
        java.lang.reflect.Method r2;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        goto label2;

     label1:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

     label2:
        r1 = r3;

        i0 = lengthof r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r2);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static synchronized void suppressMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        int $i0;
        java.lang.reflect.Method r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        $i0 = lengthof r2;

        if $i0 <= 0 goto label1;

        r3 = staticinvoke <org.powermock.reflect.Whitebox: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        goto label2;

     label1:
        r3 = staticinvoke <org.powermock.reflect.internal.WhiteboxImpl: java.lang.reflect.Method findMethodOrThrowException(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

     label2:
        staticinvoke <org.powermock.core.MockRepository: void addMethodToSuppress(java.lang.reflect.Method)>(r3);

        return;
    }
}
