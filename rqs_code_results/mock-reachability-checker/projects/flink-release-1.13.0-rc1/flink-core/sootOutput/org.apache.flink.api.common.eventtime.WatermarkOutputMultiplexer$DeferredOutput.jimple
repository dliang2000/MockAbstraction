class org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput extends java.lang.Object implements org.apache.flink.api.common.eventtime.WatermarkOutput
{
    private final org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state;

    public void <init>(org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState r1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state> = r1;

        return;
    }

    public void emitWatermark(org.apache.flink.api.common.eventtime.Watermark)
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput r0;
        org.apache.flink.api.common.eventtime.Watermark r1;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState $r2;
        long $l0;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput;

        r1 := @parameter0: org.apache.flink.api.common.eventtime.Watermark;

        $r2 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state>;

        $l0 = virtualinvoke r1.<org.apache.flink.api.common.eventtime.Watermark: long getTimestamp()>();

        virtualinvoke $r2.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: boolean setWatermark(long)>($l0);

        return;
    }

    public void markIdle()
    {
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput r0;
        org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState $r1;

        r0 := @this: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput;

        $r1 = r0.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$DeferredOutput: org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState state>;

        virtualinvoke $r1.<org.apache.flink.api.common.eventtime.WatermarkOutputMultiplexer$OutputState: void setIdle(boolean)>(1);

        return;
    }
}
