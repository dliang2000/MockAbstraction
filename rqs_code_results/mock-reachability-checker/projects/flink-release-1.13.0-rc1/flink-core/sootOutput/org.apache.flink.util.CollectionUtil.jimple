public final class org.apache.flink.util.CollectionUtil extends java.lang.Object
{
    public static final int MAX_ARRAY_SIZE;

    private void <init>()
    {
        org.apache.flink.util.CollectionUtil r0;
        java.lang.AssertionError $r1;

        r0 := @this: org.apache.flink.util.CollectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public static boolean isNullOrEmpty(java.util.Collection)
    {
        java.util.Collection r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean isNullOrEmpty(java.util.Map)
    {
        java.util.Map r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static java.util.stream.Stream mapWithIndex(java.util.Collection, java.util.function.BiFunction)
    {
        java.util.Collection r0;
        java.util.function.BiFunction r1;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.stream.Stream $r4, $r6;
        java.util.function.Function $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.function.BiFunction;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.stream.Stream stream()>();

        $r5 = staticinvoke <org.apache.flink.util.CollectionUtil$lambda_mapWithIndex_0__490: java.util.function.Function bootstrap$(java.util.function.BiFunction,java.util.concurrent.atomic.AtomicInteger)>(r1, $r3);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        return $r6;
    }

    public static java.util.Collection partition(java.util.Collection, int)
    {
        java.util.Collection r0, $r5;
        int i0, i1, i2, $i3, i4;
        java.util.Iterator r2;
        java.lang.Object r3, $r8;
        java.util.HashMap $r4;
        boolean $z0;
        java.lang.Integer $r6;
        java.util.function.Function $r7;
        java.util.List $r9;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(i0);

        $i3 = interfaceinvoke r0.<java.util.Collection: int size()>();

        i1 = $i3 / i0;

        i4 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        i2 = i4 % i0;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r7 = staticinvoke <org.apache.flink.util.CollectionUtil$lambda_partition_1__21: java.util.function.Function bootstrap$(int)>(i1);

        $r8 = interfaceinvoke $r4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>($r6, $r7);

        $r9 = (java.util.List) $r8;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r3);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        return $r5;
    }

    public static java.util.Collection project(java.util.Collection, java.util.function.Function)
    {
        java.util.Collection r0, $r6;
        java.util.function.Function r1;
        java.util.stream.Stream $r2, $r3;
        java.util.stream.Collector $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.util.function.Function;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.stream.Stream stream()>();

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r1);

        $r4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r4);

        $r6 = (java.util.Collection) $r5;

        return $r6;
    }

    public static java.util.List iterableToList(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        java.util.function.Consumer $r5;
        java.util.List $r6;

        r0 := @parameter0: java.lang.Iterable;

        if r0 != null goto label1;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r6;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = staticinvoke <org.apache.flink.util.CollectionUtil$add__493: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r2);

        interfaceinvoke $r3.<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>($r5);

        return $r2;
    }

    public static java.util.List iteratorToList(java.util.Iterator)
    {
        java.util.Iterator r0;
        java.util.ArrayList $r2;
        java.util.function.Consumer $r4;
        java.util.List $r5;

        r0 := @parameter0: java.util.Iterator;

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.flink.util.CollectionUtil$add__492: java.util.function.Consumer bootstrap$(java.util.ArrayList)>($r2);

        interfaceinvoke r0.<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>($r4);

        return $r2;
    }

    public static java.util.List lambda$partition$1(int, java.lang.Integer)
    {
        int i0;
        java.lang.Integer r0;
        java.util.ArrayList $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Integer;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        return $r1;
    }

    public static java.lang.Object lambda$mapWithIndex$0(java.util.function.BiFunction, java.util.concurrent.atomic.AtomicInteger, java.lang.Object)
    {
        java.util.function.BiFunction r0;
        java.util.concurrent.atomic.AtomicInteger r1;
        java.lang.Object r2, $r4;
        int $i0;
        java.lang.Integer $r3;

        r0 := @parameter0: java.util.function.BiFunction;

        r1 := @parameter1: java.util.concurrent.atomic.AtomicInteger;

        r2 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke r0.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(r2, $r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.flink.util.CollectionUtil: int MAX_ARRAY_SIZE> = 2147483639;

        return;
    }
}
