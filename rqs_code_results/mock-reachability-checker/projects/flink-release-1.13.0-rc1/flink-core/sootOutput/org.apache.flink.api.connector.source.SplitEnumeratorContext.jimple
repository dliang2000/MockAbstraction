public interface  org.apache.flink.api.connector.source.SplitEnumeratorContext extends java.lang.Object
{

    public abstract org.apache.flink.metrics.MetricGroup metricGroup();

    public abstract void sendEventToSourceReader(int, org.apache.flink.api.connector.source.SourceEvent);

    public abstract int currentParallelism();

    public abstract java.util.Map registeredReaders();

    public abstract void assignSplits(org.apache.flink.api.connector.source.SplitsAssignment);

    public void assignSplit(org.apache.flink.api.connector.source.SourceSplit, int)
    {
        org.apache.flink.api.connector.source.SplitEnumeratorContext r0;
        org.apache.flink.api.connector.source.SourceSplit r1;
        int i0;
        org.apache.flink.api.connector.source.SplitsAssignment $r2;

        r0 := @this: org.apache.flink.api.connector.source.SplitEnumeratorContext;

        r1 := @parameter0: org.apache.flink.api.connector.source.SourceSplit;

        i0 := @parameter1: int;

        $r2 = new org.apache.flink.api.connector.source.SplitsAssignment;

        specialinvoke $r2.<org.apache.flink.api.connector.source.SplitsAssignment: void <init>(org.apache.flink.api.connector.source.SourceSplit,int)>(r1, i0);

        interfaceinvoke r0.<org.apache.flink.api.connector.source.SplitEnumeratorContext: void assignSplits(org.apache.flink.api.connector.source.SplitsAssignment)>($r2);

        return;
    }

    public abstract void signalNoMoreSplits(int);

    public abstract void callAsync(java.util.concurrent.Callable, java.util.function.BiConsumer);

    public abstract void callAsync(java.util.concurrent.Callable, java.util.function.BiConsumer, long, long);

    public abstract void runInCoordinatorThread(java.lang.Runnable);
}
