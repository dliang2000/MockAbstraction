public class org.apache.flink.api.java.typeutils.EitherTypeInfoFactory extends org.apache.flink.api.common.typeinfo.TypeInfoFactory
{

    public void <init>()
    {
        org.apache.flink.api.java.typeutils.EitherTypeInfoFactory r0;

        r0 := @this: org.apache.flink.api.java.typeutils.EitherTypeInfoFactory;

        specialinvoke r0.<org.apache.flink.api.common.typeinfo.TypeInfoFactory: void <init>()>();

        return;
    }

    public org.apache.flink.api.common.typeinfo.TypeInformation createTypeInfo(java.lang.reflect.Type, java.util.Map)
    {
        org.apache.flink.api.java.typeutils.EitherTypeInfoFactory r0;
        java.lang.reflect.Type r1;
        java.util.Map r2;
        org.apache.flink.api.common.typeinfo.TypeInformation r3, r4;
        java.lang.Object $r5, $r6;
        org.apache.flink.api.java.typeutils.EitherTypeInfo $r7;
        org.apache.flink.api.common.functions.InvalidTypesException $r8, $r9;

        r0 := @this: org.apache.flink.api.java.typeutils.EitherTypeInfoFactory;

        r1 := @parameter0: java.lang.reflect.Type;

        r2 := @parameter1: java.util.Map;

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("L");

        r3 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r5;

        $r6 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("R");

        r4 = (org.apache.flink.api.common.typeinfo.TypeInformation) $r6;

        if r3 != null goto label1;

        $r9 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r9.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Type extraction is not possible on Either type as it does not contain information about the \'left\' type.");

        throw $r9;

     label1:
        if r4 != null goto label2;

        $r8 = new org.apache.flink.api.common.functions.InvalidTypesException;

        specialinvoke $r8.<org.apache.flink.api.common.functions.InvalidTypesException: void <init>(java.lang.String)>("Type extraction is not possible on Either type as it does not contain information about the \'right\' type.");

        throw $r8;

     label2:
        $r7 = new org.apache.flink.api.java.typeutils.EitherTypeInfo;

        specialinvoke $r7.<org.apache.flink.api.java.typeutils.EitherTypeInfo: void <init>(org.apache.flink.api.common.typeinfo.TypeInformation,org.apache.flink.api.common.typeinfo.TypeInformation)>(r3, r4);

        return $r7;
    }
}
